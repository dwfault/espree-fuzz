function o0(o1) {
    for (var o2 = [
    {
        name: "OS1558391: assignment to 'length' after defineProperty with getter function should not trigger assertion",
        o3: function() {
            function o4() { }
            Object.defineProperty(o4, 'length', {
                get: function () { }
            })
            o5.o6(function () { o4.length = 1; }, "assertion failure on assignment to 'length' after defineProperty with getter");
         }
    },
    {
        name: "OS1616633: defineProperty with getter function after sealing a function object should not trigger assertion",
        o3: function() {
            function o7(name) {
                var o4=function () { }
                Object.seal(o4);
                Object.defineProperty(o4, name, {
                    get: function () { }
                    });
            }
/* This check seems wrong in that we are trying to change length to a getter, which should throw.
 * Verified that V8 also throws here.
 *          assert.doesNotThrow(function () { g('length') }, "assertion failure on defineProperty 'length' with getter after sealing a function object");
 */
            o5.o8(function () { o7('arguments') }, o9, "Cannot redefine non-configurable property 'arguments'");
            o5.o8(function () { o7('caller') }, o9, "Cannot redefine non-configurable property 'caller'");
         }
    },
    {
        name: "OS1658052: defineProperty with value after sealing a function object should not trigger assertion",
        o3: function() {
            function o7(name) {
                var o4=function () { }
                Object.seal(o4);
                Object.defineProperty(o4, name, {
                    value: 0
                    });
            }
            o5.o6(function () { o7('length') }, "assertion failure on defineProperty 'length' with value after sealing a function object");
            o5.o8(function () { o7('arguments') }, o9, "Cannot redefine non-configurable property 'arguments'");
            o5.o8(function () { o7('caller') }, o9, "Cannot redefine non-configurable property 'caller'");
         }
    },
    {
        name: "OS1893544: defineProperty with {writable: false, configurable:true} after defineProperty with getter on a function object should not trigger assertion",
        o3: function() {
            function o7(name) {
                var o4=function () { }
                Object.defineProperty(o4, name, {
                    get: function () { },
                    });
                Object.defineProperty(o4, name, {
                    writable: false,
                    configurable: true
                    });
            }
            o5.o6(function () { o7('length') }, "assertion failure on defineProperty 'length' with {writable: false, configurable:true} after defineProperty with getter on a function object");
            o5.o8(function () { o7('arguments') }, o9, "Cannot redefine non-configurable property 'arguments'");
            o5.o8(function () { o7('caller') }, o9, "Cannot redefine non-configurable property 'caller'");
         }
    },
]; in o1.o3.call({})) {
    }

    for (let o2 in o1.o3.call({})) {
    }
}

function o15() {
    delete Object.prototype.__proto__;
};

o4();