function o0() {
    var o6 = 1;
    function o1594(o4, o5, o8) {
        var o12 = 0;
        for(var o13 = 0; o13 < o5.length; ++o13) {
            o12 += o13;
            for(var o17 = 0; o17 < 2; ++o17) {
                o12 += o17;
                o65(o5);
                o12 += o1595(o4, o5, o17);
            }
            o12 += o1595(o4, o5, o13);
        }

        function o1595(o4, o5, o9) {
            return (o5[0].o6 = -o5[0].o6 - 1, o5[0].o6);
        }
        return o12;
    }
    var o3 = new RegExp("(ab)".repeat(o1), "g"); // g flag to trigger the vulnerable path
    var o6 = "ab".repeat(o1); // matches have to be at least size 2 to prevent interning
    var o7 = (o6 + "|").repeat(o2);
    while (true) {
        var o18=0;
        var o9 = [];
        o7.replace(o3, function() {
            for (var o11 = 1; o11 < arguments.length-2; ++o11) {
                if (typeof arguments[o11] !== 'string') {
                    o14 = arguments[o11];
                    throw "success";
                }
                o9[o8++] = arguments[o11];  // root everything to force GC
            }
            return "x";
        });
    }
}
try { o0(o4.o5[o13]); } catch (o15) { }
o16.o17(typeof(o14));  // will print "object"