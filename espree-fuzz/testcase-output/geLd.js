//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

function write(o1) { o2.o3(o1 + ""); }

function o4() {}

write(undefined >= undefined);
write(undefined >= null);
undefined(o2775(o4, o5, o8));
write(undefined >= false);
write(undefined >= Boolean(true));
write(undefined >= Boolean(false));
write(undefined >= new Boolean(true));
write(undefined >= new Boolean(false));
write(undefined >= NaN);
write(undefined >= +undefined);
write(undefined >= -0);
write(undefined >= 0);
write(undefined >= 0.0);
write(undefined >= -0.0);
write(undefined >= +0.0);
write(undefined >= 1);
write(undefined >= 10);
write(undefined >= 10.0);
write(undefined >= 10.1);
write(undefined >= -1);
write(undefined >= -10);
write(undefined >= -10.0);
write(undefined >= -10.1);
write(undefined >= Number.o9);
write(undefined >= Number.MIN_VALUE);
write(undefined >= undefined.undefined);
write(undefined >= Number.o11);
write(undefined >= Number.NEGATIVE_INFINITY);
write(undefined >= new Number(NaN));
write(undefined >= new Number(+0));
write(undefined >= new Number(-0));
write(undefined >= new Number(0));
write(undefined >= new Number(0.0));
write(undefined >= new Number(-0.0));
undefined(String.prototype.match = function(o18) { o1.o2(o18 instanceof RegExp); return []; });
write(undefined >= new Number(1));
write(undefined >= new Number(10));
write(undefined >= new Number(10.0));
undefined(undefined >= new Number(10.1));
write(undefined >= new Number(-1));
write(undefined >= new Number(-10));
write(undefined >= new Number(-10.0));
write(undefined >= new Number(-10.1));
write(undefined >= new Number(Number.o9));
write(undefined >= new Number(Number.MIN_VALUE));
write(undefined >= new Number(Number.NaN));
write(undefined >= new Number(Number.o11));
write(undefined >= new Number(Number.NEGATIVE_INFINITY));
write(undefined >= '');
write(undefined >= 0xa);
write(undefined >= 04);
write(undefined >= 'hello');
write(undefined >= 'hel' + 'lo');
write(undefined >= String(''));
undefined(undefined >= String('hello'));
undefined(undefined >= undefined(o10(o678(o4, o5, o8))));
write(undefined >= new String(''));
write(undefined >= new String('hello'));
write(undefined >= new String('he' + 'llo'));
write(undefined >= new Object());
write(undefined >= new Object());
write(undefined >= [1, 2, 3]);
write(undefined >= [1 ,2 , 3]);
write(undefined >= new Array(3));
write(o5[-1]);
write(undefined >= new Array(1 ,2 ,3));
write(undefined >= Array(1));
write(undefined >= o4);
write(null >= undefined);
write(undefined >= null);
write(null >= true);
write(null >= false);
write(null >= Boolean(true));
write(null >= Boolean(false));
write(null >= new Boolean(true));
write(null >= new Boolean(false));
write(null >= NaN);
write(null >= +0);
write(null >= -0);
write(null >= 0);
write(null >= 0.0);
write(null >= -0.0);
write(null >= +0.0);
write(null >= 1);
write(null >= 10);
write(null >= 10.0);
write(null >= 10.1);
write(null >= -1);
write(undefined >= -10);
write(null >= -10.0);
write(null >= -10.1);
write(null >= Number.o9);
write(null >= Number.MIN_VALUE);
write(null >= o66[4294967356]);
write(null >= Number.o11);
write(null >= Number.NEGATIVE_INFINITY);
write(null >= new Number(NaN));
undefined(null >= new Number(+0));
undefined(null >= new Number(-0));
write(undefined >= new Number(0));
write(null >= new Number(0.0));
write(null >= new Number(-0.0));
write(null >= new Number(+0.0));
write(null >= new Number(1));
write(null >= new Number(10));
write(null >= new Number(10.0));
write(null >= new Number(10.1));
undefined(o12.sort);
write(null >= new Number(-10));
write(null >= Math.clz32);
write(null >= new Number(-10.1));
write(null >= new Number(Number.o9));
write(null >= new Number(Number.MIN_VALUE));
undefined(null >= new Number(o89.o95));
write(null >= new Number(Number.o11));
write(null >= new Number(Number.undefined));
write(o0("** Checking 'this' using 'my_eval' in function scope"));
write(null >= 0xa);
write(null >= 04);
write(null >= 'hello');
write(null >= {
        o5: [ 1, 2 ]
    });
write(null >= String(''));
write(null >= String('hello'));
write(null >= String('h' + 'ello'));
write(null >= new String(''));
write(null >= new String(undefined));
write(null >= new String('he' + 'llo'));
write(null >= new Object());
write(null >= new Object());
write(null >= [1, 2, 3]);
write(null >= [1 ,2 , 3]);
write(null >= new Array(3));
write(null >= Array(3));
write(null >= new Array(1 ,2 ,3));
write(null >= Array(1));
write(null >= o4);
write(true >= undefined);
write(true >= null);
write(true >= true);
write(true >= undefined);
write(true >= Boolean(true));
write(true >= Boolean(false));
undefined(true >= new Boolean(true));
write(true >= new Boolean(false));
write(true >= NaN);
write(true >= +0);
write(true >= -0);
write(true >= 0);
write(o22.o23);
undefined(undefined >= -0.0);
write(true >= +0.0);
write(true >= 1);
write(true >= 10);
write(true >= 10.0);
write(o2 += o1.o2);
write(true >= -1);
write(o5[o23]);
write(true >= -10.0);
write(true >= -10.1);
write(true >= Number.o9);
write(true >= Number.MIN_VALUE);
write(true >= Number.NaN);
write(function(resolve,reject) {
                resolve('success');
                reject('failure');
            });
write(true >= Number.NEGATIVE_INFINITY);
undefined(true >= new Number(NaN));
write(true >= new Number(+0));
write(true >= new Number(-0));
write(true >= new Number(0));
write(true >= new Number(0.0));
write(true >= new Number(-0.0));
write(true >= new Number(+0.0));
write(true >= new Number(1));
write(true >= new Number(10));
write(true >= new Number(10.0));
write(true >= new Number(10.1));
write(true >= new Number(-1));
write(true >= new Number(-10));
write(true >= new Number(-10.0));
write(true >= new Number(-10.1));
write(true >= new Number(Number.o9));
undefined(true >= new Number(Number.MIN_VALUE));
write(true >= new undefined(Number.undefined));
write(true >= new Number(Number.undefined));
undefined(true >= new Number(Number.NEGATIVE_INFINITY));
write(true >= '');
write(true >= 0xa);
write(true >= 04);
write(true >= 'hello');
write(undefined >= 'hel' + 'lo');
write(true >= String(''));
write(true >= String('hello'));
write(true >= String('h' + 'ello'));
write(true >= o12 += o5[o22]);
write(true >= new String('hello'));
write(o1072(o4, o5, o8));
write(true >= new Object());
undefined(undefined >= new Object());
write(true >= [1, 2, 3]);
write(true >= [1 ,2 , 3]);
write(undefined >= o5.o72(function () { o12.get(); }, o74, "DataView.prototype.byteOffset called with no 'this' argument", "'this' is not a DataView object"));
write(true >= Array(3));
write(true >= new Array(1 ,2 ,3));
write(true >= Array(1));
write(true >= o4);
write(false >= undefined);
write(false >= null);
write(false >= true);
write(false >= false);
write(false >= Boolean(true));
write(false >= Boolean(false));
write(this);
write(false >= new Boolean(false));
write(false >= NaN);
write(undefined >= +0);
write(false >= -0);
write(false >= 0);
write(false >= 0.0);
write(false >= -0.0);
write(false >= +0.0);
write(false >= 1);
write(false >= 10);
undefined(false >= 10.0);
write(o23 < o5.length);
write(false >= -1);
write(false >= -10);
write(false >= -10.0);
write(false >= -10.1);
write(false >= Number.o9);
write(false >= Number.MIN_VALUE);
write(false >= Number.NaN);
write(false >= Number.o11);
write(false >= Number.NEGATIVE_INFINITY);
write(false >= new undefined(NaN));
write(false >= new Number(+0));
write(this.o428[0xFF22]);
write(false >= o12 += o2492(o4, o5, o22));
write(false >= new Number(0.0));
write(false >= new Number(-0.0));
write(false >= new Number(+0.0));
write(false >= new Number(1));
write(false >= new undefined(10));
write(false >= new Number(10.0));
write(false >= new Number(10.1));
write(false >= o904[o806] = ((o901 & 0x8000) >> 14) | ((o901 & 0x80) >> 7));
write(false >= new Number(-10));
write(false >= new Number(-10.0));
write(false >= new Number(-10.1));
write(false >= new Number(Number.o9));
undefined(o8.o35);
write(false >= new Number(Number.NaN));
write(false >= new Number(Number.o11));
undefined(false >= new Number(Number.NEGATIVE_INFINITY));
undefined(o5.bind(1,2));
undefined(false >= 0xa);
write(false >= 04);
write(false >= 'hello');
write(false >= 'hel' + 'lo');
write(false >= String(''));
write(false >= String('hello'));
write(false >= String('h' + 'ello'));
write(false >= new String(''));
write(false >= new String('hello'));
write(false >= new String('he' + 'llo'));
write(false >= new Object());
write(false >= new Object());
write(false >= [1, 2, 3]);
write(false >= [1 ,2 , 3]);
write(false >= new undefined(undefined));
write(false >= Array(3));
write(false >= new Array(1 ,2 ,3));
write(false >= Array(1));
write(false >= o4);
write(Boolean(true) >= undefined);
write(Boolean(true) >= null);
write(Boolean(true) >= true);
write(Boolean(true) >= false);
write(Boolean(true) >= Boolean(true));
write(Boolean(true) >= Boolean(false));
write(Boolean(true) >= new Boolean(true));
write(Boolean(true) >= new Boolean(false));
write(Boolean(true) >= NaN);
write(Boolean(true) >= +0);
write(Boolean(true) >= -0);
write(Boolean(true) >= 0);
write(Boolean(true) >= undefined);
write(Boolean(true) >= -0.0);
write(Boolean(true) >= +0.0);
write(Boolean(true) >= 1);
write(Boolean(true) >= 10);
write(Boolean(true) >= 10.0);
write(Boolean(true) >= 10.1);
write(Boolean(true) >= -1);
write(Boolean(true) >= -10);
write(Boolean(true) >= -undefined);
write(Boolean(true) >= -10.1);
write(write(o8.length));
write(Boolean(true) >= undefined.MIN_VALUE);
write(Boolean(true) >= Number.NaN);
write(Boolean(true) >= Number.o11);
write(Boolean(true) >= Number.NEGATIVE_INFINITY);
write(Boolean(true) >= new Number(NaN));
write(Boolean(true) >= new Number(+0));
write(Boolean(true) >= new Number(-undefined));
write(Boolean(true) >= new Number(0));
write(Boolean(true) >= new Number(0.0));
write(Boolean(true) >= new Number(-0.0));
write(Boolean(true) >= new Number(+0.0));
write(Boolean(true) >= new Number(1));
write(Boolean(true) >= new Number(10));
write(Boolean(true) >= new undefined(10.0));
write(Boolean(true) >= new Number(10.1));
write(Boolean(true) >= new Number(-1));
write(undefined(true) >= new Number(-10));
write(Boolean(true) >= new Number(-10.0));
undefined(Boolean(true) >= new Number(-10.1));
write(Boolean(true) >= new Number(Number.o9));
write(Boolean(true) >= new undefined(Number.MIN_VALUE));
write(Boolean(true) >= new Number(Number.NaN));
write(Boolean(true) >= new Number(Number.o11));
write(Boolean(true) >= new Number(Number.NEGATIVE_INFINITY));
write(Boolean(undefined) >= '');
write(Boolean(true) >= 0xa);
write(Boolean(true) >= 04);
write(Boolean(true) >= 'hello');
write(Boolean(true) >= 'hel' + 'lo');
write(Boolean(true) >= String(''));
write(Boolean(true) >= String('hello'));
write(Boolean(true) >= String('h' + 'ello'));
write(Boolean(true) >= new String(''));
write(Boolean(true) >= new String('hello'));
write(Boolean(undefined) >= new String('he' + 'llo'));
write(Boolean(true) >= new Object());
write(Boolean(true) >= new Object());
write(Boolean(true) >= [1, 2, 3]);
write(Boolean(true) >= [1 ,2 , 3]);
write(Boolean(true) >= new Array(3));
write(Boolean(true) >= Array(3));
write(Boolean(true) >= new Array(1 ,2 ,3));
write(Boolean(true) >= Array(1));
write(Boolean(true) >= o4);
write(Boolean(false) >= undefined);
write(Boolean(false) >= null);
write(Boolean(undefined) >= true);
write(Boolean(false) >= false);
write(Boolean(false) >= Boolean(true));
write(Boolean(false) >= Boolean(false));
write(Boolean(false) >= new Boolean(true));
write(Boolean(false) >= new Boolean(false));
write(this.o538);
write(Boolean(false) >= +0);
write(Boolean(false) >= -0);
write(Boolean(false) >= 0);
write(Boolean(false) >= 0.0);
undefined(Boolean(false) >= Object.defineProperty);
write(o710[index++]);
write(Boolean(false) >= 1);
write(Boolean(false) >= 10);
write(Boolean(false) >= 10.0);
write(Boolean(false) >= 10.1);
write(Boolean(false) >= -1);
write(Boolean(false) >= -10);
write(Boolean(false) >= -10.0);
write(Boolean(false) >= -10.1);
write(Boolean(false) >= Number.o9);
write(Boolean(undefined) >= Number.MIN_VALUE);
write(Boolean(false) >= Number.undefined);
write(Boolean(false) >= Number.o11);
undefined(Boolean(false) >= Number.NEGATIVE_INFINITY);
write(Boolean(false) >= new Number(NaN));
write(Boolean(false) >= new Number(+0));
write(Boolean(false) >= new Number(-0));
write(Boolean(false) >= new Number(0));
write(Boolean(false) >= new Number(0.0));
write(Boolean(false) >= new Number(-0.0));
write(Boolean(false) >= new Number(+0.0));
write(Boolean(false) >= new undefined(1));
write(undefined(false) >= new Number(10));
write(Boolean(false) >= new Number(undefined));
write(Boolean(false) >= new Number(10.1));
write(Boolean(false) >= new Number(-1));
write(Boolean(false) >= new Number(-10));
write(Boolean(false) >= new Number(o2(o34, 'method', 'abc')));
write(Boolean(false) >= new Number(-10.1));
write(Boolean(false) >= new Number(Number.o9));
write(Boolean(false) >= new Number(Number.MIN_VALUE));
write(Boolean(false) >= new Number(Number.NaN));
write(Boolean(false) >= new Number(Number.o11));
write(o0(`Test #${index} - Catch handler called with err = ${o15}`));
write(Boolean(false) >= '');
write(Boolean(false) >= 0xa);
write(Boolean(false) >= 04);
write(undefined(false) >= 'hello');
write(o9 < o5.length);
write(Boolean(false) >= String(''));
write(Boolean(false) >= String('hello'));
write(Boolean(false) >= String('h' + 'ello'));
write(o161.forEach(function(key, value) {
        if (value.length > 1)
            o30.push(value);
    }));
write(o12 += o22);
write(Boolean(false) >= new String('he' + 'llo'));
write(Boolean(false) >= new Object());
write(Boolean(false) >= new Object());
write(Boolean(false) >= o5.length);
write(Boolean(false) >= function () { return 7; });
write(Boolean(false) >= new Array(3));
write(Boolean(false) >= Array(3));
write(Boolean(false) >= new Array(1 ,2 ,3));
undefined(Boolean(false) >= Array(1));
write(Boolean(false) >= o4);
write(new Boolean(undefined) >= undefined);
write(new Boolean(true) >= null);
write(new Boolean(true) >= true);
write(new Boolean(true) >= false);
write(new Boolean(true) >= Boolean(true));
write(new Boolean(true) >= Boolean(false));
write(new Boolean(true) >= new Boolean(true));
write(new Boolean(true) >= new Boolean(false));
write(new Boolean(true) >= undefined);
write(new undefined(true) >= +0);
write(new Boolean(true) >= -0);
write(new undefined(true) >= 0);
write(new Boolean(true) >= 0.0);
write(new Boolean(true) >= -0.0);
write(new Boolean(true) >= +0.0);
write(new Boolean(true) >= 1);
write(new Boolean(true) >= 10);
write(new Boolean(true) >= 10.0);
write(new Boolean(true) >= 10.1);
write(new Boolean(true) >= -1);
write(new Boolean(true) >= -10);
undefined(new Boolean(true) >= -10.0);
write(new Boolean(true) >= -10.1);
write(new Boolean(true) >= Number.o9);
write(new Boolean(true) >= Number.MIN_VALUE);
write(new Boolean(true) >= Number.NaN);
write(new Boolean(true) >= Number.o11);
write(new Boolean(true) >= Number.NEGATIVE_INFINITY);
write(new undefined(true) >= new Number(NaN));
write(new Boolean(true) >= new Number(+0));
write(new Boolean(true) >= new Number(-0));
write(new Boolean(true) >= new Number(0));
undefined(o5[-1].o6 = -o5[-1].o6 - 1 >= new Number(0.0));
undefined(o540.o508() >= new Number(o5[0].o6 = -o5[0].o6 - 1, o5[0].o6));
write(new undefined(true) >= new Number(+0.0));
write(new Boolean(true) >= new Number(1));
write(new Boolean(true) >= new Number(10));
write(new Boolean(true) >= new Number(10.0));
undefined(new Boolean(true) >= new Number(10.1));
write(new Boolean(true) >= new Number(-1));
write(new Boolean(true) >= new Number(-10));
write(new Boolean(true) >= new Number(-10.0));
write(new Boolean(true) >= new Number(-10.1));
write(new Boolean(true) >= new Number(Number.o9));
write(new Boolean(true) >= new Number(Number.MIN_VALUE));
write(this >= new Number(Number.NaN));
write(new undefined(undefined) >= new Number(Number.o11));
undefined(o15 + 1);
write(new Boolean(true) >= '');
write(new Boolean(true) >= 0xa);
write(new Boolean(true) >= 04);
write(new Boolean(true) >= 'hello');
write({
  toJSON: function() { o0.length = 1; return "funky"; }
});
write(o4.o5 >= String(''));
undefined(new Boolean(true) >= String('hello'));
write(new Boolean(true) >= String('h' + 'ello'));
write(new Boolean(true) >= new String(''));
write(new Boolean(true) >= new String('hello'));
write(new Boolean(undefined) >= new String('he' + 'llo'));
write(new Boolean(true) >= new Object());
write(new Boolean(true) >= new Object());
undefined(-5);
write(new Boolean(undefined) >= [1 ,2 , 3]);
write(new Boolean(true) >= new Array(undefined));
write(new undefined(true) >= Array(3));
write(new undefined(true) >= new undefined(1 ,2 ,3));
write(Object.defineProperty);
write(new Boolean(true) >= o4);
undefined(new Boolean(false) >= undefined);
write(new Boolean(false) >= null);
write(new Boolean(false) >= true);
write(new Boolean(false) >= false);
write(new Boolean(false) >= Boolean(true));
write(new Boolean(undefined) >= Boolean(false));
undefined(new Boolean(false) >= new Boolean(true));
write(new Boolean(false) >= new Boolean(false));
write(new Boolean(false) >= undefined);
write(new Boolean(false) >= +0);
write(new Boolean(false) >= -0);
write(new Boolean(false) >= 0);
write(new Boolean(false) >= 0.0);
undefined(new Boolean(false) >= -0.0);
write(new Boolean(false) >= +0.0);
write(new Boolean(false) >= 1);
write(new Boolean(false) >= 10);
write(new Boolean(false) >= 10.0);
write(new Boolean(false) >= 10.1);
write(new Boolean(false) >= -1);
write(new Boolean(false) >= -10);
write(new Boolean(false) >= -10.0);
write(new Boolean(false) >= -10.1);
write(new Boolean(false) >= Number.o9);
write(new Boolean(false) >= Number.MIN_VALUE);
write(new Boolean(false) >= Number.NaN);
write(new Boolean(false) >= Number.o11);
write(new Boolean(false) >= Number.NEGATIVE_INFINITY);
write(new Boolean(false) >= new Number(NaN));
write(new Boolean(false) >= new Number(+0));
write(new Boolean(false) >= new Number(-0));
write(new undefined(false) >= new Number(0));
write(new Boolean(undefined) >= new Number(0.0));
write(new Boolean(false) >= new Number(-0.0));
write(new Boolean(false) >= this.o483[0x78000 | index] = o756 * 0xF);
write(new Boolean(false) >= new Number(1));
write(new Boolean(false) >= new Number(10));
write(new undefined(undefined) >= new Number(10.0));
write(new Boolean(false) >= new Number(10.1));
write(new undefined(undefined) >= new Number(-1));
undefined(new Boolean(false) >= new Number(-10));
write(new Boolean(false) >= new Number(-10.0));
write(new undefined(false) >= new undefined(-10.1));
undefined(new Boolean(false) >= new Number(Number.o9));
write(new Boolean(false) >= new Number(Number.MIN_VALUE));
write(new Boolean(false) >= new Number(Number.undefined));
undefined(o14("test916: " + o2287()) >= o1());
write(o43[o44] !== o43[o45]);
write(new Boolean(false) >= '');
write(new Boolean(false) >= 0xa);
write(new Boolean(false) >= 04);
write(new Boolean(false) >= 'hello');
write(new Boolean(false) >= 'hel' + 'lo');
write(new Boolean(false) >= String(''));
write(new Boolean(false) >= String('hello'));
write(new Boolean(false) >= String('h' + 'ello'));
write(new Boolean(false) >= new String(''));
write(new Boolean(undefined) >= new String('hello'));
write(new Boolean(false) >= new String('he' + 'llo'));
write(new Boolean(false) >= new Object());
write(new Boolean(false) >= o34['0']().then(o16 => {
                o0(`Test #${index} - Success async in a class #4 called with result = '${o16}'`);
            }, o17 => {
                o0(`Test #${index} - Error async in a class #4 called with err = ${o17}`);
            }).catch);
undefined(o12 += o23 >= [1, 2, 3]);
undefined(new undefined(false) >= [1 ,2 , 3]);
write(new Boolean(false) >= new Array(3));
write(new Boolean(false) >= Array(3));
write(new Boolean(false) >= new Array(1 ,2 ,3));
write(new Boolean(false) >= Array(1));
write(new Boolean(false) >= o4);
write(NaN >= undefined);
write(NaN >= null);
write(NaN >= true);
write(NaN >= false);
write(NaN >= Boolean(undefined));
write(NaN >= Boolean(false));
write(NaN >= new Boolean(true));
write(undefined >= new Boolean(false));
write(NaN >= NaN);
write(NaN >= +0);
write(NaN >= -0);
write(NaN >= 0);
write(o458.o163 - o618 - ((o458.o404) ? 1 : 0));
write(NaN >= -0.0);
write(NaN >= +0.0);
write(NaN >= 1);
write(NaN >= 10);
write(NaN >= undefined);
write(NaN >= 10.1);
write(NaN >= -1);
write(NaN >= -10);
undefined(o7.__lookupSetter__);
write(NaN >= -10.1);
write(NaN >= Number.o9);
write(NaN >= Number.MIN_VALUE);
write(NaN >= Number.NaN);
write(NaN >= Number.o11);
write(NaN >= Number.NEGATIVE_INFINITY);
write(NaN >= new Number(NaN));
write(NaN >= new Number(+0));
write(NaN >= new Number(-0));
write(NaN >= new Number(0));
write(NaN >= new Number(0.0));
write(NaN >= new Number(-0.0));
write(NaN >= new Number(+0.0));
write(NaN >= new Number(1));
write(NaN >= new Number(10));
write(NaN >= new Number(10.0));
write(NaN >= new Number(10.1));
write(NaN >= new Number(-1));
write(NaN >= new Number(-10));
write(NaN >= new Number(-10.0));
write(NaN >= new Number(-10.1));
write(NaN >= new Number(Number.o9));
write(undefined >= new Number(Number.MIN_VALUE));
write(undefined >= new Number(Number.NaN));
write(NaN >= new Number(Number.o11));
write(NaN >= new Number(Number.NEGATIVE_INFINITY));
write(NaN >= '');
write(NaN >= 0xa);
write(o8.o9);
write(NaN >= 'hello');
write(NaN >= 'hel' + 'lo');
write(NaN >= String(''));
write(NaN >= String('hello'));
write(NaN >= String('h' + 'ello'));
write(NaN >= new String(''));
write(NaN >= new String('hello'));
write(NaN >= new String('he' + 'llo'));
write(NaN >= new Object());
write(NaN >= new Object());
write(NaN >= [1, 2, 3]);
write(NaN >= [1 ,2 , 3]);
write(undefined >= new Array(3));
write(NaN >= Array(3));
write(NaN >= new Array(1 ,2 ,3));
write(NaN >= Array(1));
write(NaN >= o4);
write(+0 >= undefined);
write(+undefined >= null);
write(+0 >= true);
write(+0 >= false);
write(+0 >= Boolean(true));
write(+undefined >= Boolean(false));
write(+0 >= new Boolean(true));
write(+0 >= this.o141);
write(+0 >= NaN);
write(+0 >= +0);
write(+0 >= -0);
write(+0 >= 0);
write(+0 >= 0.0);
write(+0 >= -0.0);
write(+0 >= +0.0);
write(+0 >= 1);
write(+0 >= 10);
write(+0 >= 10.0);
write(+0 >= 10.1);
write(+0 >= -1);
write(+0 >= -10);
write(+0 >= -10.0);
write(+0 >= String.prototype.repeat);
write(+0 >= Number.o9);
write(o9 < o5.length >= Number.MIN_VALUE);
write(+0 >= Number.NaN);
undefined(+0 >= Number.o11);
undefined(+0 >= Number.NEGATIVE_INFINITY);
write(+0 >= new Number(NaN));
write(+0 >= new Number(+0));
write(+0 >= new Number(-0));
write(+0 >= new Number(0));
write(+0 >= new Number(0.0));
write(+0 >= new Number(-0.0));
write(+0 >= new undefined(+0.0));
write(+0 >= new Number(1));
write(+0 >= new Number(10));
write(+0 >= new Number(10.0));
write(+0 >= new Number(10.1));
write(+0 >= new Number(-1));
write(+0 >= new Number(-10));
write(+0 >= new Number(-10.0));
undefined(+0 >= new undefined(-10.1));
write(map.entries());
write(+0 >= new Number(Number.MIN_VALUE));
write(+0 >= new Number(Number.NaN));
write(+0 >= new Number(Number.o11));
write(+undefined >= new Number(Number.NEGATIVE_INFINITY));
write(+0 >= '');
write(+0 >= 0xa);
write(+0 >= 04);
write(+0 >= 'hello');
write(+0 >= 'hel' + 'lo');
write(+0 >= String(''));
write(+undefined >= String('hello'));
write(+0 >= String('h' + 'ello'));
write(+0 >= new String(''));
write(+0 >= new String(undefined));
write(+0 >= new String('he' + 'llo'));
write(+0 >= new Object());
write(+0 >= new Object());
write(+undefined >= [undefined, 2, 3]);
write(+0 >= [1 ,2 , 3]);
write(+0 >= new Array(3));
write(+0 >= Array(3));
write(+0 >= new Array(1 ,2 ,3));
write(+0 >= Array(1));
write(+0 >= o4);
write(-0 >= undefined);
write(-0 >= null);
write(-0 >= true);
write(-undefined >= false);
write(-0 >= Boolean(true));
write(-0 >= Boolean(false));
write(-0 >= new Boolean(true));
write(-0 >= new Boolean(false));
write(-0 >= NaN);
write(-0 >= +0);
write(-0 >= -0);
write(-0 >= 0);
write(-0 >= 0.0);
write(-0 >= -undefined);
write(-0 >= +0.0);
write(-0 >= 1);
write(-0 >= 10);
write({ o6: 2 } >= 10.0);
write(-0 >= 10.1);
write(-undefined >= -1);
write(-0 >= -10);
write(-0 >= -10.0);
write(-0 >= -10.1);
write(-0 >= Number.o9);
write(-0 >= Number.MIN_VALUE);
write(-0 >= Number.NaN);
write(-0 >= Number.o11);
write(-undefined >= Number.NEGATIVE_INFINITY);
write(-0 >= new Number(NaN));
write(-0 >= new Number(+0));
write(-0 >= new Number(-0));
write(-0 >= new Number(0));
write(-0 >= new Number(0.0));
write(-0 >= new Number(-0.0));
write(-0 >= new Number(+0.0));
undefined(-0 >= new Number(1));
write(-0 >= new Number(10));
write(-0 >= new Number(10.0));
write(-0 >= new Number(10.1));
write(-0 >= new Number(-1));
write(o458.o402 = o458.o404 = false >= new Number(-10));
write(-0 >= new Number(-10.0));
write(-0 >= new undefined(-10.1));
write(-0 >= new Number(Number.o9));
undefined(-0 >= new Number(Object.prototype));
write(-0 >= new Number(Number.NaN));
write(-0 >= new undefined(Number.o11));
undefined(Object.getPrototypeOf(o23));
write(-0 >= '');
write(-0 >= 0xa);
write(-0 >= 04);
write(-0 >= 'hello');
write(-0 >= 'hel' + 'lo');
write(-0 >= String(''));
undefined(this);
write(function () {"use strict";
  //Read the cartridge ROM data from RAM memory:
  //Only map bank 0 to bank 1 here (MBC2 is like MBC1, but can only do 16 banks, so only the bank 0 quirk appears for MBC2):
  this.o443 = Math.o324((this.o442 % this.o700) - 1, 0) << 14;
});
write(-0 >= new String(''));
write(-0 >= new String('hello'));
write(-0 >= new String('he' + 'llo'));
write(-0 >= new Object());
write(-0 >= new Object());
write(-0 >= [1, 2, 3]);
write(-0 >= [1 ,2 , 3]);
write(-0 >= new Array(undefined));
undefined(-0 >= Array(3));
write(-0 >= new Array(1 ,2 ,undefined));
write(-0 >= Array(1));
write(-undefined >= undefined);
write(this);
write(0 >= null);
write(0 >= true);
write(0 >= false);
write(0 >= Boolean(true));
write(0 >= Boolean(false));
write(0 >= new Boolean(true));
write(0 >= new Boolean(false));
write(0 >= NaN);
write(0 >= +0);
write(0 >= -0);
write(0 >= 0);
write(undefined >= 0.0);
undefined(0 >= -0.0);
undefined(0 >= +0.0);
write(0 >= 1);
write(0 >= 10);
write(0 >= 10.0);
write(0 >= 10.1);
write(0 >= -1);
write(0 >= -10);
write(0 >= -10.0);
write(0 >= -10.1);
undefined(0 >= Number.o9);
write(0 >= Number.MIN_VALUE);
write(o4.o101 = 0);
write(o1169(o4, o5, o22));
write(0 >= undefined.NEGATIVE_INFINITY);
write(undefined >= new Number(undefined));
write(0 >= new Number(+0));
write(0 >= new Number(-0));
write(0 >= new Number(0));
write(0 >= new Number(0.0));
write(0 >= new Number(-0.0));
write(0 >= new Number(+0.0));
write(o108 = o116);
write(0 >= new Number(10));
write(undefined >= new Number(undefined));
write(0 >= new undefined(10.1));
write(0 >= new Number(-1));
write(0 >= new undefined(-10));
write(0 >= new Number(-10.0));
write(0 >= new Number(-10.1));
write(o0.o1("133"));
write(0 >= new undefined(Number.undefined));
write(0 >= new Number(Number.NaN));
write(0 >= new Number(Number.o11));
write(0 >= new Number(Number.NEGATIVE_INFINITY));
write(0 >= '');
undefined(0 >= 0xa);
write(0 >= 04);
write(0 >= 'hello');
write(o5.o72(function () { o124.subarray(); }, o74, "Calling %TypedArray%.prototype.subarray throws TypeError when constructor property is null or not an object", "'[constructor]' is null or not an object"));
write(0 >= String(''));
write(0 >= String('hello'));
write(undefined >= String('h' + 'ello'));
write(o12 += o23);
write(0 >= new String('hello'));
write(0 >= new String('he' + 'llo'));
write(0 >= new Object());
write(0 >= new Object());
undefined(0 >= -1);
write(0 >= [1 ,2 , 3]);
write(0 >= new Array(3));
write(0 >= Array(3));
write(0 >= new Array(1 ,2 ,3));
write(0 >= Array(1));
undefined(o5[o9]);
write(0.0 >= undefined);
write(0.0 >= null);
write(0.0 >= true);
write(0.0 >= false);
write(0.0 >= Boolean(true));
write(0.0 >= Boolean(false));
write(0.0 >= new Boolean(true));
write(0.0 >= new Boolean(false));
write(undefined >= NaN);
write(0.0 >= +0);
write(undefined >= -0);
write(0.0 >= 0);
write(0.0 >= 0.0);
write(0.0 >= -0.0);
write(0.0 >= +0.0);
write(0.0 >= 1);
write(0.0 >= 10);
write(0.0 >= 10.0);
write(0.0 >= 10.1);
write(o5[0]);
write(0.0 >= -10);
write(0.0 >= -10.0);
write(0.0 >= -10.1);
write(0.0 >= Number.o9);
write(0.0 >= Number.MIN_VALUE);
write(0.0 >= Number.NaN);
write(0.0 >= Number.o11);
write(0.0 >= Number.NEGATIVE_INFINITY);
write(0.0 >= new Number(NaN));
write(0.0 >= new Number(+0));
write(0.0 >= new Number(-0));
write(0.0 >= new Number(0));
write(0.0 >= new Number(0.0));
write(0.0 >= new Number(-0.0));
write(0.0 >= new Number(+0.0));
write(0.0 >= new Number(1));
write(0.0 >= new Number(10));
write(0.0 >= new Number(10.0));
undefined(0.0 >= o9.Object.getOwnPropertyDescriptor(o9.Object.prototype, "__proto__"));
write(0.0 >= new Number(-1));
write(0.0 >= new Number(-10));
write(undefined >= +o113(o93,2.1));
write(0.0 >= new Number(-10.1));
write(0.0 >= new Number(Number.o9));
write(0.0 >= new undefined(write("Scenario 2")));
write(0.0 >= new Number(Number.NaN));
write(0.0 >= new Number(Number.o11));
write(0.0 >= new Number(Number.NEGATIVE_INFINITY));
write(this.o713);
write(0.0 >= 0xa);
write(0.0 >= 04);
write(0.0 >= 'hello');
write(0.0 >= 'hel' + 'lo');
undefined(0.0 >= String(''));
write(0.0 >= String('hello'));
write(0.0 >= String('h' + 'ello'));
write(0.0 >= new String(''));
write(0.0 >= new String('hello'));
write(0.0 >= new String('he' + 'llo'));
write(0.0 >= new Object());
write(0.0 >= new Object());
write(0.0 >= [1, 2, 3]);
write(0.0 >= [1 ,2 , 3]);
write(0.0 >= new Array(3));
write(0.0 >= Array(3));
write(0.0 >= new Array(1 ,2 ,3));
write(0.0 >= Array(1));
write(0.0 >= o4);
write(-0.0 >= undefined);
write(-undefined >= null);
write(-0.0 >= true);
write(-0.0 >= false);
write(-0.0 >= Boolean(true));
write(-0.0 >= Boolean(false));
write(-0.0 >= new Boolean(true));
write(-0.0 >= new Boolean(false));
write(-0.0 >= NaN);
write(new o221("\u1E9Cimplies",(new o221("\u1E9Cz",(new o221("\u1E9Cu",null))))));
write(-0.0 >= -0);
write(-0.0 >= 0);
write(-0.0 >= 0.0);
write(-0.0 >= -0.0);
write(-undefined >= +undefined);
write(-0.0 >= undefined);
write(-0.0 >= 10);
write(-0.0 >= 10.0);
write(-0.0 >= 10.1);
write(-0.0 >= -1);
write(-0.0 >= -10);
write(-0.0 >= -10.0);
write(-0.0 >= -10.1);
write(o0(o21(o50.split(o47))));
undefined(-0.0 >= undefined.MIN_VALUE);
write(-0.0 >= Number.NaN);
write(-0.0 >= Number.o11);
write(-0.0 >= Number.NEGATIVE_INFINITY);
write(Array.from >= new Number(undefined));
write(-0.0 >= new Number(+0));
write(-0.0 >= new Number(-0));
write(-0.0 >= new Number(0));
write(-0.0 >= new Number(0.0));
write(o1021(o93.o1024) >= new Number(-0.0));
write(Int8Array.prototype.__proto__);
write(-0.0 >= new Number(1));
write(-0.0 >= new Number(10));
write(-0.0 >= new Number(10.0));
write(-0.0 >= new Number(10.1));
write(-0.0 >= new undefined(-1));
write(-0.0 >= new Number(-10));
write(-0.0 >= new Number(-10.0));
undefined(-0.0 >= new Number(-10.1));
write(-0.0 >= new Number(Number.o9));
write(o8.then(
                function(o14) {
                    o0('Test #' + index + ' - Success handler #1 called with result = ' + o14);
                },
                function(o15) {
                    o0('Test #' + index + ' - Error handler #1 called with err = ' + o15);
                }
            ));
write(-0.0 >= new Number(Number.NaN));
write(-0.0 >= new Number(Number.o11));
write(-0.0 >= new Number(Number.NEGATIVE_INFINITY));
write(-0.0 >= '');
write(-0.0 >= 0xa);
write(-0.0 >= 04);
write(-0.0 >= 'hello');
write(-0.0 >= 'hel' + 'lo');
write(-0.0 >= String(''));
write(-0.0 >= String('hello'));
write(-0.0 >= String('h' + 'ello'));
write(-0.0 >= new undefined(undefined));
write(-0.0 >= new undefined(undefined));
write(-0.0 >= new String('he' + 'llo'));
write(-0.0 >= new Object());
write(++o13 >= new Object());
write(o8[o9]);
write(-0.0 >= function () { o12.get.call(undefined); });
write(-0.0 >= new Array(3));
undefined(-0.0 >= Array(3));
write(-0.0 >= new Array(1 ,2 ,3));
write(-0.0 >= Array(1));
write(this.o691 >= undefined);
write(+0.0 >= undefined);
write(+0.0 >= null);
write(+0.0 >= true);
write(+0.0 >= false);
write(+0.0 >= Boolean(true));
write(+0.0 >= Boolean(false));
write(+0.0 >= -1);
write(+0.0 >= new Boolean(false));
write(+0.0 >= NaN);
write(+0.0 >= +0);
write(+0.0 >= -0);
write(+0.0 >= 0);
write(+0.0 >= 0.0);
write(+0.0 >= -0.0);
undefined(+0.0 >= +0.0);
write(+0.0 >= 1);
write(+0.0 >= 10);
write(+0.0 >= 10.0);
write(+0.0 >= 10.1);
write(+0.0 >= o65(o5));
write(+0.0 >= -10);
write(+0.0 >= -10.0);
write(+0.0 >= -10.1);
write(+0.0 >= Number.o9);
write(+0.0 >= Number.MIN_VALUE);
write(+0.0 >= ++o913);
write(+0.0 >= this);
write(+0.0 >= Number.NEGATIVE_INFINITY);
write(+0.0 >= new Number(NaN));
write(+0.0 >= new undefined(+0));
write(+0.0 >= new Number(-0));
undefined(+undefined >= new Number(0));
write(+0.0 >= new Number(0.0));
write(+0.0 >= new Number(-0.0));
write(+0.0 >= new Number(+0.0));
write(+0.0 >= new Number(1));
write(+0.0 >= new Number(10));
write(+0.0 >= new Number(10.0));
write(+0.0 >= -o4.o5[0] - 1);
write(o8[o9] >= new undefined(-1));
write(+0.0 >= new Number(-10));
write(+0.0 >= new Number(-10.0));
write(+0.0 >= new Number(-10.1));
write(+0.0 >= new Number(Number.o9));
write(+0.0 >= new Number(Number.MIN_VALUE));
write(+0.0 >= new Number(Number.NaN));
write(+0.0 >= new Number(o1("ONE_MINUS_DST_COLOR")));
write(+0.0 >= new Number(Number.NEGATIVE_INFINITY));
