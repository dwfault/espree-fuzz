function o0() {
    var o12 = 0;
    var o2 = 10;
    var o3 = new RegExp("(ab)".repeat(o1), "g"); // g flag to trigger the vulnerable path
    var o4 = "ab".repeat(o1); // matches have to be at least size 2 to prevent interning
    function o1643(o4, o5, o7) {
        var o11 = 0;
        for(var o12 = 0; o12 < o5.length; ++o12) {
            o11 += o12;
            for(var o16 = 0; o16 < 2; ++o16) {
                o11 += o16;
                for(var o21 = 0; o21 < o5.length; ++o21) {
                    o11 += o21;
                    for(var o22 = 0; o22 < o5.length; ++o22) {
                        o11 += o22;
                        o11 += o1644(o4, o5, o22);
                    }
                }
                o5 = o7;
            }
            o11 += o1644(o4, o5, o12);
        }

        function o1644(o4, o5, o8) {
            return o4.o5[-1].o6;
        }
        return o11;
    };
    while (true) {
        var o6 = 0;
        var o7 = [];
        o5.replace(o3, function() {
            for (var o8 = 1; o8 < arguments.length-2; ++o8) {
                if (typeof arguments[o8] !== 'string') {
                    o9 = arguments[o8];
                    throw "success";
                }
                o7[o6++] = arguments[o8];  // root everything to force GC
            }
            return "x";
        });
    }
}
try { o0(); } catch (o10) { }
o11.o12(typeof(o9));  // will print "object"