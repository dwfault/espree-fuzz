"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fuzzStatement = exports.fuzzExpression = undefined;
exports.default = exports.fuzzProgram = exports.fuzzYieldGeneratorExpression = exports.fuzzYieldExpression = exports.fuzzWithStatement = exports.fuzzWhileStatement = exports.fuzzVariableDeclarator = exports.fuzzVariableDeclarationStatement = exports.fuzzVariableDeclaration = exports.fuzzUpdateExpression = exports.fuzzUnaryExpression = exports.fuzzTryFinallyStatement = exports.fuzzTryCatchStatement = exports.fuzzThrowStatement = exports.fuzzThisExpression = exports.fuzzTemplateExpression = exports.fuzzTemplateElement = exports.fuzzSwitchStatementWithDefault = exports.fuzzSwitchStatement = exports.fuzzSwitchDefault = exports.fuzzSwitchCase = exports.fuzzSuper = exports.fuzzStaticPropertyName = exports.fuzzStaticMemberExpression = exports.fuzzStaticMemberAssignmentTarget = exports.fuzzSpreadElement = exports.fuzzShorthandProperty = exports.fuzzSetter = exports.fuzzScript = exports.fuzzReturnStatement = exports.fuzzObjectExpression = exports.fuzzObjectBinding = exports.fuzzObjectAssignmentTarget = exports.fuzzNewTargetExpression = exports.fuzzNewExpression = exports.fuzzModule = exports.fuzzMethod = exports.fuzzLiteralStringExpression = exports.fuzzLiteralRegExpExpression = exports.fuzzLiteralNumericExpression = exports.fuzzLiteralNullExpression = exports.fuzzLiteralInfinityExpression = exports.fuzzLiteralBooleanExpression = exports.fuzzLabeledStatement = exports.fuzzImportSpecifier = exports.fuzzImportNamespace = exports.fuzzImport = exports.fuzzIfStatement = exports.fuzzIdentifierExpression = exports.fuzzGetter = exports.fuzzFunctionExpression = exports.fuzzFunctionDeclaration = exports.fuzzFunctionBody = exports.fuzzFormalParameters = exports.fuzzForStatement = exports.fuzzForOfStatement = exports.fuzzForInStatement = exports.fuzzExpressionStatement = exports.fuzzExportLocals = exports.fuzzExportLocalSpecifier = exports.fuzzExportFromSpecifier = exports.fuzzExportFrom = exports.fuzzExportDefault = exports.fuzzExportAllFrom = exports.fuzzExport = exports.fuzzEmptyStatement = exports.fuzzDoWhileStatement = exports.fuzzDirective = exports.fuzzDebuggerStatement = exports.fuzzDataProperty = exports.fuzzContinueStatement = exports.fuzzConditionalExpression = exports.fuzzComputedPropertyName = exports.fuzzComputedMemberExpression = exports.fuzzComputedMemberAssignmentTarget = exports.fuzzCompoundAssignmentExpression = exports.fuzzClassExpression = exports.fuzzClassElement = exports.fuzzClassDeclaration = exports.fuzzCatchClause = exports.fuzzCallExpression = exports.fuzzBreakStatement = exports.fuzzBlockStatement = exports.fuzzBlock = exports.fuzzBindingWithDefault = exports.fuzzBindingPropertyProperty = exports.fuzzBindingPropertyIdentifier = exports.fuzzBindingIdentifier = exports.fuzzBinaryExpression = exports.fuzzAssignmentTargetWithDefault = exports.fuzzAssignmentTargetPropertyProperty = exports.fuzzAssignmentTargetPropertyIdentifier = exports.fuzzAssignmentTargetIdentifier = exports.fuzzAssignmentExpression = exports.fuzzArrowExpression = exports.fuzzArrayExpression = exports.fuzzArrayBinding = exports.fuzzArrayAssignmentTarget = exports.fuzzIdentifier = exports.FuzzerState = undefined;

var _checked = require("shift-ast/checked");

var Shift = _interopRequireWildcard(_checked);

var _fuzzerState = require("./fuzzer-state");

var _fuzzerState2 = _interopRequireDefault(_fuzzerState);

var _combinators = require("./combinators");

var _regexp = require("./regexp");

var _regexp2 = _interopRequireDefault(_regexp);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /**
                                                                                                                                                                                                     * Copyright 2016 Shape Security, Inc.
                                                                                                                                                                                                     *
                                                                                                                                                                                                     * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                     * you may not use this file except in compliance with the License.
                                                                                                                                                                                                     * You may obtain a copy of the License at
                                                                                                                                                                                                     *
                                                                                                                                                                                                     *     http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                     *
                                                                                                                                                                                                     * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                     * distributed under the License is distributed on an "AS IS" BASIS,
                                                                                                                                                                                                     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                                                                                                                                                                                     * See the License for the specific language governing permissions and
                                                                                                                                                                                                     * limitations under the License.
                                                                                                                                                                                                     */

exports.FuzzerState = _fuzzerState2.default;


var RESERVED = [// todo import this
// keywords
'break', 'case', 'catch', 'class', 'const', 'continue', 'debugger', 'default', 'delete', 'do', 'else', 'export', 'extends', 'finally', 'for', 'function', 'if', 'import', 'in', 'instanceof', 'new', 'return', 'super', 'switch', 'this', 'throw', 'try', 'typeof', 'var', 'void', 'while', 'with',
// null, booleans
'null', 'true', 'false',
// future reserved word
'enum'];

var STRICT_FORBIDDEN = ['implements', 'package', 'protected', 'interface', 'private', 'public', 'static'];

var ALL_KNOWN_WORDS = RESERVED.concat(STRICT_FORBIDDEN).concat(['let', 'yield', 'await', 'eval', 'arguments', 'constructor', 'prototype']);

// special cases: 'let', 'yield', 'await', 'eval', 'arguments'


function identifierStart(fuzzerState) {
  // todo. see also https://gist.github.com/mathiasbynens/6334847#file-javascript-identifier-regex-js-L65-L105
  return String.fromCharCode(97 + fuzzerState.rng.nextInt(25));
}

var identifierPart = identifierStart; // todo
var MAX_IDENT_LENGTH = 15;

var genIdentifierString = function genIdentifierString(f) {
  return identifierStart(f) + (0, _combinators.manyN)(MAX_IDENT_LENGTH)(identifierPart)(f).join("");
};

var fuzzVariableName = function fuzzVariableName(f, isBinding) {
  var interestingNames = [];
  var forbiddenNames = [].concat(RESERVED);
  if (f.strict) {
    forbiddenNames.push.apply(forbiddenNames, STRICT_FORBIDDEN.concat(['let', 'yield']));
  } else {
    interestingNames.push.apply(interestingNames, STRICT_FORBIDDEN);
    (f.declKind === 'let' || f.declKind === 'const' ? forbiddenNames : interestingNames).push('let');
    (!f.allowYieldIdentifier ? forbiddenNames : interestingNames).push('yield');
  }
  (f.strict && isBinding ? forbiddenNames : interestingNames).push('eval', 'arguments');
  (!f.allowAwaitIdenifier ? forbiddenNames : interestingNames).push('await'); // this has the odd effect that strict-mode scripts have lots of variables named await.

  return fuzzIdentifier(f, interestingNames, forbiddenNames);
};

var fuzzLabel = function fuzzLabel(f) {
  // todo consider collapsing into fuzzVariableName(f, false);
  var interestingNames = ['eval', 'arguments'];
  var forbiddenNames = [].concat(RESERVED, _toConsumableArray(f.labels));
  if (f.strict) {
    forbiddenNames.push.apply(forbiddenNames, STRICT_FORBIDDEN.concat(['let', 'yield']));
  } else {
    interestingNames.push.apply(interestingNames, STRICT_FORBIDDEN.concat(['let']));
    (!f.allowYieldIdentifier ? forbiddenNames : interestingNames).push('yield');
  }
  (!f.allowAwaitIdenifier ? forbiddenNames : interestingNames).push('await');

  f.labels.forEach(function (l) {
    var ind = interestingNames.indexOf(l);
    if (ind !== -1) {
      interestingNames.splice(ind, 1);
    }
  });

  return fuzzIdentifier(f, interestingNames, forbiddenNames);
};

var fuzzIdentifier = exports.fuzzIdentifier = function fuzzIdentifier() {
  var f = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new _fuzzerState2.default();
  var interestingNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var forbiddenNames = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : RESERVED;

  if (interestingNames.length > 0 && f.rng.nextBoolean()) {
    return _combinators.oneOf.apply(undefined, _toConsumableArray(interestingNames))(f);
  }

  while (true) {
    var possibleIdentifier = genIdentifierString(f);
    if (forbiddenNames.indexOf(possibleIdentifier) < 0) return possibleIdentifier;
  }
};

var fuzzIdentifierName = (0, _combinators.choose)(genIdentifierString, _combinators.oneOf.apply(undefined, _toConsumableArray(ALL_KNOWN_WORDS)));

var fuzzHexDigit = _combinators.oneOf.apply(undefined, _toConsumableArray('0123456789abcdefABCDEF'));

var fuzzString = function fuzzString(f) {
  return f.rng.nextString();
};

var toRawValue = function toRawValue(f, str) {
  // handle illegal escape sequences: 8, 9, trailing backslash, u, x, octals (in strict mode)
  var orig = void 0;
  do {
    orig = str;
    str = str.replace(/((^|[^\\])(\\\\)*\\)(8|9|u|x|$)/g, "$1\\$4");
    // str = str.replace(/((^|[^\\])(\\\\)*\\)u/g, `$1u${f.rng.nextBoolean() ?
    //   `${fuzzHexDigit(f)}${fuzzHexDigit(f)}${fuzzHexDigit(f)}${fuzzHexDigit(f)}` :
    //   `{${fuzzHexDigit(f)}${manyN(4)(fuzzHexDigit)(f).join('')}}`
    // }`);
    // str = str.replace(/((^|[^\\])(\\\\)*\\)x/g, `$1x${fuzzHexDigit(f)}${fuzzHexDigit(f)}`); // todo consider inserting escape sequences like \u{XXXXX} etc into strings. This technique works, but not in combination with our hack for dealing with the \u\u case.
    if (f.strict) {
      str = str.replace(/((^|[^\\])(\\\\)*\\)0([0-7])/g, "$1\\0$4");
      str = str.replace(/((^|[^\\])(\\\\)*\\)([1-7])/g, "$1\\$4");
    }
  } while (str !== orig); // loop is to handle e.g. \8\8, because javascript lacks lookbehind and faking it is painful.
  return str;
};

var fuzzArrayAssignmentTarget = exports.fuzzArrayAssignmentTarget = function fuzzArrayAssignmentTarget(f) {
  return (0, _combinators.ap)(Shift.ArrayAssignmentTarget, { "elements": (0, _combinators.many)((0, _combinators.opt)((0, _combinators.choose)(fuzzAssignmentTargetWithDefault, fuzzAssignmentTarget))), "rest": (0, _combinators.opt)(fuzzAssignmentTarget) }, f);
};

var fuzzArrayBinding = exports.fuzzArrayBinding = function fuzzArrayBinding(f) {
  return (0, _combinators.ap)(Shift.ArrayBinding, { "elements": (0, _combinators.many)((0, _combinators.opt)((0, _combinators.choose)(fuzzBindingWithDefault, fuzzBinding))), "rest": (0, _combinators.opt)(fuzzBinding) }, f);
};

var fuzzArrayExpression = exports.fuzzArrayExpression = function fuzzArrayExpression(f) {
  return (0, _combinators.ap)(Shift.ArrayExpression, { "elements": (0, _combinators.many)((0, _combinators.opt)((0, _combinators.choose)(fuzzExpression, fuzzSpreadElement))) }, f);
};

var fuzzArrowExpression = exports.fuzzArrowExpression = function fuzzArrowExpression() {
  var f = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new _fuzzerState2.default();

  var isConsise = f.rng.nextBoolean();
  var params = void 0,
      body = void 0;
  if (!isConsise) {
    var _fuzzDirectives = fuzzDirectives(f),
        directives = _fuzzDirectives.directives,
        hasStrictDirective = _fuzzDirectives.hasStrictDirective;

    f = f.enterFunction({ isArrow: true, hasStrictDirective: hasStrictDirective });
    params = fuzzFormalParameters(f, { hasStrictDirective: hasStrictDirective });
    body = new Shift.FunctionBody({ directives: directives, statements: (0, _combinators.many)(fuzzStatement)(f.goDeeper()) });
  } else {
    f = f.enterFunction({ isArrow: true });
    params = fuzzFormalParameters(f);
    body = fuzzExpression(f);
  }
  return new Shift.ArrowExpression({ params: params, body: body });
};

var fuzzAssignmentExpression = exports.fuzzAssignmentExpression = function fuzzAssignmentExpression(f) {
  return (0, _combinators.ap)(Shift.AssignmentExpression, { "binding": fuzzAssignmentTarget, "expression": fuzzExpression }, f);
};

var fuzzAssignmentTargetIdentifier = exports.fuzzAssignmentTargetIdentifier = function fuzzAssignmentTargetIdentifier(f) {
  return (0, _combinators.ap)(Shift.AssignmentTargetIdentifier, { "name": function name(f) {
      return fuzzVariableName(f, true);
    } }, f);
};

var fuzzAssignmentTargetPropertyIdentifier = exports.fuzzAssignmentTargetPropertyIdentifier = function fuzzAssignmentTargetPropertyIdentifier(f) {
  return (0, _combinators.ap)(Shift.AssignmentTargetPropertyIdentifier, { "binding": fuzzAssignmentTargetIdentifier, "init": (0, _combinators.opt)(fuzzExpression) }, f);
};

var fuzzAssignmentTargetPropertyProperty = exports.fuzzAssignmentTargetPropertyProperty = function fuzzAssignmentTargetPropertyProperty(f) {
  return (0, _combinators.ap)(Shift.AssignmentTargetPropertyProperty, { "name": (0, _combinators.choose)(fuzzComputedPropertyName, fuzzStaticPropertyName), "binding": (0, _combinators.choose)(fuzzAssignmentTargetWithDefault, fuzzAssignmentTarget) }, f);
};

var fuzzAssignmentTargetWithDefault = exports.fuzzAssignmentTargetWithDefault = function fuzzAssignmentTargetWithDefault(f) {
  return (0, _combinators.ap)(Shift.AssignmentTargetWithDefault, { "binding": fuzzAssignmentTarget, "init": fuzzExpression }, f);
};

var fuzzBinaryExpression = exports.fuzzBinaryExpression = function fuzzBinaryExpression(f) {
  return (0, _combinators.ap)(Shift.BinaryExpression, { "left": fuzzExpression, "operator": (0, _combinators.oneOf)("==", "!=", "===", "!==", "<", "<=", ">", ">=", "in", "instanceof", "<<", ">>", ">>>", "+", "-", "*", "/", "%", "**", ",", "||", "&&", "|", "^", "&"), "right": fuzzExpression }, f);
};

var fuzzBindingIdentifier = exports.fuzzBindingIdentifier = function fuzzBindingIdentifier(f) {
  return (0, _combinators.ap)(Shift.BindingIdentifier, { "name": function name(f) {
      return fuzzVariableName(f, true);
    } }, f);
};

var fuzzBindingPropertyIdentifier = exports.fuzzBindingPropertyIdentifier = function fuzzBindingPropertyIdentifier(f) {
  return (0, _combinators.ap)(Shift.BindingPropertyIdentifier, { "binding": fuzzBindingIdentifier, "init": (0, _combinators.opt)(fuzzExpression) }, f);
};

var fuzzBindingPropertyProperty = exports.fuzzBindingPropertyProperty = function fuzzBindingPropertyProperty(f) {
  return (0, _combinators.ap)(Shift.BindingPropertyProperty, { "name": (0, _combinators.choose)(fuzzComputedPropertyName, fuzzStaticPropertyName), "binding": (0, _combinators.choose)(fuzzBindingWithDefault, fuzzBinding) }, f);
};

var fuzzBindingWithDefault = exports.fuzzBindingWithDefault = function fuzzBindingWithDefault(f) {
  return (0, _combinators.ap)(Shift.BindingWithDefault, { "binding": fuzzBinding, "init": fuzzExpression }, f);
};

var fuzzBlock = exports.fuzzBlock = function fuzzBlock(f) {
  return (0, _combinators.ap)(Shift.Block, { "statements": (0, _combinators.many)(fuzzStatement) }, f);
};

var fuzzBlockStatement = exports.fuzzBlockStatement = function fuzzBlockStatement(f) {
  return (0, _combinators.ap)(Shift.BlockStatement, { "block": fuzzBlock }, f);
};

var fuzzBreakStatement = exports.fuzzBreakStatement = function fuzzBreakStatement(f) {
  return (0, _combinators.ap)(Shift.BreakStatement, { "label": function label(f) {
      return f.labels.length > 0 && (!(f.inLoop || f.inSwitch) || f.rng.nextBoolean()) ? _combinators.oneOf.apply(undefined, _toConsumableArray(f.labels))(f) : null;
    } }, f);
};

var fuzzCallExpression = exports.fuzzCallExpression = function fuzzCallExpression(f) {
  return (0, _combinators.ap)(Shift.CallExpression, { "callee": fuzzExpressionSuperCall, "arguments": (0, _combinators.many)((0, _combinators.choose)(fuzzExpression, fuzzSpreadElement)) }, f);
};

var fuzzCatchClause = exports.fuzzCatchClause = function fuzzCatchClause(f) {
  return (0, _combinators.ap)(Shift.CatchClause, { "binding": fuzzBinding, "body": fuzzBlock }, f);
};

var fuzzClassDeclaration = exports.fuzzClassDeclaration = function fuzzClassDeclaration() {
  var f = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new _fuzzerState2.default();

  f = f.goDeeper();
  f.inLoop = f.inSwitch = false;
  f.strict = true;
  var name = fuzzBindingIdentifier(f);
  var _super = (0, _combinators.opt)(fuzzExpression)(f);
  var elements = fuzzClassElements(f, { allowConstructor: _super !== null });
  return new Shift.ClassDeclaration({ name: name, "super": _super, elements: elements });
};

var fuzzClassElement = exports.fuzzClassElement = function fuzzClassElement() {
  var f = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new _fuzzerState2.default();

  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$allowConstructor = _ref.allowConstructor,
      allowConstructor = _ref$allowConstructor === undefined ? true : _ref$allowConstructor,
      _ref$constructorMayCo = _ref.constructorMayContainSuperCall,
      constructorMayContainSuperCall = _ref$constructorMayCo === undefined ? false : _ref$constructorMayCo;

  f = f.goDeeper();
  var isStatic = f.rng.nextBoolean();
  var method = (0, _combinators.choose)(function (f) {
    return fuzzGetter(f, { isStatic: isStatic, inClass: true });
  }, function (f) {
    return fuzzMethod(f, { isStatic: isStatic, inClass: true, allowConstructor: allowConstructor, constructorMayContainSuperCall: constructorMayContainSuperCall });
  }, function (f) {
    return fuzzSetter(f, { isStatic: isStatic, inClass: true });
  })(f);
  return new Shift.ClassElement({ isStatic: isStatic, method: method });
};

var fuzzClassExpression = exports.fuzzClassExpression = function fuzzClassExpression() {
  var f = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new _fuzzerState2.default();

  f = f.goDeeper();
  f.inLoop = f.inSwitch = false;
  f.strict = true;
  var name = (0, _combinators.opt)(fuzzBindingIdentifier)(f);
  var _super = (0, _combinators.opt)(fuzzExpression)(f);
  var elements = fuzzClassElements(f, { allowConstructor: _super !== null });
  return new Shift.ClassExpression({ name: name, "super": _super, elements: elements });
};

var fuzzCompoundAssignmentExpression = exports.fuzzCompoundAssignmentExpression = function fuzzCompoundAssignmentExpression(f) {
  return (0, _combinators.ap)(Shift.CompoundAssignmentExpression, { "binding": (0, _combinators.choose)(fuzzAssignmentTargetIdentifier, (0, _combinators.choose)(fuzzComputedMemberAssignmentTarget, fuzzStaticMemberAssignmentTarget)), "operator": (0, _combinators.oneOf)("+=", "-=", "*=", "/=", "%=", "**=", "<<=", ">>=", ">>>=", "|=", "^=", "&="), "expression": fuzzExpression }, f);
};

var fuzzComputedMemberAssignmentTarget = exports.fuzzComputedMemberAssignmentTarget = function fuzzComputedMemberAssignmentTarget(f) {
  return (0, _combinators.ap)(Shift.ComputedMemberAssignmentTarget, { "object": fuzzExpressionSuperProp, "expression": fuzzExpression }, f);
};

var fuzzComputedMemberExpression = exports.fuzzComputedMemberExpression = function fuzzComputedMemberExpression(f) {
  return (0, _combinators.ap)(Shift.ComputedMemberExpression, { "object": fuzzExpressionSuperProp, "expression": fuzzExpression }, f);
};

var fuzzComputedPropertyName = exports.fuzzComputedPropertyName = function fuzzComputedPropertyName(f) {
  return (0, _combinators.ap)(Shift.ComputedPropertyName, { "expression": fuzzExpression }, f);
};

var fuzzConditionalExpression = exports.fuzzConditionalExpression = function fuzzConditionalExpression(f) {
  return (0, _combinators.ap)(Shift.ConditionalExpression, { "test": fuzzExpression, "consequent": fuzzExpression, "alternate": fuzzExpression }, f);
};

var fuzzContinueStatement = exports.fuzzContinueStatement = function fuzzContinueStatement(f) {
  return (0, _combinators.ap)(Shift.ContinueStatement, { "label": function label(f) {
      return f.loopLabels.length > 0 && f.rng.nextBoolean() ? _combinators.oneOf.apply(undefined, _toConsumableArray(f.loopLabels))(f) : null;
    } }, f);
};

var fuzzDataProperty = exports.fuzzDataProperty = function fuzzDataProperty(f) {
  return (0, _combinators.ap)(Shift.DataProperty, { "name": (0, _combinators.choose)(fuzzComputedPropertyName, fuzzStaticPropertyName), "expression": fuzzExpression }, f);
};

var fuzzDebuggerStatement = exports.fuzzDebuggerStatement = function fuzzDebuggerStatement(f) {
  return (0, _combinators.ap)(Shift.DebuggerStatement, {}, f);
};

var fuzzDirective = exports.fuzzDirective = function fuzzDirective() {
  var f = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new _fuzzerState2.default();

  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref2$allowUseStrict = _ref2.allowUseStrict,
      allowUseStrict = _ref2$allowUseStrict === undefined ? true : _ref2$allowUseStrict;

  var rawValue = allowUseStrict && f.rng.nextBoolean() ? 'use strict' : fuzzString(f);
  if (rawValue.match('"') && rawValue.match("'")) {
    var toReplace = f.rng.nextBoolean() ? '"' : "'";
    var regex = toReplace === '"' ? /((^|[^\\])(\\\\)*)"/g : /((^|[^\\])(\\\\)*)'/g; // Trust me, this was easier than generating them on the fly
    var _orig = void 0;
    do {
      _orig = rawValue;
      rawValue = rawValue.replace(regex, "$1\\" + toReplace);
    } while (rawValue !== _orig); // to handle e.g. '\"\"
  }
  var orig = void 0;
  do {
    orig = rawValue;
    rawValue = rawValue.replace(/((^|[^\\])(\\\\)*)([\r\n])/g, "$1\\$4");
  } while (rawValue !== orig); // to handle e.g. \n\n
  rawValue = toRawValue(f, rawValue);
  if (!allowUseStrict && rawValue === 'use strict') {
    // This will almost never happen, but we should deal with it anyway.
    rawValue = '';
  }
  return new Shift.Directive({ rawValue: rawValue });
};

var fuzzDoWhileStatement = exports.fuzzDoWhileStatement = function fuzzDoWhileStatement(f) {
  return (0, _combinators.ap)(Shift.DoWhileStatement, { "body": function body(f) {
      return fuzzStatement(f.enterLoop(), { allowProperDeclarations: false, allowFunctionDeclarations: false });
    }, "test": fuzzExpression }, f);
};

var fuzzEmptyStatement = exports.fuzzEmptyStatement = function fuzzEmptyStatement(f) {
  return (0, _combinators.ap)(Shift.EmptyStatement, {}, f);
};

var fuzzExport = exports.fuzzExport = function fuzzExport(f) {
  return (0, _combinators.ap)(Shift.Export, { "declaration": (0, _combinators.choose)(fuzzClassDeclaration, fuzzFunctionDeclaration, fuzzVariableDeclaration) }, f);
};

var fuzzExportAllFrom = exports.fuzzExportAllFrom = function fuzzExportAllFrom(f) {
  return (0, _combinators.ap)(Shift.ExportAllFrom, { "moduleSpecifier": fuzzString }, f);
};

var fuzzExportDefault = exports.fuzzExportDefault = function fuzzExportDefault(f) {
  return (0, _combinators.ap)(Shift.ExportDefault, { "body": (0, _combinators.choose)(fuzzClassDeclaration, fuzzExpression, fuzzFunctionDeclaration) }, f);
};

var fuzzExportFrom = exports.fuzzExportFrom = function fuzzExportFrom(f) {
  return (0, _combinators.ap)(Shift.ExportFrom, { "namedExports": (0, _combinators.many)(fuzzExportFromSpecifier), "moduleSpecifier": fuzzString }, f);
};

var fuzzExportFromSpecifier = exports.fuzzExportFromSpecifier = function fuzzExportFromSpecifier(f) {
  return (0, _combinators.ap)(Shift.ExportFromSpecifier, { "name": fuzzIdentifierName, "exportedName": (0, _combinators.opt)(fuzzIdentifierName) }, f);
};

var fuzzExportLocalSpecifier = exports.fuzzExportLocalSpecifier = function fuzzExportLocalSpecifier(f) {
  return (0, _combinators.ap)(Shift.ExportLocalSpecifier, { "name": fuzzIdentifierExpression, "exportedName": (0, _combinators.opt)(fuzzIdentifierName) }, f);
};

var fuzzExportLocals = exports.fuzzExportLocals = function fuzzExportLocals(f) {
  return (0, _combinators.ap)(Shift.ExportLocals, { "namedExports": (0, _combinators.many)(fuzzExportLocalSpecifier) }, f);
};

var fuzzExpressionStatement = exports.fuzzExpressionStatement = function fuzzExpressionStatement(f) {
  return (0, _combinators.ap)(Shift.ExpressionStatement, { "expression": fuzzExpression }, f);
};

var fuzzForInStatement = exports.fuzzForInStatement = function fuzzForInStatement() {
  var f = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new _fuzzerState2.default();

  f = f.goDeeper();
  var left = f.rng.nextBoolean() ? fuzzVariableDeclaration(f, { inForInOfHead: true }) : fuzzAssignmentTarget(f);
  var right = fuzzExpression(f);
  var body = fuzzStatement(f.enterLoop(), { allowProperDeclarations: false, allowFunctionDeclarations: false });
  return new Shift.ForInStatement({ left: left, right: right, body: body });
};

var fuzzForOfStatement = exports.fuzzForOfStatement = function fuzzForOfStatement() {
  var f = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new _fuzzerState2.default();

  f = f.goDeeper();
  var left = f.rng.nextBoolean() ? fuzzVariableDeclaration(f, { inForInOfHead: true }) : fuzzAssignmentTarget(f);
  var right = fuzzExpression(f);
  var body = fuzzStatement(f.enterLoop(), { allowProperDeclarations: false, allowFunctionDeclarations: false });
  return new Shift.ForOfStatement({ left: left, right: right, body: body });
};

var fuzzForStatement = exports.fuzzForStatement = function fuzzForStatement(f) {
  return (0, _combinators.ap)(Shift.ForStatement, { "init": (0, _combinators.opt)((0, _combinators.choose)(fuzzExpression, fuzzVariableDeclaration)), "test": (0, _combinators.opt)(fuzzExpression), "update": (0, _combinators.opt)(fuzzExpression), "body": function body(f) {
      return fuzzStatement(f.enterLoop(), { allowProperDeclarations: false, allowFunctionDeclarations: false });
    } }, f);
};

var fuzzFormalParameters = exports.fuzzFormalParameters = function fuzzFormalParameters() {
  var f = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new _fuzzerState2.default();

  var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref3$hasStrictDirect = _ref3.hasStrictDirective,
      hasStrictDirective = _ref3$hasStrictDirect === undefined ? false : _ref3$hasStrictDirect;

  if (hasStrictDirective) {
    return new Shift.FormalParameters({ items: (0, _combinators.many)(fuzzBindingIdentifier)(f), rest: null }); // note that f.strict should be set by the callee in this case
  }
  f = f.goDeeper().disableYieldExpr();
  var items = (0, _combinators.many)((0, _combinators.choose)(fuzzBindingWithDefault, fuzzBinding))(f);
  var rest = (0, _combinators.opt)(fuzzBinding)(f);
  return new Shift.FormalParameters({ items: items, rest: rest });
};

var fuzzFunctionBody = exports.fuzzFunctionBody = function fuzzFunctionBody(f) {
  return (0, _combinators.ap)(Shift.FunctionBody, { "directives": (0, _combinators.many)(fuzzDirective), "statements": (0, _combinators.many)(fuzzStatement) }, f);
};

var fuzzFunctionDeclaration = exports.fuzzFunctionDeclaration = function fuzzFunctionDeclaration() {
  var f = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new _fuzzerState2.default();

  var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref4$allowProperDecl = _ref4.allowProperDeclarations,
      allowProperDeclarations = _ref4$allowProperDecl === undefined ? true : _ref4$allowProperDecl;

  var _fuzzDirectives2 = fuzzDirectives(f),
      directives = _fuzzDirectives2.directives,
      hasStrictDirective = _fuzzDirectives2.hasStrictDirective;

  var isGenerator = allowProperDeclarations && f.rng.nextBoolean();
  var name = fuzzBindingIdentifier(f);
  f = f.enterFunction({ isGenerator: isGenerator, hasStrictDirective: hasStrictDirective });
  var params = fuzzFormalParameters(f, { hasStrictDirective: hasStrictDirective });
  var body = new Shift.FunctionBody({ directives: directives, statements: (0, _combinators.many)(fuzzStatement)(f.goDeeper()) });
  return new Shift.FunctionDeclaration({ isGenerator: isGenerator, name: name, params: params, body: body });
};

var fuzzFunctionExpression = exports.fuzzFunctionExpression = function fuzzFunctionExpression() {
  var f = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new _fuzzerState2.default();

  f = f.clone();

  var _fuzzDirectives3 = fuzzDirectives(f),
      directives = _fuzzDirectives3.directives,
      hasStrictDirective = _fuzzDirectives3.hasStrictDirective;

  var isGenerator = f.rng.nextBoolean();
  if (isGenerator) {
    f.allowYieldIdentifier = false;
  }
  var name = f.rng.nextBoolean() ? fuzzBindingIdentifier(f) : null;
  f = f.enterFunction({ isGenerator: isGenerator, hasStrictDirective: hasStrictDirective });
  var params = fuzzFormalParameters(f, { hasStrictDirective: hasStrictDirective });
  var body = new Shift.FunctionBody({ directives: directives, statements: (0, _combinators.many)(fuzzStatement)(f.goDeeper()) });
  return new Shift.FunctionExpression({ isGenerator: isGenerator, name: name, params: params, body: body });
};

var fuzzGetter = exports.fuzzGetter = function fuzzGetter() {
  var f = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new _fuzzerState2.default();

  var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref5$isStatic = _ref5.isStatic,
      isStatic = _ref5$isStatic === undefined ? false : _ref5$isStatic,
      _ref5$inClass = _ref5.inClass,
      inClass = _ref5$inClass === undefined ? false : _ref5$inClass;

  var _fuzzDirectives4 = fuzzDirectives(f),
      directives = _fuzzDirectives4.directives,
      hasStrictDirective = _fuzzDirectives4.hasStrictDirective;

  var name = f.rng.nextBoolean ? fuzzComputedPropertyName(f) : fuzzStaticPropertyName(f, { allowConstructor: !inClass, allowPrototype: !isStatic });
  f = f.enterFunction({ isMethod: true, hasStrictDirective: hasStrictDirective });
  f.allowSuperCall = false;
  f.allowSuperProp = true;
  var body = new Shift.FunctionBody({ directives: directives, statements: (0, _combinators.many)(fuzzStatement)(f.goDeeper()) });
  return new Shift.Getter({ name: name, body: body });
};

var fuzzIdentifierExpression = exports.fuzzIdentifierExpression = function fuzzIdentifierExpression(f) {
  return (0, _combinators.ap)(Shift.IdentifierExpression, { "name": function name(f) {
      return fuzzVariableName(f, false);
    } }, f);
};

var fuzzIfStatement = exports.fuzzIfStatement = function fuzzIfStatement() {
  var f = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new _fuzzerState2.default();

  f = f.goDeeper();
  var test = fuzzExpression(f);
  var alternate = !f.allowMissingElse || f.rng.nextBoolean() ? fuzzStatement(f, { allowProperDeclarations: false, allowFunctionDeclarations: !f.strict, allowLabeledFunctionDeclarations: false }) : null;
  if (alternate) {
    f.allowMissingElse = false;
  }
  var consequent = fuzzStatement(f, { allowProperDeclarations: false, allowFunctionDeclarations: !f.strict, allowLabeledFunctionDeclarations: false });
  return new Shift.IfStatement({ test: test, consequent: consequent, alternate: alternate });
};

var fuzzImport = exports.fuzzImport = function fuzzImport(f) {
  return (0, _combinators.ap)(Shift.Import, { "defaultBinding": (0, _combinators.opt)(fuzzBindingIdentifier), "namedImports": (0, _combinators.many)(fuzzImportSpecifier), "moduleSpecifier": fuzzString }, f);
};

var fuzzImportNamespace = exports.fuzzImportNamespace = function fuzzImportNamespace(f) {
  return (0, _combinators.ap)(Shift.ImportNamespace, { "defaultBinding": (0, _combinators.opt)(fuzzBindingIdentifier), "namespaceBinding": fuzzBindingIdentifier, "moduleSpecifier": fuzzString }, f);
};

var fuzzImportSpecifier = exports.fuzzImportSpecifier = function fuzzImportSpecifier(f) {
  return (0, _combinators.ap)(Shift.ImportSpecifier, { "name": (0, _combinators.opt)(fuzzIdentifierName), "binding": fuzzBindingIdentifier }, f);
};

var fuzzLabeledStatement = exports.fuzzLabeledStatement = function fuzzLabeledStatement() {
  var f = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new _fuzzerState2.default();

  var _ref6 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref6$allowFunctionDe = _ref6.allowFunctionDeclarations,
      allowFunctionDeclarations = _ref6$allowFunctionDe === undefined ? f.strict : _ref6$allowFunctionDe;

  f = f.goDeeper();
  var label = fuzzLabel(f);
  var body = void 0;
  f.labels = f.labels.concat([label]);
  if (f.rng.nextBoolean()) {
    f.loopLabels = f.loopLabels.concat([label]);
    body = _combinators.choose.apply(undefined, loopFuzzers)(f);
  } else {
    body = fuzzStatement(f, { allowLoops: false, allowProperDeclarations: false, allowFunctionDeclarations: allowFunctionDeclarations });
  }
  return new Shift.LabeledStatement({ label: label, body: body });
};

var fuzzLiteralBooleanExpression = exports.fuzzLiteralBooleanExpression = function fuzzLiteralBooleanExpression(f) {
  return (0, _combinators.ap)(Shift.LiteralBooleanExpression, { "value": function value(f) {
      return f.rng.nextBoolean();
    } }, f);
};

var fuzzLiteralInfinityExpression = exports.fuzzLiteralInfinityExpression = function fuzzLiteralInfinityExpression(f) {
  return (0, _combinators.ap)(Shift.LiteralInfinityExpression, {}, f);
};

var fuzzLiteralNullExpression = exports.fuzzLiteralNullExpression = function fuzzLiteralNullExpression(f) {
  return (0, _combinators.ap)(Shift.LiteralNullExpression, {}, f);
};

var fuzzLiteralNumericExpression = exports.fuzzLiteralNumericExpression = function fuzzLiteralNumericExpression(f) {
  return (0, _combinators.ap)(Shift.LiteralNumericExpression, { "value": (0, _combinators.choose)(function (f) {
      return f.rng.nextInt(1e4);
    }, function (f) {
      return f.rng.nextInt(Math.pow(2, 53));
    }, function (f) {
      return f.rng.nextDouble() * Math.pow(10, f.rng.nextInt(309));
    }, function (f) {
      return parseFloat(("" + f.rng.nextDouble() * 1e4).slice(0, 7));
    }, function (f) {
      return parseFloat(("" + f.rng.nextDouble()).slice(0, 4));
    }, function (f) {
      return 0;
    }) }, f);
};

var fuzzLiteralRegExpExpression = exports.fuzzLiteralRegExpExpression = function fuzzLiteralRegExpExpression(f) {
  return (0, _combinators.ap)(Shift.LiteralRegExpExpression, { "pattern": _regexp2.default, "global": function global(f) {
      return f.rng.nextBoolean();
    }, "ignoreCase": function ignoreCase(f) {
      return f.rng.nextBoolean();
    }, "multiLine": function multiLine(f) {
      return f.rng.nextBoolean();
    }, "sticky": function sticky(f) {
      return f.rng.nextBoolean();
    }, "unicode": function unicode(f) {
      return f.rng.nextBoolean();
    } }, f);
};

var fuzzLiteralStringExpression = exports.fuzzLiteralStringExpression = function fuzzLiteralStringExpression(f) {
  return (0, _combinators.ap)(Shift.LiteralStringExpression, { "value": fuzzString }, f);
};

var fuzzMethod = exports.fuzzMethod = function fuzzMethod() {
  var f = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new _fuzzerState2.default();

  var _ref7 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref7$isStatic = _ref7.isStatic,
      isStatic = _ref7$isStatic === undefined ? false : _ref7$isStatic,
      _ref7$inClass = _ref7.inClass,
      inClass = _ref7$inClass === undefined ? false : _ref7$inClass,
      _ref7$allowConstructo = _ref7.allowConstructor,
      allowConstructor = _ref7$allowConstructo === undefined ? true : _ref7$allowConstructo,
      _ref7$constructorMayC = _ref7.constructorMayContainSuperCall,
      constructorMayContainSuperCall = _ref7$constructorMayC === undefined ? false : _ref7$constructorMayC;

  // isStatic implies inClass
  f = f.goDeeper();

  var _fuzzDirectives5 = fuzzDirectives(f),
      directives = _fuzzDirectives5.directives,
      hasStrictDirective = _fuzzDirectives5.hasStrictDirective;

  var isConstructor = inClass && allowConstructor && !isStatic && f.rng.nextBoolean();
  var isGenerator = !isConstructor && f.rng.nextBoolean();
  var name = isConstructor ? new Shift.StaticPropertyName({ value: "constructor" }) : (0, _combinators.choose)(fuzzComputedPropertyName, function (f) {
    return fuzzStaticPropertyName(f, { allowConstructor: !inClass, allowPrototype: !isStatic });
  })(f);
  f = f.enterFunction({ isMethod: true, isGenerator: isGenerator, hasStrictDirective: hasStrictDirective });
  f.allowSuperCall = isConstructor && constructorMayContainSuperCall;
  f.allowSuperProp = true;
  var params = fuzzFormalParameters(f, { hasStrictDirective: hasStrictDirective });
  var body = new Shift.FunctionBody({ directives: directives, statements: (0, _combinators.many)(fuzzStatement)(f.goDeeper()) });
  return new Shift.Method({ isGenerator: isGenerator, name: name, params: params, body: body });
};

var fuzzModule = exports.fuzzModule = function fuzzModule() {
  var f = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new _fuzzerState2.default();

  f = f.clone();
  f.strict = true;
  f.allowAwaitIdenifier = false;

  return (0, _combinators.ap)(Shift.Module, { "directives": function directives(f) {
      return fuzzDirectives(f).directives;
    }, "items": (0, _combinators.many)((0, _combinators.choose)((0, _combinators.choose)(fuzzExport, fuzzExportAllFrom, fuzzExportDefault, fuzzExportFrom, fuzzExportLocals), (0, _combinators.choose)(fuzzImport, fuzzImportNamespace), fuzzStatement)) }, f);
};

var fuzzNewExpression = exports.fuzzNewExpression = function fuzzNewExpression(f) {
  return (0, _combinators.ap)(Shift.NewExpression, { "callee": fuzzExpression, "arguments": (0, _combinators.many)((0, _combinators.choose)(fuzzExpression, fuzzSpreadElement)) }, f);
};

var fuzzNewTargetExpression = exports.fuzzNewTargetExpression = function fuzzNewTargetExpression(f) {
  return (0, _combinators.ap)(Shift.NewTargetExpression, {}, f);
};

var fuzzObjectAssignmentTarget = exports.fuzzObjectAssignmentTarget = function fuzzObjectAssignmentTarget(f) {
  return (0, _combinators.ap)(Shift.ObjectAssignmentTarget, { "properties": (0, _combinators.many)((0, _combinators.choose)(fuzzAssignmentTargetPropertyIdentifier, fuzzAssignmentTargetPropertyProperty)) }, f);
};

var fuzzObjectBinding = exports.fuzzObjectBinding = function fuzzObjectBinding(f) {
  return (0, _combinators.ap)(Shift.ObjectBinding, { "properties": (0, _combinators.many)((0, _combinators.choose)(fuzzBindingPropertyIdentifier, fuzzBindingPropertyProperty)) }, f);
};

var fuzzObjectExpression = exports.fuzzObjectExpression = function fuzzObjectExpression(f) {
  return (0, _combinators.ap)(Shift.ObjectExpression, { "properties": (0, _combinators.many)((0, _combinators.choose)((0, _combinators.choose)(fuzzDataProperty, (0, _combinators.choose)(fuzzGetter, fuzzMethod, fuzzSetter)), fuzzShorthandProperty)) }, f);
};

var fuzzReturnStatement = exports.fuzzReturnStatement = function fuzzReturnStatement(f) {
  return (0, _combinators.ap)(Shift.ReturnStatement, { "expression": (0, _combinators.opt)(fuzzExpression) }, f);
};

var fuzzScript = exports.fuzzScript = function fuzzScript() {
  var f = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new _fuzzerState2.default();

  f = f.goDeeper();

  var _fuzzDirectives6 = fuzzDirectives(f),
      directives = _fuzzDirectives6.directives,
      hasStrictDirective = _fuzzDirectives6.hasStrictDirective;

  f.strict = hasStrictDirective;
  return new Shift.Script({ directives: directives, statements: (0, _combinators.many)(fuzzStatement)(f) });
};

var fuzzSetter = exports.fuzzSetter = function fuzzSetter() {
  var f = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new _fuzzerState2.default();

  var _ref8 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref8$isStatic = _ref8.isStatic,
      isStatic = _ref8$isStatic === undefined ? false : _ref8$isStatic,
      _ref8$inClass = _ref8.inClass,
      inClass = _ref8$inClass === undefined ? false : _ref8$inClass;

  var _fuzzDirectives7 = fuzzDirectives(f),
      directives = _fuzzDirectives7.directives,
      hasStrictDirective = _fuzzDirectives7.hasStrictDirective;

  var name = f.rng.nextBoolean ? fuzzComputedPropertyName(f) : fuzzStaticPropertyName(f, { allowConstructor: !inClass, allowPrototype: !isStatic });
  f = f.enterFunction({ isMethod: true, hasStrictDirective: hasStrictDirective });
  f.allowSuperCall = false;
  f.allowSuperProp = true;
  var param = hasStrictDirective ? fuzzBindingIdentifier(f) : (0, _combinators.choose)(fuzzBindingWithDefault, fuzzBinding)(f);
  var body = new Shift.FunctionBody({ directives: directives, statements: (0, _combinators.many)(fuzzStatement)(f.goDeeper()) });
  return new Shift.Setter({ name: name, param: param, body: body });
};

var fuzzShorthandProperty = exports.fuzzShorthandProperty = function fuzzShorthandProperty(f) {
  return (0, _combinators.ap)(Shift.ShorthandProperty, { "name": fuzzIdentifierExpression }, f);
};

var fuzzSpreadElement = exports.fuzzSpreadElement = function fuzzSpreadElement(f) {
  return (0, _combinators.ap)(Shift.SpreadElement, { "expression": fuzzExpression }, f);
};

var fuzzStaticMemberAssignmentTarget = exports.fuzzStaticMemberAssignmentTarget = function fuzzStaticMemberAssignmentTarget(f) {
  return (0, _combinators.ap)(Shift.StaticMemberAssignmentTarget, { "object": fuzzExpressionSuperProp, "property": fuzzIdentifierName }, f);
};

var fuzzStaticMemberExpression = exports.fuzzStaticMemberExpression = function fuzzStaticMemberExpression(f) {
  return (0, _combinators.ap)(Shift.StaticMemberExpression, { "object": fuzzExpressionSuperProp, "property": fuzzIdentifierName }, f);
};

var fuzzStaticPropertyName = exports.fuzzStaticPropertyName = function fuzzStaticPropertyName() {
  var f = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new _fuzzerState2.default();

  var _ref9 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref9$allowConstructo = _ref9.allowConstructor,
      allowConstructor = _ref9$allowConstructo === undefined ? true : _ref9$allowConstructo,
      _ref9$allowPrototype = _ref9.allowPrototype,
      allowPrototype = _ref9$allowPrototype === undefined ? true : _ref9$allowPrototype;

  // todo avoid duplicate __proto__ simple properties
  var value = void 0;
  do {
    value = fuzzString(f);
  } while (!allowConstructor && value === 'constructor' || !allowPrototype && value === 'prototype');
  return new Shift.StaticPropertyName({ value: value });
};

var fuzzSuper = exports.fuzzSuper = function fuzzSuper(f) {
  return (0, _combinators.ap)(Shift.Super, {}, f);
};

var fuzzSwitchCase = exports.fuzzSwitchCase = function fuzzSwitchCase(f) {
  return (0, _combinators.ap)(Shift.SwitchCase, { "test": fuzzExpression, "consequent": (0, _combinators.many)(fuzzStatement) }, f);
};

var fuzzSwitchDefault = exports.fuzzSwitchDefault = function fuzzSwitchDefault(f) {
  return (0, _combinators.ap)(Shift.SwitchDefault, { "consequent": (0, _combinators.many)(fuzzStatement) }, f);
};

var fuzzSwitchStatement = exports.fuzzSwitchStatement = function fuzzSwitchStatement(f) {
  return (0, _combinators.ap)(Shift.SwitchStatement, { "discriminant": fuzzExpression, "cases": (0, _combinators.many)(fuzzSwitchCase) }, f.enterSwitch());
};

var fuzzSwitchStatementWithDefault = exports.fuzzSwitchStatementWithDefault = function fuzzSwitchStatementWithDefault(f) {
  return (0, _combinators.ap)(Shift.SwitchStatementWithDefault, { "discriminant": fuzzExpression, "preDefaultCases": (0, _combinators.many)(fuzzSwitchCase), "defaultCase": fuzzSwitchDefault, "postDefaultCases": (0, _combinators.many)(fuzzSwitchCase) }, f.enterSwitch());
};

var fuzzTemplateElement = exports.fuzzTemplateElement = function fuzzTemplateElement() {
  var f = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new _fuzzerState2.default();

  var rawValue = toRawValue(f, fuzzString(f));
  var orig = void 0;
  do {
    orig = rawValue;
    rawValue = rawValue.replace(/((^|[^\\])(\\\\)*)(`|\${)/g, '$1\\$4');
    rawValue = rawValue.replace(/((^|[^\\])(\\\\)*\\)(0(?=[0-7])|[1-7])/g, '$1\\$4');
  } while (rawValue !== orig);
  return new Shift.TemplateElement({ rawValue: rawValue });
};

var fuzzTemplateExpression = exports.fuzzTemplateExpression = function fuzzTemplateExpression() {
  var f = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new _fuzzerState2.default();

  f = f.goDeeper();
  var tag = (0, _combinators.opt)(fuzzExpression)(f);

  var exprs = (0, _combinators.many)(fuzzExpression)(f);
  var elements = [fuzzTemplateElement(f)];
  for (var i = 0; i < exprs.length; ++i) {
    elements.push(exprs[i], fuzzTemplateElement(f));
  }
  return new Shift.TemplateExpression({ tag: tag, elements: elements });
};

var fuzzThisExpression = exports.fuzzThisExpression = function fuzzThisExpression(f) {
  return (0, _combinators.ap)(Shift.ThisExpression, {}, f);
};

var fuzzThrowStatement = exports.fuzzThrowStatement = function fuzzThrowStatement(f) {
  return (0, _combinators.ap)(Shift.ThrowStatement, { "expression": fuzzExpression }, f);
};

var fuzzTryCatchStatement = exports.fuzzTryCatchStatement = function fuzzTryCatchStatement(f) {
  return (0, _combinators.ap)(Shift.TryCatchStatement, { "body": fuzzBlock, "catchClause": fuzzCatchClause }, f);
};

var fuzzTryFinallyStatement = exports.fuzzTryFinallyStatement = function fuzzTryFinallyStatement(f) {
  return (0, _combinators.ap)(Shift.TryFinallyStatement, { "body": fuzzBlock, "catchClause": (0, _combinators.opt)(fuzzCatchClause), "finalizer": fuzzBlock }, f);
};

var fuzzUnaryExpression = exports.fuzzUnaryExpression = function fuzzUnaryExpression() {
  var f = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new _fuzzerState2.default();

  f = f.goDeeper();
  var operator = (0, _combinators.oneOf)("+", "-", "!", "~", "typeof", "void", "delete")(f);
  var operand = fuzzExpression(f, { allowIdentifierExpression: operator !== "delete" || !f.strict });
  return new Shift.UnaryExpression({ operator: operator, operand: operand });
};

var fuzzUpdateExpression = exports.fuzzUpdateExpression = function fuzzUpdateExpression(f) {
  return (0, _combinators.ap)(Shift.UpdateExpression, { "isPrefix": function isPrefix(f) {
      return f.rng.nextBoolean();
    }, "operator": (0, _combinators.oneOf)("++", "--"), "operand": (0, _combinators.choose)(fuzzAssignmentTargetIdentifier, (0, _combinators.choose)(fuzzComputedMemberAssignmentTarget, fuzzStaticMemberAssignmentTarget)) }, f);
};

var fuzzVariableDeclaration = exports.fuzzVariableDeclaration = function fuzzVariableDeclaration() {
  var f = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new _fuzzerState2.default();

  var _ref10 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref10$allowProperDec = _ref10.allowProperDeclarations,
      allowProperDeclarations = _ref10$allowProperDec === undefined ? true : _ref10$allowProperDec,
      _ref10$inForInOfHead = _ref10.inForInOfHead,
      inForInOfHead = _ref10$inForInOfHead === undefined ? false : _ref10$inForInOfHead;

  f = f.goDeeper();
  var kind = allowProperDeclarations ? (0, _combinators.oneOf)("var", "let", "const")(f) : "var";
  f.declKind = kind;
  var declarators = void 0;
  if (inForInOfHead) {
    declarators = [fuzzVariableDeclarator(f, { inForInOfHead: inForInOfHead })];
  } else {
    declarators = (0, _combinators.many1)(fuzzVariableDeclarator)(f);
  }
  return new Shift.VariableDeclaration({ kind: kind, declarators: declarators });
};

var fuzzVariableDeclarationStatement = exports.fuzzVariableDeclarationStatement = function fuzzVariableDeclarationStatement() {
  var f = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new _fuzzerState2.default();

  var _ref11 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref11$allowProperDec = _ref11.allowProperDeclarations,
      allowProperDeclarations = _ref11$allowProperDec === undefined ? true : _ref11$allowProperDec;

  f = f.goDeeper();
  var declaration = fuzzVariableDeclaration(f, { allowProperDeclarations: allowProperDeclarations });
  return new Shift.VariableDeclarationStatement({ declaration: declaration });
};

var fuzzVariableDeclarator = exports.fuzzVariableDeclarator = function fuzzVariableDeclarator() {
  var f = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new _fuzzerState2.default();

  var _ref12 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref12$inForInOfHead = _ref12.inForInOfHead,
      inForInOfHead = _ref12$inForInOfHead === undefined ? false : _ref12$inForInOfHead;

  f = f.goDeeper();
  var binding = fuzzBinding(f);
  var init = void 0;
  if (inForInOfHead) {
    init = null;
  } else if (f.declKind === 'const' || binding.type === 'ArrayBinding' || binding.type === 'ObjectBinding') {
    init = fuzzExpression(f);
  } else {
    init = f.rng.nextBoolean() ? fuzzExpression(f) : null;
  }
  return new Shift.VariableDeclarator({ binding: binding, init: init });
};

var fuzzWhileStatement = exports.fuzzWhileStatement = function fuzzWhileStatement(f) {
  return (0, _combinators.ap)(Shift.WhileStatement, { "test": fuzzExpression, "body": function body(f) {
      return fuzzStatement(f.enterLoop(), { allowProperDeclarations: false, allowFunctionDeclarations: false });
    } }, f);
};

var fuzzWithStatement = exports.fuzzWithStatement = function fuzzWithStatement(f) {
  return (0, _combinators.ap)(Shift.WithStatement, { "object": fuzzExpression, "body": function body(f) {
      return fuzzStatement(f, { allowProperDeclarations: false, allowFunctionDeclarations: false });
    } }, f);
};

var fuzzYieldExpression = exports.fuzzYieldExpression = function fuzzYieldExpression(f) {
  return (0, _combinators.ap)(Shift.YieldExpression, { "expression": (0, _combinators.opt)(fuzzExpression) }, f);
};

var fuzzYieldGeneratorExpression = exports.fuzzYieldGeneratorExpression = function fuzzYieldGeneratorExpression(f) {
  return (0, _combinators.ap)(Shift.YieldGeneratorExpression, { "expression": fuzzExpression }, f);
};

var simpleExprFuzzers = [fuzzArrayExpression, fuzzArrowExpression, fuzzAssignmentExpression, fuzzBinaryExpression, fuzzCallExpression, fuzzClassExpression, fuzzCompoundAssignmentExpression, fuzzConditionalExpression, fuzzFunctionExpression, fuzzLiteralBooleanExpression, fuzzLiteralInfinityExpression, fuzzLiteralNullExpression, fuzzLiteralNumericExpression, fuzzLiteralRegExpExpression, fuzzLiteralStringExpression, fuzzNewExpression, fuzzObjectExpression, fuzzTemplateExpression, fuzzThisExpression, fuzzUnaryExpression, fuzzUpdateExpression, fuzzComputedMemberExpression, fuzzStaticMemberExpression];

var yieldExprFuzzers = [fuzzYieldExpression, fuzzYieldGeneratorExpression];

var simpleStmtFuzzers = [fuzzBlockStatement, fuzzDebuggerStatement, fuzzEmptyStatement, fuzzExpressionStatement, fuzzIfStatement, fuzzLabeledStatement, fuzzSwitchStatement, fuzzSwitchStatementWithDefault, fuzzThrowStatement, fuzzTryCatchStatement, fuzzTryFinallyStatement, fuzzVariableDeclarationStatement];

var loopFuzzers = [fuzzDoWhileStatement, fuzzForInStatement, fuzzForOfStatement, fuzzForStatement, fuzzWhileStatement];

var fuzzersPassingAllowMissingElse = [fuzzLabeledStatement, fuzzForStatement, fuzzForInStatement, fuzzForOfStatement, fuzzIfStatement, fuzzWhileStatement, fuzzWithStatement];

var fuzzExpressionSuperProp = function fuzzExpressionSuperProp(f) {
  return f.allowSuperProp ? (0, _combinators.choose)(fuzzExpression, fuzzSuper)(f) : fuzzExpression(f);
};

var fuzzExpressionSuperCall = function fuzzExpressionSuperCall(f) {
  return f.allowSuperCall ? (0, _combinators.choose)(fuzzExpression, fuzzSuper)(f) : fuzzExpression(f);
};

var fuzzClassElements = function fuzzClassElements(f, _ref13) {
  var allowConstructor = _ref13.allowConstructor;

  var elements = [];
  if (f.tooDeep()) {
    return elements;
  }
  var count = f.rng.nextInt(_combinators.MANY_BOUND + 1);
  while (count-- > 0) {
    var element = fuzzClassElement(f, { allowConstructor: allowConstructor, constructorMayContainSuperCall: true });
    if (!element.isStatic && element.method.type === 'Method' && element.method.name.type === 'StaticPropertyName' && element.method.name.value === 'constructor') {
      allowConstructor = false;
    }
    elements.push(element);
  }
  return elements;
};

var fuzzDirectives = function fuzzDirectives(f) {
  f = f.clone();
  var hasStrictDirective = f.rng.nextBoolean();
  if (hasStrictDirective) {
    f.strict = true;
  }

  var directives = (0, _combinators.many)(function (f) {
    return fuzzDirective(f, { allowUseStrict: hasStrictDirective });
  })(f);
  if (hasStrictDirective && !directives.some(function (d) {
    return d.rawValue === 'use strict';
  })) {
    directives.push(new Shift.Directive({ rawValue: 'use strict' }));
  }
  return { directives: directives, hasStrictDirective: hasStrictDirective };
};

var fuzzAssignmentTarget = function fuzzAssignmentTarget(f) {
  if (f.tooDeep() || f.rng.nextBoolean()) {
    return fuzzAssignmentTargetIdentifier(f);
  }
  return (0, _combinators.choose)((0, _combinators.choose)(fuzzArrayAssignmentTarget, fuzzObjectAssignmentTarget), (0, _combinators.choose)(fuzzComputedMemberAssignmentTarget, fuzzStaticMemberAssignmentTarget))(f);
};

var fuzzBinding = function fuzzBinding(f) {
  if (f.tooDeep() || f.rng.nextBoolean()) {
    return fuzzBindingIdentifier(f);
  }
  return (f.rng.nextBoolean() ? fuzzArrayBinding : fuzzObjectBinding)(f);
};

var fuzzProgram = exports.fuzzProgram = (0, _combinators.choose)(fuzzModule, fuzzScript);

exports.default = fuzzProgram;
var fuzzExpression = exports.fuzzExpression = function fuzzExpression() {
  var f = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new _fuzzerState2.default();

  var _ref14 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref14$allowIdentifie = _ref14.allowIdentifierExpression,
      allowIdentifierExpression = _ref14$allowIdentifie === undefined ? true : _ref14$allowIdentifie;

  if (f.tooDeep()) {
    return fuzzLeafExpression(f, { allowIdentifierExpression: allowIdentifierExpression });
  }
  var fuzzers = simpleExprFuzzers;
  if (f.allowYieldExpr) {
    fuzzers = fuzzers.concat(yieldExprFuzzers);
  }
  if (f.allowNewTarget) {
    fuzzers = fuzzers.concat([fuzzNewTargetExpression]);
  }
  if (allowIdentifierExpression) {
    fuzzers = fuzzers.concat([fuzzIdentifierExpression]);
  }
  f = f.clone();
  f.declKind = null;

  return _combinators.choose.apply(undefined, _toConsumableArray(fuzzers))(f);
};

var fuzzLeafExpression = function fuzzLeafExpression(f, _ref15) {
  var allowIdentifierExpression = _ref15.allowIdentifierExpression;

  var fuzzers = [fuzzLiteralBooleanExpression, fuzzLiteralInfinityExpression, fuzzLiteralNullExpression, fuzzLiteralNumericExpression, fuzzLiteralRegExpExpression, fuzzLiteralStringExpression, fuzzThisExpression];
  if (allowIdentifierExpression) fuzzers.push(fuzzIdentifierExpression);
  if (f.allowNewTarget) fuzzers.push(fuzzNewTargetExpression);
  if (f.allowYieldExpr) fuzzers.push(fuzzYieldExpression);
  return _combinators.choose.apply(undefined, fuzzers)(f);
};

var fuzzStatement = exports.fuzzStatement = function fuzzStatement() {
  var f = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new _fuzzerState2.default();

  var _ref16 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref16$allowLoops = _ref16.allowLoops,
      allowLoops = _ref16$allowLoops === undefined ? true : _ref16$allowLoops,
      _ref16$allowProperDec = _ref16.allowProperDeclarations,
      allowProperDeclarations = _ref16$allowProperDec === undefined ? true : _ref16$allowProperDec,
      _ref16$allowFunctionD = _ref16.allowFunctionDeclarations,
      allowFunctionDeclarations = _ref16$allowFunctionD === undefined ? true : _ref16$allowFunctionD,
      _ref16$allowLabeledFu = _ref16.allowLabeledFunctionDeclarations,
      allowLabeledFunctionDeclarations = _ref16$allowLabeledFu === undefined ? !f.strict && allowFunctionDeclarations : _ref16$allowLabeledFu;

  if (f.tooDeep()) {
    return fuzzLeafStatement(f);
  }

  var fuzzers = [].concat(simpleStmtFuzzers);
  if (allowLoops) {
    fuzzers.push.apply(fuzzers, loopFuzzers);
  }

  if (f.allowReturn) {
    fuzzers.push(fuzzReturnStatement);
  }
  if (f.inLoop) {
    fuzzers.push(fuzzBreakStatement, fuzzContinueStatement);
  } else if (f.allowBreak()) {
    fuzzers.push(fuzzBreakStatement);
  }
  if (allowProperDeclarations) {
    fuzzers.push(fuzzClassDeclaration, fuzzFunctionDeclaration);
  } else if (allowFunctionDeclarations) {
    fuzzers.push(fuzzFunctionDeclaration);
  }

  if (!f.strict) {
    fuzzers.push(fuzzWithStatement);
  }

  var fuzzer = _combinators.oneOf.apply(undefined, _toConsumableArray(fuzzers))(f);

  if (fuzzersPassingAllowMissingElse.indexOf(fuzzer) === -1) {
    f = f.enableMissingElse();
  }

  if (fuzzer === fuzzVariableDeclarationStatement) {
    return fuzzVariableDeclarationStatement(f, { allowProperDeclarations: allowProperDeclarations });
  }

  if (fuzzer === fuzzFunctionDeclaration) {
    return fuzzFunctionDeclaration(f, { allowProperDeclarations: allowProperDeclarations });
  }

  if (fuzzer === fuzzLabeledStatement) {
    return fuzzLabeledStatement(f, { allowFunctionDeclarations: allowLabeledFunctionDeclarations });
  }

  return fuzzer(f);
};

var fuzzLeafStatement = function fuzzLeafStatement(f) {
  var fuzzers = [fuzzDebuggerStatement, fuzzEmptyStatement];
  if (f.allowBreak()) fuzzers.push(fuzzBreakStatement);
  if (f.inLoop) fuzzers.push(fuzzContinueStatement);
  if (f.allowReturn) fuzzers.push(fuzzReturnStatement);
  return _combinators.choose.apply(undefined, fuzzers)(f);
};