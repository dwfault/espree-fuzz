"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = fuzzRegExpPattern;

var _random = require("./random");

var _random2 = _interopRequireDefault(_random);

var _combinators = require("./combinators");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// todo generate: /\cM/ (matches control-M in a string).

var RegExpState = function () {
  function RegExpState() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$maxDepth = _ref.maxDepth,
        maxDepth = _ref$maxDepth === undefined ? 5 : _ref$maxDepth,
        _ref$rng = _ref.rng,
        rng = _ref$rng === undefined ? new _random2.default(Math.random) : _ref$rng;

    _classCallCheck(this, RegExpState);

    this.maxDepth = maxDepth;
    this.depth = 0;
    this.rng = rng;
  }

  _createClass(RegExpState, [{
    key: "tooDeep",
    value: function tooDeep() {
      return this.depth >= this.maxDepth;
    }
  }, {
    key: "clone",
    value: function clone() {
      var st = new RegExpState({ maxDepth: this.maxDepth, rng: this.rng });
      st.depth = this.depth;
      return st;
    }
  }, {
    key: "goDeeper",
    value: function goDeeper() {
      var st = this.clone();
      ++st.depth;
      return st;
    }
  }]);

  return RegExpState;
}();

var charVal = function charVal(c) {
  if (c[0] === '\\') {
    switch (c[1]) {
      case 'u':
      case 'x':
        return parseInt(c.slice(2), 16);
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
        return parseInt(c.slice(1), 8);
      case 'b':
        return 8;
      case 't':
        return 9;
      case 'n':
        return 10;
      case 'v':
        return 11;
      case 'f':
        return 12;
      case 'r':
        return 13;
      case 'c':
        throw new Error('control sequences not supported');
      default:
        return c.charCodeAt(1);
    }
  } else {
    return c.charCodeAt(0);
  }
};

var fuzzPrintableAscii = function fuzzPrintableAscii(f) {
  return String.fromCharCode(32 + f.rng.nextInt(94));
};

var fuzzHex = (0, _combinators.oneOf)('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'A', 'B', 'C', 'D', 'E', 'F');

var fuzzAlternation = function fuzzAlternation(f) {
  if (f.tooDeep()) return '';
  f = f.goDeeper();
  return (0, _combinators.many)((0, _combinators.choose)(fuzzGrouping, fuzzCharacterClass, fuzzRepetition, fuzzSequence))(f).join('|');
};

var fuzzGrouping = function fuzzGrouping(f) {
  if (f.tooDeep()) return '()';
  f = f.goDeeper();
  return "(" + (0, _combinators.oneOf)('?:', '?!', '?=', '')(f) + fuzzRegExpSource(f) + ")";
};

var fuzzRepetition = function fuzzRepetition(f) {
  if (f.tooDeep()) return '';
  f = f.goDeeper();
  return "" + (0, _combinators.choose)(fuzzGrouping, fuzzCharacterClass, fuzzCharacter)(f) + (0, _combinators.oneOf)('?', '+', '*', '*?', '+?')(f);
};

var fuzzSequence = function fuzzSequence(f) {
  return (0, _combinators.many)((0, _combinators.choose)(fuzzCharacter, fuzzBoundary))(f).join('');
};

var fuzzBoundary = (0, _combinators.oneOf)('^', '$', '\\b', '\\B');

var fuzzCharacter = (0, _combinators.choose)(function (f) {
  var c = void 0;
  do {
    c = fuzzPrintableAscii(f);
  } while (['[', '(', ')', '{', '?', '*', '+', '|', '\\', '$', '^', '/'].indexOf(c) !== -1);
  return c;
}, function (f) {
  return "\\u" + fuzzHex(f) + fuzzHex(f) + fuzzHex(f) + fuzzHex(f);
}, function (f) {
  return "\\x" + fuzzHex(f) + fuzzHex(f);
}, function (f) {
  var c = void 0;
  do {
    c = fuzzPrintableAscii(f);
  } while (['u', 'x', 'b', 'B', 'c', '1', '2', '3', '4', '5', '6', '7', '8', '9'].indexOf(c) !== -1);
  return "\\" + c;
});

var fuzzCharacterClass = function fuzzCharacterClass(f) {
  if (f.tooDeep()) return '[]';
  f = f.goDeeper();
  var source = (0, _combinators.many)((0, _combinators.choose)(fuzzCharacterClassCharacter, fuzzCharacterClassRange))(f).join('');
  source = source.replace(/((^|[^\\])(\\\\)*)\\$/g, '$1\\a'); // character class cannot end in an odd number of backslashes
  return "[" + (0, _combinators.oneOf)('^', '-', '')(f) + source + (0, _combinators.oneOf)('-', '')(f) + "]";
};

var fuzzCharacterClassCharacter = function fuzzCharacterClassCharacter(f) {
  var ch = void 0;
  do {
    ch = (0, _combinators.choose)(fuzzCharacter, (0, _combinators.oneOf)('[', '(', ')', '{', '?', '*', '+', '|', '$'))(f);
  } while (ch === '-' || ch === ']');
  return ch;
};

var fuzzCharacterClassRange = function fuzzCharacterClassRange(f) {
  var a = fuzzCharacterClassCharacter(f);
  var b = fuzzCharacterClassCharacter(f);
  if (charVal(b) < charVal(a)) {
    ;
    var _ref2 = [b, a];
    a = _ref2[0];
    b = _ref2[1];
  }return a + "-" + b;
};

var fuzzRegExpSource = function fuzzRegExpSource(f) {
  if (f.tooDeep()) return '';
  f = f.goDeeper();
  return (0, _combinators.choose)(fuzzAlternation, fuzzGrouping, fuzzCharacterClass, fuzzRepetition, fuzzSequence)(f);
};

function fuzzRegExpPattern() {
  var f = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { rng: new _random2.default(Math.random) };

  var rv = fuzzRegExpSource(new RegExpState({ rng: f.rng }));
  if (rv === '') return '(?:)';
  return rv;
}