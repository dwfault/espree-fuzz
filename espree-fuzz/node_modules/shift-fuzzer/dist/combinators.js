"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.many = exports.MANY_BOUND = undefined;
exports.manyN = manyN;
exports.many1 = many1;
exports.either = either;
exports.choose = choose;
exports.oneOf = oneOf;
exports.opt = opt;
exports.ap = ap;
exports.guardDepth = guardDepth;

var _fuzzerState = require("./fuzzer-state");

var _fuzzerState2 = _interopRequireDefault(_fuzzerState);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MANY_BOUND = exports.MANY_BOUND = 5; /**
                                          * Copyright 2014 Shape Security, Inc.
                                          *
                                          * Licensed under the Apache License, Version 2.0 (the "License");
                                          * you may not use this file except in compliance with the License.
                                          * You may obtain a copy of the License at
                                          *
                                          *     http://www.apache.org/licenses/LICENSE-2.0
                                          *
                                          * Unless required by applicable law or agreed to in writing, software
                                          * distributed under the License is distributed on an "AS IS" BASIS,
                                          * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                          * See the License for the specific language governing permissions and
                                          * limitations under the License.
                                          */

function manyN(bound) {
  return function (fuzzer) {
    return guardDepth(function () {
      return [];
    }, function () {
      var fuzzerState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new _fuzzerState2.default();

      var count = fuzzerState.rng.nextInt(bound + 1);
      var result = [];
      while (count-- > 0) {
        result.push(fuzzer(fuzzerState));
      }return result;
    });
  };
}

var many = exports.many = manyN(MANY_BOUND);

function many1(fuzzer) {
  return function () {
    var fuzzerState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new _fuzzerState2.default();

    var result = many(fuzzer)(fuzzerState);
    if (result.length === 0) result.push(fuzzer(fuzzerState));
    return result;
  };
}

function either(fuzzerA, fuzzerB) {
  return function () {
    var fuzzerState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new _fuzzerState2.default();
    return (fuzzerState.rng.nextBoolean() ? fuzzerA : fuzzerB)(fuzzerState);
  };
}

function choose() {
  for (var _len = arguments.length, fuzzers = Array(_len), _key = 0; _key < _len; _key++) {
    fuzzers[_key] = arguments[_key];
  }

  switch (fuzzers.length) {
    case 0:
      throw new Error("choose must be given at least one fuzzer");
    case 1:
      return fuzzers[0];
    case 2:
      return either(fuzzers[0], fuzzers[1]);
    default:
      return function () {
        var fuzzerState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new _fuzzerState2.default();
        return fuzzers[fuzzerState.rng.nextInt(fuzzers.length)](fuzzerState);
      };
  }
}

function oneOf() {
  for (var _len2 = arguments.length, values = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    values[_key2] = arguments[_key2];
  }

  return function (fuzzerState) {
    return values[fuzzerState.rng.nextInt(values.length)];
  };
}

function opt(fuzzer) {
  return guardDepth(function () {
    return null;
  }, function () {
    var fuzzerState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new _fuzzerState2.default();
    return fuzzerState.rng.nextBoolean() ? null : fuzzer(fuzzerState);
  });
}

function ap(ctor, propFuzzers) {
  var fuzzerState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new _fuzzerState2.default();

  var f = fuzzerState.goDeeper();
  var props = Object.create(null);
  for (var prop in propFuzzers) {
    if (!propFuzzers.hasOwnProperty(prop)) continue;
    props[prop] = propFuzzers[prop](f);
  }
  return new ctor(props);
}

function guardDepth(fuzzerA, fuzzerB) {
  return function () {
    var fuzzerState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new _fuzzerState2.default();
    return fuzzerState.tooDeep() ? fuzzerA(fuzzerState) : fuzzerB(fuzzerState);
  };
}