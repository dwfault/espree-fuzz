"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Copyright 2014 Shape Security, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var MAX_STRING_LENGTH = 5;

var Random = function () {
  function Random(rng) {
    _classCallCheck(this, Random);

    this.rng = rng;
  }

  _createClass(Random, [{
    key: "nextBoolean",
    value: function nextBoolean() {
      var p = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.5;

      return this.rng() < p;
    }
  }, {
    key: "nextInt",
    value: function nextInt(bound) {
      return Math.floor(this.rng() * bound);
    }
  }, {
    key: "nextDouble",
    value: function nextDouble() {
      return this.rng();
    }
  }, {
    key: "nextString",
    value: function nextString() {
      var count = this.nextInt(MAX_STRING_LENGTH + 1);
      var result = "";
      while (count-- > 0) {
        result += String.fromCharCode(this.nextInt(0xFF));
      } // TODO: 0x100000000
      return result;
    }
  }]);

  return Random;
}();

exports.default = Random;