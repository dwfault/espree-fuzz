var o0 = o421.o155;
class o1{

  constructor(){
    try {
return o0;
}catch(e){}
  }

}

var o2 = function ()
        {
            function test(o26, o27, o24) {
                var o21 = new o26(o27);
                try {
o2([o21], [].concat(o21), o26.name+' obj');
}catch(e){}

                try {
o21[Symbol.isConcatSpreadable] = true;
}catch(e){}
                try {
o2([], [].concat(o21), o26.name+' obj[Symbol.isConcatSpreadable] == true');
}catch(e){}

                try {
o21.length = o24.length;
}catch(e){}
                try {
o2(new Array(o24.length), [].concat(o21), o26.name+' obj[length] assigned');
}catch(e){}

                try {
for (var o7 = 0; o7 < o24.length; o7++) {
                    try {
o21[o7] = o24[o7];
}catch(e){}
                }
}catch(e){}
                try {
o2(o24, [].concat(o21), o26.name+' obj[0..length] assigned');
}catch(e){}

                try {
o21[Symbol.isConcatSpreadable] = false;
}catch(e){}
                try {
o2([o21], [].concat(o21), o26.name+' obj[Symbol.isConcatSpreadable] == false');
}catch(e){}

                try {
o21[Symbol.isConcatSpreadable] = true;
}catch(e){}
                try {
o2(o24, [].concat(o21), o26.name+' obj[Symbol.isConcatSpreadable] == true');
}catch(e){}

                try {
for (var o7 = 0; o7 < o24.length; o7++) {
                    try {
delete o21[o7];
}catch(e){}
                }
}catch(e){}
                try {
o2(new Array(o24.length), [].concat(o21), o26.name+' obj[0..length] deleted');
}catch(e){}

                try {
delete o21.length;
}catch(e){}
                try {
o2([], [].concat(o21), o26.name+' obj[length] deleted');
}catch(e){}

                try {
delete o21[Symbol.isConcatSpreadable];
}catch(e){}
                try {
o2([o21], [].concat(o21), o26.name+' obj[Symbol.isConcatSpreadable] deleted');
}catch(e){}

                try {
o26.prototype[Symbol.isConcatSpreadable] = true;
}catch(e){}
                try {
o2([], [].concat(o21), o26.name+'.prototype[Symbol.isConcatSpreadable] == true');
}catch(e){}

                try {
o26.prototype.length = o24.length;
}catch(e){}
                try {
o2(new Array(o24.length), [].concat(o21), o26.name+'.prototype[length] assigned');
}catch(e){}

                try {
for (var o7 = 0; o7 < o24.length; o7++) {
                    try {
o26.prototype[o7] = o24[o7];
}catch(e){}
                }
}catch(e){}
                try {
o2(o24, [].concat(o21), o26.name+'.prototype[0..length] assigned');
}catch(e){}

                try {
o26.prototype[Symbol.isConcatSpreadable] = false;
}catch(e){}
                try {
o2([o21], [].concat(o21), o26.name+'.prototype[Symbol.isConcatSpreadable] == false');
}catch(e){}

                try {
o26.prototype[Symbol.isConcatSpreadable] = true;
}catch(e){}
                try {
o2(o24, [].concat(o21), o26.name+'.prototype[Symbol.isConcatSpreadable] == true');
}catch(e){}

                try {
for (var o7 = 0; o7 < o24.length; o7++) {
                    try {
delete o26.prototype[o7];
}catch(e){}
                }
}catch(e){}
                try {
o2(new Array(o24.length), [].concat(o21), o26.name+'.prototype[0..length] deleted');
}catch(e){}

                try {
delete o26.prototype.length;
}catch(e){}
                try {
o2([], [].concat(o21), o26.name+'.prototype[length] deleted');
}catch(e){}

                try {
delete o26.prototype[Symbol.isConcatSpreadable];
}catch(e){}
                try {
o2([o21], [].concat(o21), o26.name+'.prototype[Symbol.isConcatSpreadable] deleted');
}catch(e){}
            }

            try {
test(Number, 0, [1, 2, 3]);
}catch(e){}
            try {
test(Number, -0.1, [1.1, 2.2, 3.3]);
}catch(e){}
            try {
test(Number, NaN, ["a", "b", "c"]);
}catch(e){}
            try {
test(Number, 321, [1, "ab", 2.2, 2, NaN, 3, function(){ }]);
}catch(e){}

            try {
test(Boolean, true, [1, 2, 3]);
}catch(e){}
            try {
test(Boolean, false, [1.1, 2.2, 3.3]);
}catch(e){}
            try {
test(Boolean, true, ["a", "b", "c"]);
}catch(e){}
            try {
test(Boolean, false, [1, "ab", 2.2, 2, NaN, 3, function(){ }]);
}catch(e){}

            try {
test(RegExp, /^/, [1, 2, 3]);
}catch(e){}
            try {
test(RegExp, /abc/, [1.1, 2.2, 3.3]);
}catch(e){}
            try {
test(RegExp, /(\d+)/, ["a", "b", "c"]);
}catch(e){}
            try {
test(RegExp, /^\s*\S+\s*$/, [1, "ab", 2.2, 2, NaN, 3, function(){ }]);
}catch(e){}
        };

var o82 += o85.toString().length = new Proxy([], o2);

var this.o391 = new Array(1,2,3);

let o4 = 0

var o5 = o4.map.call(o3, test);