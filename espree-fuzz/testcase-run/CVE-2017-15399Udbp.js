function o0(stdlib,o1,o922) {
  try {
function () { try {
o23++;
}catch(e){} try {
return false;
}catch(e){} }[o810 + 2];
}catch(e){}
  class o13 extends constructor {
                    constructor(...o5) {
                        try {
super(...o5);
}catch(e){}
                        try {
this.o6 = 'myerrorsubclass of ' + o12;
}catch(e){}
                    }

                    o7() {
                        try {
return this.o6;
}catch(e){}
                    }
                };
  var o927
  try {
return o3;
}catch(e){}
}

var global = {Uint32Array:Uint32Array};
var o5 = e.o365;
try {
o6 = new WebAssembly.Memory(o500.type);
}catch(e){}
var buffer = o6.buffer;
try {
o8 = o0(global,o5,buffer);
}catch(e){}

try {
o938 = Promise.all([Promise.reject('expected1')]).then(
                    o10 => o0(`Test #${index} - Success handler #1 called with result = ${o10}`)
                );
}catch(e){}
try {
o9.toString = function() {
  try {
Array.prototype.slice.call([]);
}catch(e){}
  try {
return 0xffffffff;
}catch(e){}
}
}catch(e){}
try {
o8(3);
}catch(e){}
try {
o6.grow(1);
}catch(e){}
try {
o8(o9);
}catch(e){}