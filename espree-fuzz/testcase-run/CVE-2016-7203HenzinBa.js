var o10 = o0.o4();

var o316 = Math.acos

try {
o360.prototype.o889 = 200000;
}catch(e){}
try {
o0.fill(7, 10000, 10200);
}catch(e){}

function o1167(o832) {
    try {
o154 = true;
}catch(e){}
    try {
o155 = o832;
}catch(e){}
    try {
o50 = o1157;
}catch(e){}

    // exit the runtime
    try {
o289();
}catch(e){}

    // TODO We should handle this differently based on environment.
    // In the browser, the best we can do is throw an exception
    // to halt execution, but in node we could process.exit and
    // I'd imagine SM shell would have something equivalent.
    // This would let us set a proper exit status (which
    // would be great for checking test exit statuses).
    // https://github.com/kripken/emscripten/issues/1371

    // throw an exception to halt the current execution
    try {
throw new o1156(o832);
}catch(e){}
};

try {
Object.defineProperty(o2, 'constructor', this);
}catch(e){}

try {
o8.o7 = o2;
}catch(e){}

function done(o565) {
            try {
if (o565) {
                try {
if (!done.o619) {
                    try {
done.o619 = true;
}catch(e){}
                    try {
return o278(o565);
}catch(e){}
                }
}catch(e){}
                try {
return;
}catch(e){}
            }
}catch(e){}
            try {
if (++o620 >= o662.length) {
                try {
o278(null);
}catch(e){}
            }
}catch(e){}
        };
try {
o1 = 500;
}catch(e){}
try {
o4.fill(7.7);
}catch(e){}

var o5 = [];

try {
o0.o7.o16 = 0xfffffffe - 500;
}catch(e){}

try {
o5.splice.call(o0, 0, ...o4);
}catch(e){}
try {
o0[0xfffff1ec - 1] = 10;
}catch(e){}