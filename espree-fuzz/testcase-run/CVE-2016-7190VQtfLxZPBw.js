var o689 = o4.o11('function', typeof Symbol.for, "typeof Symbol.for === 'function'")(o479.o502.o333, o479.name);
function o38(o3) {
                var o1 = o421;
                try {
Object.defineProperty(o3, Symbol.isConcatSpreadable, {
                        get: function() {
                            try {
o4.length = 9007199254740989;
}catch(e){}
                            try {
return true;
}catch(e){}
                        }
                    });
}catch(e){}
                try {
o6.o22(()=>o3.concat(o4), o23, o3, "Illegal length and size specified for the array");
}catch(e){}
            }

function o62(o85) {
                // Also remember t for use in verifying in the callback
                try {
o1 = new Int8Array(o85);
}catch(e){}

                // Reset counter
                try {
o421.o366 = 0;
}catch(e){}

                try {
for(var o46 = 0; o46 < o63.length; o46++) {
                    try {
o63[o46] = o46;
}catch(e){}
                }
}catch(e){}

                try { {} } catch(e) {}try { {
o1;
} } catch(e) {}
            };

var o8 = Promise.race(o26);

var o4 = undefined;

var o35 = { get: getter, set: undefined, configurable: true, enumerable: true }

var o5 = o4.map.call(o3, test);