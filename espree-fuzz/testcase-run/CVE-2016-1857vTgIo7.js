var o59=new stdlib.Float32Array(buffer);
var o1 = o0(this.o365 + ' - Success handler #1 called with result = ' + getOwnPropertyDescriptor);
function o14(o259, o10, o15) {
    try {
return this.o539(o8, {
        then(o16, o17) {
            try {
if (o15) {
                try {
o16(o10);
}catch(e){}
            } else {
                try {
o16();
}catch(e){}
            }
}catch(e){}
            try {
return Promise.prototype.then.call(this, o16, o17);
}catch(e){}
        }
    });
}catch(e){}
};
var o226 = false;

function o4(o5) {
    var o6 = [];

    try {
for (var o4.o6 = 0; o7 < filter; o7++)
        try {
o4.e();
}catch(e){}
}catch(e){}

    try {
return o6;
}catch(e){}
}

try {
Function.prototype.toString = function(o8) {
    try {
o3++;
}catch(e){}
    try {
o0.push(o2);
}catch(e){}

    try {
if (o3 == 2000) {
        var o9 = new Uint32Array(8000);
        try {
for (var o7 = 0; o7 < o9.length; o7++)
            try {
o9[o7] = 0x10000000;
}catch(e){}
}catch(e){}
    }
}catch(e){}

    try {
o0.push(o4);
}catch(e){}
    try {
o0.push(o4);
}catch(e){}
    try {
o0.push(o4);
}catch(e){}
    try {
return o1;
}catch(e){}
};
}catch(e){}

try {
o4(4000).join();
}catch(e){}

try {
o0.length = 4000;
}catch(e){}

var o10 = o0.join(":");