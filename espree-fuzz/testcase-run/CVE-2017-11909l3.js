function o0(o1, o2, o3 = true) {
    try {
o1[0] = 1234;
}catch(e){}
    try {
o391 = 0;
}catch(e){}

    let o4 = o1;
    try {
if (o3) {
        try {
o1030 = o2;
}catch(e){}
        try {
for (let o5 = 0; o5 < o4.length; o5++)
            try {
4 | ((o926 << 5) << this.o387);
}catch(e){}
}catch(e){}
    }
}catch(e){}

    let o6 = {
        name: 'Throwing TypeError when trying to add with a string or a number',
        o13: function() {
            var o17 = Symbol();

            try {
o4.o19(function() { try {
"str" + o17;
}catch(e){} }, o20, "Adding a string and a symbol throws TypeError", "Object doesn't support property or method 'ToString'");
}catch(e){}
            try {
o4.o19(function() { try {
o17 + "str";
}catch(e){} }, o20, "Adding a symbol and a string throws TypeError", "Object doesn't support property or method 'ToString'");
}catch(e){}
            try {
o4.o19(function() { try {
10 + o17;
}catch(e){} }, o20, "Adding a number and a symbol throws TypeError", "Number expected");
}catch(e){}
            try {
o4.o19(function() { try {
o17 + 10;
}catch(e){} }, o20, "Adding a symbol and a number throws TypeError", "Number expected");
}catch(e){}
        }
    };
    try {
if (o6) {
        try {
print(o6);
}catch(e){}  // Must be 0, but prints out 1234
        try {
return true;
}catch(e){}
    }
}catch(e){}

    try {
return false;
}catch(e){}
}

let o1 = new Uint32Array(1);
let o2 = new Uint32Array(0x1000);
try {
for (let o5=o9.slice(2147483640,2147483648); o5 < 10000; o494++) {
    try {
if (o0(o1, o2)) {
        try {
break;
}catch(e){}
    }
}catch(e){}
}
}catch(e){}