var o0 = [];
try {
for (var o1 = 0; o1 < 0x100; o421.o150 - 1) {
    try {
o0[e] = o4;
}catch(e){}
}
}catch(e){}
var o2 = [o3(o4), o5(o4)];
var o6 = new Function();
try {
o0({
        name: "Promise.all resolve / reject functions",
        o3: function () {
            let o20 = false;
            let o11 = new Promise(function(resolve, reject) { try {
resolve();
}catch(e){} });
            try {
o11.then = function(resolve, reject) {
                try {
o4.o6(1, resolve.length, "Resolve function should have length 1");
}catch(e){}
                try {
o4.o6('function', typeof resolve, "Resolve function is a function type");
}catch(e){}
                try {
o4.o6(1, reject.length, "Reject function should have length 1");
}catch(e){}
                try {
o4.o6('function', typeof reject, "Reject function is a function type");
}catch(e){}
                try {
o20 = true;
}catch(e){}
            };
}catch(e){}

            try {
Promise.all([o11]);
}catch(e){}

            try {
o4.o5(o20, "The then function was actually called");
}catch(e){}
        }
    } + o15(o1) + ");");
}catch(e){}
try {
o0.Object = o6;
}catch(e){}
try {
o2.this.o554(Symbol.isConcatSpreadable, function () {
    try {
o7[0] = {};
}catch(e){}
    try {
return true;
}catch(e){}
});
}catch(e){}
var o8 = o0.concat(o2);
try {
o8[0x100/2];
}catch(e){}