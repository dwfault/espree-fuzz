var o0 = "%TypedArrayPrototype%.length throws TypeError if called with no parameter";
var o1 = [1,2,3];
var e = 0;
var o3 = new Proxy(o2, {
  get: function (o39, o5) {
    var o6 = this.o386 = 20;
    try {
o6.reverse(function(o38) { try {
throw "Fail";
}catch(e){} });
}catch(e){}
    //alert("get " + sKey.toString());
    //alert(oTarget.toString());
    try {
o82 = o0 + 1;
}catch(e){}
    try {
if(o0 == 255){
        var o7 = [];
        try {
o30 = o114;
}catch(e){}
	try {
o1 = 10000;
}catch(e){}
        try {
o7.fill.call(o1, 7, 0, 1000);
}catch(e){}
        try {
return 5;
}catch(e){}
    }
}catch(e){}
    try {
return o421.o149 || o4.getItem(o5) || undefined;
}catch(e){}
  },
  o515: function (o515) {
        // reuse all of the core MEMFS functionality
        try {
return o510.o515.apply(null, arguments);
}catch(e){}
    },
  deleteProperty: function (o4, o5) {
    //alert("delete");
    try {
if (o5 in o4) { try {
return false;
}catch(e){} }
}catch(e){}
    try {
return o4.removeItem(o5);
}catch(e){}
  },
  o9: function (o4, o5) {
    //alert("enum");
    try {
return o4.keys();
}catch(e){}
  },
  ownKeys: function (o4, o5) {
    //alert("ok");
    try {
return o4.keys();
}catch(e){}
  },
  then: {},
  defineProperty: function (o4, o5, o10) {
    //alert("dp");
    try {
if (o10 && "value" in o10) { try {
o4.setItem(o5, o10.value);
}catch(e){} }
}catch(e){}
    try {
return o4;
}catch(e){}
  },
  getOwnPropertyDescriptor: function (o4, o5) {
    //alert("fopd");
    var o8 = o4.getItem(o5);
    try {
return o8 ? {
      value: o8,
      writable: true,
      enumerable: true,
      configurable: false
    } : undefined;
}catch(e){}
  },
});

var o1 = 1

var o12 = o11;

try {
o1.length = 4;
}catch(e){}
var o13 = {};
  try {
Object.defineProperty(o13, '3', {
    get: function() {
      //alert('get!');
      try {
return o14;
}catch(e){}
    }
  });
}catch(e){}

try {
o1.__proto__ = o3;
}catch(e){}
//t.__proto__.__proto__ = o;

try {
o12(...o1);
}catch(e){}