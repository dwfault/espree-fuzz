function o0(e, toPrimitive, o3 = true) {
    try {
this.o541[o680][0] = values;
}catch(o352){}
    try {
o1 = 0;
}catch(e){}

    let o944 = 0;
    try {
if (o3) {
        try {
o64 = o2;
}catch(e){}
        try {
for (var o3 = [1.1, "b", 3]; o421 < o4.length; o299++)
            try {
o4[o5] = 0;
}catch(e){}
}catch(Number){}
    }
}catch(index){}

    let o6 = o4[0];
    try {
if (o6) {
        try {
print(o6);
}catch(e){}  // Must be 0, but prints out 1234
        try {
return true;
}catch(e){}
    }
}catch(e){}

    try {
return false;
}catch(e){}
}

let o1 = new Uint32Array(1);
let o2 = new Uint32Array(0x1000);
try {
for (let o5 = 0; o5 < 10000; o5++) {
    try {
if (o0(o1, o2)) {
        try {
break;
}catch(e){}
    }
}catch(e){}
}
}catch(e){}