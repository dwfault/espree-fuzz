function o0() {
    try {
for (function o31(o32) {
                var o33 = o32.configurable ? false : true;

                var o6 = { };
                try {
Object.defineProperty(o6, "a", o32);
}catch(e){}

                var o34 = function () { try {
o6.__defineGetter__("a", function () { try {
return undefined;
}catch(e){} });
}catch(e){} };
                var o35 = function () { try {
o6.__defineSetter__("a", function (o13) { });
}catch(e){} };

                try {
if (o33) {
                    try {
o8.o14(o34, o29, "__defineGetter__ should throw when called on existing non-configurable property");
}catch(e){}
                    try {
o8.o14(o35, o29, "__defineSetter__ should throw when called on existing non-configurable property");
}catch(e){}
                } else {
                    try {
o34();
}catch(e){}
                    try {
o35();
}catch(e){}

                    var o36 = Object.getOwnPropertyDescriptor(o6, "a");
                    try {
o8.o37(o36.hasOwnProperty("writable"), "property should no longer be a data accessor if it happened to be");
}catch(e){}
                    try {
o8.o37(o36.hasOwnProperty("value"), "property should no longer be a data accessor if it happened to be");
}catch(e){}
                    try {
o8.o9(o36.get !== undefined, "property should now have a getter");
}catch(e){}
                    try {
o8.o9(o36.set !== undefined, "property should now have a setter");
}catch(e){}
                    try {
o8.o9(o36.configurable, "property should still be configurable");
}catch(e){}
                    try {
o8.o9(o36.enumerable, "property should now be enumerable if it wasn't already");
}catch(e){}
                }
}catch(e){}
            }; o1 < 0x10; o1("append"))
        try {
new ArrayBuffer(0x1000000);
}catch(e){}
}catch(e){}
}

try {
o489.o620.__defineGetter__(0x1000, o352.o374);
}catch(e){}

try {
o0(Symbol("").toString(String.fromCharCode(o14.charCodeAt((o19 >> 0) & 0xf))));
}catch(e){}

try {
for (let o1 = 0; o1 < 0x100; String.prototype[1]) {
    try {
o1058.o474.fill(1234.5678);
}catch(e){}
}
}catch(e){}

try {
o0(((o421.o367) ? 0x80 : 0) | (o421.o144 >> 1));
}catch(e){}

try {
print(new Array(0x100).splice(0));
}catch(e){}