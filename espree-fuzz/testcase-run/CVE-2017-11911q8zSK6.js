function o0() {
    try {
0;
}catch(repeat){}
    const o1 = 1.0;
    function o2() try { this.o393[0x69] = this.o391[0xFF69] = function (o421, o768, o70) {try {
"use strict";
}catch(e){}
      try {
o421.o838(o421.o155[0xFF68] & 0x3F, o70);
}catch(e){}
      try {
if (o421.o155[0xFF68] > 0x7F) { // high bit = autoincrement
        var next = ((o421.o155[0xFF68] + 1) & 0x3F);
        try {
o421.o155[0xFF68] = (next | 0x80);
}catch(e){}
        try {
o421.o155[0xFF69] = o421.o548[next];
}catch(e){}
      }
      else {
        try {
o421.o155[0xFF69] = o70;
}catch(e){}
      }
}catch(e){}
    } } catch(e) {}try { try {
this.o393[0] = this.o391[0xFF00] = function (o421, o768, o70) {try {
"use strict";
}catch(e){}
    try {
o421.o155[0xFF00] = (o70 & 0x30) | ((((o70 & 0x20) == 0) ? (o421.o388 >> 4) : 0xF) & (((o70 & 0x10) == 0) ? (o421.o388 & 0xF) : 0xF));
}catch(e){}
  }
}catch(e){} } catch(e) {}

    try {
return o876;
}catch(e){}
}
var o109 = new Uint8Array(o108);
try { {
o4.o11(-1, o70, "%TypedArrayPrototype%.reduceRight called the callback the correct number of times");
} } catch(e) {}