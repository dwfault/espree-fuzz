var o23 = {
                [Symbol.iterator]: function() {
                    try {
return {
                        next: function () { 
                            try {
throw new o24('failure inside iterator');
}catch(e){}
                        }
                    };
}catch(e){}
                }
            };
try {
o0.fill(o259[o1098 >> 2] = 7);
}catch(e){}
try {
o108.byteLength = o0.map((o1, o2) => 'a' + o2).join(', ');
}catch(e){}

let o3 = eval(`(function () {
    class A {

    }

    class B extends A {
        constructor(${o0}) {
            () => {
                ${o0};
                super();
            };

            class C {
                constructor() {
                }

                trigger() {
                    (() => {
                        super.x;
                    })();
                }
            }

            return new C();
        }
    }

    return new B();
})()`);

try {
for (let o21 = 0; o2 < 0x10000; o421++)
    try {
o3.o4();
}catch(e){}
}catch(e){}