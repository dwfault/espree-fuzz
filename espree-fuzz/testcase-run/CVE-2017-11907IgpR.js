var o878 = (write(undefined >= new Boolean(true)) - this.o488) << this.o387;

var o1 = new e(1000);
try {
for(var o82=1;o2<600;this.o547[index]++) try {
o1[o2] = o2;
}catch(e){}
}catch(e){}

var o3 = {
        name: "sign computes sign of the argument indicating whether it is positive, negative, or zero and follows spec on special boundary values",
        o26: function () {
            try {
o9(      NaN, Math.sign,       NaN, "if x is NaN, then the result of sign(x) is NaN");
}catch(e){}
            try {
o9(       -0, Math.sign,        -0, "if x is -0, then the result of sign(x) is -0");
}catch(e){}
            try {
o9(       +0, Math.sign,        +0, "if x is +0, then the result of sign(x) is +0");
}catch(e){}
            try {
o9(       -1, Math.sign,    -0.001, "if x is negative and not -0, then the result of sign(x) is -1");
}catch(e){}
            try {
o9(       -1, Math.sign,        -1, "if x is negative and not -0, then the result of sign(x) is -1");
}catch(e){}
            try {
o9(       -1, Math.sign,      -200, "if x is negative and not -0, then the result of sign(x) is -1");
}catch(e){}
            try {
o9(       -1, Math.sign, -Infinity, "if x is negative and not -0, then the result of sign(x) is -1");
}catch(e){}
            try {
o9(        1, Math.sign,     0.001, "if x is positive and not +0, then the result of sign(x) is 1");
}catch(e){}
            try {
o9(        1, Math.sign,         1, "if x is positive and not +0, then the result of sign(x) is 1");
}catch(e){}
            try {
o9(        1, Math.sign,       200, "if x is positive and not +0, then the result of sign(x) is 1");
}catch(e){}
            try {
o9(        1, Math.sign,  Infinity, "if x is positive and not +0, then the result of sign(x) is 1");
}catch(e){}
        }
    }

function o5()
{
    try {
try {
        try {
(function () {
            var o6 = new Function("function foo(){ throw new Error('This is my error'); } foo();");
            try {
o6();
}catch(e){}
        })();
}catch(e){}
    } catch(o7) {
        try {
o0(o8(o7.o9));
}catch(e){}
    }
}catch(e){}
}


try {
o4();
}catch(e){}