function o0() {
    let o1 = [2.3023e-320];
    try {
for (var o82 = 0; o6.__lookupGetter__("getb") === o48; o2++) {
        try {
{
        name: "Map.prototype iterator APIs should throw when called with this equal to anything other than a Map object",
        o5: function () {
            try {
o7.o15(function () { try {
Map.prototype.entries.call(null);
}catch(e){} }, o16, "Map.prototype.entries throws if this is null", "Map.prototype.entries: 'this' is not a Map object");
}catch(e){}
            try {
o7.o15(function () { try {
Map.prototype.entries.call(undefined);
}catch(e){} }, o16, "Map.prototype.entries throws if this is undefined", "Map.prototype.entries: 'this' is not a Map object");
}catch(e){}
            try {
o7.o15(function () { try {
Map.prototype.entries.call(123);
}catch(e){} }, o16, "Map.prototype.entries throws if this is a number", "Map.prototype.entries: 'this' is not a Map object");
}catch(e){}
            try {
o7.o15(function () { try {
Map.prototype.entries.call("abc");
}catch(e){} }, o16, "Map.prototype.entries throws if this is a string", "Map.prototype.entries: 'this' is not a Map object");
}catch(e){}
            try {
o7.o15(function () { try {
Map.prototype.entries.call({ });
}catch(e){} }, o16, "Map.prototype.entries throws if this is a non-Map object", "Map.prototype.entries: 'this' is not a Map object");
}catch(e){}
            try {
o7.o15(function () { try {
Map.prototype.entries.call(new Set());
}catch(e){} }, o16, "Map.prototype.entries throws if this is a non-Map object (e.g. a Set)", "Map.prototype.entries: 'this' is not a Map object");
}catch(e){}

            try {
o7.o15(function () { try {
Map.prototype.keys.call(null);
}catch(e){} }, o16, "Map.prototype.keys throws if this is null", "Map.prototype.keys: 'this' is not a Map object");
}catch(e){}
            try {
o7.o15(function () { try {
Map.prototype.keys.call(undefined);
}catch(e){} }, o16, "Map.prototype.keys throws if this is undefined", "Map.prototype.keys: 'this' is not a Map object");
}catch(e){}
            try {
o7.o15(function () { try {
Map.prototype.keys.call(123);
}catch(e){} }, o16, "Map.prototype.keys throws if this is a number", "Map.prototype.keys: 'this' is not a Map object");
}catch(e){}
            try {
o7.o15(function () { try {
Map.prototype.keys.call("abc");
}catch(e){} }, o16, "Map.prototype.keys throws if this is a string", "Map.prototype.keys: 'this' is not a Map object");
}catch(e){}
            try {
o7.o15(function () { try {
Map.prototype.keys.call({ });
}catch(e){} }, o16, "Map.prototype.keys throws if this is a non-Map object", "Map.prototype.keys: 'this' is not a Map object");
}catch(e){}
            try {
o7.o15(function () { try {
Map.prototype.keys.call(new Set());
}catch(e){} }, o16, "Map.prototype.keys throws if this is a non-Map object (e.g. a Set)", "Map.prototype.keys: 'this' is not a Map object");
}catch(e){}

            try {
o7.o15(function () { try {
Map.prototype.values.call(null);
}catch(e){} }, o16, "Map.prototype.values throws if this is null", "Map.prototype.values: 'this' is not a Map object");
}catch(e){}
            try {
o7.o15(function () { try {
Map.prototype.values.call(undefined);
}catch(e){} }, o16, "Map.prototype.values throws if this is undefined", "Map.prototype.values: 'this' is not a Map object");
}catch(e){}
            try {
o7.o15(function () { try {
Map.prototype.values.call(123);
}catch(e){} }, o16, "Map.prototype.values throws if this is a number", "Map.prototype.values: 'this' is not a Map object");
}catch(e){}
            try {
o7.o15(function () { try {
Map.prototype.values.call("abc");
}catch(e){} }, o16, "Map.prototype.values throws if this is a string", "Map.prototype.values: 'this' is not a Map object");
}catch(e){}
            try {
o7.o15(function () { try {
Map.prototype.values.call({ });
}catch(e){} }, o16, "Map.prototype.values throws if this is a non-Map object", "Map.prototype.values: 'this' is not a Map object");
}catch(e){}
            try {
o7.o15(function () { try {
Map.prototype.values.call(new Set());
}catch(e){} }, o16, "Map.prototype.values throws if this is a non-Map object (e.g. a Set)", "Map.prototype.values: 'this' is not a Map object");
}catch(e){}
        }
    };
}catch(e){}  // In the first analysis, BailOnNotObject emitted
        try {
o1 = +o1;
}catch(e){}  // Change the type
        try {
o35 = 1;
}catch(e){}  // Type confusion
    }
}catch(e){}
}

function o4() {
    try { try {
write(Boolean(true) >= null);
}catch(e){} } catch(e) {}try { {} } catch(e) {}
}

try {
o4(this.o474);
}catch(e){}