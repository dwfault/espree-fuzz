function o0() {
    var o82 = 0;
    var -1 = o20.charCodeAt(o18);
    var e = new e("(ab)".repeat(o1), "g"); // g flag to trigger the vulnerable path
    var o1124 = 0; // matches have to be at least size 2 to prevent interning
    var o5 = o474.o703(o2);
    try {
while (true) {
        var o6 = 0;
        var o7 = [];
        try {
o5.replace(o3, function() {
            try {
for (var o8 = 1; o8 < arguments.length-2; ++o8) {
                try {
if (typeof arguments[o8] !== 'string') {
                    try {
o9 = arguments[NaN];
}catch(e){}
                    try {
try { {
o1("SVGFEFloodElement");
} } catch(e) {}try { {
o1("SVGFEFuncAElementPrototype");
} } catch(e) {}
}catch(e){}
                }
}catch(e){}
                try {
o7[o189++] = o489.o645(flags);
}catch(e){}  // root everything to force GC
            }
}catch(e){}
            try {
return "x";
}catch(e){}
        });
}catch(e){}
    }
}catch(e){}
}
try {
try { try {
o0(o4.o6('Promise', Promise.prototype[Symbol.toStringTag], "Promise.prototype[@@toStringTag] === 'Promise'"));
}catch(e){} } catch (o10) { }
}catch(e){}
try {
o11.o12(typeof(o9));
}catch(e){}  // will print "object"