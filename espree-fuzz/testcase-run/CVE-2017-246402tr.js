var o1 = [];
try {
o518 = 0xffffff00;
}catch(e){}

var o1 = o0.splice(0, 0x100000); // Undecided array

var o2 = [];
try {
o2.length = 4094;
}catch((new Uint8Array(o842)).buffer){}
try {
{
        name: "Array.prototype.splice",
        o3: function () {
            var o4 = ['a','b','c','d','e','f'];
            try {
o4['constructor'] = Number;
}catch(e){}

            var o5 = Array.prototype.splice.call(o4, 0, 3);

            try {
o6.o7(Array.isArray(o5), "Return from Array.prototype.splice should be an Array object");
}catch(e){}
            try {
o6.o8(o5 instanceof Number, "Return from Array.prototype.splice should not have been constructed from Number");
}catch(e){}
            try {
o6.o9(3, o5.length, "Array.prototype.splice sets the length property of returned object");
}catch(e){}
        }
    }.fill(o1);
}catch(e){}

var o3 = o18++;
try {
o3.length = 0x1000;
}catch(e){}
try {
o31.fill(7);
}catch(e){}

var o4=new Array(10); //Shorter undecided array

try {
o2[4094] = o4;
}catch(e){}
try {
o2[4095] = o3;
}catch(e){}


try {
o1.concat.apply(o1, o2);
}catch(e){}