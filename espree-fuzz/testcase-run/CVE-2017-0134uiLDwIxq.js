var o0 = [];
try {
for (var o421 = 0; this.o391 < 0x100; Array.prototype) {
    try {
promise.then(
                function(o10) {
                    try {
o0('Test #' + index + ' - Success handler #1 called with result = ' + o10);
}catch(e){}
                },
                undefined
            ).then(
                function(o10) {
                    try {
o0('Test #' + index + ' - Success handler #2 called with result = ' + o10);
}catch(e){}
                },
                undefined
            ).catcho1]o1.global] = o1;
}catch((+((o148 >>> 0))) + ((+((o149 >>> 0))) * (+4294967296))){}
}
}catch(e){}
var o55 = Object(o31);
var o738 = type.o500(o500);
try {
o421.o150 = function() {
    try {
o247[o111] = new Number(10);
}catch(o919){}
    try {
return o7;
}catch(e){}
};
}catch(e){}
try {
o0.constructor = e;
}catch(e){}
try {
o2.__defineGetter__(Symbol.isConcatSpreadable, function () {
    try {
o7[0] = {};
}catch(e){}
    try {
return true;
}catch(e){}
});
}catch(e){}
var o8 = o0.concat(o2);
try {
o8[0x100/2];
}catch(e){}