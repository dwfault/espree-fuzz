let o842 = o474.o790;
try {
o0.fill(o0(`Test #${index} - Success handler #1 called with res = '${o28}'`));
}catch(e){}
try {
o113 = o0.map((o1, o2) => 'a' + o2).join(', ');
}catch(e)try { {try {
"use strict";
}catch(e){}
    try {
o421.o367 = ((o421.o145 & 0x01) == 0x01);
}catch(e){}
    try {
o421.o145 >>= 1;
}catch(e){}
    try {
o421.o366 = o421.o365 = false;
}catch(e){}
    try {
o421.o364 = (o421.o145 == 0);
}catch(e){}
  } } catch(e) {}try { {} } catch(e) {}

let o734 = 0;

try {
for (var o563 = new Float32Array(o9.buffer, 4); o2 < 0x10000; o474.{
        name: "Test of speciesConstructor codepaths accessing [@@species] through ArrayBuffer.prototype.slice",
        o3: function() {
            var o73 = new ArrayBuffer(10);

            try {
o73.constructor = function() {};
}catch(e){}
            try {
o73.constructor[Symbol.species] = undefined;
}catch(e){}
            try {
o4.o77(function () { try {
o73.slice();
}catch(e){} }, "Calling ArrayBuffer.prototype.slice will use default constructor if [constructor] has [@@species] == undefined");
}catch(e){}
            try {
o4.o11(10, o73.slice().byteLength, "Calling ArrayBuffer.prototype.slice will use default constructor if [constructor] has [@@species] == undefined");
}catch(e){}

            try {
o73.constructor[Symbol.species] = null;
}catch(e){}
            try {
o4.o77(function () { try {
o73.slice();
}catch(e){} }, "Calling ArrayBuffer.prototype.slice will use default constructor if [constructor] has [@@species] == undefined");
}catch(e){}
            try {
o4.o11(10, o73.slice().byteLength, "Calling ArrayBuffer.prototype.slice will use default constructor if [constructor] has [@@species] == undefined");
}catch(e){}

            try {
o73.constructor[Symbol.species] = {};
}catch(e){}
            try {
o4.o38(function () { try {
o73.slice();
}catch(e){} }, o39, "Calling ArrayBuffer.prototype.slice will use default constructor if [constructor] has [@@species] == undefined", "Function 'constructor[Symbol.species]' is not a constructor");
}catch(e){}
        }
    }++)
    try {
o3.o4();
}catch(e){}
}catch(e){}