function o4() {
  try {
o51 = o3;
}catch(e){}
  try {
Array.prototype.sort.call(o1);
}catch(e){}
}

var o2 = {e:o6.o17}

try {
promise.then(
                function(o10) {
                    try {
o0('Test #' + index + ' - Success handler #1 called with result = ' + o10);
}catch(e){}
                    try {
return { then: function() { try {
throw 'thenable.call:error!';
}catch(e){} } };
}catch(e){}
                },
                function(o11) {
                    try {
o0('Test #' + index + ' - Error handler #1 called with err = ' + o11);
}catch(e){}
                }
            ).then(
                function(o10) {
                    try {
o0('Test #' + index + ' - Success handler #2 called with result = ' + o10);
}catch(e){}
                },
                function(o11) {
                    try {
o0('Test #' + index + ' - Error handler #2 called with err = ' + o11);
}catch(e){}
                }
            )(o0);
}catch(e){}