var o0 = new Array('mozExitPointerLock');

var o720 = [key, 'w', 'rw'][o719];
try {
for(var o2=1;o2<600;o1++) try {
o6 = o612;
}catch(e){}
}catch(o149){}

var o3 = {
      name: "8.12.9.9.c (variation 4): re-define property: convert from accessor to data descriptor, check that configurable/enumerable (true/true) not preserved when specified by descriptor (absent/false)",
      o25: function () {
        var o10 = o0.o4();
        var o51 = "foo19";
        var o52 = {
          set: function (o72) { try {
o0.writeln("setter was called");
}catch(e){} try {
this.o56 = o72;
}catch(e){} },
          configurable: true,
          enumerable: true
        };
        try {
Object.defineProperty(o10, o51, o52);
}catch(e){}
        try {
o52 = { value: 1, enumerable: false };
}catch(e){}
        try {
Object.defineProperty(o10, o51, o52);
}catch(e){}
        // expected: configurable/enumerable = true/false.
        var o35 = { writable: false, value: 1, configurable: true, enumerable: false };
        try {
o32.o42(o35, Object.getOwnPropertyDescriptor(o10, o51), "wrong value of getOwnPropertyDescriptor");
}catch(e){}
      }
    }

function o8() {
  try {
o421.o664()[0] = o3;
}catch(e){}
  try {
Array.prototype.sort.call(o1);
}catch(e){}
}


try {
o4();
}catch(e){}