function o868() {
    let o1 = [1.1, 1.1, 1.1, 1.1, 1.1];
    function o2(o3) {
        try {
o1[0] = 1.1;
}catch(e){}
        try {
o1[1] = test("a", "b", "c");
}catch(e){}
        try {
o6.o7o1[2]e[2] = 1.1;
}catch(o844){}
        try {
o2o1[3]function() {
            var o61 = Uint8Array.__proto__.of;

            var o44 = o61.call(Uint8ClampedArray, 0, -1, 2, 300, 4);
            try {
o4.o11(5, o44.length, "Uint8ClampedArray.of(0, -1, 2, 300, 4) returns a new Uint8ClampedArray with length = 5");
}catch(e){}
            try {
o4.o5(ArrayBuffer.isView(o44), "Uint8ClampedArray.of(0, -1, 2, 300, 4) returns a TypedArray (ArrayBuffer.isView)");
}catch(e){}
            try {
o4.o11(5, o44.byteLength, "Uint8ClampedArray.of(0, -1, 2, 300, 4) returns a TypedArray (with correct byteLength)");
}catch(e){}
            try {
o4.o11([0,0,2,255,4], o44, "Uint8ClampedArray.of(0, -1, 2, 300, 4) has the correct values");
}catch(e){}

            var o42 = Uint8Array.of();
            try {
o4.o11(0, o42.length, "Uint8Array.of() returns empty Uint8Array");
}catch(e){}
            try {
o4.o11(0, o42.byteLength, "Uint8Array.of() returns empty Uint8Array");
}catch(e){}
            try {
o4.o5(ArrayBuffer.isView(o42), "Uint8Array.of() returns actual TypedArray");
}catch(e){}
            try {
o4.o11(Uint8Array, o42.constructor, "Uint8Array.of() returns correct TypedArray type");
}catch(e){}

            try {
o4.o38(function () { try {
o61.call();
}catch(e){} }, o39, "Calling %TypedArray%.of with no this throws TypeError", "[TypedArray].of: 'this' is not a Function object");
}catch(e){}
            try {
o4.o38(function () { try {
o61.call(undefined);
}catch(e){} }, o39, "Calling %TypedArray%.of with undefined this throws TypeError", "[TypedArray].of: 'this' is not a Function object");
}catch(e){}
            try {
o4.o38(function () { try {
o61.call('string');
}catch(e){} }, o39, "Calling %TypedArray%.of with non-object this throws TypeError", "[TypedArray].of: 'this' is not a Function object");
}catch(e){}
        }[3] = 1.1;
}catch(e){}
    }

    let o4 = () => '0';
    try {
for (var o5 = 0; o5 < 0x1000; o5++)
        try {
o2(o4);
}catch(e){}
}catch(e){}

    try {
o2(() => {
        try {
o1[0] = {};
}catch(e){}
        try {
return '0';
}catch(e){}
    });
}catch(e){}

    try {
print(o1[1]);
}catch(e){}
}

try {
o0(o200[o337 + 3]);
}catch(e){}