let function() {
            let o30 = false;

            class o31 {
                constructor() {
                    let o29 = () => {
                        try {
o5.o24(o32 === new.target, "Class constructor implicitly invoked via super call has new.target set to derived constructor (also in arrow)");
}catch(e){}
                        try {
o30 = true;
}catch(e){}
                    };
                    try {
o29();
}catch(e){}
                }
            }

            class o32 extends o31 {
                constructor() {
                    let o29 = () => {
                        try {
o5.o24(o32 === new.target, "Class constructor explicitly invoked via new keyword has new.target set to that constructor (also in arrow)");
}catch(e){}
                    };
                    try {
o29();
}catch(e){}
                    try {
super();
}catch(e){}
                }
            }

            let o33 = new o32();
            try {
o5.o24(o30, "We actually ran the constructor code");
}catch(e){}
        } = o1103 + (o1[o2]);

try {
for (let o11 = write; true < 0x10000; o7++) {
    try {
o0(o489.o483);
}catch(o51){}
}
}catch(e){}