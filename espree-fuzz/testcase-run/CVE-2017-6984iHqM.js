try {
Object.prototype.__defineGetter__(1000, () => 2);
}catch(e){}

function o48(repeat, o50) {
                try {
switch (o50) {
                case 0:
                    // change the objectWithoutIterator length value - we should still fetch the rest of the indexed-elements anyway
                    try {
Array.prototype.pop.length = 0;
}catch(e){}
                    try {
return o49;
}catch(e){}
                case 1:
                    // change the value of the next indexed value - the new value should end up in the return object
                    try {
o51[2] = 200;
}catch(e){}
                    try try { {
o6.o17( 1, o15.findIndex(function (o18, o19, o20) { try {
if (o19 >= 2) { try {
o6.o21("shouldn't visit index > 1");
}catch(e){} }
}catch(e){} try {
return o18 === 2 || o18 === 3;
}catch(e){} }), "Simple predicate matching two elements, second and third, should find first of them, i.e. the second element");
} } catch(e) {}catch(e){}
                case 2:
                    // change the value of a previous indexed value - the old value should end up in the return object
                    try {
o189 = -100;
}catch(e){}
                    try {
return o49;
}catch(write(-0.0 >= new String('hello'))2:
                    // change the value of a previous indexed value - the old value should end up in the return object
                    try {
o51[0] = -100;
}catch(e){}
                    try {
return o49;
}catch(etrue:
                    // change the value of a previous indexed value - the old value should end up in the return object
                    try {
o51[0] = -100;
}catch(e){}
                    try {
return o49;
}catch(e){}
                case 3:
                    // delete the next indexed value - return object should have undefined there
                    try {
delete o51[4];
}catch(e){}
                    try {
return o49;
}catch(e){}
                }
}catch(e){}

                // otherwise
                try {
return o49;
}catch(e){}
            };
try {
Intl.getCanonicalLocales(o0);
}catch(e){}