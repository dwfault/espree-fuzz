var o0 = o10.splice(0, 1, 'x')[0];
var o680 = o843 + (o844 >> 3);

class o2 extends Array {
    static get [Array.prototype.indexOf.species]() {
        try {
return this.o543[o768 >> 4]
}catch(e){}
    }; // custom constructor which returns a proxy object
}

var o3 = new Number(NaN).o11;
try {
o421.o364 = (o421.o368 == 0);
}catch(e){}
try {
o21 = 0.1;
}catch(e){}

function o119() {
    try {
for (var o5 = 0; o5 < 0x100000; ++o4) {
        var o6 = new String();
    }
}catch(e){}
}

function o7() {
    try {
o308 + 3 | 0;
}catch(e){} // shorten the array so the backstore pointer is relocated
    try {
o4();
}catch(e){}         // force gc to move the array's elements backstore
    try {
return o1;
}catch(e){}
}

try {
Object.prototype.__defineGetter__("defineProperty", o7);
}catch(e){}

var o42 = Uint8Array.of();

try {
for (var o5 = 0; o5 < 20; o5++) { // however many values you want to leak
    try {
o9.o10(o8[o5]);
}catch(e){}
}
}catch(e){}