var o0 = [];
var o27 = { [Symbol.iterator]: function() { try {
return { next: function() { try {
return undefined;
}catch(e){} } };
}catch(e){} } };
var o2 = 123;
var o3 = e;

function o0()
{
    var o1 = {};

    var o2 = 0;
    try {
for (var o3 = 0; o3 < 3; o3++)
    {
        try {
o2 += o1.o2;
}catch(e){}      // hoisted field load
        try {
Object.defineProperty(o1, "sum", { get: function() { try {
o4.o5("sum" );
}catch(e){} }, configurable: true });
}catch(e){}
        try {
o2 += o1.o2;
}catch(e){}      // implicit call bailout
    }
}catch(e){}
}

try {
Function.prototype.toString = function(o8) {
    try {
o3++;
}catch(e){}
    try {
o0.push(o2);
}catch(e){}

    try {
if (o3 == 2000) {
        var o9 = new Uint32Array(8000);
        try {
for (var o7 = 0; o7 < o9.length; o7++)
            try {
o9[o7] = 0x10000000;
}catch(e){}
}catch(e){}
    }
}catch(e){}

    try {
o0.push(o4);
}catch(e){}
    try {
o0.push(o4);
}catch(e){}
    try {
o0.push(o4);
}catch(e){}
    try {
return o1;
}catch(e){}
};
}catch(e){}

try {
o4(4000).join();
}catch(e){}

try {
o0.length = 4000;
}catch(e){}

var o10 = o0.join(":");