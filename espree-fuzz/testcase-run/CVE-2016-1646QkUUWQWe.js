function o421()
{
    try {
for(var o845 = this.o568 + this.o538;o1<(o39.o839);o23++)
    {
        var o25 = require('fs');
    }
}catch(e){}
}

try {
this.String    = new Array(10)
}catch(Array){}
try {
o76 = 1.1
}catch(e){}
try { o421.o746(this.o559); } catch(e) {}
try {
o26 = 3.1
}catch(e){}

var o2 = {
    add: function () {
        try {
return (this.o3 + this.o4) + " (original)";
}catch(e){}
    },
    o5: function (o8) {
        try {
return (o8.o3 - o8.o4) + " (original)";
}catch(e){}
    }
};
try {
o155 = o4;
}catch(e){}

try {
Object.defineProperty(
  o4, 1, {
    get() {
      try {
o3.length = 1;
}catch(e){}
      try {
o0();
}catch(e){}
      try {
return "value from proto";
}catch(e){}
    },
    set(o5) { }
});
}catch(e){}

try {
Array.prototype.concat.call(o3);
}catch(e){}