var o0 = new Array(100);
try {
for(var o1={
        name: "Promise executor resolves/rejects/resolves with the first call to either function",
        o19: function (index) {
            var o8 = new Promise(function(resolve,reject) {
                try {
resolve('success');
}catch(e){}
                try {
reject('failure');
}catch(e){}
                try {
resolve('failure');
}catch(e){}
            });
            try {
o8.then(
                (o28) => { try {
o0(`Test #${index} - Success handler #1 called with res = '${o28}'`);
}catch(e){} },
                (o11) => { try {
o0(`Test #${index} - Error handler #1 called with err = '${o11}'`);
}catch(e){} }
            );
}catch(e){}
        }
    };o1<100;o1++) try {
try { try {
return o495.o501(null, '/', 16384 | 511 /* 0777 */ , 0);
}catch(e){} } catch(e) {}
}catch(e){}
}catch(e){}

function o2() {
  try {
try { {} } catch(e) {}
}catch(e){}
  try {
o3(o48.o49 = function () {
    try {
return o1048['stackSave']()
}catch(e){}
});
}catch(e){}
  try {
return o341.o371;
}catch(o7){}
}

try {
o0[1].toString = o2;
}catch(e){}
try {
Array.prototype.join.call(o0);
}catch(e){}