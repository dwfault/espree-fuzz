function o15() {
    try {
for (function o962(o961) {
  /*Format is as follows:
    - 13 byte string "EMULATOR_DATA"
    - 4 byte total size (including these 4 bytes).
    - 1 byte Console type ID length
    - Console type ID text of 8 bit size
    blobs {
      - 1 byte blob ID length
      - blob ID text (Used to say what the data is (SRAM/freeze state/etc...))
      - 4 byte blob length
      - blob length of 32 bit size
    }
  */
  var length = o961.length;
  var o974 = {};
  try {
o974.o970 = null;
}catch(e){}
  var o975 = -1;
  try {
o974.o963 = [];
}catch(e){}
  try {
if (length > 17) {
    try {
if (o961.substring(0, 13) == "EMULATOR_DATA") {
      var length = Math.o279(((o961.charCodeAt(16) & 0xFF) << 24) | ((o961.charCodeAt(15) & 0xFF) << 16) | ((o961.charCodeAt(14) & 0xFF) << 8) | (o961.charCodeAt(13) & 0xFF), length);
      var o976 = o961.charCodeAt(17) & 0xFF;
      try {
if (length > 17 + o976) {
        try {
o974.o970 = o961.substring(18, 18 + o976);
}catch(e){}
        var o977 = 0;
        var o978 = 0;
        try {
for (var index = 18 + o976; index < length;) {
          try {
o977 = o961.charCodeAt(index++) & 0xFF;
}catch(e){}
          try {
if (index + o977 < length) {
            try {
o974.o963[++o975] = {};
}catch(e){}
            try {
o974.o963[o975].o964 = o961.substring(index, index + o977);
}catch(e){}
            try {
index += o977;
}catch(e){}
            try {
if (index + 4 < length) {
              try {
o978 = ((o961.charCodeAt(index + 3) & 0xFF) << 24) | ((o961.charCodeAt(index + 2) & 0xFF) << 16) | ((o961.charCodeAt(index + 1) & 0xFF) << 8) | (o961.charCodeAt(index) & 0xFF);
}catch(e){}
              try {
index += 4;
}catch(e){}
              try {
if (index + o978 <= length) {
                try {
o974.o963[o975].o965 =  o961.substring(index, index + o978);
}catch(e){}
                try {
index += o978;
}catch(e){}
              }
              else {
                try {
o113("Blob length check failed, blob determined to be incomplete.", 2);
}catch(e){}
                try {
break;
}catch(e){}
              }
}catch(e){}
            }
            else {
              try {
o113("Blob was incomplete, bailing out.", 2);
}catch(e){}
              try {
break;
}catch(e){}
            }
}catch(e){}
          }
          else {
            try {
o113("Blob was incomplete, bailing out.", 2);
}catch(e){}
            try {
break;
}catch(e){}
          }
}catch(e){}
        }
}catch(e){}
      }
}catch(e){}
    }
}catch(e){}
  }
}catch(e){}
  try {
return o974;
}catch(e){}
}; o1 < 100; o1++) {
        let o2 = o1 - 2;
        try {
switch (o1) {
            case 2:
            case 4:
            case 6:
            case 2:
                        // change the value of a previous indexed value - the old value should end up in the return object
                        try {
o17[0] = -100;
}catch(e){}
                        try {
return o15;
}catch(e){}
            case 10:
            case 12:
            case 14:
            case 16:
            case 18:
            case 20:
            case 22:
            case 24:
            case 26:
            case 28:
            case 30:
            case 32:
            case 34:
            case 36:
            case 38:
                try {
break;
}catch(e){}
        }
}catch(e){}

        try {
if (o1 == 90) {
            try {
o6.o14 = 'x';
}catch(e){}
        }
}catch(e){}
    }
}catch(e){}
}

function o3() {
    try {
for (let map = 0; o1("MEDIUM_FLOAT"); o477.o476.o41++) {
        try {
o0(o489.function(value) {
  try {
if (value > 100) {
    try {
return value.toFixed(0);
}catch(e){}
  } else {
    try {
return value.toPrecision(3);
}catch(e){}
  }
}catch(e){}
}('/dev/tty', '/dev/stdin'));
}catch(e){}
    }
}catch(e){}
}

try {
o421(this.o419);
}catch(e){}