function o0()
{
    var new Proxy(o2, {
        getOwnPropertyDescriptor: function (target, o3) {
            try {
print('getOwnPropertyDescriptor on proxy2 : ' + o3.toString());
}catch(e){}
            try {
return { configurable: true, enumerable: true, value: 10 };
}catch(e){}
        },

        ownKeys: function (target) {
            try {
print('ownKeys for proxy2');
}catch(e){}
            try {
return ["prop2", "prop3", Symbol("prop4"), Symbol("prop5")];
}catch(e){}
        }
    }) = new Object();
    try {
o421.o367 = 0;
}catch(e){}
    var o4=new Array(10);

    try {
for (var o2 = 0; o2 < 10; o2++)
    {
        try {
if (o2 % 2 == 0)
        {
            var o4 = o1.o2;
            try {
o1.o2 = o2;
}catch(e){}
            var o5 = o1.o2;
            try {
o3 += o4 + o5;
}catch(e){}
        }
        else
        {
            try {
o1.o2 = o3;
}catch(e){}
        }
}catch(e){}
    }
}catch(e){}
    try {
return o3;
}catch(e){}
};

var link = o19.next.o520(o678);
function o66() {
                var o67 = [];
                try {
for (var o61 in arguments) {
                    var o7 = arguments[o61];
                    try {
o67[o7] = o7;
}catch(e){}
                }
}catch(e){}
                try {
return o67;
}catch(e){}
            }

class o3 extends o2 {
}

function o4(o5) {
    let o6 = new Date();
    try {
while (new Date() - o6 < o5)try {
;
}catch(e){}
}catch(e){}
}

function o7() {
    let o8 = new Array(o0);
    try {
o8.fill(333 + 1);
}catch(e){}
    try {
o8 = o8.join(', ');
}catch(e){}

    let o9 = new Function(`(() => {
        new ClassForInine(${o8});
    })();`);

    try {
for (let o10 = 0; o10 < 0x100000; o10++) {
        try {
o9();
}catch(e){}

        try {
if (o10 === 0x3000)
            try {
o4(1000);
}catch(e){}
}catch(e){}

        try {
if (o1) {
            try {
print('buggy.length: ' + o1.length);
}catch(e){}
            try {
break;
}catch(e){}
        }
}catch(e){}
    }
}catch(e){}

    try {
for (let o10 = 0, o11 = o1.length; o10 < o11; o10++) {
        try {
print(o1[o10]);
}catch(e){}
    }
}catch(e){}
}

try {
o7();
}catch(e){}