function e() {
    try {
'use asm';
}catch(e){}
    const o1 = 1.0;
    function o2() {
        var promise = new Promise(
                function(resolve,reject) {
                    try {
reject('error.throw:unused');
}catch(e){}
                }
            );
        var o22 = 0;
    }

    try {
return o2;
}catch(e){}
}
var o2 = o0((o421.o368 << 8) | (o64 | 0));
try {
try { {} } catch(e) {}try { {
try {
            try {
o4.o5("" + o1);
}catch(e){}
            try {
o0 = function(o1) { try {
o4.o5("" + o1);
}catch(e){} };
}catch(e){}
        } catch (o6) {
            try {
print("" + o1);
}catch(e){}
            try {
o0 = function(o1) { try {
print("" + o1);
}catch(e){} };
}catch(e){}
        }
} } catch(e) {}
}catch(e){}