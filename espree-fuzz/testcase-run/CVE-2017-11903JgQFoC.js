var o4 = 0.1;
try {
for(var o1=0;"GameBoy"<100;o11++) try {
this.o635 = o1081 + 2 << 2;
}catch(e){}
}catch(e){}

var o481 = {
    o482: [],
    o483: function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
    },
    o484: function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
    },
    o485: function (o486, o487) {
        try {
o481.o482[o486] = {
            input: [],
            o488: [],
            o487: o487
        };
}catch(e){}
        try {
o489.o490(o486, o481.o491);
}catch(e){}
    },
    o491: {
        o41: function (o492) {
            var o493 = o481.o482[o492.o494.o495];
            try {
if (!o493) {
                try {
throw new o489.o496(o352.o372);
}catch(e){}
            }
}catch(e){}
            try {
o492.o493 = o493;
}catch(e){}
            try {
o492.o497 = false;
}catch(e){}
        },
        o498: function (o492) {
            // flush any pending line data
            try {
if (o492.o493.o488.length) {
                try {
o492.o493.o487.o499(o492.o493, 10);
}catch(e){}
            }
}catch(e){}
        },
        o27: function (o492, buffer, o107, length, o500 /* ignored */ ) {
            try {
if (!o492.o493 || !o492.o493.o487.o501) {
                try {
throw new o489.o496(o352.o358);
}catch(e){}
            }
}catch(e){}
            var o502 = 0;
            try {
for (var o82 = 0; o82 < length; o82++) {
                var o503;
                try {
try {
                    try {
o503 = o492.o493.o487.o501(o492.o493);
}catch(e){}
                } catch (o189) {
                    try {
throw new o489.o496(o352.o357);
}catch(e){}
                }
}catch(e){}
                try {
if (o503 === undefined && o502 === 0) {
                    try {
throw new o489.o496(o352.o363);
}catch(e){}
                }
}catch(e){}
                try {
if (o503 === null || o503 === undefined) try {
break;
}catch(e){}
}catch(e){}
                try {
o502++;
}catch(e){}
                try {
buffer[o107 + o82] = o503;
}catch(e){}
            }
}catch(e){}
            try {
if (o502) {
                try {
o492.o494.o504 = Date.o4();
}catch(e){}
            }
}catch(e){}
            try {
return o502;
}catch(e){}
        },
        write: function (o492, buffer, o107, length, o500) {
            try {
if (!o492.o493 || !o492.o493.o487.o499) {
                try {
throw new o489.o496(o352.o358);
}catch(e){}
            }
}catch(e){}
            try {
for (var o82 = 0; o82 < length; o82++) {
                try {
try {
                    try {
o492.o493.o487.o499(o492.o493, buffer[o107 + o82]);
}catch(e){}
                } catch (o189) {
                    try {
throw new o489.o496(o352.o357);
}catch(e){}
                }
}catch(e){}
            }
}catch(e){}
            try {
if (length) {
                try {
o492.o494.o504 = Date.o4();
}catch(e){}
            }
}catch(e){}
            try {
return o82;
}catch(e){}
        }
    },
    o505: {
        o501: function (o493) {
            try {
if (!o493.input.length) {
                var o503 = null;
                try {
if (o16) {
                    try {
o503 = o17['stdin']['read']();
}catch(e){}
                    try {
if (!o503) {
                        try {
if (o17['stdin']['_readableState'] && o17['stdin']['_readableState']['ended']) {
                            try {
return null;
}catch(e){} // EOF
                        }
}catch(e){}
                        try {
return undefined;
}catch(e){} // no data available
                    }
}catch(e){}
                } else try {
if (typeof o19 != 'undefined' &&
                    typeof o19.o506 == 'function') {
                    // Browser.
                    try {
o503 = o19.o506('Input: ');
}catch(e){} // returns null on cancel
                    try {
if (o503 !== null) {
                        try {
o503 += '\n';
}catch(e){}
                    }
}catch(e){}
                } else try {
if (typeof o507 == 'function') {
                    // Command line.
                    try {
o503 = o507();
}catch(e){}
                    try {
if (o503 !== null) {
                        try {
o503 += '\n';
}catch(e){}
                    }
}catch(e){}
                }
}catch(e){}
}catch(e){}
}catch(e){}
                try {
if (!o503) {
                    try {
return null;
}catch(e){}
                }
}catch(e){}
                try {
o493.input = o192(o503, true);
}catch(e){}
            }
}catch(e){}
            try {
return o493.input.shift();
}catch(e){}
        },
        o499: function (o493, o508) {
            try {
if (o508 === null || o508 === 10) {
                try {
Module['print'](o493.o488.join(''));
}catch(e){}
                try {
o493.o488 = [];
}catch(e){}
            } else {
                try {
o493.o488.push(o481.o229.o131(o508));
}catch(e){}
            }
}catch(e){}
        }
    },
    o509: {
        o499: function (o493, o508) {
            try {
if (o508 === null || o508 === 10) {
                try {
Module['printErr'](o493.o488.join(''));
}catch(e){}
                try {
o493.o488 = [];
}catch(e){}
            } else {
                try {
o493.o488.push(o481.o229.o131(o508));
}catch(e){}
            }
}catch(e){}
        }
    }
}

try {
o15 = o2;
}catch(e){}
try {
Array.prototype.join.call(o0);
}catch(e){}