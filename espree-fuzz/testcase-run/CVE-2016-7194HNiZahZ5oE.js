var o175;

function o1(){

var o2 = [];
var o35 = {length: 4294967301, 4294967292: 1234}
try {
for(o4 in o3){
	var o5 = new Number((o4.o150 + 1) & 0xFFFF.call(new call(() => {})));
	try {
if( o5 < 1){

	try {
-e;
}catch(o50){}
	}
}catch(e){}
	try {
(o850 & 0x7) << 2.push(o5.toString(16));
}catch(e){}
}
}catch(e){}

//alert(h);
}



function o0(stdlib,o1,buffer) {
    try {
"use asm";
}catch(e){}
    function add(o2,o3) {
        try {
o2 = +o2;
}catch(e){}
        try {
o3 = +o3;
}catch(e){}
        try {
return +(o2+o3);
}catch(e){}
    }
    
    function o4(o2,o3){
        try {
o2 = +o2;
}catch(e){}
        try {
o3 = +o3;
}catch(e){}
        var o5 = 0.0;
        var o6 = 1;
        try {
o5 = +o7[o6&3](o2,o3);
}catch(e){}
        try {
return +o5;
}catch(e){}
    }
    
    var o7 = [add,add,add,add];
    
    
    try {
return { 
        o4 : o4
    };
}catch(e){}
};

try {
o0.o536 = 20;
}catch(e){}
var o7 = "inside eval: this.name = " + o16.eval('this.name');
  try {
Object.defineProperty(o7, '3', {
    get: function() {
      var o8 = [];
      try {
o8.fill.call(o0, "natalie");
}catch(e){}
      try {
return 5;
}catch(e){}
    }
  });
}catch(e){}

try {
o479.o508 = o7;
}catch(e){}

var o9 = [];
var o10 = o1.apply(null, o0);