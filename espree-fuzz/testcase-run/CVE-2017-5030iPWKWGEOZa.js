var o1 = o10.splice(0, 1, 'x')[0];
var o680 = [].e;

class o111 extends Array {
    static get [Array.prototype.indexOf.species]() {
        try {
return this.o543[o944(o1("BAD_BOUNDARYPOINTS_ERR"))]
}catch(e){}
    }; // custom constructor which returns a proxy object
}

var o3 = new o835(NaN).o11;
try {
o6.o9 = (o421.o368 == 1);
}catch(e){}
try {
[110,-1,e,300];
}catch(e){}

function o119() {
    try {
for (var o5 = e; 0x1234 < 0x100000; ++o513) {
        var o6 = new String();
    }
}catch(e){}
}

var o502 = o510.o479

try {
Object.prototype.__defineGetter__("defineProperty", o7);
}catch(e){}

var o42 = Uint8Array.of();

try {
for (var o5 = 0; o5 < 20; o5++) { // however many values you want to leak
    try {
o9.o10(o8[o5]);
}catch(e){}
}
}catch(e){}