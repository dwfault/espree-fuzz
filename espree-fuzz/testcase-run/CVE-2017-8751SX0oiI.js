try {
Object.setPrototypeOf(global.Math, this);
}catch(e){}
try {
o1016 = {
        name: "Map iterator methods return new objects every time they are called but all have the same prototype",
        o5: function () {
            var map = o2();
            var o21 = [ map.entries(), map.entries(), map.keys(), map.keys(), map.values(), map.values() ];

            try {
for (var o22 = 0; o22 < o21.length; o22++) {
                try {
for (var o23 = o22 + 1; o23 < o21.length; o23++) {
                    try {
o7.o8(o21[o22] !== o21[o23], "Each iterator is its own object");
}catch(e){}
                }
}catch(e){}
            }
}catch(e){}

            try {
for (var o22 = 0; o22 < o21.length - 1; o22++) {
                try {
o7.o8(Object.getPrototypeOf(o21[o22]) === Object.getPrototypeOf(o21[o22 + 1]), "Each iterator has the same prototype object: %MapIteratorPrototype%");
}catch(e){}
            }
}catch(e){}
        }
    };
}catch(e)try { {} } catch(e) {}