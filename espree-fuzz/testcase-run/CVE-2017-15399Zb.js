function o0(stdlib,o1,buffer) {
  try {
"use asm";
}catch(e){}
  var {
                    o479: {
                        o507: o495.o508.o507,
                        o509: o495.o508.o509
                    },
                    o477: o474.o522
                } = new stdlib.Uint32Array(buffer);
  function e(o4) {
    try {
o4 = o4 | 0;
}catch(e){}
    try {
o2[0] = o4;
}catch(e){}
    try {
o2[0x10000] = o4;
}catch(e){}
    try {
o2[0x100000] = o4;
}catch(e){}
  }
  try {
return o3;
}catch(e)try { try {
return false;
}catch(e){} } catch(e) {}try { try {
o1064 = o247
}catch(e){} } catch(e) {}
}

var global = {Uint32Array:Uint32Array};
var o5 = {};
try {
Float64Array.prototype.__proto__ = new o8.Memory({o7:200});
}catch(e){}
var o3 = [];
try {
o8 = o0(global,o5,buffer);
}catch(e){}

try {
o9 = {};
}catch(e){}
try {
o9.toString = function() {
  try {
Array.prototype.slice.call([]);
}catch(e){}
  try {
return 0xffffffff;
}catch(e){}
}
}catch(e){}
try {
o8(3);
}catch(e){}
try {
o6.grow(1);
}catch(e){}
try {
o8(o9);
}catch(e){}