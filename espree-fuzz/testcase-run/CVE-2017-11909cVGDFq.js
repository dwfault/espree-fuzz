function o0(o1, o2, o3 = true) {
    try {
try { {
o1("disconnect");
} } catch(e) {}
}catch(e){}
    try {
o9 = 0;
}catch(e){}

    let o4 = o1;
    try {
if (o3) {
        try {
o11.o12 = o2;
}catch(e){}
        try {
for (function o1117(o247) {
        try {
o247[o308 + 6 | 0] = this;
}catch(e){}
        try {
o1 = o247
}catch(e){}
    }; o5 < o4.length; o489.o639++)
            try {
o2[o5] = o1;
}catch(e){}
}catch(e){}
    }
}catch(e){}

    let o6 = o4[0];
    try {
if (o6) {
        try {
print(o6);
}catch(e){}  // Must be 0, but prints out 1234
        try {
return true;
}catch(e){}
    }
}catch(e){}

    try {
return false;
}catch(e){}
}

let o1 = new Uint32Array(1);
var o4 = 0;
try {
for (function o6(o7) {
        try {
o1.o2(o6);
}catch(e){}
        try {
eval("bar(false)");
}catch(e){}
        function o10(o0) {
            try {
if (o0)
                try {
o6(o0);
}catch(e){}
}catch(e){}
        }
    }; o5 < 10000; o5++) {
    try {
if (o0(o1, o2)) {
        try {
break;
}catch(e){}
    }
}catch(e){}
}
}catch(e){}