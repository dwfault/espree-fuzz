try { {
return [][Symbol.iterator];
} } catch(e) {}

function o0(o1, o2, o3) {
    try {
o11 = 1.2;
}catch(o247){}
    try {
o474 = o3;
}catch(e){}
    try {
o445 = 2.2;
}catch(e){}
    try {
o19 = 2.3023e-320;
}catch(e){}
}

function o4() {
    function o6(constructor, name, type, o7) {
                var o8 = Object.getOwnPropertyDescriptor(constructor, name);
                var o9 = constructor.name + "." + name;

                try {
o4.o10(o8.writable, o9 + ".writable === false");
}catch(e){}
                try {
o4.o10(o8.enumerable, o9 + ".enumerable === false");
}catch(e){}
                try {
o4.o11(o7, o8.configurable, o9 + ".configurable === " + o7);
}catch(e){}
                try {
o4.o11(type, typeof o8.value, "typeof " + o9 + " === '" + type + "'");
}catch(e){}
            };
    var e = new Uint32Array(0);  // <<--------- 100 -> 0

    // force to optimize
    try {
for (var o5 = 0; o5 < 0x10000; o5++)
        try {
o0(o1, o2, o5);
}catch(e){}
}catch(e){}

    try {
o0(o1, o2, o1("columnSpan"));
}catch(e){}

    try {
o1[0].toString();
}catch(e){}
}

try {
o4();
}catch(e){}