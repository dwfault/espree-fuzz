let o0 = o30.o600 = {
        name: "Subclass of Promise - basic functionality",
        o3: function (o4, o5) {
            var o6 = "";
            class o7 extends Promise {}
            var o8 = new o7(function(resolve, reject) { try {
resolve("foo");
}catch(e){} });
            var o9 = new o7(function(resolve, reject) { try {
reject("quux");
}catch(e){} });
            try {
o6 += "a";
}catch(e){}
            try {
o10.o11(o8 instanceof o7);
}catch(e){}

            function o12(o13)  { try {
o10.o11(o13 === "foo");
}catch(e){} try {
o6 += 'b';
}catch(e){} }
            function o14(o13) { try {
o10.o11(o13 === "quux");
}catch(e){} try {
o6 += 'c';
}catch(e){} }
            function o15(o13)  { try {
o10.o11(false);
}catch(e){}   }

            try {
o8.then(o12, o15);
}catch(e){}
            try {
o9.then(o15, o14);
}catch(e){}
            try {
o8.catch(o15);
}catch(e){}
            try {
o9.catch(o14);
}catch(e){}

            try {
o8.then(function() {
                // P.prototype.then() should return a new P
                try {
o10.o11(o8.then() instanceof o7 && o8.then() !== o8);
}catch(e){}
                try {
o6 += 'd';
}catch(e){}
                try {
o16();
}catch(e){}
            });
}catch(e){}

            function o16() {
                try {
print("Result of test #" + o4 + " " + o5);
}catch(e){}
                try {
print(o6);
}catch(e){}
            }
        }
    }.o685;
try {
o1("keySystem");
}catch(e){}
let o1 = o1102();
try {
o331.defineProperty(o1, "0", this.o568 + ((this.o525 && (o807 - this.o533) >= 0) ? Math.o279(Math.o290(this.o534, 0) + this.o539, this.o538) : this.o538));
}catch(Boolean){}

try {
o332 = o1;
}catch(this.o527){}
try {
Array.prototype.reverse.call(o0);
}catch(e){}
try {
Array.prototype.sort.call(o0);
}catch(e){}