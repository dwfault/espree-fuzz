var o732 = 0

try {
Array.prototype.__defineGetter__(0x1000, () => 1);
}catch(e){}

try {
o0(o841 & 0xF8);
}catch(e){}

try {
for (var o1 = 0; {
        name: "Map iterator should not enumerate map items that are deleted during enumeration before being visited",
        o5: function () {
            var o22 = 1;
            var map = o2();

            try {
for (var o30 of map.entries()) {
                var key = o30[0];
                var o31 = o30[1];

                try {
o7.o8(key == o22, "map.entries() should enumerate keys 1, 3, 5 in that order");
}catch(e){}
                try {
o7.o8(o31 == o22 + 5, "map.entries() should enumerate values 6, 8, 10 in that order");
}catch(e){}
                try {
map.o32(key + 1);
}catch(e){}
                try {
o22 += 2;
}catch(e){}
            }
}catch(e){}

            try {
for (var o30 of map.entries()) {
                var key = o30[0];
                var o31 = o30[1];

                try {
o7.o8(key == 1, "map.entries() should enumerate key 1 only");
}catch(e){}
                try {
o7.o8(o31 == 6, "map.entries() should enumerate value 6 only");
}catch(e){}
                try {
map.o32(3);
}catch(e){}
                try {
map.o32(5);
}catch(e){}
            }
}catch(e){}

            try {
for (var o30 of map.entries()) {
                var key = o30[0];
                var o31 = o30[1];

                try {
o7.o8(key == 1, "map.entries() should enumerate 1 only again");
}catch(e){}
                try {
o7.o8(o31 == 6, "map.entries() should enumerate value 6 only again");
}catch(e){}
                try {
map.o32(1);
}catch(e){}
            }
}catch(e){}

            try {
for (var o30 of map.entries()) {
                var key = o30[0];
                var o31 = o30[1];

                try {
o7.o33("Shouldn't execute, map should be empty");
}catch(e){}
            }
}catch(e){}


            try {
map = o2();
}catch(e){}

            try {
o22 = 0;
}catch(e){}
            try {
for (var o30 of map.entries()) {
                var key = o30[0];
                var o31 = o30[1];

                try {
map.o32(6 - key);
}catch(e){}
                try {
o22 += 1;
}catch(e){}
                try {
o7.o8(key == o22 && key <= 3, "map.entries() should enumerate keys 1, 2, 3 in that order");
}catch(e){}
                try {
o7.o8(o31 == o22 + 5 && o31 <= 8, "map.entries() should enumerate values 6, 7, 8 in that order");
}catch(e){}
            }
}catch(e){}

            try {
o22 = 0;
}catch(e){}
            try {
for (var o30 of map.entries()) {
                var key = o30[0];
                var o31 = o30[1];

                try {
o22 += 1;
}catch(e){}
                try {
o7.o8(key == o22 && key <= 2, "map.entries() should enumerate 1, 2 in that order");
}catch(e){}
                try {
o7.o8(o31 == o22 + 5 && o31 <= 7, "map.entries() should enumerate values 6, 7 in that order");
}catch(e){}
            }
}catch(e){}
        }
    }; o1++) {
    try {
new Array(0x100).fill(1234.5678);
}catch(e){}
}
}catch(e){}

try {
o0(o1088 = o259[o421.o390] | 0);
}catch(e){}

try {
print(new Array(0x100).splice(0));
}catch(e){}