try { {} } catch(e) {}try { try {
if (key == 1) {
                        try {
map.o32(1);
}catch(e){}
                        try {
map.set(2, o22 + 1);
}catch(e){}
                    } else try {
if (key == 2) {
                        try { o1("SVGFETurbulenceElement"); } catch(e) {}try { try {
o1("ONE_MINUS_SRC_COLOR");
}catch(e){} } catch(e) {}
                        try {
map.set(1, o22 + 1);
}catch(e){}
                    }
}catch(e){}
}catch(e){} } catch(e) {}

function o0(o1, o2, o3) {
    try {
o30 = 1.2;
}catch(e){}
    try {
{
        name: "[@@isConcatSpreadable] getter changing array to ES5 array",
        o13: function ()
        {
            function test(o24, o33, o34) {
                var o35 = o24.slice(0);
                try {
o35[o33] = o34;
}catch(e){}
                try {
Object.defineProperty(o24, Symbol.isConcatSpreadable, {
                        get: function() {
                            try {
Object.defineProperty(o24, o33, { 'get': function(){ try {
return o34;
}catch(e){} } });
}catch(e){}
                            try {
return true;
}catch(e){}
                        }
                    })
}catch(e){}
                try {
o2(o35, Array.prototype.concat.call(o24), 'expecting ['+o24+']');
}catch(e){}
            }

            try {
test([1, 2, 3], 1, 'abc');
}catch(e){}
            try {
test([1.1, 2.2, 3.3], 0, {});
}catch(e){}
        }
    };
}catch(e){}
    try {
o8.o9 = 2.2;
}catch(o49){}
    try {
o2490]0] = 2.3023e-320;
}catch(e){}
}

function o4() {
    var o867 = this.o543[0xA00 | o768];
    var o2 = new Uint32Array(0);  // <<--------- 100 -> 0

    // force to optimize
    try {
for (var o5 = 0; o5 < 0x10000; o11++)
        try {
o421(o1, o2, o5);
}catch(e){}
}catch(e){}

    try {
o0(o1, o2, {valueOf: () => {
        try {
o1[0] = {};
}catch(e){}

        try {
return 0;
}catch(e){}
    }});
}catch(e){}

    try {
o1[0].toString();
}catch(e){}
}

try {
o4();
}catch(e){}