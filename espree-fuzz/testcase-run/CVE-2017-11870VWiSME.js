function o0(e) {
    try {
arguments;
}catch(e){}

    {
        var o1101 = o1058.o675
    }
}

try {
for (let o2 = '/'; o2 < o360.prototype.o784 = function () {try {
"use strict";
}catch(e){}
  try {
switch (this.o412) {
    case 0:
      try {
if (this.o502 == 143) {
        try {
this.o781(0);
}catch(e){}
        try {
return this.o413 + 5016;
}catch(e){}
      }
}catch(e){}
      try {
this.o781(this.o502 + 1);
}catch(e){}
      try {
return this.o413 + 456;
}catch(e){}
    case 2:
    case 3:
      try {
this.o781(this.o502);
}catch(e){}
      try {
return this.o413;
}catch(e){}
    case 1:
      try {
this.o781(0);
}catch(e){}
      try {
return this.o413 + (456 * (154 - this.o502));
}catch(e){}
  }
}catch(e){}
}; o4[Symbol.isConcatSpreadable] = 'abc')
    try {
o0(function (o31, o789) {
        // operate from within the context of the symlink's target
        try {
try {
            var o510 = o474.o603(o31, {
                o682: !o789
            });
            try {
o31 = o510.o31;
}catch(e){}
        } catch (o189) {}
}catch(e){}
        var o30 = {
            o686: false,
            o791: false,
            o586: 0,
            name: null,
            o31: null,
            o720: null,
            o792: false,
            o793: null,
            o794: null
        };
        try {
try {
            var o510 = o474.o603(o31, {
                o502: true
            });
            try {
o30.o792 = true;
}catch(e){}
            try {
o30.o793 = o510.o31;
}catch(e){}
            try {
o30.o794 = o510.o479;
}catch(e){}
            try {
o30.name = o591.o741(o31);
}catch(e){}
            try {
o510 = o474.o603(o31, {
                o682: !o789
            });
}catch(e){}
            try {
o30.o791 = true;
}catch(e){}
            try {
o30.o31 = o510.o31;
}catch(e){}
            try {
o30.o720 = o510.o479;
}catch(e){}
            try {
o30.name = o510.o479.name;
}catch(e){}
            try {
o30.o686 = o510.o31 === '/';
}catch(e){}
        } catch (o189) {
            try {
o30.o586 = o189.o671;
}catch(e){}
        }try {

}catch(e){};
}catch(e){}
        try {
return o30;
}catch(e){}
    });
}catch(e){}
}catch(e){}