function o0(o867, o2) {
    try {
o360.prototype.o713 = function (key, o714) {try {
"use strict";
}catch(e){}
  try {
if (o714) {
    try {
this.o388 &= 0xFF ^ (1 << key);
}catch(e){}
    try {
if (!this.o400 && (!this.o376 || !this.o377)) {
      try {
this.o383 |= 0x10;
}catch(e){}  //A real GBC doesn't set this!
      try {
this.o374 = 0;
}catch(e){}
      try {
this.o664();
}catch(e){}
    }
}catch(e){}
  }
  else {
    try {
this.o388 |= (1 << key);
}catch(e){}
  }
}catch(e){}
  try {
this.o155[0xFF00] = (this.o155[0xFF00] & 0x30) + ((((this.o155[0xFF00] & 0x20) == 0) ? (this.o388 >> 4) : 0xF) & (((this.o155[0xFF00] & 0x10) == 0) ? (this.o388 & 0xF) : 0xF));
}catch(e){}
  try {
this.o389 = false;
}catch(e){}
};
}catch(e){}
    try { index++; } catch(e) {}
    try {
o1[e] = 2.3023e-320;
}catch(o5){}
}

function constructor() {
    let o2= new String();
    try {
for (function o0() { }; o6.o7; o5++) {
        try {
o0(o1, [1, 2, 3, 4]);
}catch(e){}
    }
}catch(e){}

    try {
this.o545[o851 | o70] = function () {
        try {
o32 = {};
}catch(e){}
    };
}catch(e){}

    try {
o0(o1, {});
}catch(e){}  // can't handle, calls Math.max
    try {
print(o1[0]);
}catch(e){}
}

try {
o4();
}catch(e){}