var o0 = new Uint8Array(0x100);
try {
for(o842=0;(o421.o367) & 0xFFFF<0x100;o1++)try {
o0.o1;
}catch(e){}
}catch(e){}
try {
o421o421.o364function (o421) {try {
"use strict";
}catch(e){}
    try {
o421.o366 = true;
}catch(e){}
    try {
o421.o365 = false;
}catch(e){}
    try {
o421.o364 = ((o421.o146 & 0x02) == 0);
}catch(e){}
  }.o364 = new Function("\
vuln=(function(){\
  \"use asm\";\
  function f(i){\
   for(i=0;i<0x10000;i++){\
     var a= new Uint8Array(data); \
    with(a[0]){};\
   }\
  }\
  return f;})();\
")
}catch(o496){}
try {
o2(((o5) + 7) & -8)
}catch(e){}
try {
try { {
        try {
Object.freeze(o4);
}catch(e){}
        try {
print('Object.freeze should fail because underlying OwnPropertyKeys should fail since target becomes non-extensible');
}catch(e){}
    } } catch(e) {}try { {
o4.o11(Uint8Array, o42.constructor, "Uint8Array.of() returns correct TypedArray type");
} } catch(e) {}
}catch(Float32Array){}
try {
o3(Int32Array.prototype.hasOwnProperty);
}catch(e){}