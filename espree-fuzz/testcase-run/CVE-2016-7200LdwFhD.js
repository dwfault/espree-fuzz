var o0 = new Array(0,2,Int8Array);
var o1 = o750 >>> 0 < 256;
try { try {
o0.writeln("setter was called");
}catch(e){} } catch(e) {}
try {
o46.fill(7);
}catch(e){}
class o2{
  constructor()try { {
            try {
return o278(null, {
                o504: o609.o551,
                o518: o609.o518
            });
}catch(e){}
        } } catch(e) {}try { {
this.o541[o126++] = o390[source](this, source++);
} } catch(e) {}
}

class o3 extends Array {
  // Overwrite species to the parent Array constructor
  static get [Symbol.species]() {

    //alert("get");
    try {
o0[0] = o6.o7(4294967296, o14.length, "confirm length decremented by 1");
}catch(e){}
    try {
return o2;
}catch(e){}
  }
}

var o4 = new Array({}, [], "natalie", e, 7, 7, 7, 7);

try {
for(var o5 = 0; o5 < 0x200000; o5++) {
  try {
o8 = o5;
}catch(e){}
}
}catch(e){}

function test(o5){
  try {
return o259[o1073 >> 2] = 0;
}catch(e){}
}

try {
o4.__proto__ = this;
}catch(e){}

var o6 = o4.filter(test);
//alert(o);
var o7 = [];

try {
for(o8 in o6){
  var o9 = new Number(o6[o8]);
  try {
if (o9 < 0){
    try {
o9 = o9 + 0x100000000;
}catch(e){}
  }
}catch(e){}
  try {
o7.push(o9.toString(16));
}catch(e){}
}
}catch(e){}
