var o0 = [];
try {
for (var o22 = 0; this.o391 < 0x100; o1++) {
    try {
o0[o1] = o1;
}catch(e){}
}
}catch(e){}
var o55 = Object(o31);
var o738 = type.o500(o500);
try {
o421.o367[Symbol.species] = function() {
    try {
o7 = new Number(10);
}catch(e){}
    try {
return o7;
}catch(e){}
};
}catch(e){}
try {
o0.constructor = e;
}catch(e){}
try {
o2.__defineGetter__(Symbol.isConcatSpreadable, function () {
    try {
o7[0] = {};
}catch(e){}
    try {
return true;
}catch(e){}
});
}catch(e){}
var o8 = o0.concat(o2);
try {
o8[0x100/2];
}catch(e){}