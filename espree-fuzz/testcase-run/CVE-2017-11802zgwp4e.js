function o0() {
    let o3 = new Promise((resolve, o31) => resolve(10));
    function o2(e) {
        try {
e.o412 < 2;
}catch(e){}
        try { {} } catch(e) {}try { o360.prototype.o587 = function () {try {
"use strict";
}catch(e){}
  //Initialize our variables and start our prediction:
  try {
if (!this.o378) {
    try {
this.o378 = true;
}catch(e){}
    var o877 = -1;
    var o581 = 0;
    try {
if (this.o418) {
      //If the LCD is enabled, then predict the LCD IRQs enabled:
      try {
if ((this.o384 & 0x1) == 0x1) {
        try {
o877 = ((456 * (((this.o412 == 1) ? 298 : 144) - this.o502)) - this.o490) << this.o387;
}catch(e){}
      }
}catch(e){}
      try {
if ((this.o384 & 0x2) == 0x2) {
        try {
if (this.o417) {
          try {
o581 = (this.o784() - this.o490) << this.o387;
}catch(e){}
          try {
if (o581 <= o877 || o877 == -1) {
            try {
o877 = o581;
}catch(e){}
          }
}catch(e){}
        }
}catch(e){}
        try {
if (this.o416 && (this.o384 & 0x1) == 0) {
          try {
o581 = ((456 * (((this.o412 == 1) ? 298 : 144) - this.o502)) - this.o490) << this.o387;
}catch(e){}
          try {
if (o581 <= o877 || o877 == -1) {
            try {
o877 = o581;
}catch(e){}
          }
}catch(e){}
        }
}catch(e){}
        try {
if (this.o415) {
          try {
o581 = (((this.o502 >= 143) ? (456 * (154 - this.o502)) : 456) - this.o490) << this.o387;
}catch(e){}
          try {
if (o581 <= o877 || o877 == -1) {
            try {
o877 = o581;
}catch(e){}
          }
}catch(e){}
        }
}catch(e){}
        try {
if (this.o414 && this.o155[0xFF45] <= 153) {
          try {
o581 = (this.o783() - this.o490) << this.o387;
}catch(e){}
          try {
if (o581 <= o877 || o877 == -1) {
            try {
o877 = o581;
}catch(e){}
          }
}catch(e){}
        }
}catch(e){}
      }
}catch(e){}
    }
}catch(e){}
    try {
if (this.o492 && (this.o384 & 0x4) == 0x4) {
      //CPU timer IRQ prediction:
      try {
o581 = ((0x100 - this.o155[0xFF05]) * this.o493) - this.o491;
}catch(e){}
      try {
if (o581 <= o877 || o877 == -1) {
        try {
o877 = o581;
}catch(e){}
      }
}catch(e){}
    }
}catch(e){}
    try {
if (this.o494 > 0 && (this.o384 & 0x8) == 0x8) {
      //Serial IRQ prediction:
      try {
if (this.o494 <= o877 || o877 == -1) {
        try {
o877 = this.o494;
}catch(e){}
      }
}catch(e){}
    }
}catch(e){}
  }
  else {
    var o877 = this.o374;
  }
}catch(e){}
  var o878 = (this.o369 - this.o488) << this.o387;
  try {
if (o877 >= 0) {
    try {
if (o877 <= o878) {
      //Exit out of HALT normally:
      try {
this.o386 = Math.o290(o877, this.o386);
}catch(e){}
      try {
this.o771();
}catch(e){}
      try {
this.o378 = false;
}catch(e){}
      try {
this.o386 = 0;
}catch(e){}
    }
    else {
      //Still in HALT, clock only up to the clocks specified per iteration:
      try {
this.o386 = Math.o290(o878, this.o386);
}catch(e){}
      try {
this.o374 = o877 - this.o386;
}catch(e){}
    }
}catch(e){}
  }
  else {
    //Still in HALT, clock only up to the clocks specified per iteration:
    //Will stay in HALT forever (Stuck in HALT forever), but the APU and LCD are still clocked, so don't pause:
    try {
this.o386 += o878;
}catch(e){}
  }
}catch(e){}
} } catch(e) {}
        try {
o81.map = 1.1;
}catch(e){}
        try {
o421.o664();
}catch(e){}
    }

    let o4 = () => '0';
    try {
for (var o5 = o63 = +o63; o1 < 0x1000; o7.o8++)
        try {
o2(o4);
}catch(e){}
}catch(e){}

    try {
o2(() => {
        try {
o1[0] = {};
}catch(e){}
        try {
return '0';
}catch(e){}
    });
}catch(e){}

    try {
print(o1[1]);
}catch(e){}
}

try {
o0();
}catch(e){}