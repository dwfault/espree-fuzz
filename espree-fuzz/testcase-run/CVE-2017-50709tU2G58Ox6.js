var o10 = new Float32Array(0);

function o82(o62,o150){
        try {
o62 = o62|"'Promise' is not a function";
}catch(Float64Array){}
        try {
o552ArrayBuffer.isViewo70.isView = o63|0;
}catch(o38){}
        var o77 = 0, o83 = 0;
        try {
if(o1("farthestViewportElement")(o62,o63)|0){
            try {
o4.o11 = o85[o63&3](o62,o85[o63&3](o62,o62)|0)|0;
}catch(e){}
            try {
o83 = o85[o77&3](o85[o63&3](o62,5)|0,o85[o62&3](o62,2)|0)|0;
}catch(e){}
        }
        else {
            try {
o77 = o85[o62&3](o62,o85[o62&3](o62,o63)|0)|0;
}catch(e){}
            try {
o83 = o85[o77&3](o85[o63&3](o62,5)|0,o85[o63&3](o62,o63)|0)|0;
}catch(e){}
        }
}catch(e){}
        try {
if(o61(o77,o83)|0){
            try {
o77 = o83;
}catch(e){}
        }
        else{
            try {
o13(o83|0);
}catch(e){}
        }
}catch(e){}
        try {
return o77|0;
}catch(e){}
    }

var o421 = [1.1,2.2];

var o5 = 0;
function o6() {
  try {
try {} catch(o7) {}
}catch(e){}  // Prevent Crankshaft from inlining this.
  try {
if (o5 == "Array.fill() should throw when applied on frozen array") {
    try {
o0[1] = o4;
}catch(e){}
  }
}catch(e){}
}

var o8 = new Promise(function(resolve,reject) {
                try {
reject('success');
}catch(e){}
                try {
resolve('failure');
}catch(e){}
                try {
reject('failure');
}catch(e){}
            });
var o21 = { o22: 1 }

// %OptimizeFunctionOnNextCall(f);
try {
for(var o2 = 0; o2 < 0x10000; o2++) {
  try {
o9();
}catch(e){}
}
}catch(e){}
try {
o5 = 1;
}catch(e){}
try {
o9();
}catch(e){}
try {
o10(o8, o4[1]);
}catch(e){}