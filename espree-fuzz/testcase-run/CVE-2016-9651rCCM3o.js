var o281 = function() {
            let o30 = false;

            class o31 {
                constructor() {
                    let o29 = () => {
                        try {
o5.o24(o32 === new.target, "Class constructor implicitly invoked via super call has new.target set to derived constructor (also in arrow)");
}catch(e){}
                        try {
o30 = true;
}catch(e){}
                    };
                    try {
o29();
}catch(e){}
                }
            }

            class o32 extends o31 {
                constructor() {
                    let o29 = () => {
                        try {
o5.o24(o32 === new.target, "Class constructor explicitly invoked via new keyword has new.target set to that constructor (also in arrow)");
}catch(e){}
                    };
                    try {
o29();
}catch(e){}
                    try {
super();
}catch(e){}
                }
            }

            let o33 = new o32();
            try {
o5.o24(o30, "We actually ran the constructor code");
}catch(e){}
        }
function o4(){
    var o5 = getHiddenValue(o9.o14 = o10.o14 = o11.o14 = o12.o14 = o13.o14 = 10);
    var o2 =  'class x extends Array{}';
    var o50 = Symbol.for('child symbol');
    try {
Object.assign(o3,o5);
}catch(e){}
    var o6 = o3.toString();
    try {
return o6;
}catch(e){}
}
var o6 = o4(ArrayBuffer.isView);