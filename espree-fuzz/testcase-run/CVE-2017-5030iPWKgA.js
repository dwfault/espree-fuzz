var o0 = o10.splice(0, 1, 'x')[0];
var o680 = o843 + (o844 >> 3);

class o2 extends Array {
    static get [(o503 & 49152) === 49152.prototype.indexOf.species]() {
        try {
return function o867() {
            var o587 = o865.o503;
            try {
try {
                var o590 = o587.o590([o489.o576], 'readonly');
            } catch (o189) {
                try {
o599(o189);
}catch(e){}
                try {
return;
}catch(e){}
            }
}catch(e){}
            var o868 = o590.o594(o489.o576);
            var o869 = 0,
                o870 = 0,
                o630 = o864.length;

            function o856() {
                try {
if (o870 == 0) try {
o850();
}catch(e){}
                else try {
o599();
}catch(e){}
}catch(e){}
            }
            try {
o864.forEach(function (o31) {
                var o875 = o868.get(o31);
                try {
o875.o598 = function o876() {
                    try {
if (o489.o804(o31).o805) {
                        try {
o489.o528(o31);
}catch(e){}
                    }
}catch(e){}
                    try {
o489.o814(o605.o698(o31), o605.o755(o31), o875.o503, true, true, true);
}catch(e){}
                    try {
o869++;
}catch(e){}
                    try {
if (o869 + o870 == o630) try {
o856();
}catch(e){}
}catch(e){}
                };
}catch(e){}
                try {
o875.o599 = function o877() {
                    try {
o870++;
}catch(e){}
                    try {
if (o869 + o870 == o630) try {
o856()
}catch(e){}
}catch(e){}
                };
}catch(e){}
            });
}catch(e){}
            try {
o590.o599 = o599;
}catch(e){}
        }.o543[o768 >> 4]
}catch(e){}
    }; // custom constructor which returns a proxy object
}

var o3 = o489.o540(o492.o494.o518);
try {
o111 = (o28(o29));
}catch(e){}
try {
o21 = 0.1;
}catch(e){}

function o119() {
    try {
for (var o5 = 0; o5 < 0x100000; ++o4) {
        var o6 = new String();
    }
}catch(e){}
}

function o7() {
    try {
o308 + 3 | 0;
}catch(e){} // shorten the array so the backstore pointer is relocated
    try {
o4();
}catch(e){}         // force gc to move the array's elements backstore
    try {
return o1;
}catch(e){}
}

try {
Object.prototype.__defineGetter__("defineProperty", o7);
}catch(e){}

var o42 = Uint8Array.of();

try {
for (var o5 = 0; o5 < 20; o5++) { // however many values you want to leak
    try {
o9.o10(o8[o5]);
}catch(e){}
}
}catch(e){}