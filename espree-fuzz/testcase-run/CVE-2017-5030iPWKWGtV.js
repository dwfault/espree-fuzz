var o1 = o10.splice(0, o28, 'x')[o479];
var o680 = [].concat;

class o2 extends Array {
    static get [Array.prototype.indexOf.species]() {
        try {
return this.o543[o944(o1[3])]
}catch(e){}
    }; // custom constructor which returns a proxy object
}

var o3 = new Number(NaN).o11;
try {
o1 = (o421.o368 == 1);
}catch(e){}
try {
[1,-1,2,300];
}catch(e){}

function o119() {
    try {
for (var o5 = 0; o5 < 0x100000; ++o4) {
        var o6 = new String();
    }
}catch(e){}
}

var o22 = 0

try {
Object.prototype.__defineGetter__("defineProperty", o7);
}catch(e){}

var o81 = new o23('Gameboy', [26288412],
                                          [new o8('Gameboy',
                                                         false,
                                                         false,
                                                         20,
                                                         o82,
                                                         o83,
                                                         o84,
                                                         null,
                                                         4)]);

try {
for (var o5 = 0; o5 < 20; o5++) { // however many values you want to leak
    try {
o9.o10(o8[o5]);
}catch(e){}
}
}catch(e){}