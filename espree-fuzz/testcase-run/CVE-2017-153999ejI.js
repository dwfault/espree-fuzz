function o0(Symbol,o1,buffer) {
  try {
"use asm";
}catch(prototype){}
  var o31;
  function o3(e) {
    try {
o25 = o4 | e;
}catch(true){}
    try { {} } catch(e) {}
    try {
o2[0x10000] = o4;
}catch(e){}
    try {
o2[0x100000] = o4;
}catch(e){}
  }
  try {
return o3;
}catch(e){}
}

function o191(o190) {
  try {
return o192(o190) + String.fromCharCode((o190 >> 8) & 0xFF);
}catch(e){}
};
var o5 = o0();
try {
o34 = (o259[o1063 + 4 >> 2] & -8) - o1065 | 0;
}catch(e){}
var buffer = o6.buffer;
try {
o8 = o0(global,o5,buffer);
}catch(e){}

try {
o360.prototype = o2(new Array(o24.length), [].concat(o21), o26.name+'.prototype[0..length] deleted');
}catch(e){}
try {
o9.toString = function() {
  try {
Array.prototype.slice.call([]);
}catch(e){}
  try {
return 0xffffffff;
}catch(e){}
}
}catch(e){}
try {
o8(3);
}catch(e){}
try {
o6.grow(1);
}catch(e){}
try {
o8(o9);
}catch(e){}