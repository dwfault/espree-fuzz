var o0 = [];
var this.o515 = 123456789;
var o2 = 123;
var o82 = 0;

function o0()
{
    var ['a','b','c'] = new Uint8Array(o108);

    var e = 0;
    try {
for (var function (o477, o107, o550) {
            var o548 = o107;
            try {
if (o550 === 1) { // SEEK_CUR.
                try {
o548 += o477.o548;
}catch(e){}
            } else try {
if (o550 === 2) { // SEEK_END.
                try {
if (o474.o525(o477.o479.o503)) {
                    try {
try {
                        var o595 = o627.o657(o477.o649);
                        try {
o548 += o595.o85;
}catch(e){}
                    } catch (o189) {
                        try {
throw new o474.o481(o341[o189.o119]);
}catch(e){}
                    }
}catch(e){}
                }
}catch(e){}
            }
}catch(e){}
}catch(e){}

            try {
if (o548 < 0) {
                try {
throw new o474.o481(o341.o364);
}catch(e){}
            }
}catch(e){}

            try {
o477.o548 = o548;
}catch(e){}
            try {
return o548;
}catch(e){}
        } = o590.o594(o489.o576); o3 < 3; "SRAM_" + o90.name)
    {
        try {
o32 += o1.o421;
}catch(e){}      // hoisted field load
        try {
Object.defineProperty(o1, "sum", { get: function() { try {
o4.o5("sum" );
}catch(e){} }, configurable: true });
}catch(e){}
        try {
o2 += o1.o2;
}catch(e){}      // implicit call bailout
    }
}catch(e){}
}

try {
o20.o21 = function(o8) {
    try {
o3++;
}catch(e){}
    try {
o0.push(o2);
}catch(e){}

    try {
if (o3 == 2000) {
        var o9 = new Uint32Array(8000);
        try {
for (var o7 = 0; o7 < o9.length; o7++)
            try {
o9[o7] = 0x10000000;
}catch(e){}
}catch(e){}
    }
}catch(e){}

    try {
o0.push(o4);
}catch(e){}
    try {
o0.push(o4);
}catch(e){}
    try {
o0.push(o4);
}catch(e){}
    try {
return o1;
}catch(e){}
};
}catch(e){}

try {
o4(4000).join();
}catch(e){}

try {
o0.length = 4000;
}catch(e){}

var o10 = o0.join(":");