var o0 = new WasmModuleBuilder();
try {
o0.addImportedTable("x", "table", 1, 10000000);
}catch(e){}
try {
o0.addFunction("main", o1)
  .addBody([
    o2, 0,
    o3, 0,
    o4, 0, o5])
  .o2("main");
}catch(e){}
let o6 = new WebAssembly.Module(o0.toBuffer());
let o7 = { name: 'something' };
function o248() {
        try {
o82++;
}catch(e){}
        try {
if (o116[o82] === 'K') try {
o82++;
}catch(e){}
}catch(e){} // ignore const
        var o249 = [];
        try {
while (o116[o82] !== 'E') {
            try {
if (o116[o82] === 'S') { // substitution
                try {
o82++;
}catch(e){}
                var next = o116.indexOf('_', o82);
                var o250 = o116.substring(o82, next) || 0;
                try {
o249.push(o244[o250] || '?');
}catch(e){}
                try {
o82 = next + 1;
}catch(e){}
                try {
continue;
}catch(e){}
            }
}catch(e){}
            try {
if (o116[o82] === 'C') { // constructor
                try {
o249.push(o249[o249.length - 1]);
}catch(e){}
                try {
o82 += 2;
}catch(e){}
                try {
continue;
}catch(e){}
            }
}catch(e){}
            var o85 = parseInt(o116.substr(o82));
            var o246 = o85.toString().length;
            try {
if (!o85 || !o246) {
                try {
o82--;
}catch(e){}
                try {
break;
}catch(e){}
            }
}catch(e){} // counter i++ below us
            var o99 = o116.substr(o82 + o246, o85);
            try {
o249.push(o99);
}catch(e){}
            try {
o244.push(o99);
}catch(e){}
            try {
o82 += o246 + o85;
}catch(e){}
        }
}catch(e){}
        try {
o82++;
}catch(e){} // skip E
        try {
return o249;
}catch(e){}
    };

try {
for (let o13 = 0; o13 < 4; o13++)
  try {
o7.grow(99900);
}catch(e){}
}catch(e){}

let o14 = new WebAssembly.Instance(o6, {o12: {o7:o7}});

try {
o14.o15.o16(0x313131/8);
}catch(e){}