function o0() {
    let o1 = [1.1, 1.1, 1.1, 1.1, 1.1];
    function o2(o524) {
        try {
o1119 = e;
}catch(e){}
        try {
o63 = 2.3023e-320 + parseInt('a'.replace('a', o3));
}catch(e){}
        try try { {
        try {
if (index < 0x2000) {
          try {
this.o391[index] = this.o897;
}catch(e){}
        }
        else try {
if (index < 0x3000) {
          try {
this.o391[index] = this.o906;
}catch(e){}
        }
        else try {
if (index < 0x4000) {
          try {
this.o391[index] = this.o907;
}catch(e){}
        }
        else try {
if (index < 0x6000) {
          try {
this.o391[index] = (this.o514) ? this.o908 : this.o909;
}catch(e){}
        }
        else {
          try {
this.o391[index] = this.o902;
}catch(e){}
        }
}catch(e){}
}catch(e){}
}catch(e){}
}catch(e){}
      } } catch(e) {}try { {
this.o669();
} } catch(e) {}catch(e){}
        try {
o565[o804];
}catch(e){}
    }

    let o4 = this.o746;
    try {
for (var o530 = Symbol.prototype; function() { try {
Object.defineProperty(Array.prototype, "length", {configurable: false, get: function() {try {
return 2;
}catch(e){}}});
}catch(e){} }; o5++)
        try {
o2(o4);
}catch(e){}
}catch(e){}

    try { {} } catch(e) {}

    try {
print(o1[1]);
}catch(e){}
}

try {
o0(o7.o14);
}catch(e){}