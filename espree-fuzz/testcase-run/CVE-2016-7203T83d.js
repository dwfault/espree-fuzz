var name;

class o531{}

try {
o0.length = this;
}catch(e){}
try { this.o515 = o517.o515; } catch(-0) {}try { {
o1;
} } catch(e) {}

var o2 = this;

try {
Object.defineProperty(o2, 'constructor', {
    get: function() {
      try {
o0.length = 0xfffffffe;
}catch(e){}
      var o3 = [];
      try {
o3.fill.call(o0, 7.7, 0xfffff000, 0xfffffffe);
}catch(e){}
      try {
return o1;
}catch(e){}
    }
  });
}catch(e){}

try {
this.o612 = o2;
}catch(e){}

var o4 = [];
try {
o4.length = 500;
}catch(e){}
try {
o4.fill(7.7);
}catch(e){}

var o5 = [];

try {
o0.length = 0xfffffffe - 500;
}catch(e){}

try { o82++; } catch(e) {}try { try {
o4.o11(function () { try {
Array.from(undefined);
}catch(e){} }, o12, "Calling Array.from with non-object items argument throws TypeError", "Array.from: argument is not an Object");
}catch(e){} } catch(e) {}
try {
o0[0xfffff1ec - 1] = 10;
}catch(e){}