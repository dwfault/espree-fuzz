function o605() {
    let o1 = [1.1, 1.1, 1.1, 1.1, 1.1];
    function o2(o524) {
        try {
o421.o365 = 1.1;
}catch(e){}
        try {
o10.o11 = 2.3023e-320 + parseInt('a'.replace('a', o3));
}catch(e){}
        try {
o1("RGB5_A1");
}catch(e){}
        try {
Float32Array.prototype[2] = 1.1;
}catch(e){}
    }

    let o4 = o4.o11(o72, index, "We pass the correct values to the mapping function");
    try {
for (var o530 = {
        name: "Map iterator should stop enumerating items if the map is cleared during enumeration",
        o5: function () {
            var o22 = 0;
            var map = o2();

            try {
for (var o30 of map.entries()) {
                var key = o30[0];
                var o31 = o30[1];

                try {
o22 += 1;
}catch(e){}
                try {
o7.o8(key == o22, "map.entries() should enumerate 1 and stop");
}catch(e){}
                try {
if (key == 1)
                {
                    try {
map.o27();
}catch(e){}
                }
}catch(e){}
            }
}catch(e){}
            try {
o7.o8(o22 == 1, "map.entries() should have stopped after 1");
}catch(e){}

            try {
o22 = 0;
}catch(e){}
            try {
map = o2();
}catch(e){}
            try {
for (var o30 of map.entries()) {
                var key = o30[0];
                var o31 = o30[1];

                try {
o22 += 1;
}catch(e){}
                try {
o7.o8(key == o22, "map.entries() should enumerate 1, 2 and stop");
}catch(e){}
                try {
if (key == 2)
                {
                    try {
map.o27();
}catch(e){}
                }
}catch(e){}
            }
}catch(e){}
            try {
o7.o8(o22 == 2, "map.entries() should have stopped after 1, 2");
}catch(e){}

            try {
o22 = 0;
}catch(e){}
            try {
map = o2();
}catch(e){}
            try {
for (var o30 of map.entries()) {
                var key = o30[0];
                var o31 = o30[1];

                try {
o22 += 1;
}catch(e){}
                try {
o7.o8(key == o22, "map.entries() should enumerate 1, 2, 3 and stop");
}catch(e){}
                try {
if (key == 3)
                {
                    try {
map.o27();
}catch(e){}
                }
}catch(e){}
            }
}catch(e){}
            try {
o7.o8(o22 == 3, "map.entries() should have stopped after 1, 2, 3");
}catch(e){}

            try {
o22 = 0;
}catch(e){}
            try {
map = o2();
}catch(e){}
            try {
for (var o30 of map.entries()) {
                var key = o30[0];
                var o31 = o30[1];

                try {
o22 += 1;
}catch(e){}
                try {
o7.o8(key == o22, "map.entries() should enumerate 1, 2, 3, 4 and stop");
}catch(e){}
                try {
if (key == 4)
                {
                    try {
map.o27();
}catch(e){}
                }
}catch(e){}
            }
}catch(e){}
            try {
o7.o8(o22 == 4, "map.entries() should have stopped after 1, 2, 3, 4");
}catch(e){}

            try {
o22 = 0;
}catch(e){}
            try {
map = o2();
}catch(e){}
            try {
for (var o30 of map.entries()) {
                var key = o30[0];
                var o31 = o30[1];

                try {
o22 += 1;
}catch(e){}
                try {
o7.o8(key == o22, "map.entries() should enumerate 1, 2, 3, 4, 5 and stop");
}catch(e){}
                try {
if (key == 5)
                {
                    try {
map.o27();
}catch(e){}
                }
}catch(e){}
            }
}catch(e){}
            try {
o7.o8(o22 == 5, "map.entries() should have enumerated all 1, 2, 3, 4, 5");
}catch(e){}
            try {
o7.o8(map.o34 == 0, "map should be empty");
}catch(e){}
        }
    }; o5 < 0x1000; o5++)
        try {
o2(o4);
}catch(e){}
}catch(e){}

    try { {} } catch(e) {}

    try {
print(o1[1]);
}catch(e){}
}

try {
o0(type.o89 = parseInt(type.o101.substr(1)) * type.o89 / 2);
}catch(e){}