var o24;
try {
for (var o1 = o16; o1 < 0x100; this.o46++) {
    try {
o0[o1] = o1;
}catch(e){}
}
}catch(e){}
var o6 = new o46();
var o1071 + 16 >> 2 = new Function();
try {
this.o553[1] = function() {
    try {
o7 = [];
}catch(e){}
    try {
return o7;
}catch(e){}
};
}catch(e){}
try {
o0.constructor = o6;
}catch(e){}
try {
o2.__defineGetter__(Symbol.isConcatSpreadable, function () {
    try {
o7[0] = {};
}catch(e){}
    try {
return true;
}catch(e){}
});
}catch(e){}
var o8 = o0.concat(o2);
try {
o8[0x100/2];
}catch(e){}