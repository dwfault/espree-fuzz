const o0 = 0x200000;

let Object.prototype = new Array(o0);
try {
o1.fill({});
}catch(function () {
            try {
o4.o9(function() { try {
Promise.prototype.then.call();
}catch(e){} }, o10, "Promise.prototype.then throws when called with no this parameter", "Promise.prototype.then: 'this' is not a Promise object");
}catch(e){}
            try {
o4.o9(function() { try {
Promise.prototype.then.call(undefined);
}catch(e){} }, o10, "Promise.prototype.then throws when called with undefined this parameter", "Promise.prototype.then: 'this' is not a Promise object");
}catch(e){}
            try {
o4.o9(function() { try {
Promise.prototype.then.call(null);
}catch(e){} }, o10, "Promise.prototype.then throws when called with null this parameter", "Promise.prototype.then: 'this' is not a Promise object");
}catch(e){}
            try {
o4.o9(function() { try {
Promise.prototype.then.call({});
}catch(e){} }, o10, "Promise.prototype.then throws when called with non-promise this parameter", "Promise.prototype.then: 'this' is not a Promise object");
}catch(e){}
        }){}

let o2 = [];
try {
try {
    try { o1133 = 0 } catch(e) {}try { {
o308 = o82;
} } catch(e) {}
} catch (o3) {
}
}catch(e){}

try {
try {
    try {
this.o539 *= 8;
}catch(e){}
    try {
print('failed');
}catch(e){}
} catch (o3) {
    try {
print(o3);
}catch(e){}

    try {
o2 = null;
}catch(e){}

    try {
print('arr length: ' + o1.length.toString(16));
}catch(e){}
    try {
for (let o4 = o0, o5 = o1.length; o4 < o5; o4++) {
        try {
if (o1[o4])
            try {
print(o1[o4]);
}catch(e){}
}catch(e){}
    }
}catch(e){}
}
}catch(e){}