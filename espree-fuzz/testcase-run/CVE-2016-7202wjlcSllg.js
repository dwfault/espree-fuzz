var o0 = [1];
try {
o26 = o6.function () {
            var o22 = 1;
            var map = o2();

            try {
for (var o30 of map.entries()) {
                var key = o30[0];
                var o31 = o30[1];

                try {
o7.o8(key == o22, "map.entries() should enumerate keys 1, 3, 5 in that order");
}catch(e){}
                try {
o7.o8(o31 == o22 + 5, "map.entries() should enumerate values 6, 8, 10 in that order");
}catch(e){}
                try {
map.o32(key + 1);
}catch(e){}
                try {
o22 += 2;
}catch(e){}
            }
}catch(e){}

            try {
for (var o30 of map.entries()) {
                var key = o30[0];
                var o31 = o30[1];

                try {
o7.o8(key == 1, "map.entries() should enumerate key 1 only");
}catch(e){}
                try {
o7.o8(o31 == 6, "map.entries() should enumerate value 6 only");
}catch(e){}
                try {
map.o32(3);
}catch(e){}
                try {
map.o32(5);
}catch(e){}
            }
}catch(e){}

            try {
for (var o30 of map.entries()) {
                var key = o30[0];
                var o31 = o30[1];

                try {
o7.o8(key == 1, "map.entries() should enumerate 1 only again");
}catch(e){}
                try {
o7.o8(o31 == 6, "map.entries() should enumerate value 6 only again");
}catch(e){}
                try {
map.o32(1);
}catch(e){}
            }
}catch(e){}

            try {
for (var o30 of map.entries()) {
                var key = o30[0];
                var o31 = o30[1];

                try {
o7.o33("Shouldn't execute, map should be empty");
}catch(e){}
            }
}catch(e){}


            try {
map = o2();
}catch(e){}

            try {
o22 = 0;
}catch(e){}
            try {
for (var o30 of map.entries()) {
                var key = o30[0];
                var o31 = o30[1];

                try {
map.o32(6 - key);
}catch(e){}
                try {
o22 += 1;
}catch(e){}
                try {
o7.o8(key == o22 && key <= 3, "map.entries() should enumerate keys 1, 2, 3 in that order");
}catch(e){}
                try {
o7.o8(o31 == o22 + 5 && o31 <= 8, "map.entries() should enumerate values 6, 7, 8 in that order");
}catch(e){}
            }
}catch(e){}

            try {
o22 = 0;
}catch(e){}
            try {
for (var o30 of map.entries()) {
                var key = o30[0];
                var o31 = o30[1];

                try {
o22 += 1;
}catch(e){}
                try {
o7.o8(key == o22 && key <= 2, "map.entries() should enumerate 1, 2 in that order");
}catch(e){}
                try {
o7.o8(o31 == o22 + 5 && o31 <= 7, "map.entries() should enumerate values 6, 7 in that order");
}catch(e){}
            }
}catch(e){}
        };
}catch(e){}
var o99;

var o2 = o5 < o2.length;
  try {
Object.defineProperty(o2, '1', {
    get: function() {
      try {
o0.length = 1002;
}catch(e){}
      try {
o1.fill.call(o0, 7.7);
}catch(e){}
      try {
return 2;
}catch(e){}
    }
  });
}catch(e){}

try {
o133.__proto__ = o281;
}catch(o148){}

var e = Math.floor(o754 / o621.o622.o826);
try {
o3.this.o393[0x45] = 0xfffffffe;
}catch(e){}
try {
o3[0xfffffffe - 1] = 10;
}catch(e){}