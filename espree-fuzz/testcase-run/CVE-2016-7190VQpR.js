function o198(o114, value, type, o199) {
    try {
type = type || 'i8';
}catch(e){}
    try {
if (type.charAt(type.length - 1) === '*') try {
type = 'i32';
}catch(e){}
}catch(e){} // pointers are 32-bit
    try {
switch (type) {
    case 'i1':
        try {
o200[(o114)] = value;
}catch(e){}
        try {
break;
}catch(e){}
    case 'i8':
        try {
o200[(o114)] = value;
}catch(e){}
        try {
break;
}catch(e){}
    case 'i16':
        try {
o201[((o114) >> 1)] = value;
}catch(e){}
        try {
break;
}catch(e){}
    case 'i32':
        try {
o202[((o114) >> 2)] = value;
}catch(e){}
        try {
break;
}catch(e){}
    case 'i64':
        try {
(o170 = [value >>> 0, (o168 = value, (+(o203(o168))) >= (+1) ? (o168 > (+0) ? ((o204((+(o205((o168) / (+4294967296)))), (+4294967295))) | 0) >>> 0 : (~~((+(o206((o168 - +(((~~(o168))) >>> 0)) / (+4294967296)))))) >>> 0) : 0)], o202[((o114) >> 2)] = o170[0], o202[(((o114) + (4)) >> 2)] = o170[1]);
}catch(e){}
        try {
break;
}catch(e){}
    case 'float':
        try {
o207[((o114) >> 2)] = value;
}catch(e){}
        try {
break;
}catch(e){}
    case 'double':
        try {
o208[((o114) >> 3)] = value;
}catch(e){}
        try {
break;
}catch(e){}
    default:
        try {
abort('invalid type for setValue: ' + type);
}catch(e){}
    }
}catch(e){}
};
function test(o3) {
                var o4 = {"0":1, "1":2, "length": 2};
                try {
Object.defineProperty(o4, Symbol.isConcatSpreadable, {
                        get: function() {
                            try {
o4.length = 9007199254740989;
}catch(e){}
                            try {
return true;
}catch(e){}
                        }
                    });
}catch(e){}
                try {
o6.o22(()=>o3.concat(o4), o23, o3, "Illegal length and size specified for the array");
}catch(e){}
            }

var o2 = {
    get: function(target, name){

  try {
if(name == "length"){
    try {
return 0x100;
}catch(e){}
  }
}catch(e){}
  try {
return {[Symbol.species] : o1};
}catch(e){}
    },

    has: function(target, name){
  try {
return true;
}catch(e){}
    }
};

var o3 = new Proxy([], o2);

var o4 = new Array(1,2,3);

function test(){
  try {
return 0x777777777777;
}catch(e){}

}

var o5 = o4.map.call(o3, test);