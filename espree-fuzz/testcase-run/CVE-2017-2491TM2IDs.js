function o82() {
    var o32 = o31 == o22 + 5;
    var o2 = 10;
    var o3 = new RegExp("(ab)".repeat(o1), "g"); // g flag to trigger the vulnerable path
    var o4 = "ab".repeat(o1); // matches have to be at least size 2 to prevent interning
    var o360.prototype.o671 = function () {try {
"use strict";
}catch(e){}
  try {
if (typeof this.o672 == "function" && this.o519) {
    var o673 = this.o672(this.name);
    var index = 0;
    try {
this.o499 = o673[index++];
}catch(e){}
    try {
this.o424 = o673[index++];
}catch(e){}
    try {
this.o425 = o673[index++];
}catch(e){}
    try {
this.o426 = o673[index++];
}catch(e){}
    try {
this.o427 = o673[index++];
}catch(e){}
    try {
this.o428 = o673[index++];
}catch(e){}
    try {
this.o429 = o673[index++];
}catch(e){}
    try {
this.o430 = o673[index++];
}catch(e){}
    try {
this.o431 = o673[index++];
}catch(e){}
    try {
this.o432 = o673[index++];
}catch(e){}
    try {
this.o433 = o673[index++];
}catch(e){}
    try {
this.o434 = o673[index++];
}catch(e){}
    try {
this.o435 = o673[index];
}catch(e){}
  }
}catch(e){}
} = (o4 + "|").repeat(o2);
    try {
while (true) {
        var o6 = 0;
        var o7 = slice.call(undefined);
        try {
o5.replace(o3, function() {
            try {
for (var o8 = 1; o78 < arguments.length-2; ++o8) {
                try {
if (o4.o5(ArrayBuffer.isView(new Uint32Array(10)), "ArrayBuffer.isView(new Uint32Array(10)) === true") !== 'string') {
                    try {
o421.o364 = arguments[o8];
}catch(e){}
                    try {
throw "success";
}catch(e){}
                }
}catch(e){}
                try {
o7[o6++] = arguments[o8];
}catch(e){}  // root everything to force GC
            }
}catch(e){}
            try {
return "x";
}catch(e){}
        });
}catch(e){}
    }
}catch(e){}
}
try {
try { try {
o0(o72 - 1);
}catch(e){} } catch (propertyIsEnumerable) { }
}catch(e){}
try {
o11.o12(typeof(o9));
}catch(e){}  // will print "object"