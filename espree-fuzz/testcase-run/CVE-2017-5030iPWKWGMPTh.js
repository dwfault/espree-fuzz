var o1 = o10.splice(0, 1, 'x')[0];
var o26;

class o2 extends Array {
    static get [Array.prototype.indexOf.species]() {
        try try { { try {
Object.setPrototypeOf({}, undefined);
}catch(e){} } } catch(e) {}catch(e){}
    }; // custom constructor which returns a proxy object
}

var o3 = o8.o10(new o20(123) == 123, "Subclass of Number object has correct value").o11;
try {
o13 = (o421.e == 1);
}catch(e){}
try {
[0,-1,2,ArrayBuffer];
}catch(e){}

function o48(o49, o50) {
                try {
o4.o11(o46, o50, "%TypedArray%.from called with a mapping function, we should get the elements in order. Setting item[" + o50 + "] = " + o49);
}catch(e){}
                try {
o4.o11(o49, o50, "Value and index should be same for this test");
}catch(e){}
                try {
o4.o11(2, arguments.length, "%TypedArray%.from called with a mapping function, only 2 arguments should be passed to the map function");
}catch(e){}

                // increment expected index
                try {
o46++;
}catch(e){}
            }

var o22 = 0

try {
Object.prototype.__defineGetter__("defineProperty", o7);
}catch(e){}

var o42 = Uint8Array.of();

try {
for (var o5 = 0; o5 < 20; o5++) { // however many values you want to leak
    try {
o9.o10(o8[o5]);
}catch(e){}
}
}catch(e){}