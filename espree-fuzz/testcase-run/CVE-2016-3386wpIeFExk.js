var new o821();
var o40 = 0;
var o199.prototype.o204 = function () {
  //Perform some checks:
  try {
if (this.o200 > 0 && this.o201 > 0 && this.o127 > 0) {
    try {
if (this.o200 == this.o201) {
      //Setup a resampler bypass:
      try {
this.o205 = this.o206;
}catch(e){}    //Resampler just returns what was passed through.
      try {
this.o207 = 1;
}catch(e){}
    }
    else {
      //Setup the interpolation resampler:
      try {
this.o208();
}catch(e){}
      try {
this.o205 = this.o209;
}catch(e){}      //Resampler is a custom quality interpolation algorithm.
      try {
this.o207 = this.o200 / this.o201;
}catch(e){}
      try {
this.o210 = false;
}catch(e){}
      try {
this.o211 = 0;
}catch(e){}
      try {
this.o212();
}catch(e){}
    }
}catch(e){}
  }
  else {
    try {
throw(new Error("Invalid settings specified for the resampler."));
}catch(e){}
  }
}catch(e){}
} = 0;
var o16 = o15.substring(9, o15.indexOf('('));

var o1 = 1

var o12 = o11;

try {
o1.length = 4;
}catch(e){}
var o13 = {};
  try {
Object.defineProperty(o13, '3', {
    get: function() {
      //alert('get!');
      try {
return o14;
}catch(e){}
    }
  });
}catch(e){}

try {
o1.__proto__ = o3;
}catch(e){}
//t.__proto__.__proto__ = o;

try {
o12(...o1);
}catch(e){}