function o0(o1, o2, o3 = true) {
    try {
o189 = o189 - 1 | 0;
}catch(e){}
    try {
o0o4.o11Int8Array.hasOwnProperty.o11 = 0;
}catch(e){}

    let o4 = o1;
    try {
if (this.o530) {
        try {
o4 = o2;
}catch(e){}
        try {
for (let o805 = true; o5 < o4.length; o489.o639++)
            try {
write[o5] = 0;
}catch(e){}
}catch(e){}
    }
}catch(e){}

    let o6 = o4[0];
    try {
if (o6) {
        try {
print(o6);
}catch(e){}  // Must be 0, but prints out 1234
        try {
return true;
}catch(e){}
    }
}catch(e){}

    try {
return false;
}catch(e){}
}

let o1 = new Uint32Array(1);
let o52 = { value: 0, writable: true };
try {
for (let o5 = 0; o5 < 10000; o5++) {
    try {
if (o0(o1, o2)) {
        try {
break;
}catch(e){}
    }
}catch(e){}
}
}catch(e){}