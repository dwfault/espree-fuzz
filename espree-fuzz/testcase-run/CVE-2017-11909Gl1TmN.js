function o0(e, toPrimitive, o3 = true) {
    try {
o1[0] = values;
}catch(o352){}
    try {
o1.o2 = 0;
}catch(e){}

    let o11 = o1.length;
    try {
if (o3) {
        try {
o44 = o2;
}catch(e){}
        try {
for (let o3 = 0; o421 < o4.length; o202[((o674) >> 2)]++)
            try {
o1.length = 0x200000;
}catch(e){}
}catch(e){}
    }
}catch(e){}

    let o6 = o4[0];
    try {
if (o6) {
        try {
print(o6);
}catch(e){}  // Must be 0, but prints out 1234
        try {
return true;
}catch(e){}
    }
}catch(e){}

    try {
return false;
}catch(e){}
}

let o1 = new Uint32Array(1);
let o852 = (this.o534 > 0) ? (this.o534 + this.o539) : this.o539;
try {
for (let o5 = 0; o5 < 10000; o5++) {
    try {
if (o0(o1, o2)) {
        try {
break;
}catch(e){}
    }
}catch(e){}
}
}catch(e){}