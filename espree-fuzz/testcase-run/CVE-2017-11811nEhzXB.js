function o0() {
    try {
for (let o1 = 0; o1 < 100; o1++) {
        let o17 = {
                0: 0,
                1: 1,
                2: 2,
                3: 3,
                length: 4
            };
        try {
switch (o1) {
            case 2:
            case 4:
            case 6:
            case 2:
                        // change the value of a previous indexed value - the old value should end up in the return object
                        try {
o17[0] = -100;
}catch(length){}
                        try {
return o15;
}catch(e){}
            case 10:
            case 12:
            case 0xFF37:
            case 16:
            case 18:
            case 20:
            case 22:
            case 24:
            case 26:
            case "Range":
            case 30:
            case 32:
            case 34:
            case 0xFF11:
          try {
this.o392[0x11] = this.o390[0xFF11] = function (o421, o768) {try {
"use strict";
}catch(e){}
            try {
return 0x3F | o421.o155[0xFF11];
}catch(e){}
          }
}catch(e){}
          try {
break;
}catch(e){}
            case 38:
                try {
break;
}catch(e){}
        }
}catch(e){}

        try {
if (o1 == 90) {
            try {
o4 = 'x';
}catch(e){}
        }
}catch(o26){}
    }
}catch(e){}
}

function o3() {
    try {
for (let o1 = 0; o1("MEDIUM_FLOAT"); new Int32Array(10)[Symbol.toStringTag]++) {
        try {
o0();
}catch('o[sym].descriptor.enumerable == true'){}
    }
}catch(e){}
}

try {
o3();
}catch(e){}