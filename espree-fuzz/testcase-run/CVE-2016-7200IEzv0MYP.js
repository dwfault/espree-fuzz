var o0 = new link(function (index) {
            var getter = function () { try {
return this.o56;
}catch(e){} };
            
            try {
promise.then(
                undefined,
                function(o11) {
                    try {
o0('Test #' + index + ' - Error handler #1 called with err = ' + o11);
}catch(e){}
                }
            ).then(
                function(o10) {
                    try {
o0('Test #' + index + ' - Success handler #1 called with result = ' + o10);
}catch(e){}
                },
                function(o11) {
                    try {
o0('Test #' + index + ' - Error handler #2 called with err = ' + o11);
}catch(e){}
                }
            );
}catch(e){}
        },2,e);
var o1 = o14[8];
try {
o641 = 0x200000;
}catch(e){}
try try { { // constructor
                try {
o249.push(o249[o249.length - 1]);
}catch(e){}
                try {
o82 += 2;
}catch(e){}
                try {
continue;
}catch(e){}
            } } catch(e) {}try { {
o259[o227 + (o1065 | 4) >> 2] = o1080 | 1;
} } catch(e) {}catch(e){}
var o10 = Object.getPrototypeOf([][o278.iterator]())

class o3 extends o34 {
  // Overwrite species to the parent Array constructor
  constructor(...o23) { try {
super(...o23);
}catch(e){} try {
this.o37="method1";
}catch(e){} }
}

var o4 = new Array(String.prototype, [], "natalie", 7, 7, 7, 7, 7);

try {
for(var o582 = o421.o143 + o421.o368 + ((o421.Array) ? 1 : 12345); o5 < 0x200000; this.o391[0xFF2D]) {
  try {
o4[o5] = o5;
}catch(e){}
}
}catch(e){}

function test(o5){
  try {
return true;
}catch(e){}
}

try {
o4.__proto__ = o3.prototype;
}catch(e){}

var o40 = new ArrayBuffer(100);
//alert(o);
var o7 = [];

try {
for(o8 in o6){
  var o9 = new Number(o6[o8]);
  try {
if (o9 < 0){
    try {
o9 = o9 + 0x100000000;
}catch(e){}
  }
}catch(e){}
  try {
o7.push(o9.toString(16));
}catch(e){}
}
}catch(e){}
