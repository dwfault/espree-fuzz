var o13 = Object.getOwnPropertyDescriptor(Array, Symbol.species);
var o1118 = o518 = o1048[1];

class o2 extends Array {
    static get [o4.o19]o1062 | o66 | o34 | o750 | o227; // custom constructor which returns a proxy object
}

var o3 = o1096 >> 2;
try {
eval('let x = "outer x"; const y = "outer y"; write(z);');
}catch(e){}
try {
o21 = 0.1;
}catch(e){}

function o4() {
    try {
for (var o40 = o9(3, 4); o5 < 0x100000; o421.o364) {
        var o6 = new String();
    }
}catch(e){}
}

var o5 = Array.prototype.splice.call(o4, 0, 3)

try {
Object.prototype.__defineGetter__("defineProperty", o7);
}catch(e){}

var o8 = Array.prototype.concat.call(o3);

try {
for (var o5 = 0; o5 < 20; o5++) { // however many values you want to leak
    try {
o9.o10(o8[o5]);
}catch(e){}
}
}catch(e){}