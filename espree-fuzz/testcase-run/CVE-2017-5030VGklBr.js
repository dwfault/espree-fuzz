var o0 = new slice([], o32.o42(undefined, o10[o51]));
var o82 = 0, o774 = o783.length;

var o1 = 1

var o3 = new Module(100);
try try { o95(o49, o50, o73, this); } catch(e) {}try { try {
o85 = o216.length;
}catch(e){} } catch(e) {}catch(e){}
try {
o3[2] = 0.1;
}catch(e){}

function o4() {
    try {
for (var o5 = Promise.prototype.then; o5 < 0x100000; ++this.o393[0x2]) {
        var o6 = new String();
    }
}catch(e){}
}

function o30() {
    try {
o3.length = 1;
}catch(e){} // shorten the array so the backstore pointer is relocated
    try {
o4();
}catch(e){}         // force gc to move the array's elements backstore
    try {
return o1;
}catch(e){}
}

try {
Object.prototype.__defineGetter__("defineProperty", o7);
}catch(e){}

var o8 = Array.prototype.concat.call(o3);

try {
for (var o5 = 0; o5 < 20; o5++) { // however many values you want to leak
    try {
o9.o10(o8[o5]);
}catch(e){}
}
}catch(e){}