function o0() {
    try {
for (var o489 = {
    o604: null,
    o676: [],
    o677: [null],
    o678: [],
    o679: 1,
    o680: null,
    o681: "/",
    o682: false,
    o683: true,
    o496: null,
    o555: {},
    o684: function (o189) {
        try {
if (!(o189 instanceof o489.o496)) try {
throw o189 + ' : ' + o262();
}catch(e){}
}catch(e){}
        try {
return o351(o189.o685);
}catch(e){}
    },
    o617: function (o31, o640) {
        try {
o31 = o605.resolve(o489.o686(), o31);
}catch(e){}
        try {
o640 = o640 || {};
}catch(e){}

        var o687 = {
            o688: true,
            o689: 0
        };
        try {
for (var key in o687) {
            try {
if (o640[key] === undefined) {
                try {
o640[key] = o687[key];
}catch(e){}
            }
}catch(e){}
        }
}catch(e){}

        try {
if (o640.o689 > 8) { // max recursive lookup of 8
            try {
throw new o489.o496(o352.o434);
}catch(e){}
        }
}catch(e){}

        // split the path
        var o249 = o605.o690(o31.split('/').filter(function (o602) {
            try {
return !!o602;
}catch(e){}
        }), false);

        // start at the root
        var o691 = o489.o604;
        var o692 = '/';

        try {
for (var o82 = 0; o82 < o249.length; o82++) {
            var o693 = (o82 === o249.length - 1);
            try {
if (o693 && o640.o517) {
                // stop resolving
                try {
break;
}catch(e){}
            }
}catch(e){}

            try {
o691 = o489.o560(o691, o249[o82]);
}catch(e){}
            try {
o692 = o605.o606(o692, o249[o82]);
}catch(e){}

            // jump to the mount's root node if this is a mountpoint
            try {
if (o489.o694(o691)) {
                try {
if (!o693 || (o693 && o640.o688)) {
                    try {
o691 = o691.o695.o604;
}catch(e){}
                }
}catch(e){}
            }
}catch(e){}

            // by default, lookupPath will not follow a symlink if it is the final path component.
            // setting opts.follow = true will override this behavior.
            try {
if (!o693 || o640.o696) {
                var o697 = 0;
                try {
while (o489.o542(o691.o518)) {
                    var link = o489.o535(o692);
                    try {
o692 = o605.resolve(o605.o698(o692), link);
}catch(e){}

                    var o525 = o489.o617(o692, {
                        o689: o640.o689
                    });
                    try {
o691 = o525.o494;
}catch(e){}

                    try {
if (o697++ > 40) { // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                        try {
throw new o489.o496(o352.o434);
}catch(e){}
                    }
}catch(e){}
                }
}catch(e){}
            }
}catch(e){}
        }
}catch(e){}

        try {
return {
            o31: o692,
            o494: o691
        };
}catch(e){}
    },
    o699: function (o494) {
        var o31;
        try {
while (true) {
            try {
if (o489.o700(o494)) {
                var o515 = o494.o515.o608;
                try {
if (!o31) try {
return o515;
}catch(e){}
}catch(e){}
                try {
return o515[o515.length - 1] !== '/' ? o515 + '/' + o31 : o515 + o31;
}catch(e){}
            }
}catch(e){}
            try {
o31 = o31 ? o494.name + '/' + o31 : o494.name;
}catch(e){}
            try {
o494 = o494.o517;
}catch(e){}
        }
}catch(e){}
    },
    o701: function (o702, name) {
        var o703 = 0;


        try {
for (var o82 = 0; o82 < name.length; o82++) {
            try {
o703 = ((o703 << 5) - o703 + name.charCodeAt(o82)) | 0;
}catch(e){}
        }
}catch(e){}
        try {
return ((o702 + o703) >>> 0) % o489.o680.length;
}catch(e){}
    },
    o704: function (o494) {
        var o703 = o489.o701(o494.o517.o333, o494.name);
        try {
o494.o705 = o489.o680[o703];
}catch(e){}
        try {
o489.o680[o703] = o494;
}catch(e){}
    },
    o706: function (o494) {
        var o703 = o489.o701(o494.o517.o333, o494.name);
        try {
if (o489.o680[o703] === o494) {
            try {
o489.o680[o703] = o494.o705;
}catch(e){}
        } else {
            var o691 = o489.o680[o703];
            try {
while (o691) {
                try {
if (o691.o705 === o494) {
                    try {
o691.o705 = o494.o705;
}catch(e){}
                    try {
break;
}catch(e){}
                }
}catch(e){}
                try {
o691 = o691.o705;
}catch(e){}
            }
}catch(e){}
        }
}catch(e){}
    },
    o560: function (o517, name) {
        var o580 = o489.o707(o517);
        try {
if (o580) {
            try {
throw new o489.o496(o580);
}catch(e){}
        }
}catch(e){}
        var o703 = o489.o701(o517.o333, name);
        try {
for (var o494 = o489.o680[o703]; o494; o494 = o494.o705) {
            var o708 = o494.name;
            try {
if (o494.o517.o333 === o517.o333 && o708 === name) {
                try {
return o494;
}catch(e){}
            }
}catch(e){}
        }
}catch(e){}
        // if we failed to find it in the cache, call into the VFS
        try {
return o489.o525(o517, name);
}catch(e){}
    },
    o516: function (o517, name, o518, o495) {
        try {
if (!o489.o709) {
            try {
o489.o709 = function (o517, name, o518, o495) {
                try {
if (!o517) {
                    try {
o517 = this;
}catch(e){} // root node sets parent to itself
                }
}catch(e){}
                try {
this.o517 = o517;
}catch(e){}
                try {
this.o515 = o517.o515;
}catch(e){}
                try {
this.o695 = null;
}catch(e){}
                try {
this.o333 = o489.o679++;
}catch(e){}
                try {
this.name = name;
}catch(e){}
                try {
this.o518 = o518;
}catch(e){}
                try {
this.o523 = {};
}catch(e){}
                try {
this.o491 = {};
}catch(e){}
                try {
this.o495 = o495;
}catch(e){}
            };
}catch(e){}

            try {
o489.o709.prototype = {};
}catch(e){}

            // compatibility
            var o710 = 292 | 73;
            var o711 = 146;

            // NOTE we must use Object.defineProperties instead of individual calls to
            // Object.defineProperty in order to make closure compiler happy
            try {
Object.defineProperties(o489.o709.prototype, {
                o27: {
                    get: function () {
                        try {
return (this.o518 & o710) === o710;
}catch(e){}
                    },
                    set: function (o508) {
                        try {
o508 ? this.o518 |= o710 : this.o518 &= ~o710;
}catch(e){}
                    }
                },
                write: {
                    get: function () {
                        try {
return (this.o518 & o711) === o711;
}catch(e){}
                    },
                    set: function (o508) {
                        try {
o508 ? this.o518 |= o711 : this.o518 &= ~o711;
}catch(e){}
                    }
                },
                o712: {
                    get: function () {
                        try {
return o489.o538(this.o518);
}catch(e){}
                    },
                },
                o713: {
                    get: function () {
                        try {
return o489.o543(this.o518);
}catch(e){}
                    },
                },
            });
}catch(e){}
        }
}catch(e){}

        var o494 = new o489.o709(o517, name, o518, o495);

        try {
o489.o704(o494);
}catch(e){}

        try {
return o494;
}catch(e){}
    },
    o714: function (o494) {
        try {
o489.o706(o494);
}catch(e){}
    },
    o700: function (o494) {
        try {
return o494 === o494.o517;
}catch(e){}
    },
    o694: function (o494) {
        try {
return !!o494.o695;
}catch(e){}
    },
    o540: function (o518) {
        try {
return (o518 & 61440) === 32768;
}catch(e){}
    },
    o538: function (o518) {
        try {
return (o518 & 61440) === 16384;
}catch(e){}
    },
    o542: function (o518) {
        try {
return (o518 & 61440) === 40960;
}catch(e){}
    },
    o543: function (o518) {
        try {
return (o518 & 61440) === 8192;
}catch(e){}
    },
    o519: function (o518) {
        try {
return (o518 & 61440) === 24576;
}catch(e){}
    },
    o520: function (o518) {
        try {
return (o518 & 61440) === 4096;
}catch(e){}
    },
    o715: function (o518) {
        try {
return (o518 & 49152) === 49152;
}catch(e){}
    },
    o716: {
        "r": 0,
        "rs": 1052672,
        "r+": 2,
        "w": 577,
        "wx": 705,
        "xw": 705,
        "w+": 578,
        "wx+": 706,
        "xw+": 706,
        "a": 1089,
        "ax": 1217,
        "xa": 1217,
        "a+": 1090,
        "ax+": 1218,
        "xa+": 1218
    },
    o717: function (o231) {
        var flags = o489.o716[o231];
        try {
if (typeof flags === 'undefined') {
            try {
throw new Error('Unknown file open mode: ' + o231);
}catch(e){}
        }
}catch(e){}
        try {
return flags;
}catch(e){}
    },
    o645: function (o718) {
        var o719 = o718 & 2097155;
        var o720 = ['r', 'w', 'rw'][o719];
        try {
if ((o718 & 512)) {
            try {
o720 += 'w';
}catch(e){}
        }
}catch(e){}
        try {
return o720;
}catch(e){}
    },
    o721: function (o494, o720) {
        try {
if (o489.o683) {
            try {
return 0;
}catch(e){}
        }
}catch(e){}
        // return 0 if any user, group or owner bits are set.
        try {
if (o720.indexOf('r') !== -1 && !(o494.o518 & 292)) {
            try {
return o352.o366;
}catch(e){}
        } else try {
if (o720.indexOf('w') !== -1 && !(o494.o518 & 146)) {
            try {
return o352.o366;
}catch(e){}
        } else try {
if (o720.indexOf('x') !== -1 && !(o494.o518 & 73)) {
            try {
return o352.o366;
}catch(e){}
        }
}catch(e){}
}catch(e){}
}catch(e){}
        try {
return 0;
}catch(e){}
    },
    o707: function (o521) {
        try {
return o489.o721(o521, 'x');
}catch(e){}
    },
    o722: function (o521, name) {
        try {
try {
            var o494 = o489.o560(o521, name);
            try {
return o352.o370;
}catch(e){}
        } catch (o189) {}
}catch(e){}
        try {
return o489.o721(o521, 'wx');
}catch(e){}
    },
    o723: function (o521, name, o724) {
        var o494;
        try {
try {
            try {
o494 = o489.o560(o521, name);
}catch(e){}
        } catch (o189) {
            try {
return o189.o685;
}catch(e){}
        }
}catch(e){}
        var o580 = o489.o721(o521, 'wx');
        try {
if (o580) {
            try {
return o580;
}catch(e){}
        }
}catch(e){}
        try {
if (o724) {
            try {
if (!o489.o538(o494.o518)) {
                try {
return o352.o373;
}catch(e){}
            }
}catch(e){}
            try {
if (o489.o700(o494) || o489.o699(o494) === o489.o686()) {
                try {
return o352.o369;
}catch(e){}
            }
}catch(e){}
        } else {
            try {
if (o489.o538(o494.o518)) {
                try {
return o352.o374;
}catch(e){}
            }
}catch(e){}
        }
}catch(e){}
        try {
return 0;
}catch(e){}
    },
    o725: function (o494, flags) {
        try {
if (!o494) {
            try {
return o352.o354;
}catch(e){}
        }
}catch(e){}
        try {
if (o489.o542(o494.o518)) {
            try {
return o352.o434;
}catch(e){}
        } else try {
if (o489.o538(o494.o518)) {
            try {
if ((flags & 2097155) !== 0 || // opening for write
                (flags & 512)) {
                try {
return o352.o374;
}catch(e){}
            }
}catch(e){}
        }
}catch(e){}
}catch(e){}
        try {
return o489.o721(o494, o489.o645(flags));
}catch(e){}
    },
    o726: 4096,
    o727: function (o728, o729) {
        try {
o728 = o728 || 0;
}catch(e){}
        try {
o729 = o729 || o489.o726;
}catch(e){}
        try {
for (var o730 = o728; o730 <= o729; o730++) {
            try {
if (!o489.o678[o730]) {
                try {
return o730;
}catch(e){}
            }
}catch(e){}
        }
}catch(e){}
        try {
throw new o489.o496(o352.o377);
}catch(e){}
    },
    o731: function (o730) {
        try {
return o489.o678[o730];
}catch(e){}
    },
    o732: function (o492, o728, o729) {
        try {
if (!o489.o733) {
            try {
o489.o733 = function () {};
}catch(e){}
            try {
o489.o733.prototype = {};
}catch(e){}
            // compatibility
            try {
Object.defineProperties(o489.o733.prototype, {
                o734: {
                    get: function () {
                        try {
return this.o494;
}catch(e){}
                    },
                    set: function (o508) {
                        try {
this.o494 = o508;
}catch(e){}
                    }
                },
                o735: {
                    get: function () {
                        try {
return (this.flags & 2097155) !== 1;
}catch(e){}
                    }
                },
                o736: {
                    get: function () {
                        try {
return (this.flags & 2097155) !== 0;
}catch(e){}
                    }
                },
                o737: {
                    get: function () {
                        try {
return (this.flags & 1024);
}catch(e){}
                    }
                }
            });
}catch(e){}
        }
}catch(e){}
        try {
if (o492.__proto__) {
            // reuse the object
            try {
o492.__proto__ = o489.o733.prototype;
}catch(e){}
        } else {
            var o738 = new o489.o733();
            try {
for (var o602 in o492) {
                try {
o738[o602] = o492[o602];
}catch(e){}
            }
}catch(e){}
            try {
o492 = o738;
}catch(e){}
        }
}catch(e){}
        var o730 = o489.o727(o728, o729);
        try {
o492.o730 = o730;
}catch(e){}
        try {
o489.o678[o730] = o492;
}catch(e){}
        try {
return o492;
}catch(e){}
    },
    o739: function (o730) {
        try {
o489.o678[o730] = null;
}catch(e){}
    },
    o740: function (o114) {
        try {
return o489.o678[o114 - 1];
}catch(e){}
    },
    o741: function (o492) {
        try {
return o492 ? o492.o730 + 1 : 0;
}catch(e){}
    },
    o537: {
        o41: function (o492) {
            var o742 = o489.o743(o492.o494.o495);
            // override node's stream ops with the device's
            try {
o492.o491 = o742.o491;
}catch(e){}
            // forward the open call
            try {
if (o492.o491.o41) {
                try {
o492.o491.o41(o492);
}catch(e){}
            }
}catch(e){}
        },
        o532: function () {
            try {
throw new o489.o496(o352.o382);
}catch(e){}
        }
    },
    o744: function (o486) {
        try {
return ((o486) >> 8);
}catch(e){}
    },
    o745: function (o486) {
        try {
return ((o486) & 0xff);
}catch(e){}
    },
    o746: function (o747, o748) {
        try {
return ((o747) << 8 | (o748));
}catch(e){}
    },
    o490: function (o486, o487) {
        try {
o489.o677[o486] = {
            o491: o487
        };
}catch(e){}
    },
    o743: function (o486) {
        try {
return o489.o677[o486];
}catch(e){}
    },
    o749: function (o515) {
        var o676 = [];
        var o607 = [o515];

        try {
while (o607.length) {
            var o750 = o607.pop();

            try {
o676.push(o750);
}catch(e){}

            try {
o607.push.apply(o607, o750.o676);
}catch(e){}
        }
}catch(e){}

        try {
return o676;
}catch(e){}
    },
    o577: function (o578, o278) {
        try {
if (typeof (o578) === 'function') {
            try {
o278 = o578;
}catch(e){}
            try {
o578 = false;
}catch(e){}
        }
}catch(e){}

        var o676 = o489.o749(o489.o604.o515);
        var o634 = 0;

        function done(o580) {
            try {
if (o580) {
                try {
if (!done.o633) {
                    try {
done.o633 = true;
}catch(e){}
                    try {
return o278(o580);
}catch(e){}
                }
}catch(e){}
                try {
return;
}catch(e){}
            }
}catch(e){}
            try {
if (++o634 >= o676.length) {
                try {
o278(null);
}catch(e){}
            }
}catch(e){}
        }try {
;
}catch(e){}

        // sync all mounts
        try {
o676.forEach(function (o515) {
            try {
if (!o515.type.o577) {
                try {
return done(null);
}catch(e){}
            }
}catch(e){}
            try {
o515.type.o577(o515, o578, done);
}catch(e){}
        });
}catch(e){}
    },
    o515: function (type, o640, o608) {
        var o604 = o608 === '/';
        var o751 = !o608;
        var o494;

        try {
if (o604 && o489.o604) {
            try {
throw new o489.o496(o352.o369);
}catch(e){}
        } else try {
if (!o604 && !o751) {
            var o525 = o489.o617(o608, {
                o688: false
            });

            try {
o608 = o525.o31;
}catch(e){} // use the absolute path
            try {
o494 = o525.o494;
}catch(e){}

            try {
if (o489.o694(o494)) {
                try {
throw new o489.o496(o352.o369);
}catch(e){}
            }
}catch(e){}

            try {
if (!o489.o538(o494.o518)) {
                try {
throw new o489.o496(o352.o373);
}catch(e){}
            }
}catch(e){}
        }
}catch(e){}
}catch(e){}

        var o515 = {
            type: type,
            o640: o640,
            o608: o608,
            o676: []
        };

        // create a root node for the fs
        var o752 = type.o515(o515);
        try {
o752.o515 = o515;
}catch(e){}
        try {
o515.o604 = o752;
}catch(e){}

        try {
if (o604) {
            try {
o489.o604 = o752;
}catch(e){}
        } else try {
if (o494) {
            // set as a mountpoint
            try {
o494.o695 = o515;
}catch(e){}

            // add the new mount to the current mount's children
            try {
if (o494.o515) {
                try {
o494.o515.o676.push(o515);
}catch(e){}
            }
}catch(e){}
        }
}catch(e){}
}catch(e){}

        try {
return o752;
}catch(e){}
    },
    o753: function (o608) {
        var o525 = o489.o617(o608, {
            o688: false
        });

        try {
if (!o489.o694(o525.o494)) {
            try {
throw new o489.o496(o352.o375);
}catch(e){}
        }
}catch(e){}

        // destroy the nodes for this mount, and all its child mounts
        var o494 = o525.o494;
        var o515 = o494.o695;
        var o676 = o489.o749(o515);

        try {
Object.keys(o489.o680).forEach(function (o703) {
            var o691 = o489.o680[o703];

            try {
while (o691) {
                var next = o691.o705;

                try {
if (o676.indexOf(o691.o515) !== -1) {
                    try {
o489.o714(o691);
}catch(e){}
                }
}catch(e){}

                try {
o691 = next;
}catch(e){}
            }
}catch(e){}
        });
}catch(e){}

        // no longer a mountpoint
        try {
o494.o695 = null;
}catch(e){}

        // remove this mount from the child mounts
        var o754 = o494.o515.o676.indexOf(o515);
        try {
o73(o754 !== -1);
}catch(e){}
        try {
o494.o515.o676.splice(o754, 1);
}catch(e){}
    },
    o525: function (o517, name) {
        try {
return o517.o523.o525(o517, name);
}catch(e){}
    },
    o526: function (o31, o518, o486) {
        var o525 = o489.o617(o31, {
            o517: true
        });
        var o517 = o525.o494;
        var name = o605.o755(o31);
        var o580 = o489.o722(o517, name);
        try {
if (o580) {
            try {
throw new o489.o496(o580);
}catch(e){}
        }
}catch(e){}
        try {
if (!o517.o523.o526) {
            try {
throw new o489.o496(o352.o353);
}catch(e){}
        }
}catch(e){}
        try {
return o517.o523.o526(o517, name, o518, o486);
}catch(e){}
    },
    create: function (o31, o518) {
        try {
o518 = o518 !== undefined ? o518 : 438 /* 0666 */ ;
}catch(e){}
        try {
o518 &= 4095;
}catch(e){}
        try {
o518 |= 32768;
}catch(e){}
        try {
return o489.o526(o31, o518, 0);
}catch(e){}
    },
    o620: function (o31, o518) {
        try {
o518 = o518 !== undefined ? o518 : 511 /* 0777 */ ;
}catch(e){}
        try {
o518 &= 511 | 512;
}catch(e){}
        try {
o518 |= 16384;
}catch(e){}
        try {
return o489.o526(o31, o518, 0);
}catch(e){}
    },
    o756: function (o31, o518, o486) {
        try {
if (typeof (o486) === 'undefined') {
            try {
o486 = o518;
}catch(e){}
            try {
o518 = 438 /* 0666 */ ;
}catch(e){}
        }
}catch(e){}
        try {
o518 |= 8192;
}catch(e){}
        try {
return o489.o526(o31, o518, o486);
}catch(e){}
    },
    o531: function (o562, o757) {
        var o525 = o489.o617(o757, {
            o517: true
        });
        var o517 = o525.o494;
        var o561 = o605.o755(o757);
        var o580 = o489.o722(o517, o561);
        try {
if (o580) {
            try {
throw new o489.o496(o580);
}catch(e){}
        }
}catch(e){}
        try {
if (!o517.o523.o531) {
            try {
throw new o489.o496(o352.o353);
}catch(e){}
        }
}catch(e){}
        try {
return o517.o523.o531(o517, o561, o562);
}catch(e){}
    },
    o527: function (o758, o759) {
        var o760 = o605.o698(o758);
        var o761 = o605.o698(o759);
        var o762 = o605.o755(o758);
        var o558 = o605.o755(o759);
        // parents must exist
        var o525, o763, o557;
        try {
try {
            try {
o525 = o489.o617(o758, {
                o517: true
            });
}catch(e){}
            try {
o763 = o525.o494;
}catch(e){}
            try {
o525 = o489.o617(o759, {
                o517: true
            });
}catch(e){}
            try {
o557 = o525.o494;
}catch(e){}
        } catch (o189) {
            try {
throw new o489.o496(o352.o369);
}catch(e){}
        }
}catch(e){}
        // need to be part of the same mount
        try {
if (o763.o515 !== o557.o515) {
            try {
throw new o489.o496(o352.o371);
}catch(e){}
        }
}catch(e){}
        // source must exist
        var o556 = o489.o560(o763, o762);
        // old path should not be an ancestor of the new path
        var o764 = o605.o764(o758, o761);
        try {
if (o764.charAt(0) !== '.') {
            try {
throw new o489.o496(o352.o375);
}catch(e){}
        }
}catch(e){}
        // new path should not be an ancestor of the old path
        try {
o764 = o605.o764(o759, o760);
}catch(e){}
        try {
if (o764.charAt(0) !== '.') {
            try {
throw new o489.o496(o352.o432);
}catch(e){}
        }
}catch(e){}
        // see if the new path already exists
        var o559;
        try {
try {
            try {
o559 = o489.o560(o557, o558);
}catch(e){}
        } catch (o189) {
            // not fatal
        }
}catch(e){}
        // early out if nothing needs to change
        try {
if (o556 === o559) {
            try {
return;
}catch(e){}
        }
}catch(e){}
        // we'll need to delete the old entry
        var o724 = o489.o538(o556.o518);
        var o580 = o489.o723(o763, o762, o724);
        try {
if (o580) {
            try {
throw new o489.o496(o580);
}catch(e){}
        }
}catch(e){}
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        try {
o580 = o559 ?
            o489.o723(o557, o558, o724) :
            o489.o722(o557, o558);
}catch(e){}
        try {
if (o580) {
            try {
throw new o489.o496(o580);
}catch(e){}
        }
}catch(e){}
        try {
if (!o763.o523.o527) {
            try {
throw new o489.o496(o352.o353);
}catch(e){}
        }
}catch(e){}
        try {
if (o489.o694(o556) || (o559 && o489.o694(o559))) {
            try {
throw new o489.o496(o352.o369);
}catch(e){}
        }
}catch(e){}
        // if we are going to change the parent, check write permissions
        try {
if (o557 !== o763) {
            try {
o580 = o489.o721(o763, 'w');
}catch(e){}
            try {
if (o580) {
                try {
throw new o489.o496(o580);
}catch(e){}
            }
}catch(e){}
        }
}catch(e){}
        // remove the node from the lookup hash
        try {
o489.o706(o556);
}catch(e){}
        // do the underlying fs rename
        try {
try {
            try {
o763.o523.o527(o556, o557, o558);
}catch(e){}
        } catch (o189) {
            try {
throw o189;
}catch(e){}
        } finally {
            // add the node back to the hash (in case node_ops.rename
            // changed its name)
            try {
o489.o704(o556);
}catch(e){}
        }
}catch(e){}
    },
    o529: function (o31) {
        var o525 = o489.o617(o31, {
            o517: true
        });
        var o517 = o525.o494;
        var name = o605.o755(o31);
        var o494 = o489.o560(o517, name);
        var o580 = o489.o723(o517, name, true);
        try {
if (o580) {
            try {
throw new o489.o496(o580);
}catch(e){}
        }
}catch(e){}
        try {
if (!o517.o523.o529) {
            try {
throw new o489.o496(o352.o353);
}catch(e){}
        }
}catch(e){}
        try {
if (o489.o694(o494)) {
            try {
throw new o489.o496(o352.o369);
}catch(e){}
        }
}catch(e){}
        try {
o517.o523.o529(o517, name);
}catch(e){}
        try {
o489.o714(o494);
}catch(e){}
    },
    o530: function (o31) {
        var o525 = o489.o617(o31, {
            o696: true
        });
        var o494 = o525.o494;
        try {
if (!o494.o523.o530) {
            try {
throw new o489.o496(o352.o373);
}catch(e){}
        }
}catch(e){}
        try {
return o494.o523.o530(o494);
}catch(e){}
    },
    o528: function (o31) {
        var o525 = o489.o617(o31, {
            o517: true
        });
        var o517 = o525.o494;
        var name = o605.o755(o31);
        var o494 = o489.o560(o517, name);
        var o580 = o489.o723(o517, name, false);
        try {
if (o580) {
            // POSIX says unlink should set EPERM, not EISDIR
            try {
if (o580 === o352.o374) try {
o580 = o352.o353;
}catch(e){}
}catch(e){}
            try {
throw new o489.o496(o580);
}catch(e){}
        }
}catch(e){}
        try {
if (!o517.o523.o528) {
            try {
throw new o489.o496(o352.o353);
}catch(e){}
        }
}catch(e){}
        try {
if (o489.o694(o494)) {
            try {
throw new o489.o496(o352.o369);
}catch(e){}
        }
}catch(e){}
        try {
o517.o523.o528(o517, name);
}catch(e){}
        try {
o489.o714(o494);
}catch(e){}
    },
    o535: function (o31) {
        var o525 = o489.o617(o31);
        var link = o525.o494;
        try {
if (!link.o523.o535) {
            try {
throw new o489.o496(o352.o375);
}catch(e){}
        }
}catch(e){}
        try {
return link.o523.o535(link);
}catch(e){}
    },
    o609: function (o31, o765) {
        var o525 = o489.o617(o31, {
            o696: !o765
        });
        var o494 = o525.o494;
        try {
if (!o494.o523.o522) {
            try {
throw new o489.o496(o352.o353);
}catch(e){}
        }
}catch(e){}
        try {
return o494.o523.o522(o494);
}catch(e){}
    },
    o766: function (o31) {
        try {
return o489.o609(o31, true);
}catch(e){}
    },
    o767: function (o31, o518, o765) {
        var o494;
        try {
if (typeof o31 === 'string') {
            var o525 = o489.o617(o31, {
                o696: !o765
            });
            try {
o494 = o525.o494;
}catch(e){}
        } else {
            try {
o494 = o31;
}catch(e){}
        }
}catch(e){}
        try {
if (!o494.o523.o524) {
            try {
throw new o489.o496(o352.o353);
}catch(e){}
        }
}catch(e){}
        try {
o494.o523.o524(o494, {
            o518: (o518 & 4095) | (o494.o518 & ~4095),
            o504: Date.o4()
        });
}catch(e){}
    },
    o768: function (o31, o518) {
        try {
o489.o767(o31, o518, true);
}catch(e){}
    },
    o769: function (o730, o518) {
        var o492 = o489.o731(o730);
        try {
if (!o492) {
            try {
throw new o489.o496(o352.o361);
}catch(e){}
        }
}catch(e){}
        try {
o489.o767(o492.o494, o518);
}catch(e){}
    },
    o770: function (o31, o548, o549, o765) {
        var o494;
        try {
if (typeof o31 === 'string') {
            var o525 = o489.o617(o31, {
                o696: !o765
            });
            try {
o494 = o525.o494;
}catch(e){}
        } else {
            try {
o494 = o31;
}catch(e){}
        }
}catch(e){}
        try {
if (!o494.o523.o524) {
            try {
throw new o489.o496(o352.o353);
}catch(e){}
        }
}catch(e){}
        try {
o494.o523.o524(o494, {
            o504: Date.o4()
            // we ignore the uid / gid for now
        });
}catch(e){}
    },
    o771: function (o31, o548, o549) {
        try {
o489.o770(o31, o548, o549, true);
}catch(e){}
    },
    o772: function (o730, o548, o549) {
        var o492 = o489.o731(o730);
        try {
if (!o492) {
            try {
throw new o489.o496(o352.o361);
}catch(e){}
        }
}catch(e){}
        try {
o489.o770(o492.o494, o548, o549);
}catch(e){}
    },
    o773: function (o31, o774) {
        try {
if (o774 < 0) {
            try {
throw new o489.o496(o352.o375);
}catch(e){}
        }
}catch(e){}
        var o494;
        try {
if (typeof o31 === 'string') {
            var o525 = o489.o617(o31, {
                o696: true
            });
            try {
o494 = o525.o494;
}catch(e){}
        } else {
            try {
o494 = o31;
}catch(e){}
        }
}catch(e){}
        try {
if (!o494.o523.o524) {
            try {
throw new o489.o496(o352.o353);
}catch(e){}
        }
}catch(e){}
        try {
if (o489.o538(o494.o518)) {
            try {
throw new o489.o496(o352.o374);
}catch(e){}
        }
}catch(e){}
        try {
if (!o489.o540(o494.o518)) {
            try {
throw new o489.o496(o352.o375);
}catch(e){}
        }
}catch(e){}
        var o580 = o489.o721(o494, 'w');
        try {
if (o580) {
            try {
throw new o489.o496(o580);
}catch(e){}
        }
}catch(e){}
        try {
o494.o523.o524(o494, {
            o85: o774,
            o504: Date.o4()
        });
}catch(e){}
    },
    o775: function (o730, o774) {
        var o492 = o489.o731(o730);
        try {
if (!o492) {
            try {
throw new o489.o496(o352.o361);
}catch(e){}
        }
}catch(e){}
        try {
if ((o492.flags & 2097155) === 0) {
            try {
throw new o489.o496(o352.o375);
}catch(e){}
        }
}catch(e){}
        try {
o489.o773(o492.o494, o774);
}catch(e){}
    },
    o623: function (o31, o550, o551) {
        var o525 = o489.o617(o31, {
            o696: true
        });
        var o494 = o525.o494;
        try {
o494.o523.o524(o494, {
            o504: Math.o75(o550, o551)
        });
}catch(e){}
    },
    o41: function (o31, flags, o518, o728, o729) {
        try {
flags = typeof flags === 'string' ? o489.o717(flags) : flags;
}catch(e){}
        try {
o518 = typeof o518 === 'undefined' ? 438 /* 0666 */ : o518;
}catch(e){}
        try {
if ((flags & 64)) {
            try {
o518 = (o518 & 4095) | 32768;
}catch(e){}
        } else {
            try {
o518 = 0;
}catch(e){}
        }
}catch(e){}
        var o494;
        try {
if (typeof o31 === 'object') {
            try {
o494 = o31;
}catch(e){}
        } else {
            try {
o31 = o605.normalize(o31);
}catch(e){}
            try {
try {
                var o525 = o489.o617(o31, {
                    o696: !(flags & 131072)
                });
                try {
o494 = o525.o494;
}catch(e){}
            } catch (o189) {
                // ignore
            }
}catch(e){}
        }
}catch(e){}
        // perhaps we need to create the node
        try {
if ((flags & 64)) {
            try {
if (o494) {
                // if O_CREAT and O_EXCL are set, error out if the node already exists
                try {
if ((flags & 128)) {
                    try {
throw new o489.o496(o352.o370);
}catch(e){}
                }
}catch(e){}
            } else {
                // node doesn't exist, try to create it
                try {
o494 = o489.o526(o31, o518, 0);
}catch(e){}
            }
}catch(e){}
        }
}catch(e){}
        try {
if (!o494) {
            try {
throw new o489.o496(o352.o354);
}catch(e){}
        }
}catch(e){}
        // can't truncate a device
        try {
if (o489.o543(o494.o518)) {
            try {
flags &= ~512;
}catch(e){}
        }
}catch(e){}
        // check permissions
        var o580 = o489.o725(o494, flags);
        try {
if (o580) {
            try {
throw new o489.o496(o580);
}catch(e){}
        }
}catch(e){}
        // do truncation if necessary
        try {
if ((flags & 512)) {
            try {
o489.o773(o494, 0);
}catch(e){}
        }
}catch(e){}
        // we've already handled these, don't pass down to the underlying vfs
        try {
flags &= ~(128 | 512);
}catch(e){}

        // register the stream with the filesystem
        var o492 = o489.o732({
            o494: o494,
            o31: o489.o699(o494), // we want the absolute path to the node
            flags: flags,
            o497: true,
            o563: 0,
            o491: o494.o491,
            // used by the file family libc calls (fopen, fwrite, ferror, etc.)
            o566: [],
            o600: false
        }, o728, o729);
        // call the new stream's open function
        try {
if (o492.o491.o41) {
            try {
o492.o491.o41(o492);
}catch(e){}
        }
}catch(e){}
        try {
if (Module['logReadFiles'] && !(flags & 1)) {
            try {
if (!o489.o776) try {
o489.o776 = {};
}catch(e){}
}catch(e){}
            try {
if (!(o31 in o489.o776)) {
                try {
o489.o776[o31] = 1;
}catch(e){}
                try {
Module['printErr']('read file: ' + o31);
}catch(e){}
            }
}catch(e){}
        }
}catch(e){}
        try {
return o492;
}catch(e){}
    },
    o498: function (o492) {
        try {
try {
            try {
if (o492.o491.o498) {
                try {
o492.o491.o498(o492);
}catch(e){}
            }
}catch(e){}
        } catch (o189) {
            try {
throw o189;
}catch(e){}
        } finally {
            try {
o489.o739(o492.o730);
}catch(e){}
        }
}catch(e){}
    },
    o532: function (o492, o107, o565) {
        try {
if (!o492.o497 || !o492.o491.o532) {
            try {
throw new o489.o496(o352.o382);
}catch(e){}
        }
}catch(e){}
        try {
return o492.o491.o532(o492, o107, o565);
}catch(e){}
    },
    o27: function (o492, buffer, o107, length, o563) {
        try {
if (length < 0 || o563 < 0) {
            try {
throw new o489.o496(o352.o375);
}catch(e){}
        }
}catch(e){}
        try {
if ((o492.flags & 2097155) === 1) {
            try {
throw new o489.o496(o352.o361);
}catch(e){}
        }
}catch(e){}
        try {
if (o489.o538(o492.o494.o518)) {
            try {
throw new o489.o496(o352.o374);
}catch(e){}
        }
}catch(e){}
        try {
if (!o492.o491.o27) {
            try {
throw new o489.o496(o352.o375);
}catch(e){}
        }
}catch(e){}
        var o777 = true;
        try {
if (typeof o563 === 'undefined') {
            try {
o563 = o492.o563;
}catch(e){}
            try {
o777 = false;
}catch(e){}
        } else try {
if (!o492.o497) {
            try {
throw new o489.o496(o352.o382);
}catch(e){}
        }
}catch(e){}
}catch(e){}
        var o502 = o492.o491.o27(o492, buffer, o107, length, o563);
        try {
if (!o777) try {
o492.o563 += o502;
}catch(e){}
}catch(e){}
        try {
return o502;
}catch(e){}
    },
    write: function (o492, buffer, o107, length, o563, o564) {
        try {
if (length < 0 || o563 < 0) {
            try {
throw new o489.o496(o352.o375);
}catch(e){}
        }
}catch(e){}
        try {
if ((o492.flags & 2097155) === 0) {
            try {
throw new o489.o496(o352.o361);
}catch(e){}
        }
}catch(e){}
        try {
if (o489.o538(o492.o494.o518)) {
            try {
throw new o489.o496(o352.o374);
}catch(e){}
        }
}catch(e){}
        try {
if (!o492.o491.write) {
            try {
throw new o489.o496(o352.o375);
}catch(e){}
        }
}catch(e){}
        var o777 = true;
        try {
if (typeof o563 === 'undefined') {
            try {
o563 = o492.o563;
}catch(e){}
            try {
o777 = false;
}catch(e){}
        } else try {
if (!o492.o497) {
            try {
throw new o489.o496(o352.o382);
}catch(e){}
        }
}catch(e){}
}catch(e){}
        try {
if (o492.flags & 1024) {
            // seek to the end before writing in append mode
            try {
o489.o532(o492, 0, 2);
}catch(e){}
        }
}catch(e){}
        var o778 = o492.o491.write(o492, buffer, o107, length, o563, o564);
        try {
if (!o777) try {
o492.o563 += o778;
}catch(e){}
}catch(e){}
        try {
return o778;
}catch(e){}
    },
    o215: function (o492, o107, length) {
        try {
if (o107 < 0 || length <= 0) {
            try {
throw new o489.o496(o352.o375);
}catch(e){}
        }
}catch(e){}
        try {
if ((o492.flags & 2097155) === 0) {
            try {
throw new o489.o496(o352.o361);
}catch(e){}
        }
}catch(e){}
        try {
if (!o489.o540(o492.o494.o518) && !o489.o538(o494.o518)) {
            try {
throw new o489.o496(o352.o372);
}catch(e){}
        }
}catch(e){}
        try {
if (!o492.o491.o215) {
            try {
throw new o489.o496(o352.o435);
}catch(e){}
        }
}catch(e){}
        try {
o492.o491.o215(o492, o107, length);
}catch(e){}
    },
    o534: function (o492, buffer, o107, length, o563, o567, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        try {
if ((o492.flags & 2097155) === 1) {
            try {
throw new o489.o496(o352.o366);
}catch(e){}
        }
}catch(e){}
        try {
if (!o492.o491.o534) {
            try {
throw new o489.o496(o352.o372);
}catch(e){}
        }
}catch(e){}
        try {
return o492.o491.o534(o492, buffer, o107, length, o563, o567, flags);
}catch(e){}
    },
    o779: function (o492, o780, o196) {
        try {
if (!o492.o491.o779) {
            try {
throw new o489.o496(o352.o378);
}catch(e){}
        }
}catch(e){}
        try {
return o492.o491.o779(o492, o780, o196);
}catch(e){}
    },
    o781: function (o31, o640) {
        try {
o640 = o640 || {};
}catch(e){}
        try {
o640.flags = o640.flags || 'r';
}catch(e){}
        try {
o640.o622 = o640.o622 || 'binary';
}catch(e){}
        try {
if (o640.o622 !== 'utf8' && o640.o622 !== 'binary') {
            try {
throw new Error('Invalid encoding type "' + o640.o622 + '"');
}catch(e){}
        }
}catch(e){}
        var o30;
        var o492 = o489.o41(o31, o640.flags);
        var o609 = o489.o609(o31);
        var length = o609.o85;
        var o782 = new Uint8Array(length);
        try {
o489.o27(o492, o782, 0, length, 0);
}catch(e){}
        try {
if (o640.o622 === 'utf8') {
            try {
o30 = '';
}catch(e){}
            var o229 = new o48.o129();
            try {
for (var o82 = 0; o82 < length; o82++) {
                try {
o30 += o229.o131(o782[o82]);
}catch(e){}
            }
}catch(e){}
        } else try {
if (o640.o622 === 'binary') {
            try {
o30 = o782;
}catch(e){}
        }
}catch(e){}
}catch(e){}
        try {
o489.o498(o492);
}catch(e){}
        try {
return o30;
}catch(e){}
    },
    o621: function (o31, o783, o640) {
        try {
o640 = o640 || {};
}catch(e){}
        try {
o640.flags = o640.flags || 'w';
}catch(e){}
        try {
o640.o622 = o640.o622 || 'utf8';
}catch(e){}
        try {
if (o640.o622 !== 'utf8' && o640.o622 !== 'binary') {
            try {
throw new Error('Invalid encoding type "' + o640.o622 + '"');
}catch(e){}
        }
}catch(e){}
        var o492 = o489.o41(o31, o640.flags, o640.o518);
        try {
if (o640.o622 === 'utf8') {
            var o229 = new o48.o129();
            var o782 = new Uint8Array(o229.o137(o783));
            try {
o489.write(o492, o782, 0, o782.length, 0, o640.o564);
}catch(e){}
        } else try {
if (o640.o622 === 'binary') {
            try {
o489.write(o492, o783, 0, o783.length, 0, o640.o564);
}catch(e){}
        }
}catch(e){}
}catch(e){}
        try {
o489.o498(o492);
}catch(e){}
    },
    o686: function () {
        try {
return o489.o681;
}catch(e){}
    },
    o784: function (o31) {
        var o525 = o489.o617(o31, {
            o696: true
        });
        try {
if (!o489.o538(o525.o494.o518)) {
            try {
throw new o489.o496(o352.o373);
}catch(e){}
        }
}catch(e){}
        var o580 = o489.o721(o525.o494, 'x');
        try {
if (o580) {
            try {
throw new o489.o496(o580);
}catch(e){}
        }
}catch(e){}
        try {
o489.o681 = o525.o31;
}catch(e){}
    },
    o785: function () {
        try {
o489.o620('/tmp');
}catch(e){}
    },
    o786: function () {
        // create /dev
        try {
o489.o620('/dev');
}catch(e){}
        // setup /dev/null
        try {
o489.o490(o489.o746(1, 3), {
            o27: function () {
                try {
return 0;
}catch(e){}
            },
            write: function () {
                try {
return 0;
}catch(e){}
            }
        });
}catch(e){}
        try {
o489.o756('/dev/null', o489.o746(1, 3));
}catch(e){}
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        try {
o481.o485(o489.o746(5, 0), o481.o505);
}catch(e){}
        try {
o481.o485(o489.o746(6, 0), o481.o509);
}catch(e){}
        try {
o489.o756('/dev/tty', o489.o746(5, 0));
}catch(e){}
        try {
o489.o756('/dev/tty1', o489.o746(6, 0));
}catch(e){}
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        try {
o489.o620('/dev/shm');
}catch(e){}
        try {
o489.o620('/dev/shm/tmp');
}catch(e){}
    },
    o787: function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops

        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        try {
if (Module['stdin']) {
            try {
o489.o788('/dev', 'stdin', Module['stdin']);
}catch(e){}
        } else {
            try {
o489.o531('/dev/tty', '/dev/stdin');
}catch(e){}
        }
}catch(e){}
        try {
if (Module['stdout']) {
            try {
o489.o788('/dev', 'stdout', null, Module['stdout']);
}catch(e){}
        } else {
            try {
o489.o531('/dev/tty', '/dev/stdout');
}catch(e){}
        }
}catch(e){}
        try {
if (Module['stderr']) {
            try {
o489.o788('/dev', 'stderr', null, Module['stderr']);
}catch(e){}
        } else {
            try {
o489.o531('/dev/tty1', '/dev/stderr');
}catch(e){}
        }
}catch(e){}

        // open default streams for the stdin, stdout and stderr devices
        var o789 = o489.o41('/dev/stdin', 'r');
        try {
o202[((o672) >> 2)] = o489.o741(o789);
}catch(e){}
        try {
o73(o789.o730 === 0, 'invalid handle for stdin (' + o789.o730 + ')');
}catch(e){}

        var o790 = o489.o41('/dev/stdout', 'w');
        try {
o202[((o673) >> 2)] = o489.o741(o790);
}catch(e){}
        try {
o73(o790.o730 === 1, 'invalid handle for stdout (' + o790.o730 + ')');
}catch(e){}

        var o791 = o489.o41('/dev/stderr', 'w');
        try {
o202[((o674) >> 2)] = o489.o741(o791);
}catch(e){}
        try {
o73(o791.o730 === 2, 'invalid handle for stderr (' + o791.o730 + ')');
}catch(e){}
    },
    o792: function () {
        try {
if (o489.o496) try {
return;
}catch(e){}
}catch(e){}
        try {
o489.o496 = function o496(o685) {
            try {
this.o685 = o685;
}catch(e){}
            try {
for (var key in o352) {
                try {
if (o352[key] === o685) {
                    try {
this.o119 = key;
}catch(e){}
                    try {
break;
}catch(e){}
                }
}catch(e){}
            }
}catch(e){}
            try {
this.o793 = o480[o685];
}catch(e){}
        };
}catch(e){}
        try {
o489.o496.prototype = new Error();
}catch(e){}
        try {
o489.o496.prototype.constructor = o489.o496;
}catch(e){}
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        try {
[o352.o354].forEach(function (o119) {
            try {
o489.o555[o119] = new o489.o496(o119);
}catch(e){}
            try {
o489.o555[o119].o190 = '<generic error, no stack>';
}catch(e){}
        });
}catch(e){}
    },
    o637: function () {
        try {
o489.o792();
}catch(e){}

        try {
o489.o680 = new Array(4096);
}catch(e){}

        try {
o489.o515(o510, {}, '/');
}catch(e){}

        try {
o489.o785();
}catch(e){}
        try {
o489.o786();
}catch(e){}
    },
    o483: function (input, o488, o600) {
        try {
o73(!o489.o483.o682, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
}catch(e){}
        try {
o489.o483.o682 = true;
}catch(e){}

        try {
o489.o792();
}catch(e){}

        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        try {
Module['stdin'] = input || Module['stdin'];
}catch(e){}
        try {
Module['stdout'] = o488 || Module['stdout'];
}catch(e){}
        try {
Module['stderr'] = o600 || Module['stderr'];
}catch(e){}

        try {
o489.o787();
}catch(e){}
    },
    o794: function () {
        try {
o489.o483.o682 = false;
}catch(e){}
        try {
for (var o82 = 0; o82 < o489.o678.length; o82++) {
            var o492 = o489.o678[o82];
            try {
if (!o492) {
                try {
continue;
}catch(e){}
            }
}catch(e){}
            try {
o489.o498(o492);
}catch(e){}
        }
}catch(e){}
    },
    o639: function (o795, o796) {
        var o518 = 0;
        try {
if (o795) try {
o518 |= 292 | 73;
}catch(e){}
}catch(e){}
        try {
if (o796) try {
o518 |= 146;
}catch(e){}
}catch(e){}
        try {
return o518;
}catch(e){}
    },
    o797: function (o249, o798) {
        var o31 = o605.join.apply(null, o249);
        try {
if (o798 && o31[0] == '/') try {
o31 = o31.substr(1);
}catch(e){}
}catch(e){}
        try {
return o31;
}catch(e){}
    },
    o799: function (o764, o800) {
        try {
return o605.resolve(o800, o764);
}catch(e){}
    },
    o801: function (o31) {
        try {
return o605.normalize(o31);
}catch(e){}
    },
    o802: function (o31, o803) {
        var o30 = o489.o804(o31, o803);
        try {
if (o30.o805) {
            try {
return o30.o734;
}catch(e){}
        } else {
            try {
o351(o30.o600);
}catch(e){}
            try {
return null;
}catch(e){}
        }
}catch(e){}
    },
    o804: function (o31, o803) {
        // operate from within the context of the symlink's target
        try {
try {
            var o525 = o489.o617(o31, {
                o696: !o803
            });
            try {
o31 = o525.o31;
}catch(e){}
        } catch (o189) {}
}catch(e){}
        var o30 = {
            o700: false,
            o805: false,
            o600: 0,
            name: null,
            o31: null,
            o734: null,
            o806: false,
            o807: null,
            o808: null
        };
        try {
try {
            var o525 = o489.o617(o31, {
                o517: true
            });
            try {
o30.o806 = true;
}catch(e){}
            try {
o30.o807 = o525.o31;
}catch(e){}
            try {
o30.o808 = o525.o494;
}catch(e){}
            try {
o30.name = o605.o755(o31);
}catch(e){}
            try {
o525 = o489.o617(o31, {
                o696: !o803
            });
}catch(e){}
            try {
o30.o805 = true;
}catch(e){}
            try {
o30.o31 = o525.o31;
}catch(e){}
            try {
o30.o734 = o525.o494;
}catch(e){}
            try {
o30.name = o525.o494.name;
}catch(e){}
            try {
o30.o700 = o525.o31 === '/';
}catch(e){}
        } catch (o189) {
            try {
o30.o600 = o189.o685;
}catch(e){}
        }try {

}catch(e){};
}catch(e){}
        try {
return o30;
}catch(e){}
    },
    o809: function (o517, name, o795, o796) {
        var o31 = o605.o606(typeof o517 === 'string' ? o517 : o489.o699(o517), name);
        var o518 = o489.o639(o795, o796);
        try {
return o489.o620(o31, o518);
}catch(e){}
    },
    o810: function (o517, o31, o795, o796) {
        try {
o517 = typeof o517 === 'string' ? o517 : o489.o699(o517);
}catch(e){}
        var o249 = o31.split('/').reverse();
        try {
while (o249.length) {
            var o811 = o249.pop();
            try {
if (!o811) try {
continue;
}catch(e){}
}catch(e){}
            var o691 = o605.o606(o517, o811);
            try {
try {
                try {
o489.o620(o691);
}catch(e){}
            } catch (o189) {
                // ignore EEXIST
            }
}catch(e){}
            try {
o517 = o691;
}catch(e){}
        }
}catch(e){}
        try {
return o691;
}catch(e){}
    },
    o812: function (o517, name, o813, o795, o796) {
        var o31 = o605.o606(typeof o517 === 'string' ? o517 : o489.o699(o517), name);
        var o518 = o489.o639(o795, o796);
        try {
return o489.create(o31, o518);
}catch(e){}
    },
    o814: function (o517, name, o783, o795, o796, o564) {
        var o31 = name ? o605.o606(typeof o517 === 'string' ? o517 : o489.o699(o517), name) : o517;
        var o518 = o489.o639(o795, o796);
        var o494 = o489.create(o31, o518);
        try {
if (o783) {
            try {
if (typeof o783 === 'string') {
                var o815 = new Array(o783.length);
                try {
for (var o82 = 0, o774 = o783.length; o82 < o774; ++o82) try {
o815[o82] = o783.charCodeAt(o82);
}catch(e){}
}catch(e){}
                try {
o783 = o815;
}catch(e){}
            }
}catch(e){}
            // make sure we can write to the file
            try {
o489.o767(o494, o518 | 146);
}catch(e){}
            var o492 = o489.o41(o494, 'w');
            try {
o489.write(o492, o783, 0, o783.length, 0, o564);
}catch(e){}
            try {
o489.o498(o492);
}catch(e){}
            try {
o489.o767(o494, o518);
}catch(e){}
        }
}catch(e){}
        try {
return o494;
}catch(e){}
    },
    o788: function (o517, name, input, o488) {
        var o31 = o605.o606(typeof o517 === 'string' ? o517 : o489.o699(o517), name);
        var o518 = o489.o639(!!input, !!o488);
        try {
if (!o489.o788.o744) try {
o489.o788.o744 = 64;
}catch(e){}
}catch(e){}
        var o486 = o489.o746(o489.o788.o744++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        try {
o489.o490(o486, {
            o41: function (o492) {
                try {
o492.o497 = false;
}catch(e){}
            },
            o498: function (o492) {
                // flush any pending line data
                try {
if (o488 && o488.buffer && o488.buffer.length) {
                    try {
o488(10);
}catch(e){}
                }
}catch(e){}
            },
            o27: function (o492, buffer, o107, length, o500 /* ignored */ ) {
                var o502 = 0;
                try {
for (var o82 = 0; o82 < length; o82++) {
                    var o503;
                    try {
try {
                        try {
o503 = input();
}catch(e){}
                    } catch (o189) {
                        try {
throw new o489.o496(o352.o357);
}catch(e){}
                    }
}catch(e){}
                    try {
if (o503 === undefined && o502 === 0) {
                        try {
throw new o489.o496(o352.o363);
}catch(e){}
                    }
}catch(e){}
                    try {
if (o503 === null || o503 === undefined) try {
break;
}catch(e){}
}catch(e){}
                    try {
o502++;
}catch(e){}
                    try {
buffer[o107 + o82] = o503;
}catch(e){}
                }
}catch(e){}
                try {
if (o502) {
                    try {
o492.o494.o504 = Date.o4();
}catch(e){}
                }
}catch(e){}
                try {
return o502;
}catch(e){}
            },
            write: function (o492, buffer, o107, length, o500) {
                try {
for (var o82 = 0; o82 < length; o82++) {
                    try {
try {
                        try {
o488(buffer[o107 + o82]);
}catch(e){}
                    } catch (o189) {
                        try {
throw new o489.o496(o352.o357);
}catch(e){}
                    }
}catch(e){}
                }
}catch(e){}
                try {
if (length) {
                    try {
o492.o494.o504 = Date.o4();
}catch(e){}
                }
}catch(e){}
                try {
return o82;
}catch(e){}
            }
        });
}catch(e){}
        try {
return o489.o756(o31, o518, o486);
}catch(e){}
    },
    o816: function (o517, name, target, o795, o796) {
        var o31 = o605.o606(typeof o517 === 'string' ? o517 : o489.o699(o517), name);
        try {
return o489.o531(target, o31);
}catch(e){}
    },
    o817: function (o818) {
        try {
if (o818.o713 || o818.o712 || o818.link || o818.o539) try {
return true;
}catch(e){}
}catch(e){}
        var o819 = true;
        try {
if (typeof o40 !== 'undefined') {
            try {
throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
}catch(e){}
        } else try {
if (Module['read']) {
            // Command-line.
            try {
try {
                // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
                //          read() will try to parse UTF8.
                try {
o818.o539 = o192(Module['read'](o818.o38), true);
}catch(e){}
            } catch (o189) {
                try {
o819 = false;
}catch(e){}
            }
}catch(e){}
        } else {
            try {
throw new Error('Cannot load without read() or XMLHttpRequest.');
}catch(e){}
        }
}catch(e){}
}catch(e){}
        try {
if (!o819) try {
o351(o352.o357);
}catch(e){}
}catch(e){}
        try {
return o819;
}catch(e){}
    },
    o820: function (o517, name, o38, o795, o796) {
        try {
if (typeof o40 !== 'undefined') {
            try {
if (!o20) try {
throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
}catch(e){}
}catch(e){}
            // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
            function o821() {
                try {
this.o822 = false;
}catch(e){}
                try {
this.o823 = [];
}catch(e){} // Loaded chunks. Index is the chunk number
            }
            try {
o821.prototype.get = function o824(o754) {
                try {
if (o754 > this.length - 1 || o754 < 0) {
                    try {
return undefined;
}catch(e){}
                }
}catch(e){}
                var o825 = o754 % this.o826;
                var o827 = Math.floor(o754 / this.o826);
                try {
return this.getter(o827)[o825];
}catch(e){}
            }
}catch(e){}
            try {
o821.prototype.o828 = function o829(getter) {
                try {
this.getter = getter;
}catch(e){}
            }
}catch(e){}
            try {
o821.prototype.o830 = function o831() {
                // Find length
                var o39 = new o40();
                try {
o39.o41('HEAD', o38, false);
}catch(e){}
                try {
o39.o42(null);
}catch(e){}
                try {
if (!(o39.o832 >= 200 && o39.o832 < 300 || o39.o832 === 304)) try {
throw new Error("Couldn't load " + o38 + ". Status: " + o39.o832);
}catch(e){}
}catch(e){}
                var o833 = Number(o39.o834("Content-length"));
                var o835;
                var o836 = (o835 = o39.o834("Accept-Ranges")) && o835 === "bytes";
                var o826 = 1024 * 1024; // Chunk size in bytes

                try {
if (!o836) try {
o826 = o833;
}catch(e){}
}catch(e){}

                // Function to get a range from the remote URL.
                var o837 = (function (from, o838) {
                    try {
if (from > o838) try {
throw new Error("invalid range (" + from + ", " + o838 + ") or no bytes requested!");
}catch(e){}
}catch(e){}
                    try {
if (o838 > o833 - 1) try {
throw new Error("only " + o833 + " bytes available! programmer error!");
}catch(e){}
}catch(e){}

                    // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
                    var o39 = new o40();
                    try {
o39.o41('GET', o38, false);
}catch(e){}
                    try {
if (o833 !== o826) try {
o39.o839("Range", "bytes=" + from + "-" + o838);
}catch(e){}
}catch(e){}

                    // Some hints to the browser that we want binary data.
                    try {
if (typeof Uint8Array != 'undefined') try {
o39.o840 = 'arraybuffer';
}catch(e){}
}catch(e){}
                    try {
if (o39.o841) {
                        try {
o39.o841('text/plain; charset=x-user-defined');
}catch(e){}
                    }
}catch(e){}

                    try {
o39.o42(null);
}catch(e){}
                    try {
if (!(o39.o832 >= 200 && o39.o832 < 300 || o39.o832 === 304)) try {
throw new Error("Couldn't load " + o38 + ". Status: " + o39.o832);
}catch(e){}
}catch(e){}
                    try {
if (o39.o842 !== undefined) {
                        try {
return new Uint8Array(o39.o842 || []);
}catch(e){}
                    } else {
                        try {
return o192(o39.o43 || '', true);
}catch(e){}
                    }
}catch(e){}
                });
                var o843 = this;
                try {
o843.o828(function (o827) {
                    var o476 = o827 * o826;
                    var o260 = (o827 + 1) * o826 - 1; // including this byte
                    try {
o260 = Math.o87(o260, o833 - 1);
}catch(e){} // if datalength-1 is selected, this is the last block
                    try {
if (typeof (o843.o823[o827]) === "undefined") {
                        try {
o843.o823[o827] = o837(o476, o260);
}catch(e){}
                    }
}catch(e){}
                    try {
if (typeof (o843.o823[o827]) === "undefined") try {
throw new Error("doXHR failed!");
}catch(e){}
}catch(e){}
                    try {
return o843.o823[o827];
}catch(e){}
                });
}catch(e){}

                try {
this.o844 = o833;
}catch(e){}
                try {
this.o845 = o826;
}catch(e){}
                try {
this.o822 = true;
}catch(e){}
            }
}catch(e){}

            var o843 = new o821();
            try {
Object.defineProperty(o843, "length", {
                get: function () {
                    try {
if (!this.o822) {
                        try {
this.o830();
}catch(e){}
                    }
}catch(e){}
                    try {
return this.o844;
}catch(e){}
                }
            });
}catch(e){}
            try {
Object.defineProperty(o843, "chunkSize", {
                get: function () {
                    try {
if (!this.o822) {
                        try {
this.o830();
}catch(e){}
                    }
}catch(e){}
                    try {
return this.o845;
}catch(e){}
                }
            });
}catch(e){}

            var o813 = {
                o713: false,
                o539: o843
            };
        } else {
            var o813 = {
                o713: false,
                o38: o38
            };
        }
}catch(e){}

        var o494 = o489.o812(o517, name, o813, o795, o796);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        try {
if (o813.o539) {
            try {
o494.o539 = o813.o539;
}catch(e){}
        } else try {
if (o813.o38) {
            try {
o494.o539 = null;
}catch(e){}
            try {
o494.o38 = o813.o38;
}catch(e){}
        }
}catch(e){}
}catch(e){}
        // override each stream op with one that tries to force load the lazy file first
        var o491 = {};
        var keys = Object.keys(o494.o491);
        try {
keys.forEach(function (key) {
            var o846 = o494.o491[key];
            try {
o491[key] = function o847() {
                try {
if (!o489.o817(o494)) {
                    try {
throw new o489.o496(o352.o357);
}catch(e){}
                }
}catch(e){}
                try {
return o846.apply(null, arguments);
}catch(e){}
            };
}catch(e){}
        });
}catch(e){}
        // use a custom read function
        try {
o491.o27 = function o848(o492, buffer, o107, length, o563) {
            try {
if (!o489.o817(o494)) {
                try {
throw new o489.o496(o352.o357);
}catch(e){}
            }
}catch(e){}
            var o539 = o492.o494.o539;
            try {
if (o563 >= o539.length)
                try {
return 0;
}catch(e){}
}catch(e){}
            var o85 = Math.o87(o539.length - o563, length);
            try {
o73(o85 >= 0);
}catch(e){}
            try {
if (o539.slice) { // normal array
                try {
for (var o82 = 0; o82 < o85; o82++) {
                    try {
buffer[o107 + o82] = o539[o563 + o82];
}catch(e){}
                }
}catch(e){}
            } else {
                try {
for (var o82 = 0; o82 < o85; o82++) { // LazyUint8Array from sync binary XHR
                    try {
buffer[o107 + o82] = o539.get(o563 + o82);
}catch(e){}
                }
}catch(e){}
            }
}catch(e){}
            try {
return o85;
}catch(e){}
        };
}catch(e){}
        try {
o494.o491 = o491;
}catch(e){}
        try {
return o494;
}catch(e){}
    },
    o849: function (o517, name, o38, o795, o796, o850, o599, o851, o564) {
        try {
o852.o483();
}catch(e){}
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var o853 = name ? o605.resolve(o605.o606(o517, name)) : o517;

        function o854(o855) {
            function o856(o855) {
                try {
if (!o851) {
                    try {
o489.o814(o517, name, o855, o795, o796, o564);
}catch(e){}
                }
}catch(e){}
                try {
if (o850) try {
o850();
}catch(e){}
}catch(e){}
                try {
o334('cp ' + o853);
}catch(e){}
            }
            var o857 = false;
            try {
Module['preloadPlugins'].forEach(function (o858) {
                try {
if (o857) try {
return;
}catch(e){}
}catch(e){}
                try {
if (o858['canHandle'](o853)) {
                    try {
o858['handle'](o855, o853, o856, function () {
                        try {
if (o599) try {
o599();
}catch(e){}
}catch(e){}
                        try {
o334('cp ' + o853);
}catch(e){}
                    });
}catch(e){}
                    try {
o857 = true;
}catch(e){}
                }
}catch(e){}
            });
}catch(e){}
            try {
if (!o857) try {
o856(o855);
}catch(e){}
}catch(e){}
        }
        try {
o332('cp ' + o853);
}catch(e){}
        try {
if (typeof o38 == 'string') {
            try {
o852.o859(o38, function (o855) {
                try {
o854(o855);
}catch(e){}
            }, o599);
}catch(e){}
        } else {
            try {
o854(o38);
}catch(e){}
        }
}catch(e){}
    },
    o571: function () {
        try {
return o19.o571 || o19.o572 || o19.o573 || o19.o574;
}catch(e){}
    },
    o860: function () {
        try {
return 'EM_FS_' + o19.o861.o862;
}catch(e){}
    },
    o575: 20,
    o576: "FILE_DATA",
    o863: function (o864, o850, o599) {
        try {
o850 = o850 || function () {};
}catch(e){}
        try {
o599 = o599 || function () {};
}catch(e){}
        var o571 = o489.o571();
        try {
try {
            var o865 = o571.o41(o489.o860(), o489.o575);
        } catch (o189) {
            try {
return o599(o189);
}catch(e){}
        }
}catch(e){}
        try {
o865.o589 = function o866() {
            try {
o44.o45('creating db');
}catch(e){}
            var o587 = o865.o503;
            try {
o587.o595(o489.o576);
}catch(e){}
        };
}catch(e){}
        try {
o865.o598 = function o867() {
            var o587 = o865.o503;
            var o590 = o587.o590([o489.o576], 'readwrite');
            var o868 = o590.o594(o489.o576);
            var o869 = 0,
                o870 = 0,
                o630 = o864.length;

            function o856() {
                try {
if (o870 == 0) try {
o850();
}catch(e){}
                else try {
o599();
}catch(e){}
}catch(e){}
            }
            try {
o864.forEach(function (o31) {
                var o871 = o868.o627(o489.o804(o31).o734.o539, o31);
                try {
o871.o598 = function o872() {
                    try {
o869++;
}catch(e){}
                    try {
if (o869 + o870 == o630) try {
o856()
}catch(e){}
}catch(e){}
                };
}catch(e){}
                try {
o871.o599 = function o873() {
                    try {
o870++;
}catch(e){}
                    try {
if (o869 + o870 == o630) try {
o856()
}catch(e){}
}catch(e){}
                };
}catch(e){}
            });
}catch(e){}
            try {
o590.o599 = o599;
}catch(e){}
        };
}catch(e){}
        try {
o865.o599 = o599;
}catch(e){}
    },
    o874: function (o864, o850, o599) {
        try {
o850 = o850 || function () {};
}catch(e){}
        try {
o599 = o599 || function () {};
}catch(e){}
        var o571 = o489.o571();
        try {
try {
            var o865 = o571.o41(o489.o860(), o489.o575);
        } catch (o189) {
            try {
return o599(o189);
}catch(e){}
        }
}catch(e){}
        try {
o865.o589 = o599;
}catch(e){} // no database to load from
        try {
o865.o598 = function o867() {
            var o587 = o865.o503;
            try {
try {
                var o590 = o587.o590([o489.o576], 'readonly');
            } catch (o189) {
                try {
o599(o189);
}catch(e){}
                try {
return;
}catch(e){}
            }
}catch(e){}
            var o868 = o590.o594(o489.o576);
            var o869 = 0,
                o870 = 0,
                o630 = o864.length;

            function o856() {
                try {
if (o870 == 0) try {
o850();
}catch(e){}
                else try {
o599();
}catch(e){}
}catch(e){}
            }
            try {
o864.forEach(function (o31) {
                var o875 = o868.get(o31);
                try {
o875.o598 = function o876() {
                    try {
if (o489.o804(o31).o805) {
                        try {
o489.o528(o31);
}catch(e){}
                    }
}catch(e){}
                    try {
o489.o814(o605.o698(o31), o605.o755(o31), o875.o503, true, true, true);
}catch(e){}
                    try {
o869++;
}catch(e){}
                    try {
if (o869 + o870 == o630) try {
o856();
}catch(e){}
}catch(e){}
                };
}catch(e){}
                try {
o875.o599 = function o877() {
                    try {
o870++;
}catch(e){}
                    try {
if (o869 + o870 == o630) try {
o856()
}catch(e){}
}catch(e){}
                };
}catch(e){}
            });
}catch(e){}
            try {
o590.o599 = o599;
}catch(e){}
        };
}catch(e){}
        try {
o865.o599 = o599;
}catch(e){}
    }
}; o1 < 100; o783++) {
        let o2 = Promise.resolve(1) - 2;
        try {
switch (o1) {
            case 2:
            case 'i8':
            try {
return 1;
}catch(e){}
            case 6:
            case 8:
            case 10:
            case 12:
            case 14:
            case 16:
            case 18:
            case 20:
            case 22:
            case 24:
            case 26:
            case 28:
            case 30:
            case 32:
            case 34:
            case 36:
            case 38:
                try {
break;
}catch(e){}
        }
}catch(e){}

        try {
if (o1 == 90) {
            try {
o15[5] = 'x';
}catch(e){}
        }
}catch(e){}
    }
}catch(e){}
}

function o3() {
    try try { try {
while (o252 > o539.length) try {
o539.push(0);
}catch(e){}
}catch(e){} } catch(e) {}catch(e){}
}

try {
o421();
}catch(e){}