var o421.o148 << 1 = [[{}], [1.1]];

function o1() try { try {
o57.o58(o25, { o59: o0.o60[0] != "summary" });
}catch(e){} } catch(e) {}try { try {
write(o5);
}catch(e){} } catch(e) {}

var o421 = Promise.all(o26);

var o5 = 2;
function o6() {
  try {
try {} catch(o320) {}
}catch(o421){}  // Prevent Crankshaft from inlining this.
  try {
if (o292 == "Array.fill() should throw when applied on frozen array") {
    try {
this.o546 = o4;
}catch(e){}
  }
}catch(e){}
}

var o8 = new Promise(function(resolve,reject) {
                try {
reject('success');
}catch(e){}
                try {
resolve('failure');
}catch(e){}
                try {
reject('failure');
}catch(e){}
            });
function o9(){
  try {
o6();
}catch(e){}
  try {
o4[0] = 1;
}catch(e){}
  try {
o1();
}catch(e){}
  try {
o4[1] = o8;
}catch(e){}
}

// %OptimizeFunctionOnNextCall(f);
try {
for(var o2 = 0; o2 < 0x10000; o2++) {
  try {
o9();
}catch(e){}
}
}catch(e){}
try {
o5 = 1;
}catch(e){}
try {
o9();
}catch(e){}
try {
o10(o8, o4[1]);
}catch(e){}