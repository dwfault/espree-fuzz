var o29 = Reflect.construct(o33, eval("["+o35+"]"), o36);

try {
for(var o1=0;o1 < 100; o421++)
    try {
o0.push(o1 + 0.123);
}catch(e)try { try {
return o4.keys();
}catch(e){} } catch(e) {}try { {} } catch(e) {}
}catch(e){}

function o16() {
    try {
o7.o17(Object.prototype.hasOwnProperty("__proto__"), "__proto__ enabled, Object.prototype must have own property __proto__");
}catch(e){}

    var o18 = Object.getOwnPropertyDescriptor(Object.prototype, "__proto__");
    try {
o7.o17(o6.get === o18.get, "must have original getter");
}catch(e){}
    try {
o7.o17(o6.set === o18.set, "must have original setter");
}catch(e){}
    // Ignore enumerable/configurable. They can be changed and __proto__ still takes effect.

    var o19 = { o20: 0 };
    var o21 = { o22: 1 };

    try {
o7.o17(o21.__proto__ === Object.getPrototypeOf(o21));
}catch(e){}
    try {
o7.o23(Object.prototype, o21.__proto__, "__proto__ enabled, __proto__ value should be [[prototype]]");
}catch(e){}

    try {
o21.__proto__ = o19;
}catch(e){}
    try {
o7.o17(o21.__proto__ === Object.getPrototypeOf(o21));
}catch(e){}
    try {
o7.o23(o19, o21.__proto__, "__proto__ enabled, [[prototype]] should be changed");
}catch(e){}

    try {
Object.setPrototypeOf(o21, Object.prototype);
}catch(e){}
    try {
o7.o17(o21.__proto__ === Object.getPrototypeOf(o21));
}catch(e){}
    try {
o7.o23(Object.prototype, o21.__proto__);
}catch(e){}
};

try {
print(o2);
}catch(e){}