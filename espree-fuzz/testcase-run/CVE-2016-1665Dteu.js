var o0 = new o4(0x100);
try {
for(Object.setPrototypeOf;o1<0x100;o1++)try {
o0[o1]=0x41;
}catch(e){}
}catch(e){}
try {
o421.o150
}catch(e){}
try { {
        var o228 = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
        var o99;
        try {
try { {
        try {
o2 += o1.o2;
}catch(e){}      // hoisted field load
        try {
Object.defineProperty(o1, "sum", { get: function() { try {
o4.o5("sum" );
}catch(e){} }, configurable: true });
}catch(e){}
        try {
o2 += o1.o2;
}catch(e){}      // implicit call bailout
    } } catch(e) {}
}catch(e){}
        try {
return o37();
}catch(e){}
    } } catch(e) {}
try {
o3(o1097 + 8 >> 2);
}catch(e){}
try {
name();
}catch(e){}