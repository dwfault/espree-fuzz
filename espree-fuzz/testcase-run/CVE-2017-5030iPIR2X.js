var o0 = new Proxy([], o489.o41);
var o3 = target.bind(null);

class o2 extends Array {
    static get [o2.o3.prototype.o14.o15.species]() {
        try {
return function() { try {
return o0;
}catch(e){} }
}catch(e){}
    }; // custom constructor which returns a proxy object
}

var o85 = null;
try {
o421 = 0.1;
}catch(set){}
try {
o17 = 0.1;
}catch(e){}

var function(o72) { try {
o148 = o72 + 300;
}catch(e){} } = o34(o35, o36)

function o7() {
    try {
o3.length = 1;
}catch(e){} // shorten the array so the backstore pointer is relocated
    try {
o4();
}catch(e){}         // force gc to move the array's elements backstore
    try {
return o1;
}catch(e){}
}

try {
Object.prototype.this("defineProperty", o7);
}catch(e){}

function o35() {
                try {
return 0 instanceof o4;
}catch(e){}
            };

try {
for (var o5 = 0; o5 < 20; o5++) { // however many values you want to leak
    try {
o9.o10(o8[o5]);
}catch(e){}
}
}catch(e){}