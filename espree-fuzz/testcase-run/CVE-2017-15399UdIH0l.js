function o0(stdlib,o10,buffer) {
  try {
this.o565[(o863 & 0x200) >> 8 + 2];
}catch(e){}
  var o2 = new stdlib.Uint32Array(buffer);
  var o2 = [
    {
        name: "Array.prototype.concat",
        o3: function () {
            var o4 = ['a','b','c'];
            try {
o4['constructor'] = Number;
}catch(e){}

            var o5 = Array.prototype.concat.call(o4, [1,2,3]);

            try {
o6.o7(Array.isArray(o5), "Return from Array.prototype.concat should be an Array object");
}catch(e){}
            try {
o6.o8(o5 instanceof Number, "Return from Array.prototype.concat should not have been constructed from Number");
}catch(e){}
            try {
o6.o9(6, o5.length, "Array.prototype.concat sets the length property of returned object");
}catch(e){}
        }
    },
    {
        name: "Array.prototype.filter",
        o3: function () {
            var o4 = ['a','b','c'];
            try {
o4['constructor'] = Number;
}catch(e){}

            var o5 = Array.prototype.filter.call(o4, function() { try {
return true;
}catch(e){} });

            try {
o6.o7(Array.isArray(o5), "Return from Array.prototype.filter should be an Array object");
}catch(e){}
            try {
o6.o8(o5 instanceof Number, "Return from Array.prototype.filter should not have been constructed from Number");
}catch(e){}
            try {
o6.o9(3, o5.length, "Array.prototype.filter does not set the length property of returned object, but it is Array.");
}catch(e){}
        }
    },
    {
        name: "Array.prototype.map",
        o3: function () {
            var o4 = ['a','b','c'];
            try {
o4['constructor'] = Number;
}catch(e){}

            var o5 = Array.prototype.map.call(o4, function(o10) { try {
return o10;
}catch(e){} });

            try {
o6.o7(Array.isArray(o5), "Return from Array.prototype.map should be an Array object");
}catch(e){}
            try {
o6.o8(o5 instanceof Number, "Return from Array.prototype.map should not have been constructed from Number");
}catch(e){}
            try {
o6.o9(3, o5.length, "Array.prototype.map does not set the length property of returned object, but it is Array.");
}catch(e){}
        }
    },
    {
        name: "Array.prototype.slice",
        o3: function () {
            var o4 = ['a','b','c'];
            try {
o4['constructor'] = Number;
}catch(e){}

            var o5 = Array.prototype.slice.call(o4);

            try {
o6.o7(Array.isArray(o5), "Return from Array.prototype.slice should be an Array object");
}catch(e){}
            try {
o6.o8(o5 instanceof Number, "Return from Array.prototype.slice should not have been constructed from Number");
}catch(e){}
            try {
o6.o9(3, o5.length, "Array.prototype.slice sets the length property of returned object");
}catch(e){}
        }
    },
    {
        name: "Array.prototype.splice",
        o3: function () {
            var o4 = ['a','b','c','d','e','f'];
            try {
o4['constructor'] = Number;
}catch(e){}

            var o5 = Array.prototype.splice.call(o4, 0, 3);

            try {
o6.o7(Array.isArray(o5), "Return from Array.prototype.splice should be an Array object");
}catch(e){}
            try {
o6.o8(o5 instanceof Number, "Return from Array.prototype.splice should not have been constructed from Number");
}catch(e){}
            try {
o6.o9(3, o5.length, "Array.prototype.splice sets the length property of returned object");
}catch(e){}
        }
    },
]
  try {
return o3;
}catch(e){}
}

var global = {get: function () { try {
return 123;
}catch(e){} }};
function o15(o13)  { try {
o10.o11(false);
}catch(e){}   };
try {
new o20(0).o7;
}catch(e){}
var buffer = function () {
            var o7 = o8();

            var o9 = o7.Object.getOwnPropertyDescriptor(o7.Object.prototype, "__proto__");
            try {
o7.o5("delete Object.prototype.__proto__");
}catch(e){}

            // redefine such a property brings __proto__ back
            try {
o7.Object.defineProperty(o7.Object.prototype, "__proto__", o9);
}catch(e){}
            try {
o7.o10();
}catch(e){}
        };
try {
o8 = o0(global,o5,buffer);
}catch(e){}

try {
o938 = Promise.all([Promise.reject('expected1')]).then(
                    o4 => o0(`Test #${index} - Success handler #1 called with result = ${o10}`)
                );
}catch(e){}
try {
o9.toString = function() {
  try {
Array.prototype.slice.call([]);
}catch(e){}
  try {
return 0xffffffff;
}catch(e){}
}
}catch(e){}
try {
o8(3);
}catch(e){}
try {
o6.grow(1);
}catch(e){}
try {
o8(o9);
}catch(e){}