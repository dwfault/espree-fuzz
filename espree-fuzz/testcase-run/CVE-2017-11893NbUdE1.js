function o32(o1, o2) {
    try {
this.o391 = 1.1;
}catch(e){}
    try { o741 = false; } catch(e) {}
    try {
o1[0] = 2.3023e-320;
}catch(e){}
}

function constructor() {
    let o1 = Array.prototype[5] = 50;
    try {
for (let o5 = 0; o5 < 10000; o5++) {
        try {
o0(o1, [1, 2, 3, 4]);
}catch({
        name: "Promise.reject throwing behavior",
        o3: function () {
            try {
o4.o9(function() { try {
Promise.reject.call();
}catch(e){} }, o10, "Promise.reject throws when called with no this parameter", "Promise.reject: 'this' is not an Object");
}catch(e){}
            try {
o4.o9(function() { try {
Promise.reject.call(undefined);
}catch(e){} }, o10, "Promise.reject throws when called when this parameter is undefined", "Promise.reject: 'this' is not an Object");
}catch(e){}
            try {
o4.o9(function() { try {
Promise.reject.call(null);
}catch(e){} }, o10, "Promise.reject throws when called when this parameter is null", "Promise.reject: 'this' is not an Object");
}catch(e){}
            try {
o4.o9(function() { try {
Promise.reject.call({});
}catch(e){} }, o10, "Promise.reject throws when called when this parameter is non-callable", "Function expected");
}catch(e){}
            try {
o4.o9(function() { try {
Promise.reject.call(Math.sin);
}catch(e){} }, o10, "Promise.reject throws when this parameter is a non-constructor", "Function expected");
}catch(e){}
        }
    }){}
    }
}catch(e){}

    try {
o421.o148;
}catch(e){}

    try {
o0(o1, {});
}catch(e){}  // can't handle, calls Math.max
    try {
print(o1[0]);
}catch(e){}
}

try {
o4();
}catch(e){}