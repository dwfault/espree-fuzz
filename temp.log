======================================================
Node {
  type: 'Program',
  start: 0,
  end: 350,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 286,
       end: 324,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 325,
       end: 350,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
350
[ Node {
    type: 'VariableDeclaration',
    start: 286,
    end: 324,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 325,
    end: 350,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 325,
       end: 349,
       operator: '=',
       left: [Node],
       right: [Node] } } ]
Node {
  type: 'VariableDeclaration',
  start: 286,
  end: 324,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 290,
       end: 323,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
286
324
[ Node {
    type: 'VariableDeclarator',
    start: 290,
    end: 323,
    id: Node { type: 'Identifier', start: 290, end: 291, name: 'o' },
    init: 
     Node {
       type: 'ObjectExpression',
       start: 294,
       end: 323,
       properties: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 290,
  end: 323,
  id: Node { type: 'Identifier', start: 290, end: 291, name: 'o' },
  init: 
   Node {
     type: 'ObjectExpression',
     start: 294,
     end: 323,
     properties: [ [Node], [Node] ] } }
VariableDeclarator
290
323
Node { type: 'Identifier', start: 290, end: 291, name: 'o' }
Identifier
290
291
o
Node {
  type: 'ObjectExpression',
  start: 294,
  end: 323,
  properties: 
   [ Node {
       type: 'Property',
       start: 300,
       end: 305,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 311,
       end: 321,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
294
323
[ Node {
    type: 'Property',
    start: 300,
    end: 305,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 300, end: 301, name: 'a' },
    value: Node { type: 'ObjectExpression', start: 303, end: 305, properties: [] },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 311,
    end: 321,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 311, end: 312, name: 'b' },
    value: 
     Node {
       type: 'ObjectExpression',
       start: 314,
       end: 321,
       properties: [Array] },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 300,
  end: 305,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 300, end: 301, name: 'a' },
  value: Node { type: 'ObjectExpression', start: 303, end: 305, properties: [] },
  kind: 'init' }
Property
300
305
false
false
false
Node { type: 'Identifier', start: 300, end: 301, name: 'a' }
Identifier
300
301
a
Node { type: 'ObjectExpression', start: 303, end: 305, properties: [] }
ObjectExpression
303
305
[]
init
Node {
  type: 'Property',
  start: 311,
  end: 321,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 311, end: 312, name: 'b' },
  value: 
   Node {
     type: 'ObjectExpression',
     start: 314,
     end: 321,
     properties: [ [Node] ] },
  kind: 'init' }
Property
311
321
false
false
false
Node { type: 'Identifier', start: 311, end: 312, name: 'b' }
Identifier
311
312
b
Node {
  type: 'ObjectExpression',
  start: 314,
  end: 321,
  properties: 
   [ Node {
       type: 'Property',
       start: 315,
       end: 320,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
314
321
[ Node {
    type: 'Property',
    start: 315,
    end: 320,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 315, end: 317, name: 'ba' },
    value: Node { type: 'ArrayExpression', start: 318, end: 320, elements: [] },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 315,
  end: 320,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 315, end: 317, name: 'ba' },
  value: Node { type: 'ArrayExpression', start: 318, end: 320, elements: [] },
  kind: 'init' }
Property
315
320
false
false
false
Node { type: 'Identifier', start: 315, end: 317, name: 'ba' }
Identifier
315
317
ba
Node { type: 'ArrayExpression', start: 318, end: 320, elements: [] }
ArrayExpression
318
320
[]
init
init
var
Node {
  type: 'ExpressionStatement',
  start: 325,
  end: 350,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 325,
     end: 349,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 325,
        end: 328,
        object: [Node],
        property: [Node],
        computed: false },
     right: 
      Node {
        type: 'CallExpression',
        start: 331,
        end: 349,
        callee: [Node],
        arguments: [Array] } } }
ExpressionStatement
325
350
Node {
  type: 'AssignmentExpression',
  start: 325,
  end: 349,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 325,
     end: 328,
     object: Node { type: 'Identifier', start: 325, end: 326, name: 'o' },
     property: Node { type: 'Identifier', start: 327, end: 328, name: 'b' },
     computed: false },
  right: 
   Node {
     type: 'CallExpression',
     start: 331,
     end: 349,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 331,
        end: 346,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [ [Node] ] } }
AssignmentExpression
325
349
=
Node {
  type: 'MemberExpression',
  start: 325,
  end: 328,
  object: Node { type: 'Identifier', start: 325, end: 326, name: 'o' },
  property: Node { type: 'Identifier', start: 327, end: 328, name: 'b' },
  computed: false }
MemberExpression
325
328
Node { type: 'Identifier', start: 325, end: 326, name: 'o' }
Identifier
325
326
o
Node { type: 'Identifier', start: 327, end: 328, name: 'b' }
Identifier
327
328
b
false
Node {
  type: 'CallExpression',
  start: 331,
  end: 349,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 331,
     end: 346,
     object: Node { type: 'Identifier', start: 331, end: 337, name: 'Object' },
     property: Node { type: 'Identifier', start: 338, end: 346, name: 'toString' },
     computed: false },
  arguments: 
   [ Node { type: 'Identifier', start: 347, end: 348, name: 'o' } ] }
CallExpression
331
349
Node {
  type: 'MemberExpression',
  start: 331,
  end: 346,
  object: Node { type: 'Identifier', start: 331, end: 337, name: 'Object' },
  property: Node { type: 'Identifier', start: 338, end: 346, name: 'toString' },
  computed: false }
MemberExpression
331
346
Node { type: 'Identifier', start: 331, end: 337, name: 'Object' }
Identifier
331
337
Object
Node { type: 'Identifier', start: 338, end: 346, name: 'toString' }
Identifier
338
346
toString
false
[ Node { type: 'Identifier', start: 347, end: 348, name: 'o' } ]
Node { type: 'Identifier', start: 347, end: 348, name: 'o' }
Identifier
347
348
o
script
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 255,
  body: 
   [ Node {
       type: 'ClassDeclaration',
       start: 0,
       end: 29,
       id: [Node],
       superClass: [Node],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 31,
       end: 45,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 47,
       end: 254,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
255
[ Node {
    type: 'ClassDeclaration',
    start: 0,
    end: 29,
    id: Node { type: 'Identifier', start: 6, end: 9, name: 'Foo' },
    superClass: Node { type: 'Identifier', start: 18, end: 25, name: 'Promise' },
    body: Node { type: 'ClassBody', start: 26, end: 29, body: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 31,
    end: 45,
    expression: 
     Node {
       type: 'CallExpression',
       start: 31,
       end: 44,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 47,
    end: 254,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 52,
       end: 61,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 63,
       end: 72,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 74,
       end: 77,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 79, end: 254, body: [Array] } } ]
Node {
  type: 'ClassDeclaration',
  start: 0,
  end: 29,
  id: Node { type: 'Identifier', start: 6, end: 9, name: 'Foo' },
  superClass: Node { type: 'Identifier', start: 18, end: 25, name: 'Promise' },
  body: Node { type: 'ClassBody', start: 26, end: 29, body: [] } }
ClassDeclaration
0
29
Node { type: 'Identifier', start: 6, end: 9, name: 'Foo' }
Identifier
6
9
Foo
Node { type: 'Identifier', start: 18, end: 25, name: 'Promise' }
Identifier
18
25
Promise
Node { type: 'ClassBody', start: 26, end: 29, body: [] }
ClassBody
26
29
[]
Node {
  type: 'ExpressionStatement',
  start: 31,
  end: 45,
  expression: 
   Node {
     type: 'CallExpression',
     start: 31,
     end: 44,
     callee: Node { type: 'Identifier', start: 31, end: 39, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
31
45
Node {
  type: 'CallExpression',
  start: 31,
  end: 44,
  callee: Node { type: 'Identifier', start: 31, end: 39, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 40, end: 43, name: 'Foo' } ] }
CallExpression
31
44
Node { type: 'Identifier', start: 31, end: 39, name: 'noInline' }
Identifier
31
39
noInline
[ Node { type: 'Identifier', start: 40, end: 43, name: 'Foo' } ]
Node { type: 'Identifier', start: 40, end: 43, name: 'Foo' }
Identifier
40
43
Foo
Node {
  type: 'ForStatement',
  start: 47,
  end: 254,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 52,
     end: 61,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 63,
     end: 72,
     left: Node { type: 'Identifier', start: 63, end: 64, name: 'i' },
     operator: '<',
     right: Node { type: 'Literal', start: 67, end: 72, value: 10000, raw: '10000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 74,
     end: 77,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 76, end: 77, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 79,
     end: 254,
     body: [ [Node], [Node], [Node] ] } }
ForStatement
47
254
Node {
  type: 'VariableDeclaration',
  start: 52,
  end: 61,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 56,
       end: 61,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
52
61
[ Node {
    type: 'VariableDeclarator',
    start: 56,
    end: 61,
    id: Node { type: 'Identifier', start: 56, end: 57, name: 'i' },
    init: Node { type: 'Literal', start: 60, end: 61, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 56,
  end: 61,
  id: Node { type: 'Identifier', start: 56, end: 57, name: 'i' },
  init: Node { type: 'Literal', start: 60, end: 61, value: 0, raw: '0' } }
VariableDeclarator
56
61
Node { type: 'Identifier', start: 56, end: 57, name: 'i' }
Identifier
56
57
i
Node { type: 'Literal', start: 60, end: 61, value: 0, raw: '0' }
Literal
60
61
0
0
var
Node {
  type: 'BinaryExpression',
  start: 63,
  end: 72,
  left: Node { type: 'Identifier', start: 63, end: 64, name: 'i' },
  operator: '<',
  right: Node { type: 'Literal', start: 67, end: 72, value: 10000, raw: '10000' } }
BinaryExpression
63
72
Node { type: 'Identifier', start: 63, end: 64, name: 'i' }
Identifier
63
64
i
<
Node { type: 'Literal', start: 67, end: 72, value: 10000, raw: '10000' }
Literal
67
72
10000
10000
Node {
  type: 'UpdateExpression',
  start: 74,
  end: 77,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 76, end: 77, name: 'i' } }
UpdateExpression
74
77
++
true
Node { type: 'Identifier', start: 76, end: 77, name: 'i' }
Identifier
76
77
i
Node {
  type: 'BlockStatement',
  start: 79,
  end: 254,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 85,
       end: 107,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'TryStatement',
       start: 112,
       end: 182,
       block: [Node],
       handler: [Node],
       finalizer: null },
     Node {
       type: 'IfStatement',
       start: 187,
       end: 252,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
79
254
[ Node {
    type: 'VariableDeclaration',
    start: 85,
    end: 107,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'TryStatement',
    start: 112,
    end: 182,
    block: Node { type: 'BlockStatement', start: 116, end: 164, body: [Array] },
    handler: 
     Node {
       type: 'CatchClause',
       start: 165,
       end: 182,
       param: [Node],
       body: [Node] },
    finalizer: null },
  Node {
    type: 'IfStatement',
    start: 187,
    end: 252,
    test: Node { type: 'Identifier', start: 191, end: 200, name: 'completed' },
    consequent: Node { type: 'ThrowStatement', start: 210, end: 252, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 85,
  end: 107,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 89,
       end: 106,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
85
107
[ Node {
    type: 'VariableDeclarator',
    start: 89,
    end: 106,
    id: Node { type: 'Identifier', start: 89, end: 98, name: 'completed' },
    init: 
     Node {
       type: 'Literal',
       start: 101,
       end: 106,
       value: false,
       raw: 'false' } } ]
Node {
  type: 'VariableDeclarator',
  start: 89,
  end: 106,
  id: Node { type: 'Identifier', start: 89, end: 98, name: 'completed' },
  init: 
   Node {
     type: 'Literal',
     start: 101,
     end: 106,
     value: false,
     raw: 'false' } }
VariableDeclarator
89
106
Node { type: 'Identifier', start: 89, end: 98, name: 'completed' }
Identifier
89
98
completed
Node {
  type: 'Literal',
  start: 101,
  end: 106,
  value: false,
  raw: 'false' }
Literal
101
106
false
false
var
Node {
  type: 'TryStatement',
  start: 112,
  end: 182,
  block: 
   Node {
     type: 'BlockStatement',
     start: 116,
     end: 164,
     body: [ [Node], [Node] ] },
  handler: 
   Node {
     type: 'CatchClause',
     start: 165,
     end: 182,
     param: Node { type: 'Identifier', start: 172, end: 173, name: 'e' },
     body: Node { type: 'BlockStatement', start: 175, end: 182, body: [] } },
  finalizer: null }
TryStatement
112
182
Node {
  type: 'BlockStatement',
  start: 116,
  end: 164,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 126,
       end: 132,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 141,
       end: 158,
       expression: [Node] } ] }
BlockStatement
116
164
[ Node {
    type: 'ExpressionStatement',
    start: 126,
    end: 132,
    expression: 
     Node {
       type: 'CallExpression',
       start: 126,
       end: 131,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 141,
    end: 158,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 141,
       end: 157,
       operator: '=',
       left: [Node],
       right: [Node] } } ]
Node {
  type: 'ExpressionStatement',
  start: 126,
  end: 132,
  expression: 
   Node {
     type: 'CallExpression',
     start: 126,
     end: 131,
     callee: Node { type: 'Identifier', start: 126, end: 129, name: 'Foo' },
     arguments: [] } }
ExpressionStatement
126
132
Node {
  type: 'CallExpression',
  start: 126,
  end: 131,
  callee: Node { type: 'Identifier', start: 126, end: 129, name: 'Foo' },
  arguments: [] }
CallExpression
126
131
Node { type: 'Identifier', start: 126, end: 129, name: 'Foo' }
Identifier
126
129
Foo
[]
Node {
  type: 'ExpressionStatement',
  start: 141,
  end: 158,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 141,
     end: 157,
     operator: '=',
     left: Node { type: 'Identifier', start: 141, end: 150, name: 'completed' },
     right: Node { type: 'Literal', start: 153, end: 157, value: true, raw: 'true' } } }
ExpressionStatement
141
158
Node {
  type: 'AssignmentExpression',
  start: 141,
  end: 157,
  operator: '=',
  left: Node { type: 'Identifier', start: 141, end: 150, name: 'completed' },
  right: Node { type: 'Literal', start: 153, end: 157, value: true, raw: 'true' } }
AssignmentExpression
141
157
=
Node { type: 'Identifier', start: 141, end: 150, name: 'completed' }
Identifier
141
150
completed
Node { type: 'Literal', start: 153, end: 157, value: true, raw: 'true' }
Literal
153
157
true
true
Node {
  type: 'CatchClause',
  start: 165,
  end: 182,
  param: Node { type: 'Identifier', start: 172, end: 173, name: 'e' },
  body: Node { type: 'BlockStatement', start: 175, end: 182, body: [] } }
CatchClause
165
182
Node { type: 'Identifier', start: 172, end: 173, name: 'e' }
Identifier
172
173
e
Node { type: 'BlockStatement', start: 175, end: 182, body: [] }
BlockStatement
175
182
[]
null
[+] Exception: dfg-call-class-constructor.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 379,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 0,
       end: 172,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 174,
       end: 188,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 190,
       end: 209,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 210,
       end: 224,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 225,
       end: 241,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ForStatement',
       start: 242,
       end: 305,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'IfStatement',
       start: 307,
       end: 378,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
379
[ Node {
    type: 'VariableDeclaration',
    start: 0,
    end: 172,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 174,
    end: 188,
    expression: 
     Node {
       type: 'CallExpression',
       start: 174,
       end: 187,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 190,
    end: 209,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 210,
    end: 224,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 225,
    end: 241,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ForStatement',
    start: 242,
    end: 305,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 247,
       end: 256,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 258,
       end: 268,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 270,
       end: 273,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 275, end: 305, body: [Array] } },
  Node {
    type: 'IfStatement',
    start: 307,
    end: 378,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 311,
       end: 335,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 341, end: 378, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 0,
  end: 172,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 4,
       end: 171,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
0
172
[ Node {
    type: 'VariableDeclarator',
    start: 4,
    end: 171,
    id: Node { type: 'Identifier', start: 4, end: 7, name: 'foo' },
    init: 
     Node {
       type: 'FunctionExpression',
       start: 10,
       end: 171,
       id: null,
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] } } ]
Node {
  type: 'VariableDeclarator',
  start: 4,
  end: 171,
  id: Node { type: 'Identifier', start: 4, end: 7, name: 'foo' },
  init: 
   Node {
     type: 'FunctionExpression',
     start: 10,
     end: 171,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [ [Node] ],
     body: Node { type: 'BlockStatement', start: 22, end: 171, body: [Array] } } }
VariableDeclarator
4
171
Node { type: 'Identifier', start: 4, end: 7, name: 'foo' }
Identifier
4
7
foo
Node {
  type: 'FunctionExpression',
  start: 10,
  end: 171,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 19, end: 20, name: 'o' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 22,
     end: 171,
     body: [ [Node], [Node], [Node], [Node] ] } }
FunctionExpression
10
171
null
[+] Exception: dfg-create-arguments-inline-alloc.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 272,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 42,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 44,
       end: 58,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 60,
       end: 271,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
272
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 42,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 16, end: 42, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 44,
    end: 58,
    expression: 
     Node {
       type: 'CallExpression',
       start: 44,
       end: 57,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 60,
    end: 271,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 65,
       end: 74,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 76,
       end: 85,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 87,
       end: 90,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 92, end: 271, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 42,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 13, end: 14, name: 'o' } ],
  body: Node { type: 'BlockStatement', start: 16, end: 42, body: [ [Node] ] } }
FunctionDeclaration
0
42
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'o' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'o' }
Identifier
13
14
o
Node {
  type: 'BlockStatement',
  start: 16,
  end: 42,
  body: 
   [ Node { type: 'ReturnStatement', start: 22, end: 40, argument: [Node] } ] }
BlockStatement
16
42
[ Node {
    type: 'ReturnStatement',
    start: 22,
    end: 40,
    argument: 
     Node {
       type: 'UnaryExpression',
       start: 29,
       end: 39,
       operator: 'delete',
       prefix: true,
       argument: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 22,
  end: 40,
  argument: 
   Node {
     type: 'UnaryExpression',
     start: 29,
     end: 39,
     operator: 'delete',
     prefix: true,
     argument: 
      Node {
        type: 'MemberExpression',
        start: 36,
        end: 39,
        object: [Node],
        property: [Node],
        computed: false } } }
ReturnStatement
22
40
Node {
  type: 'UnaryExpression',
  start: 29,
  end: 39,
  operator: 'delete',
  prefix: true,
  argument: 
   Node {
     type: 'MemberExpression',
     start: 36,
     end: 39,
     object: Node { type: 'Identifier', start: 36, end: 37, name: 'o' },
     property: Node { type: 'Identifier', start: 38, end: 39, name: 'f' },
     computed: false } }
UnaryExpression
29
39
delete
true
Node {
  type: 'MemberExpression',
  start: 36,
  end: 39,
  object: Node { type: 'Identifier', start: 36, end: 37, name: 'o' },
  property: Node { type: 'Identifier', start: 38, end: 39, name: 'f' },
  computed: false }
MemberExpression
36
39
Node { type: 'Identifier', start: 36, end: 37, name: 'o' }
Identifier
36
37
o
Node { type: 'Identifier', start: 38, end: 39, name: 'f' }
Identifier
38
39
f
false
Node {
  type: 'ExpressionStatement',
  start: 44,
  end: 58,
  expression: 
   Node {
     type: 'CallExpression',
     start: 44,
     end: 57,
     callee: Node { type: 'Identifier', start: 44, end: 52, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
44
58
Node {
  type: 'CallExpression',
  start: 44,
  end: 57,
  callee: Node { type: 'Identifier', start: 44, end: 52, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 53, end: 56, name: 'foo' } ] }
CallExpression
44
57
Node { type: 'Identifier', start: 44, end: 52, name: 'noInline' }
Identifier
44
52
noInline
[ Node { type: 'Identifier', start: 53, end: 56, name: 'foo' } ]
Node { type: 'Identifier', start: 53, end: 56, name: 'foo' }
Identifier
53
56
foo
Node {
  type: 'ForStatement',
  start: 60,
  end: 271,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 65,
     end: 74,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 76,
     end: 85,
     left: Node { type: 'Identifier', start: 76, end: 77, name: 'i' },
     operator: '<',
     right: Node { type: 'Literal', start: 80, end: 85, value: 10000, raw: '10000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 87,
     end: 90,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 89, end: 90, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 92,
     end: 271,
     body: [ [Node], [Node], [Node], [Node] ] } }
ForStatement
60
271
Node {
  type: 'VariableDeclaration',
  start: 65,
  end: 74,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 69,
       end: 74,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
65
74
[ Node {
    type: 'VariableDeclarator',
    start: 69,
    end: 74,
    id: Node { type: 'Identifier', start: 69, end: 70, name: 'i' },
    init: Node { type: 'Literal', start: 73, end: 74, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 69,
  end: 74,
  id: Node { type: 'Identifier', start: 69, end: 70, name: 'i' },
  init: Node { type: 'Literal', start: 73, end: 74, value: 0, raw: '0' } }
VariableDeclarator
69
74
Node { type: 'Identifier', start: 69, end: 70, name: 'i' }
Identifier
69
70
i
Node { type: 'Literal', start: 73, end: 74, value: 0, raw: '0' }
Literal
73
74
0
0
var
Node {
  type: 'BinaryExpression',
  start: 76,
  end: 85,
  left: Node { type: 'Identifier', start: 76, end: 77, name: 'i' },
  operator: '<',
  right: Node { type: 'Literal', start: 80, end: 85, value: 10000, raw: '10000' } }
BinaryExpression
76
85
Node { type: 'Identifier', start: 76, end: 77, name: 'i' }
Identifier
76
77
i
<
Node { type: 'Literal', start: 80, end: 85, value: 10000, raw: '10000' }
Literal
80
85
10000
10000
Node {
  type: 'UpdateExpression',
  start: 87,
  end: 90,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 89, end: 90, name: 'i' } }
UpdateExpression
87
90
++
true
Node { type: 'Identifier', start: 89, end: 90, name: 'i' }
Identifier
89
90
i
Node {
  type: 'BlockStatement',
  start: 92,
  end: 271,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 98,
       end: 113,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 118,
       end: 138,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 143,
       end: 209,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 214,
       end: 269,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
92
271
[ Node {
    type: 'VariableDeclaration',
    start: 98,
    end: 113,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 118,
    end: 138,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 143,
    end: 209,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 147,
       end: 162,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 172, end: 209, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 214,
    end: 269,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 218,
       end: 226,
       left: [Node],
       operator: 'in',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 236, end: 269, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 98,
  end: 113,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 102,
       end: 112,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
98
113
[ Node {
    type: 'VariableDeclarator',
    start: 102,
    end: 112,
    id: Node { type: 'Identifier', start: 102, end: 103, name: 'o' },
    init: 
     Node {
       type: 'ObjectExpression',
       start: 106,
       end: 112,
       properties: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 102,
  end: 112,
  id: Node { type: 'Identifier', start: 102, end: 103, name: 'o' },
  init: 
   Node {
     type: 'ObjectExpression',
     start: 106,
     end: 112,
     properties: [ [Node] ] } }
VariableDeclarator
102
112
Node { type: 'Identifier', start: 102, end: 103, name: 'o' }
Identifier
102
103
o
Node {
  type: 'ObjectExpression',
  start: 106,
  end: 112,
  properties: 
   [ Node {
       type: 'Property',
       start: 107,
       end: 111,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
106
112
[ Node {
    type: 'Property',
    start: 107,
    end: 111,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 107, end: 108, name: 'f' },
    value: Node { type: 'Literal', start: 109, end: 111, value: 42, raw: '42' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 107,
  end: 111,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 107, end: 108, name: 'f' },
  value: Node { type: 'Literal', start: 109, end: 111, value: 42, raw: '42' },
  kind: 'init' }
Property
107
111
false
false
false
Node { type: 'Identifier', start: 107, end: 108, name: 'f' }
Identifier
107
108
f
Node { type: 'Literal', start: 109, end: 111, value: 42, raw: '42' }
Literal
109
111
42
42
init
var
Node {
  type: 'VariableDeclaration',
  start: 118,
  end: 138,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 122,
       end: 137,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
118
138
[ Node {
    type: 'VariableDeclarator',
    start: 122,
    end: 137,
    id: Node { type: 'Identifier', start: 122, end: 128, name: 'result' },
    init: 
     Node {
       type: 'CallExpression',
       start: 131,
       end: 137,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 122,
  end: 137,
  id: Node { type: 'Identifier', start: 122, end: 128, name: 'result' },
  init: 
   Node {
     type: 'CallExpression',
     start: 131,
     end: 137,
     callee: Node { type: 'Identifier', start: 131, end: 134, name: 'foo' },
     arguments: [ [Node] ] } }
VariableDeclarator
122
137
Node { type: 'Identifier', start: 122, end: 128, name: 'result' }
Identifier
122
128
result
Node {
  type: 'CallExpression',
  start: 131,
  end: 137,
  callee: Node { type: 'Identifier', start: 131, end: 134, name: 'foo' },
  arguments: 
   [ Node { type: 'Identifier', start: 135, end: 136, name: 'o' } ] }
CallExpression
131
137
Node { type: 'Identifier', start: 131, end: 134, name: 'foo' }
Identifier
131
134
foo
[ Node { type: 'Identifier', start: 135, end: 136, name: 'o' } ]
Node { type: 'Identifier', start: 135, end: 136, name: 'o' }
Identifier
135
136
o
var
Node {
  type: 'IfStatement',
  start: 143,
  end: 209,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 147,
     end: 162,
     left: Node { type: 'Identifier', start: 147, end: 153, name: 'result' },
     operator: '!==',
     right: Node { type: 'Literal', start: 158, end: 162, value: true, raw: 'true' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 172,
     end: 209,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 178,
        end: 208,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
143
209
Node {
  type: 'BinaryExpression',
  start: 147,
  end: 162,
  left: Node { type: 'Identifier', start: 147, end: 153, name: 'result' },
  operator: '!==',
  right: Node { type: 'Literal', start: 158, end: 162, value: true, raw: 'true' } }
BinaryExpression
147
162
Node { type: 'Identifier', start: 147, end: 153, name: 'result' }
Identifier
147
153
result
!==
Node { type: 'Literal', start: 158, end: 162, value: true, raw: 'true' }
Literal
158
162
true
true
Node {
  type: 'ThrowStatement',
  start: 172,
  end: 209,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 178,
     end: 208,
     left: 
      Node {
        type: 'Literal',
        start: 178,
        end: 199,
        value: 'Error: bad result: ',
        raw: '"Error: bad result: "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 202, end: 208, name: 'result' } } }
ThrowStatement
172
209
Node {
  type: 'BinaryExpression',
  start: 178,
  end: 208,
  left: 
   Node {
     type: 'Literal',
     start: 178,
     end: 199,
     value: 'Error: bad result: ',
     raw: '"Error: bad result: "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 202, end: 208, name: 'result' } }
BinaryExpression
178
208
Node {
  type: 'Literal',
  start: 178,
  end: 199,
  value: 'Error: bad result: ',
  raw: '"Error: bad result: "' }
Literal
178
199
Error: bad result: 
"Error: bad result: "
+
Node { type: 'Identifier', start: 202, end: 208, name: 'result' }
Identifier
202
208
result
null
[+] Exception: dfg-del-by-id.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 454,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 32,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 33,
       end: 45,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 47,
       end: 112,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 114,
       end: 253,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 254,
       end: 268,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 271,
       end: 453,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
454
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 32,
    id: Node { type: 'Identifier', start: 9, end: 10, name: 'f' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 13, end: 32, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 33,
    end: 45,
    expression: 
     Node {
       type: 'CallExpression',
       start: 33,
       end: 44,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 47,
    end: 112,
    id: Node { type: 'Identifier', start: 56, end: 59, name: 'bar' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 63, end: 112, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 114,
    end: 253,
    id: Node { type: 'Identifier', start: 123, end: 126, name: 'Foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 130, end: 253, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 254,
    end: 268,
    expression: 
     Node {
       type: 'CallExpression',
       start: 254,
       end: 267,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 271,
    end: 453,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 276,
       end: 285,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 287,
       end: 295,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 297,
       end: 300,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 302, end: 453, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 32,
  id: Node { type: 'Identifier', start: 9, end: 10, name: 'f' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 13, end: 32, body: [ [Node] ] } }
FunctionDeclaration
0
32
Node { type: 'Identifier', start: 9, end: 10, name: 'f' }
Identifier
9
10
f
false
false
false
[]
Node {
  type: 'BlockStatement',
  start: 13,
  end: 32,
  body: 
   [ Node { type: 'ReturnStatement', start: 19, end: 29, argument: [Node] } ] }
BlockStatement
13
32
[ Node {
    type: 'ReturnStatement',
    start: 19,
    end: 29,
    argument: Node { type: 'Literal', start: 26, end: 28, value: 20, raw: '20' } } ]
Node {
  type: 'ReturnStatement',
  start: 19,
  end: 29,
  argument: Node { type: 'Literal', start: 26, end: 28, value: 20, raw: '20' } }
ReturnStatement
19
29
Node { type: 'Literal', start: 26, end: 28, value: 20, raw: '20' }
Literal
26
28
20
20
Node {
  type: 'ExpressionStatement',
  start: 33,
  end: 45,
  expression: 
   Node {
     type: 'CallExpression',
     start: 33,
     end: 44,
     callee: Node { type: 'Identifier', start: 33, end: 41, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
33
45
Node {
  type: 'CallExpression',
  start: 33,
  end: 44,
  callee: Node { type: 'Identifier', start: 33, end: 41, name: 'noInline' },
  arguments: [ Node { type: 'Identifier', start: 42, end: 43, name: 'f' } ] }
CallExpression
33
44
Node { type: 'Identifier', start: 33, end: 41, name: 'noInline' }
Identifier
33
41
noInline
[ Node { type: 'Identifier', start: 42, end: 43, name: 'f' } ]
Node { type: 'Identifier', start: 42, end: 43, name: 'f' }
Identifier
42
43
f
Node {
  type: 'FunctionDeclaration',
  start: 47,
  end: 112,
  id: Node { type: 'Identifier', start: 56, end: 59, name: 'bar' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 60, end: 61, name: 'b' } ],
  body: Node { type: 'BlockStatement', start: 63, end: 112, body: [ [Node] ] } }
FunctionDeclaration
47
112
Node { type: 'Identifier', start: 56, end: 59, name: 'bar' }
Identifier
56
59
bar
false
false
false
[ Node { type: 'Identifier', start: 60, end: 61, name: 'b' } ]
Node { type: 'Identifier', start: 60, end: 61, name: 'b' }
Identifier
60
61
b
Node {
  type: 'BlockStatement',
  start: 63,
  end: 112,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 70,
       end: 110,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
63
112
[ Node {
    type: 'IfStatement',
    start: 70,
    end: 110,
    test: Node { type: 'Identifier', start: 74, end: 75, name: 'b' },
    consequent: Node { type: 'ThrowStatement', start: 85, end: 110, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 70,
  end: 110,
  test: Node { type: 'Identifier', start: 74, end: 75, name: 'b' },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 85,
     end: 110,
     argument: 
      Node {
        type: 'NewExpression',
        start: 91,
        end: 109,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
70
110
Node { type: 'Identifier', start: 74, end: 75, name: 'b' }
Identifier
74
75
b
Node {
  type: 'ThrowStatement',
  start: 85,
  end: 110,
  argument: 
   Node {
     type: 'NewExpression',
     start: 91,
     end: 109,
     callee: Node { type: 'Identifier', start: 95, end: 100, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
85
110
Node {
  type: 'NewExpression',
  start: 91,
  end: 109,
  callee: Node { type: 'Identifier', start: 95, end: 100, name: 'Error' },
  arguments: 
   [ Node {
       type: 'Literal',
       start: 101,
       end: 108,
       value: 'blah!',
       raw: '"blah!"' } ] }
NewExpression
91
109
Node { type: 'Identifier', start: 95, end: 100, name: 'Error' }
Identifier
95
100
Error
[ Node {
    type: 'Literal',
    start: 101,
    end: 108,
    value: 'blah!',
    raw: '"blah!"' } ]
Node {
  type: 'Literal',
  start: 101,
  end: 108,
  value: 'blah!',
  raw: '"blah!"' }
Literal
101
108
blah!
"blah!"
null
[+] Exception: dfg-exception-try-catch-in-constructor-with-inlined-throw.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 257,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 47,
       end: 117,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node { type: 'EmptyStatement', start: 117, end: 118 },
     Node {
       type: 'FunctionDeclaration',
       start: 120,
       end: 247,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 249,
       end: 256,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
257
[ Node {
    type: 'FunctionDeclaration',
    start: 47,
    end: 117,
    id: Node { type: 'Identifier', start: 56, end: 59, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 62, end: 117, body: [Array] } },
  Node { type: 'EmptyStatement', start: 117, end: 118 },
  Node {
    type: 'FunctionDeclaration',
    start: 120,
    end: 247,
    id: Node { type: 'Identifier', start: 129, end: 133, name: 'test' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 136, end: 247, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 249,
    end: 256,
    expression: 
     Node {
       type: 'CallExpression',
       start: 249,
       end: 255,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 47,
  end: 117,
  id: Node { type: 'Identifier', start: 56, end: 59, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: 
   Node {
     type: 'BlockStatement',
     start: 62,
     end: 117,
     body: [ [Node], [Node] ] } }
FunctionDeclaration
47
117
Node { type: 'Identifier', start: 56, end: 59, name: 'foo' }
Identifier
56
59
foo
false
false
false
[]
Node {
  type: 'BlockStatement',
  start: 62,
  end: 117,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 68,
       end: 81,
       expression: [Node],
       directive: 'use strict' },
     Node { type: 'ReturnStatement', start: 86, end: 115, argument: [Node] } ] }
BlockStatement
62
117
[ Node {
    type: 'ExpressionStatement',
    start: 68,
    end: 81,
    expression: 
     Node {
       type: 'Literal',
       start: 68,
       end: 80,
       value: 'use strict',
       raw: '"use strict"' },
    directive: 'use strict' },
  Node {
    type: 'ReturnStatement',
    start: 86,
    end: 115,
    argument: 
     Node {
       type: 'UpdateExpression',
       start: 93,
       end: 114,
       operator: '--',
       prefix: true,
       argument: [Node] } } ]
Node {
  type: 'ExpressionStatement',
  start: 68,
  end: 81,
  expression: 
   Node {
     type: 'Literal',
     start: 68,
     end: 80,
     value: 'use strict',
     raw: '"use strict"' },
  directive: 'use strict' }
ExpressionStatement
68
81
Node {
  type: 'Literal',
  start: 68,
  end: 80,
  value: 'use strict',
  raw: '"use strict"' }
Literal
68
80
use strict
"use strict"
use strict
Node {
  type: 'ReturnStatement',
  start: 86,
  end: 115,
  argument: 
   Node {
     type: 'UpdateExpression',
     start: 93,
     end: 114,
     operator: '--',
     prefix: true,
     argument: 
      Node {
        type: 'MemberExpression',
        start: 95,
        end: 114,
        object: [Node],
        property: [Node],
        computed: true } } }
ReturnStatement
86
115
Node {
  type: 'UpdateExpression',
  start: 93,
  end: 114,
  operator: '--',
  prefix: true,
  argument: 
   Node {
     type: 'MemberExpression',
     start: 95,
     end: 114,
     object: Node { type: 'Identifier', start: 95, end: 104, name: 'arguments' },
     property: 
      Node {
        type: 'Literal',
        start: 105,
        end: 113,
        value: 'callee',
        raw: '"callee"' },
     computed: true } }
UpdateExpression
93
114
--
true
Node {
  type: 'MemberExpression',
  start: 95,
  end: 114,
  object: Node { type: 'Identifier', start: 95, end: 104, name: 'arguments' },
  property: 
   Node {
     type: 'Literal',
     start: 105,
     end: 113,
     value: 'callee',
     raw: '"callee"' },
  computed: true }
MemberExpression
95
114
Node { type: 'Identifier', start: 95, end: 104, name: 'arguments' }
Identifier
95
104
arguments
Node {
  type: 'Literal',
  start: 105,
  end: 113,
  value: 'callee',
  raw: '"callee"' }
Literal
105
113
callee
"callee"
true
Node { type: 'EmptyStatement', start: 117, end: 118 }
EmptyStatement
117
118
Node {
  type: 'FunctionDeclaration',
  start: 120,
  end: 247,
  id: Node { type: 'Identifier', start: 129, end: 133, name: 'test' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 136, end: 247, body: [ [Node] ] } }
FunctionDeclaration
120
247
Node { type: 'Identifier', start: 129, end: 133, name: 'test' }
Identifier
129
133
test
false
false
false
[]
Node {
  type: 'BlockStatement',
  start: 136,
  end: 247,
  body: 
   [ Node {
       type: 'ForStatement',
       start: 142,
       end: 245,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ] }
BlockStatement
136
247
[ Node {
    type: 'ForStatement',
    start: 142,
    end: 245,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 147,
       end: 156,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 158,
       end: 167,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 169,
       end: 172,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 174, end: 245, body: [Array] } } ]
Node {
  type: 'ForStatement',
  start: 142,
  end: 245,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 147,
     end: 156,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 158,
     end: 167,
     left: Node { type: 'Identifier', start: 158, end: 159, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 162,
        end: 167,
        value: 10000,
        raw: '10000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 169,
     end: 172,
     operator: '++',
     prefix: false,
     argument: Node { type: 'Identifier', start: 169, end: 170, name: 'i' } },
  body: Node { type: 'BlockStatement', start: 174, end: 245, body: [ [Node] ] } }
ForStatement
142
245
Node {
  type: 'VariableDeclaration',
  start: 147,
  end: 156,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 151,
       end: 156,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
147
156
[ Node {
    type: 'VariableDeclarator',
    start: 151,
    end: 156,
    id: Node { type: 'Identifier', start: 151, end: 152, name: 'i' },
    init: Node { type: 'Literal', start: 155, end: 156, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 151,
  end: 156,
  id: Node { type: 'Identifier', start: 151, end: 152, name: 'i' },
  init: Node { type: 'Literal', start: 155, end: 156, value: 0, raw: '0' } }
VariableDeclarator
151
156
Node { type: 'Identifier', start: 151, end: 152, name: 'i' }
Identifier
151
152
i
Node { type: 'Literal', start: 155, end: 156, value: 0, raw: '0' }
Literal
155
156
0
0
var
Node {
  type: 'BinaryExpression',
  start: 158,
  end: 167,
  left: Node { type: 'Identifier', start: 158, end: 159, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 162,
     end: 167,
     value: 10000,
     raw: '10000' } }
BinaryExpression
158
167
Node { type: 'Identifier', start: 158, end: 159, name: 'i' }
Identifier
158
159
i
<
Node {
  type: 'Literal',
  start: 162,
  end: 167,
  value: 10000,
  raw: '10000' }
Literal
162
167
10000
10000
Node {
  type: 'UpdateExpression',
  start: 169,
  end: 172,
  operator: '++',
  prefix: false,
  argument: Node { type: 'Identifier', start: 169, end: 170, name: 'i' } }
UpdateExpression
169
172
++
false
Node { type: 'Identifier', start: 169, end: 170, name: 'i' }
Identifier
169
170
i
Node {
  type: 'BlockStatement',
  start: 174,
  end: 245,
  body: 
   [ Node {
       type: 'TryStatement',
       start: 184,
       end: 239,
       block: [Node],
       handler: [Node],
       finalizer: null } ] }
BlockStatement
174
245
[ Node {
    type: 'TryStatement',
    start: 184,
    end: 239,
    block: Node { type: 'BlockStatement', start: 188, end: 218, body: [Array] },
    handler: 
     Node {
       type: 'CatchClause',
       start: 219,
       end: 239,
       param: [Node],
       body: [Node] },
    finalizer: null } ]
Node {
  type: 'TryStatement',
  start: 184,
  end: 239,
  block: Node { type: 'BlockStatement', start: 188, end: 218, body: [ [Node] ] },
  handler: 
   Node {
     type: 'CatchClause',
     start: 219,
     end: 239,
     param: Node { type: 'Identifier', start: 225, end: 226, name: 'e' },
     body: Node { type: 'BlockStatement', start: 228, end: 239, body: [] } },
  finalizer: null }
TryStatement
184
239
Node {
  type: 'BlockStatement',
  start: 188,
  end: 218,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 202,
       end: 208,
       expression: [Node] } ] }
BlockStatement
188
218
[ Node {
    type: 'ExpressionStatement',
    start: 202,
    end: 208,
    expression: 
     Node {
       type: 'CallExpression',
       start: 202,
       end: 207,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'ExpressionStatement',
  start: 202,
  end: 208,
  expression: 
   Node {
     type: 'CallExpression',
     start: 202,
     end: 207,
     callee: Node { type: 'Identifier', start: 202, end: 205, name: 'foo' },
     arguments: [] } }
ExpressionStatement
202
208
Node {
  type: 'CallExpression',
  start: 202,
  end: 207,
  callee: Node { type: 'Identifier', start: 202, end: 205, name: 'foo' },
  arguments: [] }
CallExpression
202
207
Node { type: 'Identifier', start: 202, end: 205, name: 'foo' }
Identifier
202
205
foo
[]
Node {
  type: 'CatchClause',
  start: 219,
  end: 239,
  param: Node { type: 'Identifier', start: 225, end: 226, name: 'e' },
  body: Node { type: 'BlockStatement', start: 228, end: 239, body: [] } }
CatchClause
219
239
Node { type: 'Identifier', start: 225, end: 226, name: 'e' }
Identifier
225
226
e
Node { type: 'BlockStatement', start: 228, end: 239, body: [] }
BlockStatement
228
239
[]
null
[+] Exception: dfg-get-by-id-should-not-assert-non-null-prediction.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 272,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 117,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 118,
       end: 137,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 139,
       end: 183,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 184,
       end: 201,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 203,
       end: 271,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
272
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 117,
    id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 36, end: 117, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 118,
    end: 137,
    expression: 
     Node {
       type: 'CallExpression',
       start: 118,
       end: 136,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 139,
    end: 183,
    id: Node { type: 'Identifier', start: 148, end: 154, name: 'target' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 161, end: 183, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 184,
    end: 201,
    expression: 
     Node {
       type: 'CallExpression',
       start: 184,
       end: 200,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 203,
    end: 271,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 208,
       end: 217,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 219,
       end: 226,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 228,
       end: 231,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 237,
       end: 271,
       expression: [Node] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 117,
  id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
     Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ],
  body: Node { type: 'BlockStatement', start: 36, end: 117, body: [ [Node] ] } }
FunctionDeclaration
0
117
Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' }
Identifier
9
17
shouldBe
false
false
false
[ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
  Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ]
Node { type: 'Identifier', start: 18, end: 24, name: 'actual' }
Identifier
18
24
actual
Node { type: 'Identifier', start: 26, end: 34, name: 'expected' }
Identifier
26
34
expected
Node {
  type: 'BlockStatement',
  start: 36,
  end: 117,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 42,
       end: 115,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
36
117
[ Node {
    type: 'IfStatement',
    start: 42,
    end: 115,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 46,
       end: 65,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 75, end: 115, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 42,
  end: 115,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 46,
     end: 65,
     left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
     operator: '!==',
     right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 75,
     end: 115,
     argument: 
      Node {
        type: 'NewExpression',
        start: 81,
        end: 114,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
42
115
Node {
  type: 'BinaryExpression',
  start: 46,
  end: 65,
  left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
  operator: '!==',
  right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } }
BinaryExpression
46
65
Node { type: 'Identifier', start: 46, end: 52, name: 'actual' }
Identifier
46
52
actual
!==
Node { type: 'Identifier', start: 57, end: 65, name: 'expected' }
Identifier
57
65
expected
Node {
  type: 'ThrowStatement',
  start: 75,
  end: 115,
  argument: 
   Node {
     type: 'NewExpression',
     start: 81,
     end: 114,
     callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
75
115
Node {
  type: 'NewExpression',
  start: 81,
  end: 114,
  callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
  arguments: 
   [ Node {
       type: 'BinaryExpression',
       start: 91,
       end: 113,
       left: [Node],
       operator: '+',
       right: [Node] } ] }
NewExpression
81
114
Node { type: 'Identifier', start: 85, end: 90, name: 'Error' }
Identifier
85
90
Error
[ Node {
    type: 'BinaryExpression',
    start: 91,
    end: 113,
    left: 
     Node {
       type: 'Literal',
       start: 91,
       end: 104,
       value: 'bad value: ',
       raw: '\'bad value: \'' },
    operator: '+',
    right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } } ]
Node {
  type: 'BinaryExpression',
  start: 91,
  end: 113,
  left: 
   Node {
     type: 'Literal',
     start: 91,
     end: 104,
     value: 'bad value: ',
     raw: '\'bad value: \'' },
  operator: '+',
  right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } }
BinaryExpression
91
113
Node {
  type: 'Literal',
  start: 91,
  end: 104,
  value: 'bad value: ',
  raw: '\'bad value: \'' }
Literal
91
104
bad value: 
'bad value: '
+
Node { type: 'Identifier', start: 107, end: 113, name: 'actual' }
Identifier
107
113
actual
null
[+] Exception: dfg-internal-function-call.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 276,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 117,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 118,
       end: 137,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 139,
       end: 187,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 188,
       end: 205,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 207,
       end: 275,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
276
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 117,
    id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 36, end: 117, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 118,
    end: 137,
    expression: 
     Node {
       type: 'CallExpression',
       start: 118,
       end: 136,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 139,
    end: 187,
    id: Node { type: 'Identifier', start: 148, end: 154, name: 'target' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 161, end: 187, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 188,
    end: 205,
    expression: 
     Node {
       type: 'CallExpression',
       start: 188,
       end: 204,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 207,
    end: 275,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 212,
       end: 221,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 223,
       end: 230,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 232,
       end: 235,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 241,
       end: 275,
       expression: [Node] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 117,
  id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
     Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ],
  body: Node { type: 'BlockStatement', start: 36, end: 117, body: [ [Node] ] } }
FunctionDeclaration
0
117
Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' }
Identifier
9
17
shouldBe
false
false
false
[ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
  Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ]
Node { type: 'Identifier', start: 18, end: 24, name: 'actual' }
Identifier
18
24
actual
Node { type: 'Identifier', start: 26, end: 34, name: 'expected' }
Identifier
26
34
expected
Node {
  type: 'BlockStatement',
  start: 36,
  end: 117,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 42,
       end: 115,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
36
117
[ Node {
    type: 'IfStatement',
    start: 42,
    end: 115,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 46,
       end: 65,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 75, end: 115, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 42,
  end: 115,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 46,
     end: 65,
     left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
     operator: '!==',
     right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 75,
     end: 115,
     argument: 
      Node {
        type: 'NewExpression',
        start: 81,
        end: 114,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
42
115
Node {
  type: 'BinaryExpression',
  start: 46,
  end: 65,
  left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
  operator: '!==',
  right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } }
BinaryExpression
46
65
Node { type: 'Identifier', start: 46, end: 52, name: 'actual' }
Identifier
46
52
actual
!==
Node { type: 'Identifier', start: 57, end: 65, name: 'expected' }
Identifier
57
65
expected
Node {
  type: 'ThrowStatement',
  start: 75,
  end: 115,
  argument: 
   Node {
     type: 'NewExpression',
     start: 81,
     end: 114,
     callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
75
115
Node {
  type: 'NewExpression',
  start: 81,
  end: 114,
  callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
  arguments: 
   [ Node {
       type: 'BinaryExpression',
       start: 91,
       end: 113,
       left: [Node],
       operator: '+',
       right: [Node] } ] }
NewExpression
81
114
Node { type: 'Identifier', start: 85, end: 90, name: 'Error' }
Identifier
85
90
Error
[ Node {
    type: 'BinaryExpression',
    start: 91,
    end: 113,
    left: 
     Node {
       type: 'Literal',
       start: 91,
       end: 104,
       value: 'bad value: ',
       raw: '\'bad value: \'' },
    operator: '+',
    right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } } ]
Node {
  type: 'BinaryExpression',
  start: 91,
  end: 113,
  left: 
   Node {
     type: 'Literal',
     start: 91,
     end: 104,
     value: 'bad value: ',
     raw: '\'bad value: \'' },
  operator: '+',
  right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } }
BinaryExpression
91
113
Node {
  type: 'Literal',
  start: 91,
  end: 104,
  value: 'bad value: ',
  raw: '\'bad value: \'' }
Literal
91
104
bad value: 
'bad value: '
+
Node { type: 'Identifier', start: 107, end: 113, name: 'actual' }
Identifier
107
113
actual
null
[+] Exception: dfg-internal-function-construct.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 196,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 43,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 45,
       end: 73,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 75,
       end: 92,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'ForStatement',
       start: 93,
       end: 195,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
196
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 43,
    id: Node { type: 'Identifier', start: 9, end: 18, name: 'doIndexOf' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 22, end: 43, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 45,
    end: 73,
    id: Node { type: 'Identifier', start: 54, end: 57, name: 'bar' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 61, end: 73, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 75,
    end: 92,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'ForStatement',
    start: 93,
    end: 195,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 98,
       end: 107,
       declarations: [Array],
       kind: 'let' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 109,
       end: 119,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 121,
       end: 124,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 126, end: 195, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 43,
  id: Node { type: 'Identifier', start: 9, end: 18, name: 'doIndexOf' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 19, end: 20, name: 'a' } ],
  body: Node { type: 'BlockStatement', start: 22, end: 43, body: [ [Node] ] } }
FunctionDeclaration
0
43
Node { type: 'Identifier', start: 9, end: 18, name: 'doIndexOf' }
Identifier
9
18
doIndexOf
false
false
false
[ Node { type: 'Identifier', start: 19, end: 20, name: 'a' } ]
Node { type: 'Identifier', start: 19, end: 20, name: 'a' }
Identifier
19
20
a
Node {
  type: 'BlockStatement',
  start: 22,
  end: 43,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 28,
       end: 41,
       expression: [Node] } ] }
BlockStatement
22
43
[ Node {
    type: 'ExpressionStatement',
    start: 28,
    end: 41,
    expression: 
     Node {
       type: 'CallExpression',
       start: 28,
       end: 40,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'ExpressionStatement',
  start: 28,
  end: 41,
  expression: 
   Node {
     type: 'CallExpression',
     start: 28,
     end: 40,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 28,
        end: 37,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [ [Node] ] } }
ExpressionStatement
28
41
Node {
  type: 'CallExpression',
  start: 28,
  end: 40,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 28,
     end: 37,
     object: Node { type: 'Identifier', start: 28, end: 29, name: 'a' },
     property: Node { type: 'Identifier', start: 30, end: 37, name: 'indexOf' },
     computed: false },
  arguments: [ Node { type: 'Identifier', start: 38, end: 39, name: 'a' } ] }
CallExpression
28
40
Node {
  type: 'MemberExpression',
  start: 28,
  end: 37,
  object: Node { type: 'Identifier', start: 28, end: 29, name: 'a' },
  property: Node { type: 'Identifier', start: 30, end: 37, name: 'indexOf' },
  computed: false }
MemberExpression
28
37
Node { type: 'Identifier', start: 28, end: 29, name: 'a' }
Identifier
28
29
a
Node { type: 'Identifier', start: 30, end: 37, name: 'indexOf' }
Identifier
30
37
indexOf
false
[ Node { type: 'Identifier', start: 38, end: 39, name: 'a' } ]
Node { type: 'Identifier', start: 38, end: 39, name: 'a' }
Identifier
38
39
a
Node {
  type: 'FunctionDeclaration',
  start: 45,
  end: 73,
  id: Node { type: 'Identifier', start: 54, end: 57, name: 'bar' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 58, end: 59, name: 'f' } ],
  body: Node { type: 'BlockStatement', start: 61, end: 73, body: [ [Node] ] } }
FunctionDeclaration
45
73
Node { type: 'Identifier', start: 54, end: 57, name: 'bar' }
Identifier
54
57
bar
false
false
false
[ Node { type: 'Identifier', start: 58, end: 59, name: 'f' } ]
Node { type: 'Identifier', start: 58, end: 59, name: 'f' }
Identifier
58
59
f
Node {
  type: 'BlockStatement',
  start: 61,
  end: 73,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 67,
       end: 71,
       expression: [Node] } ] }
BlockStatement
61
73
[ Node {
    type: 'ExpressionStatement',
    start: 67,
    end: 71,
    expression: 
     Node {
       type: 'CallExpression',
       start: 67,
       end: 70,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'ExpressionStatement',
  start: 67,
  end: 71,
  expression: 
   Node {
     type: 'CallExpression',
     start: 67,
     end: 70,
     callee: Node { type: 'Identifier', start: 67, end: 68, name: 'f' },
     arguments: [] } }
ExpressionStatement
67
71
Node {
  type: 'CallExpression',
  start: 67,
  end: 70,
  callee: Node { type: 'Identifier', start: 67, end: 68, name: 'f' },
  arguments: [] }
CallExpression
67
70
Node { type: 'Identifier', start: 67, end: 68, name: 'f' }
Identifier
67
68
f
[]
Node {
  type: 'VariableDeclaration',
  start: 75,
  end: 92,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 79,
       end: 91,
       id: [Node],
       init: [Node] } ],
  kind: 'let' }
VariableDeclaration
75
92
[ Node {
    type: 'VariableDeclarator',
    start: 79,
    end: 91,
    id: Node { type: 'Identifier', start: 79, end: 84, name: 'array' },
    init: Node { type: 'ArrayExpression', start: 87, end: 91, elements: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 79,
  end: 91,
  id: Node { type: 'Identifier', start: 79, end: 84, name: 'array' },
  init: 
   Node {
     type: 'ArrayExpression',
     start: 87,
     end: 91,
     elements: [ [Node] ] } }
VariableDeclarator
79
91
Node { type: 'Identifier', start: 79, end: 84, name: 'array' }
Identifier
79
84
array
Node {
  type: 'ArrayExpression',
  start: 87,
  end: 91,
  elements: 
   [ Node { type: 'Literal', start: 88, end: 90, value: 20, raw: '20' } ] }
ArrayExpression
87
91
[ Node { type: 'Literal', start: 88, end: 90, value: 20, raw: '20' } ]
Node { type: 'Literal', start: 88, end: 90, value: 20, raw: '20' }
Literal
88
90
20
20
let
Node {
  type: 'ForStatement',
  start: 93,
  end: 195,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 98,
     end: 107,
     declarations: [ [Node] ],
     kind: 'let' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 109,
     end: 119,
     left: Node { type: 'Identifier', start: 109, end: 110, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 113,
        end: 119,
        value: 100000,
        raw: '100000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 121,
     end: 124,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 123, end: 124, name: 'i' } },
  body: Node { type: 'BlockStatement', start: 126, end: 195, body: [ [Node] ] } }
ForStatement
93
195
Node {
  type: 'VariableDeclaration',
  start: 98,
  end: 107,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 102,
       end: 107,
       id: [Node],
       init: [Node] } ],
  kind: 'let' }
VariableDeclaration
98
107
[ Node {
    type: 'VariableDeclarator',
    start: 102,
    end: 107,
    id: Node { type: 'Identifier', start: 102, end: 103, name: 'i' },
    init: Node { type: 'Literal', start: 106, end: 107, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 102,
  end: 107,
  id: Node { type: 'Identifier', start: 102, end: 103, name: 'i' },
  init: Node { type: 'Literal', start: 106, end: 107, value: 0, raw: '0' } }
VariableDeclarator
102
107
Node { type: 'Identifier', start: 102, end: 103, name: 'i' }
Identifier
102
103
i
Node { type: 'Literal', start: 106, end: 107, value: 0, raw: '0' }
Literal
106
107
0
0
let
Node {
  type: 'BinaryExpression',
  start: 109,
  end: 119,
  left: Node { type: 'Identifier', start: 109, end: 110, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 113,
     end: 119,
     value: 100000,
     raw: '100000' } }
BinaryExpression
109
119
Node { type: 'Identifier', start: 109, end: 110, name: 'i' }
Identifier
109
110
i
<
Node {
  type: 'Literal',
  start: 113,
  end: 119,
  value: 100000,
  raw: '100000' }
Literal
113
119
100000
100000
Node {
  type: 'UpdateExpression',
  start: 121,
  end: 124,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 123, end: 124, name: 'i' } }
UpdateExpression
121
124
++
true
Node { type: 'Identifier', start: 123, end: 124, name: 'i' }
Identifier
123
124
i
Node {
  type: 'BlockStatement',
  start: 126,
  end: 195,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 132,
       end: 193,
       expression: [Node] } ] }
BlockStatement
126
195
[ Node {
    type: 'ExpressionStatement',
    start: 132,
    end: 193,
    expression: 
     Node {
       type: 'CallExpression',
       start: 132,
       end: 192,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'ExpressionStatement',
  start: 132,
  end: 193,
  expression: 
   Node {
     type: 'CallExpression',
     start: 132,
     end: 192,
     callee: Node { type: 'Identifier', start: 132, end: 135, name: 'bar' },
     arguments: [ [Node] ] } }
ExpressionStatement
132
193
Node {
  type: 'CallExpression',
  start: 132,
  end: 192,
  callee: Node { type: 'Identifier', start: 132, end: 135, name: 'bar' },
  arguments: 
   [ Node {
       type: 'ArrowFunctionExpression',
       start: 136,
       end: 191,
       id: null,
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] } ] }
CallExpression
132
192
Node { type: 'Identifier', start: 132, end: 135, name: 'bar' }
Identifier
132
135
bar
[ Node {
    type: 'ArrowFunctionExpression',
    start: 136,
    end: 191,
    id: null,
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 142, end: 191, body: [Array] } } ]
Node {
  type: 'ArrowFunctionExpression',
  start: 136,
  end: 191,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 142, end: 191, body: [ [Node] ] } }
ArrowFunctionExpression
136
191
null
[+] Exception: dfg-node-convert-to-constant-must-clear-varargs-flags.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 2507,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 117,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 119,
       end: 468,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 470,
       end: 668,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 670,
       end: 1056,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1058,
       end: 1261,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1263,
       end: 1461,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1463,
       end: 1665,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1667,
       end: 1868,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1870,
       end: 2081,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 2083,
       end: 2506,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
2507
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 117,
    id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 36, end: 117, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 119,
    end: 468,
    id: Node { type: 'Identifier', start: 128, end: 139, name: 'shouldThrow' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 160, end: 468, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 470,
    end: 668,
    expression: 
     Node {
       type: 'CallExpression',
       start: 471,
       end: 666,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 670,
    end: 1056,
    expression: 
     Node {
       type: 'CallExpression',
       start: 671,
       end: 1054,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 1058,
    end: 1261,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1059,
       end: 1259,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 1263,
    end: 1461,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1264,
       end: 1459,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 1463,
    end: 1665,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1464,
       end: 1663,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 1667,
    end: 1868,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1668,
       end: 1866,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 1870,
    end: 2081,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1871,
       end: 2079,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 2083,
    end: 2506,
    expression: 
     Node {
       type: 'CallExpression',
       start: 2084,
       end: 2504,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 117,
  id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
     Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ],
  body: Node { type: 'BlockStatement', start: 36, end: 117, body: [ [Node] ] } }
FunctionDeclaration
0
117
Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' }
Identifier
9
17
shouldBe
false
false
false
[ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
  Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ]
Node { type: 'Identifier', start: 18, end: 24, name: 'actual' }
Identifier
18
24
actual
Node { type: 'Identifier', start: 26, end: 34, name: 'expected' }
Identifier
26
34
expected
Node {
  type: 'BlockStatement',
  start: 36,
  end: 117,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 42,
       end: 115,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
36
117
[ Node {
    type: 'IfStatement',
    start: 42,
    end: 115,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 46,
       end: 65,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 75, end: 115, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 42,
  end: 115,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 46,
     end: 65,
     left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
     operator: '!==',
     right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 75,
     end: 115,
     argument: 
      Node {
        type: 'NewExpression',
        start: 81,
        end: 114,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
42
115
Node {
  type: 'BinaryExpression',
  start: 46,
  end: 65,
  left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
  operator: '!==',
  right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } }
BinaryExpression
46
65
Node { type: 'Identifier', start: 46, end: 52, name: 'actual' }
Identifier
46
52
actual
!==
Node { type: 'Identifier', start: 57, end: 65, name: 'expected' }
Identifier
57
65
expected
Node {
  type: 'ThrowStatement',
  start: 75,
  end: 115,
  argument: 
   Node {
     type: 'NewExpression',
     start: 81,
     end: 114,
     callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
75
115
Node {
  type: 'NewExpression',
  start: 81,
  end: 114,
  callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
  arguments: 
   [ Node {
       type: 'BinaryExpression',
       start: 91,
       end: 113,
       left: [Node],
       operator: '+',
       right: [Node] } ] }
NewExpression
81
114
Node { type: 'Identifier', start: 85, end: 90, name: 'Error' }
Identifier
85
90
Error
[ Node {
    type: 'BinaryExpression',
    start: 91,
    end: 113,
    left: 
     Node {
       type: 'Literal',
       start: 91,
       end: 104,
       value: 'bad value: ',
       raw: '\'bad value: \'' },
    operator: '+',
    right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } } ]
Node {
  type: 'BinaryExpression',
  start: 91,
  end: 113,
  left: 
   Node {
     type: 'Literal',
     start: 91,
     end: 104,
     value: 'bad value: ',
     raw: '\'bad value: \'' },
  operator: '+',
  right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } }
BinaryExpression
91
113
Node {
  type: 'Literal',
  start: 91,
  end: 104,
  value: 'bad value: ',
  raw: '\'bad value: \'' }
Literal
91
104
bad value: 
'bad value: '
+
Node { type: 'Identifier', start: 107, end: 113, name: 'actual' }
Identifier
107
113
actual
null
[+] Exception: dfg-object-proto-accessor.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 2696,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 117,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 119,
       end: 468,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 470,
       end: 557,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 559,
       end: 767,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 769,
       end: 1185,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1187,
       end: 1400,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1402,
       end: 1610,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1612,
       end: 1824,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1826,
       end: 2037,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 2039,
       end: 2260,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 2262,
       end: 2695,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
2696
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 117,
    id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 36, end: 117, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 119,
    end: 468,
    id: Node { type: 'Identifier', start: 128, end: 139, name: 'shouldThrow' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 160, end: 468, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 470,
    end: 557,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 559,
    end: 767,
    expression: 
     Node {
       type: 'CallExpression',
       start: 560,
       end: 765,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 769,
    end: 1185,
    expression: 
     Node {
       type: 'CallExpression',
       start: 770,
       end: 1183,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 1187,
    end: 1400,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1188,
       end: 1398,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 1402,
    end: 1610,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1403,
       end: 1608,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 1612,
    end: 1824,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1613,
       end: 1822,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 1826,
    end: 2037,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1827,
       end: 2035,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 2039,
    end: 2260,
    expression: 
     Node {
       type: 'CallExpression',
       start: 2040,
       end: 2258,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 2262,
    end: 2695,
    expression: 
     Node {
       type: 'CallExpression',
       start: 2263,
       end: 2693,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 117,
  id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
     Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ],
  body: Node { type: 'BlockStatement', start: 36, end: 117, body: [ [Node] ] } }
FunctionDeclaration
0
117
Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' }
Identifier
9
17
shouldBe
false
false
false
[ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
  Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ]
Node { type: 'Identifier', start: 18, end: 24, name: 'actual' }
Identifier
18
24
actual
Node { type: 'Identifier', start: 26, end: 34, name: 'expected' }
Identifier
26
34
expected
Node {
  type: 'BlockStatement',
  start: 36,
  end: 117,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 42,
       end: 115,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
36
117
[ Node {
    type: 'IfStatement',
    start: 42,
    end: 115,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 46,
       end: 65,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 75, end: 115, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 42,
  end: 115,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 46,
     end: 65,
     left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
     operator: '!==',
     right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 75,
     end: 115,
     argument: 
      Node {
        type: 'NewExpression',
        start: 81,
        end: 114,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
42
115
Node {
  type: 'BinaryExpression',
  start: 46,
  end: 65,
  left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
  operator: '!==',
  right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } }
BinaryExpression
46
65
Node { type: 'Identifier', start: 46, end: 52, name: 'actual' }
Identifier
46
52
actual
!==
Node { type: 'Identifier', start: 57, end: 65, name: 'expected' }
Identifier
57
65
expected
Node {
  type: 'ThrowStatement',
  start: 75,
  end: 115,
  argument: 
   Node {
     type: 'NewExpression',
     start: 81,
     end: 114,
     callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
75
115
Node {
  type: 'NewExpression',
  start: 81,
  end: 114,
  callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
  arguments: 
   [ Node {
       type: 'BinaryExpression',
       start: 91,
       end: 113,
       left: [Node],
       operator: '+',
       right: [Node] } ] }
NewExpression
81
114
Node { type: 'Identifier', start: 85, end: 90, name: 'Error' }
Identifier
85
90
Error
[ Node {
    type: 'BinaryExpression',
    start: 91,
    end: 113,
    left: 
     Node {
       type: 'Literal',
       start: 91,
       end: 104,
       value: 'bad value: ',
       raw: '\'bad value: \'' },
    operator: '+',
    right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } } ]
Node {
  type: 'BinaryExpression',
  start: 91,
  end: 113,
  left: 
   Node {
     type: 'Literal',
     start: 91,
     end: 104,
     value: 'bad value: ',
     raw: '\'bad value: \'' },
  operator: '+',
  right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } }
BinaryExpression
91
113
Node {
  type: 'Literal',
  start: 91,
  end: 104,
  value: 'bad value: ',
  raw: '\'bad value: \'' }
Literal
91
104
bad value: 
'bad value: '
+
Node { type: 'Identifier', start: 107, end: 113, name: 'actual' }
Identifier
107
113
actual
null
[+] Exception: dfg-object-proto-getter.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 2637,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 117,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 119,
       end: 468,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 470,
       end: 681,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 683,
       end: 1108,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1110,
       end: 1326,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1328,
       end: 1539,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1541,
       end: 1756,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1758,
       end: 1972,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1974,
       end: 2198,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 2200,
       end: 2636,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
2637
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 117,
    id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 36, end: 117, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 119,
    end: 468,
    id: Node { type: 'Identifier', start: 128, end: 139, name: 'shouldThrow' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 160, end: 468, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 470,
    end: 681,
    expression: 
     Node {
       type: 'CallExpression',
       start: 471,
       end: 679,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 683,
    end: 1108,
    expression: 
     Node {
       type: 'CallExpression',
       start: 684,
       end: 1106,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 1110,
    end: 1326,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1111,
       end: 1324,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 1328,
    end: 1539,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1329,
       end: 1537,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 1541,
    end: 1756,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1542,
       end: 1754,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 1758,
    end: 1972,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1759,
       end: 1970,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 1974,
    end: 2198,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1975,
       end: 2196,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 2200,
    end: 2636,
    expression: 
     Node {
       type: 'CallExpression',
       start: 2201,
       end: 2634,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 117,
  id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
     Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ],
  body: Node { type: 'BlockStatement', start: 36, end: 117, body: [ [Node] ] } }
FunctionDeclaration
0
117
Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' }
Identifier
9
17
shouldBe
false
false
false
[ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
  Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ]
Node { type: 'Identifier', start: 18, end: 24, name: 'actual' }
Identifier
18
24
actual
Node { type: 'Identifier', start: 26, end: 34, name: 'expected' }
Identifier
26
34
expected
Node {
  type: 'BlockStatement',
  start: 36,
  end: 117,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 42,
       end: 115,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
36
117
[ Node {
    type: 'IfStatement',
    start: 42,
    end: 115,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 46,
       end: 65,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 75, end: 115, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 42,
  end: 115,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 46,
     end: 65,
     left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
     operator: '!==',
     right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 75,
     end: 115,
     argument: 
      Node {
        type: 'NewExpression',
        start: 81,
        end: 114,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
42
115
Node {
  type: 'BinaryExpression',
  start: 46,
  end: 65,
  left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
  operator: '!==',
  right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } }
BinaryExpression
46
65
Node { type: 'Identifier', start: 46, end: 52, name: 'actual' }
Identifier
46
52
actual
!==
Node { type: 'Identifier', start: 57, end: 65, name: 'expected' }
Identifier
57
65
expected
Node {
  type: 'ThrowStatement',
  start: 75,
  end: 115,
  argument: 
   Node {
     type: 'NewExpression',
     start: 81,
     end: 114,
     callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
75
115
Node {
  type: 'NewExpression',
  start: 81,
  end: 114,
  callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
  arguments: 
   [ Node {
       type: 'BinaryExpression',
       start: 91,
       end: 113,
       left: [Node],
       operator: '+',
       right: [Node] } ] }
NewExpression
81
114
Node { type: 'Identifier', start: 85, end: 90, name: 'Error' }
Identifier
85
90
Error
[ Node {
    type: 'BinaryExpression',
    start: 91,
    end: 113,
    left: 
     Node {
       type: 'Literal',
       start: 91,
       end: 104,
       value: 'bad value: ',
       raw: '\'bad value: \'' },
    operator: '+',
    right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } } ]
Node {
  type: 'BinaryExpression',
  start: 91,
  end: 113,
  left: 
   Node {
     type: 'Literal',
     start: 91,
     end: 104,
     value: 'bad value: ',
     raw: '\'bad value: \'' },
  operator: '+',
  right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } }
BinaryExpression
91
113
Node {
  type: 'Literal',
  start: 91,
  end: 104,
  value: 'bad value: ',
  raw: '\'bad value: \'' }
Literal
91
104
bad value: 
'bad value: '
+
Node { type: 'Identifier', start: 107, end: 113, name: 'actual' }
Identifier
107
113
actual
null
[+] Exception: dfg-object-prototype-of.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1822,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 117,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 119,
       end: 714,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 715,
       end: 739,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 741,
       end: 950,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 951,
       end: 968,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 970,
       end: 1279,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1280,
       end: 1297,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 1299,
       end: 1676,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1677,
       end: 1697,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 1699,
       end: 1821,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
1822
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 117,
    id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 36, end: 117, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 119,
    end: 714,
    id: 
     Node {
       type: 'Identifier',
       start: 128,
       end: 141,
       name: 'testAttribute' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 162, end: 714, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 715,
    end: 739,
    expression: 
     Node {
       type: 'CallExpression',
       start: 715,
       end: 738,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 741,
    end: 950,
    id: Node { type: 'Identifier', start: 750, end: 756, name: 'getter' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 759, end: 950, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 951,
    end: 968,
    expression: 
     Node {
       type: 'CallExpression',
       start: 951,
       end: 967,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 970,
    end: 1279,
    id: Node { type: 'Identifier', start: 979, end: 985, name: 'setter' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 988, end: 1279, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1280,
    end: 1297,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1280,
       end: 1296,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 1299,
    end: 1676,
    id: Node { type: 'Identifier', start: 1308, end: 1317, name: 'accessors' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 1320, end: 1676, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1677,
    end: 1697,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1677,
       end: 1696,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 1699,
    end: 1821,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 1704,
       end: 1713,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1715,
       end: 1724,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 1726,
       end: 1729,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 1731, end: 1821, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 117,
  id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
     Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ],
  body: Node { type: 'BlockStatement', start: 36, end: 117, body: [ [Node] ] } }
FunctionDeclaration
0
117
Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' }
Identifier
9
17
shouldBe
false
false
false
[ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
  Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ]
Node { type: 'Identifier', start: 18, end: 24, name: 'actual' }
Identifier
18
24
actual
Node { type: 'Identifier', start: 26, end: 34, name: 'expected' }
Identifier
26
34
expected
Node {
  type: 'BlockStatement',
  start: 36,
  end: 117,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 42,
       end: 115,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
36
117
[ Node {
    type: 'IfStatement',
    start: 42,
    end: 115,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 46,
       end: 65,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 75, end: 115, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 42,
  end: 115,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 46,
     end: 65,
     left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
     operator: '!==',
     right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 75,
     end: 115,
     argument: 
      Node {
        type: 'NewExpression',
        start: 81,
        end: 114,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
42
115
Node {
  type: 'BinaryExpression',
  start: 46,
  end: 65,
  left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
  operator: '!==',
  right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } }
BinaryExpression
46
65
Node { type: 'Identifier', start: 46, end: 52, name: 'actual' }
Identifier
46
52
actual
!==
Node { type: 'Identifier', start: 57, end: 65, name: 'expected' }
Identifier
57
65
expected
Node {
  type: 'ThrowStatement',
  start: 75,
  end: 115,
  argument: 
   Node {
     type: 'NewExpression',
     start: 81,
     end: 114,
     callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
75
115
Node {
  type: 'NewExpression',
  start: 81,
  end: 114,
  callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
  arguments: 
   [ Node {
       type: 'BinaryExpression',
       start: 91,
       end: 113,
       left: [Node],
       operator: '+',
       right: [Node] } ] }
NewExpression
81
114
Node { type: 'Identifier', start: 85, end: 90, name: 'Error' }
Identifier
85
90
Error
[ Node {
    type: 'BinaryExpression',
    start: 91,
    end: 113,
    left: 
     Node {
       type: 'Literal',
       start: 91,
       end: 104,
       value: 'bad value: ',
       raw: '\'bad value: \'' },
    operator: '+',
    right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } } ]
Node {
  type: 'BinaryExpression',
  start: 91,
  end: 113,
  left: 
   Node {
     type: 'Literal',
     start: 91,
     end: 104,
     value: 'bad value: ',
     raw: '\'bad value: \'' },
  operator: '+',
  right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } }
BinaryExpression
91
113
Node {
  type: 'Literal',
  start: 91,
  end: 104,
  value: 'bad value: ',
  raw: '\'bad value: \'' }
Literal
91
104
bad value: 
'bad value: '
+
Node { type: 'Identifier', start: 107, end: 113, name: 'actual' }
Identifier
107
113
actual
null
[+] Exception: dfg-put-accessors-by-id-class.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1620,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 117,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 119,
       end: 713,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 714,
       end: 738,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 740,
       end: 911,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 912,
       end: 929,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 931,
       end: 1158,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1159,
       end: 1176,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 1178,
       end: 1474,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1475,
       end: 1495,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 1497,
       end: 1619,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
1620
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 117,
    id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 36, end: 117, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 119,
    end: 713,
    id: 
     Node {
       type: 'Identifier',
       start: 128,
       end: 141,
       name: 'testAttribute' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 162, end: 713, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 714,
    end: 738,
    expression: 
     Node {
       type: 'CallExpression',
       start: 714,
       end: 737,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 740,
    end: 911,
    id: Node { type: 'Identifier', start: 749, end: 755, name: 'getter' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 758, end: 911, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 912,
    end: 929,
    expression: 
     Node {
       type: 'CallExpression',
       start: 912,
       end: 928,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 931,
    end: 1158,
    id: Node { type: 'Identifier', start: 940, end: 946, name: 'setter' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 949, end: 1158, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1159,
    end: 1176,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1159,
       end: 1175,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 1178,
    end: 1474,
    id: Node { type: 'Identifier', start: 1187, end: 1196, name: 'accessors' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 1199, end: 1474, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1475,
    end: 1495,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1475,
       end: 1494,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 1497,
    end: 1619,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 1502,
       end: 1511,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1513,
       end: 1522,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 1524,
       end: 1527,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 1529, end: 1619, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 117,
  id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
     Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ],
  body: Node { type: 'BlockStatement', start: 36, end: 117, body: [ [Node] ] } }
FunctionDeclaration
0
117
Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' }
Identifier
9
17
shouldBe
false
false
false
[ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
  Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ]
Node { type: 'Identifier', start: 18, end: 24, name: 'actual' }
Identifier
18
24
actual
Node { type: 'Identifier', start: 26, end: 34, name: 'expected' }
Identifier
26
34
expected
Node {
  type: 'BlockStatement',
  start: 36,
  end: 117,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 42,
       end: 115,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
36
117
[ Node {
    type: 'IfStatement',
    start: 42,
    end: 115,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 46,
       end: 65,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 75, end: 115, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 42,
  end: 115,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 46,
     end: 65,
     left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
     operator: '!==',
     right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 75,
     end: 115,
     argument: 
      Node {
        type: 'NewExpression',
        start: 81,
        end: 114,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
42
115
Node {
  type: 'BinaryExpression',
  start: 46,
  end: 65,
  left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
  operator: '!==',
  right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } }
BinaryExpression
46
65
Node { type: 'Identifier', start: 46, end: 52, name: 'actual' }
Identifier
46
52
actual
!==
Node { type: 'Identifier', start: 57, end: 65, name: 'expected' }
Identifier
57
65
expected
Node {
  type: 'ThrowStatement',
  start: 75,
  end: 115,
  argument: 
   Node {
     type: 'NewExpression',
     start: 81,
     end: 114,
     callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
75
115
Node {
  type: 'NewExpression',
  start: 81,
  end: 114,
  callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
  arguments: 
   [ Node {
       type: 'BinaryExpression',
       start: 91,
       end: 113,
       left: [Node],
       operator: '+',
       right: [Node] } ] }
NewExpression
81
114
Node { type: 'Identifier', start: 85, end: 90, name: 'Error' }
Identifier
85
90
Error
[ Node {
    type: 'BinaryExpression',
    start: 91,
    end: 113,
    left: 
     Node {
       type: 'Literal',
       start: 91,
       end: 104,
       value: 'bad value: ',
       raw: '\'bad value: \'' },
    operator: '+',
    right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } } ]
Node {
  type: 'BinaryExpression',
  start: 91,
  end: 113,
  left: 
   Node {
     type: 'Literal',
     start: 91,
     end: 104,
     value: 'bad value: ',
     raw: '\'bad value: \'' },
  operator: '+',
  right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } }
BinaryExpression
91
113
Node {
  type: 'Literal',
  start: 91,
  end: 104,
  value: 'bad value: ',
  raw: '\'bad value: \'' }
Literal
91
104
bad value: 
'bad value: '
+
Node { type: 'Identifier', start: 107, end: 113, name: 'actual' }
Identifier
107
113
actual
null
[+] Exception: dfg-put-accessors-by-id.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 2899,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 81,
       end: 180,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 181,
       end: 205,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 207,
       end: 2366,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 2368,
       end: 2468,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 2469,
       end: 2494,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 2496,
       end: 2591,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ForStatement',
       start: 2593,
       end: 2898,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
2899
[ Node {
    type: 'FunctionDeclaration',
    start: 81,
    end: 180,
    id: Node { type: 'Identifier', start: 90, end: 103, name: 'lookupWithKey' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 109, end: 180, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 181,
    end: 205,
    expression: 
     Node {
       type: 'CallExpression',
       start: 181,
       end: 204,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 207,
    end: 2366,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 212,
       end: 221,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 223,
       end: 232,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 234,
       end: 237,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 239, end: 2366, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 2368,
    end: 2468,
    id: 
     Node {
       type: 'Identifier',
       start: 2377,
       end: 2391,
       name: 'lookupWithKey2' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 2397, end: 2468, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 2469,
    end: 2494,
    expression: 
     Node {
       type: 'CallExpression',
       start: 2469,
       end: 2493,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 2496,
    end: 2591,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ForStatement',
    start: 2593,
    end: 2898,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 2598,
       end: 2607,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 2609,
       end: 2618,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 2620,
       end: 2623,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 2625, end: 2898, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 81,
  end: 180,
  id: Node { type: 'Identifier', start: 90, end: 103, name: 'lookupWithKey' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 104, end: 107, name: 'key' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 109,
     end: 180,
     body: [ [Node], [Node] ] } }
FunctionDeclaration
81
180
Node { type: 'Identifier', start: 90, end: 103, name: 'lookupWithKey' }
Identifier
90
103
lookupWithKey
false
false
false
[ Node { type: 'Identifier', start: 104, end: 107, name: 'key' } ]
Node { type: 'Identifier', start: 104, end: 107, name: 'key' }
Identifier
104
107
key
Node {
  type: 'BlockStatement',
  start: 109,
  end: 180,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 115,
       end: 154,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ReturnStatement',
       start: 159,
       end: 178,
       argument: [Node] } ] }
BlockStatement
109
180
[ Node {
    type: 'VariableDeclaration',
    start: 115,
    end: 154,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ReturnStatement',
    start: 159,
    end: 178,
    argument: 
     Node {
       type: 'MemberExpression',
       start: 166,
       end: 177,
       object: [Node],
       property: [Node],
       computed: true } } ]
Node {
  type: 'VariableDeclaration',
  start: 115,
  end: 154,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 119,
       end: 153,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
115
154
[ Node {
    type: 'VariableDeclarator',
    start: 119,
    end: 153,
    id: Node { type: 'Identifier', start: 119, end: 125, name: 'object' },
    init: 
     Node {
       type: 'ObjectExpression',
       start: 128,
       end: 153,
       properties: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 119,
  end: 153,
  id: Node { type: 'Identifier', start: 119, end: 125, name: 'object' },
  init: 
   Node {
     type: 'ObjectExpression',
     start: 128,
     end: 153,
     properties: [ [Node] ] } }
VariableDeclarator
119
153
Node { type: 'Identifier', start: 119, end: 125, name: 'object' }
Identifier
119
125
object
Node {
  type: 'ObjectExpression',
  start: 128,
  end: 153,
  properties: 
   [ Node {
       type: 'Property',
       start: 138,
       end: 147,
       method: false,
       shorthand: false,
       computed: true,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
128
153
[ Node {
    type: 'Property',
    start: 138,
    end: 147,
    method: false,
    shorthand: false,
    computed: true,
    key: Node { type: 'Identifier', start: 139, end: 142, name: 'key' },
    value: Node { type: 'Literal', start: 145, end: 147, value: 42, raw: '42' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 138,
  end: 147,
  method: false,
  shorthand: false,
  computed: true,
  key: Node { type: 'Identifier', start: 139, end: 142, name: 'key' },
  value: Node { type: 'Literal', start: 145, end: 147, value: 42, raw: '42' },
  kind: 'init' }
Property
138
147
false
false
true
Node { type: 'Identifier', start: 139, end: 142, name: 'key' }
Identifier
139
142
key
Node { type: 'Literal', start: 145, end: 147, value: 42, raw: '42' }
Literal
145
147
42
42
init
var
Node {
  type: 'ReturnStatement',
  start: 159,
  end: 178,
  argument: 
   Node {
     type: 'MemberExpression',
     start: 166,
     end: 177,
     object: Node { type: 'Identifier', start: 166, end: 172, name: 'object' },
     property: Node { type: 'Identifier', start: 173, end: 176, name: 'key' },
     computed: true } }
ReturnStatement
159
178
Node {
  type: 'MemberExpression',
  start: 166,
  end: 177,
  object: Node { type: 'Identifier', start: 166, end: 172, name: 'object' },
  property: Node { type: 'Identifier', start: 173, end: 176, name: 'key' },
  computed: true }
MemberExpression
166
177
Node { type: 'Identifier', start: 166, end: 172, name: 'object' }
Identifier
166
172
object
Node { type: 'Identifier', start: 173, end: 176, name: 'key' }
Identifier
173
176
key
true
Node {
  type: 'ExpressionStatement',
  start: 181,
  end: 205,
  expression: 
   Node {
     type: 'CallExpression',
     start: 181,
     end: 204,
     callee: Node { type: 'Identifier', start: 181, end: 189, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
181
205
Node {
  type: 'CallExpression',
  start: 181,
  end: 204,
  callee: Node { type: 'Identifier', start: 181, end: 189, name: 'noInline' },
  arguments: 
   [ Node {
       type: 'Identifier',
       start: 190,
       end: 203,
       name: 'lookupWithKey' } ] }
CallExpression
181
204
Node { type: 'Identifier', start: 181, end: 189, name: 'noInline' }
Identifier
181
189
noInline
[ Node {
    type: 'Identifier',
    start: 190,
    end: 203,
    name: 'lookupWithKey' } ]
Node {
  type: 'Identifier',
  start: 190,
  end: 203,
  name: 'lookupWithKey' }
Identifier
190
203
lookupWithKey
Node {
  type: 'ForStatement',
  start: 207,
  end: 2366,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 212,
     end: 221,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 223,
     end: 232,
     left: Node { type: 'Identifier', start: 223, end: 224, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 227,
        end: 232,
        value: 10000,
        raw: '10000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 234,
     end: 237,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 236, end: 237, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 239,
     end: 2366,
     body: [ [Node] ] } }
ForStatement
207
2366
Node {
  type: 'VariableDeclaration',
  start: 212,
  end: 221,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 216,
       end: 221,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
212
221
[ Node {
    type: 'VariableDeclarator',
    start: 216,
    end: 221,
    id: Node { type: 'Identifier', start: 216, end: 217, name: 'i' },
    init: Node { type: 'Literal', start: 220, end: 221, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 216,
  end: 221,
  id: Node { type: 'Identifier', start: 216, end: 217, name: 'i' },
  init: Node { type: 'Literal', start: 220, end: 221, value: 0, raw: '0' } }
VariableDeclarator
216
221
Node { type: 'Identifier', start: 216, end: 217, name: 'i' }
Identifier
216
217
i
Node { type: 'Literal', start: 220, end: 221, value: 0, raw: '0' }
Literal
220
221
0
0
var
Node {
  type: 'BinaryExpression',
  start: 223,
  end: 232,
  left: Node { type: 'Identifier', start: 223, end: 224, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 227,
     end: 232,
     value: 10000,
     raw: '10000' } }
BinaryExpression
223
232
Node { type: 'Identifier', start: 223, end: 224, name: 'i' }
Identifier
223
224
i
<
Node {
  type: 'Literal',
  start: 227,
  end: 232,
  value: 10000,
  raw: '10000' }
Literal
227
232
10000
10000
Node {
  type: 'UpdateExpression',
  start: 234,
  end: 237,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 236, end: 237, name: 'i' } }
UpdateExpression
234
237
++
true
Node { type: 'Identifier', start: 236, end: 237, name: 'i' }
Identifier
236
237
i
Node {
  type: 'BlockStatement',
  start: 239,
  end: 2366,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 245,
       end: 2364,
       expression: [Node] } ] }
BlockStatement
239
2366
[ Node {
    type: 'ExpressionStatement',
    start: 245,
    end: 2364,
    expression: 
     Node {
       type: 'CallExpression',
       start: 245,
       end: 2363,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'ExpressionStatement',
  start: 245,
  end: 2364,
  expression: 
   Node {
     type: 'CallExpression',
     start: 245,
     end: 2363,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 245,
        end: 2221,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [ [Node] ] } }
ExpressionStatement
245
2364
Node {
  type: 'CallExpression',
  start: 245,
  end: 2363,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 245,
     end: 2221,
     object: 
      Node {
        type: 'ArrayExpression',
        start: 245,
        end: 2213,
        elements: [Array] },
     property: Node { type: 'Identifier', start: 2214, end: 2221, name: 'forEach' },
     computed: false },
  arguments: 
   [ Node {
       type: 'FunctionExpression',
       start: 2222,
       end: 2362,
       id: null,
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] } ] }
CallExpression
245
2363
Node {
  type: 'MemberExpression',
  start: 245,
  end: 2221,
  object: 
   Node {
     type: 'ArrayExpression',
     start: 245,
     end: 2213,
     elements: 
      [ [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node] ] },
  property: Node { type: 'Identifier', start: 2214, end: 2221, name: 'forEach' },
  computed: false }
MemberExpression
245
2221
Node {
  type: 'ArrayExpression',
  start: 245,
  end: 2213,
  elements: 
   [ Node {
       type: 'UnaryExpression',
       start: 275,
       end: 286,
       operator: '-',
       prefix: true,
       argument: [Node] },
     Node {
       type: 'UnaryExpression',
       start: 315,
       end: 326,
       operator: '-',
       prefix: true,
       argument: [Node] },
     Node {
       type: 'UnaryExpression',
       start: 352,
       end: 354,
       operator: '-',
       prefix: true,
       argument: [Node] },
     Node { type: 'Literal', start: 386, end: 387, value: 0, raw: '0' },
     Node { type: 'Literal', start: 416, end: 417, value: 1, raw: '1' },
     Node {
       type: 'Literal',
       start: 450,
       end: 460,
       value: 2147483647,
       raw: '0x7fffffff' },
     Node {
       type: 'Literal',
       start: 487,
       end: 497,
       value: 2147483648,
       raw: '0x80000000' },
     Node {
       type: 'Literal',
       start: 527,
       end: 537,
       value: 4294967293,
       raw: '0xfffffffd' },
     Node {
       type: 'Literal',
       start: 584,
       end: 594,
       value: 4294967294,
       raw: '0xfffffffe' },
     Node {
       type: 'Literal',
       start: 631,
       end: 641,
       value: 4294967295,
       raw: '0xffffffff' },
     Node {
       type: 'Literal',
       start: 686,
       end: 697,
       value: 4294967296,
       raw: '0x100000000' },
     Node {
       type: 'CallExpression',
       start: 760,
       end: 784,
       callee: [Node],
       arguments: [] },
     Node {
       type: 'CallExpression',
       start: 813,
       end: 837,
       callee: [Node],
       arguments: [] },
     Node {
       type: 'CallExpression',
       start: 863,
       end: 878,
       callee: [Node],
       arguments: [] },
     Node {
       type: 'CallExpression',
       start: 910,
       end: 924,
       callee: [Node],
       arguments: [] },
     Node {
       type: 'CallExpression',
       start: 953,
       end: 967,
       callee: [Node],
       arguments: [] },
     Node {
       type: 'CallExpression',
       start: 1000,
       end: 1023,
       callee: [Node],
       arguments: [] },
     Node {
       type: 'CallExpression',
       start: 1050,
       end: 1073,
       callee: [Node],
       arguments: [] },
     Node {
       type: 'CallExpression',
       start: 1103,
       end: 1126,
       callee: [Node],
       arguments: [] },
     Node {
       type: 'CallExpression',
       start: 1173,
       end: 1196,
       callee: [Node],
       arguments: [] },
     Node {
       type: 'CallExpression',
       start: 1233,
       end: 1256,
       callee: [Node],
       arguments: [] },
     Node {
       type: 'CallExpression',
       start: 1297,
       end: 1321,
       callee: [Node],
       arguments: [] },
     Node {
       type: 'MemberExpression',
       start: 1371,
       end: 1387,
       object: [Node],
       property: [Node],
       computed: false },
     Node {
       type: 'MemberExpression',
       start: 1397,
       end: 1413,
       object: [Node],
       property: [Node],
       computed: false },
     Node {
       type: 'MemberExpression',
       start: 1423,
       end: 1446,
       object: [Node],
       property: [Node],
       computed: false },
     Node {
       type: 'MemberExpression',
       start: 1456,
       end: 1479,
       object: [Node],
       property: [Node],
       computed: false },
     Node {
       type: 'MemberExpression',
       start: 1489,
       end: 1513,
       object: [Node],
       property: [Node],
       computed: false },
     Node {
       type: 'MemberExpression',
       start: 1523,
       end: 1547,
       object: [Node],
       property: [Node],
       computed: false },
     Node {
       type: 'MemberExpression',
       start: 1557,
       end: 1567,
       object: [Node],
       property: [Node],
       computed: false },
     Node {
       type: 'MemberExpression',
       start: 1577,
       end: 1591,
       object: [Node],
       property: [Node],
       computed: false },
     Node {
       type: 'UnaryExpression',
       start: 1601,
       end: 1605,
       operator: '+',
       prefix: true,
       argument: [Node] },
     Node {
       type: 'UnaryExpression',
       start: 1615,
       end: 1619,
       operator: '-',
       prefix: true,
       argument: [Node] },
     Node { type: 'Literal', start: 1629, end: 1632, value: 0.1, raw: '0.1' },
     Node {
       type: 'UnaryExpression',
       start: 1642,
       end: 1646,
       operator: '-',
       prefix: true,
       argument: [Node] },
     Node { type: 'Literal', start: 1656, end: 1659, value: 4.2, raw: '4.2' },
     Node {
       type: 'UnaryExpression',
       start: 1669,
       end: 1673,
       operator: '-',
       prefix: true,
       argument: [Node] },
     Node {
       type: 'BinaryExpression',
       start: 1683,
       end: 1699,
       left: [Node],
       operator: '+',
       right: [Node] },
     Node {
       type: 'CallExpression',
       start: 1768,
       end: 1797,
       callee: [Node],
       arguments: [] },
     Node {
       type: 'CallExpression',
       start: 1807,
       end: 1836,
       callee: [Node],
       arguments: [] },
     Node {
       type: 'CallExpression',
       start: 1846,
       end: 1882,
       callee: [Node],
       arguments: [] },
     Node {
       type: 'CallExpression',
       start: 1892,
       end: 1928,
       callee: [Node],
       arguments: [] },
     Node {
       type: 'CallExpression',
       start: 1938,
       end: 1975,
       callee: [Node],
       arguments: [] },
     Node {
       type: 'CallExpression',
       start: 1985,
       end: 2022,
       callee: [Node],
       arguments: [] },
     Node {
       type: 'Literal',
       start: 2032,
       end: 2037,
       value: 'NaN',
       raw: '"NaN"' },
     Node {
       type: 'CallExpression',
       start: 2047,
       end: 2074,
       callee: [Node],
       arguments: [] },
     Node {
       type: 'Literal',
       start: 2084,
       end: 2090,
       value: '+0.0',
       raw: '"+0.0"' },
     Node {
       type: 'Literal',
       start: 2100,
       end: 2106,
       value: '-0.0',
       raw: '"-0.0"' },
     Node {
       type: 'Literal',
       start: 2116,
       end: 2121,
       value: '0.1',
       raw: '"0.1"' },
     Node {
       type: 'Literal',
       start: 2131,
       end: 2137,
       value: '-0.1',
       raw: '"-0.1"' },
     Node {
       type: 'Literal',
       start: 2147,
       end: 2152,
       value: '4.2',
       raw: '"4.2"' },
     Node {
       type: 'Literal',
       start: 2162,
       end: 2168,
       value: '-4.2',
       raw: '"-4.2"' },
     Node {
       type: 'CallExpression',
       start: 2178,
       end: 2207,
       callee: [Node],
       arguments: [] } ] }
ArrayExpression
245
2213
[ Node {
    type: 'UnaryExpression',
    start: 275,
    end: 286,
    operator: '-',
    prefix: true,
    argument: 
     Node {
       type: 'Literal',
       start: 276,
       end: 286,
       value: 2147483649,
       raw: '0x80000001' } },
  Node {
    type: 'UnaryExpression',
    start: 315,
    end: 326,
    operator: '-',
    prefix: true,
    argument: 
     Node {
       type: 'Literal',
       start: 316,
       end: 326,
       value: 2147483648,
       raw: '0x80000000' } },
  Node {
    type: 'UnaryExpression',
    start: 352,
    end: 354,
    operator: '-',
    prefix: true,
    argument: Node { type: 'Literal', start: 353, end: 354, value: 1, raw: '1' } },
  Node { type: 'Literal', start: 386, end: 387, value: 0, raw: '0' },
  Node { type: 'Literal', start: 416, end: 417, value: 1, raw: '1' },
  Node {
    type: 'Literal',
    start: 450,
    end: 460,
    value: 2147483647,
    raw: '0x7fffffff' },
  Node {
    type: 'Literal',
    start: 487,
    end: 497,
    value: 2147483648,
    raw: '0x80000000' },
  Node {
    type: 'Literal',
    start: 527,
    end: 537,
    value: 4294967293,
    raw: '0xfffffffd' },
  Node {
    type: 'Literal',
    start: 584,
    end: 594,
    value: 4294967294,
    raw: '0xfffffffe' },
  Node {
    type: 'Literal',
    start: 631,
    end: 641,
    value: 4294967295,
    raw: '0xffffffff' },
  Node {
    type: 'Literal',
    start: 686,
    end: 697,
    value: 4294967296,
    raw: '0x100000000' },
  Node {
    type: 'CallExpression',
    start: 760,
    end: 784,
    callee: 
     Node {
       type: 'MemberExpression',
       start: 760,
       end: 782,
       object: [Node],
       property: [Node],
       computed: false },
    arguments: [] },
  Node {
    type: 'CallExpression',
    start: 813,
    end: 837,
    callee: 
     Node {
       type: 'MemberExpression',
       start: 813,
       end: 835,
       object: [Node],
       property: [Node],
       computed: false },
    arguments: [] },
  Node {
    type: 'CallExpression',
    start: 863,
    end: 878,
    callee: 
     Node {
       type: 'MemberExpression',
       start: 863,
       end: 876,
       object: [Node],
       property: [Node],
       computed: false },
    arguments: [] },
  Node {
    type: 'CallExpression',
    start: 910,
    end: 924,
    callee: 
     Node {
       type: 'MemberExpression',
       start: 910,
       end: 922,
       object: [Node],
       property: [Node],
       computed: false },
    arguments: [] },
  Node {
    type: 'CallExpression',
    start: 953,
    end: 967,
    callee: 
     Node {
       type: 'MemberExpression',
       start: 953,
       end: 965,
       object: [Node],
       property: [Node],
       computed: false },
    arguments: [] },
  Node {
    type: 'CallExpression',
    start: 1000,
    end: 1023,
    callee: 
     Node {
       type: 'MemberExpression',
       start: 1000,
       end: 1021,
       object: [Node],
       property: [Node],
       computed: false },
    arguments: [] },
  Node {
    type: 'CallExpression',
    start: 1050,
    end: 1073,
    callee: 
     Node {
       type: 'MemberExpression',
       start: 1050,
       end: 1071,
       object: [Node],
       property: [Node],
       computed: false },
    arguments: [] },
  Node {
    type: 'CallExpression',
    start: 1103,
    end: 1126,
    callee: 
     Node {
       type: 'MemberExpression',
       start: 1103,
       end: 1124,
       object: [Node],
       property: [Node],
       computed: false },
    arguments: [] },
  Node {
    type: 'CallExpression',
    start: 1173,
    end: 1196,
    callee: 
     Node {
       type: 'MemberExpression',
       start: 1173,
       end: 1194,
       object: [Node],
       property: [Node],
       computed: false },
    arguments: [] },
  Node {
    type: 'CallExpression',
    start: 1233,
    end: 1256,
    callee: 
     Node {
       type: 'MemberExpression',
       start: 1233,
       end: 1254,
       object: [Node],
       property: [Node],
       computed: false },
    arguments: [] },
  Node {
    type: 'CallExpression',
    start: 1297,
    end: 1321,
    callee: 
     Node {
       type: 'MemberExpression',
       start: 1297,
       end: 1319,
       object: [Node],
       property: [Node],
       computed: false },
    arguments: [] },
  Node {
    type: 'MemberExpression',
    start: 1371,
    end: 1387,
    object: Node { type: 'Identifier', start: 1371, end: 1377, name: 'Number' },
    property: Node { type: 'Identifier', start: 1378, end: 1387, name: 'MIN_VALUE' },
    computed: false },
  Node {
    type: 'MemberExpression',
    start: 1397,
    end: 1413,
    object: Node { type: 'Identifier', start: 1397, end: 1403, name: 'Number' },
    property: Node { type: 'Identifier', start: 1404, end: 1413, name: 'MAX_VALUE' },
    computed: false },
  Node {
    type: 'MemberExpression',
    start: 1423,
    end: 1446,
    object: Node { type: 'Identifier', start: 1423, end: 1429, name: 'Number' },
    property: 
     Node {
       type: 'Identifier',
       start: 1430,
       end: 1446,
       name: 'MIN_SAFE_INTEGER' },
    computed: false },
  Node {
    type: 'MemberExpression',
    start: 1456,
    end: 1479,
    object: Node { type: 'Identifier', start: 1456, end: 1462, name: 'Number' },
    property: 
     Node {
       type: 'Identifier',
       start: 1463,
       end: 1479,
       name: 'MAX_SAFE_INTEGER' },
    computed: false },
  Node {
    type: 'MemberExpression',
    start: 1489,
    end: 1513,
    object: Node { type: 'Identifier', start: 1489, end: 1495, name: 'Number' },
    property: 
     Node {
       type: 'Identifier',
       start: 1496,
       end: 1513,
       name: 'POSITIVE_INFINITY' },
    computed: false },
  Node {
    type: 'MemberExpression',
    start: 1523,
    end: 1547,
    object: Node { type: 'Identifier', start: 1523, end: 1529, name: 'Number' },
    property: 
     Node {
       type: 'Identifier',
       start: 1530,
       end: 1547,
       name: 'NEGATIVE_INFINITY' },
    computed: false },
  Node {
    type: 'MemberExpression',
    start: 1557,
    end: 1567,
    object: Node { type: 'Identifier', start: 1557, end: 1563, name: 'Number' },
    property: Node { type: 'Identifier', start: 1564, end: 1567, name: 'NaN' },
    computed: false },
  Node {
    type: 'MemberExpression',
    start: 1577,
    end: 1591,
    object: Node { type: 'Identifier', start: 1577, end: 1583, name: 'Number' },
    property: Node { type: 'Identifier', start: 1584, end: 1591, name: 'EPSILON' },
    computed: false },
  Node {
    type: 'UnaryExpression',
    start: 1601,
    end: 1605,
    operator: '+',
    prefix: true,
    argument: Node { type: 'Literal', start: 1602, end: 1605, value: 0, raw: '0.0' } },
  Node {
    type: 'UnaryExpression',
    start: 1615,
    end: 1619,
    operator: '-',
    prefix: true,
    argument: Node { type: 'Literal', start: 1616, end: 1619, value: 0, raw: '0.0' } },
  Node { type: 'Literal', start: 1629, end: 1632, value: 0.1, raw: '0.1' },
  Node {
    type: 'UnaryExpression',
    start: 1642,
    end: 1646,
    operator: '-',
    prefix: true,
    argument: Node { type: 'Literal', start: 1643, end: 1646, value: 0.1, raw: '0.1' } },
  Node { type: 'Literal', start: 1656, end: 1659, value: 4.2, raw: '4.2' },
  Node {
    type: 'UnaryExpression',
    start: 1669,
    end: 1673,
    operator: '-',
    prefix: true,
    argument: Node { type: 'Literal', start: 1670, end: 1673, value: 4.2, raw: '4.2' } },
  Node {
    type: 'BinaryExpression',
    start: 1683,
    end: 1699,
    left: 
     Node {
       type: 'Literal',
       start: 1683,
       end: 1693,
       value: 2147483648,
       raw: '0x80000000' },
    operator: '+',
    right: Node { type: 'Literal', start: 1696, end: 1699, value: 0.5, raw: '0.5' } },
  Node {
    type: 'CallExpression',
    start: 1768,
    end: 1797,
    callee: 
     Node {
       type: 'MemberExpression',
       start: 1768,
       end: 1795,
       object: [Node],
       property: [Node],
       computed: false },
    arguments: [] },
  Node {
    type: 'CallExpression',
    start: 1807,
    end: 1836,
    callee: 
     Node {
       type: 'MemberExpression',
       start: 1807,
       end: 1834,
       object: [Node],
       property: [Node],
       computed: false },
    arguments: [] },
  Node {
    type: 'CallExpression',
    start: 1846,
    end: 1882,
    callee: 
     Node {
       type: 'MemberExpression',
       start: 1846,
       end: 1880,
       object: [Node],
       property: [Node],
       computed: false },
    arguments: [] },
  Node {
    type: 'CallExpression',
    start: 1892,
    end: 1928,
    callee: 
     Node {
       type: 'MemberExpression',
       start: 1892,
       end: 1926,
       object: [Node],
       property: [Node],
       computed: false },
    arguments: [] },
  Node {
    type: 'CallExpression',
    start: 1938,
    end: 1975,
    callee: 
     Node {
       type: 'MemberExpression',
       start: 1938,
       end: 1973,
       object: [Node],
       property: [Node],
       computed: false },
    arguments: [] },
  Node {
    type: 'CallExpression',
    start: 1985,
    end: 2022,
    callee: 
     Node {
       type: 'MemberExpression',
       start: 1985,
       end: 2020,
       object: [Node],
       property: [Node],
       computed: false },
    arguments: [] },
  Node {
    type: 'Literal',
    start: 2032,
    end: 2037,
    value: 'NaN',
    raw: '"NaN"' },
  Node {
    type: 'CallExpression',
    start: 2047,
    end: 2074,
    callee: 
     Node {
       type: 'MemberExpression',
       start: 2047,
       end: 2072,
       object: [Node],
       property: [Node],
       computed: false },
    arguments: [] },
  Node {
    type: 'Literal',
    start: 2084,
    end: 2090,
    value: '+0.0',
    raw: '"+0.0"' },
  Node {
    type: 'Literal',
    start: 2100,
    end: 2106,
    value: '-0.0',
    raw: '"-0.0"' },
  Node {
    type: 'Literal',
    start: 2116,
    end: 2121,
    value: '0.1',
    raw: '"0.1"' },
  Node {
    type: 'Literal',
    start: 2131,
    end: 2137,
    value: '-0.1',
    raw: '"-0.1"' },
  Node {
    type: 'Literal',
    start: 2147,
    end: 2152,
    value: '4.2',
    raw: '"4.2"' },
  Node {
    type: 'Literal',
    start: 2162,
    end: 2168,
    value: '-4.2',
    raw: '"-4.2"' },
  Node {
    type: 'CallExpression',
    start: 2178,
    end: 2207,
    callee: 
     Node {
       type: 'MemberExpression',
       start: 2178,
       end: 2205,
       object: [Node],
       property: [Node],
       computed: false },
    arguments: [] } ]
Node {
  type: 'UnaryExpression',
  start: 275,
  end: 286,
  operator: '-',
  prefix: true,
  argument: 
   Node {
     type: 'Literal',
     start: 276,
     end: 286,
     value: 2147483649,
     raw: '0x80000001' } }
UnaryExpression
275
286
-
true
Node {
  type: 'Literal',
  start: 276,
  end: 286,
  value: 2147483649,
  raw: '0x80000001' }
Literal
276
286
2147483649
0x80000001
Node {
  type: 'UnaryExpression',
  start: 315,
  end: 326,
  operator: '-',
  prefix: true,
  argument: 
   Node {
     type: 'Literal',
     start: 316,
     end: 326,
     value: 2147483648,
     raw: '0x80000000' } }
UnaryExpression
315
326
-
true
Node {
  type: 'Literal',
  start: 316,
  end: 326,
  value: 2147483648,
  raw: '0x80000000' }
Literal
316
326
2147483648
0x80000000
Node {
  type: 'UnaryExpression',
  start: 352,
  end: 354,
  operator: '-',
  prefix: true,
  argument: Node { type: 'Literal', start: 353, end: 354, value: 1, raw: '1' } }
UnaryExpression
352
354
-
true
Node { type: 'Literal', start: 353, end: 354, value: 1, raw: '1' }
Literal
353
354
1
1
Node { type: 'Literal', start: 386, end: 387, value: 0, raw: '0' }
Literal
386
387
0
0
Node { type: 'Literal', start: 416, end: 417, value: 1, raw: '1' }
Literal
416
417
1
1
Node {
  type: 'Literal',
  start: 450,
  end: 460,
  value: 2147483647,
  raw: '0x7fffffff' }
Literal
450
460
2147483647
0x7fffffff
Node {
  type: 'Literal',
  start: 487,
  end: 497,
  value: 2147483648,
  raw: '0x80000000' }
Literal
487
497
2147483648
0x80000000
Node {
  type: 'Literal',
  start: 527,
  end: 537,
  value: 4294967293,
  raw: '0xfffffffd' }
Literal
527
537
4294967293
0xfffffffd
Node {
  type: 'Literal',
  start: 584,
  end: 594,
  value: 4294967294,
  raw: '0xfffffffe' }
Literal
584
594
4294967294
0xfffffffe
Node {
  type: 'Literal',
  start: 631,
  end: 641,
  value: 4294967295,
  raw: '0xffffffff' }
Literal
631
641
4294967295
0xffffffff
Node {
  type: 'Literal',
  start: 686,
  end: 697,
  value: 4294967296,
  raw: '0x100000000' }
Literal
686
697
4294967296
0x100000000
Node {
  type: 'CallExpression',
  start: 760,
  end: 784,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 760,
     end: 782,
     object: 
      Node {
        type: 'UnaryExpression',
        start: 761,
        end: 772,
        operator: '-',
        prefix: true,
        argument: [Node] },
     property: Node { type: 'Identifier', start: 774, end: 782, name: 'toString' },
     computed: false },
  arguments: [] }
CallExpression
760
784
Node {
  type: 'MemberExpression',
  start: 760,
  end: 782,
  object: 
   Node {
     type: 'UnaryExpression',
     start: 761,
     end: 772,
     operator: '-',
     prefix: true,
     argument: 
      Node {
        type: 'Literal',
        start: 762,
        end: 772,
        value: 2147483649,
        raw: '0x80000001' } },
  property: Node { type: 'Identifier', start: 774, end: 782, name: 'toString' },
  computed: false }
MemberExpression
760
782
Node {
  type: 'UnaryExpression',
  start: 761,
  end: 772,
  operator: '-',
  prefix: true,
  argument: 
   Node {
     type: 'Literal',
     start: 762,
     end: 772,
     value: 2147483649,
     raw: '0x80000001' } }
UnaryExpression
761
772
-
true
Node {
  type: 'Literal',
  start: 762,
  end: 772,
  value: 2147483649,
  raw: '0x80000001' }
Literal
762
772
2147483649
0x80000001
Node { type: 'Identifier', start: 774, end: 782, name: 'toString' }
Identifier
774
782
toString
false
[]
Node {
  type: 'CallExpression',
  start: 813,
  end: 837,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 813,
     end: 835,
     object: 
      Node {
        type: 'UnaryExpression',
        start: 814,
        end: 825,
        operator: '-',
        prefix: true,
        argument: [Node] },
     property: Node { type: 'Identifier', start: 827, end: 835, name: 'toString' },
     computed: false },
  arguments: [] }
CallExpression
813
837
Node {
  type: 'MemberExpression',
  start: 813,
  end: 835,
  object: 
   Node {
     type: 'UnaryExpression',
     start: 814,
     end: 825,
     operator: '-',
     prefix: true,
     argument: 
      Node {
        type: 'Literal',
        start: 815,
        end: 825,
        value: 2147483648,
        raw: '0x80000000' } },
  property: Node { type: 'Identifier', start: 827, end: 835, name: 'toString' },
  computed: false }
MemberExpression
813
835
Node {
  type: 'UnaryExpression',
  start: 814,
  end: 825,
  operator: '-',
  prefix: true,
  argument: 
   Node {
     type: 'Literal',
     start: 815,
     end: 825,
     value: 2147483648,
     raw: '0x80000000' } }
UnaryExpression
814
825
-
true
Node {
  type: 'Literal',
  start: 815,
  end: 825,
  value: 2147483648,
  raw: '0x80000000' }
Literal
815
825
2147483648
0x80000000
Node { type: 'Identifier', start: 827, end: 835, name: 'toString' }
Identifier
827
835
toString
false
[]
Node {
  type: 'CallExpression',
  start: 863,
  end: 878,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 863,
     end: 876,
     object: 
      Node {
        type: 'UnaryExpression',
        start: 864,
        end: 866,
        operator: '-',
        prefix: true,
        argument: [Node] },
     property: Node { type: 'Identifier', start: 868, end: 876, name: 'toString' },
     computed: false },
  arguments: [] }
CallExpression
863
878
Node {
  type: 'MemberExpression',
  start: 863,
  end: 876,
  object: 
   Node {
     type: 'UnaryExpression',
     start: 864,
     end: 866,
     operator: '-',
     prefix: true,
     argument: Node { type: 'Literal', start: 865, end: 866, value: 1, raw: '1' } },
  property: Node { type: 'Identifier', start: 868, end: 876, name: 'toString' },
  computed: false }
MemberExpression
863
876
Node {
  type: 'UnaryExpression',
  start: 864,
  end: 866,
  operator: '-',
  prefix: true,
  argument: Node { type: 'Literal', start: 865, end: 866, value: 1, raw: '1' } }
UnaryExpression
864
866
-
true
Node { type: 'Literal', start: 865, end: 866, value: 1, raw: '1' }
Literal
865
866
1
1
Node { type: 'Identifier', start: 868, end: 876, name: 'toString' }
Identifier
868
876
toString
false
[]
Node {
  type: 'CallExpression',
  start: 910,
  end: 924,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 910,
     end: 922,
     object: Node { type: 'Literal', start: 911, end: 912, value: 0, raw: '0' },
     property: Node { type: 'Identifier', start: 914, end: 922, name: 'toString' },
     computed: false },
  arguments: [] }
CallExpression
910
924
Node {
  type: 'MemberExpression',
  start: 910,
  end: 922,
  object: Node { type: 'Literal', start: 911, end: 912, value: 0, raw: '0' },
  property: Node { type: 'Identifier', start: 914, end: 922, name: 'toString' },
  computed: false }
MemberExpression
910
922
Node { type: 'Literal', start: 911, end: 912, value: 0, raw: '0' }
Literal
911
912
0
0
Node { type: 'Identifier', start: 914, end: 922, name: 'toString' }
Identifier
914
922
toString
false
[]
Node {
  type: 'CallExpression',
  start: 953,
  end: 967,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 953,
     end: 965,
     object: Node { type: 'Literal', start: 954, end: 955, value: 1, raw: '1' },
     property: Node { type: 'Identifier', start: 957, end: 965, name: 'toString' },
     computed: false },
  arguments: [] }
CallExpression
953
967
Node {
  type: 'MemberExpression',
  start: 953,
  end: 965,
  object: Node { type: 'Literal', start: 954, end: 955, value: 1, raw: '1' },
  property: Node { type: 'Identifier', start: 957, end: 965, name: 'toString' },
  computed: false }
MemberExpression
953
965
Node { type: 'Literal', start: 954, end: 955, value: 1, raw: '1' }
Literal
954
955
1
1
Node { type: 'Identifier', start: 957, end: 965, name: 'toString' }
Identifier
957
965
toString
false
[]
Node {
  type: 'CallExpression',
  start: 1000,
  end: 1023,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 1000,
     end: 1021,
     object: 
      Node {
        type: 'Literal',
        start: 1001,
        end: 1011,
        value: 2147483647,
        raw: '0x7fffffff' },
     property: Node { type: 'Identifier', start: 1013, end: 1021, name: 'toString' },
     computed: false },
  arguments: [] }
CallExpression
1000
1023
Node {
  type: 'MemberExpression',
  start: 1000,
  end: 1021,
  object: 
   Node {
     type: 'Literal',
     start: 1001,
     end: 1011,
     value: 2147483647,
     raw: '0x7fffffff' },
  property: Node { type: 'Identifier', start: 1013, end: 1021, name: 'toString' },
  computed: false }
MemberExpression
1000
1021
Node {
  type: 'Literal',
  start: 1001,
  end: 1011,
  value: 2147483647,
  raw: '0x7fffffff' }
Literal
1001
1011
2147483647
0x7fffffff
Node { type: 'Identifier', start: 1013, end: 1021, name: 'toString' }
Identifier
1013
1021
toString
false
[]
Node {
  type: 'CallExpression',
  start: 1050,
  end: 1073,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 1050,
     end: 1071,
     object: 
      Node {
        type: 'Literal',
        start: 1051,
        end: 1061,
        value: 2147483648,
        raw: '0x80000000' },
     property: Node { type: 'Identifier', start: 1063, end: 1071, name: 'toString' },
     computed: false },
  arguments: [] }
CallExpression
1050
1073
Node {
  type: 'MemberExpression',
  start: 1050,
  end: 1071,
  object: 
   Node {
     type: 'Literal',
     start: 1051,
     end: 1061,
     value: 2147483648,
     raw: '0x80000000' },
  property: Node { type: 'Identifier', start: 1063, end: 1071, name: 'toString' },
  computed: false }
MemberExpression
1050
1071
Node {
  type: 'Literal',
  start: 1051,
  end: 1061,
  value: 2147483648,
  raw: '0x80000000' }
Literal
1051
1061
2147483648
0x80000000
Node { type: 'Identifier', start: 1063, end: 1071, name: 'toString' }
Identifier
1063
1071
toString
false
[]
Node {
  type: 'CallExpression',
  start: 1103,
  end: 1126,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 1103,
     end: 1124,
     object: 
      Node {
        type: 'Literal',
        start: 1104,
        end: 1114,
        value: 4294967293,
        raw: '0xfffffffd' },
     property: Node { type: 'Identifier', start: 1116, end: 1124, name: 'toString' },
     computed: false },
  arguments: [] }
CallExpression
1103
1126
Node {
  type: 'MemberExpression',
  start: 1103,
  end: 1124,
  object: 
   Node {
     type: 'Literal',
     start: 1104,
     end: 1114,
     value: 4294967293,
     raw: '0xfffffffd' },
  property: Node { type: 'Identifier', start: 1116, end: 1124, name: 'toString' },
  computed: false }
MemberExpression
1103
1124
Node {
  type: 'Literal',
  start: 1104,
  end: 1114,
  value: 4294967293,
  raw: '0xfffffffd' }
Literal
1104
1114
4294967293
0xfffffffd
Node { type: 'Identifier', start: 1116, end: 1124, name: 'toString' }
Identifier
1116
1124
toString
false
[]
Node {
  type: 'CallExpression',
  start: 1173,
  end: 1196,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 1173,
     end: 1194,
     object: 
      Node {
        type: 'Literal',
        start: 1174,
        end: 1184,
        value: 4294967294,
        raw: '0xfffffffe' },
     property: Node { type: 'Identifier', start: 1186, end: 1194, name: 'toString' },
     computed: false },
  arguments: [] }
CallExpression
1173
1196
Node {
  type: 'MemberExpression',
  start: 1173,
  end: 1194,
  object: 
   Node {
     type: 'Literal',
     start: 1174,
     end: 1184,
     value: 4294967294,
     raw: '0xfffffffe' },
  property: Node { type: 'Identifier', start: 1186, end: 1194, name: 'toString' },
  computed: false }
MemberExpression
1173
1194
Node {
  type: 'Literal',
  start: 1174,
  end: 1184,
  value: 4294967294,
  raw: '0xfffffffe' }
Literal
1174
1184
4294967294
0xfffffffe
Node { type: 'Identifier', start: 1186, end: 1194, name: 'toString' }
Identifier
1186
1194
toString
false
[]
Node {
  type: 'CallExpression',
  start: 1233,
  end: 1256,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 1233,
     end: 1254,
     object: 
      Node {
        type: 'Literal',
        start: 1234,
        end: 1244,
        value: 4294967295,
        raw: '0xffffffff' },
     property: Node { type: 'Identifier', start: 1246, end: 1254, name: 'toString' },
     computed: false },
  arguments: [] }
CallExpression
1233
1256
Node {
  type: 'MemberExpression',
  start: 1233,
  end: 1254,
  object: 
   Node {
     type: 'Literal',
     start: 1234,
     end: 1244,
     value: 4294967295,
     raw: '0xffffffff' },
  property: Node { type: 'Identifier', start: 1246, end: 1254, name: 'toString' },
  computed: false }
MemberExpression
1233
1254
Node {
  type: 'Literal',
  start: 1234,
  end: 1244,
  value: 4294967295,
  raw: '0xffffffff' }
Literal
1234
1244
4294967295
0xffffffff
Node { type: 'Identifier', start: 1246, end: 1254, name: 'toString' }
Identifier
1246
1254
toString
false
[]
Node {
  type: 'CallExpression',
  start: 1297,
  end: 1321,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 1297,
     end: 1319,
     object: 
      Node {
        type: 'Literal',
        start: 1298,
        end: 1309,
        value: 4294967296,
        raw: '0x100000000' },
     property: Node { type: 'Identifier', start: 1311, end: 1319, name: 'toString' },
     computed: false },
  arguments: [] }
CallExpression
1297
1321
Node {
  type: 'MemberExpression',
  start: 1297,
  end: 1319,
  object: 
   Node {
     type: 'Literal',
     start: 1298,
     end: 1309,
     value: 4294967296,
     raw: '0x100000000' },
  property: Node { type: 'Identifier', start: 1311, end: 1319, name: 'toString' },
  computed: false }
MemberExpression
1297
1319
Node {
  type: 'Literal',
  start: 1298,
  end: 1309,
  value: 4294967296,
  raw: '0x100000000' }
Literal
1298
1309
4294967296
0x100000000
Node { type: 'Identifier', start: 1311, end: 1319, name: 'toString' }
Identifier
1311
1319
toString
false
[]
Node {
  type: 'MemberExpression',
  start: 1371,
  end: 1387,
  object: Node { type: 'Identifier', start: 1371, end: 1377, name: 'Number' },
  property: Node { type: 'Identifier', start: 1378, end: 1387, name: 'MIN_VALUE' },
  computed: false }
MemberExpression
1371
1387
Node { type: 'Identifier', start: 1371, end: 1377, name: 'Number' }
Identifier
1371
1377
Number
Node { type: 'Identifier', start: 1378, end: 1387, name: 'MIN_VALUE' }
Identifier
1378
1387
MIN_VALUE
false
Node {
  type: 'MemberExpression',
  start: 1397,
  end: 1413,
  object: Node { type: 'Identifier', start: 1397, end: 1403, name: 'Number' },
  property: Node { type: 'Identifier', start: 1404, end: 1413, name: 'MAX_VALUE' },
  computed: false }
MemberExpression
1397
1413
Node { type: 'Identifier', start: 1397, end: 1403, name: 'Number' }
Identifier
1397
1403
Number
Node { type: 'Identifier', start: 1404, end: 1413, name: 'MAX_VALUE' }
Identifier
1404
1413
MAX_VALUE
false
Node {
  type: 'MemberExpression',
  start: 1423,
  end: 1446,
  object: Node { type: 'Identifier', start: 1423, end: 1429, name: 'Number' },
  property: 
   Node {
     type: 'Identifier',
     start: 1430,
     end: 1446,
     name: 'MIN_SAFE_INTEGER' },
  computed: false }
MemberExpression
1423
1446
Node { type: 'Identifier', start: 1423, end: 1429, name: 'Number' }
Identifier
1423
1429
Number
Node {
  type: 'Identifier',
  start: 1430,
  end: 1446,
  name: 'MIN_SAFE_INTEGER' }
Identifier
1430
1446
MIN_SAFE_INTEGER
false
Node {
  type: 'MemberExpression',
  start: 1456,
  end: 1479,
  object: Node { type: 'Identifier', start: 1456, end: 1462, name: 'Number' },
  property: 
   Node {
     type: 'Identifier',
     start: 1463,
     end: 1479,
     name: 'MAX_SAFE_INTEGER' },
  computed: false }
MemberExpression
1456
1479
Node { type: 'Identifier', start: 1456, end: 1462, name: 'Number' }
Identifier
1456
1462
Number
Node {
  type: 'Identifier',
  start: 1463,
  end: 1479,
  name: 'MAX_SAFE_INTEGER' }
Identifier
1463
1479
MAX_SAFE_INTEGER
false
Node {
  type: 'MemberExpression',
  start: 1489,
  end: 1513,
  object: Node { type: 'Identifier', start: 1489, end: 1495, name: 'Number' },
  property: 
   Node {
     type: 'Identifier',
     start: 1496,
     end: 1513,
     name: 'POSITIVE_INFINITY' },
  computed: false }
MemberExpression
1489
1513
Node { type: 'Identifier', start: 1489, end: 1495, name: 'Number' }
Identifier
1489
1495
Number
Node {
  type: 'Identifier',
  start: 1496,
  end: 1513,
  name: 'POSITIVE_INFINITY' }
Identifier
1496
1513
POSITIVE_INFINITY
false
Node {
  type: 'MemberExpression',
  start: 1523,
  end: 1547,
  object: Node { type: 'Identifier', start: 1523, end: 1529, name: 'Number' },
  property: 
   Node {
     type: 'Identifier',
     start: 1530,
     end: 1547,
     name: 'NEGATIVE_INFINITY' },
  computed: false }
MemberExpression
1523
1547
Node { type: 'Identifier', start: 1523, end: 1529, name: 'Number' }
Identifier
1523
1529
Number
Node {
  type: 'Identifier',
  start: 1530,
  end: 1547,
  name: 'NEGATIVE_INFINITY' }
Identifier
1530
1547
NEGATIVE_INFINITY
false
Node {
  type: 'MemberExpression',
  start: 1557,
  end: 1567,
  object: Node { type: 'Identifier', start: 1557, end: 1563, name: 'Number' },
  property: Node { type: 'Identifier', start: 1564, end: 1567, name: 'NaN' },
  computed: false }
MemberExpression
1557
1567
Node { type: 'Identifier', start: 1557, end: 1563, name: 'Number' }
Identifier
1557
1563
Number
Node { type: 'Identifier', start: 1564, end: 1567, name: 'NaN' }
Identifier
1564
1567
NaN
false
Node {
  type: 'MemberExpression',
  start: 1577,
  end: 1591,
  object: Node { type: 'Identifier', start: 1577, end: 1583, name: 'Number' },
  property: Node { type: 'Identifier', start: 1584, end: 1591, name: 'EPSILON' },
  computed: false }
MemberExpression
1577
1591
Node { type: 'Identifier', start: 1577, end: 1583, name: 'Number' }
Identifier
1577
1583
Number
Node { type: 'Identifier', start: 1584, end: 1591, name: 'EPSILON' }
Identifier
1584
1591
EPSILON
false
Node {
  type: 'UnaryExpression',
  start: 1601,
  end: 1605,
  operator: '+',
  prefix: true,
  argument: Node { type: 'Literal', start: 1602, end: 1605, value: 0, raw: '0.0' } }
UnaryExpression
1601
1605
+
true
Node { type: 'Literal', start: 1602, end: 1605, value: 0, raw: '0.0' }
Literal
1602
1605
0
0.0
Node {
  type: 'UnaryExpression',
  start: 1615,
  end: 1619,
  operator: '-',
  prefix: true,
  argument: Node { type: 'Literal', start: 1616, end: 1619, value: 0, raw: '0.0' } }
UnaryExpression
1615
1619
-
true
Node { type: 'Literal', start: 1616, end: 1619, value: 0, raw: '0.0' }
Literal
1616
1619
0
0.0
Node { type: 'Literal', start: 1629, end: 1632, value: 0.1, raw: '0.1' }
Literal
1629
1632
0.1
0.1
Node {
  type: 'UnaryExpression',
  start: 1642,
  end: 1646,
  operator: '-',
  prefix: true,
  argument: Node { type: 'Literal', start: 1643, end: 1646, value: 0.1, raw: '0.1' } }
UnaryExpression
1642
1646
-
true
Node { type: 'Literal', start: 1643, end: 1646, value: 0.1, raw: '0.1' }
Literal
1643
1646
0.1
0.1
Node { type: 'Literal', start: 1656, end: 1659, value: 4.2, raw: '4.2' }
Literal
1656
1659
4.2
4.2
Node {
  type: 'UnaryExpression',
  start: 1669,
  end: 1673,
  operator: '-',
  prefix: true,
  argument: Node { type: 'Literal', start: 1670, end: 1673, value: 4.2, raw: '4.2' } }
UnaryExpression
1669
1673
-
true
Node { type: 'Literal', start: 1670, end: 1673, value: 4.2, raw: '4.2' }
Literal
1670
1673
4.2
4.2
Node {
  type: 'BinaryExpression',
  start: 1683,
  end: 1699,
  left: 
   Node {
     type: 'Literal',
     start: 1683,
     end: 1693,
     value: 2147483648,
     raw: '0x80000000' },
  operator: '+',
  right: Node { type: 'Literal', start: 1696, end: 1699, value: 0.5, raw: '0.5' } }
BinaryExpression
1683
1699
Node {
  type: 'Literal',
  start: 1683,
  end: 1693,
  value: 2147483648,
  raw: '0x80000000' }
Literal
1683
1693
2147483648
0x80000000
+
Node { type: 'Literal', start: 1696, end: 1699, value: 0.5, raw: '0.5' }
Literal
1696
1699
0.5
0.5
Node {
  type: 'CallExpression',
  start: 1768,
  end: 1797,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 1768,
     end: 1795,
     object: 
      Node {
        type: 'MemberExpression',
        start: 1769,
        end: 1785,
        object: [Node],
        property: [Node],
        computed: false },
     property: Node { type: 'Identifier', start: 1787, end: 1795, name: 'toString' },
     computed: false },
  arguments: [] }
CallExpression
1768
1797
Node {
  type: 'MemberExpression',
  start: 1768,
  end: 1795,
  object: 
   Node {
     type: 'MemberExpression',
     start: 1769,
     end: 1785,
     object: Node { type: 'Identifier', start: 1769, end: 1775, name: 'Number' },
     property: Node { type: 'Identifier', start: 1776, end: 1785, name: 'MIN_VALUE' },
     computed: false },
  property: Node { type: 'Identifier', start: 1787, end: 1795, name: 'toString' },
  computed: false }
MemberExpression
1768
1795
Node {
  type: 'MemberExpression',
  start: 1769,
  end: 1785,
  object: Node { type: 'Identifier', start: 1769, end: 1775, name: 'Number' },
  property: Node { type: 'Identifier', start: 1776, end: 1785, name: 'MIN_VALUE' },
  computed: false }
MemberExpression
1769
1785
Node { type: 'Identifier', start: 1769, end: 1775, name: 'Number' }
Identifier
1769
1775
Number
Node { type: 'Identifier', start: 1776, end: 1785, name: 'MIN_VALUE' }
Identifier
1776
1785
MIN_VALUE
false
Node { type: 'Identifier', start: 1787, end: 1795, name: 'toString' }
Identifier
1787
1795
toString
false
[]
Node {
  type: 'CallExpression',
  start: 1807,
  end: 1836,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 1807,
     end: 1834,
     object: 
      Node {
        type: 'MemberExpression',
        start: 1808,
        end: 1824,
        object: [Node],
        property: [Node],
        computed: false },
     property: Node { type: 'Identifier', start: 1826, end: 1834, name: 'toString' },
     computed: false },
  arguments: [] }
CallExpression
1807
1836
Node {
  type: 'MemberExpression',
  start: 1807,
  end: 1834,
  object: 
   Node {
     type: 'MemberExpression',
     start: 1808,
     end: 1824,
     object: Node { type: 'Identifier', start: 1808, end: 1814, name: 'Number' },
     property: Node { type: 'Identifier', start: 1815, end: 1824, name: 'MAX_VALUE' },
     computed: false },
  property: Node { type: 'Identifier', start: 1826, end: 1834, name: 'toString' },
  computed: false }
MemberExpression
1807
1834
Node {
  type: 'MemberExpression',
  start: 1808,
  end: 1824,
  object: Node { type: 'Identifier', start: 1808, end: 1814, name: 'Number' },
  property: Node { type: 'Identifier', start: 1815, end: 1824, name: 'MAX_VALUE' },
  computed: false }
MemberExpression
1808
1824
Node { type: 'Identifier', start: 1808, end: 1814, name: 'Number' }
Identifier
1808
1814
Number
Node { type: 'Identifier', start: 1815, end: 1824, name: 'MAX_VALUE' }
Identifier
1815
1824
MAX_VALUE
false
Node { type: 'Identifier', start: 1826, end: 1834, name: 'toString' }
Identifier
1826
1834
toString
false
[]
Node {
  type: 'CallExpression',
  start: 1846,
  end: 1882,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 1846,
     end: 1880,
     object: 
      Node {
        type: 'MemberExpression',
        start: 1847,
        end: 1870,
        object: [Node],
        property: [Node],
        computed: false },
     property: Node { type: 'Identifier', start: 1872, end: 1880, name: 'toString' },
     computed: false },
  arguments: [] }
CallExpression
1846
1882
Node {
  type: 'MemberExpression',
  start: 1846,
  end: 1880,
  object: 
   Node {
     type: 'MemberExpression',
     start: 1847,
     end: 1870,
     object: Node { type: 'Identifier', start: 1847, end: 1853, name: 'Number' },
     property: 
      Node {
        type: 'Identifier',
        start: 1854,
        end: 1870,
        name: 'MIN_SAFE_INTEGER' },
     computed: false },
  property: Node { type: 'Identifier', start: 1872, end: 1880, name: 'toString' },
  computed: false }
MemberExpression
1846
1880
Node {
  type: 'MemberExpression',
  start: 1847,
  end: 1870,
  object: Node { type: 'Identifier', start: 1847, end: 1853, name: 'Number' },
  property: 
   Node {
     type: 'Identifier',
     start: 1854,
     end: 1870,
     name: 'MIN_SAFE_INTEGER' },
  computed: false }
MemberExpression
1847
1870
Node { type: 'Identifier', start: 1847, end: 1853, name: 'Number' }
Identifier
1847
1853
Number
Node {
  type: 'Identifier',
  start: 1854,
  end: 1870,
  name: 'MIN_SAFE_INTEGER' }
Identifier
1854
1870
MIN_SAFE_INTEGER
false
Node { type: 'Identifier', start: 1872, end: 1880, name: 'toString' }
Identifier
1872
1880
toString
false
[]
Node {
  type: 'CallExpression',
  start: 1892,
  end: 1928,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 1892,
     end: 1926,
     object: 
      Node {
        type: 'MemberExpression',
        start: 1893,
        end: 1916,
        object: [Node],
        property: [Node],
        computed: false },
     property: Node { type: 'Identifier', start: 1918, end: 1926, name: 'toString' },
     computed: false },
  arguments: [] }
CallExpression
1892
1928
Node {
  type: 'MemberExpression',
  start: 1892,
  end: 1926,
  object: 
   Node {
     type: 'MemberExpression',
     start: 1893,
     end: 1916,
     object: Node { type: 'Identifier', start: 1893, end: 1899, name: 'Number' },
     property: 
      Node {
        type: 'Identifier',
        start: 1900,
        end: 1916,
        name: 'MAX_SAFE_INTEGER' },
     computed: false },
  property: Node { type: 'Identifier', start: 1918, end: 1926, name: 'toString' },
  computed: false }
MemberExpression
1892
1926
Node {
  type: 'MemberExpression',
  start: 1893,
  end: 1916,
  object: Node { type: 'Identifier', start: 1893, end: 1899, name: 'Number' },
  property: 
   Node {
     type: 'Identifier',
     start: 1900,
     end: 1916,
     name: 'MAX_SAFE_INTEGER' },
  computed: false }
MemberExpression
1893
1916
Node { type: 'Identifier', start: 1893, end: 1899, name: 'Number' }
Identifier
1893
1899
Number
Node {
  type: 'Identifier',
  start: 1900,
  end: 1916,
  name: 'MAX_SAFE_INTEGER' }
Identifier
1900
1916
MAX_SAFE_INTEGER
false
Node { type: 'Identifier', start: 1918, end: 1926, name: 'toString' }
Identifier
1918
1926
toString
false
[]
Node {
  type: 'CallExpression',
  start: 1938,
  end: 1975,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 1938,
     end: 1973,
     object: 
      Node {
        type: 'MemberExpression',
        start: 1939,
        end: 1963,
        object: [Node],
        property: [Node],
        computed: false },
     property: Node { type: 'Identifier', start: 1965, end: 1973, name: 'toString' },
     computed: false },
  arguments: [] }
CallExpression
1938
1975
Node {
  type: 'MemberExpression',
  start: 1938,
  end: 1973,
  object: 
   Node {
     type: 'MemberExpression',
     start: 1939,
     end: 1963,
     object: Node { type: 'Identifier', start: 1939, end: 1945, name: 'Number' },
     property: 
      Node {
        type: 'Identifier',
        start: 1946,
        end: 1963,
        name: 'POSITIVE_INFINITY' },
     computed: false },
  property: Node { type: 'Identifier', start: 1965, end: 1973, name: 'toString' },
  computed: false }
MemberExpression
1938
1973
Node {
  type: 'MemberExpression',
  start: 1939,
  end: 1963,
  object: Node { type: 'Identifier', start: 1939, end: 1945, name: 'Number' },
  property: 
   Node {
     type: 'Identifier',
     start: 1946,
     end: 1963,
     name: 'POSITIVE_INFINITY' },
  computed: false }
MemberExpression
1939
1963
Node { type: 'Identifier', start: 1939, end: 1945, name: 'Number' }
Identifier
1939
1945
Number
Node {
  type: 'Identifier',
  start: 1946,
  end: 1963,
  name: 'POSITIVE_INFINITY' }
Identifier
1946
1963
POSITIVE_INFINITY
false
Node { type: 'Identifier', start: 1965, end: 1973, name: 'toString' }
Identifier
1965
1973
toString
false
[]
Node {
  type: 'CallExpression',
  start: 1985,
  end: 2022,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 1985,
     end: 2020,
     object: 
      Node {
        type: 'MemberExpression',
        start: 1986,
        end: 2010,
        object: [Node],
        property: [Node],
        computed: false },
     property: Node { type: 'Identifier', start: 2012, end: 2020, name: 'toString' },
     computed: false },
  arguments: [] }
CallExpression
1985
2022
Node {
  type: 'MemberExpression',
  start: 1985,
  end: 2020,
  object: 
   Node {
     type: 'MemberExpression',
     start: 1986,
     end: 2010,
     object: Node { type: 'Identifier', start: 1986, end: 1992, name: 'Number' },
     property: 
      Node {
        type: 'Identifier',
        start: 1993,
        end: 2010,
        name: 'NEGATIVE_INFINITY' },
     computed: false },
  property: Node { type: 'Identifier', start: 2012, end: 2020, name: 'toString' },
  computed: false }
MemberExpression
1985
2020
Node {
  type: 'MemberExpression',
  start: 1986,
  end: 2010,
  object: Node { type: 'Identifier', start: 1986, end: 1992, name: 'Number' },
  property: 
   Node {
     type: 'Identifier',
     start: 1993,
     end: 2010,
     name: 'NEGATIVE_INFINITY' },
  computed: false }
MemberExpression
1986
2010
Node { type: 'Identifier', start: 1986, end: 1992, name: 'Number' }
Identifier
1986
1992
Number
Node {
  type: 'Identifier',
  start: 1993,
  end: 2010,
  name: 'NEGATIVE_INFINITY' }
Identifier
1993
2010
NEGATIVE_INFINITY
false
Node { type: 'Identifier', start: 2012, end: 2020, name: 'toString' }
Identifier
2012
2020
toString
false
[]
Node {
  type: 'Literal',
  start: 2032,
  end: 2037,
  value: 'NaN',
  raw: '"NaN"' }
Literal
2032
2037
NaN
"NaN"
Node {
  type: 'CallExpression',
  start: 2047,
  end: 2074,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 2047,
     end: 2072,
     object: 
      Node {
        type: 'MemberExpression',
        start: 2048,
        end: 2062,
        object: [Node],
        property: [Node],
        computed: false },
     property: Node { type: 'Identifier', start: 2064, end: 2072, name: 'toString' },
     computed: false },
  arguments: [] }
CallExpression
2047
2074
Node {
  type: 'MemberExpression',
  start: 2047,
  end: 2072,
  object: 
   Node {
     type: 'MemberExpression',
     start: 2048,
     end: 2062,
     object: Node { type: 'Identifier', start: 2048, end: 2054, name: 'Number' },
     property: Node { type: 'Identifier', start: 2055, end: 2062, name: 'EPSILON' },
     computed: false },
  property: Node { type: 'Identifier', start: 2064, end: 2072, name: 'toString' },
  computed: false }
MemberExpression
2047
2072
Node {
  type: 'MemberExpression',
  start: 2048,
  end: 2062,
  object: Node { type: 'Identifier', start: 2048, end: 2054, name: 'Number' },
  property: Node { type: 'Identifier', start: 2055, end: 2062, name: 'EPSILON' },
  computed: false }
MemberExpression
2048
2062
Node { type: 'Identifier', start: 2048, end: 2054, name: 'Number' }
Identifier
2048
2054
Number
Node { type: 'Identifier', start: 2055, end: 2062, name: 'EPSILON' }
Identifier
2055
2062
EPSILON
false
Node { type: 'Identifier', start: 2064, end: 2072, name: 'toString' }
Identifier
2064
2072
toString
false
[]
Node {
  type: 'Literal',
  start: 2084,
  end: 2090,
  value: '+0.0',
  raw: '"+0.0"' }
Literal
2084
2090
+0.0
"+0.0"
Node {
  type: 'Literal',
  start: 2100,
  end: 2106,
  value: '-0.0',
  raw: '"-0.0"' }
Literal
2100
2106
-0.0
"-0.0"
Node {
  type: 'Literal',
  start: 2116,
  end: 2121,
  value: '0.1',
  raw: '"0.1"' }
Literal
2116
2121
0.1
"0.1"
Node {
  type: 'Literal',
  start: 2131,
  end: 2137,
  value: '-0.1',
  raw: '"-0.1"' }
Literal
2131
2137
-0.1
"-0.1"
Node {
  type: 'Literal',
  start: 2147,
  end: 2152,
  value: '4.2',
  raw: '"4.2"' }
Literal
2147
2152
4.2
"4.2"
Node {
  type: 'Literal',
  start: 2162,
  end: 2168,
  value: '-4.2',
  raw: '"-4.2"' }
Literal
2162
2168
-4.2
"-4.2"
Node {
  type: 'CallExpression',
  start: 2178,
  end: 2207,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 2178,
     end: 2205,
     object: 
      Node {
        type: 'BinaryExpression',
        start: 2179,
        end: 2195,
        left: [Node],
        operator: '+',
        right: [Node] },
     property: Node { type: 'Identifier', start: 2197, end: 2205, name: 'toString' },
     computed: false },
  arguments: [] }
CallExpression
2178
2207
Node {
  type: 'MemberExpression',
  start: 2178,
  end: 2205,
  object: 
   Node {
     type: 'BinaryExpression',
     start: 2179,
     end: 2195,
     left: 
      Node {
        type: 'Literal',
        start: 2179,
        end: 2189,
        value: 2147483648,
        raw: '0x80000000' },
     operator: '+',
     right: Node { type: 'Literal', start: 2192, end: 2195, value: 0.5, raw: '0.5' } },
  property: Node { type: 'Identifier', start: 2197, end: 2205, name: 'toString' },
  computed: false }
MemberExpression
2178
2205
Node {
  type: 'BinaryExpression',
  start: 2179,
  end: 2195,
  left: 
   Node {
     type: 'Literal',
     start: 2179,
     end: 2189,
     value: 2147483648,
     raw: '0x80000000' },
  operator: '+',
  right: Node { type: 'Literal', start: 2192, end: 2195, value: 0.5, raw: '0.5' } }
BinaryExpression
2179
2195
Node {
  type: 'Literal',
  start: 2179,
  end: 2189,
  value: 2147483648,
  raw: '0x80000000' }
Literal
2179
2189
2147483648
0x80000000
+
Node { type: 'Literal', start: 2192, end: 2195, value: 0.5, raw: '0.5' }
Literal
2192
2195
0.5
0.5
Node { type: 'Identifier', start: 2197, end: 2205, name: 'toString' }
Identifier
2197
2205
toString
false
[]
Node { type: 'Identifier', start: 2214, end: 2221, name: 'forEach' }
Identifier
2214
2221
forEach
false
[ Node {
    type: 'FunctionExpression',
    start: 2222,
    end: 2362,
    id: null,
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 2237, end: 2362, body: [Array] } } ]
Node {
  type: 'FunctionExpression',
  start: 2222,
  end: 2362,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 2232, end: 2235, name: 'key' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 2237,
     end: 2362,
     body: [ [Node], [Node] ] } }
FunctionExpression
2222
2362
null
[+] Exception: dfg-put-by-val-direct-with-edge-numbers.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1192,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 117,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 119,
       end: 714,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 715,
       end: 739,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 741,
       end: 1105,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1106,
       end: 1123,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 1125,
       end: 1191,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
1192
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 117,
    id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 36, end: 117, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 119,
    end: 714,
    id: 
     Node {
       type: 'Identifier',
       start: 128,
       end: 141,
       name: 'testAttribute' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 162, end: 714, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 715,
    end: 739,
    expression: 
     Node {
       type: 'CallExpression',
       start: 715,
       end: 738,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 741,
    end: 1105,
    id: Node { type: 'Identifier', start: 750, end: 756, name: 'getter' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 763, end: 1105, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1106,
    end: 1123,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1106,
       end: 1122,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 1125,
    end: 1191,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 1130,
       end: 1139,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1141,
       end: 1150,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 1152,
       end: 1155,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 1161,
       end: 1191,
       expression: [Node] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 117,
  id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
     Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ],
  body: Node { type: 'BlockStatement', start: 36, end: 117, body: [ [Node] ] } }
FunctionDeclaration
0
117
Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' }
Identifier
9
17
shouldBe
false
false
false
[ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
  Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ]
Node { type: 'Identifier', start: 18, end: 24, name: 'actual' }
Identifier
18
24
actual
Node { type: 'Identifier', start: 26, end: 34, name: 'expected' }
Identifier
26
34
expected
Node {
  type: 'BlockStatement',
  start: 36,
  end: 117,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 42,
       end: 115,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
36
117
[ Node {
    type: 'IfStatement',
    start: 42,
    end: 115,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 46,
       end: 65,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 75, end: 115, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 42,
  end: 115,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 46,
     end: 65,
     left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
     operator: '!==',
     right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 75,
     end: 115,
     argument: 
      Node {
        type: 'NewExpression',
        start: 81,
        end: 114,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
42
115
Node {
  type: 'BinaryExpression',
  start: 46,
  end: 65,
  left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
  operator: '!==',
  right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } }
BinaryExpression
46
65
Node { type: 'Identifier', start: 46, end: 52, name: 'actual' }
Identifier
46
52
actual
!==
Node { type: 'Identifier', start: 57, end: 65, name: 'expected' }
Identifier
57
65
expected
Node {
  type: 'ThrowStatement',
  start: 75,
  end: 115,
  argument: 
   Node {
     type: 'NewExpression',
     start: 81,
     end: 114,
     callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
75
115
Node {
  type: 'NewExpression',
  start: 81,
  end: 114,
  callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
  arguments: 
   [ Node {
       type: 'BinaryExpression',
       start: 91,
       end: 113,
       left: [Node],
       operator: '+',
       right: [Node] } ] }
NewExpression
81
114
Node { type: 'Identifier', start: 85, end: 90, name: 'Error' }
Identifier
85
90
Error
[ Node {
    type: 'BinaryExpression',
    start: 91,
    end: 113,
    left: 
     Node {
       type: 'Literal',
       start: 91,
       end: 104,
       value: 'bad value: ',
       raw: '\'bad value: \'' },
    operator: '+',
    right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } } ]
Node {
  type: 'BinaryExpression',
  start: 91,
  end: 113,
  left: 
   Node {
     type: 'Literal',
     start: 91,
     end: 104,
     value: 'bad value: ',
     raw: '\'bad value: \'' },
  operator: '+',
  right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } }
BinaryExpression
91
113
Node {
  type: 'Literal',
  start: 91,
  end: 104,
  value: 'bad value: ',
  raw: '\'bad value: \'' }
Literal
91
104
bad value: 
'bad value: '
+
Node { type: 'Identifier', start: 107, end: 113, name: 'actual' }
Identifier
107
113
actual
null
[+] Exception: dfg-put-getter-by-id-class.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1024,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 117,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 119,
       end: 713,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 714,
       end: 738,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 740,
       end: 940,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 941,
       end: 958,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 960,
       end: 1023,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
1024
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 117,
    id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 36, end: 117, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 119,
    end: 713,
    id: 
     Node {
       type: 'Identifier',
       start: 128,
       end: 141,
       name: 'testAttribute' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 162, end: 713, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 714,
    end: 738,
    expression: 
     Node {
       type: 'CallExpression',
       start: 714,
       end: 737,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 740,
    end: 940,
    id: Node { type: 'Identifier', start: 749, end: 755, name: 'getter' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 762, end: 940, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 941,
    end: 958,
    expression: 
     Node {
       type: 'CallExpression',
       start: 941,
       end: 957,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 960,
    end: 1023,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 965,
       end: 974,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 976,
       end: 985,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 987,
       end: 990,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 996,
       end: 1023,
       expression: [Node] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 117,
  id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
     Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ],
  body: Node { type: 'BlockStatement', start: 36, end: 117, body: [ [Node] ] } }
FunctionDeclaration
0
117
Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' }
Identifier
9
17
shouldBe
false
false
false
[ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
  Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ]
Node { type: 'Identifier', start: 18, end: 24, name: 'actual' }
Identifier
18
24
actual
Node { type: 'Identifier', start: 26, end: 34, name: 'expected' }
Identifier
26
34
expected
Node {
  type: 'BlockStatement',
  start: 36,
  end: 117,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 42,
       end: 115,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
36
117
[ Node {
    type: 'IfStatement',
    start: 42,
    end: 115,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 46,
       end: 65,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 75, end: 115, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 42,
  end: 115,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 46,
     end: 65,
     left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
     operator: '!==',
     right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 75,
     end: 115,
     argument: 
      Node {
        type: 'NewExpression',
        start: 81,
        end: 114,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
42
115
Node {
  type: 'BinaryExpression',
  start: 46,
  end: 65,
  left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
  operator: '!==',
  right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } }
BinaryExpression
46
65
Node { type: 'Identifier', start: 46, end: 52, name: 'actual' }
Identifier
46
52
actual
!==
Node { type: 'Identifier', start: 57, end: 65, name: 'expected' }
Identifier
57
65
expected
Node {
  type: 'ThrowStatement',
  start: 75,
  end: 115,
  argument: 
   Node {
     type: 'NewExpression',
     start: 81,
     end: 114,
     callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
75
115
Node {
  type: 'NewExpression',
  start: 81,
  end: 114,
  callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
  arguments: 
   [ Node {
       type: 'BinaryExpression',
       start: 91,
       end: 113,
       left: [Node],
       operator: '+',
       right: [Node] } ] }
NewExpression
81
114
Node { type: 'Identifier', start: 85, end: 90, name: 'Error' }
Identifier
85
90
Error
[ Node {
    type: 'BinaryExpression',
    start: 91,
    end: 113,
    left: 
     Node {
       type: 'Literal',
       start: 91,
       end: 104,
       value: 'bad value: ',
       raw: '\'bad value: \'' },
    operator: '+',
    right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } } ]
Node {
  type: 'BinaryExpression',
  start: 91,
  end: 113,
  left: 
   Node {
     type: 'Literal',
     start: 91,
     end: 104,
     value: 'bad value: ',
     raw: '\'bad value: \'' },
  operator: '+',
  right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } }
BinaryExpression
91
113
Node {
  type: 'Literal',
  start: 91,
  end: 104,
  value: 'bad value: ',
  raw: '\'bad value: \'' }
Literal
91
104
bad value: 
'bad value: '
+
Node { type: 'Identifier', start: 107, end: 113, name: 'actual' }
Identifier
107
113
actual
null
[+] Exception: dfg-put-getter-by-id.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1107,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 117,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 119,
       end: 714,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 715,
       end: 739,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 741,
       end: 1020,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1021,
       end: 1038,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 1040,
       end: 1106,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
1107
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 117,
    id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 36, end: 117, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 119,
    end: 714,
    id: 
     Node {
       type: 'Identifier',
       start: 128,
       end: 141,
       name: 'testAttribute' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 162, end: 714, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 715,
    end: 739,
    expression: 
     Node {
       type: 'CallExpression',
       start: 715,
       end: 738,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 741,
    end: 1020,
    id: Node { type: 'Identifier', start: 750, end: 756, name: 'getter' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 763, end: 1020, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1021,
    end: 1038,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1021,
       end: 1037,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 1040,
    end: 1106,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 1045,
       end: 1054,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1056,
       end: 1065,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 1067,
       end: 1070,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 1076,
       end: 1106,
       expression: [Node] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 117,
  id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
     Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ],
  body: Node { type: 'BlockStatement', start: 36, end: 117, body: [ [Node] ] } }
FunctionDeclaration
0
117
Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' }
Identifier
9
17
shouldBe
false
false
false
[ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
  Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ]
Node { type: 'Identifier', start: 18, end: 24, name: 'actual' }
Identifier
18
24
actual
Node { type: 'Identifier', start: 26, end: 34, name: 'expected' }
Identifier
26
34
expected
Node {
  type: 'BlockStatement',
  start: 36,
  end: 117,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 42,
       end: 115,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
36
117
[ Node {
    type: 'IfStatement',
    start: 42,
    end: 115,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 46,
       end: 65,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 75, end: 115, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 42,
  end: 115,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 46,
     end: 65,
     left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
     operator: '!==',
     right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 75,
     end: 115,
     argument: 
      Node {
        type: 'NewExpression',
        start: 81,
        end: 114,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
42
115
Node {
  type: 'BinaryExpression',
  start: 46,
  end: 65,
  left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
  operator: '!==',
  right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } }
BinaryExpression
46
65
Node { type: 'Identifier', start: 46, end: 52, name: 'actual' }
Identifier
46
52
actual
!==
Node { type: 'Identifier', start: 57, end: 65, name: 'expected' }
Identifier
57
65
expected
Node {
  type: 'ThrowStatement',
  start: 75,
  end: 115,
  argument: 
   Node {
     type: 'NewExpression',
     start: 81,
     end: 114,
     callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
75
115
Node {
  type: 'NewExpression',
  start: 81,
  end: 114,
  callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
  arguments: 
   [ Node {
       type: 'BinaryExpression',
       start: 91,
       end: 113,
       left: [Node],
       operator: '+',
       right: [Node] } ] }
NewExpression
81
114
Node { type: 'Identifier', start: 85, end: 90, name: 'Error' }
Identifier
85
90
Error
[ Node {
    type: 'BinaryExpression',
    start: 91,
    end: 113,
    left: 
     Node {
       type: 'Literal',
       start: 91,
       end: 104,
       value: 'bad value: ',
       raw: '\'bad value: \'' },
    operator: '+',
    right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } } ]
Node {
  type: 'BinaryExpression',
  start: 91,
  end: 113,
  left: 
   Node {
     type: 'Literal',
     start: 91,
     end: 104,
     value: 'bad value: ',
     raw: '\'bad value: \'' },
  operator: '+',
  right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } }
BinaryExpression
91
113
Node {
  type: 'Literal',
  start: 91,
  end: 104,
  value: 'bad value: ',
  raw: '\'bad value: \'' }
Literal
91
104
bad value: 
'bad value: '
+
Node { type: 'Identifier', start: 107, end: 113, name: 'actual' }
Identifier
107
113
actual
null
[+] Exception: dfg-put-getter-by-val-class.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1024,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 117,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 119,
       end: 713,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 714,
       end: 738,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 740,
       end: 937,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 938,
       end: 955,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 957,
       end: 1023,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
1024
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 117,
    id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 36, end: 117, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 119,
    end: 713,
    id: 
     Node {
       type: 'Identifier',
       start: 128,
       end: 141,
       name: 'testAttribute' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 162, end: 713, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 714,
    end: 738,
    expression: 
     Node {
       type: 'CallExpression',
       start: 714,
       end: 737,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 740,
    end: 937,
    id: Node { type: 'Identifier', start: 749, end: 755, name: 'getter' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 762, end: 937, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 938,
    end: 955,
    expression: 
     Node {
       type: 'CallExpression',
       start: 938,
       end: 954,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 957,
    end: 1023,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 962,
       end: 971,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 973,
       end: 982,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 984,
       end: 987,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 993,
       end: 1023,
       expression: [Node] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 117,
  id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
     Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ],
  body: Node { type: 'BlockStatement', start: 36, end: 117, body: [ [Node] ] } }
FunctionDeclaration
0
117
Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' }
Identifier
9
17
shouldBe
false
false
false
[ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
  Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ]
Node { type: 'Identifier', start: 18, end: 24, name: 'actual' }
Identifier
18
24
actual
Node { type: 'Identifier', start: 26, end: 34, name: 'expected' }
Identifier
26
34
expected
Node {
  type: 'BlockStatement',
  start: 36,
  end: 117,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 42,
       end: 115,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
36
117
[ Node {
    type: 'IfStatement',
    start: 42,
    end: 115,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 46,
       end: 65,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 75, end: 115, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 42,
  end: 115,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 46,
     end: 65,
     left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
     operator: '!==',
     right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 75,
     end: 115,
     argument: 
      Node {
        type: 'NewExpression',
        start: 81,
        end: 114,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
42
115
Node {
  type: 'BinaryExpression',
  start: 46,
  end: 65,
  left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
  operator: '!==',
  right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } }
BinaryExpression
46
65
Node { type: 'Identifier', start: 46, end: 52, name: 'actual' }
Identifier
46
52
actual
!==
Node { type: 'Identifier', start: 57, end: 65, name: 'expected' }
Identifier
57
65
expected
Node {
  type: 'ThrowStatement',
  start: 75,
  end: 115,
  argument: 
   Node {
     type: 'NewExpression',
     start: 81,
     end: 114,
     callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
75
115
Node {
  type: 'NewExpression',
  start: 81,
  end: 114,
  callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
  arguments: 
   [ Node {
       type: 'BinaryExpression',
       start: 91,
       end: 113,
       left: [Node],
       operator: '+',
       right: [Node] } ] }
NewExpression
81
114
Node { type: 'Identifier', start: 85, end: 90, name: 'Error' }
Identifier
85
90
Error
[ Node {
    type: 'BinaryExpression',
    start: 91,
    end: 113,
    left: 
     Node {
       type: 'Literal',
       start: 91,
       end: 104,
       value: 'bad value: ',
       raw: '\'bad value: \'' },
    operator: '+',
    right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } } ]
Node {
  type: 'BinaryExpression',
  start: 91,
  end: 113,
  left: 
   Node {
     type: 'Literal',
     start: 91,
     end: 104,
     value: 'bad value: ',
     raw: '\'bad value: \'' },
  operator: '+',
  right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } }
BinaryExpression
91
113
Node {
  type: 'Literal',
  start: 91,
  end: 104,
  value: 'bad value: ',
  raw: '\'bad value: \'' }
Literal
91
104
bad value: 
'bad value: '
+
Node { type: 'Identifier', start: 107, end: 113, name: 'actual' }
Identifier
107
113
actual
null
[+] Exception: dfg-put-getter-by-val.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1217,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 117,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 119,
       end: 714,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 715,
       end: 739,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 741,
       end: 1130,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1131,
       end: 1148,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 1150,
       end: 1216,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
1217
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 117,
    id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 36, end: 117, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 119,
    end: 714,
    id: 
     Node {
       type: 'Identifier',
       start: 128,
       end: 141,
       name: 'testAttribute' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 162, end: 714, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 715,
    end: 739,
    expression: 
     Node {
       type: 'CallExpression',
       start: 715,
       end: 738,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 741,
    end: 1130,
    id: Node { type: 'Identifier', start: 750, end: 756, name: 'getter' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 763, end: 1130, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1131,
    end: 1148,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1131,
       end: 1147,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 1150,
    end: 1216,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 1155,
       end: 1164,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1166,
       end: 1175,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 1177,
       end: 1180,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 1186,
       end: 1216,
       expression: [Node] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 117,
  id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
     Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ],
  body: Node { type: 'BlockStatement', start: 36, end: 117, body: [ [Node] ] } }
FunctionDeclaration
0
117
Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' }
Identifier
9
17
shouldBe
false
false
false
[ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
  Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ]
Node { type: 'Identifier', start: 18, end: 24, name: 'actual' }
Identifier
18
24
actual
Node { type: 'Identifier', start: 26, end: 34, name: 'expected' }
Identifier
26
34
expected
Node {
  type: 'BlockStatement',
  start: 36,
  end: 117,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 42,
       end: 115,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
36
117
[ Node {
    type: 'IfStatement',
    start: 42,
    end: 115,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 46,
       end: 65,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 75, end: 115, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 42,
  end: 115,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 46,
     end: 65,
     left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
     operator: '!==',
     right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 75,
     end: 115,
     argument: 
      Node {
        type: 'NewExpression',
        start: 81,
        end: 114,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
42
115
Node {
  type: 'BinaryExpression',
  start: 46,
  end: 65,
  left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
  operator: '!==',
  right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } }
BinaryExpression
46
65
Node { type: 'Identifier', start: 46, end: 52, name: 'actual' }
Identifier
46
52
actual
!==
Node { type: 'Identifier', start: 57, end: 65, name: 'expected' }
Identifier
57
65
expected
Node {
  type: 'ThrowStatement',
  start: 75,
  end: 115,
  argument: 
   Node {
     type: 'NewExpression',
     start: 81,
     end: 114,
     callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
75
115
Node {
  type: 'NewExpression',
  start: 81,
  end: 114,
  callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
  arguments: 
   [ Node {
       type: 'BinaryExpression',
       start: 91,
       end: 113,
       left: [Node],
       operator: '+',
       right: [Node] } ] }
NewExpression
81
114
Node { type: 'Identifier', start: 85, end: 90, name: 'Error' }
Identifier
85
90
Error
[ Node {
    type: 'BinaryExpression',
    start: 91,
    end: 113,
    left: 
     Node {
       type: 'Literal',
       start: 91,
       end: 104,
       value: 'bad value: ',
       raw: '\'bad value: \'' },
    operator: '+',
    right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } } ]
Node {
  type: 'BinaryExpression',
  start: 91,
  end: 113,
  left: 
   Node {
     type: 'Literal',
     start: 91,
     end: 104,
     value: 'bad value: ',
     raw: '\'bad value: \'' },
  operator: '+',
  right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } }
BinaryExpression
91
113
Node {
  type: 'Literal',
  start: 91,
  end: 104,
  value: 'bad value: ',
  raw: '\'bad value: \'' }
Literal
91
104
bad value: 
'bad value: '
+
Node { type: 'Identifier', start: 107, end: 113, name: 'actual' }
Identifier
107
113
actual
null
[+] Exception: dfg-put-setter-by-id-class.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1050,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 117,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 119,
       end: 713,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 714,
       end: 738,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 740,
       end: 966,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 967,
       end: 984,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 986,
       end: 1049,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
1050
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 117,
    id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 36, end: 117, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 119,
    end: 713,
    id: 
     Node {
       type: 'Identifier',
       start: 128,
       end: 141,
       name: 'testAttribute' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 162, end: 713, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 714,
    end: 738,
    expression: 
     Node {
       type: 'CallExpression',
       start: 714,
       end: 737,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 740,
    end: 966,
    id: Node { type: 'Identifier', start: 749, end: 755, name: 'setter' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 762, end: 966, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 967,
    end: 984,
    expression: 
     Node {
       type: 'CallExpression',
       start: 967,
       end: 983,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 986,
    end: 1049,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 991,
       end: 1000,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1002,
       end: 1011,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 1013,
       end: 1016,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 1022,
       end: 1049,
       expression: [Node] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 117,
  id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
     Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ],
  body: Node { type: 'BlockStatement', start: 36, end: 117, body: [ [Node] ] } }
FunctionDeclaration
0
117
Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' }
Identifier
9
17
shouldBe
false
false
false
[ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
  Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ]
Node { type: 'Identifier', start: 18, end: 24, name: 'actual' }
Identifier
18
24
actual
Node { type: 'Identifier', start: 26, end: 34, name: 'expected' }
Identifier
26
34
expected
Node {
  type: 'BlockStatement',
  start: 36,
  end: 117,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 42,
       end: 115,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
36
117
[ Node {
    type: 'IfStatement',
    start: 42,
    end: 115,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 46,
       end: 65,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 75, end: 115, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 42,
  end: 115,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 46,
     end: 65,
     left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
     operator: '!==',
     right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 75,
     end: 115,
     argument: 
      Node {
        type: 'NewExpression',
        start: 81,
        end: 114,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
42
115
Node {
  type: 'BinaryExpression',
  start: 46,
  end: 65,
  left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
  operator: '!==',
  right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } }
BinaryExpression
46
65
Node { type: 'Identifier', start: 46, end: 52, name: 'actual' }
Identifier
46
52
actual
!==
Node { type: 'Identifier', start: 57, end: 65, name: 'expected' }
Identifier
57
65
expected
Node {
  type: 'ThrowStatement',
  start: 75,
  end: 115,
  argument: 
   Node {
     type: 'NewExpression',
     start: 81,
     end: 114,
     callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
75
115
Node {
  type: 'NewExpression',
  start: 81,
  end: 114,
  callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
  arguments: 
   [ Node {
       type: 'BinaryExpression',
       start: 91,
       end: 113,
       left: [Node],
       operator: '+',
       right: [Node] } ] }
NewExpression
81
114
Node { type: 'Identifier', start: 85, end: 90, name: 'Error' }
Identifier
85
90
Error
[ Node {
    type: 'BinaryExpression',
    start: 91,
    end: 113,
    left: 
     Node {
       type: 'Literal',
       start: 91,
       end: 104,
       value: 'bad value: ',
       raw: '\'bad value: \'' },
    operator: '+',
    right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } } ]
Node {
  type: 'BinaryExpression',
  start: 91,
  end: 113,
  left: 
   Node {
     type: 'Literal',
     start: 91,
     end: 104,
     value: 'bad value: ',
     raw: '\'bad value: \'' },
  operator: '+',
  right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } }
BinaryExpression
91
113
Node {
  type: 'Literal',
  start: 91,
  end: 104,
  value: 'bad value: ',
  raw: '\'bad value: \'' }
Literal
91
104
bad value: 
'bad value: '
+
Node { type: 'Identifier', start: 107, end: 113, name: 'actual' }
Identifier
107
113
actual
null
[+] Exception: dfg-put-setter-by-id.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1133,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 117,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 119,
       end: 714,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 715,
       end: 739,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 741,
       end: 1046,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1047,
       end: 1064,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 1066,
       end: 1132,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
1133
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 117,
    id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 36, end: 117, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 119,
    end: 714,
    id: 
     Node {
       type: 'Identifier',
       start: 128,
       end: 141,
       name: 'testAttribute' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 162, end: 714, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 715,
    end: 739,
    expression: 
     Node {
       type: 'CallExpression',
       start: 715,
       end: 738,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 741,
    end: 1046,
    id: Node { type: 'Identifier', start: 750, end: 756, name: 'setter' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 763, end: 1046, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1047,
    end: 1064,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1047,
       end: 1063,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 1066,
    end: 1132,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 1071,
       end: 1080,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1082,
       end: 1091,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 1093,
       end: 1096,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 1102,
       end: 1132,
       expression: [Node] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 117,
  id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
     Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ],
  body: Node { type: 'BlockStatement', start: 36, end: 117, body: [ [Node] ] } }
FunctionDeclaration
0
117
Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' }
Identifier
9
17
shouldBe
false
false
false
[ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
  Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ]
Node { type: 'Identifier', start: 18, end: 24, name: 'actual' }
Identifier
18
24
actual
Node { type: 'Identifier', start: 26, end: 34, name: 'expected' }
Identifier
26
34
expected
Node {
  type: 'BlockStatement',
  start: 36,
  end: 117,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 42,
       end: 115,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
36
117
[ Node {
    type: 'IfStatement',
    start: 42,
    end: 115,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 46,
       end: 65,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 75, end: 115, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 42,
  end: 115,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 46,
     end: 65,
     left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
     operator: '!==',
     right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 75,
     end: 115,
     argument: 
      Node {
        type: 'NewExpression',
        start: 81,
        end: 114,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
42
115
Node {
  type: 'BinaryExpression',
  start: 46,
  end: 65,
  left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
  operator: '!==',
  right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } }
BinaryExpression
46
65
Node { type: 'Identifier', start: 46, end: 52, name: 'actual' }
Identifier
46
52
actual
!==
Node { type: 'Identifier', start: 57, end: 65, name: 'expected' }
Identifier
57
65
expected
Node {
  type: 'ThrowStatement',
  start: 75,
  end: 115,
  argument: 
   Node {
     type: 'NewExpression',
     start: 81,
     end: 114,
     callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
75
115
Node {
  type: 'NewExpression',
  start: 81,
  end: 114,
  callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
  arguments: 
   [ Node {
       type: 'BinaryExpression',
       start: 91,
       end: 113,
       left: [Node],
       operator: '+',
       right: [Node] } ] }
NewExpression
81
114
Node { type: 'Identifier', start: 85, end: 90, name: 'Error' }
Identifier
85
90
Error
[ Node {
    type: 'BinaryExpression',
    start: 91,
    end: 113,
    left: 
     Node {
       type: 'Literal',
       start: 91,
       end: 104,
       value: 'bad value: ',
       raw: '\'bad value: \'' },
    operator: '+',
    right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } } ]
Node {
  type: 'BinaryExpression',
  start: 91,
  end: 113,
  left: 
   Node {
     type: 'Literal',
     start: 91,
     end: 104,
     value: 'bad value: ',
     raw: '\'bad value: \'' },
  operator: '+',
  right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } }
BinaryExpression
91
113
Node {
  type: 'Literal',
  start: 91,
  end: 104,
  value: 'bad value: ',
  raw: '\'bad value: \'' }
Literal
91
104
bad value: 
'bad value: '
+
Node { type: 'Identifier', start: 107, end: 113, name: 'actual' }
Identifier
107
113
actual
null
[+] Exception: dfg-put-setter-by-val-class.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1050,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 117,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 119,
       end: 713,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 714,
       end: 738,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 740,
       end: 963,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 964,
       end: 981,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 983,
       end: 1049,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
1050
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 117,
    id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 36, end: 117, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 119,
    end: 713,
    id: 
     Node {
       type: 'Identifier',
       start: 128,
       end: 141,
       name: 'testAttribute' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 162, end: 713, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 714,
    end: 738,
    expression: 
     Node {
       type: 'CallExpression',
       start: 714,
       end: 737,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 740,
    end: 963,
    id: Node { type: 'Identifier', start: 749, end: 755, name: 'setter' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 762, end: 963, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 964,
    end: 981,
    expression: 
     Node {
       type: 'CallExpression',
       start: 964,
       end: 980,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 983,
    end: 1049,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 988,
       end: 997,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 999,
       end: 1008,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 1010,
       end: 1013,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 1019,
       end: 1049,
       expression: [Node] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 117,
  id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
     Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ],
  body: Node { type: 'BlockStatement', start: 36, end: 117, body: [ [Node] ] } }
FunctionDeclaration
0
117
Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' }
Identifier
9
17
shouldBe
false
false
false
[ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
  Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ]
Node { type: 'Identifier', start: 18, end: 24, name: 'actual' }
Identifier
18
24
actual
Node { type: 'Identifier', start: 26, end: 34, name: 'expected' }
Identifier
26
34
expected
Node {
  type: 'BlockStatement',
  start: 36,
  end: 117,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 42,
       end: 115,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
36
117
[ Node {
    type: 'IfStatement',
    start: 42,
    end: 115,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 46,
       end: 65,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 75, end: 115, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 42,
  end: 115,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 46,
     end: 65,
     left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
     operator: '!==',
     right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 75,
     end: 115,
     argument: 
      Node {
        type: 'NewExpression',
        start: 81,
        end: 114,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
42
115
Node {
  type: 'BinaryExpression',
  start: 46,
  end: 65,
  left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
  operator: '!==',
  right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } }
BinaryExpression
46
65
Node { type: 'Identifier', start: 46, end: 52, name: 'actual' }
Identifier
46
52
actual
!==
Node { type: 'Identifier', start: 57, end: 65, name: 'expected' }
Identifier
57
65
expected
Node {
  type: 'ThrowStatement',
  start: 75,
  end: 115,
  argument: 
   Node {
     type: 'NewExpression',
     start: 81,
     end: 114,
     callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
75
115
Node {
  type: 'NewExpression',
  start: 81,
  end: 114,
  callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
  arguments: 
   [ Node {
       type: 'BinaryExpression',
       start: 91,
       end: 113,
       left: [Node],
       operator: '+',
       right: [Node] } ] }
NewExpression
81
114
Node { type: 'Identifier', start: 85, end: 90, name: 'Error' }
Identifier
85
90
Error
[ Node {
    type: 'BinaryExpression',
    start: 91,
    end: 113,
    left: 
     Node {
       type: 'Literal',
       start: 91,
       end: 104,
       value: 'bad value: ',
       raw: '\'bad value: \'' },
    operator: '+',
    right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } } ]
Node {
  type: 'BinaryExpression',
  start: 91,
  end: 113,
  left: 
   Node {
     type: 'Literal',
     start: 91,
     end: 104,
     value: 'bad value: ',
     raw: '\'bad value: \'' },
  operator: '+',
  right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } }
BinaryExpression
91
113
Node {
  type: 'Literal',
  start: 91,
  end: 104,
  value: 'bad value: ',
  raw: '\'bad value: \'' }
Literal
91
104
bad value: 
'bad value: '
+
Node { type: 'Identifier', start: 107, end: 113, name: 'actual' }
Identifier
107
113
actual
null
[+] Exception: dfg-put-setter-by-val.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 265,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 34,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node { type: 'EmptyStatement', start: 34, end: 35 },
     Node {
       type: 'ForStatement',
       start: 37,
       end: 264,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
265
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 34,
    id: Node { type: 'Identifier', start: 9, end: 10, name: 'F' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 14, end: 34, body: [Array] } },
  Node { type: 'EmptyStatement', start: 34, end: 35 },
  Node {
    type: 'ForStatement',
    start: 37,
    end: 264,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 42,
       end: 51,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 53,
       end: 62,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 64,
       end: 67,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 69, end: 264, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 34,
  id: Node { type: 'Identifier', start: 9, end: 10, name: 'F' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 14, end: 34, body: [ [Node] ] } }
FunctionDeclaration
0
34
Node { type: 'Identifier', start: 9, end: 10, name: 'F' }
Identifier
9
10
F
false
false
false
[]
Node {
  type: 'BlockStatement',
  start: 14,
  end: 34,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 16,
       end: 32,
       expression: [Node] } ] }
BlockStatement
14
34
[ Node {
    type: 'ExpressionStatement',
    start: 16,
    end: 32,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 16,
       end: 31,
       operator: '=',
       left: [Node],
       right: [Node] } } ]
Node {
  type: 'ExpressionStatement',
  start: 16,
  end: 32,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 16,
     end: 31,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 16,
        end: 26,
        object: [Node],
        property: [Node],
        computed: false },
     right: Node { type: 'Literal', start: 29, end: 31, value: 42, raw: '42' } } }
ExpressionStatement
16
32
Node {
  type: 'AssignmentExpression',
  start: 16,
  end: 31,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 16,
     end: 26,
     object: Node { type: 'ThisExpression', start: 16, end: 20 },
     property: Node { type: 'Identifier', start: 21, end: 26, name: 'inner' },
     computed: false },
  right: Node { type: 'Literal', start: 29, end: 31, value: 42, raw: '42' } }
AssignmentExpression
16
31
=
Node {
  type: 'MemberExpression',
  start: 16,
  end: 26,
  object: Node { type: 'ThisExpression', start: 16, end: 20 },
  property: Node { type: 'Identifier', start: 21, end: 26, name: 'inner' },
  computed: false }
MemberExpression
16
26
Node { type: 'ThisExpression', start: 16, end: 20 }
ThisExpression
16
20
Node { type: 'Identifier', start: 21, end: 26, name: 'inner' }
Identifier
21
26
inner
false
Node { type: 'Literal', start: 29, end: 31, value: 42, raw: '42' }
Literal
29
31
42
42
Node { type: 'EmptyStatement', start: 34, end: 35 }
EmptyStatement
34
35
Node {
  type: 'ForStatement',
  start: 37,
  end: 264,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 42,
     end: 51,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 53,
     end: 62,
     left: Node { type: 'Identifier', start: 53, end: 54, name: 'i' },
     operator: '<',
     right: Node { type: 'Literal', start: 57, end: 62, value: 10000, raw: '10000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 64,
     end: 67,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 66, end: 67, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 69,
     end: 264,
     body: [ [Node], [Node], [Node], [Node] ] } }
ForStatement
37
264
Node {
  type: 'VariableDeclaration',
  start: 42,
  end: 51,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 46,
       end: 51,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
42
51
[ Node {
    type: 'VariableDeclarator',
    start: 46,
    end: 51,
    id: Node { type: 'Identifier', start: 46, end: 47, name: 'i' },
    init: Node { type: 'Literal', start: 50, end: 51, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 46,
  end: 51,
  id: Node { type: 'Identifier', start: 46, end: 47, name: 'i' },
  init: Node { type: 'Literal', start: 50, end: 51, value: 0, raw: '0' } }
VariableDeclarator
46
51
Node { type: 'Identifier', start: 46, end: 47, name: 'i' }
Identifier
46
47
i
Node { type: 'Literal', start: 50, end: 51, value: 0, raw: '0' }
Literal
50
51
0
0
var
Node {
  type: 'BinaryExpression',
  start: 53,
  end: 62,
  left: Node { type: 'Identifier', start: 53, end: 54, name: 'i' },
  operator: '<',
  right: Node { type: 'Literal', start: 57, end: 62, value: 10000, raw: '10000' } }
BinaryExpression
53
62
Node { type: 'Identifier', start: 53, end: 54, name: 'i' }
Identifier
53
54
i
<
Node { type: 'Literal', start: 57, end: 62, value: 10000, raw: '10000' }
Literal
57
62
10000
10000
Node {
  type: 'UpdateExpression',
  start: 64,
  end: 67,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 66, end: 67, name: 'i' } }
UpdateExpression
64
67
++
true
Node { type: 'Identifier', start: 66, end: 67, name: 'i' }
Identifier
66
67
i
Node {
  type: 'BlockStatement',
  start: 69,
  end: 264,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 75,
       end: 96,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 101,
       end: 122,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 173,
       end: 194,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 199,
       end: 262,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
69
264
[ Node {
    type: 'VariableDeclaration',
    start: 75,
    end: 96,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 101,
    end: 122,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 101,
       end: 121,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'VariableDeclaration',
    start: 173,
    end: 194,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 199,
    end: 262,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 203,
       end: 216,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 226, end: 262, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 75,
  end: 96,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 79,
       end: 95,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
75
96
[ Node {
    type: 'VariableDeclarator',
    start: 79,
    end: 95,
    id: Node { type: 'Identifier', start: 79, end: 80, name: 'x' },
    init: 
     Node {
       type: 'NewExpression',
       start: 83,
       end: 95,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 79,
  end: 95,
  id: Node { type: 'Identifier', start: 79, end: 80, name: 'x' },
  init: 
   Node {
     type: 'NewExpression',
     start: 83,
     end: 95,
     callee: Node { type: 'Identifier', start: 87, end: 88, name: 'F' },
     arguments: [ [Node] ] } }
VariableDeclarator
79
95
Node { type: 'Identifier', start: 79, end: 80, name: 'x' }
Identifier
79
80
x
Node {
  type: 'NewExpression',
  start: 83,
  end: 95,
  callee: Node { type: 'Identifier', start: 87, end: 88, name: 'F' },
  arguments: 
   [ Node { type: 'Literal', start: 89, end: 94, value: false, raw: 'false' } ] }
NewExpression
83
95
Node { type: 'Identifier', start: 87, end: 88, name: 'F' }
Identifier
87
88
F
[ Node { type: 'Literal', start: 89, end: 94, value: false, raw: 'false' } ]
Node { type: 'Literal', start: 89, end: 94, value: false, raw: 'false' }
Literal
89
94
false
false
var
Node {
  type: 'ExpressionStatement',
  start: 101,
  end: 122,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 101,
     end: 121,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 101,
        end: 112,
        object: [Node],
        property: [Node],
        computed: false },
     right: Node { type: 'Identifier', start: 115, end: 121, name: 'Object' } } }
ExpressionStatement
101
122
Node {
  type: 'AssignmentExpression',
  start: 101,
  end: 121,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 101,
     end: 112,
     object: Node { type: 'Identifier', start: 101, end: 102, name: 'F' },
     property: Node { type: 'Identifier', start: 103, end: 112, name: 'prototype' },
     computed: false },
  right: Node { type: 'Identifier', start: 115, end: 121, name: 'Object' } }
AssignmentExpression
101
121
=
Node {
  type: 'MemberExpression',
  start: 101,
  end: 112,
  object: Node { type: 'Identifier', start: 101, end: 102, name: 'F' },
  property: Node { type: 'Identifier', start: 103, end: 112, name: 'prototype' },
  computed: false }
MemberExpression
101
112
Node { type: 'Identifier', start: 101, end: 102, name: 'F' }
Identifier
101
102
F
Node { type: 'Identifier', start: 103, end: 112, name: 'prototype' }
Identifier
103
112
prototype
false
Node { type: 'Identifier', start: 115, end: 121, name: 'Object' }
Identifier
115
121
Object
Node {
  type: 'VariableDeclaration',
  start: 173,
  end: 194,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 177,
       end: 193,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
173
194
[ Node {
    type: 'VariableDeclarator',
    start: 177,
    end: 193,
    id: Node { type: 'Identifier', start: 177, end: 183, name: 'result' },
    init: 
     Node {
       type: 'MemberExpression',
       start: 186,
       end: 193,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'VariableDeclarator',
  start: 177,
  end: 193,
  id: Node { type: 'Identifier', start: 177, end: 183, name: 'result' },
  init: 
   Node {
     type: 'MemberExpression',
     start: 186,
     end: 193,
     object: Node { type: 'Identifier', start: 186, end: 187, name: 'x' },
     property: Node { type: 'Identifier', start: 188, end: 193, name: 'inner' },
     computed: false } }
VariableDeclarator
177
193
Node { type: 'Identifier', start: 177, end: 183, name: 'result' }
Identifier
177
183
result
Node {
  type: 'MemberExpression',
  start: 186,
  end: 193,
  object: Node { type: 'Identifier', start: 186, end: 187, name: 'x' },
  property: Node { type: 'Identifier', start: 188, end: 193, name: 'inner' },
  computed: false }
MemberExpression
186
193
Node { type: 'Identifier', start: 186, end: 187, name: 'x' }
Identifier
186
187
x
Node { type: 'Identifier', start: 188, end: 193, name: 'inner' }
Identifier
188
193
inner
false
var
Node {
  type: 'IfStatement',
  start: 199,
  end: 262,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 203,
     end: 216,
     left: Node { type: 'Identifier', start: 203, end: 209, name: 'result' },
     operator: '!==',
     right: Node { type: 'Literal', start: 214, end: 216, value: 42, raw: '42' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 226,
     end: 262,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 232,
        end: 261,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
199
262
Node {
  type: 'BinaryExpression',
  start: 203,
  end: 216,
  left: Node { type: 'Identifier', start: 203, end: 209, name: 'result' },
  operator: '!==',
  right: Node { type: 'Literal', start: 214, end: 216, value: 42, raw: '42' } }
BinaryExpression
203
216
Node { type: 'Identifier', start: 203, end: 209, name: 'result' }
Identifier
203
209
result
!==
Node { type: 'Literal', start: 214, end: 216, value: 42, raw: '42' }
Literal
214
216
42
42
Node {
  type: 'ThrowStatement',
  start: 226,
  end: 262,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 232,
     end: 261,
     left: 
      Node {
        type: 'Literal',
        start: 232,
        end: 252,
        value: 'Expected 42, got: ',
        raw: '"Expected 42, got: "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 255, end: 261, name: 'result' } } }
ThrowStatement
226
262
Node {
  type: 'BinaryExpression',
  start: 232,
  end: 261,
  left: 
   Node {
     type: 'Literal',
     start: 232,
     end: 252,
     value: 'Expected 42, got: ',
     raw: '"Expected 42, got: "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 255, end: 261, name: 'result' } }
BinaryExpression
232
261
Node {
  type: 'Literal',
  start: 232,
  end: 252,
  value: 'Expected 42, got: ',
  raw: '"Expected 42, got: "' }
Literal
232
252
Expected 42, got: 
"Expected 42, got: "
+
Node { type: 'Identifier', start: 255, end: 261, name: 'result' }
Identifier
255
261
result
null
[+] Exception: dfg-rare-data.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1632,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 117,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 119,
       end: 468,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 470,
       end: 682,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 684,
       end: 1099,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1101,
       end: 1631,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
1632
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 117,
    id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 36, end: 117, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 119,
    end: 468,
    id: Node { type: 'Identifier', start: 128, end: 139, name: 'shouldThrow' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 160, end: 468, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 470,
    end: 682,
    expression: 
     Node {
       type: 'CallExpression',
       start: 471,
       end: 680,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 684,
    end: 1099,
    expression: 
     Node {
       type: 'CallExpression',
       start: 685,
       end: 1097,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 1101,
    end: 1631,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1102,
       end: 1629,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 117,
  id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
     Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ],
  body: Node { type: 'BlockStatement', start: 36, end: 117, body: [ [Node] ] } }
FunctionDeclaration
0
117
Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' }
Identifier
9
17
shouldBe
false
false
false
[ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
  Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ]
Node { type: 'Identifier', start: 18, end: 24, name: 'actual' }
Identifier
18
24
actual
Node { type: 'Identifier', start: 26, end: 34, name: 'expected' }
Identifier
26
34
expected
Node {
  type: 'BlockStatement',
  start: 36,
  end: 117,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 42,
       end: 115,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
36
117
[ Node {
    type: 'IfStatement',
    start: 42,
    end: 115,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 46,
       end: 65,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 75, end: 115, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 42,
  end: 115,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 46,
     end: 65,
     left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
     operator: '!==',
     right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 75,
     end: 115,
     argument: 
      Node {
        type: 'NewExpression',
        start: 81,
        end: 114,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
42
115
Node {
  type: 'BinaryExpression',
  start: 46,
  end: 65,
  left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
  operator: '!==',
  right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } }
BinaryExpression
46
65
Node { type: 'Identifier', start: 46, end: 52, name: 'actual' }
Identifier
46
52
actual
!==
Node { type: 'Identifier', start: 57, end: 65, name: 'expected' }
Identifier
57
65
expected
Node {
  type: 'ThrowStatement',
  start: 75,
  end: 115,
  argument: 
   Node {
     type: 'NewExpression',
     start: 81,
     end: 114,
     callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
75
115
Node {
  type: 'NewExpression',
  start: 81,
  end: 114,
  callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
  arguments: 
   [ Node {
       type: 'BinaryExpression',
       start: 91,
       end: 113,
       left: [Node],
       operator: '+',
       right: [Node] } ] }
NewExpression
81
114
Node { type: 'Identifier', start: 85, end: 90, name: 'Error' }
Identifier
85
90
Error
[ Node {
    type: 'BinaryExpression',
    start: 91,
    end: 113,
    left: 
     Node {
       type: 'Literal',
       start: 91,
       end: 104,
       value: 'bad value: ',
       raw: '\'bad value: \'' },
    operator: '+',
    right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } } ]
Node {
  type: 'BinaryExpression',
  start: 91,
  end: 113,
  left: 
   Node {
     type: 'Literal',
     start: 91,
     end: 104,
     value: 'bad value: ',
     raw: '\'bad value: \'' },
  operator: '+',
  right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } }
BinaryExpression
91
113
Node {
  type: 'Literal',
  start: 91,
  end: 104,
  value: 'bad value: ',
  raw: '\'bad value: \'' }
Literal
91
104
bad value: 
'bad value: '
+
Node { type: 'Identifier', start: 107, end: 113, name: 'actual' }
Identifier
107
113
actual
null
[+] Exception: dfg-reflect-get-prototype-of.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 149,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 0,
       end: 10,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 11,
       end: 92,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 93,
       end: 107,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 108,
       end: 148,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
149
[ Node {
    type: 'VariableDeclaration',
    start: 0,
    end: 10,
    declarations: [ [Node], [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 11,
    end: 92,
    id: Node { type: 'Identifier', start: 20, end: 23, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 26, end: 92, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 93,
    end: 107,
    expression: 
     Node {
       type: 'CallExpression',
       start: 93,
       end: 106,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 108,
    end: 148,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 112,
       end: 121,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 123,
       end: 132,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 134,
       end: 137,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 143,
       end: 148,
       expression: [Node] } } ]
Node {
  type: 'VariableDeclaration',
  start: 0,
  end: 10,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 4,
       end: 5,
       id: [Node],
       init: null },
     Node {
       type: 'VariableDeclarator',
       start: 6,
       end: 9,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
0
10
[ Node {
    type: 'VariableDeclarator',
    start: 4,
    end: 5,
    id: Node { type: 'Identifier', start: 4, end: 5, name: 'i' },
    init: null },
  Node {
    type: 'VariableDeclarator',
    start: 6,
    end: 9,
    id: Node { type: 'Identifier', start: 6, end: 7, name: 'c' },
    init: Node { type: 'Literal', start: 8, end: 9, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 4,
  end: 5,
  id: Node { type: 'Identifier', start: 4, end: 5, name: 'i' },
  init: null }
VariableDeclarator
4
5
Node { type: 'Identifier', start: 4, end: 5, name: 'i' }
Identifier
4
5
i
null
[+] Exception: dfg-ssa-swap.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1573,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 0,
       end: 370,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 372,
       end: 693,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 695,
       end: 1155,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1157,
       end: 1572,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
1573
[ Node {
    type: 'ExpressionStatement',
    start: 0,
    end: 370,
    expression: 
     Node {
       type: 'CallExpression',
       start: 0,
       end: 369,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 372,
    end: 693,
    expression: 
     Node {
       type: 'CallExpression',
       start: 372,
       end: 692,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 695,
    end: 1155,
    expression: 
     Node {
       type: 'CallExpression',
       start: 695,
       end: 1154,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 1157,
    end: 1572,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1157,
       end: 1571,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'ExpressionStatement',
  start: 0,
  end: 370,
  expression: 
   Node {
     type: 'CallExpression',
     start: 0,
     end: 369,
     callee: 
      Node {
        type: 'FunctionExpression',
        start: 1,
        end: 366,
        id: [Node],
        generator: false,
        expression: false,
        async: false,
        params: [],
        body: [Node] },
     arguments: [] } }
ExpressionStatement
0
370
Node {
  type: 'CallExpression',
  start: 0,
  end: 369,
  callee: 
   Node {
     type: 'FunctionExpression',
     start: 1,
     end: 366,
     id: 
      Node {
        type: 'Identifier',
        start: 10,
        end: 28,
        name: 'nonInlinedTailCall' },
     generator: false,
     expression: false,
     async: false,
     params: [],
     body: Node { type: 'BlockStatement', start: 31, end: 366, body: [Array] } },
  arguments: [] }
CallExpression
0
369
Node {
  type: 'FunctionExpression',
  start: 1,
  end: 366,
  id: 
   Node {
     type: 'Identifier',
     start: 10,
     end: 28,
     name: 'nonInlinedTailCall' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: 
   Node {
     type: 'BlockStatement',
     start: 31,
     end: 366,
     body: [ [Node], [Node], [Node], [Node], [Node], [Node], [Node] ] } }
FunctionExpression
1
366
Node {
  type: 'Identifier',
  start: 10,
  end: 28,
  name: 'nonInlinedTailCall' }
Identifier
10
28
nonInlinedTailCall
false
false
false
[]
Node {
  type: 'BlockStatement',
  start: 31,
  end: 366,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 37,
       end: 118,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 123,
       end: 140,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 146,
       end: 198,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 204,
       end: 253,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 259,
       end: 324,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 329,
       end: 344,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 350,
       end: 364,
       expression: [Node] } ] }
BlockStatement
31
366
[ Node {
    type: 'FunctionDeclaration',
    start: 37,
    end: 118,
    id: Node { type: 'Identifier', start: 46, end: 52, name: 'callee' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 55, end: 118, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 123,
    end: 140,
    expression: 
     Node {
       type: 'CallExpression',
       start: 123,
       end: 139,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 146,
    end: 198,
    id: Node { type: 'Identifier', start: 155, end: 161, name: 'caller' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 164, end: 198, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 204,
    end: 253,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 209,
       end: 218,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 220,
       end: 229,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 231,
       end: 234,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 244,
       end: 253,
       expression: [Node] } },
  Node {
    type: 'FunctionDeclaration',
    start: 259,
    end: 324,
    id: Node { type: 'Identifier', start: 268, end: 272, name: 'loop' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 276, end: 324, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 329,
    end: 344,
    expression: 
     Node {
       type: 'CallExpression',
       start: 329,
       end: 343,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 350,
    end: 364,
    expression: 
     Node {
       type: 'CallExpression',
       start: 350,
       end: 363,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 37,
  end: 118,
  id: Node { type: 'Identifier', start: 46, end: 52, name: 'callee' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 55, end: 118, body: [ [Node] ] } }
FunctionDeclaration
37
118
Node { type: 'Identifier', start: 46, end: 52, name: 'callee' }
Identifier
46
52
callee
false
false
false
[]
Node {
  type: 'BlockStatement',
  start: 55,
  end: 118,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 57,
       end: 116,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
55
118
[ Node {
    type: 'IfStatement',
    start: 57,
    end: 116,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 61,
       end: 96,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 98, end: 116, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 57,
  end: 116,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 61,
     end: 96,
     left: 
      Node {
        type: 'MemberExpression',
        start: 61,
        end: 74,
        object: [Node],
        property: [Node],
        computed: false },
     operator: '!=',
     right: 
      Node {
        type: 'Identifier',
        start: 78,
        end: 96,
        name: 'nonInlinedTailCall' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 98,
     end: 116,
     argument: 
      Node {
        type: 'NewExpression',
        start: 104,
        end: 115,
        callee: [Node],
        arguments: [] } },
  alternate: null }
IfStatement
57
116
Node {
  type: 'BinaryExpression',
  start: 61,
  end: 96,
  left: 
   Node {
     type: 'MemberExpression',
     start: 61,
     end: 74,
     object: Node { type: 'Identifier', start: 61, end: 67, name: 'callee' },
     property: Node { type: 'Identifier', start: 68, end: 74, name: 'caller' },
     computed: false },
  operator: '!=',
  right: 
   Node {
     type: 'Identifier',
     start: 78,
     end: 96,
     name: 'nonInlinedTailCall' } }
BinaryExpression
61
96
Node {
  type: 'MemberExpression',
  start: 61,
  end: 74,
  object: Node { type: 'Identifier', start: 61, end: 67, name: 'callee' },
  property: Node { type: 'Identifier', start: 68, end: 74, name: 'caller' },
  computed: false }
MemberExpression
61
74
Node { type: 'Identifier', start: 61, end: 67, name: 'callee' }
Identifier
61
67
callee
Node { type: 'Identifier', start: 68, end: 74, name: 'caller' }
Identifier
68
74
caller
false
!=
Node {
  type: 'Identifier',
  start: 78,
  end: 96,
  name: 'nonInlinedTailCall' }
Identifier
78
96
nonInlinedTailCall
Node {
  type: 'ThrowStatement',
  start: 98,
  end: 116,
  argument: 
   Node {
     type: 'NewExpression',
     start: 104,
     end: 115,
     callee: Node { type: 'Identifier', start: 108, end: 113, name: 'Error' },
     arguments: [] } }
ThrowStatement
98
116
Node {
  type: 'NewExpression',
  start: 104,
  end: 115,
  callee: Node { type: 'Identifier', start: 108, end: 113, name: 'Error' },
  arguments: [] }
NewExpression
104
115
Node { type: 'Identifier', start: 108, end: 113, name: 'Error' }
Identifier
108
113
Error
[]
null
[+] Exception: dfg-tail-calls.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 771,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 0,
       end: 24,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 67,
       end: 180,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 181,
       end: 209,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 211,
       end: 317,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 318,
       end: 342,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 344,
       end: 502,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 504,
       end: 523,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 525,
       end: 538,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'TryStatement',
       start: 539,
       end: 623,
       block: [Node],
       handler: [Node],
       finalizer: null },
     Node {
       type: 'IfStatement',
       start: 625,
       end: 770,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
771
[ Node {
    type: 'VariableDeclaration',
    start: 0,
    end: 24,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 67,
    end: 180,
    id: 
     Node {
       type: 'Identifier',
       start: 76,
       end: 93,
       name: 'toPrimitiveTarget' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 96, end: 180, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 181,
    end: 209,
    expression: 
     Node {
       type: 'CallExpression',
       start: 181,
       end: 208,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 211,
    end: 317,
    id: 
     Node {
       type: 'Identifier',
       start: 220,
       end: 233,
       name: 'doToPrimitive' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 236, end: 317, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 318,
    end: 342,
    expression: 
     Node {
       type: 'CallExpression',
       start: 318,
       end: 341,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 344,
    end: 502,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 349,
       end: 358,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 360,
       end: 369,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 371,
       end: 374,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 376, end: 502, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 504,
    end: 523,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 504,
       end: 522,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'VariableDeclaration',
    start: 525,
    end: 538,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'TryStatement',
    start: 539,
    end: 623,
    block: Node { type: 'BlockStatement', start: 543, end: 591, body: [Array] },
    handler: 
     Node {
       type: 'CatchClause',
       start: 592,
       end: 623,
       param: [Node],
       body: [Node] },
    finalizer: null },
  Node {
    type: 'IfStatement',
    start: 625,
    end: 770,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 629,
       end: 698,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 704, end: 770, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 0,
  end: 24,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 4,
       end: 23,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
0
24
[ Node {
    type: 'VariableDeclarator',
    start: 4,
    end: 23,
    id: Node { type: 'Identifier', start: 4, end: 15, name: 'shouldThrow' },
    init: Node { type: 'Literal', start: 18, end: 23, value: false, raw: 'false' } } ]
Node {
  type: 'VariableDeclarator',
  start: 4,
  end: 23,
  id: Node { type: 'Identifier', start: 4, end: 15, name: 'shouldThrow' },
  init: Node { type: 'Literal', start: 18, end: 23, value: false, raw: 'false' } }
VariableDeclarator
4
23
Node { type: 'Identifier', start: 4, end: 15, name: 'shouldThrow' }
Identifier
4
15
shouldThrow
Node { type: 'Literal', start: 18, end: 23, value: false, raw: 'false' }
Literal
18
23
false
false
var
Node {
  type: 'FunctionDeclaration',
  start: 67,
  end: 180,
  id: 
   Node {
     type: 'Identifier',
     start: 76,
     end: 93,
     name: 'toPrimitiveTarget' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: 
   Node {
     type: 'BlockStatement',
     start: 96,
     end: 180,
     body: [ [Node], [Node] ] } }
FunctionDeclaration
67
180
Node {
  type: 'Identifier',
  start: 76,
  end: 93,
  name: 'toPrimitiveTarget' }
Identifier
76
93
toPrimitiveTarget
false
false
false
[]
Node {
  type: 'BlockStatement',
  start: 96,
  end: 180,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 102,
       end: 158,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ReturnStatement',
       start: 163,
       end: 178,
       argument: [Node] } ] }
BlockStatement
96
180
[ Node {
    type: 'IfStatement',
    start: 102,
    end: 158,
    test: Node { type: 'Identifier', start: 106, end: 117, name: 'shouldThrow' },
    consequent: Node { type: 'BlockStatement', start: 119, end: 158, body: [Array] },
    alternate: null },
  Node {
    type: 'ReturnStatement',
    start: 163,
    end: 178,
    argument: 
     Node {
       type: 'Literal',
       start: 170,
       end: 177,
       value: 'Cocoa',
       raw: '\'Cocoa\'' } } ]
Node {
  type: 'IfStatement',
  start: 102,
  end: 158,
  test: Node { type: 'Identifier', start: 106, end: 117, name: 'shouldThrow' },
  consequent: Node { type: 'BlockStatement', start: 119, end: 158, body: [ [Node] ] },
  alternate: null }
IfStatement
102
158
Node { type: 'Identifier', start: 106, end: 117, name: 'shouldThrow' }
Identifier
106
117
shouldThrow
Node {
  type: 'BlockStatement',
  start: 119,
  end: 158,
  body: 
   [ Node {
       type: 'ReturnStatement',
       start: 129,
       end: 152,
       argument: [Node] } ] }
BlockStatement
119
158
[ Node {
    type: 'ReturnStatement',
    start: 129,
    end: 152,
    argument: 
     Node {
       type: 'CallExpression',
       start: 136,
       end: 151,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'ReturnStatement',
  start: 129,
  end: 152,
  argument: 
   Node {
     type: 'CallExpression',
     start: 136,
     end: 151,
     callee: Node { type: 'Identifier', start: 136, end: 142, name: 'Symbol' },
     arguments: [ [Node] ] } }
ReturnStatement
129
152
Node {
  type: 'CallExpression',
  start: 136,
  end: 151,
  callee: Node { type: 'Identifier', start: 136, end: 142, name: 'Symbol' },
  arguments: 
   [ Node {
       type: 'Literal',
       start: 143,
       end: 150,
       value: 'Cocoa',
       raw: '\'Cocoa\'' } ] }
CallExpression
136
151
Node { type: 'Identifier', start: 136, end: 142, name: 'Symbol' }
Identifier
136
142
Symbol
[ Node {
    type: 'Literal',
    start: 143,
    end: 150,
    value: 'Cocoa',
    raw: '\'Cocoa\'' } ]
Node {
  type: 'Literal',
  start: 143,
  end: 150,
  value: 'Cocoa',
  raw: '\'Cocoa\'' }
Literal
143
150
Cocoa
'Cocoa'
null
[+] Exception: dfg-to-primitive-pass-symbol.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 679,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 71,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 72,
       end: 89,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 91,
       end: 190,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'VariableDeclaration',
       start: 192,
       end: 226,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'VariableDeclaration',
       start: 228,
       end: 302,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'FunctionDeclaration',
       start: 304,
       end: 456,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 457,
       end: 471,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 473,
       end: 479,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'VariableDeclaration',
       start: 480,
       end: 497,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'FunctionDeclaration',
       start: 498,
       end: 600,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 601,
       end: 613,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 614,
       end: 657,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 658,
       end: 670,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 671,
       end: 678,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
679
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 71,
    id: Node { type: 'Identifier', start: 9, end: 15, name: 'assert' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 71, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 72,
    end: 89,
    expression: 
     Node {
       type: 'CallExpression',
       start: 72,
       end: 88,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 91,
    end: 190,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'VariableDeclaration',
    start: 192,
    end: 226,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'VariableDeclaration',
    start: 228,
    end: 302,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'FunctionDeclaration',
    start: 304,
    end: 456,
    id: Node { type: 'Identifier', start: 313, end: 316, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 320, end: 456, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 457,
    end: 471,
    expression: 
     Node {
       type: 'CallExpression',
       start: 457,
       end: 470,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 473,
    end: 479,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'VariableDeclaration',
    start: 480,
    end: 497,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'FunctionDeclaration',
    start: 498,
    end: 600,
    id: Node { type: 'Identifier', start: 507, end: 508, name: 'f' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 511, end: 600, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 601,
    end: 613,
    expression: 
     Node {
       type: 'CallExpression',
       start: 601,
       end: 612,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 614,
    end: 657,
    init: 
     Node {
       type: 'AssignmentExpression',
       start: 619,
       end: 624,
       operator: '=',
       left: [Node],
       right: [Node] },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 626,
       end: 635,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 637,
       end: 640,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 642, end: 657, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 658,
    end: 670,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 658,
       end: 669,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 671,
    end: 678,
    expression: 
     Node {
       type: 'CallExpression',
       start: 671,
       end: 677,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 71,
  id: Node { type: 'Identifier', start: 9, end: 15, name: 'assert' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ],
  body: Node { type: 'BlockStatement', start: 19, end: 71, body: [ [Node] ] } }
FunctionDeclaration
0
71
Node { type: 'Identifier', start: 9, end: 15, name: 'assert' }
Identifier
9
15
assert
false
false
false
[ Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ]
Node { type: 'Identifier', start: 16, end: 17, name: 'b' }
Identifier
16
17
b
Node {
  type: 'BlockStatement',
  start: 19,
  end: 71,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 25,
       end: 69,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
19
71
[ Node {
    type: 'IfStatement',
    start: 25,
    end: 69,
    test: 
     Node {
       type: 'UnaryExpression',
       start: 29,
       end: 31,
       operator: '!',
       prefix: true,
       argument: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 41, end: 69, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 25,
  end: 69,
  test: 
   Node {
     type: 'UnaryExpression',
     start: 29,
     end: 31,
     operator: '!',
     prefix: true,
     argument: Node { type: 'Identifier', start: 30, end: 31, name: 'b' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 41,
     end: 69,
     argument: 
      Node {
        type: 'NewExpression',
        start: 47,
        end: 69,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
25
69
Node {
  type: 'UnaryExpression',
  start: 29,
  end: 31,
  operator: '!',
  prefix: true,
  argument: Node { type: 'Identifier', start: 30, end: 31, name: 'b' } }
UnaryExpression
29
31
!
true
Node { type: 'Identifier', start: 30, end: 31, name: 'b' }
Identifier
30
31
b
Node {
  type: 'ThrowStatement',
  start: 41,
  end: 69,
  argument: 
   Node {
     type: 'NewExpression',
     start: 47,
     end: 69,
     callee: Node { type: 'Identifier', start: 51, end: 56, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
41
69
Node {
  type: 'NewExpression',
  start: 47,
  end: 69,
  callee: Node { type: 'Identifier', start: 51, end: 56, name: 'Error' },
  arguments: 
   [ Node {
       type: 'Literal',
       start: 57,
       end: 68,
       value: 'bad value',
       raw: '"bad value"' } ] }
NewExpression
47
69
Node { type: 'Identifier', start: 51, end: 56, name: 'Error' }
Identifier
51
56
Error
[ Node {
    type: 'Literal',
    start: 57,
    end: 68,
    value: 'bad value',
    raw: '"bad value"' } ]
Node {
  type: 'Literal',
  start: 57,
  end: 68,
  value: 'bad value',
  raw: '"bad value"' }
Literal
57
68
bad value
"bad value"
null
[+] Exception: dfg-try-catch-wrong-value-recovery-on-ic-miss.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 308,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 117,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 119,
       end: 163,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 164,
       end: 179,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 181,
       end: 242,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 244,
       end: 307,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
308
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 117,
    id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 36, end: 117, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 119,
    end: 163,
    id: Node { type: 'Identifier', start: 128, end: 132, name: 'args' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 135, end: 163, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 164,
    end: 179,
    expression: 
     Node {
       type: 'CallExpression',
       start: 164,
       end: 178,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 181,
    end: 242,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 186,
       end: 195,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 197,
       end: 204,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 206,
       end: 209,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 215,
       end: 242,
       expression: [Node] } },
  Node {
    type: 'ForStatement',
    start: 244,
    end: 307,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 249,
       end: 258,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 260,
       end: 267,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 269,
       end: 272,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 278,
       end: 307,
       expression: [Node] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 117,
  id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
     Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ],
  body: Node { type: 'BlockStatement', start: 36, end: 117, body: [ [Node] ] } }
FunctionDeclaration
0
117
Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' }
Identifier
9
17
shouldBe
false
false
false
[ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
  Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ]
Node { type: 'Identifier', start: 18, end: 24, name: 'actual' }
Identifier
18
24
actual
Node { type: 'Identifier', start: 26, end: 34, name: 'expected' }
Identifier
26
34
expected
Node {
  type: 'BlockStatement',
  start: 36,
  end: 117,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 42,
       end: 115,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
36
117
[ Node {
    type: 'IfStatement',
    start: 42,
    end: 115,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 46,
       end: 65,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 75, end: 115, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 42,
  end: 115,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 46,
     end: 65,
     left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
     operator: '!==',
     right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 75,
     end: 115,
     argument: 
      Node {
        type: 'NewExpression',
        start: 81,
        end: 114,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
42
115
Node {
  type: 'BinaryExpression',
  start: 46,
  end: 65,
  left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
  operator: '!==',
  right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } }
BinaryExpression
46
65
Node { type: 'Identifier', start: 46, end: 52, name: 'actual' }
Identifier
46
52
actual
!==
Node { type: 'Identifier', start: 57, end: 65, name: 'expected' }
Identifier
57
65
expected
Node {
  type: 'ThrowStatement',
  start: 75,
  end: 115,
  argument: 
   Node {
     type: 'NewExpression',
     start: 81,
     end: 114,
     callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
75
115
Node {
  type: 'NewExpression',
  start: 81,
  end: 114,
  callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
  arguments: 
   [ Node {
       type: 'BinaryExpression',
       start: 91,
       end: 113,
       left: [Node],
       operator: '+',
       right: [Node] } ] }
NewExpression
81
114
Node { type: 'Identifier', start: 85, end: 90, name: 'Error' }
Identifier
85
90
Error
[ Node {
    type: 'BinaryExpression',
    start: 91,
    end: 113,
    left: 
     Node {
       type: 'Literal',
       start: 91,
       end: 104,
       value: 'bad value: ',
       raw: '\'bad value: \'' },
    operator: '+',
    right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } } ]
Node {
  type: 'BinaryExpression',
  start: 91,
  end: 113,
  left: 
   Node {
     type: 'Literal',
     start: 91,
     end: 104,
     value: 'bad value: ',
     raw: '\'bad value: \'' },
  operator: '+',
  right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } }
BinaryExpression
91
113
Node {
  type: 'Literal',
  start: 91,
  end: 104,
  value: 'bad value: ',
  raw: '\'bad value: \'' }
Literal
91
104
bad value: 
'bad value: '
+
Node { type: 'Identifier', start: 107, end: 113, name: 'actual' }
Identifier
107
113
actual
null
[+] Exception: direct-arguments-in-bounds-to-out-of-bounds.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 423,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 167,
       end: 176,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 178,
       end: 396,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 398,
       end: 412,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 414,
       end: 422,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
423
[ Node {
    type: 'VariableDeclaration',
    start: 167,
    end: 176,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 178,
    end: 396,
    id: Node { type: 'Identifier', start: 187, end: 190, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 194, end: 396, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 398,
    end: 412,
    expression: 
     Node {
       type: 'CallExpression',
       start: 398,
       end: 411,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 414,
    end: 422,
    expression: 
     Node {
       type: 'CallExpression',
       start: 414,
       end: 421,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 167,
  end: 176,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 171,
       end: 175,
       id: [Node],
       init: null } ],
  kind: 'var' }
VariableDeclaration
167
176
[ Node {
    type: 'VariableDeclarator',
    start: 171,
    end: 175,
    id: Node { type: 'Identifier', start: 171, end: 175, name: 'args' },
    init: null } ]
Node {
  type: 'VariableDeclarator',
  start: 171,
  end: 175,
  id: Node { type: 'Identifier', start: 171, end: 175, name: 'args' },
  init: null }
VariableDeclarator
171
175
Node { type: 'Identifier', start: 171, end: 175, name: 'args' }
Identifier
171
175
args
null
[+] Exception: direct-arguments-osr-entry.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 376,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 117,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 119,
       end: 163,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 164,
       end: 179,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 181,
       end: 209,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 210,
       end: 239,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 240,
       end: 264,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 265,
       end: 327,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 328,
       end: 353,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 354,
       end: 375,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
376
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 117,
    id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 36, end: 117, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 119,
    end: 163,
    id: Node { type: 'Identifier', start: 128, end: 132, name: 'args' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 135, end: 163, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 164,
    end: 179,
    expression: 
     Node {
       type: 'CallExpression',
       start: 164,
       end: 178,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 181,
    end: 209,
    expression: 
     Node {
       type: 'CallExpression',
       start: 181,
       end: 208,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 210,
    end: 239,
    expression: 
     Node {
       type: 'CallExpression',
       start: 210,
       end: 238,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 240,
    end: 264,
    expression: 
     Node {
       type: 'CallExpression',
       start: 240,
       end: 263,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 265,
    end: 327,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 270,
       end: 279,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 281,
       end: 288,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 290,
       end: 293,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 299,
       end: 327,
       expression: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 328,
    end: 353,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 328,
       end: 352,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 354,
    end: 375,
    expression: 
     Node {
       type: 'CallExpression',
       start: 354,
       end: 374,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 117,
  id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
     Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ],
  body: Node { type: 'BlockStatement', start: 36, end: 117, body: [ [Node] ] } }
FunctionDeclaration
0
117
Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' }
Identifier
9
17
shouldBe
false
false
false
[ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
  Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ]
Node { type: 'Identifier', start: 18, end: 24, name: 'actual' }
Identifier
18
24
actual
Node { type: 'Identifier', start: 26, end: 34, name: 'expected' }
Identifier
26
34
expected
Node {
  type: 'BlockStatement',
  start: 36,
  end: 117,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 42,
       end: 115,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
36
117
[ Node {
    type: 'IfStatement',
    start: 42,
    end: 115,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 46,
       end: 65,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 75, end: 115, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 42,
  end: 115,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 46,
     end: 65,
     left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
     operator: '!==',
     right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 75,
     end: 115,
     argument: 
      Node {
        type: 'NewExpression',
        start: 81,
        end: 114,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
42
115
Node {
  type: 'BinaryExpression',
  start: 46,
  end: 65,
  left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
  operator: '!==',
  right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } }
BinaryExpression
46
65
Node { type: 'Identifier', start: 46, end: 52, name: 'actual' }
Identifier
46
52
actual
!==
Node { type: 'Identifier', start: 57, end: 65, name: 'expected' }
Identifier
57
65
expected
Node {
  type: 'ThrowStatement',
  start: 75,
  end: 115,
  argument: 
   Node {
     type: 'NewExpression',
     start: 81,
     end: 114,
     callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
75
115
Node {
  type: 'NewExpression',
  start: 81,
  end: 114,
  callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
  arguments: 
   [ Node {
       type: 'BinaryExpression',
       start: 91,
       end: 113,
       left: [Node],
       operator: '+',
       right: [Node] } ] }
NewExpression
81
114
Node { type: 'Identifier', start: 85, end: 90, name: 'Error' }
Identifier
85
90
Error
[ Node {
    type: 'BinaryExpression',
    start: 91,
    end: 113,
    left: 
     Node {
       type: 'Literal',
       start: 91,
       end: 104,
       value: 'bad value: ',
       raw: '\'bad value: \'' },
    operator: '+',
    right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } } ]
Node {
  type: 'BinaryExpression',
  start: 91,
  end: 113,
  left: 
   Node {
     type: 'Literal',
     start: 91,
     end: 104,
     value: 'bad value: ',
     raw: '\'bad value: \'' },
  operator: '+',
  right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } }
BinaryExpression
91
113
Node {
  type: 'Literal',
  start: 91,
  end: 104,
  value: 'bad value: ',
  raw: '\'bad value: \'' }
Literal
91
104
bad value: 
'bad value: '
+
Node { type: 'Identifier', start: 107, end: 113, name: 'actual' }
Identifier
107
113
actual
null
[+] Exception: direct-arguments-out-of-bounds-watchpoint.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 606,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 0,
       end: 605,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
606
[ Node {
    type: 'ExpressionStatement',
    start: 0,
    end: 605,
    expression: 
     Node {
       type: 'CallExpression',
       start: 0,
       end: 604,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'ExpressionStatement',
  start: 0,
  end: 605,
  expression: 
   Node {
     type: 'CallExpression',
     start: 0,
     end: 604,
     callee: 
      Node {
        type: 'FunctionExpression',
        start: 1,
        end: 601,
        id: null,
        generator: false,
        expression: false,
        async: false,
        params: [],
        body: [Node] },
     arguments: [] } }
ExpressionStatement
0
605
Node {
  type: 'CallExpression',
  start: 0,
  end: 604,
  callee: 
   Node {
     type: 'FunctionExpression',
     start: 1,
     end: 601,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [],
     body: Node { type: 'BlockStatement', start: 12, end: 601, body: [Array] } },
  arguments: [] }
CallExpression
0
604
Node {
  type: 'FunctionExpression',
  start: 1,
  end: 601,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: 
   Node {
     type: 'BlockStatement',
     start: 12,
     end: 601,
     body: 
      [ [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node] ] } }
FunctionExpression
1
601
null
[+] Exception: direct-arguments-override-length-then-access-normal-length.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1061,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 117,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node { type: 'BlockStatement', start: 119, end: 422, body: [Array] },
     Node { type: 'BlockStatement', start: 424, end: 1060, body: [Array] } ],
  sourceType: 'script' }
Program
0
1061
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 117,
    id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 36, end: 117, body: [Array] } },
  Node {
    type: 'BlockStatement',
    start: 119,
    end: 422,
    body: [ [Node], [Node], [Node], [Node], [Node] ] },
  Node {
    type: 'BlockStatement',
    start: 424,
    end: 1060,
    body: 
     [ [Node],
       [Node],
       [Node],
       [Node],
       [Node],
       [Node],
       [Node],
       [Node],
       [Node],
       [Node] ] } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 117,
  id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
     Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ],
  body: Node { type: 'BlockStatement', start: 36, end: 117, body: [ [Node] ] } }
FunctionDeclaration
0
117
Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' }
Identifier
9
17
shouldBe
false
false
false
[ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
  Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ]
Node { type: 'Identifier', start: 18, end: 24, name: 'actual' }
Identifier
18
24
actual
Node { type: 'Identifier', start: 26, end: 34, name: 'expected' }
Identifier
26
34
expected
Node {
  type: 'BlockStatement',
  start: 36,
  end: 117,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 42,
       end: 115,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
36
117
[ Node {
    type: 'IfStatement',
    start: 42,
    end: 115,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 46,
       end: 65,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 75, end: 115, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 42,
  end: 115,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 46,
     end: 65,
     left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
     operator: '!==',
     right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 75,
     end: 115,
     argument: 
      Node {
        type: 'NewExpression',
        start: 81,
        end: 114,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
42
115
Node {
  type: 'BinaryExpression',
  start: 46,
  end: 65,
  left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
  operator: '!==',
  right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } }
BinaryExpression
46
65
Node { type: 'Identifier', start: 46, end: 52, name: 'actual' }
Identifier
46
52
actual
!==
Node { type: 'Identifier', start: 57, end: 65, name: 'expected' }
Identifier
57
65
expected
Node {
  type: 'ThrowStatement',
  start: 75,
  end: 115,
  argument: 
   Node {
     type: 'NewExpression',
     start: 81,
     end: 114,
     callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
75
115
Node {
  type: 'NewExpression',
  start: 81,
  end: 114,
  callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
  arguments: 
   [ Node {
       type: 'BinaryExpression',
       start: 91,
       end: 113,
       left: [Node],
       operator: '+',
       right: [Node] } ] }
NewExpression
81
114
Node { type: 'Identifier', start: 85, end: 90, name: 'Error' }
Identifier
85
90
Error
[ Node {
    type: 'BinaryExpression',
    start: 91,
    end: 113,
    left: 
     Node {
       type: 'Literal',
       start: 91,
       end: 104,
       value: 'bad value: ',
       raw: '\'bad value: \'' },
    operator: '+',
    right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } } ]
Node {
  type: 'BinaryExpression',
  start: 91,
  end: 113,
  left: 
   Node {
     type: 'Literal',
     start: 91,
     end: 104,
     value: 'bad value: ',
     raw: '\'bad value: \'' },
  operator: '+',
  right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } }
BinaryExpression
91
113
Node {
  type: 'Literal',
  start: 91,
  end: 104,
  value: 'bad value: ',
  raw: '\'bad value: \'' }
Literal
91
104
bad value: 
'bad value: '
+
Node { type: 'Identifier', start: 107, end: 113, name: 'actual' }
Identifier
107
113
actual
null
[+] Exception: direct-eval-in-object-literal-methods.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 285,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 0,
       end: 13,
       expression: [Node],
       directive: 'use strict' },
     Node {
       type: 'FunctionDeclaration',
       start: 15,
       end: 78,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 80,
       end: 94,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 96,
       end: 139,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 141,
       end: 155,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 157,
       end: 283,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
285
[ Node {
    type: 'ExpressionStatement',
    start: 0,
    end: 13,
    expression: 
     Node {
       type: 'Literal',
       start: 0,
       end: 12,
       value: 'use strict',
       raw: '"use strict"' },
    directive: 'use strict' },
  Node {
    type: 'FunctionDeclaration',
    start: 15,
    end: 78,
    id: Node { type: 'Identifier', start: 24, end: 27, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node], [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 46, end: 78, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 80,
    end: 94,
    expression: 
     Node {
       type: 'CallExpression',
       start: 80,
       end: 93,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 96,
    end: 139,
    id: Node { type: 'Identifier', start: 105, end: 108, name: 'bar' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 111, end: 139, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 141,
    end: 155,
    expression: 
     Node {
       type: 'CallExpression',
       start: 141,
       end: 154,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 157,
    end: 283,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 162,
       end: 171,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 173,
       end: 182,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 184,
       end: 187,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 189, end: 283, body: [Array] } } ]
Node {
  type: 'ExpressionStatement',
  start: 0,
  end: 13,
  expression: 
   Node {
     type: 'Literal',
     start: 0,
     end: 12,
     value: 'use strict',
     raw: '"use strict"' },
  directive: 'use strict' }
ExpressionStatement
0
13
Node {
  type: 'Literal',
  start: 0,
  end: 12,
  value: 'use strict',
  raw: '"use strict"' }
Literal
0
12
use strict
"use strict"
use strict
Node {
  type: 'FunctionDeclaration',
  start: 15,
  end: 78,
  id: Node { type: 'Identifier', start: 24, end: 27, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 28, end: 29, name: 'a' },
     Node { type: 'Identifier', start: 31, end: 32, name: 'b' },
     Node { type: 'Identifier', start: 34, end: 35, name: 'c' },
     Node { type: 'Identifier', start: 37, end: 38, name: 'd' },
     Node { type: 'Identifier', start: 40, end: 41, name: 'e' },
     Node { type: 'Identifier', start: 43, end: 44, name: 'f' } ],
  body: Node { type: 'BlockStatement', start: 46, end: 78, body: [ [Node] ] } }
FunctionDeclaration
15
78
Node { type: 'Identifier', start: 24, end: 27, name: 'foo' }
Identifier
24
27
foo
false
false
false
[ Node { type: 'Identifier', start: 28, end: 29, name: 'a' },
  Node { type: 'Identifier', start: 31, end: 32, name: 'b' },
  Node { type: 'Identifier', start: 34, end: 35, name: 'c' },
  Node { type: 'Identifier', start: 37, end: 38, name: 'd' },
  Node { type: 'Identifier', start: 40, end: 41, name: 'e' },
  Node { type: 'Identifier', start: 43, end: 44, name: 'f' } ]
Node { type: 'Identifier', start: 28, end: 29, name: 'a' }
Identifier
28
29
a
Node { type: 'Identifier', start: 31, end: 32, name: 'b' }
Identifier
31
32
b
Node { type: 'Identifier', start: 34, end: 35, name: 'c' }
Identifier
34
35
c
Node { type: 'Identifier', start: 37, end: 38, name: 'd' }
Identifier
37
38
d
Node { type: 'Identifier', start: 40, end: 41, name: 'e' }
Identifier
40
41
e
Node { type: 'Identifier', start: 43, end: 44, name: 'f' }
Identifier
43
44
f
Node {
  type: 'BlockStatement',
  start: 46,
  end: 78,
  body: 
   [ Node { type: 'ReturnStatement', start: 52, end: 76, argument: [Node] } ] }
BlockStatement
46
78
[ Node {
    type: 'ReturnStatement',
    start: 52,
    end: 76,
    argument: 
     Node {
       type: 'MemberExpression',
       start: 59,
       end: 75,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'ReturnStatement',
  start: 52,
  end: 76,
  argument: 
   Node {
     type: 'MemberExpression',
     start: 59,
     end: 75,
     object: Node { type: 'Identifier', start: 59, end: 68, name: 'arguments' },
     property: Node { type: 'Identifier', start: 69, end: 75, name: 'length' },
     computed: false } }
ReturnStatement
52
76
Node {
  type: 'MemberExpression',
  start: 59,
  end: 75,
  object: Node { type: 'Identifier', start: 59, end: 68, name: 'arguments' },
  property: Node { type: 'Identifier', start: 69, end: 75, name: 'length' },
  computed: false }
MemberExpression
59
75
Node { type: 'Identifier', start: 59, end: 68, name: 'arguments' }
Identifier
59
68
arguments
Node { type: 'Identifier', start: 69, end: 75, name: 'length' }
Identifier
69
75
length
false
Node {
  type: 'ExpressionStatement',
  start: 80,
  end: 94,
  expression: 
   Node {
     type: 'CallExpression',
     start: 80,
     end: 93,
     callee: Node { type: 'Identifier', start: 80, end: 88, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
80
94
Node {
  type: 'CallExpression',
  start: 80,
  end: 93,
  callee: Node { type: 'Identifier', start: 80, end: 88, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 89, end: 92, name: 'foo' } ] }
CallExpression
80
93
Node { type: 'Identifier', start: 80, end: 88, name: 'noInline' }
Identifier
80
88
noInline
[ Node { type: 'Identifier', start: 89, end: 92, name: 'foo' } ]
Node { type: 'Identifier', start: 89, end: 92, name: 'foo' }
Identifier
89
92
foo
Node {
  type: 'FunctionDeclaration',
  start: 96,
  end: 139,
  id: Node { type: 'Identifier', start: 105, end: 108, name: 'bar' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 111, end: 139, body: [ [Node] ] } }
FunctionDeclaration
96
139
Node { type: 'Identifier', start: 105, end: 108, name: 'bar' }
Identifier
105
108
bar
false
false
false
[]
Node {
  type: 'BlockStatement',
  start: 111,
  end: 139,
  body: 
   [ Node {
       type: 'ReturnStatement',
       start: 117,
       end: 137,
       argument: [Node] } ] }
BlockStatement
111
139
[ Node {
    type: 'ReturnStatement',
    start: 117,
    end: 137,
    argument: 
     Node {
       type: 'CallExpression',
       start: 124,
       end: 136,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'ReturnStatement',
  start: 117,
  end: 137,
  argument: 
   Node {
     type: 'CallExpression',
     start: 124,
     end: 136,
     callee: Node { type: 'Identifier', start: 124, end: 127, name: 'foo' },
     arguments: [ [Node], [Node], [Node] ] } }
ReturnStatement
117
137
Node {
  type: 'CallExpression',
  start: 124,
  end: 136,
  callee: Node { type: 'Identifier', start: 124, end: 127, name: 'foo' },
  arguments: 
   [ Node { type: 'Literal', start: 128, end: 129, value: 1, raw: '1' },
     Node { type: 'Literal', start: 131, end: 132, value: 2, raw: '2' },
     Node { type: 'Literal', start: 134, end: 135, value: 3, raw: '3' } ] }
CallExpression
124
136
Node { type: 'Identifier', start: 124, end: 127, name: 'foo' }
Identifier
124
127
foo
[ Node { type: 'Literal', start: 128, end: 129, value: 1, raw: '1' },
  Node { type: 'Literal', start: 131, end: 132, value: 2, raw: '2' },
  Node { type: 'Literal', start: 134, end: 135, value: 3, raw: '3' } ]
Node { type: 'Literal', start: 128, end: 129, value: 1, raw: '1' }
Literal
128
129
1
1
Node { type: 'Literal', start: 131, end: 132, value: 2, raw: '2' }
Literal
131
132
2
2
Node { type: 'Literal', start: 134, end: 135, value: 3, raw: '3' }
Literal
134
135
3
3
Node {
  type: 'ExpressionStatement',
  start: 141,
  end: 155,
  expression: 
   Node {
     type: 'CallExpression',
     start: 141,
     end: 154,
     callee: Node { type: 'Identifier', start: 141, end: 149, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
141
155
Node {
  type: 'CallExpression',
  start: 141,
  end: 154,
  callee: Node { type: 'Identifier', start: 141, end: 149, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 150, end: 153, name: 'bar' } ] }
CallExpression
141
154
Node { type: 'Identifier', start: 141, end: 149, name: 'noInline' }
Identifier
141
149
noInline
[ Node { type: 'Identifier', start: 150, end: 153, name: 'bar' } ]
Node { type: 'Identifier', start: 150, end: 153, name: 'bar' }
Identifier
150
153
bar
Node {
  type: 'ForStatement',
  start: 157,
  end: 283,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 162,
     end: 171,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 173,
     end: 182,
     left: Node { type: 'Identifier', start: 173, end: 174, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 177,
        end: 182,
        value: 10000,
        raw: '10000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 184,
     end: 187,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 186, end: 187, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 189,
     end: 283,
     body: [ [Node], [Node] ] } }
ForStatement
157
283
Node {
  type: 'VariableDeclaration',
  start: 162,
  end: 171,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 166,
       end: 171,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
162
171
[ Node {
    type: 'VariableDeclarator',
    start: 166,
    end: 171,
    id: Node { type: 'Identifier', start: 166, end: 167, name: 'i' },
    init: Node { type: 'Literal', start: 170, end: 171, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 166,
  end: 171,
  id: Node { type: 'Identifier', start: 166, end: 167, name: 'i' },
  init: Node { type: 'Literal', start: 170, end: 171, value: 0, raw: '0' } }
VariableDeclarator
166
171
Node { type: 'Identifier', start: 166, end: 167, name: 'i' }
Identifier
166
167
i
Node { type: 'Literal', start: 170, end: 171, value: 0, raw: '0' }
Literal
170
171
0
0
var
Node {
  type: 'BinaryExpression',
  start: 173,
  end: 182,
  left: Node { type: 'Identifier', start: 173, end: 174, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 177,
     end: 182,
     value: 10000,
     raw: '10000' } }
BinaryExpression
173
182
Node { type: 'Identifier', start: 173, end: 174, name: 'i' }
Identifier
173
174
i
<
Node {
  type: 'Literal',
  start: 177,
  end: 182,
  value: 10000,
  raw: '10000' }
Literal
177
182
10000
10000
Node {
  type: 'UpdateExpression',
  start: 184,
  end: 187,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 186, end: 187, name: 'i' } }
UpdateExpression
184
187
++
true
Node { type: 'Identifier', start: 186, end: 187, name: 'i' }
Identifier
186
187
i
Node {
  type: 'BlockStatement',
  start: 189,
  end: 283,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 195,
       end: 214,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 219,
       end: 281,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
189
283
[ Node {
    type: 'VariableDeclaration',
    start: 195,
    end: 214,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 219,
    end: 281,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 223,
       end: 234,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 244, end: 281, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 195,
  end: 214,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 199,
       end: 213,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
195
214
[ Node {
    type: 'VariableDeclarator',
    start: 199,
    end: 213,
    id: Node { type: 'Identifier', start: 199, end: 205, name: 'result' },
    init: 
     Node {
       type: 'CallExpression',
       start: 208,
       end: 213,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'VariableDeclarator',
  start: 199,
  end: 213,
  id: Node { type: 'Identifier', start: 199, end: 205, name: 'result' },
  init: 
   Node {
     type: 'CallExpression',
     start: 208,
     end: 213,
     callee: Node { type: 'Identifier', start: 208, end: 211, name: 'bar' },
     arguments: [] } }
VariableDeclarator
199
213
Node { type: 'Identifier', start: 199, end: 205, name: 'result' }
Identifier
199
205
result
Node {
  type: 'CallExpression',
  start: 208,
  end: 213,
  callee: Node { type: 'Identifier', start: 208, end: 211, name: 'bar' },
  arguments: [] }
CallExpression
208
213
Node { type: 'Identifier', start: 208, end: 211, name: 'bar' }
Identifier
208
211
bar
[]
var
Node {
  type: 'IfStatement',
  start: 219,
  end: 281,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 223,
     end: 234,
     left: Node { type: 'Identifier', start: 223, end: 229, name: 'result' },
     operator: '!=',
     right: Node { type: 'Literal', start: 233, end: 234, value: 3, raw: '3' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 244,
     end: 281,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 250,
        end: 280,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
219
281
Node {
  type: 'BinaryExpression',
  start: 223,
  end: 234,
  left: Node { type: 'Identifier', start: 223, end: 229, name: 'result' },
  operator: '!=',
  right: Node { type: 'Literal', start: 233, end: 234, value: 3, raw: '3' } }
BinaryExpression
223
234
Node { type: 'Identifier', start: 223, end: 229, name: 'result' }
Identifier
223
229
result
!=
Node { type: 'Literal', start: 233, end: 234, value: 3, raw: '3' }
Literal
233
234
3
3
Node {
  type: 'ThrowStatement',
  start: 244,
  end: 281,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 250,
     end: 280,
     left: 
      Node {
        type: 'Literal',
        start: 250,
        end: 271,
        value: 'Error: bad result: ',
        raw: '"Error: bad result: "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 274, end: 280, name: 'result' } } }
ThrowStatement
244
281
Node {
  type: 'BinaryExpression',
  start: 250,
  end: 280,
  left: 
   Node {
     type: 'Literal',
     start: 250,
     end: 271,
     value: 'Error: bad result: ',
     raw: '"Error: bad result: "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 274, end: 280, name: 'result' } }
BinaryExpression
250
280
Node {
  type: 'Literal',
  start: 250,
  end: 271,
  value: 'Error: bad result: ',
  raw: '"Error: bad result: "' }
Literal
250
271
Error: bad result: 
"Error: bad result: "
+
Node { type: 'Identifier', start: 274, end: 280, name: 'result' }
Identifier
274
280
result
null
[+] Exception: direct-tail-call-arity-mismatch-count-args.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 540,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 59,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 61,
       end: 103,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 104,
       end: 124,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 126,
       end: 175,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 176,
       end: 199,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 201,
       end: 269,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 270,
       end: 312,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 314,
       end: 539,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
540
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 59,
    id: Node { type: 'Identifier', start: 9, end: 15, name: 'assert' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 59, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 61,
    end: 103,
    id: Node { type: 'Identifier', start: 70, end: 79, name: 'makeError' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 82, end: 103, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 104,
    end: 124,
    expression: 
     Node {
       type: 'CallExpression',
       start: 104,
       end: 123,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 126,
    end: 175,
    id: Node { type: 'Identifier', start: 135, end: 147, name: 'storeToStack' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 151, end: 175, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 176,
    end: 199,
    expression: 
     Node {
       type: 'CallExpression',
       start: 176,
       end: 198,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 201,
    end: 269,
    id: 
     Node {
       type: 'Identifier',
       start: 210,
       end: 241,
       name: 'storeToStackAlreadyMaterialized' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 245, end: 269, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 270,
    end: 312,
    expression: 
     Node {
       type: 'CallExpression',
       start: 270,
       end: 311,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 314,
    end: 539,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 319,
       end: 328,
       declarations: [Array],
       kind: 'let' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 330,
       end: 339,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 341,
       end: 344,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 346, end: 539, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 59,
  id: Node { type: 'Identifier', start: 9, end: 15, name: 'assert' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ],
  body: Node { type: 'BlockStatement', start: 19, end: 59, body: [ [Node] ] } }
FunctionDeclaration
0
59
Node { type: 'Identifier', start: 9, end: 15, name: 'assert' }
Identifier
9
15
assert
false
false
false
[ Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ]
Node { type: 'Identifier', start: 16, end: 17, name: 'b' }
Identifier
16
17
b
Node {
  type: 'BlockStatement',
  start: 19,
  end: 59,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 25,
       end: 57,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
19
59
[ Node {
    type: 'IfStatement',
    start: 25,
    end: 57,
    test: 
     Node {
       type: 'UnaryExpression',
       start: 29,
       end: 31,
       operator: '!',
       prefix: true,
       argument: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 41, end: 57, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 25,
  end: 57,
  test: 
   Node {
     type: 'UnaryExpression',
     start: 29,
     end: 31,
     operator: '!',
     prefix: true,
     argument: Node { type: 'Identifier', start: 30, end: 31, name: 'b' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 41,
     end: 57,
     argument: 
      Node {
        type: 'NewExpression',
        start: 47,
        end: 56,
        callee: [Node],
        arguments: [] } },
  alternate: null }
IfStatement
25
57
Node {
  type: 'UnaryExpression',
  start: 29,
  end: 31,
  operator: '!',
  prefix: true,
  argument: Node { type: 'Identifier', start: 30, end: 31, name: 'b' } }
UnaryExpression
29
31
!
true
Node { type: 'Identifier', start: 30, end: 31, name: 'b' }
Identifier
30
31
b
Node {
  type: 'ThrowStatement',
  start: 41,
  end: 57,
  argument: 
   Node {
     type: 'NewExpression',
     start: 47,
     end: 56,
     callee: Node { type: 'Identifier', start: 51, end: 56, name: 'Error' },
     arguments: [] } }
ThrowStatement
41
57
Node {
  type: 'NewExpression',
  start: 47,
  end: 56,
  callee: Node { type: 'Identifier', start: 51, end: 56, name: 'Error' },
  arguments: [] }
NewExpression
47
56
Node { type: 'Identifier', start: 51, end: 56, name: 'Error' }
Identifier
51
56
Error
[]
null
[+] Exception: disable-caching-when-lazy-materializing-error-property-on-put.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 420,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 70,
       end: 335,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 337,
       end: 366,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 368,
       end: 374,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 375,
       end: 382,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 383,
       end: 418,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
420
[ Node {
    type: 'FunctionDeclaration',
    start: 70,
    end: 335,
    id: Node { type: 'Identifier', start: 79, end: 82, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 85, end: 335, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 337,
    end: 366,
    id: Node { type: 'Identifier', start: 346, end: 349, name: 'bar' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 352, end: 366, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 368,
    end: 374,
    expression: 
     Node {
       type: 'CallExpression',
       start: 368,
       end: 373,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 375,
    end: 382,
    expression: 
     Node {
       type: 'CallExpression',
       start: 375,
       end: 381,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 383,
    end: 418,
    expression: 
     Node {
       type: 'CallExpression',
       start: 383,
       end: 417,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 70,
  end: 335,
  id: Node { type: 'Identifier', start: 79, end: 82, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: 
   Node {
     type: 'BlockStatement',
     start: 85,
     end: 335,
     body: [ [Node], [Node], [Node] ] } }
FunctionDeclaration
70
335
Node { type: 'Identifier', start: 79, end: 82, name: 'foo' }
Identifier
79
82
foo
false
false
false
[]
Node {
  type: 'BlockStatement',
  start: 85,
  end: 335,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 91,
       end: 113,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 118,
       end: 191,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ForStatement',
       start: 196,
       end: 333,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ] }
BlockStatement
85
335
[ Node {
    type: 'VariableDeclaration',
    start: 91,
    end: 113,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 118,
    end: 191,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 122,
       end: 135,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 145, end: 191, argument: [Node] },
    alternate: null },
  Node {
    type: 'ForStatement',
    start: 196,
    end: 333,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 201,
       end: 210,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 212,
       end: 219,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 221,
       end: 224,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 226, end: 333, body: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 91,
  end: 113,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 95,
       end: 112,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
91
113
[ Node {
    type: 'VariableDeclarator',
    start: 95,
    end: 112,
    id: Node { type: 'Identifier', start: 95, end: 96, name: 'a' },
    init: 
     Node {
       type: 'MemberExpression',
       start: 99,
       end: 112,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'VariableDeclarator',
  start: 95,
  end: 112,
  id: Node { type: 'Identifier', start: 95, end: 96, name: 'a' },
  init: 
   Node {
     type: 'MemberExpression',
     start: 99,
     end: 112,
     object: Node { type: 'Identifier', start: 99, end: 102, name: 'bar' },
     property: Node { type: 'Identifier', start: 103, end: 112, name: 'arguments' },
     computed: false } }
VariableDeclarator
95
112
Node { type: 'Identifier', start: 95, end: 96, name: 'a' }
Identifier
95
96
a
Node {
  type: 'MemberExpression',
  start: 99,
  end: 112,
  object: Node { type: 'Identifier', start: 99, end: 102, name: 'bar' },
  property: Node { type: 'Identifier', start: 103, end: 112, name: 'arguments' },
  computed: false }
MemberExpression
99
112
Node { type: 'Identifier', start: 99, end: 102, name: 'bar' }
Identifier
99
102
bar
Node { type: 'Identifier', start: 103, end: 112, name: 'arguments' }
Identifier
103
112
arguments
false
var
Node {
  type: 'IfStatement',
  start: 118,
  end: 191,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 122,
     end: 135,
     left: 
      Node {
        type: 'MemberExpression',
        start: 122,
        end: 130,
        object: [Node],
        property: [Node],
        computed: false },
     operator: '!=',
     right: Node { type: 'Literal', start: 134, end: 135, value: 0, raw: '0' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 145,
     end: 191,
     argument: 
      Node {
        type: 'Literal',
        start: 151,
        end: 190,
        value: 'Error: arguments have non-zero length',
        raw: '"Error: arguments have non-zero length"' } },
  alternate: null }
IfStatement
118
191
Node {
  type: 'BinaryExpression',
  start: 122,
  end: 135,
  left: 
   Node {
     type: 'MemberExpression',
     start: 122,
     end: 130,
     object: Node { type: 'Identifier', start: 122, end: 123, name: 'a' },
     property: Node { type: 'Identifier', start: 124, end: 130, name: 'length' },
     computed: false },
  operator: '!=',
  right: Node { type: 'Literal', start: 134, end: 135, value: 0, raw: '0' } }
BinaryExpression
122
135
Node {
  type: 'MemberExpression',
  start: 122,
  end: 130,
  object: Node { type: 'Identifier', start: 122, end: 123, name: 'a' },
  property: Node { type: 'Identifier', start: 124, end: 130, name: 'length' },
  computed: false }
MemberExpression
122
130
Node { type: 'Identifier', start: 122, end: 123, name: 'a' }
Identifier
122
123
a
Node { type: 'Identifier', start: 124, end: 130, name: 'length' }
Identifier
124
130
length
false
!=
Node { type: 'Literal', start: 134, end: 135, value: 0, raw: '0' }
Literal
134
135
0
0
Node {
  type: 'ThrowStatement',
  start: 145,
  end: 191,
  argument: 
   Node {
     type: 'Literal',
     start: 151,
     end: 190,
     value: 'Error: arguments have non-zero length',
     raw: '"Error: arguments have non-zero length"' } }
ThrowStatement
145
191
Node {
  type: 'Literal',
  start: 151,
  end: 190,
  value: 'Error: arguments have non-zero length',
  raw: '"Error: arguments have non-zero length"' }
Literal
151
190
Error: arguments have non-zero length
"Error: arguments have non-zero length"
null
[+] Exception: disable-function-dot-arguments.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 605,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 66,
       end: 604,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
605
[ Node {
    type: 'ExpressionStatement',
    start: 66,
    end: 604,
    expression: 
     Node {
       type: 'CallExpression',
       start: 66,
       end: 603,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'ExpressionStatement',
  start: 66,
  end: 604,
  expression: 
   Node {
     type: 'CallExpression',
     start: 66,
     end: 603,
     callee: 
      Node {
        type: 'FunctionExpression',
        start: 67,
        end: 600,
        id: null,
        generator: false,
        expression: false,
        async: false,
        params: [],
        body: [Node] },
     arguments: [] } }
ExpressionStatement
66
604
Node {
  type: 'CallExpression',
  start: 66,
  end: 603,
  callee: 
   Node {
     type: 'FunctionExpression',
     start: 67,
     end: 600,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [],
     body: Node { type: 'BlockStatement', start: 78, end: 600, body: [Array] } },
  arguments: [] }
CallExpression
66
603
Node {
  type: 'FunctionExpression',
  start: 67,
  end: 600,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: 
   Node {
     type: 'BlockStatement',
     start: 78,
     end: 600,
     body: [ [Node], [Node], [Node], [Node], [Node] ] } }
FunctionExpression
67
600
null
[+] Exception: disable-gigacage-arrays.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 623,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 66,
       end: 621,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
623
[ Node {
    type: 'ExpressionStatement',
    start: 66,
    end: 621,
    expression: 
     Node {
       type: 'CallExpression',
       start: 66,
       end: 620,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'ExpressionStatement',
  start: 66,
  end: 621,
  expression: 
   Node {
     type: 'CallExpression',
     start: 66,
     end: 620,
     callee: 
      Node {
        type: 'FunctionExpression',
        start: 67,
        end: 617,
        id: null,
        generator: false,
        expression: false,
        async: false,
        params: [],
        body: [Node] },
     arguments: [] } }
ExpressionStatement
66
621
Node {
  type: 'CallExpression',
  start: 66,
  end: 620,
  callee: 
   Node {
     type: 'FunctionExpression',
     start: 67,
     end: 617,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [],
     body: Node { type: 'BlockStatement', start: 78, end: 617, body: [Array] } },
  arguments: [] }
CallExpression
66
620
Node {
  type: 'FunctionExpression',
  start: 67,
  end: 617,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: 
   Node {
     type: 'BlockStatement',
     start: 78,
     end: 617,
     body: [ [Node], [Node], [Node], [Node], [Node] ] } }
FunctionExpression
67
617
null
[+] Exception: disable-gigacage-strings.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 611,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 66,
       end: 609,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
611
[ Node {
    type: 'ExpressionStatement',
    start: 66,
    end: 609,
    expression: 
     Node {
       type: 'CallExpression',
       start: 66,
       end: 608,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'ExpressionStatement',
  start: 66,
  end: 609,
  expression: 
   Node {
     type: 'CallExpression',
     start: 66,
     end: 608,
     callee: 
      Node {
        type: 'FunctionExpression',
        start: 67,
        end: 605,
        id: null,
        generator: false,
        expression: false,
        async: false,
        params: [],
        body: [Node] },
     arguments: [] } }
ExpressionStatement
66
609
Node {
  type: 'CallExpression',
  start: 66,
  end: 608,
  callee: 
   Node {
     type: 'FunctionExpression',
     start: 67,
     end: 605,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [],
     body: Node { type: 'BlockStatement', start: 78, end: 605, body: [Array] } },
  arguments: [] }
CallExpression
66
608
Node {
  type: 'FunctionExpression',
  start: 67,
  end: 605,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: 
   Node {
     type: 'BlockStatement',
     start: 78,
     end: 605,
     body: [ [Node], [Node], [Node], [Node], [Node] ] } }
FunctionExpression
67
605
null
[+] Exception: disable-gigacage-typed-arrays.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 381,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 0,
       end: 22,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 24,
       end: 84,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 85,
       end: 102,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 104,
       end: 113,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'FunctionDeclaration',
       start: 115,
       end: 190,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 192,
       end: 265,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 267,
       end: 277,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'TryStatement',
       start: 278,
       end: 326,
       block: [Node],
       handler: [Node],
       finalizer: null },
     Node {
       type: 'ExpressionStatement',
       start: 327,
       end: 343,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 344,
       end: 380,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
381
[ Node {
    type: 'VariableDeclaration',
    start: 0,
    end: 22,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 24,
    end: 84,
    id: Node { type: 'Identifier', start: 33, end: 39, name: 'assert' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 43, end: 84, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 85,
    end: 102,
    expression: 
     Node {
       type: 'CallExpression',
       start: 85,
       end: 101,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 104,
    end: 113,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'FunctionDeclaration',
    start: 115,
    end: 190,
    id: Node { type: 'Identifier', start: 124, end: 125, name: 'f' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 132, end: 190, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 192,
    end: 265,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 197,
       end: 206,
       declarations: [Array],
       kind: 'let' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 208,
       end: 214,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 216,
       end: 219,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 221, end: 265, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 267,
    end: 277,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'TryStatement',
    start: 278,
    end: 326,
    block: Node { type: 'BlockStatement', start: 282, end: 298, body: [Array] },
    handler: 
     Node {
       type: 'CatchClause',
       start: 299,
       end: 326,
       param: [Node],
       body: [Node] },
    finalizer: null },
  Node {
    type: 'ExpressionStatement',
    start: 327,
    end: 343,
    expression: 
     Node {
       type: 'CallExpression',
       start: 327,
       end: 342,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 344,
    end: 380,
    expression: 
     Node {
       type: 'CallExpression',
       start: 344,
       end: 379,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 0,
  end: 22,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 4,
       end: 21,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
0
22
[ Node {
    type: 'VariableDeclarator',
    start: 4,
    end: 21,
    id: Node { type: 'Identifier', start: 4, end: 9, name: 'abort' },
    init: 
     Node {
       type: 'MemberExpression',
       start: 12,
       end: 21,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'VariableDeclarator',
  start: 4,
  end: 21,
  id: Node { type: 'Identifier', start: 4, end: 9, name: 'abort' },
  init: 
   Node {
     type: 'MemberExpression',
     start: 12,
     end: 21,
     object: Node { type: 'Identifier', start: 12, end: 15, name: '$vm' },
     property: Node { type: 'Identifier', start: 16, end: 21, name: 'abort' },
     computed: false } }
VariableDeclarator
4
21
Node { type: 'Identifier', start: 4, end: 9, name: 'abort' }
Identifier
4
9
abort
Node {
  type: 'MemberExpression',
  start: 12,
  end: 21,
  object: Node { type: 'Identifier', start: 12, end: 15, name: '$vm' },
  property: Node { type: 'Identifier', start: 16, end: 21, name: 'abort' },
  computed: false }
MemberExpression
12
21
Node { type: 'Identifier', start: 12, end: 15, name: '$vm' }
Identifier
12
15
$vm
Node { type: 'Identifier', start: 16, end: 21, name: 'abort' }
Identifier
16
21
abort
false
var
Node {
  type: 'FunctionDeclaration',
  start: 24,
  end: 84,
  id: Node { type: 'Identifier', start: 33, end: 39, name: 'assert' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 40, end: 41, name: 'b' } ],
  body: Node { type: 'BlockStatement', start: 43, end: 84, body: [ [Node] ] } }
FunctionDeclaration
24
84
Node { type: 'Identifier', start: 33, end: 39, name: 'assert' }
Identifier
33
39
assert
false
false
false
[ Node { type: 'Identifier', start: 40, end: 41, name: 'b' } ]
Node { type: 'Identifier', start: 40, end: 41, name: 'b' }
Identifier
40
41
b
Node {
  type: 'BlockStatement',
  start: 43,
  end: 84,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 49,
       end: 82,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
43
84
[ Node {
    type: 'IfStatement',
    start: 49,
    end: 82,
    test: 
     Node {
       type: 'UnaryExpression',
       start: 53,
       end: 55,
       operator: '!',
       prefix: true,
       argument: [Node] },
    consequent: Node { type: 'BlockStatement', start: 57, end: 82, body: [Array] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 49,
  end: 82,
  test: 
   Node {
     type: 'UnaryExpression',
     start: 53,
     end: 55,
     operator: '!',
     prefix: true,
     argument: Node { type: 'Identifier', start: 54, end: 55, name: 'b' } },
  consequent: Node { type: 'BlockStatement', start: 57, end: 82, body: [ [Node] ] },
  alternate: null }
IfStatement
49
82
Node {
  type: 'UnaryExpression',
  start: 53,
  end: 55,
  operator: '!',
  prefix: true,
  argument: Node { type: 'Identifier', start: 54, end: 55, name: 'b' } }
UnaryExpression
53
55
!
true
Node { type: 'Identifier', start: 54, end: 55, name: 'b' }
Identifier
54
55
b
Node {
  type: 'BlockStatement',
  start: 57,
  end: 82,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 67,
       end: 75,
       expression: [Node] } ] }
BlockStatement
57
82
[ Node {
    type: 'ExpressionStatement',
    start: 67,
    end: 75,
    expression: 
     Node {
       type: 'CallExpression',
       start: 67,
       end: 74,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'ExpressionStatement',
  start: 67,
  end: 75,
  expression: 
   Node {
     type: 'CallExpression',
     start: 67,
     end: 74,
     callee: Node { type: 'Identifier', start: 67, end: 72, name: 'abort' },
     arguments: [] } }
ExpressionStatement
67
75
Node {
  type: 'CallExpression',
  start: 67,
  end: 74,
  callee: Node { type: 'Identifier', start: 67, end: 72, name: 'abort' },
  arguments: [] }
CallExpression
67
74
Node { type: 'Identifier', start: 67, end: 72, name: 'abort' }
Identifier
67
72
abort
[]
null
[+] Exception: do-eval-virtual-call-correctly.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 839,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 0,
       end: 73,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 75,
       end: 149,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 151,
       end: 405,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 407,
       end: 452,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'VariableDeclaration',
       start: 453,
       end: 485,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'ExpressionStatement',
       start: 486,
       end: 508,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 510,
       end: 587,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 588,
       end: 607,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 609,
       end: 665,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 667,
       end: 682,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 683,
       end: 739,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 741,
       end: 773,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 774,
       end: 838,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
839
[ Node {
    type: 'VariableDeclaration',
    start: 0,
    end: 73,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 75,
    end: 149,
    id: Node { type: 'Identifier', start: 84, end: 90, name: 'assert' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 97, end: 149, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 151,
    end: 405,
    id: 
     Node {
       type: 'Identifier',
       start: 160,
       end: 179,
       name: 'makePolyProtoObject' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 182, end: 405, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 407,
    end: 452,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'VariableDeclaration',
    start: 453,
    end: 485,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'ExpressionStatement',
    start: 486,
    end: 508,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 486,
       end: 507,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'FunctionDeclaration',
    start: 510,
    end: 587,
    id: Node { type: 'Identifier', start: 519, end: 527, name: 'validate' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 534, end: 587, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 588,
    end: 607,
    expression: 
     Node {
       type: 'CallExpression',
       start: 588,
       end: 606,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 609,
    end: 665,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 614,
       end: 623,
       declarations: [Array],
       kind: 'let' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 625,
       end: 633,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 635,
       end: 638,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 644,
       end: 665,
       expression: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 667,
    end: 682,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 667,
       end: 681,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ForStatement',
    start: 683,
    end: 739,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 688,
       end: 697,
       declarations: [Array],
       kind: 'let' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 699,
       end: 707,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 709,
       end: 712,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 718,
       end: 739,
       expression: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 741,
    end: 773,
    expression: 
     Node {
       type: 'CallExpression',
       start: 741,
       end: 772,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 774,
    end: 838,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 779,
       end: 788,
       declarations: [Array],
       kind: 'let' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 790,
       end: 798,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 800,
       end: 803,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 805, end: 838, body: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 0,
  end: 73,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 4,
       end: 72,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
0
73
[ Node {
    type: 'VariableDeclarator',
    start: 4,
    end: 72,
    id: 
     Node {
       type: 'Identifier',
       start: 4,
       end: 34,
       name: 'createDOMJITGetterBaseJSObject' },
    init: 
     Node {
       type: 'MemberExpression',
       start: 38,
       end: 72,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'VariableDeclarator',
  start: 4,
  end: 72,
  id: 
   Node {
     type: 'Identifier',
     start: 4,
     end: 34,
     name: 'createDOMJITGetterBaseJSObject' },
  init: 
   Node {
     type: 'MemberExpression',
     start: 38,
     end: 72,
     object: Node { type: 'Identifier', start: 38, end: 41, name: '$vm' },
     property: 
      Node {
        type: 'Identifier',
        start: 42,
        end: 72,
        name: 'createDOMJITGetterBaseJSObject' },
     computed: false } }
VariableDeclarator
4
72
Node {
  type: 'Identifier',
  start: 4,
  end: 34,
  name: 'createDOMJITGetterBaseJSObject' }
Identifier
4
34
createDOMJITGetterBaseJSObject
Node {
  type: 'MemberExpression',
  start: 38,
  end: 72,
  object: Node { type: 'Identifier', start: 38, end: 41, name: '$vm' },
  property: 
   Node {
     type: 'Identifier',
     start: 42,
     end: 72,
     name: 'createDOMJITGetterBaseJSObject' },
  computed: false }
MemberExpression
38
72
Node { type: 'Identifier', start: 38, end: 41, name: '$vm' }
Identifier
38
41
$vm
Node {
  type: 'Identifier',
  start: 42,
  end: 72,
  name: 'createDOMJITGetterBaseJSObject' }
Identifier
42
72
createDOMJITGetterBaseJSObject
false
var
Node {
  type: 'FunctionDeclaration',
  start: 75,
  end: 149,
  id: Node { type: 'Identifier', start: 84, end: 90, name: 'assert' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 91, end: 92, name: 'b' },
     Node { type: 'Identifier', start: 94, end: 95, name: 'm' } ],
  body: Node { type: 'BlockStatement', start: 97, end: 149, body: [ [Node] ] } }
FunctionDeclaration
75
149
Node { type: 'Identifier', start: 84, end: 90, name: 'assert' }
Identifier
84
90
assert
false
false
false
[ Node { type: 'Identifier', start: 91, end: 92, name: 'b' },
  Node { type: 'Identifier', start: 94, end: 95, name: 'm' } ]
Node { type: 'Identifier', start: 91, end: 92, name: 'b' }
Identifier
91
92
b
Node { type: 'Identifier', start: 94, end: 95, name: 'm' }
Identifier
94
95
m
Node {
  type: 'BlockStatement',
  start: 97,
  end: 149,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 103,
       end: 147,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
97
149
[ Node {
    type: 'IfStatement',
    start: 103,
    end: 147,
    test: 
     Node {
       type: 'UnaryExpression',
       start: 107,
       end: 109,
       operator: '!',
       prefix: true,
       argument: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 119, end: 147, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 103,
  end: 147,
  test: 
   Node {
     type: 'UnaryExpression',
     start: 107,
     end: 109,
     operator: '!',
     prefix: true,
     argument: Node { type: 'Identifier', start: 108, end: 109, name: 'b' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 119,
     end: 147,
     argument: 
      Node {
        type: 'NewExpression',
        start: 125,
        end: 146,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
103
147
Node {
  type: 'UnaryExpression',
  start: 107,
  end: 109,
  operator: '!',
  prefix: true,
  argument: Node { type: 'Identifier', start: 108, end: 109, name: 'b' } }
UnaryExpression
107
109
!
true
Node { type: 'Identifier', start: 108, end: 109, name: 'b' }
Identifier
108
109
b
Node {
  type: 'ThrowStatement',
  start: 119,
  end: 147,
  argument: 
   Node {
     type: 'NewExpression',
     start: 125,
     end: 146,
     callee: Node { type: 'Identifier', start: 129, end: 134, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
119
147
Node {
  type: 'NewExpression',
  start: 125,
  end: 146,
  callee: Node { type: 'Identifier', start: 129, end: 134, name: 'Error' },
  arguments: 
   [ Node {
       type: 'BinaryExpression',
       start: 135,
       end: 145,
       left: [Node],
       operator: '+',
       right: [Node] } ] }
NewExpression
125
146
Node { type: 'Identifier', start: 129, end: 134, name: 'Error' }
Identifier
129
134
Error
[ Node {
    type: 'BinaryExpression',
    start: 135,
    end: 145,
    left: 
     Node {
       type: 'Literal',
       start: 135,
       end: 141,
       value: 'Bad:',
       raw: '"Bad:"' },
    operator: '+',
    right: Node { type: 'Identifier', start: 144, end: 145, name: 'm' } } ]
Node {
  type: 'BinaryExpression',
  start: 135,
  end: 145,
  left: 
   Node {
     type: 'Literal',
     start: 135,
     end: 141,
     value: 'Bad:',
     raw: '"Bad:"' },
  operator: '+',
  right: Node { type: 'Identifier', start: 144, end: 145, name: 'm' } }
BinaryExpression
135
145
Node {
  type: 'Literal',
  start: 135,
  end: 141,
  value: 'Bad:',
  raw: '"Bad:"' }
Literal
135
141
Bad:
"Bad:"
+
Node { type: 'Identifier', start: 144, end: 145, name: 'm' }
Identifier
144
145
m
null
[+] Exception: dom-jit-with-poly-proto.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1013,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 0,
       end: 74,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 76,
       end: 201,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 203,
       end: 552,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 554,
       end: 1012,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
1013
[ Node {
    type: 'VariableDeclaration',
    start: 0,
    end: 74,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 76,
    end: 201,
    id: Node { type: 'Identifier', start: 85, end: 93, name: 'shouldBe' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 112, end: 201, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 203,
    end: 552,
    id: Node { type: 'Identifier', start: 212, end: 223, name: 'shouldThrow' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 244, end: 552, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 554,
    end: 1012,
    expression: 
     Node {
       type: 'CallExpression',
       start: 555,
       end: 1010,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'VariableDeclaration',
  start: 0,
  end: 74,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 4,
       end: 73,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
0
74
[ Node {
    type: 'VariableDeclarator',
    start: 4,
    end: 73,
    id: 
     Node {
       type: 'Identifier',
       start: 4,
       end: 35,
       name: 'createDOMJITGetterComplexObject' },
    init: 
     Node {
       type: 'MemberExpression',
       start: 38,
       end: 73,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'VariableDeclarator',
  start: 4,
  end: 73,
  id: 
   Node {
     type: 'Identifier',
     start: 4,
     end: 35,
     name: 'createDOMJITGetterComplexObject' },
  init: 
   Node {
     type: 'MemberExpression',
     start: 38,
     end: 73,
     object: Node { type: 'Identifier', start: 38, end: 41, name: '$vm' },
     property: 
      Node {
        type: 'Identifier',
        start: 42,
        end: 73,
        name: 'createDOMJITGetterComplexObject' },
     computed: false } }
VariableDeclarator
4
73
Node {
  type: 'Identifier',
  start: 4,
  end: 35,
  name: 'createDOMJITGetterComplexObject' }
Identifier
4
35
createDOMJITGetterComplexObject
Node {
  type: 'MemberExpression',
  start: 38,
  end: 73,
  object: Node { type: 'Identifier', start: 38, end: 41, name: '$vm' },
  property: 
   Node {
     type: 'Identifier',
     start: 42,
     end: 73,
     name: 'createDOMJITGetterComplexObject' },
  computed: false }
MemberExpression
38
73
Node { type: 'Identifier', start: 38, end: 41, name: '$vm' }
Identifier
38
41
$vm
Node {
  type: 'Identifier',
  start: 42,
  end: 73,
  name: 'createDOMJITGetterComplexObject' }
Identifier
42
73
createDOMJITGetterComplexObject
false
var
Node {
  type: 'FunctionDeclaration',
  start: 76,
  end: 201,
  id: Node { type: 'Identifier', start: 85, end: 93, name: 'shouldBe' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 94, end: 100, name: 'actual' },
     Node { type: 'Identifier', start: 102, end: 110, name: 'expected' } ],
  body: Node { type: 'BlockStatement', start: 112, end: 201, body: [ [Node] ] } }
FunctionDeclaration
76
201
Node { type: 'Identifier', start: 85, end: 93, name: 'shouldBe' }
Identifier
85
93
shouldBe
false
false
false
[ Node { type: 'Identifier', start: 94, end: 100, name: 'actual' },
  Node { type: 'Identifier', start: 102, end: 110, name: 'expected' } ]
Node { type: 'Identifier', start: 94, end: 100, name: 'actual' }
Identifier
94
100
actual
Node { type: 'Identifier', start: 102, end: 110, name: 'expected' }
Identifier
102
110
expected
Node {
  type: 'BlockStatement',
  start: 112,
  end: 201,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 118,
       end: 199,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
112
201
[ Node {
    type: 'IfStatement',
    start: 118,
    end: 199,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 122,
       end: 141,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 151, end: 199, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 118,
  end: 199,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 122,
     end: 141,
     left: Node { type: 'Identifier', start: 122, end: 128, name: 'actual' },
     operator: '!==',
     right: Node { type: 'Identifier', start: 133, end: 141, name: 'expected' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 151,
     end: 199,
     argument: 
      Node {
        type: 'NewExpression',
        start: 157,
        end: 198,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
118
199
Node {
  type: 'BinaryExpression',
  start: 122,
  end: 141,
  left: Node { type: 'Identifier', start: 122, end: 128, name: 'actual' },
  operator: '!==',
  right: Node { type: 'Identifier', start: 133, end: 141, name: 'expected' } }
BinaryExpression
122
141
Node { type: 'Identifier', start: 122, end: 128, name: 'actual' }
Identifier
122
128
actual
!==
Node { type: 'Identifier', start: 133, end: 141, name: 'expected' }
Identifier
133
141
expected
Node {
  type: 'ThrowStatement',
  start: 151,
  end: 199,
  argument: 
   Node {
     type: 'NewExpression',
     start: 157,
     end: 198,
     callee: Node { type: 'Identifier', start: 161, end: 166, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
151
199
Node {
  type: 'NewExpression',
  start: 157,
  end: 198,
  callee: Node { type: 'Identifier', start: 161, end: 166, name: 'Error' },
  arguments: 
   [ Node {
       type: 'TemplateLiteral',
       start: 167,
       end: 197,
       expressions: [Array],
       quasis: [Array] } ] }
NewExpression
157
198
Node { type: 'Identifier', start: 161, end: 166, name: 'Error' }
Identifier
161
166
Error
[ Node {
    type: 'TemplateLiteral',
    start: 167,
    end: 197,
    expressions: [ [Node] ],
    quasis: [ [Node], [Node] ] } ]
Node {
  type: 'TemplateLiteral',
  start: 167,
  end: 197,
  expressions: 
   [ Node {
       type: 'CallExpression',
       start: 181,
       end: 195,
       callee: [Node],
       arguments: [Array] } ],
  quasis: 
   [ Node {
       type: 'TemplateElement',
       start: 168,
       end: 179,
       value: [Object],
       tail: false },
     Node {
       type: 'TemplateElement',
       start: 196,
       end: 196,
       value: [Object],
       tail: true } ] }
TemplateLiteral
167
197
[ Node {
    type: 'CallExpression',
    start: 181,
    end: 195,
    callee: Node { type: 'Identifier', start: 181, end: 187, name: 'String' },
    arguments: [ [Node] ] } ]
Node {
  type: 'CallExpression',
  start: 181,
  end: 195,
  callee: Node { type: 'Identifier', start: 181, end: 187, name: 'String' },
  arguments: 
   [ Node { type: 'Identifier', start: 188, end: 194, name: 'actual' } ] }
CallExpression
181
195
Node { type: 'Identifier', start: 181, end: 187, name: 'String' }
Identifier
181
187
String
[ Node { type: 'Identifier', start: 188, end: 194, name: 'actual' } ]
Node { type: 'Identifier', start: 188, end: 194, name: 'actual' }
Identifier
188
194
actual
[ Node {
    type: 'TemplateElement',
    start: 168,
    end: 179,
    value: { raw: 'bad value: ', cooked: 'bad value: ' },
    tail: false },
  Node {
    type: 'TemplateElement',
    start: 196,
    end: 196,
    value: { raw: '', cooked: '' },
    tail: true } ]
Node {
  type: 'TemplateElement',
  start: 168,
  end: 179,
  value: { raw: 'bad value: ', cooked: 'bad value: ' },
  tail: false }
TemplateElement
168
179
{ raw: 'bad value: ', cooked: 'bad value: ' }
bad value: 
bad value: 
false
Node {
  type: 'TemplateElement',
  start: 196,
  end: 196,
  value: { raw: '', cooked: '' },
  tail: true }
TemplateElement
196
196
{ raw: '', cooked: '' }


true
null
[+] Exception: domjit-exception-ic.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1999,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 0,
       end: 74,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 76,
       end: 201,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 203,
       end: 552,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 553,
       end: 914,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 915,
       end: 1276,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1277,
       end: 1637,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1638,
       end: 1998,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
1999
[ Node {
    type: 'VariableDeclaration',
    start: 0,
    end: 74,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 76,
    end: 201,
    id: Node { type: 'Identifier', start: 85, end: 93, name: 'shouldBe' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 112, end: 201, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 203,
    end: 552,
    id: Node { type: 'Identifier', start: 212, end: 223, name: 'shouldThrow' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 244, end: 552, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 553,
    end: 914,
    expression: 
     Node {
       type: 'CallExpression',
       start: 554,
       end: 912,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 915,
    end: 1276,
    expression: 
     Node {
       type: 'CallExpression',
       start: 916,
       end: 1274,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 1277,
    end: 1637,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1278,
       end: 1635,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 1638,
    end: 1998,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1639,
       end: 1996,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'VariableDeclaration',
  start: 0,
  end: 74,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 4,
       end: 73,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
0
74
[ Node {
    type: 'VariableDeclarator',
    start: 4,
    end: 73,
    id: 
     Node {
       type: 'Identifier',
       start: 4,
       end: 35,
       name: 'createDOMJITGetterComplexObject' },
    init: 
     Node {
       type: 'MemberExpression',
       start: 38,
       end: 73,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'VariableDeclarator',
  start: 4,
  end: 73,
  id: 
   Node {
     type: 'Identifier',
     start: 4,
     end: 35,
     name: 'createDOMJITGetterComplexObject' },
  init: 
   Node {
     type: 'MemberExpression',
     start: 38,
     end: 73,
     object: Node { type: 'Identifier', start: 38, end: 41, name: '$vm' },
     property: 
      Node {
        type: 'Identifier',
        start: 42,
        end: 73,
        name: 'createDOMJITGetterComplexObject' },
     computed: false } }
VariableDeclarator
4
73
Node {
  type: 'Identifier',
  start: 4,
  end: 35,
  name: 'createDOMJITGetterComplexObject' }
Identifier
4
35
createDOMJITGetterComplexObject
Node {
  type: 'MemberExpression',
  start: 38,
  end: 73,
  object: Node { type: 'Identifier', start: 38, end: 41, name: '$vm' },
  property: 
   Node {
     type: 'Identifier',
     start: 42,
     end: 73,
     name: 'createDOMJITGetterComplexObject' },
  computed: false }
MemberExpression
38
73
Node { type: 'Identifier', start: 38, end: 41, name: '$vm' }
Identifier
38
41
$vm
Node {
  type: 'Identifier',
  start: 42,
  end: 73,
  name: 'createDOMJITGetterComplexObject' }
Identifier
42
73
createDOMJITGetterComplexObject
false
var
Node {
  type: 'FunctionDeclaration',
  start: 76,
  end: 201,
  id: Node { type: 'Identifier', start: 85, end: 93, name: 'shouldBe' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 94, end: 100, name: 'actual' },
     Node { type: 'Identifier', start: 102, end: 110, name: 'expected' } ],
  body: Node { type: 'BlockStatement', start: 112, end: 201, body: [ [Node] ] } }
FunctionDeclaration
76
201
Node { type: 'Identifier', start: 85, end: 93, name: 'shouldBe' }
Identifier
85
93
shouldBe
false
false
false
[ Node { type: 'Identifier', start: 94, end: 100, name: 'actual' },
  Node { type: 'Identifier', start: 102, end: 110, name: 'expected' } ]
Node { type: 'Identifier', start: 94, end: 100, name: 'actual' }
Identifier
94
100
actual
Node { type: 'Identifier', start: 102, end: 110, name: 'expected' }
Identifier
102
110
expected
Node {
  type: 'BlockStatement',
  start: 112,
  end: 201,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 118,
       end: 199,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
112
201
[ Node {
    type: 'IfStatement',
    start: 118,
    end: 199,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 122,
       end: 141,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 151, end: 199, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 118,
  end: 199,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 122,
     end: 141,
     left: Node { type: 'Identifier', start: 122, end: 128, name: 'actual' },
     operator: '!==',
     right: Node { type: 'Identifier', start: 133, end: 141, name: 'expected' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 151,
     end: 199,
     argument: 
      Node {
        type: 'NewExpression',
        start: 157,
        end: 198,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
118
199
Node {
  type: 'BinaryExpression',
  start: 122,
  end: 141,
  left: Node { type: 'Identifier', start: 122, end: 128, name: 'actual' },
  operator: '!==',
  right: Node { type: 'Identifier', start: 133, end: 141, name: 'expected' } }
BinaryExpression
122
141
Node { type: 'Identifier', start: 122, end: 128, name: 'actual' }
Identifier
122
128
actual
!==
Node { type: 'Identifier', start: 133, end: 141, name: 'expected' }
Identifier
133
141
expected
Node {
  type: 'ThrowStatement',
  start: 151,
  end: 199,
  argument: 
   Node {
     type: 'NewExpression',
     start: 157,
     end: 198,
     callee: Node { type: 'Identifier', start: 161, end: 166, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
151
199
Node {
  type: 'NewExpression',
  start: 157,
  end: 198,
  callee: Node { type: 'Identifier', start: 161, end: 166, name: 'Error' },
  arguments: 
   [ Node {
       type: 'TemplateLiteral',
       start: 167,
       end: 197,
       expressions: [Array],
       quasis: [Array] } ] }
NewExpression
157
198
Node { type: 'Identifier', start: 161, end: 166, name: 'Error' }
Identifier
161
166
Error
[ Node {
    type: 'TemplateLiteral',
    start: 167,
    end: 197,
    expressions: [ [Node] ],
    quasis: [ [Node], [Node] ] } ]
Node {
  type: 'TemplateLiteral',
  start: 167,
  end: 197,
  expressions: 
   [ Node {
       type: 'CallExpression',
       start: 181,
       end: 195,
       callee: [Node],
       arguments: [Array] } ],
  quasis: 
   [ Node {
       type: 'TemplateElement',
       start: 168,
       end: 179,
       value: [Object],
       tail: false },
     Node {
       type: 'TemplateElement',
       start: 196,
       end: 196,
       value: [Object],
       tail: true } ] }
TemplateLiteral
167
197
[ Node {
    type: 'CallExpression',
    start: 181,
    end: 195,
    callee: Node { type: 'Identifier', start: 181, end: 187, name: 'String' },
    arguments: [ [Node] ] } ]
Node {
  type: 'CallExpression',
  start: 181,
  end: 195,
  callee: Node { type: 'Identifier', start: 181, end: 187, name: 'String' },
  arguments: 
   [ Node { type: 'Identifier', start: 188, end: 194, name: 'actual' } ] }
CallExpression
181
195
Node { type: 'Identifier', start: 181, end: 187, name: 'String' }
Identifier
181
187
String
[ Node { type: 'Identifier', start: 188, end: 194, name: 'actual' } ]
Node { type: 'Identifier', start: 188, end: 194, name: 'actual' }
Identifier
188
194
actual
[ Node {
    type: 'TemplateElement',
    start: 168,
    end: 179,
    value: { raw: 'bad value: ', cooked: 'bad value: ' },
    tail: false },
  Node {
    type: 'TemplateElement',
    start: 196,
    end: 196,
    value: { raw: '', cooked: '' },
    tail: true } ]
Node {
  type: 'TemplateElement',
  start: 168,
  end: 179,
  value: { raw: 'bad value: ', cooked: 'bad value: ' },
  tail: false }
TemplateElement
168
179
{ raw: 'bad value: ', cooked: 'bad value: ' }
bad value: 
bad value: 
false
Node {
  type: 'TemplateElement',
  start: 196,
  end: 196,
  value: { raw: '', cooked: '' },
  tail: true }
TemplateElement
196
196
{ raw: '', cooked: '' }


true
null
[+] Exception: domjit-exception.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 800,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 0,
       end: 74,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 76,
       end: 425,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 427,
       end: 475,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 476,
       end: 492,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 493,
       end: 520,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 521,
       end: 580,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 581,
       end: 598,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 599,
       end: 799,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
800
[ Node {
    type: 'VariableDeclaration',
    start: 0,
    end: 74,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 76,
    end: 425,
    id: Node { type: 'Identifier', start: 85, end: 96, name: 'shouldThrow' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 117, end: 425, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 427,
    end: 475,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 476,
    end: 492,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 493,
    end: 520,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 493,
       end: 519,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'FunctionDeclaration',
    start: 521,
    end: 580,
    id: Node { type: 'Identifier', start: 530, end: 536, name: 'access' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 545, end: 580, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 581,
    end: 598,
    expression: 
     Node {
       type: 'CallExpression',
       start: 581,
       end: 597,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 599,
    end: 799,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 604,
       end: 613,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 615,
       end: 622,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 624,
       end: 627,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 629, end: 799, body: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 0,
  end: 74,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 4,
       end: 73,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
0
74
[ Node {
    type: 'VariableDeclarator',
    start: 4,
    end: 73,
    id: 
     Node {
       type: 'Identifier',
       start: 4,
       end: 35,
       name: 'createDOMJITGetterComplexObject' },
    init: 
     Node {
       type: 'MemberExpression',
       start: 38,
       end: 73,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'VariableDeclarator',
  start: 4,
  end: 73,
  id: 
   Node {
     type: 'Identifier',
     start: 4,
     end: 35,
     name: 'createDOMJITGetterComplexObject' },
  init: 
   Node {
     type: 'MemberExpression',
     start: 38,
     end: 73,
     object: Node { type: 'Identifier', start: 38, end: 41, name: '$vm' },
     property: 
      Node {
        type: 'Identifier',
        start: 42,
        end: 73,
        name: 'createDOMJITGetterComplexObject' },
     computed: false } }
VariableDeclarator
4
73
Node {
  type: 'Identifier',
  start: 4,
  end: 35,
  name: 'createDOMJITGetterComplexObject' }
Identifier
4
35
createDOMJITGetterComplexObject
Node {
  type: 'MemberExpression',
  start: 38,
  end: 73,
  object: Node { type: 'Identifier', start: 38, end: 41, name: '$vm' },
  property: 
   Node {
     type: 'Identifier',
     start: 42,
     end: 73,
     name: 'createDOMJITGetterComplexObject' },
  computed: false }
MemberExpression
38
73
Node { type: 'Identifier', start: 38, end: 41, name: '$vm' }
Identifier
38
41
$vm
Node {
  type: 'Identifier',
  start: 42,
  end: 73,
  name: 'createDOMJITGetterComplexObject' }
Identifier
42
73
createDOMJITGetterComplexObject
false
var
Node {
  type: 'FunctionDeclaration',
  start: 76,
  end: 425,
  id: Node { type: 'Identifier', start: 85, end: 96, name: 'shouldThrow' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 97, end: 101, name: 'func' },
     Node { type: 'Identifier', start: 103, end: 115, name: 'errorMessage' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 117,
     end: 425,
     body: [ [Node], [Node], [Node], [Node], [Node] ] } }
FunctionDeclaration
76
425
Node { type: 'Identifier', start: 85, end: 96, name: 'shouldThrow' }
Identifier
85
96
shouldThrow
false
false
false
[ Node { type: 'Identifier', start: 97, end: 101, name: 'func' },
  Node { type: 'Identifier', start: 103, end: 115, name: 'errorMessage' } ]
Node { type: 'Identifier', start: 97, end: 101, name: 'func' }
Identifier
97
101
func
Node { type: 'Identifier', start: 103, end: 115, name: 'errorMessage' }
Identifier
103
115
errorMessage
Node {
  type: 'BlockStatement',
  start: 117,
  end: 425,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 123,
       end: 147,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 152,
       end: 169,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'TryStatement',
       start: 174,
       end: 266,
       block: [Node],
       handler: [Node],
       finalizer: null },
     Node {
       type: 'IfStatement',
       start: 271,
       end: 327,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 332,
       end: 423,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
117
425
[ Node {
    type: 'VariableDeclaration',
    start: 123,
    end: 147,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 152,
    end: 169,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'TryStatement',
    start: 174,
    end: 266,
    block: Node { type: 'BlockStatement', start: 178, end: 201, body: [Array] },
    handler: 
     Node {
       type: 'CatchClause',
       start: 202,
       end: 266,
       param: [Node],
       body: [Node] },
    finalizer: null },
  Node {
    type: 'IfStatement',
    start: 271,
    end: 327,
    test: 
     Node {
       type: 'UnaryExpression',
       start: 275,
       end: 287,
       operator: '!',
       prefix: true,
       argument: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 297, end: 327, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 332,
    end: 423,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 336,
       end: 366,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 376, end: 423, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 123,
  end: 147,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 127,
       end: 146,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
123
147
[ Node {
    type: 'VariableDeclarator',
    start: 127,
    end: 146,
    id: Node { type: 'Identifier', start: 127, end: 138, name: 'errorThrown' },
    init: 
     Node {
       type: 'Literal',
       start: 141,
       end: 146,
       value: false,
       raw: 'false' } } ]
Node {
  type: 'VariableDeclarator',
  start: 127,
  end: 146,
  id: Node { type: 'Identifier', start: 127, end: 138, name: 'errorThrown' },
  init: 
   Node {
     type: 'Literal',
     start: 141,
     end: 146,
     value: false,
     raw: 'false' } }
VariableDeclarator
127
146
Node { type: 'Identifier', start: 127, end: 138, name: 'errorThrown' }
Identifier
127
138
errorThrown
Node {
  type: 'Literal',
  start: 141,
  end: 146,
  value: false,
  raw: 'false' }
Literal
141
146
false
false
var
Node {
  type: 'VariableDeclaration',
  start: 152,
  end: 169,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 156,
       end: 168,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
152
169
[ Node {
    type: 'VariableDeclarator',
    start: 156,
    end: 168,
    id: Node { type: 'Identifier', start: 156, end: 161, name: 'error' },
    init: Node { type: 'Literal', start: 164, end: 168, value: null, raw: 'null' } } ]
Node {
  type: 'VariableDeclarator',
  start: 156,
  end: 168,
  id: Node { type: 'Identifier', start: 156, end: 161, name: 'error' },
  init: Node { type: 'Literal', start: 164, end: 168, value: null, raw: 'null' } }
VariableDeclarator
156
168
Node { type: 'Identifier', start: 156, end: 161, name: 'error' }
Identifier
156
161
error
Node { type: 'Literal', start: 164, end: 168, value: null, raw: 'null' }
Literal
164
168
null
[+] Exception: domjit-getter-complex-with-incorrect-object.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 401,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 0,
       end: 74,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 76,
       end: 201,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 203,
       end: 251,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 252,
       end: 313,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 314,
       end: 331,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 332,
       end: 400,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
401
[ Node {
    type: 'VariableDeclaration',
    start: 0,
    end: 74,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 76,
    end: 201,
    id: Node { type: 'Identifier', start: 85, end: 93, name: 'shouldBe' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 112, end: 201, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 203,
    end: 251,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 252,
    end: 313,
    id: Node { type: 'Identifier', start: 261, end: 267, name: 'access' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 277, end: 313, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 314,
    end: 331,
    expression: 
     Node {
       type: 'CallExpression',
       start: 314,
       end: 330,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 332,
    end: 400,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 337,
       end: 346,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 348,
       end: 355,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 357,
       end: 360,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 362, end: 400, body: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 0,
  end: 74,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 4,
       end: 73,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
0
74
[ Node {
    type: 'VariableDeclarator',
    start: 4,
    end: 73,
    id: 
     Node {
       type: 'Identifier',
       start: 4,
       end: 35,
       name: 'createDOMJITGetterComplexObject' },
    init: 
     Node {
       type: 'MemberExpression',
       start: 38,
       end: 73,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'VariableDeclarator',
  start: 4,
  end: 73,
  id: 
   Node {
     type: 'Identifier',
     start: 4,
     end: 35,
     name: 'createDOMJITGetterComplexObject' },
  init: 
   Node {
     type: 'MemberExpression',
     start: 38,
     end: 73,
     object: Node { type: 'Identifier', start: 38, end: 41, name: '$vm' },
     property: 
      Node {
        type: 'Identifier',
        start: 42,
        end: 73,
        name: 'createDOMJITGetterComplexObject' },
     computed: false } }
VariableDeclarator
4
73
Node {
  type: 'Identifier',
  start: 4,
  end: 35,
  name: 'createDOMJITGetterComplexObject' }
Identifier
4
35
createDOMJITGetterComplexObject
Node {
  type: 'MemberExpression',
  start: 38,
  end: 73,
  object: Node { type: 'Identifier', start: 38, end: 41, name: '$vm' },
  property: 
   Node {
     type: 'Identifier',
     start: 42,
     end: 73,
     name: 'createDOMJITGetterComplexObject' },
  computed: false }
MemberExpression
38
73
Node { type: 'Identifier', start: 38, end: 41, name: '$vm' }
Identifier
38
41
$vm
Node {
  type: 'Identifier',
  start: 42,
  end: 73,
  name: 'createDOMJITGetterComplexObject' }
Identifier
42
73
createDOMJITGetterComplexObject
false
var
Node {
  type: 'FunctionDeclaration',
  start: 76,
  end: 201,
  id: Node { type: 'Identifier', start: 85, end: 93, name: 'shouldBe' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 94, end: 100, name: 'actual' },
     Node { type: 'Identifier', start: 102, end: 110, name: 'expected' } ],
  body: Node { type: 'BlockStatement', start: 112, end: 201, body: [ [Node] ] } }
FunctionDeclaration
76
201
Node { type: 'Identifier', start: 85, end: 93, name: 'shouldBe' }
Identifier
85
93
shouldBe
false
false
false
[ Node { type: 'Identifier', start: 94, end: 100, name: 'actual' },
  Node { type: 'Identifier', start: 102, end: 110, name: 'expected' } ]
Node { type: 'Identifier', start: 94, end: 100, name: 'actual' }
Identifier
94
100
actual
Node { type: 'Identifier', start: 102, end: 110, name: 'expected' }
Identifier
102
110
expected
Node {
  type: 'BlockStatement',
  start: 112,
  end: 201,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 118,
       end: 199,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
112
201
[ Node {
    type: 'IfStatement',
    start: 118,
    end: 199,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 122,
       end: 141,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 151, end: 199, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 118,
  end: 199,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 122,
     end: 141,
     left: Node { type: 'Identifier', start: 122, end: 128, name: 'actual' },
     operator: '!==',
     right: Node { type: 'Identifier', start: 133, end: 141, name: 'expected' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 151,
     end: 199,
     argument: 
      Node {
        type: 'NewExpression',
        start: 157,
        end: 198,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
118
199
Node {
  type: 'BinaryExpression',
  start: 122,
  end: 141,
  left: Node { type: 'Identifier', start: 122, end: 128, name: 'actual' },
  operator: '!==',
  right: Node { type: 'Identifier', start: 133, end: 141, name: 'expected' } }
BinaryExpression
122
141
Node { type: 'Identifier', start: 122, end: 128, name: 'actual' }
Identifier
122
128
actual
!==
Node { type: 'Identifier', start: 133, end: 141, name: 'expected' }
Identifier
133
141
expected
Node {
  type: 'ThrowStatement',
  start: 151,
  end: 199,
  argument: 
   Node {
     type: 'NewExpression',
     start: 157,
     end: 198,
     callee: Node { type: 'Identifier', start: 161, end: 166, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
151
199
Node {
  type: 'NewExpression',
  start: 157,
  end: 198,
  callee: Node { type: 'Identifier', start: 161, end: 166, name: 'Error' },
  arguments: 
   [ Node {
       type: 'TemplateLiteral',
       start: 167,
       end: 197,
       expressions: [Array],
       quasis: [Array] } ] }
NewExpression
157
198
Node { type: 'Identifier', start: 161, end: 166, name: 'Error' }
Identifier
161
166
Error
[ Node {
    type: 'TemplateLiteral',
    start: 167,
    end: 197,
    expressions: [ [Node] ],
    quasis: [ [Node], [Node] ] } ]
Node {
  type: 'TemplateLiteral',
  start: 167,
  end: 197,
  expressions: 
   [ Node {
       type: 'CallExpression',
       start: 181,
       end: 195,
       callee: [Node],
       arguments: [Array] } ],
  quasis: 
   [ Node {
       type: 'TemplateElement',
       start: 168,
       end: 179,
       value: [Object],
       tail: false },
     Node {
       type: 'TemplateElement',
       start: 196,
       end: 196,
       value: [Object],
       tail: true } ] }
TemplateLiteral
167
197
[ Node {
    type: 'CallExpression',
    start: 181,
    end: 195,
    callee: Node { type: 'Identifier', start: 181, end: 187, name: 'String' },
    arguments: [ [Node] ] } ]
Node {
  type: 'CallExpression',
  start: 181,
  end: 195,
  callee: Node { type: 'Identifier', start: 181, end: 187, name: 'String' },
  arguments: 
   [ Node { type: 'Identifier', start: 188, end: 194, name: 'actual' } ] }
CallExpression
181
195
Node { type: 'Identifier', start: 181, end: 187, name: 'String' }
Identifier
181
187
String
[ Node { type: 'Identifier', start: 188, end: 194, name: 'actual' } ]
Node { type: 'Identifier', start: 188, end: 194, name: 'actual' }
Identifier
188
194
actual
[ Node {
    type: 'TemplateElement',
    start: 168,
    end: 179,
    value: { raw: 'bad value: ', cooked: 'bad value: ' },
    tail: false },
  Node {
    type: 'TemplateElement',
    start: 196,
    end: 196,
    value: { raw: '', cooked: '' },
    tail: true } ]
Node {
  type: 'TemplateElement',
  start: 168,
  end: 179,
  value: { raw: 'bad value: ', cooked: 'bad value: ' },
  tail: false }
TemplateElement
168
179
{ raw: 'bad value: ', cooked: 'bad value: ' }
bad value: 
bad value: 
false
Node {
  type: 'TemplateElement',
  start: 196,
  end: 196,
  value: { raw: '', cooked: '' },
  tail: true }
TemplateElement
196
196
{ raw: '', cooked: '' }


true
null
[+] Exception: domjit-getter-complex.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 539,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 0,
       end: 60,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 62,
       end: 187,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 189,
       end: 230,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 231,
       end: 272,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 274,
       end: 355,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 357,
       end: 443,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 445,
       end: 488,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 489,
       end: 507,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 508,
       end: 538,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
539
[ Node {
    type: 'VariableDeclaration',
    start: 0,
    end: 60,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 62,
    end: 187,
    id: Node { type: 'Identifier', start: 71, end: 79, name: 'shouldBe' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 98, end: 187, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 189,
    end: 230,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 231,
    end: 272,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 274,
    end: 355,
    id: Node { type: 'Identifier', start: 283, end: 289, name: 'access' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 298, end: 355, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 357,
    end: 443,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 362,
       end: 371,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 373,
       end: 380,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 382,
       end: 385,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 391,
       end: 443,
       expression: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 445,
    end: 488,
    expression: 
     Node {
       type: 'CallExpression',
       start: 445,
       end: 487,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 489,
    end: 507,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 489,
       end: 506,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 508,
    end: 538,
    expression: 
     Node {
       type: 'CallExpression',
       start: 508,
       end: 537,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 0,
  end: 60,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 4,
       end: 59,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
0
60
[ Node {
    type: 'VariableDeclarator',
    start: 4,
    end: 59,
    id: 
     Node {
       type: 'Identifier',
       start: 4,
       end: 28,
       name: 'createDOMJITGetterObject' },
    init: 
     Node {
       type: 'MemberExpression',
       start: 31,
       end: 59,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'VariableDeclarator',
  start: 4,
  end: 59,
  id: 
   Node {
     type: 'Identifier',
     start: 4,
     end: 28,
     name: 'createDOMJITGetterObject' },
  init: 
   Node {
     type: 'MemberExpression',
     start: 31,
     end: 59,
     object: Node { type: 'Identifier', start: 31, end: 34, name: '$vm' },
     property: 
      Node {
        type: 'Identifier',
        start: 35,
        end: 59,
        name: 'createDOMJITGetterObject' },
     computed: false } }
VariableDeclarator
4
59
Node {
  type: 'Identifier',
  start: 4,
  end: 28,
  name: 'createDOMJITGetterObject' }
Identifier
4
28
createDOMJITGetterObject
Node {
  type: 'MemberExpression',
  start: 31,
  end: 59,
  object: Node { type: 'Identifier', start: 31, end: 34, name: '$vm' },
  property: 
   Node {
     type: 'Identifier',
     start: 35,
     end: 59,
     name: 'createDOMJITGetterObject' },
  computed: false }
MemberExpression
31
59
Node { type: 'Identifier', start: 31, end: 34, name: '$vm' }
Identifier
31
34
$vm
Node {
  type: 'Identifier',
  start: 35,
  end: 59,
  name: 'createDOMJITGetterObject' }
Identifier
35
59
createDOMJITGetterObject
false
var
Node {
  type: 'FunctionDeclaration',
  start: 62,
  end: 187,
  id: Node { type: 'Identifier', start: 71, end: 79, name: 'shouldBe' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 80, end: 86, name: 'actual' },
     Node { type: 'Identifier', start: 88, end: 96, name: 'expected' } ],
  body: Node { type: 'BlockStatement', start: 98, end: 187, body: [ [Node] ] } }
FunctionDeclaration
62
187
Node { type: 'Identifier', start: 71, end: 79, name: 'shouldBe' }
Identifier
71
79
shouldBe
false
false
false
[ Node { type: 'Identifier', start: 80, end: 86, name: 'actual' },
  Node { type: 'Identifier', start: 88, end: 96, name: 'expected' } ]
Node { type: 'Identifier', start: 80, end: 86, name: 'actual' }
Identifier
80
86
actual
Node { type: 'Identifier', start: 88, end: 96, name: 'expected' }
Identifier
88
96
expected
Node {
  type: 'BlockStatement',
  start: 98,
  end: 187,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 104,
       end: 185,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
98
187
[ Node {
    type: 'IfStatement',
    start: 104,
    end: 185,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 108,
       end: 127,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 137, end: 185, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 104,
  end: 185,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 108,
     end: 127,
     left: Node { type: 'Identifier', start: 108, end: 114, name: 'actual' },
     operator: '!==',
     right: Node { type: 'Identifier', start: 119, end: 127, name: 'expected' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 137,
     end: 185,
     argument: 
      Node {
        type: 'NewExpression',
        start: 143,
        end: 184,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
104
185
Node {
  type: 'BinaryExpression',
  start: 108,
  end: 127,
  left: Node { type: 'Identifier', start: 108, end: 114, name: 'actual' },
  operator: '!==',
  right: Node { type: 'Identifier', start: 119, end: 127, name: 'expected' } }
BinaryExpression
108
127
Node { type: 'Identifier', start: 108, end: 114, name: 'actual' }
Identifier
108
114
actual
!==
Node { type: 'Identifier', start: 119, end: 127, name: 'expected' }
Identifier
119
127
expected
Node {
  type: 'ThrowStatement',
  start: 137,
  end: 185,
  argument: 
   Node {
     type: 'NewExpression',
     start: 143,
     end: 184,
     callee: Node { type: 'Identifier', start: 147, end: 152, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
137
185
Node {
  type: 'NewExpression',
  start: 143,
  end: 184,
  callee: Node { type: 'Identifier', start: 147, end: 152, name: 'Error' },
  arguments: 
   [ Node {
       type: 'TemplateLiteral',
       start: 153,
       end: 183,
       expressions: [Array],
       quasis: [Array] } ] }
NewExpression
143
184
Node { type: 'Identifier', start: 147, end: 152, name: 'Error' }
Identifier
147
152
Error
[ Node {
    type: 'TemplateLiteral',
    start: 153,
    end: 183,
    expressions: [ [Node] ],
    quasis: [ [Node], [Node] ] } ]
Node {
  type: 'TemplateLiteral',
  start: 153,
  end: 183,
  expressions: 
   [ Node {
       type: 'CallExpression',
       start: 167,
       end: 181,
       callee: [Node],
       arguments: [Array] } ],
  quasis: 
   [ Node {
       type: 'TemplateElement',
       start: 154,
       end: 165,
       value: [Object],
       tail: false },
     Node {
       type: 'TemplateElement',
       start: 182,
       end: 182,
       value: [Object],
       tail: true } ] }
TemplateLiteral
153
183
[ Node {
    type: 'CallExpression',
    start: 167,
    end: 181,
    callee: Node { type: 'Identifier', start: 167, end: 173, name: 'String' },
    arguments: [ [Node] ] } ]
Node {
  type: 'CallExpression',
  start: 167,
  end: 181,
  callee: Node { type: 'Identifier', start: 167, end: 173, name: 'String' },
  arguments: 
   [ Node { type: 'Identifier', start: 174, end: 180, name: 'actual' } ] }
CallExpression
167
181
Node { type: 'Identifier', start: 167, end: 173, name: 'String' }
Identifier
167
173
String
[ Node { type: 'Identifier', start: 174, end: 180, name: 'actual' } ]
Node { type: 'Identifier', start: 174, end: 180, name: 'actual' }
Identifier
174
180
actual
[ Node {
    type: 'TemplateElement',
    start: 154,
    end: 165,
    value: { raw: 'bad value: ', cooked: 'bad value: ' },
    tail: false },
  Node {
    type: 'TemplateElement',
    start: 182,
    end: 182,
    value: { raw: '', cooked: '' },
    tail: true } ]
Node {
  type: 'TemplateElement',
  start: 154,
  end: 165,
  value: { raw: 'bad value: ', cooked: 'bad value: ' },
  tail: false }
TemplateElement
154
165
{ raw: 'bad value: ', cooked: 'bad value: ' }
bad value: 
bad value: 
false
Node {
  type: 'TemplateElement',
  start: 182,
  end: 182,
  value: { raw: '', cooked: '' },
  tail: true }
TemplateElement
182
182
{ raw: '', cooked: '' }


true
null
[+] Exception: domjit-getter-poly.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 464,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 0,
       end: 56,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 58,
       end: 183,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 185,
       end: 223,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 224,
       end: 305,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 307,
       end: 370,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 372,
       end: 415,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 416,
       end: 433,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 434,
       end: 463,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
464
[ Node {
    type: 'VariableDeclaration',
    start: 0,
    end: 56,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 58,
    end: 183,
    id: Node { type: 'Identifier', start: 67, end: 75, name: 'shouldBe' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 94, end: 183, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 185,
    end: 223,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 224,
    end: 305,
    id: Node { type: 'Identifier', start: 233, end: 239, name: 'access' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 248, end: 305, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 307,
    end: 370,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 312,
       end: 321,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 323,
       end: 330,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 332,
       end: 335,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 341,
       end: 370,
       expression: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 372,
    end: 415,
    expression: 
     Node {
       type: 'CallExpression',
       start: 372,
       end: 414,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 416,
    end: 433,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 416,
       end: 432,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 434,
    end: 463,
    expression: 
     Node {
       type: 'CallExpression',
       start: 434,
       end: 462,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 0,
  end: 56,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 4,
       end: 55,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
0
56
[ Node {
    type: 'VariableDeclarator',
    start: 4,
    end: 55,
    id: 
     Node {
       type: 'Identifier',
       start: 4,
       end: 26,
       name: 'createDOMJITNodeObject' },
    init: 
     Node {
       type: 'MemberExpression',
       start: 29,
       end: 55,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'VariableDeclarator',
  start: 4,
  end: 55,
  id: 
   Node {
     type: 'Identifier',
     start: 4,
     end: 26,
     name: 'createDOMJITNodeObject' },
  init: 
   Node {
     type: 'MemberExpression',
     start: 29,
     end: 55,
     object: Node { type: 'Identifier', start: 29, end: 32, name: '$vm' },
     property: 
      Node {
        type: 'Identifier',
        start: 33,
        end: 55,
        name: 'createDOMJITNodeObject' },
     computed: false } }
VariableDeclarator
4
55
Node {
  type: 'Identifier',
  start: 4,
  end: 26,
  name: 'createDOMJITNodeObject' }
Identifier
4
26
createDOMJITNodeObject
Node {
  type: 'MemberExpression',
  start: 29,
  end: 55,
  object: Node { type: 'Identifier', start: 29, end: 32, name: '$vm' },
  property: 
   Node {
     type: 'Identifier',
     start: 33,
     end: 55,
     name: 'createDOMJITNodeObject' },
  computed: false }
MemberExpression
29
55
Node { type: 'Identifier', start: 29, end: 32, name: '$vm' }
Identifier
29
32
$vm
Node {
  type: 'Identifier',
  start: 33,
  end: 55,
  name: 'createDOMJITNodeObject' }
Identifier
33
55
createDOMJITNodeObject
false
var
Node {
  type: 'FunctionDeclaration',
  start: 58,
  end: 183,
  id: Node { type: 'Identifier', start: 67, end: 75, name: 'shouldBe' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 76, end: 82, name: 'actual' },
     Node { type: 'Identifier', start: 84, end: 92, name: 'expected' } ],
  body: Node { type: 'BlockStatement', start: 94, end: 183, body: [ [Node] ] } }
FunctionDeclaration
58
183
Node { type: 'Identifier', start: 67, end: 75, name: 'shouldBe' }
Identifier
67
75
shouldBe
false
false
false
[ Node { type: 'Identifier', start: 76, end: 82, name: 'actual' },
  Node { type: 'Identifier', start: 84, end: 92, name: 'expected' } ]
Node { type: 'Identifier', start: 76, end: 82, name: 'actual' }
Identifier
76
82
actual
Node { type: 'Identifier', start: 84, end: 92, name: 'expected' }
Identifier
84
92
expected
Node {
  type: 'BlockStatement',
  start: 94,
  end: 183,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 100,
       end: 181,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
94
183
[ Node {
    type: 'IfStatement',
    start: 100,
    end: 181,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 104,
       end: 123,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 133, end: 181, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 100,
  end: 181,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 104,
     end: 123,
     left: Node { type: 'Identifier', start: 104, end: 110, name: 'actual' },
     operator: '!==',
     right: Node { type: 'Identifier', start: 115, end: 123, name: 'expected' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 133,
     end: 181,
     argument: 
      Node {
        type: 'NewExpression',
        start: 139,
        end: 180,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
100
181
Node {
  type: 'BinaryExpression',
  start: 104,
  end: 123,
  left: Node { type: 'Identifier', start: 104, end: 110, name: 'actual' },
  operator: '!==',
  right: Node { type: 'Identifier', start: 115, end: 123, name: 'expected' } }
BinaryExpression
104
123
Node { type: 'Identifier', start: 104, end: 110, name: 'actual' }
Identifier
104
110
actual
!==
Node { type: 'Identifier', start: 115, end: 123, name: 'expected' }
Identifier
115
123
expected
Node {
  type: 'ThrowStatement',
  start: 133,
  end: 181,
  argument: 
   Node {
     type: 'NewExpression',
     start: 139,
     end: 180,
     callee: Node { type: 'Identifier', start: 143, end: 148, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
133
181
Node {
  type: 'NewExpression',
  start: 139,
  end: 180,
  callee: Node { type: 'Identifier', start: 143, end: 148, name: 'Error' },
  arguments: 
   [ Node {
       type: 'TemplateLiteral',
       start: 149,
       end: 179,
       expressions: [Array],
       quasis: [Array] } ] }
NewExpression
139
180
Node { type: 'Identifier', start: 143, end: 148, name: 'Error' }
Identifier
143
148
Error
[ Node {
    type: 'TemplateLiteral',
    start: 149,
    end: 179,
    expressions: [ [Node] ],
    quasis: [ [Node], [Node] ] } ]
Node {
  type: 'TemplateLiteral',
  start: 149,
  end: 179,
  expressions: 
   [ Node {
       type: 'CallExpression',
       start: 163,
       end: 177,
       callee: [Node],
       arguments: [Array] } ],
  quasis: 
   [ Node {
       type: 'TemplateElement',
       start: 150,
       end: 161,
       value: [Object],
       tail: false },
     Node {
       type: 'TemplateElement',
       start: 178,
       end: 178,
       value: [Object],
       tail: true } ] }
TemplateLiteral
149
179
[ Node {
    type: 'CallExpression',
    start: 163,
    end: 177,
    callee: Node { type: 'Identifier', start: 163, end: 169, name: 'String' },
    arguments: [ [Node] ] } ]
Node {
  type: 'CallExpression',
  start: 163,
  end: 177,
  callee: Node { type: 'Identifier', start: 163, end: 169, name: 'String' },
  arguments: 
   [ Node { type: 'Identifier', start: 170, end: 176, name: 'actual' } ] }
CallExpression
163
177
Node { type: 'Identifier', start: 163, end: 169, name: 'String' }
Identifier
163
169
String
[ Node { type: 'Identifier', start: 170, end: 176, name: 'actual' } ]
Node { type: 'Identifier', start: 170, end: 176, name: 'actual' }
Identifier
170
176
actual
[ Node {
    type: 'TemplateElement',
    start: 150,
    end: 161,
    value: { raw: 'bad value: ', cooked: 'bad value: ' },
    tail: false },
  Node {
    type: 'TemplateElement',
    start: 178,
    end: 178,
    value: { raw: '', cooked: '' },
    tail: true } ]
Node {
  type: 'TemplateElement',
  start: 150,
  end: 161,
  value: { raw: 'bad value: ', cooked: 'bad value: ' },
  tail: false }
TemplateElement
150
161
{ raw: 'bad value: ', cooked: 'bad value: ' }
bad value: 
bad value: 
false
Node {
  type: 'TemplateElement',
  start: 178,
  end: 178,
  value: { raw: '', cooked: '' },
  tail: true }
TemplateElement
178
178
{ raw: '', cooked: '' }


true
null
[+] Exception: domjit-getter-proto.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 488,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 0,
       end: 60,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 62,
       end: 187,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 189,
       end: 206,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ForStatement',
       start: 207,
       end: 282,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 284,
       end: 365,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 367,
       end: 487,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
488
[ Node {
    type: 'VariableDeclaration',
    start: 0,
    end: 60,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 62,
    end: 187,
    id: Node { type: 'Identifier', start: 71, end: 79, name: 'shouldBe' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 98, end: 187, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 189,
    end: 206,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ForStatement',
    start: 207,
    end: 282,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 212,
       end: 221,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 223,
       end: 230,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 232,
       end: 235,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 241,
       end: 282,
       expression: [Node] } },
  Node {
    type: 'FunctionDeclaration',
    start: 284,
    end: 365,
    id: Node { type: 'Identifier', start: 293, end: 299, name: 'access' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 308, end: 365, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 367,
    end: 487,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 372,
       end: 381,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 383,
       end: 390,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 392,
       end: 395,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 397, end: 487, body: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 0,
  end: 60,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 4,
       end: 59,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
0
60
[ Node {
    type: 'VariableDeclarator',
    start: 4,
    end: 59,
    id: 
     Node {
       type: 'Identifier',
       start: 4,
       end: 28,
       name: 'createDOMJITGetterObject' },
    init: 
     Node {
       type: 'MemberExpression',
       start: 31,
       end: 59,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'VariableDeclarator',
  start: 4,
  end: 59,
  id: 
   Node {
     type: 'Identifier',
     start: 4,
     end: 28,
     name: 'createDOMJITGetterObject' },
  init: 
   Node {
     type: 'MemberExpression',
     start: 31,
     end: 59,
     object: Node { type: 'Identifier', start: 31, end: 34, name: '$vm' },
     property: 
      Node {
        type: 'Identifier',
        start: 35,
        end: 59,
        name: 'createDOMJITGetterObject' },
     computed: false } }
VariableDeclarator
4
59
Node {
  type: 'Identifier',
  start: 4,
  end: 28,
  name: 'createDOMJITGetterObject' }
Identifier
4
28
createDOMJITGetterObject
Node {
  type: 'MemberExpression',
  start: 31,
  end: 59,
  object: Node { type: 'Identifier', start: 31, end: 34, name: '$vm' },
  property: 
   Node {
     type: 'Identifier',
     start: 35,
     end: 59,
     name: 'createDOMJITGetterObject' },
  computed: false }
MemberExpression
31
59
Node { type: 'Identifier', start: 31, end: 34, name: '$vm' }
Identifier
31
34
$vm
Node {
  type: 'Identifier',
  start: 35,
  end: 59,
  name: 'createDOMJITGetterObject' }
Identifier
35
59
createDOMJITGetterObject
false
var
Node {
  type: 'FunctionDeclaration',
  start: 62,
  end: 187,
  id: Node { type: 'Identifier', start: 71, end: 79, name: 'shouldBe' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 80, end: 86, name: 'actual' },
     Node { type: 'Identifier', start: 88, end: 96, name: 'expected' } ],
  body: Node { type: 'BlockStatement', start: 98, end: 187, body: [ [Node] ] } }
FunctionDeclaration
62
187
Node { type: 'Identifier', start: 71, end: 79, name: 'shouldBe' }
Identifier
71
79
shouldBe
false
false
false
[ Node { type: 'Identifier', start: 80, end: 86, name: 'actual' },
  Node { type: 'Identifier', start: 88, end: 96, name: 'expected' } ]
Node { type: 'Identifier', start: 80, end: 86, name: 'actual' }
Identifier
80
86
actual
Node { type: 'Identifier', start: 88, end: 96, name: 'expected' }
Identifier
88
96
expected
Node {
  type: 'BlockStatement',
  start: 98,
  end: 187,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 104,
       end: 185,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
98
187
[ Node {
    type: 'IfStatement',
    start: 104,
    end: 185,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 108,
       end: 127,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 137, end: 185, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 104,
  end: 185,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 108,
     end: 127,
     left: Node { type: 'Identifier', start: 108, end: 114, name: 'actual' },
     operator: '!==',
     right: Node { type: 'Identifier', start: 119, end: 127, name: 'expected' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 137,
     end: 185,
     argument: 
      Node {
        type: 'NewExpression',
        start: 143,
        end: 184,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
104
185
Node {
  type: 'BinaryExpression',
  start: 108,
  end: 127,
  left: Node { type: 'Identifier', start: 108, end: 114, name: 'actual' },
  operator: '!==',
  right: Node { type: 'Identifier', start: 119, end: 127, name: 'expected' } }
BinaryExpression
108
127
Node { type: 'Identifier', start: 108, end: 114, name: 'actual' }
Identifier
108
114
actual
!==
Node { type: 'Identifier', start: 119, end: 127, name: 'expected' }
Identifier
119
127
expected
Node {
  type: 'ThrowStatement',
  start: 137,
  end: 185,
  argument: 
   Node {
     type: 'NewExpression',
     start: 143,
     end: 184,
     callee: Node { type: 'Identifier', start: 147, end: 152, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
137
185
Node {
  type: 'NewExpression',
  start: 143,
  end: 184,
  callee: Node { type: 'Identifier', start: 147, end: 152, name: 'Error' },
  arguments: 
   [ Node {
       type: 'TemplateLiteral',
       start: 153,
       end: 183,
       expressions: [Array],
       quasis: [Array] } ] }
NewExpression
143
184
Node { type: 'Identifier', start: 147, end: 152, name: 'Error' }
Identifier
147
152
Error
[ Node {
    type: 'TemplateLiteral',
    start: 153,
    end: 183,
    expressions: [ [Node] ],
    quasis: [ [Node], [Node] ] } ]
Node {
  type: 'TemplateLiteral',
  start: 153,
  end: 183,
  expressions: 
   [ Node {
       type: 'CallExpression',
       start: 167,
       end: 181,
       callee: [Node],
       arguments: [Array] } ],
  quasis: 
   [ Node {
       type: 'TemplateElement',
       start: 154,
       end: 165,
       value: [Object],
       tail: false },
     Node {
       type: 'TemplateElement',
       start: 182,
       end: 182,
       value: [Object],
       tail: true } ] }
TemplateLiteral
153
183
[ Node {
    type: 'CallExpression',
    start: 167,
    end: 181,
    callee: Node { type: 'Identifier', start: 167, end: 173, name: 'String' },
    arguments: [ [Node] ] } ]
Node {
  type: 'CallExpression',
  start: 167,
  end: 181,
  callee: Node { type: 'Identifier', start: 167, end: 173, name: 'String' },
  arguments: 
   [ Node { type: 'Identifier', start: 174, end: 180, name: 'actual' } ] }
CallExpression
167
181
Node { type: 'Identifier', start: 167, end: 173, name: 'String' }
Identifier
167
173
String
[ Node { type: 'Identifier', start: 174, end: 180, name: 'actual' } ]
Node { type: 'Identifier', start: 174, end: 180, name: 'actual' }
Identifier
174
180
actual
[ Node {
    type: 'TemplateElement',
    start: 154,
    end: 165,
    value: { raw: 'bad value: ', cooked: 'bad value: ' },
    tail: false },
  Node {
    type: 'TemplateElement',
    start: 182,
    end: 182,
    value: { raw: '', cooked: '' },
    tail: true } ]
Node {
  type: 'TemplateElement',
  start: 154,
  end: 165,
  value: { raw: 'bad value: ', cooked: 'bad value: ' },
  tail: false }
TemplateElement
154
165
{ raw: 'bad value: ', cooked: 'bad value: ' }
bad value: 
bad value: 
false
Node {
  type: 'TemplateElement',
  start: 182,
  end: 182,
  value: { raw: '', cooked: '' },
  tail: true }
TemplateElement
182
182
{ raw: '', cooked: '' }


true
null
[+] Exception: domjit-getter-super-poly.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 799,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 0,
       end: 74,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 76,
       end: 140,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 141,
       end: 158,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 160,
       end: 166,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'VariableDeclaration',
       start: 167,
       end: 210,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 211,
       end: 222,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 224,
       end: 257,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 259,
       end: 305,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 307,
       end: 429,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 430,
       end: 444,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 446,
       end: 658,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 659,
       end: 673,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 675,
       end: 682,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 683,
       end: 721,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 723,
       end: 744,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 745,
       end: 755,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 756,
       end: 798,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
799
[ Node {
    type: 'VariableDeclaration',
    start: 0,
    end: 74,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 76,
    end: 140,
    id: Node { type: 'Identifier', start: 85, end: 91, name: 'assert' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 95, end: 140, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 141,
    end: 158,
    expression: 
     Node {
       type: 'CallExpression',
       start: 141,
       end: 157,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 160,
    end: 166,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'VariableDeclaration',
    start: 167,
    end: 210,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 211,
    end: 222,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 211,
       end: 221,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'VariableDeclaration',
    start: 224,
    end: 257,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 259,
    end: 305,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 307,
    end: 429,
    id: Node { type: 'Identifier', start: 316, end: 319, name: 'bar' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 323, end: 429, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 430,
    end: 444,
    expression: 
     Node {
       type: 'CallExpression',
       start: 430,
       end: 443,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 446,
    end: 658,
    id: Node { type: 'Identifier', start: 455, end: 458, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 462, end: 658, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 659,
    end: 673,
    expression: 
     Node {
       type: 'CallExpression',
       start: 659,
       end: 672,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 675,
    end: 682,
    expression: 
     Node {
       type: 'CallExpression',
       start: 675,
       end: 681,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 683,
    end: 721,
    init: 
     Node {
       type: 'AssignmentExpression',
       start: 688,
       end: 693,
       operator: '=',
       left: [Node],
       right: [Node] },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 695,
       end: 703,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 705,
       end: 708,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 714,
       end: 721,
       expression: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 723,
    end: 744,
    expression: 
     Node {
       type: 'CallExpression',
       start: 723,
       end: 743,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 745,
    end: 755,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 745,
       end: 754,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ForStatement',
    start: 756,
    end: 798,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 761,
       end: 770,
       declarations: [Array],
       kind: 'let' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 772,
       end: 780,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 782,
       end: 785,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 791,
       end: 798,
       expression: [Node] } } ]
Node {
  type: 'VariableDeclaration',
  start: 0,
  end: 74,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 4,
       end: 73,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
0
74
[ Node {
    type: 'VariableDeclarator',
    start: 4,
    end: 73,
    id: 
     Node {
       type: 'Identifier',
       start: 4,
       end: 35,
       name: 'createDOMJITGetterComplexObject' },
    init: 
     Node {
       type: 'MemberExpression',
       start: 38,
       end: 73,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'VariableDeclarator',
  start: 4,
  end: 73,
  id: 
   Node {
     type: 'Identifier',
     start: 4,
     end: 35,
     name: 'createDOMJITGetterComplexObject' },
  init: 
   Node {
     type: 'MemberExpression',
     start: 38,
     end: 73,
     object: Node { type: 'Identifier', start: 38, end: 41, name: '$vm' },
     property: 
      Node {
        type: 'Identifier',
        start: 42,
        end: 73,
        name: 'createDOMJITGetterComplexObject' },
     computed: false } }
VariableDeclarator
4
73
Node {
  type: 'Identifier',
  start: 4,
  end: 35,
  name: 'createDOMJITGetterComplexObject' }
Identifier
4
35
createDOMJITGetterComplexObject
Node {
  type: 'MemberExpression',
  start: 38,
  end: 73,
  object: Node { type: 'Identifier', start: 38, end: 41, name: '$vm' },
  property: 
   Node {
     type: 'Identifier',
     start: 42,
     end: 73,
     name: 'createDOMJITGetterComplexObject' },
  computed: false }
MemberExpression
38
73
Node { type: 'Identifier', start: 38, end: 41, name: '$vm' }
Identifier
38
41
$vm
Node {
  type: 'Identifier',
  start: 42,
  end: 73,
  name: 'createDOMJITGetterComplexObject' }
Identifier
42
73
createDOMJITGetterComplexObject
false
var
Node {
  type: 'FunctionDeclaration',
  start: 76,
  end: 140,
  id: Node { type: 'Identifier', start: 85, end: 91, name: 'assert' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 92, end: 93, name: 'b' } ],
  body: Node { type: 'BlockStatement', start: 95, end: 140, body: [ [Node] ] } }
FunctionDeclaration
76
140
Node { type: 'Identifier', start: 85, end: 91, name: 'assert' }
Identifier
85
91
assert
false
false
false
[ Node { type: 'Identifier', start: 92, end: 93, name: 'b' } ]
Node { type: 'Identifier', start: 92, end: 93, name: 'b' }
Identifier
92
93
b
Node {
  type: 'BlockStatement',
  start: 95,
  end: 140,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 101,
       end: 138,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
95
140
[ Node {
    type: 'IfStatement',
    start: 101,
    end: 138,
    test: 
     Node {
       type: 'UnaryExpression',
       start: 105,
       end: 107,
       operator: '!',
       prefix: true,
       argument: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 109, end: 138, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 101,
  end: 138,
  test: 
   Node {
     type: 'UnaryExpression',
     start: 105,
     end: 107,
     operator: '!',
     prefix: true,
     argument: Node { type: 'Identifier', start: 106, end: 107, name: 'b' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 109,
     end: 138,
     argument: 
      Node {
        type: 'NewExpression',
        start: 115,
        end: 137,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
101
138
Node {
  type: 'UnaryExpression',
  start: 105,
  end: 107,
  operator: '!',
  prefix: true,
  argument: Node { type: 'Identifier', start: 106, end: 107, name: 'b' } }
UnaryExpression
105
107
!
true
Node { type: 'Identifier', start: 106, end: 107, name: 'b' }
Identifier
106
107
b
Node {
  type: 'ThrowStatement',
  start: 109,
  end: 138,
  argument: 
   Node {
     type: 'NewExpression',
     start: 115,
     end: 137,
     callee: Node { type: 'Identifier', start: 119, end: 124, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
109
138
Node {
  type: 'NewExpression',
  start: 115,
  end: 137,
  callee: Node { type: 'Identifier', start: 119, end: 124, name: 'Error' },
  arguments: 
   [ Node {
       type: 'Literal',
       start: 125,
       end: 136,
       value: 'bad value',
       raw: '"bad value"' } ] }
NewExpression
115
137
Node { type: 'Identifier', start: 119, end: 124, name: 'Error' }
Identifier
119
124
Error
[ Node {
    type: 'Literal',
    start: 125,
    end: 136,
    value: 'bad value',
    raw: '"bad value"' } ]
Node {
  type: 'Literal',
  start: 125,
  end: 136,
  value: 'bad value',
  raw: '"bad value"' }
Literal
125
136
bad value
"bad value"
null
[+] Exception: domjit-getter-try-catch-getter-as-get-by-id-register-restoration.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 807,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 0,
       end: 60,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 62,
       end: 187,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 189,
       end: 538,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 540,
       end: 580,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ForStatement',
       start: 581,
       end: 806,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
807
[ Node {
    type: 'VariableDeclaration',
    start: 0,
    end: 60,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 62,
    end: 187,
    id: Node { type: 'Identifier', start: 71, end: 79, name: 'shouldBe' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 98, end: 187, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 189,
    end: 538,
    id: Node { type: 'Identifier', start: 198, end: 209, name: 'shouldThrow' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 230, end: 538, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 540,
    end: 580,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ForStatement',
    start: 581,
    end: 806,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 586,
       end: 595,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 597,
       end: 604,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 606,
       end: 609,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 611, end: 806, body: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 0,
  end: 60,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 4,
       end: 59,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
0
60
[ Node {
    type: 'VariableDeclarator',
    start: 4,
    end: 59,
    id: 
     Node {
       type: 'Identifier',
       start: 4,
       end: 28,
       name: 'createDOMJITGetterObject' },
    init: 
     Node {
       type: 'MemberExpression',
       start: 31,
       end: 59,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'VariableDeclarator',
  start: 4,
  end: 59,
  id: 
   Node {
     type: 'Identifier',
     start: 4,
     end: 28,
     name: 'createDOMJITGetterObject' },
  init: 
   Node {
     type: 'MemberExpression',
     start: 31,
     end: 59,
     object: Node { type: 'Identifier', start: 31, end: 34, name: '$vm' },
     property: 
      Node {
        type: 'Identifier',
        start: 35,
        end: 59,
        name: 'createDOMJITGetterObject' },
     computed: false } }
VariableDeclarator
4
59
Node {
  type: 'Identifier',
  start: 4,
  end: 28,
  name: 'createDOMJITGetterObject' }
Identifier
4
28
createDOMJITGetterObject
Node {
  type: 'MemberExpression',
  start: 31,
  end: 59,
  object: Node { type: 'Identifier', start: 31, end: 34, name: '$vm' },
  property: 
   Node {
     type: 'Identifier',
     start: 35,
     end: 59,
     name: 'createDOMJITGetterObject' },
  computed: false }
MemberExpression
31
59
Node { type: 'Identifier', start: 31, end: 34, name: '$vm' }
Identifier
31
34
$vm
Node {
  type: 'Identifier',
  start: 35,
  end: 59,
  name: 'createDOMJITGetterObject' }
Identifier
35
59
createDOMJITGetterObject
false
var
Node {
  type: 'FunctionDeclaration',
  start: 62,
  end: 187,
  id: Node { type: 'Identifier', start: 71, end: 79, name: 'shouldBe' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 80, end: 86, name: 'actual' },
     Node { type: 'Identifier', start: 88, end: 96, name: 'expected' } ],
  body: Node { type: 'BlockStatement', start: 98, end: 187, body: [ [Node] ] } }
FunctionDeclaration
62
187
Node { type: 'Identifier', start: 71, end: 79, name: 'shouldBe' }
Identifier
71
79
shouldBe
false
false
false
[ Node { type: 'Identifier', start: 80, end: 86, name: 'actual' },
  Node { type: 'Identifier', start: 88, end: 96, name: 'expected' } ]
Node { type: 'Identifier', start: 80, end: 86, name: 'actual' }
Identifier
80
86
actual
Node { type: 'Identifier', start: 88, end: 96, name: 'expected' }
Identifier
88
96
expected
Node {
  type: 'BlockStatement',
  start: 98,
  end: 187,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 104,
       end: 185,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
98
187
[ Node {
    type: 'IfStatement',
    start: 104,
    end: 185,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 108,
       end: 127,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 137, end: 185, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 104,
  end: 185,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 108,
     end: 127,
     left: Node { type: 'Identifier', start: 108, end: 114, name: 'actual' },
     operator: '!==',
     right: Node { type: 'Identifier', start: 119, end: 127, name: 'expected' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 137,
     end: 185,
     argument: 
      Node {
        type: 'NewExpression',
        start: 143,
        end: 184,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
104
185
Node {
  type: 'BinaryExpression',
  start: 108,
  end: 127,
  left: Node { type: 'Identifier', start: 108, end: 114, name: 'actual' },
  operator: '!==',
  right: Node { type: 'Identifier', start: 119, end: 127, name: 'expected' } }
BinaryExpression
108
127
Node { type: 'Identifier', start: 108, end: 114, name: 'actual' }
Identifier
108
114
actual
!==
Node { type: 'Identifier', start: 119, end: 127, name: 'expected' }
Identifier
119
127
expected
Node {
  type: 'ThrowStatement',
  start: 137,
  end: 185,
  argument: 
   Node {
     type: 'NewExpression',
     start: 143,
     end: 184,
     callee: Node { type: 'Identifier', start: 147, end: 152, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
137
185
Node {
  type: 'NewExpression',
  start: 143,
  end: 184,
  callee: Node { type: 'Identifier', start: 147, end: 152, name: 'Error' },
  arguments: 
   [ Node {
       type: 'TemplateLiteral',
       start: 153,
       end: 183,
       expressions: [Array],
       quasis: [Array] } ] }
NewExpression
143
184
Node { type: 'Identifier', start: 147, end: 152, name: 'Error' }
Identifier
147
152
Error
[ Node {
    type: 'TemplateLiteral',
    start: 153,
    end: 183,
    expressions: [ [Node] ],
    quasis: [ [Node], [Node] ] } ]
Node {
  type: 'TemplateLiteral',
  start: 153,
  end: 183,
  expressions: 
   [ Node {
       type: 'CallExpression',
       start: 167,
       end: 181,
       callee: [Node],
       arguments: [Array] } ],
  quasis: 
   [ Node {
       type: 'TemplateElement',
       start: 154,
       end: 165,
       value: [Object],
       tail: false },
     Node {
       type: 'TemplateElement',
       start: 182,
       end: 182,
       value: [Object],
       tail: true } ] }
TemplateLiteral
153
183
[ Node {
    type: 'CallExpression',
    start: 167,
    end: 181,
    callee: Node { type: 'Identifier', start: 167, end: 173, name: 'String' },
    arguments: [ [Node] ] } ]
Node {
  type: 'CallExpression',
  start: 167,
  end: 181,
  callee: Node { type: 'Identifier', start: 167, end: 173, name: 'String' },
  arguments: 
   [ Node { type: 'Identifier', start: 174, end: 180, name: 'actual' } ] }
CallExpression
167
181
Node { type: 'Identifier', start: 167, end: 173, name: 'String' }
Identifier
167
173
String
[ Node { type: 'Identifier', start: 174, end: 180, name: 'actual' } ]
Node { type: 'Identifier', start: 174, end: 180, name: 'actual' }
Identifier
174
180
actual
[ Node {
    type: 'TemplateElement',
    start: 154,
    end: 165,
    value: { raw: 'bad value: ', cooked: 'bad value: ' },
    tail: false },
  Node {
    type: 'TemplateElement',
    start: 182,
    end: 182,
    value: { raw: '', cooked: '' },
    tail: true } ]
Node {
  type: 'TemplateElement',
  start: 154,
  end: 165,
  value: { raw: 'bad value: ', cooked: 'bad value: ' },
  tail: false }
TemplateElement
154
165
{ raw: 'bad value: ', cooked: 'bad value: ' }
bad value: 
bad value: 
false
Node {
  type: 'TemplateElement',
  start: 182,
  end: 182,
  value: { raw: '', cooked: '' },
  tail: true }
TemplateElement
182
182
{ raw: '', cooked: '' }


true
null
[+] Exception: domjit-getter-type-check.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 471,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 0,
       end: 60,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 62,
       end: 187,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 189,
       end: 229,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 231,
       end: 312,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 314,
       end: 377,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 379,
       end: 422,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 423,
       end: 440,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 441,
       end: 470,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
471
[ Node {
    type: 'VariableDeclaration',
    start: 0,
    end: 60,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 62,
    end: 187,
    id: Node { type: 'Identifier', start: 71, end: 79, name: 'shouldBe' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 98, end: 187, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 189,
    end: 229,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 231,
    end: 312,
    id: Node { type: 'Identifier', start: 240, end: 246, name: 'access' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 255, end: 312, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 314,
    end: 377,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 319,
       end: 328,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 330,
       end: 337,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 339,
       end: 342,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 348,
       end: 377,
       expression: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 379,
    end: 422,
    expression: 
     Node {
       type: 'CallExpression',
       start: 379,
       end: 421,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 423,
    end: 440,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 423,
       end: 439,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 441,
    end: 470,
    expression: 
     Node {
       type: 'CallExpression',
       start: 441,
       end: 469,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 0,
  end: 60,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 4,
       end: 59,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
0
60
[ Node {
    type: 'VariableDeclarator',
    start: 4,
    end: 59,
    id: 
     Node {
       type: 'Identifier',
       start: 4,
       end: 28,
       name: 'createDOMJITGetterObject' },
    init: 
     Node {
       type: 'MemberExpression',
       start: 31,
       end: 59,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'VariableDeclarator',
  start: 4,
  end: 59,
  id: 
   Node {
     type: 'Identifier',
     start: 4,
     end: 28,
     name: 'createDOMJITGetterObject' },
  init: 
   Node {
     type: 'MemberExpression',
     start: 31,
     end: 59,
     object: Node { type: 'Identifier', start: 31, end: 34, name: '$vm' },
     property: 
      Node {
        type: 'Identifier',
        start: 35,
        end: 59,
        name: 'createDOMJITGetterObject' },
     computed: false } }
VariableDeclarator
4
59
Node {
  type: 'Identifier',
  start: 4,
  end: 28,
  name: 'createDOMJITGetterObject' }
Identifier
4
28
createDOMJITGetterObject
Node {
  type: 'MemberExpression',
  start: 31,
  end: 59,
  object: Node { type: 'Identifier', start: 31, end: 34, name: '$vm' },
  property: 
   Node {
     type: 'Identifier',
     start: 35,
     end: 59,
     name: 'createDOMJITGetterObject' },
  computed: false }
MemberExpression
31
59
Node { type: 'Identifier', start: 31, end: 34, name: '$vm' }
Identifier
31
34
$vm
Node {
  type: 'Identifier',
  start: 35,
  end: 59,
  name: 'createDOMJITGetterObject' }
Identifier
35
59
createDOMJITGetterObject
false
var
Node {
  type: 'FunctionDeclaration',
  start: 62,
  end: 187,
  id: Node { type: 'Identifier', start: 71, end: 79, name: 'shouldBe' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 80, end: 86, name: 'actual' },
     Node { type: 'Identifier', start: 88, end: 96, name: 'expected' } ],
  body: Node { type: 'BlockStatement', start: 98, end: 187, body: [ [Node] ] } }
FunctionDeclaration
62
187
Node { type: 'Identifier', start: 71, end: 79, name: 'shouldBe' }
Identifier
71
79
shouldBe
false
false
false
[ Node { type: 'Identifier', start: 80, end: 86, name: 'actual' },
  Node { type: 'Identifier', start: 88, end: 96, name: 'expected' } ]
Node { type: 'Identifier', start: 80, end: 86, name: 'actual' }
Identifier
80
86
actual
Node { type: 'Identifier', start: 88, end: 96, name: 'expected' }
Identifier
88
96
expected
Node {
  type: 'BlockStatement',
  start: 98,
  end: 187,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 104,
       end: 185,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
98
187
[ Node {
    type: 'IfStatement',
    start: 104,
    end: 185,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 108,
       end: 127,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 137, end: 185, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 104,
  end: 185,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 108,
     end: 127,
     left: Node { type: 'Identifier', start: 108, end: 114, name: 'actual' },
     operator: '!==',
     right: Node { type: 'Identifier', start: 119, end: 127, name: 'expected' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 137,
     end: 185,
     argument: 
      Node {
        type: 'NewExpression',
        start: 143,
        end: 184,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
104
185
Node {
  type: 'BinaryExpression',
  start: 108,
  end: 127,
  left: Node { type: 'Identifier', start: 108, end: 114, name: 'actual' },
  operator: '!==',
  right: Node { type: 'Identifier', start: 119, end: 127, name: 'expected' } }
BinaryExpression
108
127
Node { type: 'Identifier', start: 108, end: 114, name: 'actual' }
Identifier
108
114
actual
!==
Node { type: 'Identifier', start: 119, end: 127, name: 'expected' }
Identifier
119
127
expected
Node {
  type: 'ThrowStatement',
  start: 137,
  end: 185,
  argument: 
   Node {
     type: 'NewExpression',
     start: 143,
     end: 184,
     callee: Node { type: 'Identifier', start: 147, end: 152, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
137
185
Node {
  type: 'NewExpression',
  start: 143,
  end: 184,
  callee: Node { type: 'Identifier', start: 147, end: 152, name: 'Error' },
  arguments: 
   [ Node {
       type: 'TemplateLiteral',
       start: 153,
       end: 183,
       expressions: [Array],
       quasis: [Array] } ] }
NewExpression
143
184
Node { type: 'Identifier', start: 147, end: 152, name: 'Error' }
Identifier
147
152
Error
[ Node {
    type: 'TemplateLiteral',
    start: 153,
    end: 183,
    expressions: [ [Node] ],
    quasis: [ [Node], [Node] ] } ]
Node {
  type: 'TemplateLiteral',
  start: 153,
  end: 183,
  expressions: 
   [ Node {
       type: 'CallExpression',
       start: 167,
       end: 181,
       callee: [Node],
       arguments: [Array] } ],
  quasis: 
   [ Node {
       type: 'TemplateElement',
       start: 154,
       end: 165,
       value: [Object],
       tail: false },
     Node {
       type: 'TemplateElement',
       start: 182,
       end: 182,
       value: [Object],
       tail: true } ] }
TemplateLiteral
153
183
[ Node {
    type: 'CallExpression',
    start: 167,
    end: 181,
    callee: Node { type: 'Identifier', start: 167, end: 173, name: 'String' },
    arguments: [ [Node] ] } ]
Node {
  type: 'CallExpression',
  start: 167,
  end: 181,
  callee: Node { type: 'Identifier', start: 167, end: 173, name: 'String' },
  arguments: 
   [ Node { type: 'Identifier', start: 174, end: 180, name: 'actual' } ] }
CallExpression
167
181
Node { type: 'Identifier', start: 167, end: 173, name: 'String' }
Identifier
167
173
String
[ Node { type: 'Identifier', start: 174, end: 180, name: 'actual' } ]
Node { type: 'Identifier', start: 174, end: 180, name: 'actual' }
Identifier
174
180
actual
[ Node {
    type: 'TemplateElement',
    start: 154,
    end: 165,
    value: { raw: 'bad value: ', cooked: 'bad value: ' },
    tail: false },
  Node {
    type: 'TemplateElement',
    start: 182,
    end: 182,
    value: { raw: '', cooked: '' },
    tail: true } ]
Node {
  type: 'TemplateElement',
  start: 154,
  end: 165,
  value: { raw: 'bad value: ', cooked: 'bad value: ' },
  tail: false }
TemplateElement
154
165
{ raw: 'bad value: ', cooked: 'bad value: ' }
bad value: 
bad value: 
false
Node {
  type: 'TemplateElement',
  start: 182,
  end: 182,
  value: { raw: '', cooked: '' },
  tail: true }
TemplateElement
182
182
{ raw: '', cooked: '' }


true
null
[+] Exception: domjit-getter.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 430,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 17,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 18,
       end: 32,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 34,
       end: 52,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 54,
       end: 371,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 372,
       end: 386,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 387,
       end: 429,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
430
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 17,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'bar' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 15, end: 17, body: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 18,
    end: 32,
    expression: 
     Node {
       type: 'CallExpression',
       start: 18,
       end: 31,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 34,
    end: 52,
    id: Node { type: 'Identifier', start: 43, end: 46, name: 'baz' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 49, end: 52, body: [] } },
  Node {
    type: 'FunctionDeclaration',
    start: 54,
    end: 371,
    id: Node { type: 'Identifier', start: 63, end: 66, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 69, end: 371, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 372,
    end: 386,
    expression: 
     Node {
       type: 'CallExpression',
       start: 372,
       end: 385,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 387,
    end: 429,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 392,
       end: 401,
       declarations: [Array],
       kind: 'let' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 403,
       end: 412,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 414,
       end: 417,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 423,
       end: 429,
       expression: [Node] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 17,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'bar' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 15, end: 17, body: [] } }
FunctionDeclaration
0
17
Node { type: 'Identifier', start: 9, end: 12, name: 'bar' }
Identifier
9
12
bar
false
false
false
[]
Node { type: 'BlockStatement', start: 15, end: 17, body: [] }
BlockStatement
15
17
[]
Node {
  type: 'ExpressionStatement',
  start: 18,
  end: 32,
  expression: 
   Node {
     type: 'CallExpression',
     start: 18,
     end: 31,
     callee: Node { type: 'Identifier', start: 18, end: 26, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
18
32
Node {
  type: 'CallExpression',
  start: 18,
  end: 31,
  callee: Node { type: 'Identifier', start: 18, end: 26, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 27, end: 30, name: 'bar' } ] }
CallExpression
18
31
Node { type: 'Identifier', start: 18, end: 26, name: 'noInline' }
Identifier
18
26
noInline
[ Node { type: 'Identifier', start: 27, end: 30, name: 'bar' } ]
Node { type: 'Identifier', start: 27, end: 30, name: 'bar' }
Identifier
27
30
bar
Node {
  type: 'FunctionDeclaration',
  start: 34,
  end: 52,
  id: Node { type: 'Identifier', start: 43, end: 46, name: 'baz' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 49, end: 52, body: [] } }
FunctionDeclaration
34
52
Node { type: 'Identifier', start: 43, end: 46, name: 'baz' }
Identifier
43
46
baz
false
false
false
[]
Node { type: 'BlockStatement', start: 49, end: 52, body: [] }
BlockStatement
49
52
[]
Node {
  type: 'FunctionDeclaration',
  start: 54,
  end: 371,
  id: Node { type: 'Identifier', start: 63, end: 66, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 69, end: 371, body: [ [Node] ] } }
FunctionDeclaration
54
371
Node { type: 'Identifier', start: 63, end: 66, name: 'foo' }
Identifier
63
66
foo
false
false
false
[]
Node {
  type: 'BlockStatement',
  start: 69,
  end: 371,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 75,
       end: 369,
       test: [Node],
       consequent: [Node],
       alternate: [Node] } ] }
BlockStatement
69
371
[ Node {
    type: 'IfStatement',
    start: 75,
    end: 369,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 79,
       end: 105,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'BlockStatement', start: 107, end: 114, body: [] },
    alternate: Node { type: 'BlockStatement', start: 120, end: 369, body: [Array] } } ]
Node {
  type: 'IfStatement',
  start: 75,
  end: 369,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 79,
     end: 105,
     left: 
      Node {
        type: 'UnaryExpression',
        start: 79,
        end: 89,
        operator: 'typeof',
        prefix: true,
        argument: [Node] },
     operator: '!==',
     right: 
      Node {
        type: 'Literal',
        start: 94,
        end: 105,
        value: 'undefined',
        raw: '"undefined"' } },
  consequent: Node { type: 'BlockStatement', start: 107, end: 114, body: [] },
  alternate: Node { type: 'BlockStatement', start: 120, end: 369, body: [ [Node] ] } }
IfStatement
75
369
Node {
  type: 'BinaryExpression',
  start: 79,
  end: 105,
  left: 
   Node {
     type: 'UnaryExpression',
     start: 79,
     end: 89,
     operator: 'typeof',
     prefix: true,
     argument: Node { type: 'Identifier', start: 86, end: 89, name: 'baz' } },
  operator: '!==',
  right: 
   Node {
     type: 'Literal',
     start: 94,
     end: 105,
     value: 'undefined',
     raw: '"undefined"' } }
BinaryExpression
79
105
Node {
  type: 'UnaryExpression',
  start: 79,
  end: 89,
  operator: 'typeof',
  prefix: true,
  argument: Node { type: 'Identifier', start: 86, end: 89, name: 'baz' } }
UnaryExpression
79
89
typeof
true
Node { type: 'Identifier', start: 86, end: 89, name: 'baz' }
Identifier
86
89
baz
!==
Node {
  type: 'Literal',
  start: 94,
  end: 105,
  value: 'undefined',
  raw: '"undefined"' }
Literal
94
105
undefined
"undefined"
Node { type: 'BlockStatement', start: 107, end: 114, body: [] }
BlockStatement
107
114
[]
Node {
  type: 'BlockStatement',
  start: 120,
  end: 369,
  body: 
   [ Node {
       type: 'WhileStatement',
       start: 344,
       end: 363,
       test: [Node],
       body: [Node] } ] }
BlockStatement
120
369
[ Node {
    type: 'WhileStatement',
    start: 344,
    end: 363,
    test: Node { type: 'Literal', start: 351, end: 355, value: true, raw: 'true' },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 357,
       end: 363,
       expression: [Node] } } ]
Node {
  type: 'WhileStatement',
  start: 344,
  end: 363,
  test: Node { type: 'Literal', start: 351, end: 355, value: true, raw: 'true' },
  body: 
   Node {
     type: 'ExpressionStatement',
     start: 357,
     end: 363,
     expression: 
      Node {
        type: 'CallExpression',
        start: 357,
        end: 362,
        callee: [Node],
        arguments: [] } } }
WhileStatement
344
363
Node { type: 'Literal', start: 351, end: 355, value: true, raw: 'true' }
Literal
351
355
true
true
Node {
  type: 'ExpressionStatement',
  start: 357,
  end: 363,
  expression: 
   Node {
     type: 'CallExpression',
     start: 357,
     end: 362,
     callee: Node { type: 'Identifier', start: 357, end: 360, name: 'bar' },
     arguments: [] } }
ExpressionStatement
357
363
Node {
  type: 'CallExpression',
  start: 357,
  end: 362,
  callee: Node { type: 'Identifier', start: 357, end: 360, name: 'bar' },
  arguments: [] }
CallExpression
357
362
Node { type: 'Identifier', start: 357, end: 360, name: 'bar' }
Identifier
357
360
bar
[]
Node {
  type: 'ExpressionStatement',
  start: 372,
  end: 386,
  expression: 
   Node {
     type: 'CallExpression',
     start: 372,
     end: 385,
     callee: Node { type: 'Identifier', start: 372, end: 380, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
372
386
Node {
  type: 'CallExpression',
  start: 372,
  end: 385,
  callee: Node { type: 'Identifier', start: 372, end: 380, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 381, end: 384, name: 'foo' } ] }
CallExpression
372
385
Node { type: 'Identifier', start: 372, end: 380, name: 'noInline' }
Identifier
372
380
noInline
[ Node { type: 'Identifier', start: 381, end: 384, name: 'foo' } ]
Node { type: 'Identifier', start: 381, end: 384, name: 'foo' }
Identifier
381
384
foo
Node {
  type: 'ForStatement',
  start: 387,
  end: 429,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 392,
     end: 401,
     declarations: [ [Node] ],
     kind: 'let' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 403,
     end: 412,
     left: Node { type: 'Identifier', start: 403, end: 404, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 407,
        end: 412,
        value: 10000,
        raw: '10000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 414,
     end: 417,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 416, end: 417, name: 'i' } },
  body: 
   Node {
     type: 'ExpressionStatement',
     start: 423,
     end: 429,
     expression: 
      Node {
        type: 'CallExpression',
        start: 423,
        end: 428,
        callee: [Node],
        arguments: [] } } }
ForStatement
387
429
Node {
  type: 'VariableDeclaration',
  start: 392,
  end: 401,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 396,
       end: 401,
       id: [Node],
       init: [Node] } ],
  kind: 'let' }
VariableDeclaration
392
401
[ Node {
    type: 'VariableDeclarator',
    start: 396,
    end: 401,
    id: Node { type: 'Identifier', start: 396, end: 397, name: 'i' },
    init: Node { type: 'Literal', start: 400, end: 401, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 396,
  end: 401,
  id: Node { type: 'Identifier', start: 396, end: 397, name: 'i' },
  init: Node { type: 'Literal', start: 400, end: 401, value: 0, raw: '0' } }
VariableDeclarator
396
401
Node { type: 'Identifier', start: 396, end: 397, name: 'i' }
Identifier
396
397
i
Node { type: 'Literal', start: 400, end: 401, value: 0, raw: '0' }
Literal
400
401
0
0
let
Node {
  type: 'BinaryExpression',
  start: 403,
  end: 412,
  left: Node { type: 'Identifier', start: 403, end: 404, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 407,
     end: 412,
     value: 10000,
     raw: '10000' } }
BinaryExpression
403
412
Node { type: 'Identifier', start: 403, end: 404, name: 'i' }
Identifier
403
404
i
<
Node {
  type: 'Literal',
  start: 407,
  end: 412,
  value: 10000,
  raw: '10000' }
Literal
407
412
10000
10000
Node {
  type: 'UpdateExpression',
  start: 414,
  end: 417,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 416, end: 417, name: 'i' } }
UpdateExpression
414
417
++
true
Node { type: 'Identifier', start: 416, end: 417, name: 'i' }
Identifier
416
417
i
Node {
  type: 'ExpressionStatement',
  start: 423,
  end: 429,
  expression: 
   Node {
     type: 'CallExpression',
     start: 423,
     end: 428,
     callee: Node { type: 'Identifier', start: 423, end: 426, name: 'foo' },
     arguments: [] } }
ExpressionStatement
423
429
Node {
  type: 'CallExpression',
  start: 423,
  end: 428,
  callee: Node { type: 'Identifier', start: 423, end: 426, name: 'foo' },
  arguments: [] }
CallExpression
423
428
Node { type: 'Identifier', start: 423, end: 426, name: 'foo' }
Identifier
423
426
foo
[]
script
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 295,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 0,
       end: 13,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 14,
       end: 27,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 28,
       end: 40,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 41,
       end: 55,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 56,
       end: 281,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 282,
       end: 294,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
295
[ Node {
    type: 'VariableDeclaration',
    start: 0,
    end: 13,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 14,
    end: 27,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 28,
    end: 40,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 41,
    end: 55,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 56,
    end: 281,
    id: Node { type: 'Identifier', start: 65, end: 74, name: 'dontCrash' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 77, end: 281, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 282,
    end: 294,
    expression: 
     Node {
       type: 'CallExpression',
       start: 282,
       end: 293,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'VariableDeclaration',
  start: 0,
  end: 13,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 4,
       end: 12,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
0
13
[ Node {
    type: 'VariableDeclarator',
    start: 4,
    end: 12,
    id: Node { type: 'Identifier', start: 4, end: 5, name: 'A' },
    init: Node { type: 'Literal', start: 8, end: 12, value: 8000, raw: '8000' } } ]
Node {
  type: 'VariableDeclarator',
  start: 4,
  end: 12,
  id: Node { type: 'Identifier', start: 4, end: 5, name: 'A' },
  init: Node { type: 'Literal', start: 8, end: 12, value: 8000, raw: '8000' } }
VariableDeclarator
4
12
Node { type: 'Identifier', start: 4, end: 5, name: 'A' }
Identifier
4
5
A
Node { type: 'Literal', start: 8, end: 12, value: 8000, raw: '8000' }
Literal
8
12
8000
8000
var
Node {
  type: 'VariableDeclaration',
  start: 14,
  end: 27,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 18,
       end: 26,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
14
27
[ Node {
    type: 'VariableDeclarator',
    start: 18,
    end: 26,
    id: Node { type: 'Identifier', start: 18, end: 19, name: 'B' },
    init: Node { type: 'Literal', start: 22, end: 26, value: 8000, raw: '8000' } } ]
Node {
  type: 'VariableDeclarator',
  start: 18,
  end: 26,
  id: Node { type: 'Identifier', start: 18, end: 19, name: 'B' },
  init: Node { type: 'Literal', start: 22, end: 26, value: 8000, raw: '8000' } }
VariableDeclarator
18
26
Node { type: 'Identifier', start: 18, end: 19, name: 'B' }
Identifier
18
19
B
Node { type: 'Literal', start: 22, end: 26, value: 8000, raw: '8000' }
Literal
22
26
8000
8000
var
Node {
  type: 'VariableDeclaration',
  start: 28,
  end: 40,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 32,
       end: 39,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
28
40
[ Node {
    type: 'VariableDeclarator',
    start: 32,
    end: 39,
    id: Node { type: 'Identifier', start: 32, end: 33, name: 'C' },
    init: Node { type: 'Literal', start: 36, end: 39, value: 100, raw: '100' } } ]
Node {
  type: 'VariableDeclarator',
  start: 32,
  end: 39,
  id: Node { type: 'Identifier', start: 32, end: 33, name: 'C' },
  init: Node { type: 'Literal', start: 36, end: 39, value: 100, raw: '100' } }
VariableDeclarator
32
39
Node { type: 'Identifier', start: 32, end: 33, name: 'C' }
Identifier
32
33
C
Node { type: 'Literal', start: 36, end: 39, value: 100, raw: '100' }
Literal
36
39
100
100
var
Node {
  type: 'VariableDeclaration',
  start: 41,
  end: 55,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 45,
       end: 54,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
41
55
[ Node {
    type: 'VariableDeclarator',
    start: 45,
    end: 54,
    id: Node { type: 'Identifier', start: 45, end: 50, name: 'Iters' },
    init: Node { type: 'Literal', start: 53, end: 54, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 45,
  end: 54,
  id: Node { type: 'Identifier', start: 45, end: 50, name: 'Iters' },
  init: Node { type: 'Literal', start: 53, end: 54, value: 0, raw: '0' } }
VariableDeclarator
45
54
Node { type: 'Identifier', start: 45, end: 50, name: 'Iters' }
Identifier
45
50
Iters
Node { type: 'Literal', start: 53, end: 54, value: 0, raw: '0' }
Literal
53
54
0
0
var
Node {
  type: 'FunctionDeclaration',
  start: 56,
  end: 281,
  id: Node { type: 'Identifier', start: 65, end: 74, name: 'dontCrash' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 77, end: 281, body: [ [Node] ] } }
FunctionDeclaration
56
281
Node { type: 'Identifier', start: 65, end: 74, name: 'dontCrash' }
Identifier
65
74
dontCrash
false
false
false
[]
Node {
  type: 'BlockStatement',
  start: 77,
  end: 281,
  body: 
   [ Node {
       type: 'ForStatement',
       start: 83,
       end: 278,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ] }
BlockStatement
77
281
[ Node {
    type: 'ForStatement',
    start: 83,
    end: 278,
    init: 
     Node {
       type: 'AssignmentExpression',
       start: 88,
       end: 93,
       operator: '=',
       left: [Node],
       right: [Node] },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 95,
       end: 100,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 102,
       end: 105,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 107, end: 278, body: [Array] } } ]
Node {
  type: 'ForStatement',
  start: 83,
  end: 278,
  init: 
   Node {
     type: 'AssignmentExpression',
     start: 88,
     end: 93,
     operator: '=',
     left: Node { type: 'Identifier', start: 88, end: 89, name: 'a' },
     right: Node { type: 'Literal', start: 92, end: 93, value: 0, raw: '0' } },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 95,
     end: 100,
     left: Node { type: 'Identifier', start: 95, end: 96, name: 'a' },
     operator: '<',
     right: Node { type: 'Identifier', start: 99, end: 100, name: 'A' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 102,
     end: 105,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 104, end: 105, name: 'a' } },
  body: Node { type: 'BlockStatement', start: 107, end: 278, body: [ [Node] ] } }
ForStatement
83
278
Node {
  type: 'AssignmentExpression',
  start: 88,
  end: 93,
  operator: '=',
  left: Node { type: 'Identifier', start: 88, end: 89, name: 'a' },
  right: Node { type: 'Literal', start: 92, end: 93, value: 0, raw: '0' } }
AssignmentExpression
88
93
=
Node { type: 'Identifier', start: 88, end: 89, name: 'a' }
Identifier
88
89
a
Node { type: 'Literal', start: 92, end: 93, value: 0, raw: '0' }
Literal
92
93
0
0
Node {
  type: 'BinaryExpression',
  start: 95,
  end: 100,
  left: Node { type: 'Identifier', start: 95, end: 96, name: 'a' },
  operator: '<',
  right: Node { type: 'Identifier', start: 99, end: 100, name: 'A' } }
BinaryExpression
95
100
Node { type: 'Identifier', start: 95, end: 96, name: 'a' }
Identifier
95
96
a
<
Node { type: 'Identifier', start: 99, end: 100, name: 'A' }
Identifier
99
100
A
Node {
  type: 'UpdateExpression',
  start: 102,
  end: 105,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 104, end: 105, name: 'a' } }
UpdateExpression
102
105
++
true
Node { type: 'Identifier', start: 104, end: 105, name: 'a' }
Identifier
104
105
a
Node {
  type: 'BlockStatement',
  start: 107,
  end: 278,
  body: 
   [ Node {
       type: 'ForStatement',
       start: 117,
       end: 272,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ] }
BlockStatement
107
278
[ Node {
    type: 'ForStatement',
    start: 117,
    end: 272,
    init: 
     Node {
       type: 'AssignmentExpression',
       start: 122,
       end: 127,
       operator: '=',
       left: [Node],
       right: [Node] },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 129,
       end: 134,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 136,
       end: 139,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 141, end: 272, body: [Array] } } ]
Node {
  type: 'ForStatement',
  start: 117,
  end: 272,
  init: 
   Node {
     type: 'AssignmentExpression',
     start: 122,
     end: 127,
     operator: '=',
     left: Node { type: 'Identifier', start: 122, end: 123, name: 'b' },
     right: Node { type: 'Literal', start: 126, end: 127, value: 0, raw: '0' } },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 129,
     end: 134,
     left: Node { type: 'Identifier', start: 129, end: 130, name: 'b' },
     operator: '<',
     right: Node { type: 'Identifier', start: 133, end: 134, name: 'B' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 136,
     end: 139,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 138, end: 139, name: 'b' } },
  body: Node { type: 'BlockStatement', start: 141, end: 272, body: [ [Node] ] } }
ForStatement
117
272
Node {
  type: 'AssignmentExpression',
  start: 122,
  end: 127,
  operator: '=',
  left: Node { type: 'Identifier', start: 122, end: 123, name: 'b' },
  right: Node { type: 'Literal', start: 126, end: 127, value: 0, raw: '0' } }
AssignmentExpression
122
127
=
Node { type: 'Identifier', start: 122, end: 123, name: 'b' }
Identifier
122
123
b
Node { type: 'Literal', start: 126, end: 127, value: 0, raw: '0' }
Literal
126
127
0
0
Node {
  type: 'BinaryExpression',
  start: 129,
  end: 134,
  left: Node { type: 'Identifier', start: 129, end: 130, name: 'b' },
  operator: '<',
  right: Node { type: 'Identifier', start: 133, end: 134, name: 'B' } }
BinaryExpression
129
134
Node { type: 'Identifier', start: 129, end: 130, name: 'b' }
Identifier
129
130
b
<
Node { type: 'Identifier', start: 133, end: 134, name: 'B' }
Identifier
133
134
B
Node {
  type: 'UpdateExpression',
  start: 136,
  end: 139,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 138, end: 139, name: 'b' } }
UpdateExpression
136
139
++
true
Node { type: 'Identifier', start: 138, end: 139, name: 'b' }
Identifier
138
139
b
Node {
  type: 'BlockStatement',
  start: 141,
  end: 272,
  body: 
   [ Node {
       type: 'ForStatement',
       start: 155,
       end: 262,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ] }
BlockStatement
141
272
[ Node {
    type: 'ForStatement',
    start: 155,
    end: 262,
    init: 
     Node {
       type: 'AssignmentExpression',
       start: 160,
       end: 165,
       operator: '=',
       left: [Node],
       right: [Node] },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 167,
       end: 172,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 174,
       end: 177,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 179, end: 262, body: [Array] } } ]
Node {
  type: 'ForStatement',
  start: 155,
  end: 262,
  init: 
   Node {
     type: 'AssignmentExpression',
     start: 160,
     end: 165,
     operator: '=',
     left: Node { type: 'Identifier', start: 160, end: 161, name: 'c' },
     right: Node { type: 'Literal', start: 164, end: 165, value: 0, raw: '0' } },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 167,
     end: 172,
     left: Node { type: 'Identifier', start: 167, end: 168, name: 'c' },
     operator: '<',
     right: Node { type: 'Identifier', start: 171, end: 172, name: 'C' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 174,
     end: 177,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 176, end: 177, name: 'c' } },
  body: Node { type: 'BlockStatement', start: 179, end: 262, body: [ [Node] ] } }
ForStatement
155
262
Node {
  type: 'AssignmentExpression',
  start: 160,
  end: 165,
  operator: '=',
  left: Node { type: 'Identifier', start: 160, end: 161, name: 'c' },
  right: Node { type: 'Literal', start: 164, end: 165, value: 0, raw: '0' } }
AssignmentExpression
160
165
=
Node { type: 'Identifier', start: 160, end: 161, name: 'c' }
Identifier
160
161
c
Node { type: 'Literal', start: 164, end: 165, value: 0, raw: '0' }
Literal
164
165
0
0
Node {
  type: 'BinaryExpression',
  start: 167,
  end: 172,
  left: Node { type: 'Identifier', start: 167, end: 168, name: 'c' },
  operator: '<',
  right: Node { type: 'Identifier', start: 171, end: 172, name: 'C' } }
BinaryExpression
167
172
Node { type: 'Identifier', start: 167, end: 168, name: 'c' }
Identifier
167
168
c
<
Node { type: 'Identifier', start: 171, end: 172, name: 'C' }
Identifier
171
172
C
Node {
  type: 'UpdateExpression',
  start: 174,
  end: 177,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 176, end: 177, name: 'c' } }
UpdateExpression
174
177
++
true
Node { type: 'Identifier', start: 176, end: 177, name: 'c' }
Identifier
176
177
c
Node {
  type: 'BlockStatement',
  start: 179,
  end: 262,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 197,
       end: 248,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
179
262
[ Node {
    type: 'IfStatement',
    start: 197,
    end: 248,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 201,
       end: 219,
       left: [Node],
       operator: '>',
       right: [Node] },
    consequent: Node { type: 'ReturnStatement', start: 241, end: 248, argument: null },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 197,
  end: 248,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 201,
     end: 219,
     left: 
      Node {
        type: 'UpdateExpression',
        start: 201,
        end: 208,
        operator: '++',
        prefix: true,
        argument: [Node] },
     operator: '>',
     right: 
      Node {
        type: 'Literal',
        start: 211,
        end: 219,
        value: 10000000,
        raw: '10000000' } },
  consequent: Node { type: 'ReturnStatement', start: 241, end: 248, argument: null },
  alternate: null }
IfStatement
197
248
Node {
  type: 'BinaryExpression',
  start: 201,
  end: 219,
  left: 
   Node {
     type: 'UpdateExpression',
     start: 201,
     end: 208,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 203, end: 208, name: 'Iters' } },
  operator: '>',
  right: 
   Node {
     type: 'Literal',
     start: 211,
     end: 219,
     value: 10000000,
     raw: '10000000' } }
BinaryExpression
201
219
Node {
  type: 'UpdateExpression',
  start: 201,
  end: 208,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 203, end: 208, name: 'Iters' } }
UpdateExpression
201
208
++
true
Node { type: 'Identifier', start: 203, end: 208, name: 'Iters' }
Identifier
203
208
Iters
>
Node {
  type: 'Literal',
  start: 211,
  end: 219,
  value: 10000000,
  raw: '10000000' }
Literal
211
219
10000000
10000000
Node { type: 'ReturnStatement', start: 241, end: 248, argument: null }
ReturnStatement
241
248
null
[+] Exception: dont-crash-on-bad-invalidation-point.js:TypeError: Cannot read property 'hasOwnProperty' of null
[+] Exception: dont-crash-when-hoist-check-structure-on-tdz.js:SyntaxError: Unexpected token {
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 224,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 34,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 35,
       end: 51,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 53,
       end: 108,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'FunctionDeclaration',
       start: 110,
       end: 171,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 173,
       end: 223,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
224
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 34,
    id: Node { type: 'Identifier', start: 9, end: 14, name: 'ident' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 17, end: 34, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 35,
    end: 51,
    expression: 
     Node {
       type: 'CallExpression',
       start: 35,
       end: 50,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 53,
    end: 108,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'FunctionDeclaration',
    start: 110,
    end: 171,
    id: Node { type: 'Identifier', start: 119, end: 122, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 129, end: 171, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 173,
    end: 223,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 178,
       end: 187,
       declarations: [Array],
       kind: 'let' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 189,
       end: 198,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 200,
       end: 203,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 205, end: 223, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 34,
  id: Node { type: 'Identifier', start: 9, end: 14, name: 'ident' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 17, end: 34, body: [ [Node] ] } }
FunctionDeclaration
0
34
Node { type: 'Identifier', start: 9, end: 14, name: 'ident' }
Identifier
9
14
ident
false
false
false
[]
Node {
  type: 'BlockStatement',
  start: 17,
  end: 34,
  body: 
   [ Node { type: 'ReturnStatement', start: 19, end: 32, argument: [Node] } ] }
BlockStatement
17
34
[ Node {
    type: 'ReturnStatement',
    start: 19,
    end: 32,
    argument: Node { type: 'Literal', start: 26, end: 31, value: 'foo', raw: '"foo"' } } ]
Node {
  type: 'ReturnStatement',
  start: 19,
  end: 32,
  argument: Node { type: 'Literal', start: 26, end: 31, value: 'foo', raw: '"foo"' } }
ReturnStatement
19
32
Node { type: 'Literal', start: 26, end: 31, value: 'foo', raw: '"foo"' }
Literal
26
31
foo
"foo"
Node {
  type: 'ExpressionStatement',
  start: 35,
  end: 51,
  expression: 
   Node {
     type: 'CallExpression',
     start: 35,
     end: 50,
     callee: Node { type: 'Identifier', start: 35, end: 43, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
35
51
Node {
  type: 'CallExpression',
  start: 35,
  end: 50,
  callee: Node { type: 'Identifier', start: 35, end: 43, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 44, end: 49, name: 'ident' } ] }
CallExpression
35
50
Node { type: 'Identifier', start: 35, end: 43, name: 'noInline' }
Identifier
35
43
noInline
[ Node { type: 'Identifier', start: 44, end: 49, name: 'ident' } ]
Node { type: 'Identifier', start: 44, end: 49, name: 'ident' }
Identifier
44
49
ident
Node {
  type: 'VariableDeclaration',
  start: 53,
  end: 108,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 57,
       end: 107,
       id: [Node],
       init: [Node] } ],
  kind: 'let' }
VariableDeclaration
53
108
[ Node {
    type: 'VariableDeclarator',
    start: 57,
    end: 107,
    id: Node { type: 'Identifier', start: 57, end: 58, name: 'o' },
    init: 
     Node {
       type: 'ObjectExpression',
       start: 61,
       end: 107,
       properties: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 57,
  end: 107,
  id: Node { type: 'Identifier', start: 57, end: 58, name: 'o' },
  init: 
   Node {
     type: 'ObjectExpression',
     start: 61,
     end: 107,
     properties: [ [Node] ] } }
VariableDeclarator
57
107
Node { type: 'Identifier', start: 57, end: 58, name: 'o' }
Identifier
57
58
o
Node {
  type: 'ObjectExpression',
  start: 61,
  end: 107,
  properties: 
   [ Node {
       type: 'Property',
       start: 67,
       end: 105,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       kind: 'set',
       value: [Node] } ] }
ObjectExpression
61
107
[ Node {
    type: 'Property',
    start: 67,
    end: 105,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 71, end: 74, name: 'foo' },
    kind: 'set',
    value: 
     Node {
       type: 'FunctionExpression',
       start: 74,
       end: 105,
       id: null,
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] } } ]
Node {
  type: 'Property',
  start: 67,
  end: 105,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 71, end: 74, name: 'foo' },
  kind: 'set',
  value: 
   Node {
     type: 'FunctionExpression',
     start: 74,
     end: 105,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [ [Node] ],
     body: Node { type: 'BlockStatement', start: 78, end: 105, body: [Array] } } }
Property
67
105
false
false
false
Node { type: 'Identifier', start: 71, end: 74, name: 'foo' }
Identifier
71
74
foo
set
Node {
  type: 'FunctionExpression',
  start: 74,
  end: 105,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 75, end: 76, name: 'x' } ],
  body: Node { type: 'BlockStatement', start: 78, end: 105, body: [ [Node] ] } }
FunctionExpression
74
105
null
[+] Exception: dont-dead-lock-put-by-val-as-put-by-id.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 806,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 84,
       end: 95,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'TryStatement',
       start: 169,
       end: 805,
       block: [Node],
       handler: [Node],
       finalizer: null } ],
  sourceType: 'script' }
Program
0
806
[ Node {
    type: 'VariableDeclaration',
    start: 84,
    end: 95,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'TryStatement',
    start: 169,
    end: 805,
    block: Node { type: 'BlockStatement', start: 173, end: 792, body: [Array] },
    handler: 
     Node {
       type: 'CatchClause',
       start: 793,
       end: 805,
       param: [Node],
       body: [Node] },
    finalizer: null } ]
Node {
  type: 'VariableDeclaration',
  start: 84,
  end: 95,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 88,
       end: 94,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
84
95
[ Node {
    type: 'VariableDeclarator',
    start: 88,
    end: 94,
    id: Node { type: 'Identifier', start: 88, end: 90, name: 'fe' },
    init: Node { type: 'Literal', start: 91, end: 94, value: 'f', raw: '"f"' } } ]
Node {
  type: 'VariableDeclarator',
  start: 88,
  end: 94,
  id: Node { type: 'Identifier', start: 88, end: 90, name: 'fe' },
  init: Node { type: 'Literal', start: 91, end: 94, value: 'f', raw: '"f"' } }
VariableDeclarator
88
94
Node { type: 'Identifier', start: 88, end: 90, name: 'fe' }
Identifier
88
90
fe
Node { type: 'Literal', start: 91, end: 94, value: 'f', raw: '"f"' }
Literal
91
94
f
"f"
var
Node {
  type: 'TryStatement',
  start: 169,
  end: 805,
  block: 
   Node {
     type: 'BlockStatement',
     start: 173,
     end: 792,
     body: [ [Node], [Node] ] },
  handler: 
   Node {
     type: 'CatchClause',
     start: 793,
     end: 805,
     param: Node { type: 'Identifier', start: 799, end: 800, name: 'e' },
     body: Node { type: 'BlockStatement', start: 802, end: 805, body: [] } },
  finalizer: null }
TryStatement
169
805
Node {
  type: 'BlockStatement',
  start: 173,
  end: 792,
  body: 
   [ Node {
       type: 'ForStatement',
       start: 177,
       end: 262,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 399,
       end: 790,
       declarations: [Array],
       kind: 'var' } ] }
BlockStatement
173
792
[ Node {
    type: 'ForStatement',
    start: 177,
    end: 262,
    init: 
     Node {
       type: 'AssignmentExpression',
       start: 182,
       end: 185,
       operator: '=',
       left: [Node],
       right: [Node] },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 187,
       end: 191,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 193,
       end: 196,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 253,
       end: 262,
       expression: [Node] } },
  Node {
    type: 'VariableDeclaration',
    start: 399,
    end: 790,
    declarations: [ [Node] ],
    kind: 'var' } ]
Node {
  type: 'ForStatement',
  start: 177,
  end: 262,
  init: 
   Node {
     type: 'AssignmentExpression',
     start: 182,
     end: 185,
     operator: '=',
     left: Node { type: 'Identifier', start: 182, end: 183, name: 'i' },
     right: Node { type: 'Literal', start: 184, end: 185, value: 0, raw: '0' } },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 187,
     end: 191,
     left: Node { type: 'Identifier', start: 187, end: 188, name: 'i' },
     operator: '<',
     right: Node { type: 'Literal', start: 189, end: 191, value: 25, raw: '25' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 193,
     end: 196,
     operator: '++',
     prefix: false,
     argument: Node { type: 'Identifier', start: 193, end: 194, name: 'i' } },
  body: 
   Node {
     type: 'ExpressionStatement',
     start: 253,
     end: 262,
     expression: 
      Node {
        type: 'AssignmentExpression',
        start: 253,
        end: 261,
        operator: '+=',
        left: [Node],
        right: [Node] } } }
ForStatement
177
262
Node {
  type: 'AssignmentExpression',
  start: 182,
  end: 185,
  operator: '=',
  left: Node { type: 'Identifier', start: 182, end: 183, name: 'i' },
  right: Node { type: 'Literal', start: 184, end: 185, value: 0, raw: '0' } }
AssignmentExpression
182
185
=
Node { type: 'Identifier', start: 182, end: 183, name: 'i' }
Identifier
182
183
i
Node { type: 'Literal', start: 184, end: 185, value: 0, raw: '0' }
Literal
184
185
0
0
Node {
  type: 'BinaryExpression',
  start: 187,
  end: 191,
  left: Node { type: 'Identifier', start: 187, end: 188, name: 'i' },
  operator: '<',
  right: Node { type: 'Literal', start: 189, end: 191, value: 25, raw: '25' } }
BinaryExpression
187
191
Node { type: 'Identifier', start: 187, end: 188, name: 'i' }
Identifier
187
188
i
<
Node { type: 'Literal', start: 189, end: 191, value: 25, raw: '25' }
Literal
189
191
25
25
Node {
  type: 'UpdateExpression',
  start: 193,
  end: 196,
  operator: '++',
  prefix: false,
  argument: Node { type: 'Identifier', start: 193, end: 194, name: 'i' } }
UpdateExpression
193
196
++
false
Node { type: 'Identifier', start: 193, end: 194, name: 'i' }
Identifier
193
194
i
Node {
  type: 'ExpressionStatement',
  start: 253,
  end: 262,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 253,
     end: 261,
     operator: '+=',
     left: Node { type: 'Identifier', start: 253, end: 255, name: 'fe' },
     right: Node { type: 'Identifier', start: 259, end: 261, name: 'fe' } } }
ExpressionStatement
253
262
Node {
  type: 'AssignmentExpression',
  start: 253,
  end: 261,
  operator: '+=',
  left: Node { type: 'Identifier', start: 253, end: 255, name: 'fe' },
  right: Node { type: 'Identifier', start: 259, end: 261, name: 'fe' } }
AssignmentExpression
253
261
+=
Node { type: 'Identifier', start: 253, end: 255, name: 'fe' }
Identifier
253
255
fe
Node { type: 'Identifier', start: 259, end: 261, name: 'fe' }
Identifier
259
261
fe
Node {
  type: 'VariableDeclaration',
  start: 399,
  end: 790,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 403,
       end: 789,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
399
790
[ Node {
    type: 'VariableDeclarator',
    start: 403,
    end: 789,
    id: Node { type: 'Identifier', start: 403, end: 405, name: 'fu' },
    init: 
     Node {
       type: 'NewExpression',
       start: 406,
       end: 789,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 403,
  end: 789,
  id: Node { type: 'Identifier', start: 403, end: 405, name: 'fu' },
  init: 
   Node {
     type: 'NewExpression',
     start: 406,
     end: 789,
     callee: Node { type: 'Identifier', start: 410, end: 418, name: 'Function' },
     arguments: 
      [ [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node] ] } }
VariableDeclarator
403
789
Node { type: 'Identifier', start: 403, end: 405, name: 'fu' }
Identifier
403
405
fu
Node {
  type: 'NewExpression',
  start: 406,
  end: 789,
  callee: Node { type: 'Identifier', start: 410, end: 418, name: 'Function' },
  arguments: 
   [ Node { type: 'Identifier', start: 475, end: 477, name: 'fe' },
     Node { type: 'Identifier', start: 479, end: 481, name: 'fe' },
     Node { type: 'Identifier', start: 483, end: 485, name: 'fe' },
     Node { type: 'Identifier', start: 487, end: 489, name: 'fe' },
     Node { type: 'Identifier', start: 491, end: 493, name: 'fe' },
     Node { type: 'Identifier', start: 495, end: 497, name: 'fe' },
     Node { type: 'Identifier', start: 499, end: 501, name: 'fe' },
     Node { type: 'Identifier', start: 503, end: 505, name: 'fe' },
     Node { type: 'Identifier', start: 507, end: 509, name: 'fe' },
     Node { type: 'Identifier', start: 511, end: 513, name: 'fe' },
     Node { type: 'Identifier', start: 515, end: 517, name: 'fe' },
     Node { type: 'Identifier', start: 519, end: 521, name: 'fe' },
     Node { type: 'Identifier', start: 523, end: 525, name: 'fe' },
     Node { type: 'Identifier', start: 527, end: 529, name: 'fe' },
     Node { type: 'Identifier', start: 531, end: 533, name: 'fe' },
     Node { type: 'Identifier', start: 535, end: 537, name: 'fe' },
     Node { type: 'Identifier', start: 539, end: 541, name: 'fe' },
     Node { type: 'Identifier', start: 543, end: 545, name: 'fe' },
     Node { type: 'Identifier', start: 551, end: 553, name: 'fe' },
     Node { type: 'Identifier', start: 555, end: 557, name: 'fe' },
     Node { type: 'Identifier', start: 559, end: 561, name: 'fe' },
     Node { type: 'Identifier', start: 563, end: 565, name: 'fe' },
     Node { type: 'Identifier', start: 567, end: 569, name: 'fe' },
     Node { type: 'Identifier', start: 571, end: 573, name: 'fe' },
     Node { type: 'Identifier', start: 575, end: 577, name: 'fe' },
     Node { type: 'Identifier', start: 579, end: 581, name: 'fe' },
     Node { type: 'Identifier', start: 583, end: 585, name: 'fe' },
     Node { type: 'Identifier', start: 587, end: 589, name: 'fe' },
     Node { type: 'Identifier', start: 591, end: 593, name: 'fe' },
     Node { type: 'Identifier', start: 595, end: 597, name: 'fe' },
     Node { type: 'Identifier', start: 599, end: 601, name: 'fe' },
     Node { type: 'Identifier', start: 603, end: 605, name: 'fe' },
     Node { type: 'Identifier', start: 607, end: 609, name: 'fe' },
     Node { type: 'Identifier', start: 611, end: 613, name: 'fe' },
     Node { type: 'Identifier', start: 615, end: 617, name: 'fe' },
     Node { type: 'Identifier', start: 619, end: 621, name: 'fe' },
     Node { type: 'Identifier', start: 627, end: 629, name: 'fe' },
     Node { type: 'Identifier', start: 631, end: 633, name: 'fe' },
     Node { type: 'Identifier', start: 635, end: 637, name: 'fe' },
     Node { type: 'Identifier', start: 639, end: 641, name: 'fe' },
     Node { type: 'Identifier', start: 643, end: 645, name: 'fe' },
     Node { type: 'Identifier', start: 647, end: 649, name: 'fe' },
     Node { type: 'Identifier', start: 651, end: 653, name: 'fe' },
     Node { type: 'Identifier', start: 655, end: 657, name: 'fe' },
     Node { type: 'Identifier', start: 659, end: 661, name: 'fe' },
     Node { type: 'Identifier', start: 663, end: 665, name: 'fe' },
     Node { type: 'Identifier', start: 667, end: 669, name: 'fe' },
     Node { type: 'Identifier', start: 671, end: 673, name: 'fe' },
     Node { type: 'Identifier', start: 675, end: 677, name: 'fe' },
     Node { type: 'Identifier', start: 679, end: 681, name: 'fe' },
     Node { type: 'Identifier', start: 683, end: 685, name: 'fe' },
     Node { type: 'Identifier', start: 687, end: 689, name: 'fe' },
     Node { type: 'Identifier', start: 691, end: 693, name: 'fe' },
     Node { type: 'Identifier', start: 695, end: 697, name: 'fe' },
     Node { type: 'Identifier', start: 703, end: 705, name: 'fe' },
     Node { type: 'Identifier', start: 707, end: 709, name: 'fe' },
     Node { type: 'Identifier', start: 711, end: 713, name: 'fe' },
     Node { type: 'Identifier', start: 715, end: 717, name: 'fe' },
     Node { type: 'Identifier', start: 719, end: 721, name: 'fe' },
     Node { type: 'Identifier', start: 723, end: 725, name: 'fe' },
     Node { type: 'Identifier', start: 727, end: 729, name: 'fe' },
     Node { type: 'Identifier', start: 731, end: 733, name: 'fe' },
     Node { type: 'Identifier', start: 735, end: 737, name: 'fe' },
     Node { type: 'Identifier', start: 739, end: 741, name: 'fe' },
     Node {
       type: 'Literal',
       start: 777,
       end: 783,
       value: 'done',
       raw: '"done"' } ] }
NewExpression
406
789
Node { type: 'Identifier', start: 410, end: 418, name: 'Function' }
Identifier
410
418
Function
[ Node { type: 'Identifier', start: 475, end: 477, name: 'fe' },
  Node { type: 'Identifier', start: 479, end: 481, name: 'fe' },
  Node { type: 'Identifier', start: 483, end: 485, name: 'fe' },
  Node { type: 'Identifier', start: 487, end: 489, name: 'fe' },
  Node { type: 'Identifier', start: 491, end: 493, name: 'fe' },
  Node { type: 'Identifier', start: 495, end: 497, name: 'fe' },
  Node { type: 'Identifier', start: 499, end: 501, name: 'fe' },
  Node { type: 'Identifier', start: 503, end: 505, name: 'fe' },
  Node { type: 'Identifier', start: 507, end: 509, name: 'fe' },
  Node { type: 'Identifier', start: 511, end: 513, name: 'fe' },
  Node { type: 'Identifier', start: 515, end: 517, name: 'fe' },
  Node { type: 'Identifier', start: 519, end: 521, name: 'fe' },
  Node { type: 'Identifier', start: 523, end: 525, name: 'fe' },
  Node { type: 'Identifier', start: 527, end: 529, name: 'fe' },
  Node { type: 'Identifier', start: 531, end: 533, name: 'fe' },
  Node { type: 'Identifier', start: 535, end: 537, name: 'fe' },
  Node { type: 'Identifier', start: 539, end: 541, name: 'fe' },
  Node { type: 'Identifier', start: 543, end: 545, name: 'fe' },
  Node { type: 'Identifier', start: 551, end: 553, name: 'fe' },
  Node { type: 'Identifier', start: 555, end: 557, name: 'fe' },
  Node { type: 'Identifier', start: 559, end: 561, name: 'fe' },
  Node { type: 'Identifier', start: 563, end: 565, name: 'fe' },
  Node { type: 'Identifier', start: 567, end: 569, name: 'fe' },
  Node { type: 'Identifier', start: 571, end: 573, name: 'fe' },
  Node { type: 'Identifier', start: 575, end: 577, name: 'fe' },
  Node { type: 'Identifier', start: 579, end: 581, name: 'fe' },
  Node { type: 'Identifier', start: 583, end: 585, name: 'fe' },
  Node { type: 'Identifier', start: 587, end: 589, name: 'fe' },
  Node { type: 'Identifier', start: 591, end: 593, name: 'fe' },
  Node { type: 'Identifier', start: 595, end: 597, name: 'fe' },
  Node { type: 'Identifier', start: 599, end: 601, name: 'fe' },
  Node { type: 'Identifier', start: 603, end: 605, name: 'fe' },
  Node { type: 'Identifier', start: 607, end: 609, name: 'fe' },
  Node { type: 'Identifier', start: 611, end: 613, name: 'fe' },
  Node { type: 'Identifier', start: 615, end: 617, name: 'fe' },
  Node { type: 'Identifier', start: 619, end: 621, name: 'fe' },
  Node { type: 'Identifier', start: 627, end: 629, name: 'fe' },
  Node { type: 'Identifier', start: 631, end: 633, name: 'fe' },
  Node { type: 'Identifier', start: 635, end: 637, name: 'fe' },
  Node { type: 'Identifier', start: 639, end: 641, name: 'fe' },
  Node { type: 'Identifier', start: 643, end: 645, name: 'fe' },
  Node { type: 'Identifier', start: 647, end: 649, name: 'fe' },
  Node { type: 'Identifier', start: 651, end: 653, name: 'fe' },
  Node { type: 'Identifier', start: 655, end: 657, name: 'fe' },
  Node { type: 'Identifier', start: 659, end: 661, name: 'fe' },
  Node { type: 'Identifier', start: 663, end: 665, name: 'fe' },
  Node { type: 'Identifier', start: 667, end: 669, name: 'fe' },
  Node { type: 'Identifier', start: 671, end: 673, name: 'fe' },
  Node { type: 'Identifier', start: 675, end: 677, name: 'fe' },
  Node { type: 'Identifier', start: 679, end: 681, name: 'fe' },
  Node { type: 'Identifier', start: 683, end: 685, name: 'fe' },
  Node { type: 'Identifier', start: 687, end: 689, name: 'fe' },
  Node { type: 'Identifier', start: 691, end: 693, name: 'fe' },
  Node { type: 'Identifier', start: 695, end: 697, name: 'fe' },
  Node { type: 'Identifier', start: 703, end: 705, name: 'fe' },
  Node { type: 'Identifier', start: 707, end: 709, name: 'fe' },
  Node { type: 'Identifier', start: 711, end: 713, name: 'fe' },
  Node { type: 'Identifier', start: 715, end: 717, name: 'fe' },
  Node { type: 'Identifier', start: 719, end: 721, name: 'fe' },
  Node { type: 'Identifier', start: 723, end: 725, name: 'fe' },
  Node { type: 'Identifier', start: 727, end: 729, name: 'fe' },
  Node { type: 'Identifier', start: 731, end: 733, name: 'fe' },
  Node { type: 'Identifier', start: 735, end: 737, name: 'fe' },
  Node { type: 'Identifier', start: 739, end: 741, name: 'fe' },
  Node {
    type: 'Literal',
    start: 777,
    end: 783,
    value: 'done',
    raw: '"done"' } ]
Node { type: 'Identifier', start: 475, end: 477, name: 'fe' }
Identifier
475
477
fe
Node { type: 'Identifier', start: 479, end: 481, name: 'fe' }
Identifier
479
481
fe
Node { type: 'Identifier', start: 483, end: 485, name: 'fe' }
Identifier
483
485
fe
Node { type: 'Identifier', start: 487, end: 489, name: 'fe' }
Identifier
487
489
fe
Node { type: 'Identifier', start: 491, end: 493, name: 'fe' }
Identifier
491
493
fe
Node { type: 'Identifier', start: 495, end: 497, name: 'fe' }
Identifier
495
497
fe
Node { type: 'Identifier', start: 499, end: 501, name: 'fe' }
Identifier
499
501
fe
Node { type: 'Identifier', start: 503, end: 505, name: 'fe' }
Identifier
503
505
fe
Node { type: 'Identifier', start: 507, end: 509, name: 'fe' }
Identifier
507
509
fe
Node { type: 'Identifier', start: 511, end: 513, name: 'fe' }
Identifier
511
513
fe
Node { type: 'Identifier', start: 515, end: 517, name: 'fe' }
Identifier
515
517
fe
Node { type: 'Identifier', start: 519, end: 521, name: 'fe' }
Identifier
519
521
fe
Node { type: 'Identifier', start: 523, end: 525, name: 'fe' }
Identifier
523
525
fe
Node { type: 'Identifier', start: 527, end: 529, name: 'fe' }
Identifier
527
529
fe
Node { type: 'Identifier', start: 531, end: 533, name: 'fe' }
Identifier
531
533
fe
Node { type: 'Identifier', start: 535, end: 537, name: 'fe' }
Identifier
535
537
fe
Node { type: 'Identifier', start: 539, end: 541, name: 'fe' }
Identifier
539
541
fe
Node { type: 'Identifier', start: 543, end: 545, name: 'fe' }
Identifier
543
545
fe
Node { type: 'Identifier', start: 551, end: 553, name: 'fe' }
Identifier
551
553
fe
Node { type: 'Identifier', start: 555, end: 557, name: 'fe' }
Identifier
555
557
fe
Node { type: 'Identifier', start: 559, end: 561, name: 'fe' }
Identifier
559
561
fe
Node { type: 'Identifier', start: 563, end: 565, name: 'fe' }
Identifier
563
565
fe
Node { type: 'Identifier', start: 567, end: 569, name: 'fe' }
Identifier
567
569
fe
Node { type: 'Identifier', start: 571, end: 573, name: 'fe' }
Identifier
571
573
fe
Node { type: 'Identifier', start: 575, end: 577, name: 'fe' }
Identifier
575
577
fe
Node { type: 'Identifier', start: 579, end: 581, name: 'fe' }
Identifier
579
581
fe
Node { type: 'Identifier', start: 583, end: 585, name: 'fe' }
Identifier
583
585
fe
Node { type: 'Identifier', start: 587, end: 589, name: 'fe' }
Identifier
587
589
fe
Node { type: 'Identifier', start: 591, end: 593, name: 'fe' }
Identifier
591
593
fe
Node { type: 'Identifier', start: 595, end: 597, name: 'fe' }
Identifier
595
597
fe
Node { type: 'Identifier', start: 599, end: 601, name: 'fe' }
Identifier
599
601
fe
Node { type: 'Identifier', start: 603, end: 605, name: 'fe' }
Identifier
603
605
fe
Node { type: 'Identifier', start: 607, end: 609, name: 'fe' }
Identifier
607
609
fe
Node { type: 'Identifier', start: 611, end: 613, name: 'fe' }
Identifier
611
613
fe
Node { type: 'Identifier', start: 615, end: 617, name: 'fe' }
Identifier
615
617
fe
Node { type: 'Identifier', start: 619, end: 621, name: 'fe' }
Identifier
619
621
fe
Node { type: 'Identifier', start: 627, end: 629, name: 'fe' }
Identifier
627
629
fe
Node { type: 'Identifier', start: 631, end: 633, name: 'fe' }
Identifier
631
633
fe
Node { type: 'Identifier', start: 635, end: 637, name: 'fe' }
Identifier
635
637
fe
Node { type: 'Identifier', start: 639, end: 641, name: 'fe' }
Identifier
639
641
fe
Node { type: 'Identifier', start: 643, end: 645, name: 'fe' }
Identifier
643
645
fe
Node { type: 'Identifier', start: 647, end: 649, name: 'fe' }
Identifier
647
649
fe
Node { type: 'Identifier', start: 651, end: 653, name: 'fe' }
Identifier
651
653
fe
Node { type: 'Identifier', start: 655, end: 657, name: 'fe' }
Identifier
655
657
fe
Node { type: 'Identifier', start: 659, end: 661, name: 'fe' }
Identifier
659
661
fe
Node { type: 'Identifier', start: 663, end: 665, name: 'fe' }
Identifier
663
665
fe
Node { type: 'Identifier', start: 667, end: 669, name: 'fe' }
Identifier
667
669
fe
Node { type: 'Identifier', start: 671, end: 673, name: 'fe' }
Identifier
671
673
fe
Node { type: 'Identifier', start: 675, end: 677, name: 'fe' }
Identifier
675
677
fe
Node { type: 'Identifier', start: 679, end: 681, name: 'fe' }
Identifier
679
681
fe
Node { type: 'Identifier', start: 683, end: 685, name: 'fe' }
Identifier
683
685
fe
Node { type: 'Identifier', start: 687, end: 689, name: 'fe' }
Identifier
687
689
fe
Node { type: 'Identifier', start: 691, end: 693, name: 'fe' }
Identifier
691
693
fe
Node { type: 'Identifier', start: 695, end: 697, name: 'fe' }
Identifier
695
697
fe
Node { type: 'Identifier', start: 703, end: 705, name: 'fe' }
Identifier
703
705
fe
Node { type: 'Identifier', start: 707, end: 709, name: 'fe' }
Identifier
707
709
fe
Node { type: 'Identifier', start: 711, end: 713, name: 'fe' }
Identifier
711
713
fe
Node { type: 'Identifier', start: 715, end: 717, name: 'fe' }
Identifier
715
717
fe
Node { type: 'Identifier', start: 719, end: 721, name: 'fe' }
Identifier
719
721
fe
Node { type: 'Identifier', start: 723, end: 725, name: 'fe' }
Identifier
723
725
fe
Node { type: 'Identifier', start: 727, end: 729, name: 'fe' }
Identifier
727
729
fe
Node { type: 'Identifier', start: 731, end: 733, name: 'fe' }
Identifier
731
733
fe
Node { type: 'Identifier', start: 735, end: 737, name: 'fe' }
Identifier
735
737
fe
Node { type: 'Identifier', start: 739, end: 741, name: 'fe' }
Identifier
739
741
fe
Node {
  type: 'Literal',
  start: 777,
  end: 783,
  value: 'done',
  raw: '"done"' }
Literal
777
783
done
"done"
var
Node {
  type: 'CatchClause',
  start: 793,
  end: 805,
  param: Node { type: 'Identifier', start: 799, end: 800, name: 'e' },
  body: Node { type: 'BlockStatement', start: 802, end: 805, body: [] } }
CatchClause
793
805
Node { type: 'Identifier', start: 799, end: 800, name: 'e' }
Identifier
799
800
e
Node { type: 'BlockStatement', start: 802, end: 805, body: [] }
BlockStatement
802
805
[]
null
[+] Exception: dont-reserve-huge-capacity-lexer.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 295,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 215,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 216,
       end: 230,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 232,
       end: 241,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 242,
       end: 294,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
295
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 215,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 21, end: 215, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 216,
    end: 230,
    expression: 
     Node {
       type: 'CallExpression',
       start: 216,
       end: 229,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 232,
    end: 241,
    expression: 
     Node {
       type: 'CallExpression',
       start: 232,
       end: 240,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 242,
    end: 294,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 247,
       end: 256,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 258,
       end: 266,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 268,
       end: 271,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 277,
       end: 294,
       expression: [Node] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 215,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 19, name: 'string' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 21,
     end: 215,
     body: [ [Node], [Node], [Node] ] } }
FunctionDeclaration
0
215
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 19, name: 'string' } ]
Node { type: 'Identifier', start: 13, end: 19, name: 'string' }
Identifier
13
19
string
Node {
  type: 'BlockStatement',
  start: 21,
  end: 215,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 27,
       end: 48,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ForStatement',
       start: 53,
       end: 183,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ReturnStatement',
       start: 187,
       end: 213,
       argument: [Node] } ] }
BlockStatement
21
215
[ Node {
    type: 'VariableDeclaration',
    start: 27,
    end: 48,
    declarations: [ [Node], [Node] ],
    kind: 'var' },
  Node {
    type: 'ForStatement',
    start: 53,
    end: 183,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 58,
       end: 67,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 69,
       end: 77,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 79,
       end: 82,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 84, end: 183, body: [Array] } },
  Node {
    type: 'ReturnStatement',
    start: 187,
    end: 213,
    argument: 
     Node {
       type: 'ArrayExpression',
       start: 194,
       end: 212,
       elements: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 27,
  end: 48,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 31,
       end: 38,
       id: [Node],
       init: null },
     Node {
       type: 'VariableDeclarator',
       start: 40,
       end: 47,
       id: [Node],
       init: null } ],
  kind: 'var' }
VariableDeclaration
27
48
[ Node {
    type: 'VariableDeclarator',
    start: 31,
    end: 38,
    id: Node { type: 'Identifier', start: 31, end: 38, name: 'result1' },
    init: null },
  Node {
    type: 'VariableDeclarator',
    start: 40,
    end: 47,
    id: Node { type: 'Identifier', start: 40, end: 47, name: 'result2' },
    init: null } ]
Node {
  type: 'VariableDeclarator',
  start: 31,
  end: 38,
  id: Node { type: 'Identifier', start: 31, end: 38, name: 'result1' },
  init: null }
VariableDeclarator
31
38
Node { type: 'Identifier', start: 31, end: 38, name: 'result1' }
Identifier
31
38
result1
null
[+] Exception: dont-run-cleanup-after-licm.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 303,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 0,
       end: 12,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'VariableDeclaration',
       start: 13,
       end: 57,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'VariableDeclaration',
       start: 58,
       end: 78,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'ExpressionStatement',
       start: 80,
       end: 110,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 143,
       end: 302,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
303
[ Node {
    type: 'VariableDeclaration',
    start: 0,
    end: 12,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'VariableDeclaration',
    start: 13,
    end: 57,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'VariableDeclaration',
    start: 58,
    end: 78,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'ExpressionStatement',
    start: 80,
    end: 110,
    expression: 
     Node {
       type: 'CallExpression',
       start: 80,
       end: 109,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 143,
    end: 302,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 148,
       end: 157,
       declarations: [Array],
       kind: 'let' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 159,
       end: 169,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 171,
       end: 174,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 176, end: 302, body: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 0,
  end: 12,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 4,
       end: 11,
       id: [Node],
       init: [Node] } ],
  kind: 'let' }
VariableDeclaration
0
12
[ Node {
    type: 'VariableDeclarator',
    start: 4,
    end: 11,
    id: Node { type: 'Identifier', start: 4, end: 6, name: 'a2' },
    init: Node { type: 'ArrayExpression', start: 9, end: 11, elements: [] } } ]
Node {
  type: 'VariableDeclarator',
  start: 4,
  end: 11,
  id: Node { type: 'Identifier', start: 4, end: 6, name: 'a2' },
  init: Node { type: 'ArrayExpression', start: 9, end: 11, elements: [] } }
VariableDeclarator
4
11
Node { type: 'Identifier', start: 4, end: 6, name: 'a2' }
Identifier
4
6
a2
Node { type: 'ArrayExpression', start: 9, end: 11, elements: [] }
ArrayExpression
9
11
[]
let
Node {
  type: 'VariableDeclaration',
  start: 13,
  end: 57,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 17,
       end: 56,
       id: [Node],
       init: [Node] } ],
  kind: 'let' }
VariableDeclaration
13
57
[ Node {
    type: 'VariableDeclarator',
    start: 17,
    end: 56,
    id: Node { type: 'Identifier', start: 17, end: 23, name: 'thingy' },
    init: 
     Node {
       type: 'ObjectExpression',
       start: 26,
       end: 56,
       properties: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 17,
  end: 56,
  id: Node { type: 'Identifier', start: 17, end: 23, name: 'thingy' },
  init: 
   Node {
     type: 'ObjectExpression',
     start: 26,
     end: 56,
     properties: [ [Node], [Node] ] } }
VariableDeclarator
17
56
Node { type: 'Identifier', start: 17, end: 23, name: 'thingy' }
Identifier
17
23
thingy
Node {
  type: 'ObjectExpression',
  start: 26,
  end: 56,
  properties: 
   [ Node {
       type: 'Property',
       start: 27,
       end: 40,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 42,
       end: 55,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
26
56
[ Node {
    type: 'Property',
    start: 27,
    end: 40,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 27, end: 33, name: 'length' },
    value: 
     Node {
       type: 'BinaryExpression',
       start: 35,
       end: 40,
       left: [Node],
       operator: '**',
       right: [Node] },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 42,
    end: 55,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 42, end: 51, name: '__proto__' },
    value: Node { type: 'ArrayExpression', start: 53, end: 55, elements: [] },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 27,
  end: 40,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 27, end: 33, name: 'length' },
  value: 
   Node {
     type: 'BinaryExpression',
     start: 35,
     end: 40,
     left: Node { type: 'Literal', start: 35, end: 36, value: 2, raw: '2' },
     operator: '**',
     right: Node { type: 'Literal', start: 38, end: 40, value: 55, raw: '55' } },
  kind: 'init' }
Property
27
40
false
false
false
Node { type: 'Identifier', start: 27, end: 33, name: 'length' }
Identifier
27
33
length
Node {
  type: 'BinaryExpression',
  start: 35,
  end: 40,
  left: Node { type: 'Literal', start: 35, end: 36, value: 2, raw: '2' },
  operator: '**',
  right: Node { type: 'Literal', start: 38, end: 40, value: 55, raw: '55' } }
BinaryExpression
35
40
Node { type: 'Literal', start: 35, end: 36, value: 2, raw: '2' }
Literal
35
36
2
2
**
Node { type: 'Literal', start: 38, end: 40, value: 55, raw: '55' }
Literal
38
40
55
55
init
Node {
  type: 'Property',
  start: 42,
  end: 55,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 42, end: 51, name: '__proto__' },
  value: Node { type: 'ArrayExpression', start: 53, end: 55, elements: [] },
  kind: 'init' }
Property
42
55
false
false
false
Node { type: 'Identifier', start: 42, end: 51, name: '__proto__' }
Identifier
42
51
__proto__
Node { type: 'ArrayExpression', start: 53, end: 55, elements: [] }
ArrayExpression
53
55
[]
init
let
Node {
  type: 'VariableDeclaration',
  start: 58,
  end: 78,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 62,
       end: 77,
       id: [Node],
       init: [Node] } ],
  kind: 'let' }
VariableDeclaration
58
78
[ Node {
    type: 'VariableDeclarator',
    start: 62,
    end: 77,
    id: Node { type: 'Identifier', start: 62, end: 66, name: 'func' },
    init: 
     Node {
       type: 'ArrowFunctionExpression',
       start: 69,
       end: 77,
       id: null,
       generator: false,
       expression: true,
       async: false,
       params: [Array],
       body: [Node] } } ]
Node {
  type: 'VariableDeclarator',
  start: 62,
  end: 77,
  id: Node { type: 'Identifier', start: 62, end: 66, name: 'func' },
  init: 
   Node {
     type: 'ArrowFunctionExpression',
     start: 69,
     end: 77,
     id: null,
     generator: false,
     expression: true,
     async: false,
     params: [ [Node] ],
     body: Node { type: 'Identifier', start: 76, end: 77, name: 'x' } } }
VariableDeclarator
62
77
Node { type: 'Identifier', start: 62, end: 66, name: 'func' }
Identifier
62
66
func
Node {
  type: 'ArrowFunctionExpression',
  start: 69,
  end: 77,
  id: null,
  generator: false,
  expression: true,
  async: false,
  params: [ Node { type: 'Identifier', start: 70, end: 71, name: 'x' } ],
  body: Node { type: 'Identifier', start: 76, end: 77, name: 'x' } }
ArrowFunctionExpression
69
77
null
[+] Exception: dont-strength-reduce-valuerep-of-doublerep.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 719,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 0,
       end: 13,
       expression: [Node],
       directive: 'use strict' },
     Node {
       type: 'VariableDeclaration',
       start: 60,
       end: 151,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'FunctionDeclaration',
       start: 153,
       end: 218,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 220,
       end: 226,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'VariableDeclaration',
       start: 227,
       end: 255,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'VariableDeclaration',
       start: 256,
       end: 316,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'VariableDeclaration',
       start: 317,
       end: 375,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'FunctionDeclaration',
       start: 376,
       end: 493,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 494,
       end: 512,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 514,
       end: 709,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 710,
       end: 718,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
719
[ Node {
    type: 'ExpressionStatement',
    start: 0,
    end: 13,
    expression: 
     Node {
       type: 'Literal',
       start: 0,
       end: 12,
       value: 'use strict',
       raw: '"use strict"' },
    directive: 'use strict' },
  Node {
    type: 'VariableDeclaration',
    start: 60,
    end: 151,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'FunctionDeclaration',
    start: 153,
    end: 218,
    id: Node { type: 'Identifier', start: 162, end: 165, name: 'bar' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 168, end: 218, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 220,
    end: 226,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'VariableDeclaration',
    start: 227,
    end: 255,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'VariableDeclaration',
    start: 256,
    end: 316,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'VariableDeclaration',
    start: 317,
    end: 375,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'FunctionDeclaration',
    start: 376,
    end: 493,
    id: Node { type: 'Identifier', start: 385, end: 392, name: 'getItem' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 395, end: 493, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 494,
    end: 512,
    expression: 
     Node {
       type: 'CallExpression',
       start: 494,
       end: 511,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 514,
    end: 709,
    id: Node { type: 'Identifier', start: 523, end: 528, name: 'start' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 531, end: 709, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 710,
    end: 718,
    expression: 
     Node {
       type: 'CallExpression',
       start: 710,
       end: 717,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'ExpressionStatement',
  start: 0,
  end: 13,
  expression: 
   Node {
     type: 'Literal',
     start: 0,
     end: 12,
     value: 'use strict',
     raw: '"use strict"' },
  directive: 'use strict' }
ExpressionStatement
0
13
Node {
  type: 'Literal',
  start: 0,
  end: 12,
  value: 'use strict',
  raw: '"use strict"' }
Literal
0
12
use strict
"use strict"
use strict
Node {
  type: 'VariableDeclaration',
  start: 60,
  end: 151,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 64,
       end: 150,
       id: [Node],
       init: [Node] } ],
  kind: 'let' }
VariableDeclaration
60
151
[ Node {
    type: 'VariableDeclarator',
    start: 64,
    end: 150,
    id: Node { type: 'Identifier', start: 64, end: 65, name: 'p' },
    init: 
     Node {
       type: 'NewExpression',
       start: 68,
       end: 150,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 64,
  end: 150,
  id: Node { type: 'Identifier', start: 64, end: 65, name: 'p' },
  init: 
   Node {
     type: 'NewExpression',
     start: 68,
     end: 150,
     callee: Node { type: 'Identifier', start: 72, end: 77, name: 'Proxy' },
     arguments: [ [Node], [Node] ] } }
VariableDeclarator
64
150
Node { type: 'Identifier', start: 64, end: 65, name: 'p' }
Identifier
64
65
p
Node {
  type: 'NewExpression',
  start: 68,
  end: 150,
  callee: Node { type: 'Identifier', start: 72, end: 77, name: 'Proxy' },
  arguments: 
   [ Node {
       type: 'FunctionExpression',
       start: 78,
       end: 92,
       id: null,
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ObjectExpression',
       start: 94,
       end: 149,
       properties: [Array] } ] }
NewExpression
68
150
Node { type: 'Identifier', start: 72, end: 77, name: 'Proxy' }
Identifier
72
77
Proxy
[ Node {
    type: 'FunctionExpression',
    start: 78,
    end: 92,
    id: null,
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 89, end: 92, body: [] } },
  Node {
    type: 'ObjectExpression',
    start: 94,
    end: 149,
    properties: [ [Node] ] } ]
Node {
  type: 'FunctionExpression',
  start: 78,
  end: 92,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 89, end: 92, body: [] } }
FunctionExpression
78
92
null
[+] Exception: dont-unwind-past-vm-entry-frame.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 478,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 59,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 60,
       end: 77,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 79,
       end: 468,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 470,
       end: 477,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
478
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 59,
    id: Node { type: 'Identifier', start: 9, end: 15, name: 'assert' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 59, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 60,
    end: 77,
    expression: 
     Node {
       type: 'CallExpression',
       start: 60,
       end: 76,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 79,
    end: 468,
    id: Node { type: 'Identifier', start: 88, end: 92, name: 'test' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 95, end: 468, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 470,
    end: 477,
    expression: 
     Node {
       type: 'CallExpression',
       start: 470,
       end: 476,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 59,
  id: Node { type: 'Identifier', start: 9, end: 15, name: 'assert' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ],
  body: Node { type: 'BlockStatement', start: 19, end: 59, body: [ [Node] ] } }
FunctionDeclaration
0
59
Node { type: 'Identifier', start: 9, end: 15, name: 'assert' }
Identifier
9
15
assert
false
false
false
[ Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ]
Node { type: 'Identifier', start: 16, end: 17, name: 'b' }
Identifier
16
17
b
Node {
  type: 'BlockStatement',
  start: 19,
  end: 59,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 25,
       end: 57,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
19
59
[ Node {
    type: 'IfStatement',
    start: 25,
    end: 57,
    test: 
     Node {
       type: 'UnaryExpression',
       start: 29,
       end: 31,
       operator: '!',
       prefix: true,
       argument: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 41, end: 57, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 25,
  end: 57,
  test: 
   Node {
     type: 'UnaryExpression',
     start: 29,
     end: 31,
     operator: '!',
     prefix: true,
     argument: Node { type: 'Identifier', start: 30, end: 31, name: 'b' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 41,
     end: 57,
     argument: 
      Node {
        type: 'NewExpression',
        start: 47,
        end: 56,
        callee: [Node],
        arguments: [] } },
  alternate: null }
IfStatement
25
57
Node {
  type: 'UnaryExpression',
  start: 29,
  end: 31,
  operator: '!',
  prefix: true,
  argument: Node { type: 'Identifier', start: 30, end: 31, name: 'b' } }
UnaryExpression
29
31
!
true
Node { type: 'Identifier', start: 30, end: 31, name: 'b' }
Identifier
30
31
b
Node {
  type: 'ThrowStatement',
  start: 41,
  end: 57,
  argument: 
   Node {
     type: 'NewExpression',
     start: 47,
     end: 56,
     callee: Node { type: 'Identifier', start: 51, end: 56, name: 'Error' },
     arguments: [] } }
ThrowStatement
41
57
Node {
  type: 'NewExpression',
  start: 47,
  end: 56,
  callee: Node { type: 'Identifier', start: 51, end: 56, name: 'Error' },
  arguments: [] }
NewExpression
47
56
Node { type: 'Identifier', start: 51, end: 56, name: 'Error' }
Identifier
51
56
Error
[]
null
[+] Exception: dont-validate-stack-offset-in-b3-because-it-might-be-guarded-by-control-flow.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 971,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 0,
       end: 13,
       expression: [Node],
       directive: 'use strict' },
     Node {
       type: 'FunctionDeclaration',
       start: 15,
       end: 84,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 86,
       end: 99,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 101,
       end: 924,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 926,
       end: 969,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
971
[ Node {
    type: 'ExpressionStatement',
    start: 0,
    end: 13,
    expression: 
     Node {
       type: 'Literal',
       start: 0,
       end: 12,
       value: 'use strict',
       raw: '"use strict"' },
    directive: 'use strict' },
  Node {
    type: 'FunctionDeclaration',
    start: 15,
    end: 84,
    id: Node { type: 'Identifier', start: 24, end: 30, name: 'assert' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 39, end: 84, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 86,
    end: 99,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 101,
    end: 924,
    id: Node { type: 'Identifier', start: 110, end: 114, name: 'test' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 117, end: 924, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 926,
    end: 969,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 931,
       end: 940,
       declarations: [Array],
       kind: 'let' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 942,
       end: 951,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 953,
       end: 956,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 962,
       end: 969,
       expression: [Node] } } ]
Node {
  type: 'ExpressionStatement',
  start: 0,
  end: 13,
  expression: 
   Node {
     type: 'Literal',
     start: 0,
     end: 12,
     value: 'use strict',
     raw: '"use strict"' },
  directive: 'use strict' }
ExpressionStatement
0
13
Node {
  type: 'Literal',
  start: 0,
  end: 12,
  value: 'use strict',
  raw: '"use strict"' }
Literal
0
12
use strict
"use strict"
use strict
Node {
  type: 'FunctionDeclaration',
  start: 15,
  end: 84,
  id: Node { type: 'Identifier', start: 24, end: 30, name: 'assert' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 31, end: 32, name: 'b' },
     Node { type: 'Identifier', start: 34, end: 37, name: 'msg' } ],
  body: Node { type: 'BlockStatement', start: 39, end: 84, body: [ [Node] ] } }
FunctionDeclaration
15
84
Node { type: 'Identifier', start: 24, end: 30, name: 'assert' }
Identifier
24
30
assert
false
false
false
[ Node { type: 'Identifier', start: 31, end: 32, name: 'b' },
  Node { type: 'Identifier', start: 34, end: 37, name: 'msg' } ]
Node { type: 'Identifier', start: 31, end: 32, name: 'b' }
Identifier
31
32
b
Node { type: 'Identifier', start: 34, end: 37, name: 'msg' }
Identifier
34
37
msg
Node {
  type: 'BlockStatement',
  start: 39,
  end: 84,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 45,
       end: 82,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
39
84
[ Node {
    type: 'IfStatement',
    start: 45,
    end: 82,
    test: 
     Node {
       type: 'UnaryExpression',
       start: 49,
       end: 51,
       operator: '!',
       prefix: true,
       argument: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 61, end: 82, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 45,
  end: 82,
  test: 
   Node {
     type: 'UnaryExpression',
     start: 49,
     end: 51,
     operator: '!',
     prefix: true,
     argument: Node { type: 'Identifier', start: 50, end: 51, name: 'b' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 61,
     end: 82,
     argument: 
      Node {
        type: 'NewExpression',
        start: 67,
        end: 81,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
45
82
Node {
  type: 'UnaryExpression',
  start: 49,
  end: 51,
  operator: '!',
  prefix: true,
  argument: Node { type: 'Identifier', start: 50, end: 51, name: 'b' } }
UnaryExpression
49
51
!
true
Node { type: 'Identifier', start: 50, end: 51, name: 'b' }
Identifier
50
51
b
Node {
  type: 'ThrowStatement',
  start: 61,
  end: 82,
  argument: 
   Node {
     type: 'NewExpression',
     start: 67,
     end: 81,
     callee: Node { type: 'Identifier', start: 71, end: 76, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
61
82
Node {
  type: 'NewExpression',
  start: 67,
  end: 81,
  callee: Node { type: 'Identifier', start: 71, end: 76, name: 'Error' },
  arguments: 
   [ Node { type: 'Identifier', start: 77, end: 80, name: 'msg' } ] }
NewExpression
67
81
Node { type: 'Identifier', start: 71, end: 76, name: 'Error' }
Identifier
71
76
Error
[ Node { type: 'Identifier', start: 77, end: 80, name: 'msg' } ]
Node { type: 'Identifier', start: 77, end: 80, name: 'msg' }
Identifier
77
80
msg
null
[+] Exception: double-array-to-array-storage.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 156,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 15,
       end: 34,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 35,
       end: 72,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 73,
       end: 154,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
156
[ Node {
    type: 'VariableDeclaration',
    start: 15,
    end: 34,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 35,
    end: 72,
    expression: 
     Node {
       type: 'CallExpression',
       start: 35,
       end: 71,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'IfStatement',
    start: 73,
    end: 154,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 77,
       end: 106,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 112, end: 154, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 15,
  end: 34,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 19,
       end: 33,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
15
34
[ Node {
    type: 'VariableDeclarator',
    start: 19,
    end: 33,
    id: Node { type: 'Identifier', start: 19, end: 20, name: 'x' },
    init: Node { type: 'ArrayExpression', start: 23, end: 33, elements: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 19,
  end: 33,
  id: Node { type: 'Identifier', start: 19, end: 20, name: 'x' },
  init: 
   Node {
     type: 'ArrayExpression',
     start: 23,
     end: 33,
     elements: [ [Node], [Node] ] } }
VariableDeclarator
19
33
Node { type: 'Identifier', start: 19, end: 20, name: 'x' }
Identifier
19
20
x
Node {
  type: 'ArrayExpression',
  start: 23,
  end: 33,
  elements: 
   [ Node { type: 'Literal', start: 24, end: 27, value: 2.5, raw: '2.5' },
     Node { type: 'Literal', start: 29, end: 32, value: 1.5, raw: '1.5' } ] }
ArrayExpression
23
33
[ Node { type: 'Literal', start: 24, end: 27, value: 2.5, raw: '2.5' },
  Node { type: 'Literal', start: 29, end: 32, value: 1.5, raw: '1.5' } ]
Node { type: 'Literal', start: 24, end: 27, value: 2.5, raw: '2.5' }
Literal
24
27
2.5
2.5
Node { type: 'Literal', start: 29, end: 32, value: 1.5, raw: '1.5' }
Literal
29
32
1.5
1.5
var
Node {
  type: 'ExpressionStatement',
  start: 35,
  end: 72,
  expression: 
   Node {
     type: 'CallExpression',
     start: 35,
     end: 71,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 35,
        end: 63,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [ [Node], [Node] ] } }
ExpressionStatement
35
72
Node {
  type: 'CallExpression',
  start: 35,
  end: 71,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 35,
     end: 63,
     object: 
      Node {
        type: 'MemberExpression',
        start: 35,
        end: 58,
        object: [Node],
        property: [Node],
        computed: false },
     property: Node { type: 'Identifier', start: 59, end: 63, name: 'call' },
     computed: false },
  arguments: 
   [ Node { type: 'Identifier', start: 64, end: 65, name: 'x' },
     Node { type: 'Literal', start: 67, end: 70, value: 3.5, raw: '3.5' } ] }
CallExpression
35
71
Node {
  type: 'MemberExpression',
  start: 35,
  end: 63,
  object: 
   Node {
     type: 'MemberExpression',
     start: 35,
     end: 58,
     object: 
      Node {
        type: 'MemberExpression',
        start: 35,
        end: 50,
        object: [Node],
        property: [Node],
        computed: false },
     property: Node { type: 'Identifier', start: 51, end: 58, name: 'unshift' },
     computed: false },
  property: Node { type: 'Identifier', start: 59, end: 63, name: 'call' },
  computed: false }
MemberExpression
35
63
Node {
  type: 'MemberExpression',
  start: 35,
  end: 58,
  object: 
   Node {
     type: 'MemberExpression',
     start: 35,
     end: 50,
     object: Node { type: 'Identifier', start: 35, end: 40, name: 'Array' },
     property: Node { type: 'Identifier', start: 41, end: 50, name: 'prototype' },
     computed: false },
  property: Node { type: 'Identifier', start: 51, end: 58, name: 'unshift' },
  computed: false }
MemberExpression
35
58
Node {
  type: 'MemberExpression',
  start: 35,
  end: 50,
  object: Node { type: 'Identifier', start: 35, end: 40, name: 'Array' },
  property: Node { type: 'Identifier', start: 41, end: 50, name: 'prototype' },
  computed: false }
MemberExpression
35
50
Node { type: 'Identifier', start: 35, end: 40, name: 'Array' }
Identifier
35
40
Array
Node { type: 'Identifier', start: 41, end: 50, name: 'prototype' }
Identifier
41
50
prototype
false
Node { type: 'Identifier', start: 51, end: 58, name: 'unshift' }
Identifier
51
58
unshift
false
Node { type: 'Identifier', start: 59, end: 63, name: 'call' }
Identifier
59
63
call
false
[ Node { type: 'Identifier', start: 64, end: 65, name: 'x' },
  Node { type: 'Literal', start: 67, end: 70, value: 3.5, raw: '3.5' } ]
Node { type: 'Identifier', start: 64, end: 65, name: 'x' }
Identifier
64
65
x
Node { type: 'Literal', start: 67, end: 70, value: 3.5, raw: '3.5' }
Literal
67
70
3.5
3.5
Node {
  type: 'IfStatement',
  start: 73,
  end: 154,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 77,
     end: 106,
     left: 
      Node {
        type: 'CallExpression',
        start: 77,
        end: 89,
        callee: [Node],
        arguments: [] },
     operator: '!=',
     right: 
      Node {
        type: 'Literal',
        start: 93,
        end: 106,
        value: '3.5,2.5,1.5',
        raw: '"3.5,2.5,1.5"' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 112,
     end: 154,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 118,
        end: 153,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
73
154
Node {
  type: 'BinaryExpression',
  start: 77,
  end: 106,
  left: 
   Node {
     type: 'CallExpression',
     start: 77,
     end: 89,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 77,
        end: 87,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [] },
  operator: '!=',
  right: 
   Node {
     type: 'Literal',
     start: 93,
     end: 106,
     value: '3.5,2.5,1.5',
     raw: '"3.5,2.5,1.5"' } }
BinaryExpression
77
106
Node {
  type: 'CallExpression',
  start: 77,
  end: 89,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 77,
     end: 87,
     object: Node { type: 'Identifier', start: 77, end: 78, name: 'x' },
     property: Node { type: 'Identifier', start: 79, end: 87, name: 'toString' },
     computed: false },
  arguments: [] }
CallExpression
77
89
Node {
  type: 'MemberExpression',
  start: 77,
  end: 87,
  object: Node { type: 'Identifier', start: 77, end: 78, name: 'x' },
  property: Node { type: 'Identifier', start: 79, end: 87, name: 'toString' },
  computed: false }
MemberExpression
77
87
Node { type: 'Identifier', start: 77, end: 78, name: 'x' }
Identifier
77
78
x
Node { type: 'Identifier', start: 79, end: 87, name: 'toString' }
Identifier
79
87
toString
false
[]
!=
Node {
  type: 'Literal',
  start: 93,
  end: 106,
  value: '3.5,2.5,1.5',
  raw: '"3.5,2.5,1.5"' }
Literal
93
106
3.5,2.5,1.5
"3.5,2.5,1.5"
Node {
  type: 'ThrowStatement',
  start: 112,
  end: 154,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 118,
     end: 153,
     left: 
      Node {
        type: 'Literal',
        start: 118,
        end: 139,
        value: 'Error: bad result: ',
        raw: '"Error: bad result: "' },
     operator: '+',
     right: 
      Node {
        type: 'CallExpression',
        start: 142,
        end: 153,
        callee: [Node],
        arguments: [Array] } } }
ThrowStatement
112
154
Node {
  type: 'BinaryExpression',
  start: 118,
  end: 153,
  left: 
   Node {
     type: 'Literal',
     start: 118,
     end: 139,
     value: 'Error: bad result: ',
     raw: '"Error: bad result: "' },
  operator: '+',
  right: 
   Node {
     type: 'CallExpression',
     start: 142,
     end: 153,
     callee: Node { type: 'Identifier', start: 142, end: 150, name: 'describe' },
     arguments: [ [Node] ] } }
BinaryExpression
118
153
Node {
  type: 'Literal',
  start: 118,
  end: 139,
  value: 'Error: bad result: ',
  raw: '"Error: bad result: "' }
Literal
118
139
Error: bad result: 
"Error: bad result: "
+
Node {
  type: 'CallExpression',
  start: 142,
  end: 153,
  callee: Node { type: 'Identifier', start: 142, end: 150, name: 'describe' },
  arguments: 
   [ Node { type: 'Identifier', start: 151, end: 152, name: 'x' } ] }
CallExpression
142
153
Node { type: 'Identifier', start: 142, end: 150, name: 'describe' }
Identifier
142
150
describe
[ Node { type: 'Identifier', start: 151, end: 152, name: 'x' } ]
Node { type: 'Identifier', start: 151, end: 152, name: 'x' }
Identifier
151
152
x
null
[+] Exception: double-array-unshift.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 401,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 32,
       end: 76,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 78,
       end: 92,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 94,
       end: 261,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 263,
       end: 315,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 317,
       end: 331,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 332,
       end: 347,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 348,
       end: 365,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 366,
       end: 383,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 384,
       end: 400,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
401
[ Node {
    type: 'FunctionDeclaration',
    start: 32,
    end: 76,
    id: Node { type: 'Identifier', start: 41, end: 44, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 51, end: 76, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 78,
    end: 92,
    expression: 
     Node {
       type: 'CallExpression',
       start: 78,
       end: 91,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 94,
    end: 261,
    id: Node { type: 'Identifier', start: 103, end: 107, name: 'test' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 117, end: 261, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 263,
    end: 315,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 268,
       end: 277,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 279,
       end: 286,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 288,
       end: 291,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 297,
       end: 315,
       expression: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 317,
    end: 331,
    expression: 
     Node {
       type: 'CallExpression',
       start: 317,
       end: 330,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 332,
    end: 347,
    expression: 
     Node {
       type: 'CallExpression',
       start: 332,
       end: 346,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 348,
    end: 365,
    expression: 
     Node {
       type: 'CallExpression',
       start: 348,
       end: 364,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 366,
    end: 383,
    expression: 
     Node {
       type: 'CallExpression',
       start: 366,
       end: 382,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 384,
    end: 400,
    expression: 
     Node {
       type: 'CallExpression',
       start: 384,
       end: 399,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 32,
  end: 76,
  id: Node { type: 'Identifier', start: 41, end: 44, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 45, end: 46, name: 'a' },
     Node { type: 'Identifier', start: 48, end: 49, name: 'b' } ],
  body: Node { type: 'BlockStatement', start: 51, end: 76, body: [ [Node] ] } }
FunctionDeclaration
32
76
Node { type: 'Identifier', start: 41, end: 44, name: 'foo' }
Identifier
41
44
foo
false
false
false
[ Node { type: 'Identifier', start: 45, end: 46, name: 'a' },
  Node { type: 'Identifier', start: 48, end: 49, name: 'b' } ]
Node { type: 'Identifier', start: 45, end: 46, name: 'a' }
Identifier
45
46
a
Node { type: 'Identifier', start: 48, end: 49, name: 'b' }
Identifier
48
49
b
Node {
  type: 'BlockStatement',
  start: 51,
  end: 76,
  body: 
   [ Node { type: 'ReturnStatement', start: 57, end: 74, argument: [Node] } ] }
BlockStatement
51
76
[ Node {
    type: 'ReturnStatement',
    start: 57,
    end: 74,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 64,
       end: 73,
       left: [Node],
       operator: '/',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 57,
  end: 74,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 64,
     end: 73,
     left: 
      Node {
        type: 'MemberExpression',
        start: 64,
        end: 67,
        object: [Node],
        property: [Node],
        computed: false },
     operator: '/',
     right: 
      Node {
        type: 'MemberExpression',
        start: 70,
        end: 73,
        object: [Node],
        property: [Node],
        computed: false } } }
ReturnStatement
57
74
Node {
  type: 'BinaryExpression',
  start: 64,
  end: 73,
  left: 
   Node {
     type: 'MemberExpression',
     start: 64,
     end: 67,
     object: Node { type: 'Identifier', start: 64, end: 65, name: 'a' },
     property: Node { type: 'Identifier', start: 66, end: 67, name: 'f' },
     computed: false },
  operator: '/',
  right: 
   Node {
     type: 'MemberExpression',
     start: 70,
     end: 73,
     object: Node { type: 'Identifier', start: 70, end: 71, name: 'b' },
     property: Node { type: 'Identifier', start: 72, end: 73, name: 'f' },
     computed: false } }
BinaryExpression
64
73
Node {
  type: 'MemberExpression',
  start: 64,
  end: 67,
  object: Node { type: 'Identifier', start: 64, end: 65, name: 'a' },
  property: Node { type: 'Identifier', start: 66, end: 67, name: 'f' },
  computed: false }
MemberExpression
64
67
Node { type: 'Identifier', start: 64, end: 65, name: 'a' }
Identifier
64
65
a
Node { type: 'Identifier', start: 66, end: 67, name: 'f' }
Identifier
66
67
f
false
/
Node {
  type: 'MemberExpression',
  start: 70,
  end: 73,
  object: Node { type: 'Identifier', start: 70, end: 71, name: 'b' },
  property: Node { type: 'Identifier', start: 72, end: 73, name: 'f' },
  computed: false }
MemberExpression
70
73
Node { type: 'Identifier', start: 70, end: 71, name: 'b' }
Identifier
70
71
b
Node { type: 'Identifier', start: 72, end: 73, name: 'f' }
Identifier
72
73
f
false
Node {
  type: 'ExpressionStatement',
  start: 78,
  end: 92,
  expression: 
   Node {
     type: 'CallExpression',
     start: 78,
     end: 91,
     callee: Node { type: 'Identifier', start: 78, end: 86, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
78
92
Node {
  type: 'CallExpression',
  start: 78,
  end: 91,
  callee: Node { type: 'Identifier', start: 78, end: 86, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 87, end: 90, name: 'foo' } ] }
CallExpression
78
91
Node { type: 'Identifier', start: 78, end: 86, name: 'noInline' }
Identifier
78
86
noInline
[ Node { type: 'Identifier', start: 87, end: 90, name: 'foo' } ]
Node { type: 'Identifier', start: 87, end: 90, name: 'foo' }
Identifier
87
90
foo
Node {
  type: 'FunctionDeclaration',
  start: 94,
  end: 261,
  id: Node { type: 'Identifier', start: 103, end: 107, name: 'test' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 108, end: 109, name: 'a' },
     Node { type: 'Identifier', start: 111, end: 112, name: 'b' },
     Node { type: 'Identifier', start: 114, end: 115, name: 'e' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 117,
     end: 261,
     body: [ [Node], [Node] ] } }
FunctionDeclaration
94
261
Node { type: 'Identifier', start: 103, end: 107, name: 'test' }
Identifier
103
107
test
false
false
false
[ Node { type: 'Identifier', start: 108, end: 109, name: 'a' },
  Node { type: 'Identifier', start: 111, end: 112, name: 'b' },
  Node { type: 'Identifier', start: 114, end: 115, name: 'e' } ]
Node { type: 'Identifier', start: 108, end: 109, name: 'a' }
Identifier
108
109
a
Node { type: 'Identifier', start: 111, end: 112, name: 'b' }
Identifier
111
112
b
Node { type: 'Identifier', start: 114, end: 115, name: 'e' }
Identifier
114
115
e
Node {
  type: 'BlockStatement',
  start: 117,
  end: 261,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 123,
       end: 154,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 159,
       end: 259,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
117
261
[ Node {
    type: 'VariableDeclaration',
    start: 123,
    end: 154,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 159,
    end: 259,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 163,
       end: 174,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 184, end: 259, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 123,
  end: 154,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 127,
       end: 153,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
123
154
[ Node {
    type: 'VariableDeclarator',
    start: 127,
    end: 153,
    id: Node { type: 'Identifier', start: 127, end: 133, name: 'result' },
    init: 
     Node {
       type: 'CallExpression',
       start: 136,
       end: 153,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 127,
  end: 153,
  id: Node { type: 'Identifier', start: 127, end: 133, name: 'result' },
  init: 
   Node {
     type: 'CallExpression',
     start: 136,
     end: 153,
     callee: Node { type: 'Identifier', start: 136, end: 139, name: 'foo' },
     arguments: [ [Node], [Node] ] } }
VariableDeclarator
127
153
Node { type: 'Identifier', start: 127, end: 133, name: 'result' }
Identifier
127
133
result
Node {
  type: 'CallExpression',
  start: 136,
  end: 153,
  callee: Node { type: 'Identifier', start: 136, end: 139, name: 'foo' },
  arguments: 
   [ Node {
       type: 'ObjectExpression',
       start: 140,
       end: 145,
       properties: [Array] },
     Node {
       type: 'ObjectExpression',
       start: 147,
       end: 152,
       properties: [Array] } ] }
CallExpression
136
153
Node { type: 'Identifier', start: 136, end: 139, name: 'foo' }
Identifier
136
139
foo
[ Node {
    type: 'ObjectExpression',
    start: 140,
    end: 145,
    properties: [ [Node] ] },
  Node {
    type: 'ObjectExpression',
    start: 147,
    end: 152,
    properties: [ [Node] ] } ]
Node {
  type: 'ObjectExpression',
  start: 140,
  end: 145,
  properties: 
   [ Node {
       type: 'Property',
       start: 141,
       end: 144,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
140
145
[ Node {
    type: 'Property',
    start: 141,
    end: 144,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 141, end: 142, name: 'f' },
    value: Node { type: 'Identifier', start: 143, end: 144, name: 'a' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 141,
  end: 144,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 141, end: 142, name: 'f' },
  value: Node { type: 'Identifier', start: 143, end: 144, name: 'a' },
  kind: 'init' }
Property
141
144
false
false
false
Node { type: 'Identifier', start: 141, end: 142, name: 'f' }
Identifier
141
142
f
Node { type: 'Identifier', start: 143, end: 144, name: 'a' }
Identifier
143
144
a
init
Node {
  type: 'ObjectExpression',
  start: 147,
  end: 152,
  properties: 
   [ Node {
       type: 'Property',
       start: 148,
       end: 151,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
147
152
[ Node {
    type: 'Property',
    start: 148,
    end: 151,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 148, end: 149, name: 'f' },
    value: Node { type: 'Identifier', start: 150, end: 151, name: 'b' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 148,
  end: 151,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 148, end: 149, name: 'f' },
  value: Node { type: 'Identifier', start: 150, end: 151, name: 'b' },
  kind: 'init' }
Property
148
151
false
false
false
Node { type: 'Identifier', start: 148, end: 149, name: 'f' }
Identifier
148
149
f
Node { type: 'Identifier', start: 150, end: 151, name: 'b' }
Identifier
150
151
b
init
var
Node {
  type: 'IfStatement',
  start: 159,
  end: 259,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 163,
     end: 174,
     left: Node { type: 'Identifier', start: 163, end: 169, name: 'result' },
     operator: '!=',
     right: Node { type: 'Identifier', start: 173, end: 174, name: 'e' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 184,
     end: 259,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 190,
        end: 258,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
159
259
Node {
  type: 'BinaryExpression',
  start: 163,
  end: 174,
  left: Node { type: 'Identifier', start: 163, end: 169, name: 'result' },
  operator: '!=',
  right: Node { type: 'Identifier', start: 173, end: 174, name: 'e' } }
BinaryExpression
163
174
Node { type: 'Identifier', start: 163, end: 169, name: 'result' }
Identifier
163
169
result
!=
Node { type: 'Identifier', start: 173, end: 174, name: 'e' }
Identifier
173
174
e
Node {
  type: 'ThrowStatement',
  start: 184,
  end: 259,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 190,
     end: 258,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 190,
        end: 249,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Identifier', start: 252, end: 258, name: 'result' } } }
ThrowStatement
184
259
Node {
  type: 'BinaryExpression',
  start: 190,
  end: 258,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 190,
     end: 249,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 190,
        end: 235,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: 
      Node {
        type: 'Literal',
        start: 238,
        end: 249,
        value: ' but was ',
        raw: '" but was "' } },
  operator: '+',
  right: Node { type: 'Identifier', start: 252, end: 258, name: 'result' } }
BinaryExpression
190
258
Node {
  type: 'BinaryExpression',
  start: 190,
  end: 249,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 190,
     end: 235,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 190,
        end: 231,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Identifier', start: 234, end: 235, name: 'e' } },
  operator: '+',
  right: 
   Node {
     type: 'Literal',
     start: 238,
     end: 249,
     value: ' but was ',
     raw: '" but was "' } }
BinaryExpression
190
249
Node {
  type: 'BinaryExpression',
  start: 190,
  end: 235,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 190,
     end: 231,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 190,
        end: 215,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: 
      Node {
        type: 'Literal',
        start: 218,
        end: 231,
        value: ' should be ',
        raw: '" should be "' } },
  operator: '+',
  right: Node { type: 'Identifier', start: 234, end: 235, name: 'e' } }
BinaryExpression
190
235
Node {
  type: 'BinaryExpression',
  start: 190,
  end: 231,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 190,
     end: 215,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 190,
        end: 211,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Identifier', start: 214, end: 215, name: 'b' } },
  operator: '+',
  right: 
   Node {
     type: 'Literal',
     start: 218,
     end: 231,
     value: ' should be ',
     raw: '" should be "' } }
BinaryExpression
190
231
Node {
  type: 'BinaryExpression',
  start: 190,
  end: 215,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 190,
     end: 211,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 190,
        end: 203,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: 
      Node {
        type: 'Literal',
        start: 206,
        end: 211,
        value: ' / ',
        raw: '" / "' } },
  operator: '+',
  right: Node { type: 'Identifier', start: 214, end: 215, name: 'b' } }
BinaryExpression
190
215
Node {
  type: 'BinaryExpression',
  start: 190,
  end: 211,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 190,
     end: 203,
     left: 
      Node {
        type: 'Literal',
        start: 190,
        end: 199,
        value: 'Error: ',
        raw: '"Error: "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 202, end: 203, name: 'a' } },
  operator: '+',
  right: 
   Node {
     type: 'Literal',
     start: 206,
     end: 211,
     value: ' / ',
     raw: '" / "' } }
BinaryExpression
190
211
Node {
  type: 'BinaryExpression',
  start: 190,
  end: 203,
  left: 
   Node {
     type: 'Literal',
     start: 190,
     end: 199,
     value: 'Error: ',
     raw: '"Error: "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 202, end: 203, name: 'a' } }
BinaryExpression
190
203
Node {
  type: 'Literal',
  start: 190,
  end: 199,
  value: 'Error: ',
  raw: '"Error: "' }
Literal
190
199
Error: 
"Error: "
+
Node { type: 'Identifier', start: 202, end: 203, name: 'a' }
Identifier
202
203
a
+
Node {
  type: 'Literal',
  start: 206,
  end: 211,
  value: ' / ',
  raw: '" / "' }
Literal
206
211
 / 
" / "
+
Node { type: 'Identifier', start: 214, end: 215, name: 'b' }
Identifier
214
215
b
+
Node {
  type: 'Literal',
  start: 218,
  end: 231,
  value: ' should be ',
  raw: '" should be "' }
Literal
218
231
 should be 
" should be "
+
Node { type: 'Identifier', start: 234, end: 235, name: 'e' }
Identifier
234
235
e
+
Node {
  type: 'Literal',
  start: 238,
  end: 249,
  value: ' but was ',
  raw: '" but was "' }
Literal
238
249
 but was 
" but was "
+
Node { type: 'Identifier', start: 252, end: 258, name: 'result' }
Identifier
252
258
result
null
[+] Exception: double-as-int32.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1655,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 83,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 84,
       end: 113,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 115,
       end: 196,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 197,
       end: 238,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 240,
       end: 307,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 308,
       end: 334,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 336,
       end: 403,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 404,
       end: 430,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 432,
       end: 1654,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
1655
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 83,
    id: 
     Node {
       type: 'Identifier',
       start: 9,
       end: 27,
       name: 'canSimplifyToFloat' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 34, end: 83, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 84,
    end: 113,
    expression: 
     Node {
       type: 'CallExpression',
       start: 84,
       end: 112,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 115,
    end: 196,
    id: 
     Node {
       type: 'Identifier',
       start: 124,
       end: 154,
       name: 'canSimplifyToFloatWithConstant' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 158, end: 196, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 197,
    end: 238,
    expression: 
     Node {
       type: 'CallExpression',
       start: 197,
       end: 237,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 240,
    end: 307,
    id: 
     Node {
       type: 'Identifier',
       start: 249,
       end: 264,
       name: 'cannotSimplifyA' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 271, end: 307, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 308,
    end: 334,
    expression: 
     Node {
       type: 'CallExpression',
       start: 308,
       end: 333,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 336,
    end: 403,
    id: 
     Node {
       type: 'Identifier',
       start: 345,
       end: 360,
       name: 'cannotSimplifyB' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 367, end: 403, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 404,
    end: 430,
    expression: 
     Node {
       type: 'CallExpression',
       start: 404,
       end: 429,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 432,
    end: 1654,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 437,
       end: 446,
       declarations: [Array],
       kind: 'let' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 448,
       end: 455,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 457,
       end: 460,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 462, end: 1654, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 83,
  id: 
   Node {
     type: 'Identifier',
     start: 9,
     end: 27,
     name: 'canSimplifyToFloat' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 28, end: 29, name: 'a' },
     Node { type: 'Identifier', start: 31, end: 32, name: 'b' } ],
  body: Node { type: 'BlockStatement', start: 34, end: 83, body: [ [Node] ] } }
FunctionDeclaration
0
83
Node {
  type: 'Identifier',
  start: 9,
  end: 27,
  name: 'canSimplifyToFloat' }
Identifier
9
27
canSimplifyToFloat
false
false
false
[ Node { type: 'Identifier', start: 28, end: 29, name: 'a' },
  Node { type: 'Identifier', start: 31, end: 32, name: 'b' } ]
Node { type: 'Identifier', start: 28, end: 29, name: 'a' }
Identifier
28
29
a
Node { type: 'Identifier', start: 31, end: 32, name: 'b' }
Identifier
31
32
b
Node {
  type: 'BlockStatement',
  start: 34,
  end: 83,
  body: 
   [ Node { type: 'ReturnStatement', start: 40, end: 81, argument: [Node] } ] }
BlockStatement
34
83
[ Node {
    type: 'ReturnStatement',
    start: 40,
    end: 81,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 47,
       end: 80,
       left: [Node],
       operator: '===',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 40,
  end: 81,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 47,
     end: 80,
     left: 
      Node {
        type: 'CallExpression',
        start: 47,
        end: 61,
        callee: [Node],
        arguments: [Array] },
     operator: '===',
     right: 
      Node {
        type: 'CallExpression',
        start: 66,
        end: 80,
        callee: [Node],
        arguments: [Array] } } }
ReturnStatement
40
81
Node {
  type: 'BinaryExpression',
  start: 47,
  end: 80,
  left: 
   Node {
     type: 'CallExpression',
     start: 47,
     end: 61,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 47,
        end: 58,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [ [Node] ] },
  operator: '===',
  right: 
   Node {
     type: 'CallExpression',
     start: 66,
     end: 80,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 66,
        end: 77,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [ [Node] ] } }
BinaryExpression
47
80
Node {
  type: 'CallExpression',
  start: 47,
  end: 61,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 47,
     end: 58,
     object: Node { type: 'Identifier', start: 47, end: 51, name: 'Math' },
     property: Node { type: 'Identifier', start: 52, end: 58, name: 'fround' },
     computed: false },
  arguments: [ Node { type: 'Identifier', start: 59, end: 60, name: 'a' } ] }
CallExpression
47
61
Node {
  type: 'MemberExpression',
  start: 47,
  end: 58,
  object: Node { type: 'Identifier', start: 47, end: 51, name: 'Math' },
  property: Node { type: 'Identifier', start: 52, end: 58, name: 'fround' },
  computed: false }
MemberExpression
47
58
Node { type: 'Identifier', start: 47, end: 51, name: 'Math' }
Identifier
47
51
Math
Node { type: 'Identifier', start: 52, end: 58, name: 'fround' }
Identifier
52
58
fround
false
[ Node { type: 'Identifier', start: 59, end: 60, name: 'a' } ]
Node { type: 'Identifier', start: 59, end: 60, name: 'a' }
Identifier
59
60
a
===
Node {
  type: 'CallExpression',
  start: 66,
  end: 80,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 66,
     end: 77,
     object: Node { type: 'Identifier', start: 66, end: 70, name: 'Math' },
     property: Node { type: 'Identifier', start: 71, end: 77, name: 'fround' },
     computed: false },
  arguments: [ Node { type: 'Identifier', start: 78, end: 79, name: 'b' } ] }
CallExpression
66
80
Node {
  type: 'MemberExpression',
  start: 66,
  end: 77,
  object: Node { type: 'Identifier', start: 66, end: 70, name: 'Math' },
  property: Node { type: 'Identifier', start: 71, end: 77, name: 'fround' },
  computed: false }
MemberExpression
66
77
Node { type: 'Identifier', start: 66, end: 70, name: 'Math' }
Identifier
66
70
Math
Node { type: 'Identifier', start: 71, end: 77, name: 'fround' }
Identifier
71
77
fround
false
[ Node { type: 'Identifier', start: 78, end: 79, name: 'b' } ]
Node { type: 'Identifier', start: 78, end: 79, name: 'b' }
Identifier
78
79
b
Node {
  type: 'ExpressionStatement',
  start: 84,
  end: 113,
  expression: 
   Node {
     type: 'CallExpression',
     start: 84,
     end: 112,
     callee: Node { type: 'Identifier', start: 84, end: 92, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
84
113
Node {
  type: 'CallExpression',
  start: 84,
  end: 112,
  callee: Node { type: 'Identifier', start: 84, end: 92, name: 'noInline' },
  arguments: 
   [ Node {
       type: 'Identifier',
       start: 93,
       end: 111,
       name: 'canSimplifyToFloat' } ] }
CallExpression
84
112
Node { type: 'Identifier', start: 84, end: 92, name: 'noInline' }
Identifier
84
92
noInline
[ Node {
    type: 'Identifier',
    start: 93,
    end: 111,
    name: 'canSimplifyToFloat' } ]
Node {
  type: 'Identifier',
  start: 93,
  end: 111,
  name: 'canSimplifyToFloat' }
Identifier
93
111
canSimplifyToFloat
Node {
  type: 'FunctionDeclaration',
  start: 115,
  end: 196,
  id: 
   Node {
     type: 'Identifier',
     start: 124,
     end: 154,
     name: 'canSimplifyToFloatWithConstant' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 155, end: 156, name: 'a' } ],
  body: Node { type: 'BlockStatement', start: 158, end: 196, body: [ [Node] ] } }
FunctionDeclaration
115
196
Node {
  type: 'Identifier',
  start: 124,
  end: 154,
  name: 'canSimplifyToFloatWithConstant' }
Identifier
124
154
canSimplifyToFloatWithConstant
false
false
false
[ Node { type: 'Identifier', start: 155, end: 156, name: 'a' } ]
Node { type: 'Identifier', start: 155, end: 156, name: 'a' }
Identifier
155
156
a
Node {
  type: 'BlockStatement',
  start: 158,
  end: 196,
  body: 
   [ Node {
       type: 'ReturnStatement',
       start: 164,
       end: 194,
       argument: [Node] } ] }
BlockStatement
158
196
[ Node {
    type: 'ReturnStatement',
    start: 164,
    end: 194,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 171,
       end: 193,
       left: [Node],
       operator: '===',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 164,
  end: 194,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 171,
     end: 193,
     left: 
      Node {
        type: 'CallExpression',
        start: 171,
        end: 185,
        callee: [Node],
        arguments: [Array] },
     operator: '===',
     right: Node { type: 'Literal', start: 190, end: 193, value: 1, raw: '1.0' } } }
ReturnStatement
164
194
Node {
  type: 'BinaryExpression',
  start: 171,
  end: 193,
  left: 
   Node {
     type: 'CallExpression',
     start: 171,
     end: 185,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 171,
        end: 182,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [ [Node] ] },
  operator: '===',
  right: Node { type: 'Literal', start: 190, end: 193, value: 1, raw: '1.0' } }
BinaryExpression
171
193
Node {
  type: 'CallExpression',
  start: 171,
  end: 185,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 171,
     end: 182,
     object: Node { type: 'Identifier', start: 171, end: 175, name: 'Math' },
     property: Node { type: 'Identifier', start: 176, end: 182, name: 'fround' },
     computed: false },
  arguments: 
   [ Node { type: 'Identifier', start: 183, end: 184, name: 'a' } ] }
CallExpression
171
185
Node {
  type: 'MemberExpression',
  start: 171,
  end: 182,
  object: Node { type: 'Identifier', start: 171, end: 175, name: 'Math' },
  property: Node { type: 'Identifier', start: 176, end: 182, name: 'fround' },
  computed: false }
MemberExpression
171
182
Node { type: 'Identifier', start: 171, end: 175, name: 'Math' }
Identifier
171
175
Math
Node { type: 'Identifier', start: 176, end: 182, name: 'fround' }
Identifier
176
182
fround
false
[ Node { type: 'Identifier', start: 183, end: 184, name: 'a' } ]
Node { type: 'Identifier', start: 183, end: 184, name: 'a' }
Identifier
183
184
a
===
Node { type: 'Literal', start: 190, end: 193, value: 1, raw: '1.0' }
Literal
190
193
1
1.0
Node {
  type: 'ExpressionStatement',
  start: 197,
  end: 238,
  expression: 
   Node {
     type: 'CallExpression',
     start: 197,
     end: 237,
     callee: Node { type: 'Identifier', start: 197, end: 205, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
197
238
Node {
  type: 'CallExpression',
  start: 197,
  end: 237,
  callee: Node { type: 'Identifier', start: 197, end: 205, name: 'noInline' },
  arguments: 
   [ Node {
       type: 'Identifier',
       start: 206,
       end: 236,
       name: 'canSimplifyToFloatWithConstant' } ] }
CallExpression
197
237
Node { type: 'Identifier', start: 197, end: 205, name: 'noInline' }
Identifier
197
205
noInline
[ Node {
    type: 'Identifier',
    start: 206,
    end: 236,
    name: 'canSimplifyToFloatWithConstant' } ]
Node {
  type: 'Identifier',
  start: 206,
  end: 236,
  name: 'canSimplifyToFloatWithConstant' }
Identifier
206
236
canSimplifyToFloatWithConstant
Node {
  type: 'FunctionDeclaration',
  start: 240,
  end: 307,
  id: 
   Node {
     type: 'Identifier',
     start: 249,
     end: 264,
     name: 'cannotSimplifyA' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 265, end: 266, name: 'a' },
     Node { type: 'Identifier', start: 268, end: 269, name: 'b' } ],
  body: Node { type: 'BlockStatement', start: 271, end: 307, body: [ [Node] ] } }
FunctionDeclaration
240
307
Node {
  type: 'Identifier',
  start: 249,
  end: 264,
  name: 'cannotSimplifyA' }
Identifier
249
264
cannotSimplifyA
false
false
false
[ Node { type: 'Identifier', start: 265, end: 266, name: 'a' },
  Node { type: 'Identifier', start: 268, end: 269, name: 'b' } ]
Node { type: 'Identifier', start: 265, end: 266, name: 'a' }
Identifier
265
266
a
Node { type: 'Identifier', start: 268, end: 269, name: 'b' }
Identifier
268
269
b
Node {
  type: 'BlockStatement',
  start: 271,
  end: 307,
  body: 
   [ Node {
       type: 'ReturnStatement',
       start: 277,
       end: 305,
       argument: [Node] } ] }
BlockStatement
271
307
[ Node {
    type: 'ReturnStatement',
    start: 277,
    end: 305,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 284,
       end: 304,
       left: [Node],
       operator: '===',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 277,
  end: 305,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 284,
     end: 304,
     left: Node { type: 'Identifier', start: 284, end: 285, name: 'a' },
     operator: '===',
     right: 
      Node {
        type: 'CallExpression',
        start: 290,
        end: 304,
        callee: [Node],
        arguments: [Array] } } }
ReturnStatement
277
305
Node {
  type: 'BinaryExpression',
  start: 284,
  end: 304,
  left: Node { type: 'Identifier', start: 284, end: 285, name: 'a' },
  operator: '===',
  right: 
   Node {
     type: 'CallExpression',
     start: 290,
     end: 304,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 290,
        end: 301,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [ [Node] ] } }
BinaryExpression
284
304
Node { type: 'Identifier', start: 284, end: 285, name: 'a' }
Identifier
284
285
a
===
Node {
  type: 'CallExpression',
  start: 290,
  end: 304,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 290,
     end: 301,
     object: Node { type: 'Identifier', start: 290, end: 294, name: 'Math' },
     property: Node { type: 'Identifier', start: 295, end: 301, name: 'fround' },
     computed: false },
  arguments: 
   [ Node { type: 'Identifier', start: 302, end: 303, name: 'b' } ] }
CallExpression
290
304
Node {
  type: 'MemberExpression',
  start: 290,
  end: 301,
  object: Node { type: 'Identifier', start: 290, end: 294, name: 'Math' },
  property: Node { type: 'Identifier', start: 295, end: 301, name: 'fround' },
  computed: false }
MemberExpression
290
301
Node { type: 'Identifier', start: 290, end: 294, name: 'Math' }
Identifier
290
294
Math
Node { type: 'Identifier', start: 295, end: 301, name: 'fround' }
Identifier
295
301
fround
false
[ Node { type: 'Identifier', start: 302, end: 303, name: 'b' } ]
Node { type: 'Identifier', start: 302, end: 303, name: 'b' }
Identifier
302
303
b
Node {
  type: 'ExpressionStatement',
  start: 308,
  end: 334,
  expression: 
   Node {
     type: 'CallExpression',
     start: 308,
     end: 333,
     callee: Node { type: 'Identifier', start: 308, end: 316, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
308
334
Node {
  type: 'CallExpression',
  start: 308,
  end: 333,
  callee: Node { type: 'Identifier', start: 308, end: 316, name: 'noInline' },
  arguments: 
   [ Node {
       type: 'Identifier',
       start: 317,
       end: 332,
       name: 'cannotSimplifyA' } ] }
CallExpression
308
333
Node { type: 'Identifier', start: 308, end: 316, name: 'noInline' }
Identifier
308
316
noInline
[ Node {
    type: 'Identifier',
    start: 317,
    end: 332,
    name: 'cannotSimplifyA' } ]
Node {
  type: 'Identifier',
  start: 317,
  end: 332,
  name: 'cannotSimplifyA' }
Identifier
317
332
cannotSimplifyA
Node {
  type: 'FunctionDeclaration',
  start: 336,
  end: 403,
  id: 
   Node {
     type: 'Identifier',
     start: 345,
     end: 360,
     name: 'cannotSimplifyB' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 361, end: 362, name: 'a' },
     Node { type: 'Identifier', start: 364, end: 365, name: 'b' } ],
  body: Node { type: 'BlockStatement', start: 367, end: 403, body: [ [Node] ] } }
FunctionDeclaration
336
403
Node {
  type: 'Identifier',
  start: 345,
  end: 360,
  name: 'cannotSimplifyB' }
Identifier
345
360
cannotSimplifyB
false
false
false
[ Node { type: 'Identifier', start: 361, end: 362, name: 'a' },
  Node { type: 'Identifier', start: 364, end: 365, name: 'b' } ]
Node { type: 'Identifier', start: 361, end: 362, name: 'a' }
Identifier
361
362
a
Node { type: 'Identifier', start: 364, end: 365, name: 'b' }
Identifier
364
365
b
Node {
  type: 'BlockStatement',
  start: 367,
  end: 403,
  body: 
   [ Node {
       type: 'ReturnStatement',
       start: 373,
       end: 401,
       argument: [Node] } ] }
BlockStatement
367
403
[ Node {
    type: 'ReturnStatement',
    start: 373,
    end: 401,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 380,
       end: 400,
       left: [Node],
       operator: '===',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 373,
  end: 401,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 380,
     end: 400,
     left: 
      Node {
        type: 'CallExpression',
        start: 380,
        end: 394,
        callee: [Node],
        arguments: [Array] },
     operator: '===',
     right: Node { type: 'Identifier', start: 399, end: 400, name: 'b' } } }
ReturnStatement
373
401
Node {
  type: 'BinaryExpression',
  start: 380,
  end: 400,
  left: 
   Node {
     type: 'CallExpression',
     start: 380,
     end: 394,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 380,
        end: 391,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [ [Node] ] },
  operator: '===',
  right: Node { type: 'Identifier', start: 399, end: 400, name: 'b' } }
BinaryExpression
380
400
Node {
  type: 'CallExpression',
  start: 380,
  end: 394,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 380,
     end: 391,
     object: Node { type: 'Identifier', start: 380, end: 384, name: 'Math' },
     property: Node { type: 'Identifier', start: 385, end: 391, name: 'fround' },
     computed: false },
  arguments: 
   [ Node { type: 'Identifier', start: 392, end: 393, name: 'a' } ] }
CallExpression
380
394
Node {
  type: 'MemberExpression',
  start: 380,
  end: 391,
  object: Node { type: 'Identifier', start: 380, end: 384, name: 'Math' },
  property: Node { type: 'Identifier', start: 385, end: 391, name: 'fround' },
  computed: false }
MemberExpression
380
391
Node { type: 'Identifier', start: 380, end: 384, name: 'Math' }
Identifier
380
384
Math
Node { type: 'Identifier', start: 385, end: 391, name: 'fround' }
Identifier
385
391
fround
false
[ Node { type: 'Identifier', start: 392, end: 393, name: 'a' } ]
Node { type: 'Identifier', start: 392, end: 393, name: 'a' }
Identifier
392
393
a
===
Node { type: 'Identifier', start: 399, end: 400, name: 'b' }
Identifier
399
400
b
Node {
  type: 'ExpressionStatement',
  start: 404,
  end: 430,
  expression: 
   Node {
     type: 'CallExpression',
     start: 404,
     end: 429,
     callee: Node { type: 'Identifier', start: 404, end: 412, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
404
430
Node {
  type: 'CallExpression',
  start: 404,
  end: 429,
  callee: Node { type: 'Identifier', start: 404, end: 412, name: 'noInline' },
  arguments: 
   [ Node {
       type: 'Identifier',
       start: 413,
       end: 428,
       name: 'cannotSimplifyB' } ] }
CallExpression
404
429
Node { type: 'Identifier', start: 404, end: 412, name: 'noInline' }
Identifier
404
412
noInline
[ Node {
    type: 'Identifier',
    start: 413,
    end: 428,
    name: 'cannotSimplifyB' } ]
Node {
  type: 'Identifier',
  start: 413,
  end: 428,
  name: 'cannotSimplifyB' }
Identifier
413
428
cannotSimplifyB
Node {
  type: 'ForStatement',
  start: 432,
  end: 1654,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 437,
     end: 446,
     declarations: [ [Node] ],
     kind: 'let' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 448,
     end: 455,
     left: Node { type: 'Identifier', start: 448, end: 449, name: 'i' },
     operator: '<',
     right: Node { type: 'Literal', start: 452, end: 455, value: 10000, raw: '1e4' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 457,
     end: 460,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 459, end: 460, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 462,
     end: 1654,
     body: 
      [ [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node] ] } }
ForStatement
432
1654
Node {
  type: 'VariableDeclaration',
  start: 437,
  end: 446,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 441,
       end: 446,
       id: [Node],
       init: [Node] } ],
  kind: 'let' }
VariableDeclaration
437
446
[ Node {
    type: 'VariableDeclarator',
    start: 441,
    end: 446,
    id: Node { type: 'Identifier', start: 441, end: 442, name: 'i' },
    init: Node { type: 'Literal', start: 445, end: 446, value: 1, raw: '1' } } ]
Node {
  type: 'VariableDeclarator',
  start: 441,
  end: 446,
  id: Node { type: 'Identifier', start: 441, end: 442, name: 'i' },
  init: Node { type: 'Literal', start: 445, end: 446, value: 1, raw: '1' } }
VariableDeclarator
441
446
Node { type: 'Identifier', start: 441, end: 442, name: 'i' }
Identifier
441
442
i
Node { type: 'Literal', start: 445, end: 446, value: 1, raw: '1' }
Literal
445
446
1
1
let
Node {
  type: 'BinaryExpression',
  start: 448,
  end: 455,
  left: Node { type: 'Identifier', start: 448, end: 449, name: 'i' },
  operator: '<',
  right: Node { type: 'Literal', start: 452, end: 455, value: 10000, raw: '1e4' } }
BinaryExpression
448
455
Node { type: 'Identifier', start: 448, end: 449, name: 'i' }
Identifier
448
449
i
<
Node { type: 'Literal', start: 452, end: 455, value: 10000, raw: '1e4' }
Literal
452
455
10000
1e4
Node {
  type: 'UpdateExpression',
  start: 457,
  end: 460,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 459, end: 460, name: 'i' } }
UpdateExpression
457
460
++
true
Node { type: 'Identifier', start: 459, end: 460, name: 'i' }
Identifier
459
460
i
Node {
  type: 'BlockStatement',
  start: 462,
  end: 1654,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 468,
       end: 579,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 584,
       end: 698,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 704,
       end: 822,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 827,
       end: 932,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 938,
       end: 1044,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1049,
       end: 1179,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1184,
       end: 1292,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1298,
       end: 1404,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1409,
       end: 1539,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1544,
       end: 1652,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
462
1654
[ Node {
    type: 'IfStatement',
    start: 468,
    end: 579,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 472,
       end: 517,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 527, end: 579, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 584,
    end: 698,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 588,
       end: 635,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 645, end: 698, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 704,
    end: 822,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 708,
       end: 757,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 767, end: 822, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 827,
    end: 932,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 831,
       end: 873,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 883, end: 932, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 938,
    end: 1044,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 942,
       end: 985,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 995,
       end: 1044,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1049,
    end: 1179,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1053,
       end: 1108,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1118,
       end: 1179,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1184,
    end: 1292,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1188,
       end: 1232,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1242,
       end: 1292,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1298,
    end: 1404,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1302,
       end: 1345,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1355,
       end: 1404,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1409,
    end: 1539,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1413,
       end: 1468,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1478,
       end: 1539,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1544,
    end: 1652,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1548,
       end: 1592,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1602,
       end: 1652,
       argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 468,
  end: 579,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 472,
     end: 517,
     left: 
      Node {
        type: 'CallExpression',
        start: 472,
        end: 508,
        callee: [Node],
        arguments: [Array] },
     operator: '!==',
     right: Node { type: 'Literal', start: 513, end: 517, value: true, raw: 'true' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 527,
     end: 579,
     argument: 
      Node {
        type: 'Literal',
        start: 533,
        end: 578,
        value: 'Failed canSimplifyToFloat(Math.PI, Math.PI)',
        raw: '"Failed canSimplifyToFloat(Math.PI, Math.PI)"' } },
  alternate: null }
IfStatement
468
579
Node {
  type: 'BinaryExpression',
  start: 472,
  end: 517,
  left: 
   Node {
     type: 'CallExpression',
     start: 472,
     end: 508,
     callee: 
      Node {
        type: 'Identifier',
        start: 472,
        end: 490,
        name: 'canSimplifyToFloat' },
     arguments: [ [Node], [Node] ] },
  operator: '!==',
  right: Node { type: 'Literal', start: 513, end: 517, value: true, raw: 'true' } }
BinaryExpression
472
517
Node {
  type: 'CallExpression',
  start: 472,
  end: 508,
  callee: 
   Node {
     type: 'Identifier',
     start: 472,
     end: 490,
     name: 'canSimplifyToFloat' },
  arguments: 
   [ Node {
       type: 'MemberExpression',
       start: 491,
       end: 498,
       object: [Node],
       property: [Node],
       computed: false },
     Node {
       type: 'MemberExpression',
       start: 500,
       end: 507,
       object: [Node],
       property: [Node],
       computed: false } ] }
CallExpression
472
508
Node {
  type: 'Identifier',
  start: 472,
  end: 490,
  name: 'canSimplifyToFloat' }
Identifier
472
490
canSimplifyToFloat
[ Node {
    type: 'MemberExpression',
    start: 491,
    end: 498,
    object: Node { type: 'Identifier', start: 491, end: 495, name: 'Math' },
    property: Node { type: 'Identifier', start: 496, end: 498, name: 'PI' },
    computed: false },
  Node {
    type: 'MemberExpression',
    start: 500,
    end: 507,
    object: Node { type: 'Identifier', start: 500, end: 504, name: 'Math' },
    property: Node { type: 'Identifier', start: 505, end: 507, name: 'PI' },
    computed: false } ]
Node {
  type: 'MemberExpression',
  start: 491,
  end: 498,
  object: Node { type: 'Identifier', start: 491, end: 495, name: 'Math' },
  property: Node { type: 'Identifier', start: 496, end: 498, name: 'PI' },
  computed: false }
MemberExpression
491
498
Node { type: 'Identifier', start: 491, end: 495, name: 'Math' }
Identifier
491
495
Math
Node { type: 'Identifier', start: 496, end: 498, name: 'PI' }
Identifier
496
498
PI
false
Node {
  type: 'MemberExpression',
  start: 500,
  end: 507,
  object: Node { type: 'Identifier', start: 500, end: 504, name: 'Math' },
  property: Node { type: 'Identifier', start: 505, end: 507, name: 'PI' },
  computed: false }
MemberExpression
500
507
Node { type: 'Identifier', start: 500, end: 504, name: 'Math' }
Identifier
500
504
Math
Node { type: 'Identifier', start: 505, end: 507, name: 'PI' }
Identifier
505
507
PI
false
!==
Node { type: 'Literal', start: 513, end: 517, value: true, raw: 'true' }
Literal
513
517
true
true
Node {
  type: 'ThrowStatement',
  start: 527,
  end: 579,
  argument: 
   Node {
     type: 'Literal',
     start: 533,
     end: 578,
     value: 'Failed canSimplifyToFloat(Math.PI, Math.PI)',
     raw: '"Failed canSimplifyToFloat(Math.PI, Math.PI)"' } }
ThrowStatement
527
579
Node {
  type: 'Literal',
  start: 533,
  end: 578,
  value: 'Failed canSimplifyToFloat(Math.PI, Math.PI)',
  raw: '"Failed canSimplifyToFloat(Math.PI, Math.PI)"' }
Literal
533
578
Failed canSimplifyToFloat(Math.PI, Math.PI)
"Failed canSimplifyToFloat(Math.PI, Math.PI)"
null
[+] Exception: double-compare-to-float.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1004,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 23,
       end: 87,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 88,
       end: 112,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 114,
       end: 484,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 485,
       end: 514,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 516,
       end: 575,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 602,
       end: 714,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 715,
       end: 740,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 766,
       end: 871,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 897,
       end: 1003,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
1004
[ Node {
    type: 'FunctionDeclaration',
    start: 23,
    end: 87,
    id: Node { type: 'Identifier', start: 32, end: 45, name: 'isNaNOnDouble' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 53, end: 87, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 88,
    end: 112,
    expression: 
     Node {
       type: 'CallExpression',
       start: 88,
       end: 111,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 114,
    end: 484,
    id: 
     Node {
       type: 'Identifier',
       start: 123,
       end: 141,
       name: 'testIsNaNOnDoubles' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 144, end: 484, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 485,
    end: 514,
    expression: 
     Node {
       type: 'CallExpression',
       start: 485,
       end: 513,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 516,
    end: 575,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 521,
       end: 530,
       declarations: [Array],
       kind: 'let' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 532,
       end: 539,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 541,
       end: 544,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 546, end: 575, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 602,
    end: 714,
    id: 
     Node {
       type: 'Identifier',
       start: 611,
       end: 625,
       name: 'isNaNOnDouble2' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 633, end: 714, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 715,
    end: 740,
    expression: 
     Node {
       type: 'CallExpression',
       start: 715,
       end: 739,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 766,
    end: 871,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 771,
       end: 780,
       declarations: [Array],
       kind: 'let' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 782,
       end: 789,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 791,
       end: 794,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 796, end: 871, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 897,
    end: 1003,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 902,
       end: 911,
       declarations: [Array],
       kind: 'let' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 913,
       end: 920,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 922,
       end: 925,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 927, end: 1003, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 23,
  end: 87,
  id: Node { type: 'Identifier', start: 32, end: 45, name: 'isNaNOnDouble' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 46, end: 51, name: 'value' } ],
  body: Node { type: 'BlockStatement', start: 53, end: 87, body: [ [Node] ] } }
FunctionDeclaration
23
87
Node { type: 'Identifier', start: 32, end: 45, name: 'isNaNOnDouble' }
Identifier
32
45
isNaNOnDouble
false
false
false
[ Node { type: 'Identifier', start: 46, end: 51, name: 'value' } ]
Node { type: 'Identifier', start: 46, end: 51, name: 'value' }
Identifier
46
51
value
Node {
  type: 'BlockStatement',
  start: 53,
  end: 87,
  body: 
   [ Node { type: 'ReturnStatement', start: 59, end: 85, argument: [Node] } ] }
BlockStatement
53
87
[ Node {
    type: 'ReturnStatement',
    start: 59,
    end: 85,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 66,
       end: 84,
       left: [Node],
       operator: '!==',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 59,
  end: 85,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 66,
     end: 84,
     left: 
      Node {
        type: 'UnaryExpression',
        start: 67,
        end: 73,
        operator: '+',
        prefix: true,
        argument: [Node] },
     operator: '!==',
     right: Node { type: 'Identifier', start: 79, end: 84, name: 'value' } } }
ReturnStatement
59
85
Node {
  type: 'BinaryExpression',
  start: 66,
  end: 84,
  left: 
   Node {
     type: 'UnaryExpression',
     start: 67,
     end: 73,
     operator: '+',
     prefix: true,
     argument: Node { type: 'Identifier', start: 68, end: 73, name: 'value' } },
  operator: '!==',
  right: Node { type: 'Identifier', start: 79, end: 84, name: 'value' } }
BinaryExpression
66
84
Node {
  type: 'UnaryExpression',
  start: 67,
  end: 73,
  operator: '+',
  prefix: true,
  argument: Node { type: 'Identifier', start: 68, end: 73, name: 'value' } }
UnaryExpression
67
73
+
true
Node { type: 'Identifier', start: 68, end: 73, name: 'value' }
Identifier
68
73
value
!==
Node { type: 'Identifier', start: 79, end: 84, name: 'value' }
Identifier
79
84
value
Node {
  type: 'ExpressionStatement',
  start: 88,
  end: 112,
  expression: 
   Node {
     type: 'CallExpression',
     start: 88,
     end: 111,
     callee: Node { type: 'Identifier', start: 88, end: 96, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
88
112
Node {
  type: 'CallExpression',
  start: 88,
  end: 111,
  callee: Node { type: 'Identifier', start: 88, end: 96, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 97, end: 110, name: 'isNaNOnDouble' } ] }
CallExpression
88
111
Node { type: 'Identifier', start: 88, end: 96, name: 'noInline' }
Identifier
88
96
noInline
[ Node { type: 'Identifier', start: 97, end: 110, name: 'isNaNOnDouble' } ]
Node { type: 'Identifier', start: 97, end: 110, name: 'isNaNOnDouble' }
Identifier
97
110
isNaNOnDouble
Node {
  type: 'FunctionDeclaration',
  start: 114,
  end: 484,
  id: 
   Node {
     type: 'Identifier',
     start: 123,
     end: 141,
     name: 'testIsNaNOnDoubles' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: 
   Node {
     type: 'BlockStatement',
     start: 144,
     end: 484,
     body: [ [Node], [Node], [Node], [Node], [Node], [Node] ] } }
FunctionDeclaration
114
484
Node {
  type: 'Identifier',
  start: 123,
  end: 141,
  name: 'testIsNaNOnDoubles' }
Identifier
123
141
testIsNaNOnDoubles
false
false
false
[]
Node {
  type: 'BlockStatement',
  start: 144,
  end: 484,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 150,
       end: 180,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 185,
       end: 241,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'VariableDeclaration',
       start: 247,
       end: 278,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 283,
       end: 341,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'VariableDeclaration',
       start: 347,
       end: 399,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 404,
       end: 482,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
144
484
[ Node {
    type: 'VariableDeclaration',
    start: 150,
    end: 180,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 185,
    end: 241,
    test: Node { type: 'Identifier', start: 189, end: 194, name: 'value' },
    consequent: Node { type: 'ThrowStatement', start: 204, end: 241, argument: [Node] },
    alternate: null },
  Node {
    type: 'VariableDeclaration',
    start: 247,
    end: 278,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 283,
    end: 341,
    test: 
     Node {
       type: 'UnaryExpression',
       start: 287,
       end: 293,
       operator: '!',
       prefix: true,
       argument: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 303, end: 341, argument: [Node] },
    alternate: null },
  Node {
    type: 'VariableDeclaration',
    start: 347,
    end: 399,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 404,
    end: 482,
    test: Node { type: 'Identifier', start: 408, end: 413, name: 'value' },
    consequent: Node { type: 'ThrowStatement', start: 423, end: 482, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 150,
  end: 180,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 154,
       end: 179,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
150
180
[ Node {
    type: 'VariableDeclarator',
    start: 154,
    end: 179,
    id: Node { type: 'Identifier', start: 154, end: 159, name: 'value' },
    init: 
     Node {
       type: 'CallExpression',
       start: 162,
       end: 179,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 154,
  end: 179,
  id: Node { type: 'Identifier', start: 154, end: 159, name: 'value' },
  init: 
   Node {
     type: 'CallExpression',
     start: 162,
     end: 179,
     callee: 
      Node {
        type: 'Identifier',
        start: 162,
        end: 175,
        name: 'isNaNOnDouble' },
     arguments: [ [Node] ] } }
VariableDeclarator
154
179
Node { type: 'Identifier', start: 154, end: 159, name: 'value' }
Identifier
154
159
value
Node {
  type: 'CallExpression',
  start: 162,
  end: 179,
  callee: 
   Node {
     type: 'Identifier',
     start: 162,
     end: 175,
     name: 'isNaNOnDouble' },
  arguments: 
   [ Node {
       type: 'UnaryExpression',
       start: 176,
       end: 178,
       operator: '-',
       prefix: true,
       argument: [Node] } ] }
CallExpression
162
179
Node {
  type: 'Identifier',
  start: 162,
  end: 175,
  name: 'isNaNOnDouble' }
Identifier
162
175
isNaNOnDouble
[ Node {
    type: 'UnaryExpression',
    start: 176,
    end: 178,
    operator: '-',
    prefix: true,
    argument: Node { type: 'Literal', start: 177, end: 178, value: 0, raw: '0' } } ]
Node {
  type: 'UnaryExpression',
  start: 176,
  end: 178,
  operator: '-',
  prefix: true,
  argument: Node { type: 'Literal', start: 177, end: 178, value: 0, raw: '0' } }
UnaryExpression
176
178
-
true
Node { type: 'Literal', start: 177, end: 178, value: 0, raw: '0' }
Literal
177
178
0
0
var
Node {
  type: 'IfStatement',
  start: 185,
  end: 241,
  test: Node { type: 'Identifier', start: 189, end: 194, name: 'value' },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 204,
     end: 241,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 210,
        end: 240,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
185
241
Node { type: 'Identifier', start: 189, end: 194, name: 'value' }
Identifier
189
194
value
Node {
  type: 'ThrowStatement',
  start: 204,
  end: 241,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 210,
     end: 240,
     left: 
      Node {
        type: 'Literal',
        start: 210,
        end: 232,
        value: 'isNaNOnDouble(-0) = ',
        raw: '"isNaNOnDouble(-0) = "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 235, end: 240, name: 'value' } } }
ThrowStatement
204
241
Node {
  type: 'BinaryExpression',
  start: 210,
  end: 240,
  left: 
   Node {
     type: 'Literal',
     start: 210,
     end: 232,
     value: 'isNaNOnDouble(-0) = ',
     raw: '"isNaNOnDouble(-0) = "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 235, end: 240, name: 'value' } }
BinaryExpression
210
240
Node {
  type: 'Literal',
  start: 210,
  end: 232,
  value: 'isNaNOnDouble(-0) = ',
  raw: '"isNaNOnDouble(-0) = "' }
Literal
210
232
isNaNOnDouble(-0) = 
"isNaNOnDouble(-0) = "
+
Node { type: 'Identifier', start: 235, end: 240, name: 'value' }
Identifier
235
240
value
null
[+] Exception: double-rep-real-number-use-on-nan.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1231,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 33,
       end: 90,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 91,
       end: 122,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 124,
       end: 1230,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
1231
[ Node {
    type: 'FunctionDeclaration',
    start: 33,
    end: 90,
    id: 
     Node {
       type: 'Identifier',
       start: 42,
       end: 62,
       name: 'addNullBoolUndefined' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 69, end: 90, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 91,
    end: 122,
    expression: 
     Node {
       type: 'CallExpression',
       start: 91,
       end: 121,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 124,
    end: 1230,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 129,
       end: 138,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 140,
       end: 147,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 149,
       end: 152,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 154, end: 1230, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 33,
  end: 90,
  id: 
   Node {
     type: 'Identifier',
     start: 42,
     end: 62,
     name: 'addNullBoolUndefined' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 63, end: 64, name: 'a' },
     Node { type: 'Identifier', start: 66, end: 67, name: 'b' } ],
  body: Node { type: 'BlockStatement', start: 69, end: 90, body: [ [Node] ] } }
FunctionDeclaration
33
90
Node {
  type: 'Identifier',
  start: 42,
  end: 62,
  name: 'addNullBoolUndefined' }
Identifier
42
62
addNullBoolUndefined
false
false
false
[ Node { type: 'Identifier', start: 63, end: 64, name: 'a' },
  Node { type: 'Identifier', start: 66, end: 67, name: 'b' } ]
Node { type: 'Identifier', start: 63, end: 64, name: 'a' }
Identifier
63
64
a
Node { type: 'Identifier', start: 66, end: 67, name: 'b' }
Identifier
66
67
b
Node {
  type: 'BlockStatement',
  start: 69,
  end: 90,
  body: 
   [ Node { type: 'ReturnStatement', start: 75, end: 88, argument: [Node] } ] }
BlockStatement
69
90
[ Node {
    type: 'ReturnStatement',
    start: 75,
    end: 88,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 82,
       end: 87,
       left: [Node],
       operator: '+',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 75,
  end: 88,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 82,
     end: 87,
     left: Node { type: 'Identifier', start: 82, end: 83, name: 'a' },
     operator: '+',
     right: Node { type: 'Identifier', start: 86, end: 87, name: 'b' } } }
ReturnStatement
75
88
Node {
  type: 'BinaryExpression',
  start: 82,
  end: 87,
  left: Node { type: 'Identifier', start: 82, end: 83, name: 'a' },
  operator: '+',
  right: Node { type: 'Identifier', start: 86, end: 87, name: 'b' } }
BinaryExpression
82
87
Node { type: 'Identifier', start: 82, end: 83, name: 'a' }
Identifier
82
83
a
+
Node { type: 'Identifier', start: 86, end: 87, name: 'b' }
Identifier
86
87
b
Node {
  type: 'ExpressionStatement',
  start: 91,
  end: 122,
  expression: 
   Node {
     type: 'CallExpression',
     start: 91,
     end: 121,
     callee: Node { type: 'Identifier', start: 91, end: 99, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
91
122
Node {
  type: 'CallExpression',
  start: 91,
  end: 121,
  callee: Node { type: 'Identifier', start: 91, end: 99, name: 'noInline' },
  arguments: 
   [ Node {
       type: 'Identifier',
       start: 100,
       end: 120,
       name: 'addNullBoolUndefined' } ] }
CallExpression
91
121
Node { type: 'Identifier', start: 91, end: 99, name: 'noInline' }
Identifier
91
99
noInline
[ Node {
    type: 'Identifier',
    start: 100,
    end: 120,
    name: 'addNullBoolUndefined' } ]
Node {
  type: 'Identifier',
  start: 100,
  end: 120,
  name: 'addNullBoolUndefined' }
Identifier
100
120
addNullBoolUndefined
Node {
  type: 'ForStatement',
  start: 124,
  end: 1230,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 129,
     end: 138,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 140,
     end: 147,
     left: Node { type: 'Identifier', start: 140, end: 141, name: 'i' },
     operator: '<',
     right: Node { type: 'Literal', start: 144, end: 147, value: 10000, raw: '1e4' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 149,
     end: 152,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 151, end: 152, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 154,
     end: 1230,
     body: 
      [ [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node] ] } }
ForStatement
124
1230
Node {
  type: 'VariableDeclaration',
  start: 129,
  end: 138,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 133,
       end: 138,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
129
138
[ Node {
    type: 'VariableDeclarator',
    start: 133,
    end: 138,
    id: Node { type: 'Identifier', start: 133, end: 134, name: 'i' },
    init: Node { type: 'Literal', start: 137, end: 138, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 133,
  end: 138,
  id: Node { type: 'Identifier', start: 133, end: 134, name: 'i' },
  init: Node { type: 'Literal', start: 137, end: 138, value: 0, raw: '0' } }
VariableDeclarator
133
138
Node { type: 'Identifier', start: 133, end: 134, name: 'i' }
Identifier
133
134
i
Node { type: 'Literal', start: 137, end: 138, value: 0, raw: '0' }
Literal
137
138
0
0
var
Node {
  type: 'BinaryExpression',
  start: 140,
  end: 147,
  left: Node { type: 'Identifier', start: 140, end: 141, name: 'i' },
  operator: '<',
  right: Node { type: 'Literal', start: 144, end: 147, value: 10000, raw: '1e4' } }
BinaryExpression
140
147
Node { type: 'Identifier', start: 140, end: 141, name: 'i' }
Identifier
140
141
i
<
Node { type: 'Literal', start: 144, end: 147, value: 10000, raw: '1e4' }
Literal
144
147
10000
1e4
Node {
  type: 'UpdateExpression',
  start: 149,
  end: 152,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 151, end: 152, name: 'i' } }
UpdateExpression
149
152
++
true
Node { type: 'Identifier', start: 151, end: 152, name: 'i' }
Identifier
151
152
i
Node {
  type: 'BlockStatement',
  start: 154,
  end: 1230,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 160,
       end: 204,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 209,
       end: 328,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'VariableDeclaration',
       start: 334,
       end: 384,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 389,
       end: 516,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'VariableDeclaration',
       start: 522,
       end: 567,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 572,
       end: 690,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'VariableDeclaration',
       start: 696,
       end: 747,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 752,
       end: 880,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'VariableDeclaration',
       start: 886,
       end: 932,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 937,
       end: 1056,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'VariableDeclaration',
       start: 1062,
       end: 1105,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 1110,
       end: 1227,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
154
1230
[ Node {
    type: 'VariableDeclaration',
    start: 160,
    end: 204,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 209,
    end: 328,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 213,
       end: 226,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 236, end: 328, argument: [Node] },
    alternate: null },
  Node {
    type: 'VariableDeclaration',
    start: 334,
    end: 384,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 389,
    end: 516,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 393,
       end: 408,
       left: [Node],
       operator: '===',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 418, end: 516, argument: [Node] },
    alternate: null },
  Node {
    type: 'VariableDeclaration',
    start: 522,
    end: 567,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 572,
    end: 690,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 576,
       end: 587,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 597, end: 690, argument: [Node] },
    alternate: null },
  Node {
    type: 'VariableDeclaration',
    start: 696,
    end: 747,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 752,
    end: 880,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 756,
       end: 771,
       left: [Node],
       operator: '===',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 781, end: 880, argument: [Node] },
    alternate: null },
  Node {
    type: 'VariableDeclaration',
    start: 886,
    end: 932,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 937,
    end: 1056,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 941,
       end: 952,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 962,
       end: 1056,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'VariableDeclaration',
    start: 1062,
    end: 1105,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 1110,
    end: 1227,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1114,
       end: 1126,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1136,
       end: 1227,
       argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 160,
  end: 204,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 164,
       end: 203,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
160
204
[ Node {
    type: 'VariableDeclarator',
    start: 164,
    end: 203,
    id: Node { type: 'Identifier', start: 164, end: 169, name: 'value' },
    init: 
     Node {
       type: 'CallExpression',
       start: 172,
       end: 203,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 164,
  end: 203,
  id: Node { type: 'Identifier', start: 164, end: 169, name: 'value' },
  init: 
   Node {
     type: 'CallExpression',
     start: 172,
     end: 203,
     callee: 
      Node {
        type: 'Identifier',
        start: 172,
        end: 192,
        name: 'addNullBoolUndefined' },
     arguments: [ [Node], [Node] ] } }
VariableDeclarator
164
203
Node { type: 'Identifier', start: 164, end: 169, name: 'value' }
Identifier
164
169
value
Node {
  type: 'CallExpression',
  start: 172,
  end: 203,
  callee: 
   Node {
     type: 'Identifier',
     start: 172,
     end: 192,
     name: 'addNullBoolUndefined' },
  arguments: 
   [ Node { type: 'Literal', start: 193, end: 196, value: 0.5, raw: '0.5' },
     Node { type: 'Literal', start: 198, end: 202, value: null, raw: 'null' } ] }
CallExpression
172
203
Node {
  type: 'Identifier',
  start: 172,
  end: 192,
  name: 'addNullBoolUndefined' }
Identifier
172
192
addNullBoolUndefined
[ Node { type: 'Literal', start: 193, end: 196, value: 0.5, raw: '0.5' },
  Node { type: 'Literal', start: 198, end: 202, value: null, raw: 'null' } ]
Node { type: 'Literal', start: 193, end: 196, value: 0.5, raw: '0.5' }
Literal
193
196
0.5
0.5
Node { type: 'Literal', start: 198, end: 202, value: null, raw: 'null' }
Literal
198
202
null
[+] Exception: double-rep-with-non-cell.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 3641,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 38,
       end: 95,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 96,
       end: 127,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 129,
       end: 1013,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 1048,
       end: 1104,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1105,
       end: 1135,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 1137,
       end: 1839,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 1841,
       end: 2073,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 2074,
       end: 2099,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 2140,
       end: 2197,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 2198,
       end: 2229,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 2231,
       end: 2781,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 2783,
       end: 3073,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 3074,
       end: 3099,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 3121,
       end: 3173,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 3174,
       end: 3200,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 3202,
       end: 3398,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 3400,
       end: 3615,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 3616,
       end: 3641,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
3641
[ Node {
    type: 'FunctionDeclaration',
    start: 38,
    end: 95,
    id: 
     Node {
       type: 'Identifier',
       start: 47,
       end: 67,
       name: 'addArgsNumberAndNull' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 74, end: 95, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 96,
    end: 127,
    expression: 
     Node {
       type: 'CallExpression',
       start: 96,
       end: 126,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 129,
    end: 1013,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 134,
       end: 143,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 145,
       end: 152,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 154,
       end: 157,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 159, end: 1013, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 1048,
    end: 1104,
    id: 
     Node {
       type: 'Identifier',
       start: 1057,
       end: 1076,
       name: 'addArgsInt32AndNull' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 1083, end: 1104, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1105,
    end: 1135,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1105,
       end: 1134,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 1137,
    end: 1839,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 1142,
       end: 1151,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1153,
       end: 1160,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 1162,
       end: 1165,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 1167, end: 1839, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 1841,
    end: 2073,
    id: 
     Node {
       type: 'Identifier',
       start: 1850,
       end: 1872,
       name: 'testFallbackWithDouble' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 1875, end: 2073, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 2074,
    end: 2099,
    expression: 
     Node {
       type: 'CallExpression',
       start: 2074,
       end: 2098,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'FunctionDeclaration',
    start: 2140,
    end: 2197,
    id: 
     Node {
       type: 'Identifier',
       start: 2149,
       end: 2169,
       name: 'addArgsDoubleAndNull' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 2176, end: 2197, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 2198,
    end: 2229,
    expression: 
     Node {
       type: 'CallExpression',
       start: 2198,
       end: 2228,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 2231,
    end: 2781,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 2236,
       end: 2245,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 2247,
       end: 2254,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 2256,
       end: 2259,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 2261, end: 2781, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 2783,
    end: 3073,
    id: 
     Node {
       type: 'Identifier',
       start: 2792,
       end: 2814,
       name: 'testFallbackWithObject' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 2817, end: 3073, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 3074,
    end: 3099,
    expression: 
     Node {
       type: 'CallExpression',
       start: 3074,
       end: 3098,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'FunctionDeclaration',
    start: 3121,
    end: 3173,
    id: 
     Node {
       type: 'Identifier',
       start: 3130,
       end: 3145,
       name: 'addArgsOnlyNull' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 3152, end: 3173, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 3174,
    end: 3200,
    expression: 
     Node {
       type: 'CallExpression',
       start: 3174,
       end: 3199,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 3202,
    end: 3398,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 3207,
       end: 3216,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 3218,
       end: 3225,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 3227,
       end: 3230,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 3232, end: 3398, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 3400,
    end: 3615,
    id: 
     Node {
       type: 'Identifier',
       start: 3409,
       end: 3431,
       name: 'testFallbackWithString' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 3434, end: 3615, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 3616,
    end: 3641,
    expression: 
     Node {
       type: 'CallExpression',
       start: 3616,
       end: 3640,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 38,
  end: 95,
  id: 
   Node {
     type: 'Identifier',
     start: 47,
     end: 67,
     name: 'addArgsNumberAndNull' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 68, end: 69, name: 'a' },
     Node { type: 'Identifier', start: 71, end: 72, name: 'b' } ],
  body: Node { type: 'BlockStatement', start: 74, end: 95, body: [ [Node] ] } }
FunctionDeclaration
38
95
Node {
  type: 'Identifier',
  start: 47,
  end: 67,
  name: 'addArgsNumberAndNull' }
Identifier
47
67
addArgsNumberAndNull
false
false
false
[ Node { type: 'Identifier', start: 68, end: 69, name: 'a' },
  Node { type: 'Identifier', start: 71, end: 72, name: 'b' } ]
Node { type: 'Identifier', start: 68, end: 69, name: 'a' }
Identifier
68
69
a
Node { type: 'Identifier', start: 71, end: 72, name: 'b' }
Identifier
71
72
b
Node {
  type: 'BlockStatement',
  start: 74,
  end: 95,
  body: 
   [ Node { type: 'ReturnStatement', start: 80, end: 93, argument: [Node] } ] }
BlockStatement
74
95
[ Node {
    type: 'ReturnStatement',
    start: 80,
    end: 93,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 87,
       end: 92,
       left: [Node],
       operator: '+',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 80,
  end: 93,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 87,
     end: 92,
     left: Node { type: 'Identifier', start: 87, end: 88, name: 'a' },
     operator: '+',
     right: Node { type: 'Identifier', start: 91, end: 92, name: 'b' } } }
ReturnStatement
80
93
Node {
  type: 'BinaryExpression',
  start: 87,
  end: 92,
  left: Node { type: 'Identifier', start: 87, end: 88, name: 'a' },
  operator: '+',
  right: Node { type: 'Identifier', start: 91, end: 92, name: 'b' } }
BinaryExpression
87
92
Node { type: 'Identifier', start: 87, end: 88, name: 'a' }
Identifier
87
88
a
+
Node { type: 'Identifier', start: 91, end: 92, name: 'b' }
Identifier
91
92
b
Node {
  type: 'ExpressionStatement',
  start: 96,
  end: 127,
  expression: 
   Node {
     type: 'CallExpression',
     start: 96,
     end: 126,
     callee: Node { type: 'Identifier', start: 96, end: 104, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
96
127
Node {
  type: 'CallExpression',
  start: 96,
  end: 126,
  callee: Node { type: 'Identifier', start: 96, end: 104, name: 'noInline' },
  arguments: 
   [ Node {
       type: 'Identifier',
       start: 105,
       end: 125,
       name: 'addArgsNumberAndNull' } ] }
CallExpression
96
126
Node { type: 'Identifier', start: 96, end: 104, name: 'noInline' }
Identifier
96
104
noInline
[ Node {
    type: 'Identifier',
    start: 105,
    end: 125,
    name: 'addArgsNumberAndNull' } ]
Node {
  type: 'Identifier',
  start: 105,
  end: 125,
  name: 'addArgsNumberAndNull' }
Identifier
105
125
addArgsNumberAndNull
Node {
  type: 'ForStatement',
  start: 129,
  end: 1013,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 134,
     end: 143,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 145,
     end: 152,
     left: Node { type: 'Identifier', start: 145, end: 146, name: 'i' },
     operator: '<',
     right: Node { type: 'Literal', start: 149, end: 152, value: 10000, raw: '1e4' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 154,
     end: 157,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 156, end: 157, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 159,
     end: 1013,
     body: 
      [ [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node] ] } }
ForStatement
129
1013
Node {
  type: 'VariableDeclaration',
  start: 134,
  end: 143,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 138,
       end: 143,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
134
143
[ Node {
    type: 'VariableDeclarator',
    start: 138,
    end: 143,
    id: Node { type: 'Identifier', start: 138, end: 139, name: 'i' },
    init: Node { type: 'Literal', start: 142, end: 143, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 138,
  end: 143,
  id: Node { type: 'Identifier', start: 138, end: 139, name: 'i' },
  init: Node { type: 'Literal', start: 142, end: 143, value: 0, raw: '0' } }
VariableDeclarator
138
143
Node { type: 'Identifier', start: 138, end: 139, name: 'i' }
Identifier
138
139
i
Node { type: 'Literal', start: 142, end: 143, value: 0, raw: '0' }
Literal
142
143
0
0
var
Node {
  type: 'BinaryExpression',
  start: 145,
  end: 152,
  left: Node { type: 'Identifier', start: 145, end: 146, name: 'i' },
  operator: '<',
  right: Node { type: 'Literal', start: 149, end: 152, value: 10000, raw: '1e4' } }
BinaryExpression
145
152
Node { type: 'Identifier', start: 145, end: 146, name: 'i' }
Identifier
145
146
i
<
Node { type: 'Literal', start: 149, end: 152, value: 10000, raw: '1e4' }
Literal
149
152
10000
1e4
Node {
  type: 'UpdateExpression',
  start: 154,
  end: 157,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 156, end: 157, name: 'i' } }
UpdateExpression
154
157
++
true
Node { type: 'Identifier', start: 156, end: 157, name: 'i' }
Identifier
156
157
i
Node {
  type: 'BlockStatement',
  start: 159,
  end: 1013,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 165,
       end: 204,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 209,
       end: 327,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'VariableDeclaration',
       start: 333,
       end: 374,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 379,
       end: 501,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'VariableDeclaration',
       start: 507,
       end: 549,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 554,
       end: 669,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'VariableDeclaration',
       start: 675,
       end: 717,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 722,
       end: 837,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'VariableDeclaration',
       start: 843,
       end: 888,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 893,
       end: 1011,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
159
1013
[ Node {
    type: 'VariableDeclaration',
    start: 165,
    end: 204,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 209,
    end: 327,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 213,
       end: 230,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 240, end: 327, argument: [Node] },
    alternate: null },
  Node {
    type: 'VariableDeclaration',
    start: 333,
    end: 374,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 379,
    end: 501,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 383,
       end: 402,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 412, end: 501, argument: [Node] },
    alternate: null },
  Node {
    type: 'VariableDeclaration',
    start: 507,
    end: 549,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 554,
    end: 669,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 558,
       end: 569,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 579, end: 669, argument: [Node] },
    alternate: null },
  Node {
    type: 'VariableDeclaration',
    start: 675,
    end: 717,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 722,
    end: 837,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 726,
       end: 737,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 747, end: 837, argument: [Node] },
    alternate: null },
  Node {
    type: 'VariableDeclaration',
    start: 843,
    end: 888,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 893,
    end: 1011,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 897,
       end: 908,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 918,
       end: 1011,
       argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 165,
  end: 204,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 169,
       end: 203,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
165
204
[ Node {
    type: 'VariableDeclarator',
    start: 169,
    end: 203,
    id: Node { type: 'Identifier', start: 169, end: 174, name: 'value' },
    init: 
     Node {
       type: 'CallExpression',
       start: 177,
       end: 203,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 169,
  end: 203,
  id: Node { type: 'Identifier', start: 169, end: 174, name: 'value' },
  init: 
   Node {
     type: 'CallExpression',
     start: 177,
     end: 203,
     callee: 
      Node {
        type: 'Identifier',
        start: 177,
        end: 197,
        name: 'addArgsNumberAndNull' },
     arguments: [ [Node], [Node] ] } }
VariableDeclarator
169
203
Node { type: 'Identifier', start: 169, end: 174, name: 'value' }
Identifier
169
174
value
Node {
  type: 'CallExpression',
  start: 177,
  end: 203,
  callee: 
   Node {
     type: 'Identifier',
     start: 177,
     end: 197,
     name: 'addArgsNumberAndNull' },
  arguments: 
   [ Node { type: 'Identifier', start: 198, end: 199, name: 'i' },
     Node { type: 'Literal', start: 201, end: 202, value: 1, raw: '1' } ] }
CallExpression
177
203
Node {
  type: 'Identifier',
  start: 177,
  end: 197,
  name: 'addArgsNumberAndNull' }
Identifier
177
197
addArgsNumberAndNull
[ Node { type: 'Identifier', start: 198, end: 199, name: 'i' },
  Node { type: 'Literal', start: 201, end: 202, value: 1, raw: '1' } ]
Node { type: 'Identifier', start: 198, end: 199, name: 'i' }
Identifier
198
199
i
Node { type: 'Literal', start: 201, end: 202, value: 1, raw: '1' }
Literal
201
202
1
1
var
Node {
  type: 'IfStatement',
  start: 209,
  end: 327,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 213,
     end: 230,
     left: Node { type: 'Identifier', start: 213, end: 218, name: 'value' },
     operator: '!==',
     right: 
      Node {
        type: 'BinaryExpression',
        start: 224,
        end: 229,
        left: [Node],
        operator: '+',
        right: [Node] } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 240,
     end: 327,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 246,
        end: 326,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
209
327
Node {
  type: 'BinaryExpression',
  start: 213,
  end: 230,
  left: Node { type: 'Identifier', start: 213, end: 218, name: 'value' },
  operator: '!==',
  right: 
   Node {
     type: 'BinaryExpression',
     start: 224,
     end: 229,
     left: Node { type: 'Identifier', start: 224, end: 225, name: 'i' },
     operator: '+',
     right: Node { type: 'Literal', start: 228, end: 229, value: 1, raw: '1' } } }
BinaryExpression
213
230
Node { type: 'Identifier', start: 213, end: 218, name: 'value' }
Identifier
213
218
value
!==
Node {
  type: 'BinaryExpression',
  start: 224,
  end: 229,
  left: Node { type: 'Identifier', start: 224, end: 225, name: 'i' },
  operator: '+',
  right: Node { type: 'Literal', start: 228, end: 229, value: 1, raw: '1' } }
BinaryExpression
224
229
Node { type: 'Identifier', start: 224, end: 225, name: 'i' }
Identifier
224
225
i
+
Node { type: 'Literal', start: 228, end: 229, value: 1, raw: '1' }
Literal
228
229
1
1
Node {
  type: 'ThrowStatement',
  start: 240,
  end: 327,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 246,
     end: 326,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 246,
        end: 318,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Identifier', start: 321, end: 326, name: 'value' } } }
ThrowStatement
240
327
Node {
  type: 'BinaryExpression',
  start: 246,
  end: 326,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 246,
     end: 318,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 246,
        end: 295,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: 
      Node {
        type: 'Literal',
        start: 298,
        end: 318,
        value: ' returned value = ',
        raw: '" returned value = "' } },
  operator: '+',
  right: Node { type: 'Identifier', start: 321, end: 326, name: 'value' } }
BinaryExpression
246
326
Node {
  type: 'BinaryExpression',
  start: 246,
  end: 318,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 246,
     end: 295,
     left: 
      Node {
        type: 'Literal',
        start: 246,
        end: 291,
        value: 'addArgsNumberAndNull(i, 1) failed with i = ',
        raw: '"addArgsNumberAndNull(i, 1) failed with i = "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 294, end: 295, name: 'i' } },
  operator: '+',
  right: 
   Node {
     type: 'Literal',
     start: 298,
     end: 318,
     value: ' returned value = ',
     raw: '" returned value = "' } }
BinaryExpression
246
318
Node {
  type: 'BinaryExpression',
  start: 246,
  end: 295,
  left: 
   Node {
     type: 'Literal',
     start: 246,
     end: 291,
     value: 'addArgsNumberAndNull(i, 1) failed with i = ',
     raw: '"addArgsNumberAndNull(i, 1) failed with i = "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 294, end: 295, name: 'i' } }
BinaryExpression
246
295
Node {
  type: 'Literal',
  start: 246,
  end: 291,
  value: 'addArgsNumberAndNull(i, 1) failed with i = ',
  raw: '"addArgsNumberAndNull(i, 1) failed with i = "' }
Literal
246
291
addArgsNumberAndNull(i, 1) failed with i = 
"addArgsNumberAndNull(i, 1) failed with i = "
+
Node { type: 'Identifier', start: 294, end: 295, name: 'i' }
Identifier
294
295
i
+
Node {
  type: 'Literal',
  start: 298,
  end: 318,
  value: ' returned value = ',
  raw: '" returned value = "' }
Literal
298
318
 returned value = 
" returned value = "
+
Node { type: 'Identifier', start: 321, end: 326, name: 'value' }
Identifier
321
326
value
null
[+] Exception: double-rep-with-null.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 5035,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 43,
       end: 105,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 106,
       end: 142,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 144,
       end: 1468,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 1508,
       end: 1569,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1570,
       end: 1605,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 1607,
       end: 2735,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 2737,
       end: 2979,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 2980,
       end: 3005,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 3051,
       end: 3113,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 3114,
       end: 3150,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 3152,
       end: 3929,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 3931,
       end: 4231,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 4232,
       end: 4257,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 4303,
       end: 4360,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 4361,
       end: 4392,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 4394,
       end: 4782,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 4784,
       end: 5009,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 5010,
       end: 5035,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
5035
[ Node {
    type: 'FunctionDeclaration',
    start: 43,
    end: 105,
    id: 
     Node {
       type: 'Identifier',
       start: 52,
       end: 77,
       name: 'addArgsNumberAndUndefined' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 84, end: 105, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 106,
    end: 142,
    expression: 
     Node {
       type: 'CallExpression',
       start: 106,
       end: 141,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 144,
    end: 1468,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 149,
       end: 158,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 160,
       end: 167,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 169,
       end: 172,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 174, end: 1468, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 1508,
    end: 1569,
    id: 
     Node {
       type: 'Identifier',
       start: 1517,
       end: 1541,
       name: 'addArgsInt32AndUndefined' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 1548, end: 1569, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1570,
    end: 1605,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1570,
       end: 1604,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 1607,
    end: 2735,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 1612,
       end: 1621,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1623,
       end: 1630,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 1632,
       end: 1635,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 1637, end: 2735, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 2737,
    end: 2979,
    id: 
     Node {
       type: 'Identifier',
       start: 2746,
       end: 2768,
       name: 'testFallbackWithDouble' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 2771, end: 2979, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 2980,
    end: 3005,
    expression: 
     Node {
       type: 'CallExpression',
       start: 2980,
       end: 3004,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'FunctionDeclaration',
    start: 3051,
    end: 3113,
    id: 
     Node {
       type: 'Identifier',
       start: 3060,
       end: 3085,
       name: 'addArgsDoubleAndUndefined' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 3092, end: 3113, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 3114,
    end: 3150,
    expression: 
     Node {
       type: 'CallExpression',
       start: 3114,
       end: 3149,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 3152,
    end: 3929,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 3157,
       end: 3166,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 3168,
       end: 3175,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 3177,
       end: 3180,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 3182, end: 3929, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 3931,
    end: 4231,
    id: 
     Node {
       type: 'Identifier',
       start: 3940,
       end: 3962,
       name: 'testFallbackWithObject' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 3965, end: 4231, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 4232,
    end: 4257,
    expression: 
     Node {
       type: 'CallExpression',
       start: 4232,
       end: 4256,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'FunctionDeclaration',
    start: 4303,
    end: 4360,
    id: 
     Node {
       type: 'Identifier',
       start: 4312,
       end: 4332,
       name: 'addArgsOnlyUndefined' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 4339, end: 4360, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 4361,
    end: 4392,
    expression: 
     Node {
       type: 'CallExpression',
       start: 4361,
       end: 4391,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 4394,
    end: 4782,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 4399,
       end: 4408,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 4410,
       end: 4417,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 4419,
       end: 4422,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 4424, end: 4782, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 4784,
    end: 5009,
    id: 
     Node {
       type: 'Identifier',
       start: 4793,
       end: 4815,
       name: 'testFallbackWithString' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 4818, end: 5009, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 5010,
    end: 5035,
    expression: 
     Node {
       type: 'CallExpression',
       start: 5010,
       end: 5034,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 43,
  end: 105,
  id: 
   Node {
     type: 'Identifier',
     start: 52,
     end: 77,
     name: 'addArgsNumberAndUndefined' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 78, end: 79, name: 'a' },
     Node { type: 'Identifier', start: 81, end: 82, name: 'b' } ],
  body: Node { type: 'BlockStatement', start: 84, end: 105, body: [ [Node] ] } }
FunctionDeclaration
43
105
Node {
  type: 'Identifier',
  start: 52,
  end: 77,
  name: 'addArgsNumberAndUndefined' }
Identifier
52
77
addArgsNumberAndUndefined
false
false
false
[ Node { type: 'Identifier', start: 78, end: 79, name: 'a' },
  Node { type: 'Identifier', start: 81, end: 82, name: 'b' } ]
Node { type: 'Identifier', start: 78, end: 79, name: 'a' }
Identifier
78
79
a
Node { type: 'Identifier', start: 81, end: 82, name: 'b' }
Identifier
81
82
b
Node {
  type: 'BlockStatement',
  start: 84,
  end: 105,
  body: 
   [ Node { type: 'ReturnStatement', start: 90, end: 103, argument: [Node] } ] }
BlockStatement
84
105
[ Node {
    type: 'ReturnStatement',
    start: 90,
    end: 103,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 97,
       end: 102,
       left: [Node],
       operator: '+',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 90,
  end: 103,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 97,
     end: 102,
     left: Node { type: 'Identifier', start: 97, end: 98, name: 'a' },
     operator: '+',
     right: Node { type: 'Identifier', start: 101, end: 102, name: 'b' } } }
ReturnStatement
90
103
Node {
  type: 'BinaryExpression',
  start: 97,
  end: 102,
  left: Node { type: 'Identifier', start: 97, end: 98, name: 'a' },
  operator: '+',
  right: Node { type: 'Identifier', start: 101, end: 102, name: 'b' } }
BinaryExpression
97
102
Node { type: 'Identifier', start: 97, end: 98, name: 'a' }
Identifier
97
98
a
+
Node { type: 'Identifier', start: 101, end: 102, name: 'b' }
Identifier
101
102
b
Node {
  type: 'ExpressionStatement',
  start: 106,
  end: 142,
  expression: 
   Node {
     type: 'CallExpression',
     start: 106,
     end: 141,
     callee: Node { type: 'Identifier', start: 106, end: 114, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
106
142
Node {
  type: 'CallExpression',
  start: 106,
  end: 141,
  callee: Node { type: 'Identifier', start: 106, end: 114, name: 'noInline' },
  arguments: 
   [ Node {
       type: 'Identifier',
       start: 115,
       end: 140,
       name: 'addArgsNumberAndUndefined' } ] }
CallExpression
106
141
Node { type: 'Identifier', start: 106, end: 114, name: 'noInline' }
Identifier
106
114
noInline
[ Node {
    type: 'Identifier',
    start: 115,
    end: 140,
    name: 'addArgsNumberAndUndefined' } ]
Node {
  type: 'Identifier',
  start: 115,
  end: 140,
  name: 'addArgsNumberAndUndefined' }
Identifier
115
140
addArgsNumberAndUndefined
Node {
  type: 'ForStatement',
  start: 144,
  end: 1468,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 149,
     end: 158,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 160,
     end: 167,
     left: Node { type: 'Identifier', start: 160, end: 161, name: 'i' },
     operator: '<',
     right: Node { type: 'Literal', start: 164, end: 167, value: 10000, raw: '1e4' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 169,
     end: 172,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 171, end: 172, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 174,
     end: 1468,
     body: 
      [ [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node] ] } }
ForStatement
144
1468
Node {
  type: 'VariableDeclaration',
  start: 149,
  end: 158,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 153,
       end: 158,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
149
158
[ Node {
    type: 'VariableDeclarator',
    start: 153,
    end: 158,
    id: Node { type: 'Identifier', start: 153, end: 154, name: 'i' },
    init: Node { type: 'Literal', start: 157, end: 158, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 153,
  end: 158,
  id: Node { type: 'Identifier', start: 153, end: 154, name: 'i' },
  init: Node { type: 'Literal', start: 157, end: 158, value: 0, raw: '0' } }
VariableDeclarator
153
158
Node { type: 'Identifier', start: 153, end: 154, name: 'i' }
Identifier
153
154
i
Node { type: 'Literal', start: 157, end: 158, value: 0, raw: '0' }
Literal
157
158
0
0
var
Node {
  type: 'BinaryExpression',
  start: 160,
  end: 167,
  left: Node { type: 'Identifier', start: 160, end: 161, name: 'i' },
  operator: '<',
  right: Node { type: 'Literal', start: 164, end: 167, value: 10000, raw: '1e4' } }
BinaryExpression
160
167
Node { type: 'Identifier', start: 160, end: 161, name: 'i' }
Identifier
160
161
i
<
Node { type: 'Literal', start: 164, end: 167, value: 10000, raw: '1e4' }
Literal
164
167
10000
1e4
Node {
  type: 'UpdateExpression',
  start: 169,
  end: 172,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 171, end: 172, name: 'i' } }
UpdateExpression
169
172
++
true
Node { type: 'Identifier', start: 171, end: 172, name: 'i' }
Identifier
171
172
i
Node {
  type: 'BlockStatement',
  start: 174,
  end: 1468,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 180,
       end: 224,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 229,
       end: 352,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'VariableDeclaration',
       start: 358,
       end: 404,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 409,
       end: 536,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'VariableDeclaration',
       start: 542,
       end: 594,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 599,
       end: 728,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'VariableDeclaration',
       start: 734,
       end: 786,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 791,
       end: 920,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'VariableDeclaration',
       start: 926,
       end: 967,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 972,
       end: 1090,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'VariableDeclaration',
       start: 1096,
       end: 1156,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 1161,
       end: 1298,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'VariableDeclaration',
       start: 1304,
       end: 1344,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 1349,
       end: 1466,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
174
1468
[ Node {
    type: 'VariableDeclaration',
    start: 180,
    end: 224,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 229,
    end: 352,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 233,
       end: 250,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 260, end: 352, argument: [Node] },
    alternate: null },
  Node {
    type: 'VariableDeclaration',
    start: 358,
    end: 404,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 409,
    end: 536,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 413,
       end: 432,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 442, end: 536, argument: [Node] },
    alternate: null },
  Node {
    type: 'VariableDeclaration',
    start: 542,
    end: 594,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 599,
    end: 728,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 603,
       end: 618,
       left: [Node],
       operator: '===',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 628, end: 728, argument: [Node] },
    alternate: null },
  Node {
    type: 'VariableDeclaration',
    start: 734,
    end: 786,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 791,
    end: 920,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 795,
       end: 810,
       left: [Node],
       operator: '===',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 820, end: 920, argument: [Node] },
    alternate: null },
  Node {
    type: 'VariableDeclaration',
    start: 926,
    end: 967,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 972,
    end: 1090,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 976,
       end: 991,
       left: [Node],
       operator: '===',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1001,
       end: 1090,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'VariableDeclaration',
    start: 1096,
    end: 1156,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 1161,
    end: 1298,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1165,
       end: 1180,
       left: [Node],
       operator: '===',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1190,
       end: 1298,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'VariableDeclaration',
    start: 1304,
    end: 1344,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 1349,
    end: 1466,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1353,
       end: 1368,
       left: [Node],
       operator: '===',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1378,
       end: 1466,
       argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 180,
  end: 224,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 184,
       end: 223,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
180
224
[ Node {
    type: 'VariableDeclarator',
    start: 184,
    end: 223,
    id: Node { type: 'Identifier', start: 184, end: 189, name: 'value' },
    init: 
     Node {
       type: 'CallExpression',
       start: 192,
       end: 223,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 184,
  end: 223,
  id: Node { type: 'Identifier', start: 184, end: 189, name: 'value' },
  init: 
   Node {
     type: 'CallExpression',
     start: 192,
     end: 223,
     callee: 
      Node {
        type: 'Identifier',
        start: 192,
        end: 217,
        name: 'addArgsNumberAndUndefined' },
     arguments: [ [Node], [Node] ] } }
VariableDeclarator
184
223
Node { type: 'Identifier', start: 184, end: 189, name: 'value' }
Identifier
184
189
value
Node {
  type: 'CallExpression',
  start: 192,
  end: 223,
  callee: 
   Node {
     type: 'Identifier',
     start: 192,
     end: 217,
     name: 'addArgsNumberAndUndefined' },
  arguments: 
   [ Node { type: 'Identifier', start: 218, end: 219, name: 'i' },
     Node { type: 'Literal', start: 221, end: 222, value: 1, raw: '1' } ] }
CallExpression
192
223
Node {
  type: 'Identifier',
  start: 192,
  end: 217,
  name: 'addArgsNumberAndUndefined' }
Identifier
192
217
addArgsNumberAndUndefined
[ Node { type: 'Identifier', start: 218, end: 219, name: 'i' },
  Node { type: 'Literal', start: 221, end: 222, value: 1, raw: '1' } ]
Node { type: 'Identifier', start: 218, end: 219, name: 'i' }
Identifier
218
219
i
Node { type: 'Literal', start: 221, end: 222, value: 1, raw: '1' }
Literal
221
222
1
1
var
Node {
  type: 'IfStatement',
  start: 229,
  end: 352,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 233,
     end: 250,
     left: Node { type: 'Identifier', start: 233, end: 238, name: 'value' },
     operator: '!==',
     right: 
      Node {
        type: 'BinaryExpression',
        start: 244,
        end: 249,
        left: [Node],
        operator: '+',
        right: [Node] } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 260,
     end: 352,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 266,
        end: 351,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
229
352
Node {
  type: 'BinaryExpression',
  start: 233,
  end: 250,
  left: Node { type: 'Identifier', start: 233, end: 238, name: 'value' },
  operator: '!==',
  right: 
   Node {
     type: 'BinaryExpression',
     start: 244,
     end: 249,
     left: Node { type: 'Identifier', start: 244, end: 245, name: 'i' },
     operator: '+',
     right: Node { type: 'Literal', start: 248, end: 249, value: 1, raw: '1' } } }
BinaryExpression
233
250
Node { type: 'Identifier', start: 233, end: 238, name: 'value' }
Identifier
233
238
value
!==
Node {
  type: 'BinaryExpression',
  start: 244,
  end: 249,
  left: Node { type: 'Identifier', start: 244, end: 245, name: 'i' },
  operator: '+',
  right: Node { type: 'Literal', start: 248, end: 249, value: 1, raw: '1' } }
BinaryExpression
244
249
Node { type: 'Identifier', start: 244, end: 245, name: 'i' }
Identifier
244
245
i
+
Node { type: 'Literal', start: 248, end: 249, value: 1, raw: '1' }
Literal
248
249
1
1
Node {
  type: 'ThrowStatement',
  start: 260,
  end: 352,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 266,
     end: 351,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 266,
        end: 343,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Identifier', start: 346, end: 351, name: 'value' } } }
ThrowStatement
260
352
Node {
  type: 'BinaryExpression',
  start: 266,
  end: 351,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 266,
     end: 343,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 266,
        end: 320,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: 
      Node {
        type: 'Literal',
        start: 323,
        end: 343,
        value: ' returned value = ',
        raw: '" returned value = "' } },
  operator: '+',
  right: Node { type: 'Identifier', start: 346, end: 351, name: 'value' } }
BinaryExpression
266
351
Node {
  type: 'BinaryExpression',
  start: 266,
  end: 343,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 266,
     end: 320,
     left: 
      Node {
        type: 'Literal',
        start: 266,
        end: 316,
        value: 'addArgsNumberAndUndefined(i, 1) failed with i = ',
        raw: '"addArgsNumberAndUndefined(i, 1) failed with i = "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 319, end: 320, name: 'i' } },
  operator: '+',
  right: 
   Node {
     type: 'Literal',
     start: 323,
     end: 343,
     value: ' returned value = ',
     raw: '" returned value = "' } }
BinaryExpression
266
343
Node {
  type: 'BinaryExpression',
  start: 266,
  end: 320,
  left: 
   Node {
     type: 'Literal',
     start: 266,
     end: 316,
     value: 'addArgsNumberAndUndefined(i, 1) failed with i = ',
     raw: '"addArgsNumberAndUndefined(i, 1) failed with i = "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 319, end: 320, name: 'i' } }
BinaryExpression
266
320
Node {
  type: 'Literal',
  start: 266,
  end: 316,
  value: 'addArgsNumberAndUndefined(i, 1) failed with i = ',
  raw: '"addArgsNumberAndUndefined(i, 1) failed with i = "' }
Literal
266
316
addArgsNumberAndUndefined(i, 1) failed with i = 
"addArgsNumberAndUndefined(i, 1) failed with i = "
+
Node { type: 'Identifier', start: 319, end: 320, name: 'i' }
Identifier
319
320
i
+
Node {
  type: 'Literal',
  start: 323,
  end: 343,
  value: ' returned value = ',
  raw: '" returned value = "' }
Literal
323
343
 returned value = 
" returned value = "
+
Node { type: 'Identifier', start: 346, end: 351, name: 'value' }
Identifier
346
351
value
null
[+] Exception: double-rep-with-undefined.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 5592,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 432,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 433,
       end: 468,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 470,
       end: 515,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'VariableDeclaration',
       start: 516,
       end: 581,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'ForStatement',
       start: 582,
       end: 1070,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 1160,
       end: 1444,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1445,
       end: 1488,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 1490,
       end: 2010,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 2109,
       end: 2376,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 2377,
       end: 2429,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 2431,
       end: 2480,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'VariableDeclaration',
       start: 2481,
       end: 2550,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'ForStatement',
       start: 2551,
       end: 3141,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 3143,
       end: 3657,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 3658,
       end: 3689,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 3691,
       end: 3789,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'ForStatement',
       start: 3790,
       end: 4009,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 4012,
       end: 4349,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 4350,
       end: 4386,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 4388,
       end: 4479,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'ForStatement',
       start: 4480,
       end: 4686,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 4688,
       end: 5260,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 5261,
       end: 5298,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 5300,
       end: 5381,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'ForStatement',
       start: 5382,
       end: 5591,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
5592
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 432,
    id: 
     Node {
       type: 'Identifier',
       start: 9,
       end: 33,
       name: 'upsilonReferencingItsPhi' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 48, end: 432, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 433,
    end: 468,
    expression: 
     Node {
       type: 'CallExpression',
       start: 433,
       end: 467,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 470,
    end: 515,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'VariableDeclaration',
    start: 516,
    end: 581,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'ForStatement',
    start: 582,
    end: 1070,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 587,
       end: 596,
       declarations: [Array],
       kind: 'let' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 598,
       end: 605,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 607,
       end: 610,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 612, end: 1070, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 1160,
    end: 1444,
    id: 
     Node {
       type: 'Identifier',
       start: 1169,
       end: 1201,
       name: 'upsilonReferencingItsPhiAllFloat' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 1216, end: 1444, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1445,
    end: 1488,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1445,
       end: 1487,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 1490,
    end: 2010,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 1495,
       end: 1504,
       declarations: [Array],
       kind: 'let' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1506,
       end: 1513,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 1515,
       end: 1518,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 1520, end: 2010, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 2109,
    end: 2376,
    id: 
     Node {
       type: 'Identifier',
       start: 2118,
       end: 2159,
       name: 'upsilonReferencingItsPhiWithoutConversion' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 2174, end: 2376, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 2377,
    end: 2429,
    expression: 
     Node {
       type: 'CallExpression',
       start: 2377,
       end: 2428,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 2431,
    end: 2480,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'VariableDeclaration',
    start: 2481,
    end: 2550,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'ForStatement',
    start: 2551,
    end: 3141,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 2556,
       end: 2565,
       declarations: [Array],
       kind: 'let' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 2567,
       end: 2574,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 2576,
       end: 2579,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 2581, end: 3141, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 3143,
    end: 3657,
    id: 
     Node {
       type: 'Identifier',
       start: 3152,
       end: 3172,
       name: 'conversionPropagages' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 3186, end: 3657, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 3658,
    end: 3689,
    expression: 
     Node {
       type: 'CallExpression',
       start: 3658,
       end: 3688,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 3691,
    end: 3789,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'ForStatement',
    start: 3790,
    end: 4009,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 3795,
       end: 3804,
       declarations: [Array],
       kind: 'let' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 3806,
       end: 3813,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 3815,
       end: 3818,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 3820, end: 4009, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 4012,
    end: 4349,
    id: 
     Node {
       type: 'Identifier',
       start: 4021,
       end: 4046,
       name: 'chainedUpsilonBothConvert' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 4077, end: 4349, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 4350,
    end: 4386,
    expression: 
     Node {
       type: 'CallExpression',
       start: 4350,
       end: 4385,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 4388,
    end: 4479,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'ForStatement',
    start: 4480,
    end: 4686,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 4485,
       end: 4494,
       declarations: [Array],
       kind: 'let' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 4496,
       end: 4503,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 4505,
       end: 4508,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 4510, end: 4686, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 4688,
    end: 5260,
    id: 
     Node {
       type: 'Identifier',
       start: 4697,
       end: 4723,
       name: 'chainedUpsilonFirstConvert' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 4754, end: 5260, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 5261,
    end: 5298,
    expression: 
     Node {
       type: 'CallExpression',
       start: 5261,
       end: 5297,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 5300,
    end: 5381,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'ForStatement',
    start: 5382,
    end: 5591,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 5387,
       end: 5396,
       declarations: [Array],
       kind: 'let' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 5398,
       end: 5405,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 5407,
       end: 5410,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 5412, end: 5591, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 432,
  id: 
   Node {
     type: 'Identifier',
     start: 9,
     end: 33,
     name: 'upsilonReferencingItsPhi' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 34, end: 39, name: 'index' },
     Node { type: 'Identifier', start: 41, end: 46, name: 'input' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 48,
     end: 432,
     body: [ [Node], [Node], [Node] ] } }
FunctionDeclaration
0
432
Node {
  type: 'Identifier',
  start: 9,
  end: 33,
  name: 'upsilonReferencingItsPhi' }
Identifier
9
33
upsilonReferencingItsPhi
false
false
false
[ Node { type: 'Identifier', start: 34, end: 39, name: 'index' },
  Node { type: 'Identifier', start: 41, end: 46, name: 'input' } ]
Node { type: 'Identifier', start: 34, end: 39, name: 'index' }
Identifier
34
39
index
Node { type: 'Identifier', start: 41, end: 46, name: 'input' }
Identifier
41
46
input
Node {
  type: 'BlockStatement',
  start: 48,
  end: 432,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 223,
       end: 248,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'WhileStatement',
       start: 253,
       end: 392,
       test: [Node],
       body: [Node] },
     Node {
       type: 'ReturnStatement',
       start: 397,
       end: 430,
       argument: [Node] } ] }
BlockStatement
48
432
[ Node {
    type: 'VariableDeclaration',
    start: 223,
    end: 248,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'WhileStatement',
    start: 253,
    end: 392,
    test: Node { type: 'Identifier', start: 260, end: 265, name: 'index' },
    body: Node { type: 'BlockStatement', start: 267, end: 392, body: [Array] } },
  Node {
    type: 'ReturnStatement',
    start: 397,
    end: 430,
    argument: 
     Node {
       type: 'CallExpression',
       start: 404,
       end: 429,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 223,
  end: 248,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 227,
       end: 247,
       id: [Node],
       init: [Node] } ],
  kind: 'let' }
VariableDeclaration
223
248
[ Node {
    type: 'VariableDeclarator',
    start: 227,
    end: 247,
    id: Node { type: 'Identifier', start: 227, end: 239, name: 'outputDouble' },
    init: Node { type: 'Identifier', start: 242, end: 247, name: 'input' } } ]
Node {
  type: 'VariableDeclarator',
  start: 227,
  end: 247,
  id: Node { type: 'Identifier', start: 227, end: 239, name: 'outputDouble' },
  init: Node { type: 'Identifier', start: 242, end: 247, name: 'input' } }
VariableDeclarator
227
247
Node { type: 'Identifier', start: 227, end: 239, name: 'outputDouble' }
Identifier
227
239
outputDouble
Node { type: 'Identifier', start: 242, end: 247, name: 'input' }
Identifier
242
247
input
let
Node {
  type: 'WhileStatement',
  start: 253,
  end: 392,
  test: Node { type: 'Identifier', start: 260, end: 265, name: 'index' },
  body: 
   Node {
     type: 'BlockStatement',
     start: 267,
     end: 392,
     body: [ [Node], [Node] ] } }
WhileStatement
253
392
Node { type: 'Identifier', start: 260, end: 265, name: 'index' }
Identifier
260
265
index
Node {
  type: 'BlockStatement',
  start: 267,
  end: 392,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 277,
       end: 357,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 366,
       end: 386,
       expression: [Node] } ] }
BlockStatement
267
392
[ Node {
    type: 'IfStatement',
    start: 277,
    end: 357,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 281,
       end: 292,
       left: [Node],
       operator: '&',
       right: [Node] },
    consequent: 
     Node {
       type: 'ExpressionStatement',
       start: 306,
       end: 357,
       expression: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 366,
    end: 386,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 366,
       end: 385,
       operator: '=',
       left: [Node],
       right: [Node] } } ]
Node {
  type: 'IfStatement',
  start: 277,
  end: 357,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 281,
     end: 292,
     left: Node { type: 'Identifier', start: 281, end: 286, name: 'index' },
     operator: '&',
     right: Node { type: 'Literal', start: 289, end: 292, value: 4, raw: '0x4' } },
  consequent: 
   Node {
     type: 'ExpressionStatement',
     start: 306,
     end: 357,
     expression: 
      Node {
        type: 'AssignmentExpression',
        start: 306,
        end: 356,
        operator: '=',
        left: [Node],
        right: [Node] } },
  alternate: null }
IfStatement
277
357
Node {
  type: 'BinaryExpression',
  start: 281,
  end: 292,
  left: Node { type: 'Identifier', start: 281, end: 286, name: 'index' },
  operator: '&',
  right: Node { type: 'Literal', start: 289, end: 292, value: 4, raw: '0x4' } }
BinaryExpression
281
292
Node { type: 'Identifier', start: 281, end: 286, name: 'index' }
Identifier
281
286
index
&
Node { type: 'Literal', start: 289, end: 292, value: 4, raw: '0x4' }
Literal
289
292
4
0x4
Node {
  type: 'ExpressionStatement',
  start: 306,
  end: 357,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 306,
     end: 356,
     operator: '=',
     left: Node { type: 'Identifier', start: 306, end: 318, name: 'outputDouble' },
     right: 
      Node {
        type: 'BinaryExpression',
        start: 321,
        end: 356,
        left: [Node],
        operator: '+',
        right: [Node] } } }
ExpressionStatement
306
357
Node {
  type: 'AssignmentExpression',
  start: 306,
  end: 356,
  operator: '=',
  left: Node { type: 'Identifier', start: 306, end: 318, name: 'outputDouble' },
  right: 
   Node {
     type: 'BinaryExpression',
     start: 321,
     end: 356,
     left: 
      Node {
        type: 'CallExpression',
        start: 321,
        end: 346,
        callee: [Node],
        arguments: [Array] },
     operator: '+',
     right: 
      Node {
        type: 'MemberExpression',
        start: 349,
        end: 356,
        object: [Node],
        property: [Node],
        computed: false } } }
AssignmentExpression
306
356
=
Node { type: 'Identifier', start: 306, end: 318, name: 'outputDouble' }
Identifier
306
318
outputDouble
Node {
  type: 'BinaryExpression',
  start: 321,
  end: 356,
  left: 
   Node {
     type: 'CallExpression',
     start: 321,
     end: 346,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 321,
        end: 332,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [ [Node] ] },
  operator: '+',
  right: 
   Node {
     type: 'MemberExpression',
     start: 349,
     end: 356,
     object: Node { type: 'Identifier', start: 349, end: 353, name: 'Math' },
     property: Node { type: 'Identifier', start: 354, end: 356, name: 'PI' },
     computed: false } }
BinaryExpression
321
356
Node {
  type: 'CallExpression',
  start: 321,
  end: 346,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 321,
     end: 332,
     object: Node { type: 'Identifier', start: 321, end: 325, name: 'Math' },
     property: Node { type: 'Identifier', start: 326, end: 332, name: 'fround' },
     computed: false },
  arguments: 
   [ Node { type: 'Identifier', start: 333, end: 345, name: 'outputDouble' } ] }
CallExpression
321
346
Node {
  type: 'MemberExpression',
  start: 321,
  end: 332,
  object: Node { type: 'Identifier', start: 321, end: 325, name: 'Math' },
  property: Node { type: 'Identifier', start: 326, end: 332, name: 'fround' },
  computed: false }
MemberExpression
321
332
Node { type: 'Identifier', start: 321, end: 325, name: 'Math' }
Identifier
321
325
Math
Node { type: 'Identifier', start: 326, end: 332, name: 'fround' }
Identifier
326
332
fround
false
[ Node { type: 'Identifier', start: 333, end: 345, name: 'outputDouble' } ]
Node { type: 'Identifier', start: 333, end: 345, name: 'outputDouble' }
Identifier
333
345
outputDouble
+
Node {
  type: 'MemberExpression',
  start: 349,
  end: 356,
  object: Node { type: 'Identifier', start: 349, end: 353, name: 'Math' },
  property: Node { type: 'Identifier', start: 354, end: 356, name: 'PI' },
  computed: false }
MemberExpression
349
356
Node { type: 'Identifier', start: 349, end: 353, name: 'Math' }
Identifier
349
353
Math
Node { type: 'Identifier', start: 354, end: 356, name: 'PI' }
Identifier
354
356
PI
false
null
[+] Exception: double-to-float.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 7372,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 125,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 145,
       end: 441,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 443,
       end: 884,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 886,
       end: 1402,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1404,
       end: 1981,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1983,
       end: 2604,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 2631,
       end: 2912,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 2914,
       end: 3340,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 3342,
       end: 3843,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 3845,
       end: 4414,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 4416,
       end: 5036,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 5049,
       end: 5317,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 5319,
       end: 5732,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 5734,
       end: 6222,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 6224,
       end: 6774,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 6776,
       end: 7371,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
7372
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 125,
    id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 36, end: 125, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 145,
    end: 441,
    expression: 
     Node {
       type: 'CallExpression',
       start: 146,
       end: 439,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 443,
    end: 884,
    expression: 
     Node {
       type: 'CallExpression',
       start: 444,
       end: 882,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 886,
    end: 1402,
    expression: 
     Node {
       type: 'CallExpression',
       start: 887,
       end: 1400,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 1404,
    end: 1981,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1405,
       end: 1979,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 1983,
    end: 2604,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1984,
       end: 2602,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 2631,
    end: 2912,
    expression: 
     Node {
       type: 'CallExpression',
       start: 2632,
       end: 2910,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 2914,
    end: 3340,
    expression: 
     Node {
       type: 'CallExpression',
       start: 2915,
       end: 3338,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 3342,
    end: 3843,
    expression: 
     Node {
       type: 'CallExpression',
       start: 3343,
       end: 3841,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 3845,
    end: 4414,
    expression: 
     Node {
       type: 'CallExpression',
       start: 3846,
       end: 4412,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 4416,
    end: 5036,
    expression: 
     Node {
       type: 'CallExpression',
       start: 4417,
       end: 5034,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 5049,
    end: 5317,
    expression: 
     Node {
       type: 'CallExpression',
       start: 5050,
       end: 5315,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 5319,
    end: 5732,
    expression: 
     Node {
       type: 'CallExpression',
       start: 5320,
       end: 5730,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 5734,
    end: 6222,
    expression: 
     Node {
       type: 'CallExpression',
       start: 5735,
       end: 6220,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 6224,
    end: 6774,
    expression: 
     Node {
       type: 'CallExpression',
       start: 6225,
       end: 6772,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 6776,
    end: 7371,
    expression: 
     Node {
       type: 'CallExpression',
       start: 6777,
       end: 7369,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 125,
  id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
     Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ],
  body: Node { type: 'BlockStatement', start: 36, end: 125, body: [ [Node] ] } }
FunctionDeclaration
0
125
Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' }
Identifier
9
17
shouldBe
false
false
false
[ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
  Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ]
Node { type: 'Identifier', start: 18, end: 24, name: 'actual' }
Identifier
18
24
actual
Node { type: 'Identifier', start: 26, end: 34, name: 'expected' }
Identifier
26
34
expected
Node {
  type: 'BlockStatement',
  start: 36,
  end: 125,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 42,
       end: 123,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
36
125
[ Node {
    type: 'IfStatement',
    start: 42,
    end: 123,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 46,
       end: 65,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 75, end: 123, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 42,
  end: 123,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 46,
     end: 65,
     left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
     operator: '!==',
     right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 75,
     end: 123,
     argument: 
      Node {
        type: 'NewExpression',
        start: 81,
        end: 122,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
42
123
Node {
  type: 'BinaryExpression',
  start: 46,
  end: 65,
  left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
  operator: '!==',
  right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } }
BinaryExpression
46
65
Node { type: 'Identifier', start: 46, end: 52, name: 'actual' }
Identifier
46
52
actual
!==
Node { type: 'Identifier', start: 57, end: 65, name: 'expected' }
Identifier
57
65
expected
Node {
  type: 'ThrowStatement',
  start: 75,
  end: 123,
  argument: 
   Node {
     type: 'NewExpression',
     start: 81,
     end: 122,
     callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
75
123
Node {
  type: 'NewExpression',
  start: 81,
  end: 122,
  callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
  arguments: 
   [ Node {
       type: 'TemplateLiteral',
       start: 91,
       end: 121,
       expressions: [Array],
       quasis: [Array] } ] }
NewExpression
81
122
Node { type: 'Identifier', start: 85, end: 90, name: 'Error' }
Identifier
85
90
Error
[ Node {
    type: 'TemplateLiteral',
    start: 91,
    end: 121,
    expressions: [ [Node] ],
    quasis: [ [Node], [Node] ] } ]
Node {
  type: 'TemplateLiteral',
  start: 91,
  end: 121,
  expressions: 
   [ Node {
       type: 'CallExpression',
       start: 105,
       end: 119,
       callee: [Node],
       arguments: [Array] } ],
  quasis: 
   [ Node {
       type: 'TemplateElement',
       start: 92,
       end: 103,
       value: [Object],
       tail: false },
     Node {
       type: 'TemplateElement',
       start: 120,
       end: 120,
       value: [Object],
       tail: true } ] }
TemplateLiteral
91
121
[ Node {
    type: 'CallExpression',
    start: 105,
    end: 119,
    callee: Node { type: 'Identifier', start: 105, end: 111, name: 'String' },
    arguments: [ [Node] ] } ]
Node {
  type: 'CallExpression',
  start: 105,
  end: 119,
  callee: Node { type: 'Identifier', start: 105, end: 111, name: 'String' },
  arguments: 
   [ Node { type: 'Identifier', start: 112, end: 118, name: 'actual' } ] }
CallExpression
105
119
Node { type: 'Identifier', start: 105, end: 111, name: 'String' }
Identifier
105
111
String
[ Node { type: 'Identifier', start: 112, end: 118, name: 'actual' } ]
Node { type: 'Identifier', start: 112, end: 118, name: 'actual' }
Identifier
112
118
actual
[ Node {
    type: 'TemplateElement',
    start: 92,
    end: 103,
    value: { raw: 'bad value: ', cooked: 'bad value: ' },
    tail: false },
  Node {
    type: 'TemplateElement',
    start: 120,
    end: 120,
    value: { raw: '', cooked: '' },
    tail: true } ]
Node {
  type: 'TemplateElement',
  start: 92,
  end: 103,
  value: { raw: 'bad value: ', cooked: 'bad value: ' },
  tail: false }
TemplateElement
92
103
{ raw: 'bad value: ', cooked: 'bad value: ' }
bad value: 
bad value: 
false
Node {
  type: 'TemplateElement',
  start: 120,
  end: 120,
  value: { raw: '', cooked: '' },
  tail: true }
TemplateElement
120
120
{ raw: '', cooked: '' }


true
null
[+] Exception: duplicate-computed-accessors.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 242,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 0,
       end: 13,
       expression: [Node],
       directive: 'use strict' },
     Node {
       type: 'FunctionDeclaration',
       start: 15,
       end: 31,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node { type: 'EmptyStatement', start: 31, end: 32 },
     Node {
       type: 'ExpressionStatement',
       start: 33,
       end: 45,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 47,
       end: 90,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 91,
       end: 105,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 107,
       end: 166,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'ForStatement',
       start: 169,
       end: 241,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
242
[ Node {
    type: 'ExpressionStatement',
    start: 0,
    end: 13,
    expression: 
     Node {
       type: 'Literal',
       start: 0,
       end: 12,
       value: 'use strict',
       raw: '"use strict"' },
    directive: 'use strict' },
  Node {
    type: 'FunctionDeclaration',
    start: 15,
    end: 31,
    id: Node { type: 'Identifier', start: 24, end: 25, name: 'f' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 28, end: 31, body: [] } },
  Node { type: 'EmptyStatement', start: 31, end: 32 },
  Node {
    type: 'ExpressionStatement',
    start: 33,
    end: 45,
    expression: 
     Node {
       type: 'CallExpression',
       start: 33,
       end: 44,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 47,
    end: 90,
    id: Node { type: 'Identifier', start: 56, end: 59, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 66, end: 90, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 91,
    end: 105,
    expression: 
     Node {
       type: 'CallExpression',
       start: 91,
       end: 104,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 107,
    end: 166,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'ForStatement',
    start: 169,
    end: 241,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 174,
       end: 183,
       declarations: [Array],
       kind: 'let' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 185,
       end: 196,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 198,
       end: 201,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 203, end: 241, body: [Array] } } ]
Node {
  type: 'ExpressionStatement',
  start: 0,
  end: 13,
  expression: 
   Node {
     type: 'Literal',
     start: 0,
     end: 12,
     value: 'use strict',
     raw: '"use strict"' },
  directive: 'use strict' }
ExpressionStatement
0
13
Node {
  type: 'Literal',
  start: 0,
  end: 12,
  value: 'use strict',
  raw: '"use strict"' }
Literal
0
12
use strict
"use strict"
use strict
Node {
  type: 'FunctionDeclaration',
  start: 15,
  end: 31,
  id: Node { type: 'Identifier', start: 24, end: 25, name: 'f' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 28, end: 31, body: [] } }
FunctionDeclaration
15
31
Node { type: 'Identifier', start: 24, end: 25, name: 'f' }
Identifier
24
25
f
false
false
false
[]
Node { type: 'BlockStatement', start: 28, end: 31, body: [] }
BlockStatement
28
31
[]
Node { type: 'EmptyStatement', start: 31, end: 32 }
EmptyStatement
31
32
Node {
  type: 'ExpressionStatement',
  start: 33,
  end: 45,
  expression: 
   Node {
     type: 'CallExpression',
     start: 33,
     end: 44,
     callee: Node { type: 'Identifier', start: 33, end: 41, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
33
45
Node {
  type: 'CallExpression',
  start: 33,
  end: 44,
  callee: Node { type: 'Identifier', start: 33, end: 41, name: 'noInline' },
  arguments: [ Node { type: 'Identifier', start: 42, end: 43, name: 'f' } ] }
CallExpression
33
44
Node { type: 'Identifier', start: 33, end: 41, name: 'noInline' }
Identifier
33
41
noInline
[ Node { type: 'Identifier', start: 42, end: 43, name: 'f' } ]
Node { type: 'Identifier', start: 42, end: 43, name: 'f' }
Identifier
42
43
f
Node {
  type: 'FunctionDeclaration',
  start: 47,
  end: 90,
  id: Node { type: 'Identifier', start: 56, end: 59, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 60, end: 61, name: 'o' },
     Node { type: 'Identifier', start: 63, end: 64, name: 'x' } ],
  body: Node { type: 'BlockStatement', start: 66, end: 90, body: [ [Node] ] } }
FunctionDeclaration
47
90
Node { type: 'Identifier', start: 56, end: 59, name: 'foo' }
Identifier
56
59
foo
false
false
false
[ Node { type: 'Identifier', start: 60, end: 61, name: 'o' },
  Node { type: 'Identifier', start: 63, end: 64, name: 'x' } ]
Node { type: 'Identifier', start: 60, end: 61, name: 'o' }
Identifier
60
61
o
Node { type: 'Identifier', start: 63, end: 64, name: 'x' }
Identifier
63
64
x
Node {
  type: 'BlockStatement',
  start: 66,
  end: 90,
  body: 
   [ Node { type: 'ReturnStatement', start: 72, end: 88, argument: [Node] } ] }
BlockStatement
66
90
[ Node {
    type: 'ReturnStatement',
    start: 72,
    end: 88,
    argument: 
     Node {
       type: 'CallExpression',
       start: 79,
       end: 87,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'ReturnStatement',
  start: 72,
  end: 88,
  argument: 
   Node {
     type: 'CallExpression',
     start: 79,
     end: 87,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 79,
        end: 84,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [ [Node] ] } }
ReturnStatement
72
88
Node {
  type: 'CallExpression',
  start: 79,
  end: 87,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 79,
     end: 84,
     object: Node { type: 'Identifier', start: 79, end: 80, name: 'o' },
     property: Node { type: 'Identifier', start: 81, end: 84, name: 'get' },
     computed: false },
  arguments: [ Node { type: 'Identifier', start: 85, end: 86, name: 'x' } ] }
CallExpression
79
87
Node {
  type: 'MemberExpression',
  start: 79,
  end: 84,
  object: Node { type: 'Identifier', start: 79, end: 80, name: 'o' },
  property: Node { type: 'Identifier', start: 81, end: 84, name: 'get' },
  computed: false }
MemberExpression
79
84
Node { type: 'Identifier', start: 79, end: 80, name: 'o' }
Identifier
79
80
o
Node { type: 'Identifier', start: 81, end: 84, name: 'get' }
Identifier
81
84
get
false
[ Node { type: 'Identifier', start: 85, end: 86, name: 'x' } ]
Node { type: 'Identifier', start: 85, end: 86, name: 'x' }
Identifier
85
86
x
Node {
  type: 'ExpressionStatement',
  start: 91,
  end: 105,
  expression: 
   Node {
     type: 'CallExpression',
     start: 91,
     end: 104,
     callee: Node { type: 'Identifier', start: 91, end: 99, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
91
105
Node {
  type: 'CallExpression',
  start: 91,
  end: 104,
  callee: Node { type: 'Identifier', start: 91, end: 99, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 100, end: 103, name: 'foo' } ] }
CallExpression
91
104
Node { type: 'Identifier', start: 91, end: 99, name: 'noInline' }
Identifier
91
99
noInline
[ Node { type: 'Identifier', start: 100, end: 103, name: 'foo' } ]
Node { type: 'Identifier', start: 100, end: 103, name: 'foo' }
Identifier
100
103
foo
Node {
  type: 'VariableDeclaration',
  start: 107,
  end: 166,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 111,
       end: 165,
       id: [Node],
       init: [Node] } ],
  kind: 'let' }
VariableDeclaration
107
166
[ Node {
    type: 'VariableDeclarator',
    start: 111,
    end: 165,
    id: Node { type: 'Identifier', start: 111, end: 115, name: 'objs' },
    init: 
     Node {
       type: 'ArrayExpression',
       start: 118,
       end: 165,
       elements: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 111,
  end: 165,
  id: Node { type: 'Identifier', start: 111, end: 115, name: 'objs' },
  init: 
   Node {
     type: 'ArrayExpression',
     start: 118,
     end: 165,
     elements: [ [Node], [Node] ] } }
VariableDeclarator
111
165
Node { type: 'Identifier', start: 111, end: 115, name: 'objs' }
Identifier
111
115
objs
Node {
  type: 'ArrayExpression',
  start: 118,
  end: 165,
  elements: 
   [ Node {
       type: 'NewExpression',
       start: 124,
       end: 131,
       callee: [Node],
       arguments: [] },
     Node {
       type: 'ObjectExpression',
       start: 137,
       end: 162,
       properties: [Array] } ] }
ArrayExpression
118
165
[ Node {
    type: 'NewExpression',
    start: 124,
    end: 131,
    callee: Node { type: 'Identifier', start: 128, end: 131, name: 'Map' },
    arguments: [] },
  Node {
    type: 'ObjectExpression',
    start: 137,
    end: 162,
    properties: [ [Node] ] } ]
Node {
  type: 'NewExpression',
  start: 124,
  end: 131,
  callee: Node { type: 'Identifier', start: 128, end: 131, name: 'Map' },
  arguments: [] }
NewExpression
124
131
Node { type: 'Identifier', start: 128, end: 131, name: 'Map' }
Identifier
128
131
Map
[]
Node {
  type: 'ObjectExpression',
  start: 137,
  end: 162,
  properties: 
   [ Node {
       type: 'Property',
       start: 139,
       end: 160,
       method: true,
       shorthand: false,
       computed: false,
       key: [Node],
       kind: 'init',
       value: [Node] } ] }
ObjectExpression
137
162
[ Node {
    type: 'Property',
    start: 139,
    end: 160,
    method: true,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 139, end: 142, name: 'get' },
    kind: 'init',
    value: 
     Node {
       type: 'FunctionExpression',
       start: 142,
       end: 160,
       id: null,
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] } } ]
Node {
  type: 'Property',
  start: 139,
  end: 160,
  method: true,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 139, end: 142, name: 'get' },
  kind: 'init',
  value: 
   Node {
     type: 'FunctionExpression',
     start: 142,
     end: 160,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [],
     body: Node { type: 'BlockStatement', start: 145, end: 160, body: [Array] } } }
Property
139
160
true
false
false
Node { type: 'Identifier', start: 139, end: 142, name: 'get' }
Identifier
139
142
get
init
Node {
  type: 'FunctionExpression',
  start: 142,
  end: 160,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 145, end: 160, body: [ [Node] ] } }
FunctionExpression
142
160
null
[+] Exception: each-block-at-top-of-polymorphic-call-inlining-should-be-exitOK.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 512,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 47,
       end: 56,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ForStatement',
       start: 58,
       end: 511,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
512
[ Node {
    type: 'VariableDeclaration',
    start: 47,
    end: 56,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ForStatement',
    start: 58,
    end: 511,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 63,
       end: 72,
       declarations: [Array],
       kind: 'let' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 74,
       end: 81,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'AssignmentExpression',
       start: 83,
       end: 91,
       operator: '+=',
       left: [Node],
       right: [Node] },
    body: Node { type: 'BlockStatement', start: 93, end: 511, body: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 47,
  end: 56,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 51,
       end: 55,
       id: [Node],
       init: null } ],
  kind: 'var' }
VariableDeclaration
47
56
[ Node {
    type: 'VariableDeclarator',
    start: 51,
    end: 55,
    id: Node { type: 'Identifier', start: 51, end: 55, name: 'objs' },
    init: null } ]
Node {
  type: 'VariableDeclarator',
  start: 51,
  end: 55,
  id: Node { type: 'Identifier', start: 51, end: 55, name: 'objs' },
  init: null }
VariableDeclarator
51
55
Node { type: 'Identifier', start: 51, end: 55, name: 'objs' }
Identifier
51
55
objs
null
[+] Exception: eden-gc-with-retired-blocks.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 324,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 0,
       end: 323,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
324
[ Node {
    type: 'ExpressionStatement',
    start: 0,
    end: 323,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1,
       end: 321,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'ExpressionStatement',
  start: 0,
  end: 323,
  expression: 
   Node {
     type: 'CallExpression',
     start: 1,
     end: 321,
     callee: 
      Node {
        type: 'FunctionExpression',
        start: 1,
        end: 319,
        id: null,
        generator: false,
        expression: false,
        async: false,
        params: [],
        body: [Node] },
     arguments: [] } }
ExpressionStatement
0
323
Node {
  type: 'CallExpression',
  start: 1,
  end: 321,
  callee: 
   Node {
     type: 'FunctionExpression',
     start: 1,
     end: 319,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [],
     body: Node { type: 'BlockStatement', start: 13, end: 319, body: [Array] } },
  arguments: [] }
CallExpression
1
321
Node {
  type: 'FunctionExpression',
  start: 1,
  end: 319,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: 
   Node {
     type: 'BlockStatement',
     start: 13,
     end: 319,
     body: [ [Node], [Node], [Node], [Node], [Node] ] } }
FunctionExpression
1
319
null
[+] Exception: element-property-get-should-not-handled-with-get-by-id.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 748,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 72,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 74,
       end: 90,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 92,
       end: 118,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 120,
       end: 607,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 609,
       end: 628,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 629,
       end: 747,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
748
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 72,
    id: 
     Node {
       type: 'Identifier',
       start: 9,
       end: 25,
       name: 'sumOfArithSeries' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 33, end: 72, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 74,
    end: 90,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 92,
    end: 118,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 120,
    end: 607,
    id: Node { type: 'Identifier', start: 129, end: 132, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 135, end: 607, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 609,
    end: 628,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 629,
    end: 747,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 633,
       end: 704,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 710, end: 747, argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 72,
  id: 
   Node {
     type: 'Identifier',
     start: 9,
     end: 25,
     name: 'sumOfArithSeries' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 26, end: 31, name: 'limit' } ],
  body: Node { type: 'BlockStatement', start: 33, end: 72, body: [ [Node] ] } }
FunctionDeclaration
0
72
Node {
  type: 'Identifier',
  start: 9,
  end: 25,
  name: 'sumOfArithSeries' }
Identifier
9
25
sumOfArithSeries
false
false
false
[ Node { type: 'Identifier', start: 26, end: 31, name: 'limit' } ]
Node { type: 'Identifier', start: 26, end: 31, name: 'limit' }
Identifier
26
31
limit
Node {
  type: 'BlockStatement',
  start: 33,
  end: 72,
  body: 
   [ Node { type: 'ReturnStatement', start: 39, end: 70, argument: [Node] } ] }
BlockStatement
33
72
[ Node {
    type: 'ReturnStatement',
    start: 39,
    end: 70,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 46,
       end: 69,
       left: [Node],
       operator: '/',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 39,
  end: 70,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 46,
     end: 69,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 46,
        end: 65,
        left: [Node],
        operator: '*',
        right: [Node] },
     operator: '/',
     right: Node { type: 'Literal', start: 68, end: 69, value: 2, raw: '2' } } }
ReturnStatement
39
70
Node {
  type: 'BinaryExpression',
  start: 46,
  end: 69,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 46,
     end: 65,
     left: Node { type: 'Identifier', start: 46, end: 51, name: 'limit' },
     operator: '*',
     right: 
      Node {
        type: 'BinaryExpression',
        start: 55,
        end: 64,
        left: [Node],
        operator: '+',
        right: [Node] } },
  operator: '/',
  right: Node { type: 'Literal', start: 68, end: 69, value: 2, raw: '2' } }
BinaryExpression
46
69
Node {
  type: 'BinaryExpression',
  start: 46,
  end: 65,
  left: Node { type: 'Identifier', start: 46, end: 51, name: 'limit' },
  operator: '*',
  right: 
   Node {
     type: 'BinaryExpression',
     start: 55,
     end: 64,
     left: Node { type: 'Identifier', start: 55, end: 60, name: 'limit' },
     operator: '+',
     right: Node { type: 'Literal', start: 63, end: 64, value: 1, raw: '1' } } }
BinaryExpression
46
65
Node { type: 'Identifier', start: 46, end: 51, name: 'limit' }
Identifier
46
51
limit
*
Node {
  type: 'BinaryExpression',
  start: 55,
  end: 64,
  left: Node { type: 'Identifier', start: 55, end: 60, name: 'limit' },
  operator: '+',
  right: Node { type: 'Literal', start: 63, end: 64, value: 1, raw: '1' } }
BinaryExpression
55
64
Node { type: 'Identifier', start: 55, end: 60, name: 'limit' }
Identifier
55
60
limit
+
Node { type: 'Literal', start: 63, end: 64, value: 1, raw: '1' }
Literal
63
64
1
1
/
Node { type: 'Literal', start: 68, end: 69, value: 2, raw: '2' }
Literal
68
69
2
2
Node {
  type: 'VariableDeclaration',
  start: 74,
  end: 90,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 78,
       end: 89,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
74
90
[ Node {
    type: 'VariableDeclarator',
    start: 78,
    end: 89,
    id: Node { type: 'Identifier', start: 78, end: 79, name: 'n' },
    init: 
     Node {
       type: 'Literal',
       start: 82,
       end: 89,
       value: 1000000,
       raw: '1000000' } } ]
Node {
  type: 'VariableDeclarator',
  start: 78,
  end: 89,
  id: Node { type: 'Identifier', start: 78, end: 79, name: 'n' },
  init: 
   Node {
     type: 'Literal',
     start: 82,
     end: 89,
     value: 1000000,
     raw: '1000000' } }
VariableDeclarator
78
89
Node { type: 'Identifier', start: 78, end: 79, name: 'n' }
Identifier
78
79
n
Node {
  type: 'Literal',
  start: 82,
  end: 89,
  value: 1000000,
  raw: '1000000' }
Literal
82
89
1000000
1000000
var
Node {
  type: 'VariableDeclaration',
  start: 92,
  end: 118,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 96,
       end: 117,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
92
118
[ Node {
    type: 'VariableDeclarator',
    start: 96,
    end: 117,
    id: Node { type: 'Identifier', start: 96, end: 101, name: 'array' },
    init: 
     Node {
       type: 'ArrayExpression',
       start: 104,
       end: 117,
       elements: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 96,
  end: 117,
  id: Node { type: 'Identifier', start: 96, end: 101, name: 'array' },
  init: 
   Node {
     type: 'ArrayExpression',
     start: 104,
     end: 117,
     elements: [ [Node], [Node] ] } }
VariableDeclarator
96
117
Node { type: 'Identifier', start: 96, end: 101, name: 'array' }
Identifier
96
101
array
Node {
  type: 'ArrayExpression',
  start: 104,
  end: 117,
  elements: 
   [ Node { type: 'Literal', start: 105, end: 107, value: 42, raw: '42' },
     Node {
       type: 'Literal',
       start: 109,
       end: 116,
       value: 'hello',
       raw: '"hello"' } ] }
ArrayExpression
104
117
[ Node { type: 'Literal', start: 105, end: 107, value: 42, raw: '42' },
  Node {
    type: 'Literal',
    start: 109,
    end: 116,
    value: 'hello',
    raw: '"hello"' } ]
Node { type: 'Literal', start: 105, end: 107, value: 42, raw: '42' }
Literal
105
107
42
42
Node {
  type: 'Literal',
  start: 109,
  end: 116,
  value: 'hello',
  raw: '"hello"' }
Literal
109
116
hello
"hello"
var
Node {
  type: 'FunctionDeclaration',
  start: 120,
  end: 607,
  id: Node { type: 'Identifier', start: 129, end: 132, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: 
   Node {
     type: 'BlockStatement',
     start: 135,
     end: 607,
     body: [ [Node], [Node], [Node], [Node] ] } }
FunctionDeclaration
120
607
Node { type: 'Identifier', start: 129, end: 132, name: 'foo' }
Identifier
129
132
foo
false
false
false
[]
Node {
  type: 'BlockStatement',
  start: 135,
  end: 607,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 141,
       end: 156,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 161,
       end: 167,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ForStatement',
       start: 172,
       end: 582,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ReturnStatement',
       start: 587,
       end: 605,
       argument: [Node] } ] }
BlockStatement
135
607
[ Node {
    type: 'VariableDeclaration',
    start: 141,
    end: 156,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 161,
    end: 167,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ForStatement',
    start: 172,
    end: 582,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 177,
       end: 186,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 188,
       end: 193,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 195,
       end: 198,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 200, end: 582, body: [Array] } },
  Node {
    type: 'ReturnStatement',
    start: 587,
    end: 605,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 594,
       end: 604,
       left: [Node],
       operator: '+',
       right: [Node] } } ]
Node {
  type: 'VariableDeclaration',
  start: 141,
  end: 156,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 145,
       end: 155,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
141
156
[ Node {
    type: 'VariableDeclarator',
    start: 145,
    end: 155,
    id: Node { type: 'Identifier', start: 145, end: 151, name: 'result' },
    init: Node { type: 'Literal', start: 154, end: 155, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 145,
  end: 155,
  id: Node { type: 'Identifier', start: 145, end: 151, name: 'result' },
  init: Node { type: 'Literal', start: 154, end: 155, value: 0, raw: '0' } }
VariableDeclarator
145
155
Node { type: 'Identifier', start: 145, end: 151, name: 'result' }
Identifier
145
151
result
Node { type: 'Literal', start: 154, end: 155, value: 0, raw: '0' }
Literal
154
155
0
0
var
Node {
  type: 'VariableDeclaration',
  start: 161,
  end: 167,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 165,
       end: 166,
       id: [Node],
       init: null } ],
  kind: 'var' }
VariableDeclaration
161
167
[ Node {
    type: 'VariableDeclarator',
    start: 165,
    end: 166,
    id: Node { type: 'Identifier', start: 165, end: 166, name: 'q' },
    init: null } ]
Node {
  type: 'VariableDeclarator',
  start: 165,
  end: 166,
  id: Node { type: 'Identifier', start: 165, end: 166, name: 'q' },
  init: null }
VariableDeclarator
165
166
Node { type: 'Identifier', start: 165, end: 166, name: 'q' }
Identifier
165
166
q
null
[+] Exception: elidable-new-object-roflcopter-then-exit.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1045,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 72,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 74,
       end: 91,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 93,
       end: 111,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 113,
       end: 315,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 317,
       end: 893,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 895,
       end: 909,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 910,
       end: 927,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 928,
       end: 942,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 944,
       end: 963,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 964,
       end: 1044,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
1045
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 72,
    id: 
     Node {
       type: 'Identifier',
       start: 9,
       end: 25,
       name: 'sumOfArithSeries' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 33, end: 72, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 74,
    end: 91,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 93,
    end: 111,
    id: Node { type: 'Identifier', start: 102, end: 105, name: 'bar' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 108, end: 111, body: [] } },
  Node {
    type: 'FunctionDeclaration',
    start: 113,
    end: 315,
    id: Node { type: 'Identifier', start: 122, end: 128, name: 'verify' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 135, end: 315, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 317,
    end: 893,
    id: Node { type: 'Identifier', start: 326, end: 329, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 332, end: 893, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 895,
    end: 909,
    expression: 
     Node {
       type: 'CallExpression',
       start: 895,
       end: 908,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 910,
    end: 927,
    expression: 
     Node {
       type: 'CallExpression',
       start: 910,
       end: 926,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 928,
    end: 942,
    expression: 
     Node {
       type: 'CallExpression',
       start: 928,
       end: 941,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 944,
    end: 963,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 964,
    end: 1044,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 968,
       end: 1001,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1007,
       end: 1044,
       argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 72,
  id: 
   Node {
     type: 'Identifier',
     start: 9,
     end: 25,
     name: 'sumOfArithSeries' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 26, end: 31, name: 'limit' } ],
  body: Node { type: 'BlockStatement', start: 33, end: 72, body: [ [Node] ] } }
FunctionDeclaration
0
72
Node {
  type: 'Identifier',
  start: 9,
  end: 25,
  name: 'sumOfArithSeries' }
Identifier
9
25
sumOfArithSeries
false
false
false
[ Node { type: 'Identifier', start: 26, end: 31, name: 'limit' } ]
Node { type: 'Identifier', start: 26, end: 31, name: 'limit' }
Identifier
26
31
limit
Node {
  type: 'BlockStatement',
  start: 33,
  end: 72,
  body: 
   [ Node { type: 'ReturnStatement', start: 39, end: 70, argument: [Node] } ] }
BlockStatement
33
72
[ Node {
    type: 'ReturnStatement',
    start: 39,
    end: 70,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 46,
       end: 69,
       left: [Node],
       operator: '/',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 39,
  end: 70,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 46,
     end: 69,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 46,
        end: 65,
        left: [Node],
        operator: '*',
        right: [Node] },
     operator: '/',
     right: Node { type: 'Literal', start: 68, end: 69, value: 2, raw: '2' } } }
ReturnStatement
39
70
Node {
  type: 'BinaryExpression',
  start: 46,
  end: 69,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 46,
     end: 65,
     left: Node { type: 'Identifier', start: 46, end: 51, name: 'limit' },
     operator: '*',
     right: 
      Node {
        type: 'BinaryExpression',
        start: 55,
        end: 64,
        left: [Node],
        operator: '+',
        right: [Node] } },
  operator: '/',
  right: Node { type: 'Literal', start: 68, end: 69, value: 2, raw: '2' } }
BinaryExpression
46
69
Node {
  type: 'BinaryExpression',
  start: 46,
  end: 65,
  left: Node { type: 'Identifier', start: 46, end: 51, name: 'limit' },
  operator: '*',
  right: 
   Node {
     type: 'BinaryExpression',
     start: 55,
     end: 64,
     left: Node { type: 'Identifier', start: 55, end: 60, name: 'limit' },
     operator: '+',
     right: Node { type: 'Literal', start: 63, end: 64, value: 1, raw: '1' } } }
BinaryExpression
46
65
Node { type: 'Identifier', start: 46, end: 51, name: 'limit' }
Identifier
46
51
limit
*
Node {
  type: 'BinaryExpression',
  start: 55,
  end: 64,
  left: Node { type: 'Identifier', start: 55, end: 60, name: 'limit' },
  operator: '+',
  right: Node { type: 'Literal', start: 63, end: 64, value: 1, raw: '1' } }
BinaryExpression
55
64
Node { type: 'Identifier', start: 55, end: 60, name: 'limit' }
Identifier
55
60
limit
+
Node { type: 'Literal', start: 63, end: 64, value: 1, raw: '1' }
Literal
63
64
1
1
/
Node { type: 'Literal', start: 68, end: 69, value: 2, raw: '2' }
Literal
68
69
2
2
Node {
  type: 'VariableDeclaration',
  start: 74,
  end: 91,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 78,
       end: 90,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
74
91
[ Node {
    type: 'VariableDeclarator',
    start: 78,
    end: 90,
    id: Node { type: 'Identifier', start: 78, end: 79, name: 'n' },
    init: 
     Node {
       type: 'Literal',
       start: 82,
       end: 90,
       value: 10000000,
       raw: '10000000' } } ]
Node {
  type: 'VariableDeclarator',
  start: 78,
  end: 90,
  id: Node { type: 'Identifier', start: 78, end: 79, name: 'n' },
  init: 
   Node {
     type: 'Literal',
     start: 82,
     end: 90,
     value: 10000000,
     raw: '10000000' } }
VariableDeclarator
78
90
Node { type: 'Identifier', start: 78, end: 79, name: 'n' }
Identifier
78
79
n
Node {
  type: 'Literal',
  start: 82,
  end: 90,
  value: 10000000,
  raw: '10000000' }
Literal
82
90
10000000
10000000
var
Node {
  type: 'FunctionDeclaration',
  start: 93,
  end: 111,
  id: Node { type: 'Identifier', start: 102, end: 105, name: 'bar' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 108, end: 111, body: [] } }
FunctionDeclaration
93
111
Node { type: 'Identifier', start: 102, end: 105, name: 'bar' }
Identifier
102
105
bar
false
false
false
[]
Node { type: 'BlockStatement', start: 108, end: 111, body: [] }
BlockStatement
108
111
[]
Node {
  type: 'FunctionDeclaration',
  start: 113,
  end: 315,
  id: Node { type: 'Identifier', start: 122, end: 128, name: 'verify' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 129, end: 130, name: 'q' },
     Node { type: 'Identifier', start: 132, end: 133, name: 'i' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 135,
     end: 315,
     body: [ [Node], [Node], [Node] ] } }
FunctionDeclaration
113
315
Node { type: 'Identifier', start: 122, end: 128, name: 'verify' }
Identifier
122
128
verify
false
false
false
[ Node { type: 'Identifier', start: 129, end: 130, name: 'q' },
  Node { type: 'Identifier', start: 132, end: 133, name: 'i' } ]
Node { type: 'Identifier', start: 129, end: 130, name: 'q' }
Identifier
129
130
q
Node { type: 'Identifier', start: 132, end: 133, name: 'i' }
Identifier
132
133
i
Node {
  type: 'BlockStatement',
  start: 135,
  end: 315,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 141,
       end: 191,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 196,
       end: 254,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 259,
       end: 313,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
135
315
[ Node {
    type: 'IfStatement',
    start: 141,
    end: 191,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 145,
       end: 155,
       left: [Node],
       operator: '==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 165, end: 191, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 196,
    end: 254,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 200,
       end: 214,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 224, end: 254, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 259,
    end: 313,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 263,
       end: 275,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 285, end: 313, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 141,
  end: 191,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 145,
     end: 155,
     left: 
      Node {
        type: 'MemberExpression',
        start: 145,
        end: 148,
        object: [Node],
        property: [Node],
        computed: false },
     operator: '==',
     right: 
      Node {
        type: 'MemberExpression',
        start: 152,
        end: 155,
        object: [Node],
        property: [Node],
        computed: false } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 165,
     end: 191,
     argument: 
      Node {
        type: 'Literal',
        start: 171,
        end: 190,
        value: 'Error: q.f == q.g',
        raw: '"Error: q.f == q.g"' } },
  alternate: null }
IfStatement
141
191
Node {
  type: 'BinaryExpression',
  start: 145,
  end: 155,
  left: 
   Node {
     type: 'MemberExpression',
     start: 145,
     end: 148,
     object: Node { type: 'Identifier', start: 145, end: 146, name: 'q' },
     property: Node { type: 'Identifier', start: 147, end: 148, name: 'f' },
     computed: false },
  operator: '==',
  right: 
   Node {
     type: 'MemberExpression',
     start: 152,
     end: 155,
     object: Node { type: 'Identifier', start: 152, end: 153, name: 'q' },
     property: Node { type: 'Identifier', start: 154, end: 155, name: 'g' },
     computed: false } }
BinaryExpression
145
155
Node {
  type: 'MemberExpression',
  start: 145,
  end: 148,
  object: Node { type: 'Identifier', start: 145, end: 146, name: 'q' },
  property: Node { type: 'Identifier', start: 147, end: 148, name: 'f' },
  computed: false }
MemberExpression
145
148
Node { type: 'Identifier', start: 145, end: 146, name: 'q' }
Identifier
145
146
q
Node { type: 'Identifier', start: 147, end: 148, name: 'f' }
Identifier
147
148
f
false
==
Node {
  type: 'MemberExpression',
  start: 152,
  end: 155,
  object: Node { type: 'Identifier', start: 152, end: 153, name: 'q' },
  property: Node { type: 'Identifier', start: 154, end: 155, name: 'g' },
  computed: false }
MemberExpression
152
155
Node { type: 'Identifier', start: 152, end: 153, name: 'q' }
Identifier
152
153
q
Node { type: 'Identifier', start: 154, end: 155, name: 'g' }
Identifier
154
155
g
false
Node {
  type: 'ThrowStatement',
  start: 165,
  end: 191,
  argument: 
   Node {
     type: 'Literal',
     start: 171,
     end: 190,
     value: 'Error: q.f == q.g',
     raw: '"Error: q.f == q.g"' } }
ThrowStatement
165
191
Node {
  type: 'Literal',
  start: 171,
  end: 190,
  value: 'Error: q.f == q.g',
  raw: '"Error: q.f == q.g"' }
Literal
171
190
Error: q.f == q.g
"Error: q.f == q.g"
null
[+] Exception: elide-new-object-dag-then-exit.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 217,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 18,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 20,
       end: 34,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 36,
       end: 215,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
217
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 18,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 15, end: 18, body: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 20,
    end: 34,
    expression: 
     Node {
       type: 'CallExpression',
       start: 20,
       end: 33,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 36,
    end: 215,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 41,
       end: 50,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 52,
       end: 62,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 64,
       end: 67,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 69, end: 215, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 18,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 15, end: 18, body: [] } }
FunctionDeclaration
0
18
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[]
Node { type: 'BlockStatement', start: 15, end: 18, body: [] }
BlockStatement
15
18
[]
Node {
  type: 'ExpressionStatement',
  start: 20,
  end: 34,
  expression: 
   Node {
     type: 'CallExpression',
     start: 20,
     end: 33,
     callee: Node { type: 'Identifier', start: 20, end: 28, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
20
34
Node {
  type: 'CallExpression',
  start: 20,
  end: 33,
  callee: Node { type: 'Identifier', start: 20, end: 28, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 29, end: 32, name: 'foo' } ] }
CallExpression
20
33
Node { type: 'Identifier', start: 20, end: 28, name: 'noInline' }
Identifier
20
28
noInline
[ Node { type: 'Identifier', start: 29, end: 32, name: 'foo' } ]
Node { type: 'Identifier', start: 29, end: 32, name: 'foo' }
Identifier
29
32
foo
Node {
  type: 'ForStatement',
  start: 36,
  end: 215,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 41,
     end: 50,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 52,
     end: 62,
     left: Node { type: 'Identifier', start: 52, end: 53, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 56,
        end: 62,
        value: 100000,
        raw: '100000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 64,
     end: 67,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 66, end: 67, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 69,
     end: 215,
     body: [ [Node], [Node] ] } }
ForStatement
36
215
Node {
  type: 'VariableDeclaration',
  start: 41,
  end: 50,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 45,
       end: 50,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
41
50
[ Node {
    type: 'VariableDeclarator',
    start: 45,
    end: 50,
    id: Node { type: 'Identifier', start: 45, end: 46, name: 'i' },
    init: Node { type: 'Literal', start: 49, end: 50, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 45,
  end: 50,
  id: Node { type: 'Identifier', start: 45, end: 46, name: 'i' },
  init: Node { type: 'Literal', start: 49, end: 50, value: 0, raw: '0' } }
VariableDeclarator
45
50
Node { type: 'Identifier', start: 45, end: 46, name: 'i' }
Identifier
45
46
i
Node { type: 'Literal', start: 49, end: 50, value: 0, raw: '0' }
Literal
49
50
0
0
var
Node {
  type: 'BinaryExpression',
  start: 52,
  end: 62,
  left: Node { type: 'Identifier', start: 52, end: 53, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 56,
     end: 62,
     value: 100000,
     raw: '100000' } }
BinaryExpression
52
62
Node { type: 'Identifier', start: 52, end: 53, name: 'i' }
Identifier
52
53
i
<
Node {
  type: 'Literal',
  start: 56,
  end: 62,
  value: 100000,
  raw: '100000' }
Literal
56
62
100000
100000
Node {
  type: 'UpdateExpression',
  start: 64,
  end: 67,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 66, end: 67, name: 'i' } }
UpdateExpression
64
67
++
true
Node { type: 'Identifier', start: 66, end: 67, name: 'i' }
Identifier
66
67
i
Node {
  type: 'BlockStatement',
  start: 69,
  end: 215,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 75,
       end: 94,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 99,
       end: 213,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
69
215
[ Node {
    type: 'VariableDeclaration',
    start: 75,
    end: 94,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 99,
    end: 213,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 103,
       end: 120,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 130, end: 213, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 75,
  end: 94,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 79,
       end: 93,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
75
94
[ Node {
    type: 'VariableDeclarator',
    start: 79,
    end: 93,
    id: Node { type: 'Identifier', start: 79, end: 85, name: 'result' },
    init: 
     Node {
       type: 'CallExpression',
       start: 88,
       end: 93,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'VariableDeclarator',
  start: 79,
  end: 93,
  id: Node { type: 'Identifier', start: 79, end: 85, name: 'result' },
  init: 
   Node {
     type: 'CallExpression',
     start: 88,
     end: 93,
     callee: Node { type: 'Identifier', start: 88, end: 91, name: 'foo' },
     arguments: [] } }
VariableDeclarator
79
93
Node { type: 'Identifier', start: 79, end: 85, name: 'result' }
Identifier
79
85
result
Node {
  type: 'CallExpression',
  start: 88,
  end: 93,
  callee: Node { type: 'Identifier', start: 88, end: 91, name: 'foo' },
  arguments: [] }
CallExpression
88
93
Node { type: 'Identifier', start: 88, end: 91, name: 'foo' }
Identifier
88
91
foo
[]
var
Node {
  type: 'IfStatement',
  start: 99,
  end: 213,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 103,
     end: 120,
     left: Node { type: 'Identifier', start: 103, end: 109, name: 'result' },
     operator: '!==',
     right: 
      Node {
        type: 'UnaryExpression',
        start: 114,
        end: 120,
        operator: 'void',
        prefix: true,
        argument: [Node] } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 130,
     end: 213,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 136,
        end: 212,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
99
213
Node {
  type: 'BinaryExpression',
  start: 103,
  end: 120,
  left: Node { type: 'Identifier', start: 103, end: 109, name: 'result' },
  operator: '!==',
  right: 
   Node {
     type: 'UnaryExpression',
     start: 114,
     end: 120,
     operator: 'void',
     prefix: true,
     argument: Node { type: 'Literal', start: 119, end: 120, value: 0, raw: '0' } } }
BinaryExpression
103
120
Node { type: 'Identifier', start: 103, end: 109, name: 'result' }
Identifier
103
109
result
!==
Node {
  type: 'UnaryExpression',
  start: 114,
  end: 120,
  operator: 'void',
  prefix: true,
  argument: Node { type: 'Literal', start: 119, end: 120, value: 0, raw: '0' } }
UnaryExpression
114
120
void
true
Node { type: 'Literal', start: 119, end: 120, value: 0, raw: '0' }
Literal
119
120
0
0
Node {
  type: 'ThrowStatement',
  start: 130,
  end: 213,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 136,
     end: 212,
     left: 
      Node {
        type: 'Literal',
        start: 136,
        end: 203,
        value: 'You broke JSC so hard that even the empty function doesn\'t work: ',
        raw: '"You broke JSC so hard that even the empty function doesn\'t work: "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 206, end: 212, name: 'result' } } }
ThrowStatement
130
213
Node {
  type: 'BinaryExpression',
  start: 136,
  end: 212,
  left: 
   Node {
     type: 'Literal',
     start: 136,
     end: 203,
     value: 'You broke JSC so hard that even the empty function doesn\'t work: ',
     raw: '"You broke JSC so hard that even the empty function doesn\'t work: "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 206, end: 212, name: 'result' } }
BinaryExpression
136
212
Node {
  type: 'Literal',
  start: 136,
  end: 203,
  value: 'You broke JSC so hard that even the empty function doesn\'t work: ',
  raw: '"You broke JSC so hard that even the empty function doesn\'t work: "' }
Literal
136
203
You broke JSC so hard that even the empty function doesn't work: 
"You broke JSC so hard that even the empty function doesn't work: "
+
Node { type: 'Identifier', start: 206, end: 212, name: 'result' }
Identifier
206
212
result
null
[+] Exception: empty-function.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 133,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 0,
       end: 29,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 30,
       end: 132,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
133
[ Node {
    type: 'VariableDeclaration',
    start: 0,
    end: 29,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 30,
    end: 132,
    test: 
     Node {
       type: 'LogicalExpression',
       start: 34,
       end: 74,
       left: [Node],
       operator: '||',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 81, end: 132, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 0,
  end: 29,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 4,
       end: 28,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
0
29
[ Node {
    type: 'VariableDeclarator',
    start: 4,
    end: 28,
    id: Node { type: 'Identifier', start: 4, end: 11, name: 'splited' },
    init: 
     Node {
       type: 'CallExpression',
       start: 14,
       end: 28,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 4,
  end: 28,
  id: Node { type: 'Identifier', start: 4, end: 11, name: 'splited' },
  init: 
   Node {
     type: 'CallExpression',
     start: 14,
     end: 28,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 14,
        end: 23,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [ [Node] ] } }
VariableDeclarator
4
28
Node { type: 'Identifier', start: 4, end: 11, name: 'splited' }
Identifier
4
11
splited
Node {
  type: 'CallExpression',
  start: 14,
  end: 28,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 14,
     end: 23,
     object: Node { type: 'Literal', start: 14, end: 17, value: 'a', raw: '"a"' },
     property: Node { type: 'Identifier', start: 18, end: 23, name: 'split' },
     computed: false },
  arguments: 
   [ Node {
       type: 'Literal',
       start: 24,
       end: 27,
       value: /$/,
       raw: '/$/',
       regex: [Object] } ] }
CallExpression
14
28
Node {
  type: 'MemberExpression',
  start: 14,
  end: 23,
  object: Node { type: 'Literal', start: 14, end: 17, value: 'a', raw: '"a"' },
  property: Node { type: 'Identifier', start: 18, end: 23, name: 'split' },
  computed: false }
MemberExpression
14
23
Node { type: 'Literal', start: 14, end: 17, value: 'a', raw: '"a"' }
Literal
14
17
a
"a"
Node { type: 'Identifier', start: 18, end: 23, name: 'split' }
Identifier
18
23
split
false
[ Node {
    type: 'Literal',
    start: 24,
    end: 27,
    value: /$/,
    raw: '/$/',
    regex: { pattern: '$', flags: '' } } ]
Node {
  type: 'Literal',
  start: 24,
  end: 27,
  value: /$/,
  raw: '/$/',
  regex: { pattern: '$', flags: '' } }
Literal
24
27
/$/
/$/
{ pattern: '$', flags: '' }
$

var
Node {
  type: 'IfStatement',
  start: 30,
  end: 132,
  test: 
   Node {
     type: 'LogicalExpression',
     start: 34,
     end: 74,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 34,
        end: 53,
        left: [Node],
        operator: '!=',
        right: [Node] },
     operator: '||',
     right: 
      Node {
        type: 'BinaryExpression',
        start: 57,
        end: 74,
        left: [Node],
        operator: '!=',
        right: [Node] } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 81,
     end: 132,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 87,
        end: 131,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
30
132
Node {
  type: 'LogicalExpression',
  start: 34,
  end: 74,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 34,
     end: 53,
     left: 
      Node {
        type: 'MemberExpression',
        start: 34,
        end: 48,
        object: [Node],
        property: [Node],
        computed: false },
     operator: '!=',
     right: Node { type: 'Literal', start: 52, end: 53, value: 1, raw: '1' } },
  operator: '||',
  right: 
   Node {
     type: 'BinaryExpression',
     start: 57,
     end: 74,
     left: 
      Node {
        type: 'MemberExpression',
        start: 57,
        end: 67,
        object: [Node],
        property: [Node],
        computed: true },
     operator: '!=',
     right: Node { type: 'Literal', start: 71, end: 74, value: 'a', raw: '"a"' } } }
LogicalExpression
34
74
Node {
  type: 'BinaryExpression',
  start: 34,
  end: 53,
  left: 
   Node {
     type: 'MemberExpression',
     start: 34,
     end: 48,
     object: Node { type: 'Identifier', start: 34, end: 41, name: 'splited' },
     property: Node { type: 'Identifier', start: 42, end: 48, name: 'length' },
     computed: false },
  operator: '!=',
  right: Node { type: 'Literal', start: 52, end: 53, value: 1, raw: '1' } }
BinaryExpression
34
53
Node {
  type: 'MemberExpression',
  start: 34,
  end: 48,
  object: Node { type: 'Identifier', start: 34, end: 41, name: 'splited' },
  property: Node { type: 'Identifier', start: 42, end: 48, name: 'length' },
  computed: false }
MemberExpression
34
48
Node { type: 'Identifier', start: 34, end: 41, name: 'splited' }
Identifier
34
41
splited
Node { type: 'Identifier', start: 42, end: 48, name: 'length' }
Identifier
42
48
length
false
!=
Node { type: 'Literal', start: 52, end: 53, value: 1, raw: '1' }
Literal
52
53
1
1
||
Node {
  type: 'BinaryExpression',
  start: 57,
  end: 74,
  left: 
   Node {
     type: 'MemberExpression',
     start: 57,
     end: 67,
     object: Node { type: 'Identifier', start: 57, end: 64, name: 'splited' },
     property: Node { type: 'Literal', start: 65, end: 66, value: 0, raw: '0' },
     computed: true },
  operator: '!=',
  right: Node { type: 'Literal', start: 71, end: 74, value: 'a', raw: '"a"' } }
BinaryExpression
57
74
Node {
  type: 'MemberExpression',
  start: 57,
  end: 67,
  object: Node { type: 'Identifier', start: 57, end: 64, name: 'splited' },
  property: Node { type: 'Literal', start: 65, end: 66, value: 0, raw: '0' },
  computed: true }
MemberExpression
57
67
Node { type: 'Identifier', start: 57, end: 64, name: 'splited' }
Identifier
57
64
splited
Node { type: 'Literal', start: 65, end: 66, value: 0, raw: '0' }
Literal
65
66
0
0
true
!=
Node { type: 'Literal', start: 71, end: 74, value: 'a', raw: '"a"' }
Literal
71
74
a
"a"
Node {
  type: 'ThrowStatement',
  start: 81,
  end: 132,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 87,
     end: 131,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 87,
        end: 121,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Identifier', start: 124, end: 131, name: 'splited' } } }
ThrowStatement
81
132
Node {
  type: 'BinaryExpression',
  start: 87,
  end: 131,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 87,
     end: 121,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 87,
        end: 113,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: 
      Node {
        type: 'Literal',
        start: 116,
        end: 121,
        value: ' = ',
        raw: '" = "' } },
  operator: '+',
  right: Node { type: 'Identifier', start: 124, end: 131, name: 'splited' } }
BinaryExpression
87
131
Node {
  type: 'BinaryExpression',
  start: 87,
  end: 121,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 87,
     end: 113,
     left: 
      Node {
        type: 'Literal',
        start: 87,
        end: 96,
        value: 'Error: ',
        raw: '"Error: "' },
     operator: '+',
     right: 
      Node {
        type: 'MemberExpression',
        start: 99,
        end: 113,
        object: [Node],
        property: [Node],
        computed: false } },
  operator: '+',
  right: 
   Node {
     type: 'Literal',
     start: 116,
     end: 121,
     value: ' = ',
     raw: '" = "' } }
BinaryExpression
87
121
Node {
  type: 'BinaryExpression',
  start: 87,
  end: 113,
  left: 
   Node {
     type: 'Literal',
     start: 87,
     end: 96,
     value: 'Error: ',
     raw: '"Error: "' },
  operator: '+',
  right: 
   Node {
     type: 'MemberExpression',
     start: 99,
     end: 113,
     object: Node { type: 'Identifier', start: 99, end: 106, name: 'splited' },
     property: Node { type: 'Identifier', start: 107, end: 113, name: 'length' },
     computed: false } }
BinaryExpression
87
113
Node {
  type: 'Literal',
  start: 87,
  end: 96,
  value: 'Error: ',
  raw: '"Error: "' }
Literal
87
96
Error: 
"Error: "
+
Node {
  type: 'MemberExpression',
  start: 99,
  end: 113,
  object: Node { type: 'Identifier', start: 99, end: 106, name: 'splited' },
  property: Node { type: 'Identifier', start: 107, end: 113, name: 'length' },
  computed: false }
MemberExpression
99
113
Node { type: 'Identifier', start: 99, end: 106, name: 'splited' }
Identifier
99
106
splited
Node { type: 'Identifier', start: 107, end: 113, name: 'length' }
Identifier
107
113
length
false
+
Node {
  type: 'Literal',
  start: 116,
  end: 121,
  value: ' = ',
  raw: '" = "' }
Literal
116
121
 = 
" = "
+
Node { type: 'Identifier', start: 124, end: 131, name: 'splited' }
Identifier
124
131
splited
null
[+] Exception: empty_eos_regex_split.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 336,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 117,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 119,
       end: 335,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
336
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 117,
    id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 36, end: 117, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 119,
    end: 335,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 124,
       end: 133,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 135,
       end: 142,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 144,
       end: 147,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 149, end: 335, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 117,
  id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
     Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ],
  body: Node { type: 'BlockStatement', start: 36, end: 117, body: [ [Node] ] } }
FunctionDeclaration
0
117
Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' }
Identifier
9
17
shouldBe
false
false
false
[ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
  Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ]
Node { type: 'Identifier', start: 18, end: 24, name: 'actual' }
Identifier
18
24
actual
Node { type: 'Identifier', start: 26, end: 34, name: 'expected' }
Identifier
26
34
expected
Node {
  type: 'BlockStatement',
  start: 36,
  end: 117,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 42,
       end: 115,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
36
117
[ Node {
    type: 'IfStatement',
    start: 42,
    end: 115,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 46,
       end: 65,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 75, end: 115, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 42,
  end: 115,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 46,
     end: 65,
     left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
     operator: '!==',
     right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 75,
     end: 115,
     argument: 
      Node {
        type: 'NewExpression',
        start: 81,
        end: 114,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
42
115
Node {
  type: 'BinaryExpression',
  start: 46,
  end: 65,
  left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
  operator: '!==',
  right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } }
BinaryExpression
46
65
Node { type: 'Identifier', start: 46, end: 52, name: 'actual' }
Identifier
46
52
actual
!==
Node { type: 'Identifier', start: 57, end: 65, name: 'expected' }
Identifier
57
65
expected
Node {
  type: 'ThrowStatement',
  start: 75,
  end: 115,
  argument: 
   Node {
     type: 'NewExpression',
     start: 81,
     end: 114,
     callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
75
115
Node {
  type: 'NewExpression',
  start: 81,
  end: 114,
  callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
  arguments: 
   [ Node {
       type: 'BinaryExpression',
       start: 91,
       end: 113,
       left: [Node],
       operator: '+',
       right: [Node] } ] }
NewExpression
81
114
Node { type: 'Identifier', start: 85, end: 90, name: 'Error' }
Identifier
85
90
Error
[ Node {
    type: 'BinaryExpression',
    start: 91,
    end: 113,
    left: 
     Node {
       type: 'Literal',
       start: 91,
       end: 104,
       value: 'bad value: ',
       raw: '\'bad value: \'' },
    operator: '+',
    right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } } ]
Node {
  type: 'BinaryExpression',
  start: 91,
  end: 113,
  left: 
   Node {
     type: 'Literal',
     start: 91,
     end: 104,
     value: 'bad value: ',
     raw: '\'bad value: \'' },
  operator: '+',
  right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } }
BinaryExpression
91
113
Node {
  type: 'Literal',
  start: 91,
  end: 104,
  value: 'bad value: ',
  raw: '\'bad value: \'' }
Literal
91
104
bad value: 
'bad value: '
+
Node { type: 'Identifier', start: 107, end: 113, name: 'actual' }
Identifier
107
113
actual
null
[+] Exception: encode-decode-ascii.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 634,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 117,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 119,
       end: 197,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 199,
       end: 278,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 280,
       end: 368,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 370,
       end: 633,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
634
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 117,
    id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 36, end: 117, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 119,
    end: 197,
    id: 
     Node {
       type: 'Identifier',
       start: 128,
       end: 142,
       name: 'isLowSurrogate' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 149, end: 197, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 199,
    end: 278,
    id: 
     Node {
       type: 'Identifier',
       start: 208,
       end: 223,
       name: 'isHighSurrogate' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 230, end: 278, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 280,
    end: 368,
    id: Node { type: 'Identifier', start: 289, end: 300, name: 'isSurrogate' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 307, end: 368, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 370,
    end: 633,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 375,
       end: 386,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 388,
       end: 398,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 400,
       end: 403,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 405, end: 633, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 117,
  id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
     Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ],
  body: Node { type: 'BlockStatement', start: 36, end: 117, body: [ [Node] ] } }
FunctionDeclaration
0
117
Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' }
Identifier
9
17
shouldBe
false
false
false
[ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
  Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ]
Node { type: 'Identifier', start: 18, end: 24, name: 'actual' }
Identifier
18
24
actual
Node { type: 'Identifier', start: 26, end: 34, name: 'expected' }
Identifier
26
34
expected
Node {
  type: 'BlockStatement',
  start: 36,
  end: 117,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 42,
       end: 115,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
36
117
[ Node {
    type: 'IfStatement',
    start: 42,
    end: 115,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 46,
       end: 65,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 75, end: 115, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 42,
  end: 115,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 46,
     end: 65,
     left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
     operator: '!==',
     right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 75,
     end: 115,
     argument: 
      Node {
        type: 'NewExpression',
        start: 81,
        end: 114,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
42
115
Node {
  type: 'BinaryExpression',
  start: 46,
  end: 65,
  left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
  operator: '!==',
  right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } }
BinaryExpression
46
65
Node { type: 'Identifier', start: 46, end: 52, name: 'actual' }
Identifier
46
52
actual
!==
Node { type: 'Identifier', start: 57, end: 65, name: 'expected' }
Identifier
57
65
expected
Node {
  type: 'ThrowStatement',
  start: 75,
  end: 115,
  argument: 
   Node {
     type: 'NewExpression',
     start: 81,
     end: 114,
     callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
75
115
Node {
  type: 'NewExpression',
  start: 81,
  end: 114,
  callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
  arguments: 
   [ Node {
       type: 'BinaryExpression',
       start: 91,
       end: 113,
       left: [Node],
       operator: '+',
       right: [Node] } ] }
NewExpression
81
114
Node { type: 'Identifier', start: 85, end: 90, name: 'Error' }
Identifier
85
90
Error
[ Node {
    type: 'BinaryExpression',
    start: 91,
    end: 113,
    left: 
     Node {
       type: 'Literal',
       start: 91,
       end: 104,
       value: 'bad value: ',
       raw: '\'bad value: \'' },
    operator: '+',
    right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } } ]
Node {
  type: 'BinaryExpression',
  start: 91,
  end: 113,
  left: 
   Node {
     type: 'Literal',
     start: 91,
     end: 104,
     value: 'bad value: ',
     raw: '\'bad value: \'' },
  operator: '+',
  right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } }
BinaryExpression
91
113
Node {
  type: 'Literal',
  start: 91,
  end: 104,
  value: 'bad value: ',
  raw: '\'bad value: \'' }
Literal
91
104
bad value: 
'bad value: '
+
Node { type: 'Identifier', start: 107, end: 113, name: 'actual' }
Identifier
107
113
actual
null
[+] Exception: encode-decode-unicode.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 513,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 117,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 119,
       end: 207,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 209,
       end: 288,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 290,
       end: 512,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
513
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 117,
    id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 36, end: 117, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 119,
    end: 207,
    id: 
     Node {
       type: 'Identifier',
       start: 128,
       end: 143,
       name: 'toHighSurrogate' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 150, end: 207, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 209,
    end: 288,
    id: 
     Node {
       type: 'Identifier',
       start: 218,
       end: 232,
       name: 'toLowSurrogate' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 239, end: 288, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 290,
    end: 512,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 295,
       end: 310,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 312,
       end: 324,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 326,
       end: 329,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 331, end: 512, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 117,
  id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
     Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ],
  body: Node { type: 'BlockStatement', start: 36, end: 117, body: [ [Node] ] } }
FunctionDeclaration
0
117
Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' }
Identifier
9
17
shouldBe
false
false
false
[ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
  Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ]
Node { type: 'Identifier', start: 18, end: 24, name: 'actual' }
Identifier
18
24
actual
Node { type: 'Identifier', start: 26, end: 34, name: 'expected' }
Identifier
26
34
expected
Node {
  type: 'BlockStatement',
  start: 36,
  end: 117,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 42,
       end: 115,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
36
117
[ Node {
    type: 'IfStatement',
    start: 42,
    end: 115,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 46,
       end: 65,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 75, end: 115, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 42,
  end: 115,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 46,
     end: 65,
     left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
     operator: '!==',
     right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 75,
     end: 115,
     argument: 
      Node {
        type: 'NewExpression',
        start: 81,
        end: 114,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
42
115
Node {
  type: 'BinaryExpression',
  start: 46,
  end: 65,
  left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
  operator: '!==',
  right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } }
BinaryExpression
46
65
Node { type: 'Identifier', start: 46, end: 52, name: 'actual' }
Identifier
46
52
actual
!==
Node { type: 'Identifier', start: 57, end: 65, name: 'expected' }
Identifier
57
65
expected
Node {
  type: 'ThrowStatement',
  start: 75,
  end: 115,
  argument: 
   Node {
     type: 'NewExpression',
     start: 81,
     end: 114,
     callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
75
115
Node {
  type: 'NewExpression',
  start: 81,
  end: 114,
  callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
  arguments: 
   [ Node {
       type: 'BinaryExpression',
       start: 91,
       end: 113,
       left: [Node],
       operator: '+',
       right: [Node] } ] }
NewExpression
81
114
Node { type: 'Identifier', start: 85, end: 90, name: 'Error' }
Identifier
85
90
Error
[ Node {
    type: 'BinaryExpression',
    start: 91,
    end: 113,
    left: 
     Node {
       type: 'Literal',
       start: 91,
       end: 104,
       value: 'bad value: ',
       raw: '\'bad value: \'' },
    operator: '+',
    right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } } ]
Node {
  type: 'BinaryExpression',
  start: 91,
  end: 113,
  left: 
   Node {
     type: 'Literal',
     start: 91,
     end: 104,
     value: 'bad value: ',
     raw: '\'bad value: \'' },
  operator: '+',
  right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } }
BinaryExpression
91
113
Node {
  type: 'Literal',
  start: 91,
  end: 104,
  value: 'bad value: ',
  raw: '\'bad value: \'' }
Literal
91
104
bad value: 
'bad value: '
+
Node { type: 'Identifier', start: 107, end: 113, name: 'actual' }
Identifier
107
113
actual
null
[+] Exception: encode-decode-uri-component-surrogates.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 495,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 117,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 119,
       end: 207,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 209,
       end: 288,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 290,
       end: 494,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
495
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 117,
    id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 36, end: 117, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 119,
    end: 207,
    id: 
     Node {
       type: 'Identifier',
       start: 128,
       end: 143,
       name: 'toHighSurrogate' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 150, end: 207, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 209,
    end: 288,
    id: 
     Node {
       type: 'Identifier',
       start: 218,
       end: 232,
       name: 'toLowSurrogate' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 239, end: 288, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 290,
    end: 494,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 295,
       end: 310,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 312,
       end: 324,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 326,
       end: 329,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 331, end: 494, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 117,
  id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
     Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ],
  body: Node { type: 'BlockStatement', start: 36, end: 117, body: [ [Node] ] } }
FunctionDeclaration
0
117
Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' }
Identifier
9
17
shouldBe
false
false
false
[ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
  Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ]
Node { type: 'Identifier', start: 18, end: 24, name: 'actual' }
Identifier
18
24
actual
Node { type: 'Identifier', start: 26, end: 34, name: 'expected' }
Identifier
26
34
expected
Node {
  type: 'BlockStatement',
  start: 36,
  end: 117,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 42,
       end: 115,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
36
117
[ Node {
    type: 'IfStatement',
    start: 42,
    end: 115,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 46,
       end: 65,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 75, end: 115, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 42,
  end: 115,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 46,
     end: 65,
     left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
     operator: '!==',
     right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 75,
     end: 115,
     argument: 
      Node {
        type: 'NewExpression',
        start: 81,
        end: 114,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
42
115
Node {
  type: 'BinaryExpression',
  start: 46,
  end: 65,
  left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
  operator: '!==',
  right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } }
BinaryExpression
46
65
Node { type: 'Identifier', start: 46, end: 52, name: 'actual' }
Identifier
46
52
actual
!==
Node { type: 'Identifier', start: 57, end: 65, name: 'expected' }
Identifier
57
65
expected
Node {
  type: 'ThrowStatement',
  start: 75,
  end: 115,
  argument: 
   Node {
     type: 'NewExpression',
     start: 81,
     end: 114,
     callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
75
115
Node {
  type: 'NewExpression',
  start: 81,
  end: 114,
  callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
  arguments: 
   [ Node {
       type: 'BinaryExpression',
       start: 91,
       end: 113,
       left: [Node],
       operator: '+',
       right: [Node] } ] }
NewExpression
81
114
Node { type: 'Identifier', start: 85, end: 90, name: 'Error' }
Identifier
85
90
Error
[ Node {
    type: 'BinaryExpression',
    start: 91,
    end: 113,
    left: 
     Node {
       type: 'Literal',
       start: 91,
       end: 104,
       value: 'bad value: ',
       raw: '\'bad value: \'' },
    operator: '+',
    right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } } ]
Node {
  type: 'BinaryExpression',
  start: 91,
  end: 113,
  left: 
   Node {
     type: 'Literal',
     start: 91,
     end: 104,
     value: 'bad value: ',
     raw: '\'bad value: \'' },
  operator: '+',
  right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } }
BinaryExpression
91
113
Node {
  type: 'Literal',
  start: 91,
  end: 104,
  value: 'bad value: ',
  raw: '\'bad value: \'' }
Literal
91
104
bad value: 
'bad value: '
+
Node { type: 'Identifier', start: 107, end: 113, name: 'actual' }
Identifier
107
113
actual
null
[+] Exception: encode-decode-uri-surrogates.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 576,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 117,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 119,
       end: 161,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 162,
       end: 195,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 196,
       end: 226,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 228,
       end: 270,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 271,
       end: 304,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 305,
       end: 337,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 339,
       end: 384,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 385,
       end: 421,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 422,
       end: 455,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 457,
       end: 502,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 503,
       end: 539,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 540,
       end: 575,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
576
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 117,
    id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 36, end: 117, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 119,
    end: 161,
    expression: 
     Node {
       type: 'CallExpression',
       start: 119,
       end: 160,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 162,
    end: 195,
    expression: 
     Node {
       type: 'CallExpression',
       start: 162,
       end: 194,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 196,
    end: 226,
    expression: 
     Node {
       type: 'CallExpression',
       start: 196,
       end: 225,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 228,
    end: 270,
    expression: 
     Node {
       type: 'CallExpression',
       start: 228,
       end: 269,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 271,
    end: 304,
    expression: 
     Node {
       type: 'CallExpression',
       start: 271,
       end: 303,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 305,
    end: 337,
    expression: 
     Node {
       type: 'CallExpression',
       start: 305,
       end: 336,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 339,
    end: 384,
    expression: 
     Node {
       type: 'CallExpression',
       start: 339,
       end: 383,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 385,
    end: 421,
    expression: 
     Node {
       type: 'CallExpression',
       start: 385,
       end: 420,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 422,
    end: 455,
    expression: 
     Node {
       type: 'CallExpression',
       start: 422,
       end: 454,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 457,
    end: 502,
    expression: 
     Node {
       type: 'CallExpression',
       start: 457,
       end: 501,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 503,
    end: 539,
    expression: 
     Node {
       type: 'CallExpression',
       start: 503,
       end: 538,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 540,
    end: 575,
    expression: 
     Node {
       type: 'CallExpression',
       start: 540,
       end: 574,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 117,
  id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
     Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ],
  body: Node { type: 'BlockStatement', start: 36, end: 117, body: [ [Node] ] } }
FunctionDeclaration
0
117
Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' }
Identifier
9
17
shouldBe
false
false
false
[ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
  Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ]
Node { type: 'Identifier', start: 18, end: 24, name: 'actual' }
Identifier
18
24
actual
Node { type: 'Identifier', start: 26, end: 34, name: 'expected' }
Identifier
26
34
expected
Node {
  type: 'BlockStatement',
  start: 36,
  end: 117,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 42,
       end: 115,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
36
117
[ Node {
    type: 'IfStatement',
    start: 42,
    end: 115,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 46,
       end: 65,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 75, end: 115, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 42,
  end: 115,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 46,
     end: 65,
     left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
     operator: '!==',
     right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 75,
     end: 115,
     argument: 
      Node {
        type: 'NewExpression',
        start: 81,
        end: 114,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
42
115
Node {
  type: 'BinaryExpression',
  start: 46,
  end: 65,
  left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
  operator: '!==',
  right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } }
BinaryExpression
46
65
Node { type: 'Identifier', start: 46, end: 52, name: 'actual' }
Identifier
46
52
actual
!==
Node { type: 'Identifier', start: 57, end: 65, name: 'expected' }
Identifier
57
65
expected
Node {
  type: 'ThrowStatement',
  start: 75,
  end: 115,
  argument: 
   Node {
     type: 'NewExpression',
     start: 81,
     end: 114,
     callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
75
115
Node {
  type: 'NewExpression',
  start: 81,
  end: 114,
  callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
  arguments: 
   [ Node {
       type: 'BinaryExpression',
       start: 91,
       end: 113,
       left: [Node],
       operator: '+',
       right: [Node] } ] }
NewExpression
81
114
Node { type: 'Identifier', start: 85, end: 90, name: 'Error' }
Identifier
85
90
Error
[ Node {
    type: 'BinaryExpression',
    start: 91,
    end: 113,
    left: 
     Node {
       type: 'Literal',
       start: 91,
       end: 104,
       value: 'bad value: ',
       raw: '\'bad value: \'' },
    operator: '+',
    right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } } ]
Node {
  type: 'BinaryExpression',
  start: 91,
  end: 113,
  left: 
   Node {
     type: 'Literal',
     start: 91,
     end: 104,
     value: 'bad value: ',
     raw: '\'bad value: \'' },
  operator: '+',
  right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } }
BinaryExpression
91
113
Node {
  type: 'Literal',
  start: 91,
  end: 104,
  value: 'bad value: ',
  raw: '\'bad value: \'' }
Literal
91
104
bad value: 
'bad value: '
+
Node { type: 'Identifier', start: 107, end: 113, name: 'actual' }
Identifier
107
113
actual
null
[+] Exception: encode-decode-zero.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1724,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 1,
       end: 150,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'IfStatement',
       start: 151,
       end: 233,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'FunctionDeclaration',
       start: 235,
       end: 390,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'IfStatement',
       start: 391,
       end: 472,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'FunctionDeclaration',
       start: 474,
       end: 626,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'IfStatement',
       start: 627,
       end: 713,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'FunctionDeclaration',
       start: 715,
       end: 790,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'IfStatement',
       start: 791,
       end: 872,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'FunctionDeclaration',
       start: 874,
       end: 949,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'IfStatement',
       start: 950,
       end: 1036,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'FunctionDeclaration',
       start: 1038,
       end: 1114,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'IfStatement',
       start: 1115,
       end: 1198,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'FunctionDeclaration',
       start: 1200,
       end: 1277,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'IfStatement',
       start: 1278,
       end: 1361,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'FunctionDeclaration',
       start: 1363,
       end: 1436,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'IfStatement',
       start: 1437,
       end: 1516,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1518,
       end: 1617,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1619,
       end: 1723,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
1724
[ Node {
    type: 'FunctionDeclaration',
    start: 1,
    end: 150,
    id: Node { type: 'Identifier', start: 10, end: 13, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 16, end: 150, body: [Array] } },
  Node {
    type: 'IfStatement',
    start: 151,
    end: 233,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 155,
       end: 183,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 189, end: 233, argument: [Node] },
    alternate: null },
  Node {
    type: 'FunctionDeclaration',
    start: 235,
    end: 390,
    id: Node { type: 'Identifier', start: 244, end: 247, name: 'bar' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 250, end: 390, body: [Array] } },
  Node {
    type: 'IfStatement',
    start: 391,
    end: 472,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 395,
       end: 423,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 429, end: 472, argument: [Node] },
    alternate: null },
  Node {
    type: 'FunctionDeclaration',
    start: 474,
    end: 626,
    id: Node { type: 'Identifier', start: 483, end: 486, name: 'baz' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 489, end: 626, body: [Array] } },
  Node {
    type: 'IfStatement',
    start: 627,
    end: 713,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 631,
       end: 664,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 670, end: 713, argument: [Node] },
    alternate: null },
  Node {
    type: 'FunctionDeclaration',
    start: 715,
    end: 790,
    id: Node { type: 'Identifier', start: 724, end: 727, name: 'jaz' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 730, end: 790, body: [Array] } },
  Node {
    type: 'IfStatement',
    start: 791,
    end: 872,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 795,
       end: 823,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 829, end: 872, argument: [Node] },
    alternate: null },
  Node {
    type: 'FunctionDeclaration',
    start: 874,
    end: 949,
    id: Node { type: 'Identifier', start: 883, end: 886, name: 'vaz' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 889, end: 949, body: [Array] } },
  Node {
    type: 'IfStatement',
    start: 950,
    end: 1036,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 954,
       end: 987,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 993,
       end: 1036,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'FunctionDeclaration',
    start: 1038,
    end: 1114,
    id: Node { type: 'Identifier', start: 1047, end: 1052, name: 'hello' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 1055, end: 1114, body: [Array] } },
  Node {
    type: 'IfStatement',
    start: 1115,
    end: 1198,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1119,
       end: 1149,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1155,
       end: 1198,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'FunctionDeclaration',
    start: 1200,
    end: 1277,
    id: Node { type: 'Identifier', start: 1209, end: 1214, name: 'world' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 1217, end: 1277, body: [Array] } },
  Node {
    type: 'IfStatement',
    start: 1278,
    end: 1361,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1282,
       end: 1312,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1318,
       end: 1361,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'FunctionDeclaration',
    start: 1363,
    end: 1436,
    id: Node { type: 'Identifier', start: 1372, end: 1373, name: 'a' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 1376, end: 1436, body: [Array] } },
  Node {
    type: 'IfStatement',
    start: 1437,
    end: 1516,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1441,
       end: 1467,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1473,
       end: 1516,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1518,
    end: 1617,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1522,
       end: 1567,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1573,
       end: 1617,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1619,
    end: 1723,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1623,
       end: 1673,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1679,
       end: 1723,
       argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 1,
  end: 150,
  id: Node { type: 'Identifier', start: 10, end: 13, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: 
   Node {
     type: 'BlockStatement',
     start: 16,
     end: 150,
     body: [ [Node], [Node], [Node], [Node], [Node] ] } }
FunctionDeclaration
1
150
Node { type: 'Identifier', start: 10, end: 13, name: 'foo' }
Identifier
10
13
foo
false
false
false
[]
Node {
  type: 'BlockStatement',
  start: 16,
  end: 150,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 22,
       end: 56,
       expression: [Node],
       directive: 'hello world i\'m not use strict.' },
     Node {
       type: 'FunctionDeclaration',
       start: 61,
       end: 102,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 107,
       end: 113,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 118,
       end: 131,
       expression: [Node] },
     Node {
       type: 'ReturnStatement',
       start: 136,
       end: 148,
       argument: [Node] } ] }
BlockStatement
16
150
[ Node {
    type: 'ExpressionStatement',
    start: 22,
    end: 56,
    expression: 
     Node {
       type: 'Literal',
       start: 22,
       end: 55,
       value: 'hello world i\'m not use strict.',
       raw: '"hello world i\'m not use strict."' },
    directive: 'hello world i\'m not use strict.' },
  Node {
    type: 'FunctionDeclaration',
    start: 61,
    end: 102,
    id: Node { type: 'Identifier', start: 70, end: 73, name: 'bar' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 76, end: 102, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 107,
    end: 113,
    expression: 
     Node {
       type: 'CallExpression',
       start: 107,
       end: 112,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 118,
    end: 131,
    expression: 
     Node {
       type: 'Literal',
       start: 118,
       end: 130,
       value: 'use strict',
       raw: '"use strict"' } },
  Node {
    type: 'ReturnStatement',
    start: 136,
    end: 148,
    argument: Node { type: 'ThisExpression', start: 143, end: 147 } } ]
Node {
  type: 'ExpressionStatement',
  start: 22,
  end: 56,
  expression: 
   Node {
     type: 'Literal',
     start: 22,
     end: 55,
     value: 'hello world i\'m not use strict.',
     raw: '"hello world i\'m not use strict."' },
  directive: 'hello world i\'m not use strict.' }
ExpressionStatement
22
56
Node {
  type: 'Literal',
  start: 22,
  end: 55,
  value: 'hello world i\'m not use strict.',
  raw: '"hello world i\'m not use strict."' }
Literal
22
55
hello world i'm not use strict.
"hello world i'm not use strict."
hello world i'm not use strict.
Node {
  type: 'FunctionDeclaration',
  start: 61,
  end: 102,
  id: Node { type: 'Identifier', start: 70, end: 73, name: 'bar' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 76, end: 102, body: [ [Node] ] } }
FunctionDeclaration
61
102
Node { type: 'Identifier', start: 70, end: 73, name: 'bar' }
Identifier
70
73
bar
false
false
false
[]
Node {
  type: 'BlockStatement',
  start: 76,
  end: 102,
  body: 
   [ Node { type: 'ReturnStatement', start: 86, end: 96, argument: [Node] } ] }
BlockStatement
76
102
[ Node {
    type: 'ReturnStatement',
    start: 86,
    end: 96,
    argument: Node { type: 'Literal', start: 93, end: 95, value: 25, raw: '25' } } ]
Node {
  type: 'ReturnStatement',
  start: 86,
  end: 96,
  argument: Node { type: 'Literal', start: 93, end: 95, value: 25, raw: '25' } }
ReturnStatement
86
96
Node { type: 'Literal', start: 93, end: 95, value: 25, raw: '25' }
Literal
93
95
25
25
Node {
  type: 'ExpressionStatement',
  start: 107,
  end: 113,
  expression: 
   Node {
     type: 'CallExpression',
     start: 107,
     end: 112,
     callee: Node { type: 'Identifier', start: 107, end: 110, name: 'bar' },
     arguments: [] } }
ExpressionStatement
107
113
Node {
  type: 'CallExpression',
  start: 107,
  end: 112,
  callee: Node { type: 'Identifier', start: 107, end: 110, name: 'bar' },
  arguments: [] }
CallExpression
107
112
Node { type: 'Identifier', start: 107, end: 110, name: 'bar' }
Identifier
107
110
bar
[]
Node {
  type: 'ExpressionStatement',
  start: 118,
  end: 131,
  expression: 
   Node {
     type: 'Literal',
     start: 118,
     end: 130,
     value: 'use strict',
     raw: '"use strict"' } }
ExpressionStatement
118
131
Node {
  type: 'Literal',
  start: 118,
  end: 130,
  value: 'use strict',
  raw: '"use strict"' }
Literal
118
130
use strict
"use strict"
Node {
  type: 'ReturnStatement',
  start: 136,
  end: 148,
  argument: Node { type: 'ThisExpression', start: 143, end: 147 } }
ReturnStatement
136
148
Node { type: 'ThisExpression', start: 143, end: 147 }
ThisExpression
143
147
Node {
  type: 'IfStatement',
  start: 151,
  end: 233,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 155,
     end: 183,
     left: 
      Node {
        type: 'CallExpression',
        start: 155,
        end: 174,
        callee: [Node],
        arguments: [Array] },
     operator: '!==',
     right: Node { type: 'ThisExpression', start: 179, end: 183 } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 189,
     end: 233,
     argument: 
      Node {
        type: 'NewExpression',
        start: 195,
        end: 232,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
151
233
Node {
  type: 'BinaryExpression',
  start: 155,
  end: 183,
  left: 
   Node {
     type: 'CallExpression',
     start: 155,
     end: 174,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 155,
        end: 163,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [ [Node] ] },
  operator: '!==',
  right: Node { type: 'ThisExpression', start: 179, end: 183 } }
BinaryExpression
155
183
Node {
  type: 'CallExpression',
  start: 155,
  end: 174,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 155,
     end: 163,
     object: Node { type: 'Identifier', start: 155, end: 158, name: 'foo' },
     property: Node { type: 'Identifier', start: 159, end: 163, name: 'call' },
     computed: false },
  arguments: 
   [ Node { type: 'Identifier', start: 164, end: 173, name: 'undefined' } ] }
CallExpression
155
174
Node {
  type: 'MemberExpression',
  start: 155,
  end: 163,
  object: Node { type: 'Identifier', start: 155, end: 158, name: 'foo' },
  property: Node { type: 'Identifier', start: 159, end: 163, name: 'call' },
  computed: false }
MemberExpression
155
163
Node { type: 'Identifier', start: 155, end: 158, name: 'foo' }
Identifier
155
158
foo
Node { type: 'Identifier', start: 159, end: 163, name: 'call' }
Identifier
159
163
call
false
[ Node { type: 'Identifier', start: 164, end: 173, name: 'undefined' } ]
Node { type: 'Identifier', start: 164, end: 173, name: 'undefined' }
Identifier
164
173
undefined
!==
Node { type: 'ThisExpression', start: 179, end: 183 }
ThisExpression
179
183
Node {
  type: 'ThrowStatement',
  start: 189,
  end: 233,
  argument: 
   Node {
     type: 'NewExpression',
     start: 195,
     end: 232,
     callee: Node { type: 'Identifier', start: 199, end: 204, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
189
233
Node {
  type: 'NewExpression',
  start: 195,
  end: 232,
  callee: Node { type: 'Identifier', start: 199, end: 204, name: 'Error' },
  arguments: 
   [ Node {
       type: 'Literal',
       start: 205,
       end: 231,
       value: 'Bad parsing strict mode.',
       raw: '"Bad parsing strict mode."' } ] }
NewExpression
195
232
Node { type: 'Identifier', start: 199, end: 204, name: 'Error' }
Identifier
199
204
Error
[ Node {
    type: 'Literal',
    start: 205,
    end: 231,
    value: 'Bad parsing strict mode.',
    raw: '"Bad parsing strict mode."' } ]
Node {
  type: 'Literal',
  start: 205,
  end: 231,
  value: 'Bad parsing strict mode.',
  raw: '"Bad parsing strict mode."' }
Literal
205
231
Bad parsing strict mode.
"Bad parsing strict mode."
null
[+] Exception: ensure-proper-strict-mode-parsing.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 844,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 146,
       end: 159,
       expression: [Node],
       directive: 'use strict' },
     Node {
       type: 'FunctionDeclaration',
       start: 161,
       end: 178,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 180,
       end: 232,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 233,
       end: 257,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 259,
       end: 316,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 317,
       end: 346,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 348,
       end: 368,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 369,
       end: 398,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 400,
       end: 478,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 480,
       end: 585,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ForStatement',
       start: 587,
       end: 843,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
844
[ Node {
    type: 'ExpressionStatement',
    start: 146,
    end: 159,
    expression: 
     Node {
       type: 'Literal',
       start: 146,
       end: 158,
       value: 'use strict',
       raw: '"use strict"' },
    directive: 'use strict' },
  Node {
    type: 'FunctionDeclaration',
    start: 161,
    end: 178,
    id: Node { type: 'Identifier', start: 170, end: 173, name: 'Foo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 176, end: 178, body: [] } },
  Node {
    type: 'FunctionDeclaration',
    start: 180,
    end: 232,
    id: 
     Node {
       type: 'Identifier',
       start: 189,
       end: 202,
       name: 'checkStrictEq' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 209, end: 232, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 233,
    end: 257,
    expression: 
     Node {
       type: 'CallExpression',
       start: 233,
       end: 256,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 259,
    end: 316,
    id: 
     Node {
       type: 'Identifier',
       start: 268,
       end: 286,
       name: 'checkStrictEqOther' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 293, end: 316, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 317,
    end: 346,
    expression: 
     Node {
       type: 'CallExpression',
       start: 317,
       end: 345,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 348,
    end: 368,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 369,
    end: 398,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 400,
    end: 478,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 404,
       end: 425,
       left: [Node],
       operator: '===',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 431, end: 478, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 480,
    end: 585,
    test: 
     Node {
       type: 'LogicalExpression',
       start: 484,
       end: 518,
       left: [Node],
       operator: '||',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 524, end: 585, argument: [Node] },
    alternate: null },
  Node {
    type: 'ForStatement',
    start: 587,
    end: 843,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 592,
       end: 601,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 603,
       end: 615,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 617,
       end: 620,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 622, end: 843, body: [Array] } } ]
Node {
  type: 'ExpressionStatement',
  start: 146,
  end: 159,
  expression: 
   Node {
     type: 'Literal',
     start: 146,
     end: 158,
     value: 'use strict',
     raw: '"use strict"' },
  directive: 'use strict' }
ExpressionStatement
146
159
Node {
  type: 'Literal',
  start: 146,
  end: 158,
  value: 'use strict',
  raw: '"use strict"' }
Literal
146
158
use strict
"use strict"
use strict
Node {
  type: 'FunctionDeclaration',
  start: 161,
  end: 178,
  id: Node { type: 'Identifier', start: 170, end: 173, name: 'Foo' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 176, end: 178, body: [] } }
FunctionDeclaration
161
178
Node { type: 'Identifier', start: 170, end: 173, name: 'Foo' }
Identifier
170
173
Foo
false
false
false
[]
Node { type: 'BlockStatement', start: 176, end: 178, body: [] }
BlockStatement
176
178
[]
Node {
  type: 'FunctionDeclaration',
  start: 180,
  end: 232,
  id: 
   Node {
     type: 'Identifier',
     start: 189,
     end: 202,
     name: 'checkStrictEq' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 203, end: 204, name: 'a' },
     Node { type: 'Identifier', start: 206, end: 207, name: 'b' } ],
  body: Node { type: 'BlockStatement', start: 209, end: 232, body: [ [Node] ] } }
FunctionDeclaration
180
232
Node {
  type: 'Identifier',
  start: 189,
  end: 202,
  name: 'checkStrictEq' }
Identifier
189
202
checkStrictEq
false
false
false
[ Node { type: 'Identifier', start: 203, end: 204, name: 'a' },
  Node { type: 'Identifier', start: 206, end: 207, name: 'b' } ]
Node { type: 'Identifier', start: 203, end: 204, name: 'a' }
Identifier
203
204
a
Node { type: 'Identifier', start: 206, end: 207, name: 'b' }
Identifier
206
207
b
Node {
  type: 'BlockStatement',
  start: 209,
  end: 232,
  body: 
   [ Node {
       type: 'ReturnStatement',
       start: 215,
       end: 230,
       argument: [Node] } ] }
BlockStatement
209
232
[ Node {
    type: 'ReturnStatement',
    start: 215,
    end: 230,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 222,
       end: 229,
       left: [Node],
       operator: '===',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 215,
  end: 230,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 222,
     end: 229,
     left: Node { type: 'Identifier', start: 222, end: 223, name: 'a' },
     operator: '===',
     right: Node { type: 'Identifier', start: 228, end: 229, name: 'b' } } }
ReturnStatement
215
230
Node {
  type: 'BinaryExpression',
  start: 222,
  end: 229,
  left: Node { type: 'Identifier', start: 222, end: 223, name: 'a' },
  operator: '===',
  right: Node { type: 'Identifier', start: 228, end: 229, name: 'b' } }
BinaryExpression
222
229
Node { type: 'Identifier', start: 222, end: 223, name: 'a' }
Identifier
222
223
a
===
Node { type: 'Identifier', start: 228, end: 229, name: 'b' }
Identifier
228
229
b
Node {
  type: 'ExpressionStatement',
  start: 233,
  end: 257,
  expression: 
   Node {
     type: 'CallExpression',
     start: 233,
     end: 256,
     callee: Node { type: 'Identifier', start: 233, end: 241, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
233
257
Node {
  type: 'CallExpression',
  start: 233,
  end: 256,
  callee: Node { type: 'Identifier', start: 233, end: 241, name: 'noInline' },
  arguments: 
   [ Node {
       type: 'Identifier',
       start: 242,
       end: 255,
       name: 'checkStrictEq' } ] }
CallExpression
233
256
Node { type: 'Identifier', start: 233, end: 241, name: 'noInline' }
Identifier
233
241
noInline
[ Node {
    type: 'Identifier',
    start: 242,
    end: 255,
    name: 'checkStrictEq' } ]
Node {
  type: 'Identifier',
  start: 242,
  end: 255,
  name: 'checkStrictEq' }
Identifier
242
255
checkStrictEq
Node {
  type: 'FunctionDeclaration',
  start: 259,
  end: 316,
  id: 
   Node {
     type: 'Identifier',
     start: 268,
     end: 286,
     name: 'checkStrictEqOther' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 287, end: 288, name: 'a' },
     Node { type: 'Identifier', start: 290, end: 291, name: 'b' } ],
  body: Node { type: 'BlockStatement', start: 293, end: 316, body: [ [Node] ] } }
FunctionDeclaration
259
316
Node {
  type: 'Identifier',
  start: 268,
  end: 286,
  name: 'checkStrictEqOther' }
Identifier
268
286
checkStrictEqOther
false
false
false
[ Node { type: 'Identifier', start: 287, end: 288, name: 'a' },
  Node { type: 'Identifier', start: 290, end: 291, name: 'b' } ]
Node { type: 'Identifier', start: 287, end: 288, name: 'a' }
Identifier
287
288
a
Node { type: 'Identifier', start: 290, end: 291, name: 'b' }
Identifier
290
291
b
Node {
  type: 'BlockStatement',
  start: 293,
  end: 316,
  body: 
   [ Node {
       type: 'ReturnStatement',
       start: 299,
       end: 314,
       argument: [Node] } ] }
BlockStatement
293
316
[ Node {
    type: 'ReturnStatement',
    start: 299,
    end: 314,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 306,
       end: 313,
       left: [Node],
       operator: '===',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 299,
  end: 314,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 306,
     end: 313,
     left: Node { type: 'Identifier', start: 306, end: 307, name: 'a' },
     operator: '===',
     right: Node { type: 'Identifier', start: 312, end: 313, name: 'b' } } }
ReturnStatement
299
314
Node {
  type: 'BinaryExpression',
  start: 306,
  end: 313,
  left: Node { type: 'Identifier', start: 306, end: 307, name: 'a' },
  operator: '===',
  right: Node { type: 'Identifier', start: 312, end: 313, name: 'b' } }
BinaryExpression
306
313
Node { type: 'Identifier', start: 306, end: 307, name: 'a' }
Identifier
306
307
a
===
Node { type: 'Identifier', start: 312, end: 313, name: 'b' }
Identifier
312
313
b
Node {
  type: 'ExpressionStatement',
  start: 317,
  end: 346,
  expression: 
   Node {
     type: 'CallExpression',
     start: 317,
     end: 345,
     callee: Node { type: 'Identifier', start: 317, end: 325, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
317
346
Node {
  type: 'CallExpression',
  start: 317,
  end: 345,
  callee: Node { type: 'Identifier', start: 317, end: 325, name: 'noInline' },
  arguments: 
   [ Node {
       type: 'Identifier',
       start: 326,
       end: 344,
       name: 'checkStrictEqOther' } ] }
CallExpression
317
345
Node { type: 'Identifier', start: 317, end: 325, name: 'noInline' }
Identifier
317
325
noInline
[ Node {
    type: 'Identifier',
    start: 326,
    end: 344,
    name: 'checkStrictEqOther' } ]
Node {
  type: 'Identifier',
  start: 326,
  end: 344,
  name: 'checkStrictEqOther' }
Identifier
326
344
checkStrictEqOther
Node {
  type: 'VariableDeclaration',
  start: 348,
  end: 368,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 352,
       end: 367,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
348
368
[ Node {
    type: 'VariableDeclarator',
    start: 352,
    end: 367,
    id: Node { type: 'Identifier', start: 352, end: 355, name: 'foo' },
    init: 
     Node {
       type: 'NewExpression',
       start: 358,
       end: 367,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'VariableDeclarator',
  start: 352,
  end: 367,
  id: Node { type: 'Identifier', start: 352, end: 355, name: 'foo' },
  init: 
   Node {
     type: 'NewExpression',
     start: 358,
     end: 367,
     callee: Node { type: 'Identifier', start: 362, end: 365, name: 'Foo' },
     arguments: [] } }
VariableDeclarator
352
367
Node { type: 'Identifier', start: 352, end: 355, name: 'foo' }
Identifier
352
355
foo
Node {
  type: 'NewExpression',
  start: 358,
  end: 367,
  callee: Node { type: 'Identifier', start: 362, end: 365, name: 'Foo' },
  arguments: [] }
NewExpression
358
367
Node { type: 'Identifier', start: 362, end: 365, name: 'Foo' }
Identifier
362
365
Foo
[]
var
Node {
  type: 'VariableDeclaration',
  start: 369,
  end: 398,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 373,
       end: 397,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
369
398
[ Node {
    type: 'VariableDeclarator',
    start: 373,
    end: 397,
    id: Node { type: 'Identifier', start: 373, end: 380, name: 'address' },
    init: 
     Node {
       type: 'CallExpression',
       start: 383,
       end: 397,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 373,
  end: 397,
  id: Node { type: 'Identifier', start: 373, end: 380, name: 'address' },
  init: 
   Node {
     type: 'CallExpression',
     start: 383,
     end: 397,
     callee: Node { type: 'Identifier', start: 383, end: 392, name: 'addressOf' },
     arguments: [ [Node] ] } }
VariableDeclarator
373
397
Node { type: 'Identifier', start: 373, end: 380, name: 'address' }
Identifier
373
380
address
Node {
  type: 'CallExpression',
  start: 383,
  end: 397,
  callee: Node { type: 'Identifier', start: 383, end: 392, name: 'addressOf' },
  arguments: 
   [ Node { type: 'Identifier', start: 393, end: 396, name: 'foo' } ] }
CallExpression
383
397
Node { type: 'Identifier', start: 383, end: 392, name: 'addressOf' }
Identifier
383
392
addressOf
[ Node { type: 'Identifier', start: 393, end: 396, name: 'foo' } ]
Node { type: 'Identifier', start: 393, end: 396, name: 'foo' }
Identifier
393
396
foo
var
Node {
  type: 'IfStatement',
  start: 400,
  end: 478,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 404,
     end: 425,
     left: Node { type: 'Identifier', start: 404, end: 411, name: 'address' },
     operator: '===',
     right: Node { type: 'Identifier', start: 416, end: 425, name: 'undefined' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 431,
     end: 478,
     argument: 
      Node {
        type: 'Literal',
        start: 437,
        end: 477,
        value: 'Error: address should not be undefined',
        raw: '"Error: address should not be undefined"' } },
  alternate: null }
IfStatement
400
478
Node {
  type: 'BinaryExpression',
  start: 404,
  end: 425,
  left: Node { type: 'Identifier', start: 404, end: 411, name: 'address' },
  operator: '===',
  right: Node { type: 'Identifier', start: 416, end: 425, name: 'undefined' } }
BinaryExpression
404
425
Node { type: 'Identifier', start: 404, end: 411, name: 'address' }
Identifier
404
411
address
===
Node { type: 'Identifier', start: 416, end: 425, name: 'undefined' }
Identifier
416
425
undefined
Node {
  type: 'ThrowStatement',
  start: 431,
  end: 478,
  argument: 
   Node {
     type: 'Literal',
     start: 437,
     end: 477,
     value: 'Error: address should not be undefined',
     raw: '"Error: address should not be undefined"' } }
ThrowStatement
431
478
Node {
  type: 'Literal',
  start: 437,
  end: 477,
  value: 'Error: address should not be undefined',
  raw: '"Error: address should not be undefined"' }
Literal
437
477
Error: address should not be undefined
"Error: address should not be undefined"
null
[+] Exception: equality-type-checking.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 3407,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 48,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 50,
       end: 71,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 73,
       end: 124,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 126,
       end: 150,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 152,
       end: 207,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 209,
       end: 236,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 238,
       end: 296,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 298,
       end: 328,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 330,
       end: 385,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 387,
       end: 413,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 415,
       end: 473,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 475,
       end: 504,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 506,
       end: 568,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 570,
       end: 602,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 604,
       end: 669,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 671,
       end: 701,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 703,
       end: 742,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 744,
       end: 763,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 765,
       end: 955,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 957,
       end: 1196,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 1198,
       end: 1455,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 1457,
       end: 1729,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 1731,
       end: 2015,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 2017,
       end: 2281,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 2283,
       end: 2565,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 2567,
       end: 2863,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 2865,
       end: 3175,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 3177,
       end: 3406,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
3407
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 48,
    id: Node { type: 'Identifier', start: 9, end: 19, name: 'equalsNull' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 23, end: 48, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 50,
    end: 71,
    expression: 
     Node {
       type: 'CallExpression',
       start: 50,
       end: 70,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 73,
    end: 124,
    id: Node { type: 'Identifier', start: 82, end: 95, name: 'notEqualsNull' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 99, end: 124, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 126,
    end: 150,
    expression: 
     Node {
       type: 'CallExpression',
       start: 126,
       end: 149,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 152,
    end: 207,
    id: 
     Node {
       type: 'Identifier',
       start: 161,
       end: 177,
       name: 'strictEqualsNull' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 181, end: 207, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 209,
    end: 236,
    expression: 
     Node {
       type: 'CallExpression',
       start: 209,
       end: 235,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 238,
    end: 296,
    id: 
     Node {
       type: 'Identifier',
       start: 247,
       end: 266,
       name: 'strictNotEqualsNull' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 270, end: 296, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 298,
    end: 328,
    expression: 
     Node {
       type: 'CallExpression',
       start: 298,
       end: 327,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 330,
    end: 385,
    id: 
     Node {
       type: 'Identifier',
       start: 339,
       end: 354,
       name: 'equalsUndefined' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 358, end: 385, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 387,
    end: 413,
    expression: 
     Node {
       type: 'CallExpression',
       start: 387,
       end: 412,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 415,
    end: 473,
    id: 
     Node {
       type: 'Identifier',
       start: 424,
       end: 442,
       name: 'notEqualsUndefined' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 446, end: 473, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 475,
    end: 504,
    expression: 
     Node {
       type: 'CallExpression',
       start: 475,
       end: 503,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 506,
    end: 568,
    id: 
     Node {
       type: 'Identifier',
       start: 515,
       end: 536,
       name: 'strictEqualsUndefined' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 540, end: 568, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 570,
    end: 602,
    expression: 
     Node {
       type: 'CallExpression',
       start: 570,
       end: 601,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 604,
    end: 669,
    id: 
     Node {
       type: 'Identifier',
       start: 613,
       end: 637,
       name: 'strictNotEqualsUndefined' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 641, end: 669, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 671,
    end: 701,
    expression: 
     Node {
       type: 'CallExpression',
       start: 671,
       end: 700,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 703,
    end: 742,
    id: Node { type: 'Identifier', start: 712, end: 720, name: 'isFalsey' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 724, end: 742, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 744,
    end: 763,
    expression: 
     Node {
       type: 'CallExpression',
       start: 744,
       end: 762,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 765,
    end: 955,
    id: Node { type: 'Identifier', start: 774, end: 778, name: 'test' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 813, end: 955, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 957,
    end: 1196,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 962,
       end: 971,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 973,
       end: 982,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 984,
       end: 987,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 989, end: 1196, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 1198,
    end: 1455,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 1203,
       end: 1212,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1214,
       end: 1223,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 1225,
       end: 1228,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 1230, end: 1455, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 1457,
    end: 1729,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 1462,
       end: 1471,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1473,
       end: 1482,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 1484,
       end: 1487,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 1489, end: 1729, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 1731,
    end: 2015,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 1736,
       end: 1745,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1747,
       end: 1756,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 1758,
       end: 1761,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 1763, end: 2015, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 2017,
    end: 2281,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 2022,
       end: 2031,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 2033,
       end: 2042,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 2044,
       end: 2047,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 2049, end: 2281, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 2283,
    end: 2565,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 2288,
       end: 2297,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 2299,
       end: 2308,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 2310,
       end: 2313,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 2315, end: 2565, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 2567,
    end: 2863,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 2572,
       end: 2581,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 2583,
       end: 2592,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 2594,
       end: 2597,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 2599, end: 2863, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 2865,
    end: 3175,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 2870,
       end: 2879,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 2881,
       end: 2890,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 2892,
       end: 2895,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 2897, end: 3175, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 3177,
    end: 3406,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 3182,
       end: 3191,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 3193,
       end: 3202,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 3204,
       end: 3207,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 3209, end: 3406, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 48,
  id: Node { type: 'Identifier', start: 9, end: 19, name: 'equalsNull' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 20, end: 21, name: 'o' } ],
  body: Node { type: 'BlockStatement', start: 23, end: 48, body: [ [Node] ] } }
FunctionDeclaration
0
48
Node { type: 'Identifier', start: 9, end: 19, name: 'equalsNull' }
Identifier
9
19
equalsNull
false
false
false
[ Node { type: 'Identifier', start: 20, end: 21, name: 'o' } ]
Node { type: 'Identifier', start: 20, end: 21, name: 'o' }
Identifier
20
21
o
Node {
  type: 'BlockStatement',
  start: 23,
  end: 48,
  body: 
   [ Node { type: 'ReturnStatement', start: 29, end: 46, argument: [Node] } ] }
BlockStatement
23
48
[ Node {
    type: 'ReturnStatement',
    start: 29,
    end: 46,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 36,
       end: 45,
       left: [Node],
       operator: '==',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 29,
  end: 46,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 36,
     end: 45,
     left: Node { type: 'Identifier', start: 36, end: 37, name: 'o' },
     operator: '==',
     right: Node { type: 'Literal', start: 41, end: 45, value: null, raw: 'null' } } }
ReturnStatement
29
46
Node {
  type: 'BinaryExpression',
  start: 36,
  end: 45,
  left: Node { type: 'Identifier', start: 36, end: 37, name: 'o' },
  operator: '==',
  right: Node { type: 'Literal', start: 41, end: 45, value: null, raw: 'null' } }
BinaryExpression
36
45
Node { type: 'Identifier', start: 36, end: 37, name: 'o' }
Identifier
36
37
o
==
Node { type: 'Literal', start: 41, end: 45, value: null, raw: 'null' }
Literal
41
45
null
[+] Exception: equals-masquerader.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 350,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 18,
       end: 162,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 164,
       end: 178,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'TryStatement',
       start: 180,
       end: 237,
       block: [Node],
       handler: [Node],
       finalizer: null },
     Node {
       type: 'ExpressionStatement',
       start: 239,
       end: 349,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
350
[ Node {
    type: 'FunctionDeclaration',
    start: 18,
    end: 162,
    id: Node { type: 'Identifier', start: 27, end: 38, name: 'shouldEqual' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 57, end: 162, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 164,
    end: 178,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'TryStatement',
    start: 180,
    end: 237,
    block: Node { type: 'BlockStatement', start: 184, end: 204, body: [Array] },
    handler: 
     Node {
       type: 'CatchClause',
       start: 205,
       end: 237,
       param: [Node],
       body: [Node] },
    finalizer: null },
  Node {
    type: 'ExpressionStatement',
    start: 239,
    end: 349,
    expression: 
     Node {
       type: 'CallExpression',
       start: 239,
       end: 348,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 18,
  end: 162,
  id: Node { type: 'Identifier', start: 27, end: 38, name: 'shouldEqual' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 39, end: 45, name: 'actual' },
     Node { type: 'Identifier', start: 47, end: 55, name: 'expected' } ],
  body: Node { type: 'BlockStatement', start: 57, end: 162, body: [ [Node] ] } }
FunctionDeclaration
18
162
Node { type: 'Identifier', start: 27, end: 38, name: 'shouldEqual' }
Identifier
27
38
shouldEqual
false
false
false
[ Node { type: 'Identifier', start: 39, end: 45, name: 'actual' },
  Node { type: 'Identifier', start: 47, end: 55, name: 'expected' } ]
Node { type: 'Identifier', start: 39, end: 45, name: 'actual' }
Identifier
39
45
actual
Node { type: 'Identifier', start: 47, end: 55, name: 'expected' }
Identifier
47
55
expected
Node {
  type: 'BlockStatement',
  start: 57,
  end: 162,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 63,
       end: 160,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
57
162
[ Node {
    type: 'IfStatement',
    start: 63,
    end: 160,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 67,
       end: 85,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'BlockStatement', start: 87, end: 160, body: [Array] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 63,
  end: 160,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 67,
     end: 85,
     left: Node { type: 'Identifier', start: 67, end: 73, name: 'actual' },
     operator: '!=',
     right: Node { type: 'Identifier', start: 77, end: 85, name: 'expected' } },
  consequent: Node { type: 'BlockStatement', start: 87, end: 160, body: [ [Node] ] },
  alternate: null }
IfStatement
63
160
Node {
  type: 'BinaryExpression',
  start: 67,
  end: 85,
  left: Node { type: 'Identifier', start: 67, end: 73, name: 'actual' },
  operator: '!=',
  right: Node { type: 'Identifier', start: 77, end: 85, name: 'expected' } }
BinaryExpression
67
85
Node { type: 'Identifier', start: 67, end: 73, name: 'actual' }
Identifier
67
73
actual
!=
Node { type: 'Identifier', start: 77, end: 85, name: 'expected' }
Identifier
77
85
expected
Node {
  type: 'BlockStatement',
  start: 87,
  end: 160,
  body: 
   [ Node { type: 'ThrowStatement', start: 97, end: 154, argument: [Node] } ] }
BlockStatement
87
160
[ Node {
    type: 'ThrowStatement',
    start: 97,
    end: 154,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 103,
       end: 153,
       left: [Node],
       operator: '+',
       right: [Node] } } ]
Node {
  type: 'ThrowStatement',
  start: 97,
  end: 154,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 103,
     end: 153,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 103,
        end: 144,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Identifier', start: 147, end: 153, name: 'actual' } } }
ThrowStatement
97
154
Node {
  type: 'BinaryExpression',
  start: 103,
  end: 153,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 103,
     end: 144,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 103,
        end: 130,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: 
      Node {
        type: 'Literal',
        start: 133,
        end: 144,
        value: ', actual ',
        raw: '", actual "' } },
  operator: '+',
  right: Node { type: 'Identifier', start: 147, end: 153, name: 'actual' } }
BinaryExpression
103
153
Node {
  type: 'BinaryExpression',
  start: 103,
  end: 144,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 103,
     end: 130,
     left: 
      Node {
        type: 'Literal',
        start: 103,
        end: 119,
        value: 'ERROR: expect ',
        raw: '"ERROR: expect "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 122, end: 130, name: 'expected' } },
  operator: '+',
  right: 
   Node {
     type: 'Literal',
     start: 133,
     end: 144,
     value: ', actual ',
     raw: '", actual "' } }
BinaryExpression
103
144
Node {
  type: 'BinaryExpression',
  start: 103,
  end: 130,
  left: 
   Node {
     type: 'Literal',
     start: 103,
     end: 119,
     value: 'ERROR: expect ',
     raw: '"ERROR: expect "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 122, end: 130, name: 'expected' } }
BinaryExpression
103
130
Node {
  type: 'Literal',
  start: 103,
  end: 119,
  value: 'ERROR: expect ',
  raw: '"ERROR: expect "' }
Literal
103
119
ERROR: expect 
"ERROR: expect "
+
Node { type: 'Identifier', start: 122, end: 130, name: 'expected' }
Identifier
122
130
expected
+
Node {
  type: 'Literal',
  start: 133,
  end: 144,
  value: ', actual ',
  raw: '", actual "' }
Literal
133
144
, actual 
", actual "
+
Node { type: 'Identifier', start: 147, end: 153, name: 'actual' }
Identifier
147
153
actual
null
[+] Exception: error-description-on-symbols-should-not-crash.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 635,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 66,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node { type: 'BlockStatement', start: 68, end: 308, body: [Array] },
     Node { type: 'BlockStatement', start: 310, end: 634, body: [Array] } ],
  sourceType: 'script' }
Program
0
635
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 66,
    id: Node { type: 'Identifier', start: 9, end: 15, name: 'assert' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 66, body: [Array] } },
  Node {
    type: 'BlockStatement',
    start: 68,
    end: 308,
    body: [ [Node], [Node], [Node], [Node] ] },
  Node {
    type: 'BlockStatement',
    start: 310,
    end: 634,
    body: [ [Node], [Node], [Node] ] } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 66,
  id: Node { type: 'Identifier', start: 9, end: 15, name: 'assert' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ],
  body: Node { type: 'BlockStatement', start: 19, end: 66, body: [ [Node] ] } }
FunctionDeclaration
0
66
Node { type: 'Identifier', start: 9, end: 15, name: 'assert' }
Identifier
9
15
assert
false
false
false
[ Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ]
Node { type: 'Identifier', start: 16, end: 17, name: 'b' }
Identifier
16
17
b
Node {
  type: 'BlockStatement',
  start: 19,
  end: 66,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 25,
       end: 64,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
19
66
[ Node {
    type: 'IfStatement',
    start: 25,
    end: 64,
    test: 
     Node {
       type: 'UnaryExpression',
       start: 29,
       end: 31,
       operator: '!',
       prefix: true,
       argument: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 41, end: 64, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 25,
  end: 64,
  test: 
   Node {
     type: 'UnaryExpression',
     start: 29,
     end: 31,
     operator: '!',
     prefix: true,
     argument: Node { type: 'Identifier', start: 30, end: 31, name: 'b' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 41,
     end: 64,
     argument: 
      Node {
        type: 'NewExpression',
        start: 47,
        end: 63,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
25
64
Node {
  type: 'UnaryExpression',
  start: 29,
  end: 31,
  operator: '!',
  prefix: true,
  argument: Node { type: 'Identifier', start: 30, end: 31, name: 'b' } }
UnaryExpression
29
31
!
true
Node { type: 'Identifier', start: 30, end: 31, name: 'b' }
Identifier
30
31
b
Node {
  type: 'ThrowStatement',
  start: 41,
  end: 64,
  argument: 
   Node {
     type: 'NewExpression',
     start: 47,
     end: 63,
     callee: Node { type: 'Identifier', start: 51, end: 56, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
41
64
Node {
  type: 'NewExpression',
  start: 47,
  end: 63,
  callee: Node { type: 'Identifier', start: 51, end: 56, name: 'Error' },
  arguments: 
   [ Node { type: 'Literal', start: 57, end: 62, value: 'Bad', raw: '"Bad"' } ] }
NewExpression
47
63
Node { type: 'Identifier', start: 51, end: 56, name: 'Error' }
Identifier
51
56
Error
[ Node { type: 'Literal', start: 57, end: 62, value: 'Bad', raw: '"Bad"' } ]
Node { type: 'Literal', start: 57, end: 62, value: 'Bad', raw: '"Bad"' }
Literal
57
62
Bad
"Bad"
null
[+] Exception: error-message-for-function-base-not-found.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 674,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 0,
       end: 17,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'TryStatement',
       start: 18,
       end: 95,
       block: [Node],
       handler: [Node],
       finalizer: null },
     Node {
       type: 'IfStatement',
       start: 97,
       end: 221,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 223,
       end: 236,
       expression: [Node] },
     Node {
       type: 'TryStatement',
       start: 237,
       end: 312,
       block: [Node],
       handler: [Node],
       finalizer: null },
     Node {
       type: 'IfStatement',
       start: 314,
       end: 436,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 469,
       end: 482,
       expression: [Node] },
     Node {
       type: 'TryStatement',
       start: 483,
       end: 557,
       block: [Node],
       handler: [Node],
       finalizer: null },
     Node {
       type: 'IfStatement',
       start: 559,
       end: 674,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
674
[ Node {
    type: 'VariableDeclaration',
    start: 0,
    end: 17,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'TryStatement',
    start: 18,
    end: 95,
    block: Node { type: 'BlockStatement', start: 22, end: 67, body: [Array] },
    handler: 
     Node {
       type: 'CatchClause',
       start: 68,
       end: 95,
       param: [Node],
       body: [Node] },
    finalizer: null },
  Node {
    type: 'IfStatement',
    start: 97,
    end: 221,
    test: 
     Node {
       type: 'LogicalExpression',
       start: 101,
       end: 192,
       left: [Node],
       operator: '||',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 198, end: 221, argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 223,
    end: 236,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 223,
       end: 235,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'TryStatement',
    start: 237,
    end: 312,
    block: Node { type: 'BlockStatement', start: 241, end: 284, body: [Array] },
    handler: 
     Node {
       type: 'CatchClause',
       start: 285,
       end: 312,
       param: [Node],
       body: [Node] },
    finalizer: null },
  Node {
    type: 'IfStatement',
    start: 314,
    end: 436,
    test: 
     Node {
       type: 'LogicalExpression',
       start: 318,
       end: 407,
       left: [Node],
       operator: '||',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 413, end: 436, argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 469,
    end: 482,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 469,
       end: 481,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'TryStatement',
    start: 483,
    end: 557,
    block: Node { type: 'BlockStatement', start: 487, end: 529, body: [Array] },
    handler: 
     Node {
       type: 'CatchClause',
       start: 530,
       end: 557,
       param: [Node],
       body: [Node] },
    finalizer: null },
  Node {
    type: 'IfStatement',
    start: 559,
    end: 674,
    test: 
     Node {
       type: 'LogicalExpression',
       start: 563,
       end: 645,
       left: [Node],
       operator: '||',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 651, end: 674, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 0,
  end: 17,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 4,
       end: 16,
       id: [Node],
       init: [Node] } ],
  kind: 'let' }
VariableDeclaration
0
17
[ Node {
    type: 'VariableDeclarator',
    start: 4,
    end: 16,
    id: Node { type: 'Identifier', start: 4, end: 9, name: 'error' },
    init: Node { type: 'Literal', start: 12, end: 16, value: null, raw: 'null' } } ]
Node {
  type: 'VariableDeclarator',
  start: 4,
  end: 16,
  id: Node { type: 'Identifier', start: 4, end: 9, name: 'error' },
  init: Node { type: 'Literal', start: 12, end: 16, value: null, raw: 'null' } }
VariableDeclarator
4
16
Node { type: 'Identifier', start: 4, end: 9, name: 'error' }
Identifier
4
9
error
Node { type: 'Literal', start: 12, end: 16, value: null, raw: 'null' }
Literal
12
16
null
[+] Exception: error-messages-for-in-operator-should-not-crash.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 3141,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 92,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 94,
       end: 161,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 163,
       end: 232,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 234,
       end: 281,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 282,
       end: 321,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 322,
       end: 363,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 364,
       end: 407,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 408,
       end: 447,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 448,
       end: 487,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 489,
       end: 579,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 581,
       end: 803,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 805,
       end: 831,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 833,
       end: 1395,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1397,
       end: 1462,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1541,
       end: 1581,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1583,
       end: 1651,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1652,
       end: 1723,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1724,
       end: 1798,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1976,
       end: 2050,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 2052,
       end: 2068,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 2069,
       end: 2150,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 2152,
       end: 2191,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 2192,
       end: 2273,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 2275,
       end: 2299,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 2300,
       end: 2381,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 2383,
       end: 2403,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 2404,
       end: 2485,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 2487,
       end: 2515,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 2516,
       end: 2598,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 2600,
       end: 2617,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 2618,
       end: 2700,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 2702,
       end: 2720,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 2721,
       end: 2803,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 2805,
       end: 2827,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 2828,
       end: 2910,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 2912,
       end: 2981,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 2983,
       end: 3069,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 3071,
       end: 3140,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
3141
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 92,
    id: Node { type: 'Identifier', start: 9, end: 15, name: 'assert' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 27, end: 92, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 94,
    end: 161,
    id: Node { type: 'Identifier', start: 103, end: 115, name: 'assertEquals' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 130, end: 161, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 163,
    end: 232,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 234,
    end: 281,
    expression: 
     Node {
       type: 'CallExpression',
       start: 234,
       end: 280,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 282,
    end: 321,
    expression: 
     Node {
       type: 'CallExpression',
       start: 282,
       end: 320,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 322,
    end: 363,
    expression: 
     Node {
       type: 'CallExpression',
       start: 322,
       end: 362,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 364,
    end: 407,
    expression: 
     Node {
       type: 'CallExpression',
       start: 364,
       end: 406,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 408,
    end: 447,
    expression: 
     Node {
       type: 'CallExpression',
       start: 408,
       end: 446,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 448,
    end: 487,
    expression: 
     Node {
       type: 'CallExpression',
       start: 448,
       end: 486,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 489,
    end: 579,
    id: Node { type: 'Identifier', start: 498, end: 505, name: 'recurse' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 509, end: 579, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 581,
    end: 803,
    id: 
     Node {
       type: 'Identifier',
       start: 590,
       end: 604,
       name: 'numberOfFrames' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 610, end: 803, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 805,
    end: 831,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 833,
    end: 1395,
    id: Node { type: 'Identifier', start: 842, end: 851, name: 'testLimit' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 926, end: 1395, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1397,
    end: 1462,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1397,
       end: 1461,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1541,
    end: 1581,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1541,
       end: 1580,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1583,
    end: 1651,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1583,
       end: 1650,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1652,
    end: 1723,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1652,
       end: 1722,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1724,
    end: 1798,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1724,
       end: 1797,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1976,
    end: 2050,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1976,
       end: 2049,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 2052,
    end: 2068,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 2069,
    end: 2150,
    expression: 
     Node {
       type: 'CallExpression',
       start: 2069,
       end: 2149,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 2152,
    end: 2191,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 2192,
    end: 2273,
    expression: 
     Node {
       type: 'CallExpression',
       start: 2192,
       end: 2272,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 2275,
    end: 2299,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 2300,
    end: 2381,
    expression: 
     Node {
       type: 'CallExpression',
       start: 2300,
       end: 2380,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 2383,
    end: 2403,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 2404,
    end: 2485,
    expression: 
     Node {
       type: 'CallExpression',
       start: 2404,
       end: 2484,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 2487,
    end: 2515,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 2516,
    end: 2598,
    expression: 
     Node {
       type: 'CallExpression',
       start: 2516,
       end: 2597,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 2600,
    end: 2617,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 2618,
    end: 2700,
    expression: 
     Node {
       type: 'CallExpression',
       start: 2618,
       end: 2699,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 2702,
    end: 2720,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 2721,
    end: 2803,
    expression: 
     Node {
       type: 'CallExpression',
       start: 2721,
       end: 2802,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 2805,
    end: 2827,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 2828,
    end: 2910,
    expression: 
     Node {
       type: 'CallExpression',
       start: 2828,
       end: 2909,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 2912,
    end: 2981,
    expression: 
     Node {
       type: 'CallExpression',
       start: 2912,
       end: 2980,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 2983,
    end: 3069,
    expression: 
     Node {
       type: 'CallExpression',
       start: 2983,
       end: 3068,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 3071,
    end: 3140,
    expression: 
     Node {
       type: 'CallExpression',
       start: 3071,
       end: 3139,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 92,
  id: Node { type: 'Identifier', start: 9, end: 15, name: 'assert' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 16, end: 22, name: 'testID' },
     Node { type: 'Identifier', start: 24, end: 25, name: 'b' } ],
  body: Node { type: 'BlockStatement', start: 27, end: 92, body: [ [Node] ] } }
FunctionDeclaration
0
92
Node { type: 'Identifier', start: 9, end: 15, name: 'assert' }
Identifier
9
15
assert
false
false
false
[ Node { type: 'Identifier', start: 16, end: 22, name: 'testID' },
  Node { type: 'Identifier', start: 24, end: 25, name: 'b' } ]
Node { type: 'Identifier', start: 16, end: 22, name: 'testID' }
Identifier
16
22
testID
Node { type: 'Identifier', start: 24, end: 25, name: 'b' }
Identifier
24
25
b
Node {
  type: 'BlockStatement',
  start: 27,
  end: 92,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 33,
       end: 90,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
27
92
[ Node {
    type: 'IfStatement',
    start: 33,
    end: 90,
    test: 
     Node {
       type: 'UnaryExpression',
       start: 37,
       end: 39,
       operator: '!',
       prefix: true,
       argument: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 49, end: 90, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 33,
  end: 90,
  test: 
   Node {
     type: 'UnaryExpression',
     start: 37,
     end: 39,
     operator: '!',
     prefix: true,
     argument: Node { type: 'Identifier', start: 38, end: 39, name: 'b' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 49,
     end: 90,
     argument: 
      Node {
        type: 'NewExpression',
        start: 55,
        end: 89,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
33
90
Node {
  type: 'UnaryExpression',
  start: 37,
  end: 39,
  operator: '!',
  prefix: true,
  argument: Node { type: 'Identifier', start: 38, end: 39, name: 'b' } }
UnaryExpression
37
39
!
true
Node { type: 'Identifier', start: 38, end: 39, name: 'b' }
Identifier
38
39
b
Node {
  type: 'ThrowStatement',
  start: 49,
  end: 90,
  argument: 
   Node {
     type: 'NewExpression',
     start: 55,
     end: 89,
     callee: Node { type: 'Identifier', start: 59, end: 64, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
49
90
Node {
  type: 'NewExpression',
  start: 55,
  end: 89,
  callee: Node { type: 'Identifier', start: 59, end: 64, name: 'Error' },
  arguments: 
   [ Node {
       type: 'BinaryExpression',
       start: 65,
       end: 88,
       left: [Node],
       operator: '+',
       right: [Node] } ] }
NewExpression
55
89
Node { type: 'Identifier', start: 59, end: 64, name: 'Error' }
Identifier
59
64
Error
[ Node {
    type: 'BinaryExpression',
    start: 65,
    end: 88,
    left: 
     Node {
       type: 'Literal',
       start: 65,
       end: 79,
       value: 'FAILED test ',
       raw: '"FAILED test "' },
    operator: '+',
    right: Node { type: 'Identifier', start: 82, end: 88, name: 'testID' } } ]
Node {
  type: 'BinaryExpression',
  start: 65,
  end: 88,
  left: 
   Node {
     type: 'Literal',
     start: 65,
     end: 79,
     value: 'FAILED test ',
     raw: '"FAILED test "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 82, end: 88, name: 'testID' } }
BinaryExpression
65
88
Node {
  type: 'Literal',
  start: 65,
  end: 79,
  value: 'FAILED test ',
  raw: '"FAILED test "' }
Literal
65
79
FAILED test 
"FAILED test "
+
Node { type: 'Identifier', start: 82, end: 88, name: 'testID' }
Identifier
82
88
testID
null
[+] Exception: error-stack-trace-limit.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 227,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 47,
       end: 71,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 72,
       end: 91,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 92,
       end: 114,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 115,
       end: 135,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 137,
       end: 162,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 163,
       end: 182,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 183,
       end: 205,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 206,
       end: 226,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
227
[ Node {
    type: 'ExpressionStatement',
    start: 47,
    end: 71,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 47,
       end: 71,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 72,
    end: 91,
    expression: 
     Node {
       type: 'CallExpression',
       start: 72,
       end: 90,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 92,
    end: 114,
    expression: 
     Node {
       type: 'CallExpression',
       start: 92,
       end: 113,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 115,
    end: 135,
    expression: 
     Node {
       type: 'CallExpression',
       start: 115,
       end: 134,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 137,
    end: 162,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 137,
       end: 162,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 163,
    end: 182,
    expression: 
     Node {
       type: 'CallExpression',
       start: 163,
       end: 181,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 183,
    end: 205,
    expression: 
     Node {
       type: 'CallExpression',
       start: 183,
       end: 204,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 206,
    end: 226,
    expression: 
     Node {
       type: 'CallExpression',
       start: 206,
       end: 225,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'ExpressionStatement',
  start: 47,
  end: 71,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 47,
     end: 71,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 47,
        end: 67,
        object: [Node],
        property: [Node],
        computed: false },
     right: Node { type: 'Literal', start: 70, end: 71, value: 0, raw: '0' } } }
ExpressionStatement
47
71
Node {
  type: 'AssignmentExpression',
  start: 47,
  end: 71,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 47,
     end: 67,
     object: 
      Node {
        type: 'MemberExpression',
        start: 47,
        end: 62,
        object: [Node],
        property: [Node],
        computed: false },
     property: Node { type: 'Identifier', start: 63, end: 67, name: 'name' },
     computed: false },
  right: Node { type: 'Literal', start: 70, end: 71, value: 0, raw: '0' } }
AssignmentExpression
47
71
=
Node {
  type: 'MemberExpression',
  start: 47,
  end: 67,
  object: 
   Node {
     type: 'MemberExpression',
     start: 47,
     end: 62,
     object: Node { type: 'Identifier', start: 47, end: 52, name: 'Error' },
     property: Node { type: 'Identifier', start: 53, end: 62, name: 'prototype' },
     computed: false },
  property: Node { type: 'Identifier', start: 63, end: 67, name: 'name' },
  computed: false }
MemberExpression
47
67
Node {
  type: 'MemberExpression',
  start: 47,
  end: 62,
  object: Node { type: 'Identifier', start: 47, end: 52, name: 'Error' },
  property: Node { type: 'Identifier', start: 53, end: 62, name: 'prototype' },
  computed: false }
MemberExpression
47
62
Node { type: 'Identifier', start: 47, end: 52, name: 'Error' }
Identifier
47
52
Error
Node { type: 'Identifier', start: 53, end: 62, name: 'prototype' }
Identifier
53
62
prototype
false
Node { type: 'Identifier', start: 63, end: 67, name: 'name' }
Identifier
63
67
name
false
Node { type: 'Literal', start: 70, end: 71, value: 0, raw: '0' }
Literal
70
71
0
0
Node {
  type: 'ExpressionStatement',
  start: 72,
  end: 91,
  expression: 
   Node {
     type: 'CallExpression',
     start: 72,
     end: 90,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 72,
        end: 88,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [] } }
ExpressionStatement
72
91
Node {
  type: 'CallExpression',
  start: 72,
  end: 90,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 72,
     end: 88,
     object: 
      Node {
        type: 'CallExpression',
        start: 72,
        end: 79,
        callee: [Node],
        arguments: [] },
     property: Node { type: 'Identifier', start: 80, end: 88, name: 'toString' },
     computed: false },
  arguments: [] }
CallExpression
72
90
Node {
  type: 'MemberExpression',
  start: 72,
  end: 88,
  object: 
   Node {
     type: 'CallExpression',
     start: 72,
     end: 79,
     callee: Node { type: 'Identifier', start: 72, end: 77, name: 'Error' },
     arguments: [] },
  property: Node { type: 'Identifier', start: 80, end: 88, name: 'toString' },
  computed: false }
MemberExpression
72
88
Node {
  type: 'CallExpression',
  start: 72,
  end: 79,
  callee: Node { type: 'Identifier', start: 72, end: 77, name: 'Error' },
  arguments: [] }
CallExpression
72
79
Node { type: 'Identifier', start: 72, end: 77, name: 'Error' }
Identifier
72
77
Error
[]
Node { type: 'Identifier', start: 80, end: 88, name: 'toString' }
Identifier
80
88
toString
false
[]
Node {
  type: 'ExpressionStatement',
  start: 92,
  end: 114,
  expression: 
   Node {
     type: 'CallExpression',
     start: 92,
     end: 113,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 92,
        end: 111,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [] } }
ExpressionStatement
92
114
Node {
  type: 'CallExpression',
  start: 92,
  end: 113,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 92,
     end: 111,
     object: 
      Node {
        type: 'CallExpression',
        start: 92,
        end: 102,
        callee: [Node],
        arguments: [Array] },
     property: Node { type: 'Identifier', start: 103, end: 111, name: 'toString' },
     computed: false },
  arguments: [] }
CallExpression
92
113
Node {
  type: 'MemberExpression',
  start: 92,
  end: 111,
  object: 
   Node {
     type: 'CallExpression',
     start: 92,
     end: 102,
     callee: Node { type: 'Identifier', start: 92, end: 97, name: 'Error' },
     arguments: [ [Node] ] },
  property: Node { type: 'Identifier', start: 103, end: 111, name: 'toString' },
  computed: false }
MemberExpression
92
111
Node {
  type: 'CallExpression',
  start: 92,
  end: 102,
  callee: Node { type: 'Identifier', start: 92, end: 97, name: 'Error' },
  arguments: 
   [ Node { type: 'Literal', start: 98, end: 101, value: '1', raw: '"1"' } ] }
CallExpression
92
102
Node { type: 'Identifier', start: 92, end: 97, name: 'Error' }
Identifier
92
97
Error
[ Node { type: 'Literal', start: 98, end: 101, value: '1', raw: '"1"' } ]
Node { type: 'Literal', start: 98, end: 101, value: '1', raw: '"1"' }
Literal
98
101
1
"1"
Node { type: 'Identifier', start: 103, end: 111, name: 'toString' }
Identifier
103
111
toString
false
[]
Node {
  type: 'ExpressionStatement',
  start: 115,
  end: 135,
  expression: 
   Node {
     type: 'CallExpression',
     start: 115,
     end: 134,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 115,
        end: 132,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [] } }
ExpressionStatement
115
135
Node {
  type: 'CallExpression',
  start: 115,
  end: 134,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 115,
     end: 132,
     object: 
      Node {
        type: 'CallExpression',
        start: 115,
        end: 123,
        callee: [Node],
        arguments: [Array] },
     property: Node { type: 'Identifier', start: 124, end: 132, name: 'toString' },
     computed: false },
  arguments: [] }
CallExpression
115
134
Node {
  type: 'MemberExpression',
  start: 115,
  end: 132,
  object: 
   Node {
     type: 'CallExpression',
     start: 115,
     end: 123,
     callee: Node { type: 'Identifier', start: 115, end: 120, name: 'Error' },
     arguments: [ [Node] ] },
  property: Node { type: 'Identifier', start: 124, end: 132, name: 'toString' },
  computed: false }
MemberExpression
115
132
Node {
  type: 'CallExpression',
  start: 115,
  end: 123,
  callee: Node { type: 'Identifier', start: 115, end: 120, name: 'Error' },
  arguments: 
   [ Node { type: 'Literal', start: 121, end: 122, value: 0, raw: '0' } ] }
CallExpression
115
123
Node { type: 'Identifier', start: 115, end: 120, name: 'Error' }
Identifier
115
120
Error
[ Node { type: 'Literal', start: 121, end: 122, value: 0, raw: '0' } ]
Node { type: 'Literal', start: 121, end: 122, value: 0, raw: '0' }
Literal
121
122
0
0
Node { type: 'Identifier', start: 124, end: 132, name: 'toString' }
Identifier
124
132
toString
false
[]
Node {
  type: 'ExpressionStatement',
  start: 137,
  end: 162,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 137,
     end: 162,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 137,
        end: 157,
        object: [Node],
        property: [Node],
        computed: false },
     right: Node { type: 'Literal', start: 160, end: 162, value: '', raw: '""' } } }
ExpressionStatement
137
162
Node {
  type: 'AssignmentExpression',
  start: 137,
  end: 162,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 137,
     end: 157,
     object: 
      Node {
        type: 'MemberExpression',
        start: 137,
        end: 152,
        object: [Node],
        property: [Node],
        computed: false },
     property: Node { type: 'Identifier', start: 153, end: 157, name: 'name' },
     computed: false },
  right: Node { type: 'Literal', start: 160, end: 162, value: '', raw: '""' } }
AssignmentExpression
137
162
=
Node {
  type: 'MemberExpression',
  start: 137,
  end: 157,
  object: 
   Node {
     type: 'MemberExpression',
     start: 137,
     end: 152,
     object: Node { type: 'Identifier', start: 137, end: 142, name: 'Error' },
     property: Node { type: 'Identifier', start: 143, end: 152, name: 'prototype' },
     computed: false },
  property: Node { type: 'Identifier', start: 153, end: 157, name: 'name' },
  computed: false }
MemberExpression
137
157
Node {
  type: 'MemberExpression',
  start: 137,
  end: 152,
  object: Node { type: 'Identifier', start: 137, end: 142, name: 'Error' },
  property: Node { type: 'Identifier', start: 143, end: 152, name: 'prototype' },
  computed: false }
MemberExpression
137
152
Node { type: 'Identifier', start: 137, end: 142, name: 'Error' }
Identifier
137
142
Error
Node { type: 'Identifier', start: 143, end: 152, name: 'prototype' }
Identifier
143
152
prototype
false
Node { type: 'Identifier', start: 153, end: 157, name: 'name' }
Identifier
153
157
name
false
Node { type: 'Literal', start: 160, end: 162, value: '', raw: '""' }
Literal
160
162

""
Node {
  type: 'ExpressionStatement',
  start: 163,
  end: 182,
  expression: 
   Node {
     type: 'CallExpression',
     start: 163,
     end: 181,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 163,
        end: 179,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [] } }
ExpressionStatement
163
182
Node {
  type: 'CallExpression',
  start: 163,
  end: 181,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 163,
     end: 179,
     object: 
      Node {
        type: 'CallExpression',
        start: 163,
        end: 170,
        callee: [Node],
        arguments: [] },
     property: Node { type: 'Identifier', start: 171, end: 179, name: 'toString' },
     computed: false },
  arguments: [] }
CallExpression
163
181
Node {
  type: 'MemberExpression',
  start: 163,
  end: 179,
  object: 
   Node {
     type: 'CallExpression',
     start: 163,
     end: 170,
     callee: Node { type: 'Identifier', start: 163, end: 168, name: 'Error' },
     arguments: [] },
  property: Node { type: 'Identifier', start: 171, end: 179, name: 'toString' },
  computed: false }
MemberExpression
163
179
Node {
  type: 'CallExpression',
  start: 163,
  end: 170,
  callee: Node { type: 'Identifier', start: 163, end: 168, name: 'Error' },
  arguments: [] }
CallExpression
163
170
Node { type: 'Identifier', start: 163, end: 168, name: 'Error' }
Identifier
163
168
Error
[]
Node { type: 'Identifier', start: 171, end: 179, name: 'toString' }
Identifier
171
179
toString
false
[]
Node {
  type: 'ExpressionStatement',
  start: 183,
  end: 205,
  expression: 
   Node {
     type: 'CallExpression',
     start: 183,
     end: 204,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 183,
        end: 202,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [] } }
ExpressionStatement
183
205
Node {
  type: 'CallExpression',
  start: 183,
  end: 204,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 183,
     end: 202,
     object: 
      Node {
        type: 'CallExpression',
        start: 183,
        end: 193,
        callee: [Node],
        arguments: [Array] },
     property: Node { type: 'Identifier', start: 194, end: 202, name: 'toString' },
     computed: false },
  arguments: [] }
CallExpression
183
204
Node {
  type: 'MemberExpression',
  start: 183,
  end: 202,
  object: 
   Node {
     type: 'CallExpression',
     start: 183,
     end: 193,
     callee: Node { type: 'Identifier', start: 183, end: 188, name: 'Error' },
     arguments: [ [Node] ] },
  property: Node { type: 'Identifier', start: 194, end: 202, name: 'toString' },
  computed: false }
MemberExpression
183
202
Node {
  type: 'CallExpression',
  start: 183,
  end: 193,
  callee: Node { type: 'Identifier', start: 183, end: 188, name: 'Error' },
  arguments: 
   [ Node { type: 'Literal', start: 189, end: 192, value: '1', raw: '"1"' } ] }
CallExpression
183
193
Node { type: 'Identifier', start: 183, end: 188, name: 'Error' }
Identifier
183
188
Error
[ Node { type: 'Literal', start: 189, end: 192, value: '1', raw: '"1"' } ]
Node { type: 'Literal', start: 189, end: 192, value: '1', raw: '"1"' }
Literal
189
192
1
"1"
Node { type: 'Identifier', start: 194, end: 202, name: 'toString' }
Identifier
194
202
toString
false
[]
Node {
  type: 'ExpressionStatement',
  start: 206,
  end: 226,
  expression: 
   Node {
     type: 'CallExpression',
     start: 206,
     end: 225,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 206,
        end: 223,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [] } }
ExpressionStatement
206
226
Node {
  type: 'CallExpression',
  start: 206,
  end: 225,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 206,
     end: 223,
     object: 
      Node {
        type: 'CallExpression',
        start: 206,
        end: 214,
        callee: [Node],
        arguments: [Array] },
     property: Node { type: 'Identifier', start: 215, end: 223, name: 'toString' },
     computed: false },
  arguments: [] }
CallExpression
206
225
Node {
  type: 'MemberExpression',
  start: 206,
  end: 223,
  object: 
   Node {
     type: 'CallExpression',
     start: 206,
     end: 214,
     callee: Node { type: 'Identifier', start: 206, end: 211, name: 'Error' },
     arguments: [ [Node] ] },
  property: Node { type: 'Identifier', start: 215, end: 223, name: 'toString' },
  computed: false }
MemberExpression
206
223
Node {
  type: 'CallExpression',
  start: 206,
  end: 214,
  callee: Node { type: 'Identifier', start: 206, end: 211, name: 'Error' },
  arguments: 
   [ Node { type: 'Literal', start: 212, end: 213, value: 0, raw: '0' } ] }
CallExpression
206
214
Node { type: 'Identifier', start: 206, end: 211, name: 'Error' }
Identifier
206
211
Error
[ Node { type: 'Literal', start: 212, end: 213, value: 0, raw: '0' } ]
Node { type: 'Literal', start: 212, end: 213, value: 0, raw: '0' }
Literal
212
213
0
0
Node { type: 'Identifier', start: 215, end: 223, name: 'toString' }
Identifier
215
223
toString
false
[]
script
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 11340,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 80,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 81,
       end: 98,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 100,
       end: 269,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 270,
       end: 292,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 294,
       end: 532,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 533,
       end: 566,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 568,
       end: 783,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 784,
       end: 809,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 811,
       end: 879,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 880,
       end: 890,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 891,
       end: 906,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 907,
       end: 924,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 925,
       end: 942,
       expression: [Node] },
     Node { type: 'EmptyStatement', start: 944, end: 945 },
     Node {
       type: 'ExpressionStatement',
       start: 945,
       end: 1111,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 1113,
       end: 1317,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1318,
       end: 1349,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1350,
       end: 1390,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 1392,
       end: 1574,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1575,
       end: 1590,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1591,
       end: 1615,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 1617,
       end: 1738,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1739,
       end: 1759,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 1761,
       end: 1811,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1812,
       end: 1823,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1824,
       end: 1842,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 1844,
       end: 1907,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1908,
       end: 1940,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1941,
       end: 1982,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1983,
       end: 2028,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 2029,
       end: 2064,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 2065,
       end: 2097,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 2098,
       end: 2150,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 2151,
       end: 2201,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 2202,
       end: 2268,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 2269,
       end: 2300,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 2301,
       end: 2343,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 2344,
       end: 2390,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 2392,
       end: 2505,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 2506,
       end: 2516,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 2518,
       end: 2693,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 2694,
       end: 2724,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 2726,
       end: 3038,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 3039,
       end: 3069,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 3071,
       end: 3225,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 3226,
       end: 3247,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 3249,
       end: 3481,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 3482,
       end: 3503,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 3504,
       end: 3534,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 3536,
       end: 3754,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 3755,
       end: 3778,
       expression: [Node] },
     Node { type: 'EmptyStatement', start: 3780, end: 3781 },
     Node {
       type: 'ExpressionStatement',
       start: 3781,
       end: 4984,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 4997,
       end: 5017,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node { type: 'EmptyStatement', start: 5017, end: 5018 },
     Node {
       type: 'FunctionDeclaration',
       start: 5019,
       end: 5041,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node { type: 'EmptyStatement', start: 5041, end: 5042 },
     Node {
       type: 'FunctionDeclaration',
       start: 5043,
       end: 5065,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node { type: 'EmptyStatement', start: 5065, end: 5066 },
     Node {
       type: 'FunctionDeclaration',
       start: 5067,
       end: 5091,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node { type: 'EmptyStatement', start: 5091, end: 5092 },
     Node {
       type: 'FunctionDeclaration',
       start: 5093,
       end: 5119,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node { type: 'EmptyStatement', start: 5119, end: 5120 },
     Node {
       type: 'FunctionDeclaration',
       start: 5121,
       end: 5145,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node { type: 'EmptyStatement', start: 5145, end: 5146 },
     Node {
       type: 'FunctionDeclaration',
       start: 5147,
       end: 5173,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node { type: 'EmptyStatement', start: 5173, end: 5174 },
     Node {
       type: 'FunctionDeclaration',
       start: 5175,
       end: 5201,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node { type: 'EmptyStatement', start: 5201, end: 5202 },
     Node {
       type: 'FunctionDeclaration',
       start: 5203,
       end: 5229,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node { type: 'EmptyStatement', start: 5229, end: 5230 },
     Node {
       type: 'FunctionDeclaration',
       start: 5231,
       end: 5257,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node { type: 'EmptyStatement', start: 5257, end: 5258 },
     Node {
       type: 'FunctionDeclaration',
       start: 5259,
       end: 5287,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node { type: 'EmptyStatement', start: 5287, end: 5288 },
     Node {
       type: 'FunctionDeclaration',
       start: 5289,
       end: 5325,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node { type: 'EmptyStatement', start: 5325, end: 5326 },
     Node {
       type: 'ExpressionStatement',
       start: 5328,
       end: 5358,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 5359,
       end: 5389,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 5390,
       end: 5420,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 5421,
       end: 5451,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 5452,
       end: 5482,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 5483,
       end: 5513,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 5514,
       end: 5544,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 5545,
       end: 5575,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 5576,
       end: 5606,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 5607,
       end: 5638,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 5639,
       end: 5670,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 5671,
       end: 5702,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 5704,
       end: 5743,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 5744,
       end: 5785,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 5786,
       end: 5827,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 5828,
       end: 5871,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 5872,
       end: 5917,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 5918,
       end: 5961,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 5962,
       end: 6007,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 6008,
       end: 6053,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 6054,
       end: 6099,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 6100,
       end: 6144,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 6145,
       end: 6191,
       expression: [Node] },
     ... 75 more items ],
  sourceType: 'script' }
Program
0
11340
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 80,
    id: Node { type: 'Identifier', start: 9, end: 15, name: 'assert' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 32, end: 80, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 81,
    end: 98,
    expression: 
     Node {
       type: 'CallExpression',
       start: 81,
       end: 97,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 100,
    end: 269,
    id: Node { type: 'Identifier', start: 109, end: 120, name: 'shouldThrow' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 127, end: 269, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 270,
    end: 292,
    expression: 
     Node {
       type: 'CallExpression',
       start: 270,
       end: 291,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 294,
    end: 532,
    id: 
     Node {
       type: 'Identifier',
       start: 303,
       end: 325,
       name: 'shouldThrowSyntaxError' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 331, end: 532, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 533,
    end: 566,
    expression: 
     Node {
       type: 'CallExpression',
       start: 533,
       end: 565,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 568,
    end: 783,
    id: 
     Node {
       type: 'Identifier',
       start: 577,
       end: 591,
       name: 'shouldThrowTDZ' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 598, end: 783, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 784,
    end: 809,
    expression: 
     Node {
       type: 'CallExpression',
       start: 784,
       end: 808,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 811,
    end: 879,
    id: Node { type: 'Identifier', start: 820, end: 825, name: 'basic' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 834, end: 879, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 880,
    end: 890,
    expression: 
     Node {
       type: 'CallExpression',
       start: 880,
       end: 889,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 891,
    end: 906,
    expression: 
     Node {
       type: 'CallExpression',
       start: 891,
       end: 905,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 907,
    end: 924,
    expression: 
     Node {
       type: 'CallExpression',
       start: 907,
       end: 923,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 925,
    end: 942,
    expression: 
     Node {
       type: 'CallExpression',
       start: 925,
       end: 941,
       callee: [Node],
       arguments: [Array] } },
  Node { type: 'EmptyStatement', start: 944, end: 945 },
  Node {
    type: 'ExpressionStatement',
    start: 945,
    end: 1111,
    expression: 
     Node {
       type: 'CallExpression',
       start: 945,
       end: 1110,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'FunctionDeclaration',
    start: 1113,
    end: 1317,
    id: 
     Node {
       type: 'Identifier',
       start: 1122,
       end: 1151,
       name: 'basicFunctionCaptureInDefault' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 1197, end: 1317, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1318,
    end: 1349,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1318,
       end: 1349,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 1350,
    end: 1390,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1350,
       end: 1390,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 1392,
    end: 1574,
    id: 
     Node {
       type: 'Identifier',
       start: 1401,
       end: 1414,
       name: 'basicCaptured' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 1430, end: 1574, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1575,
    end: 1590,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1575,
       end: 1590,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 1591,
    end: 1615,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1591,
       end: 1615,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 1617,
    end: 1738,
    id: Node { type: 'Identifier', start: 1626, end: 1632, name: 'tricky' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 1680, end: 1738, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1739,
    end: 1759,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1739,
       end: 1758,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 1761,
    end: 1811,
    id: Node { type: 'Identifier', start: 1770, end: 1776, name: 'strict' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 1787, end: 1811, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1812,
    end: 1823,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1812,
       end: 1822,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1824,
    end: 1842,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1824,
       end: 1841,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 1844,
    end: 1907,
    id: Node { type: 'Identifier', start: 1853, end: 1863, name: 'playground' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 1886, end: 1907, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1908,
    end: 1940,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1908,
       end: 1940,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1941,
    end: 1982,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1941,
       end: 1982,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1983,
    end: 2028,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1983,
       end: 2028,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 2029,
    end: 2064,
    expression: 
     Node {
       type: 'CallExpression',
       start: 2029,
       end: 2064,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 2065,
    end: 2097,
    expression: 
     Node {
       type: 'CallExpression',
       start: 2065,
       end: 2097,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 2098,
    end: 2150,
    expression: 
     Node {
       type: 'CallExpression',
       start: 2098,
       end: 2150,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 2151,
    end: 2201,
    expression: 
     Node {
       type: 'CallExpression',
       start: 2151,
       end: 2201,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 2202,
    end: 2268,
    expression: 
     Node {
       type: 'CallExpression',
       start: 2202,
       end: 2268,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 2269,
    end: 2300,
    expression: 
     Node {
       type: 'CallExpression',
       start: 2269,
       end: 2300,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 2301,
    end: 2343,
    expression: 
     Node {
       type: 'CallExpression',
       start: 2301,
       end: 2343,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 2344,
    end: 2390,
    expression: 
     Node {
       type: 'CallExpression',
       start: 2344,
       end: 2390,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 2392,
    end: 2505,
    id: Node { type: 'Identifier', start: 2401, end: 2408, name: 'scoping' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 2442, end: 2505, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 2506,
    end: 2516,
    expression: 
     Node {
       type: 'CallExpression',
       start: 2506,
       end: 2515,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'FunctionDeclaration',
    start: 2518,
    end: 2693,
    id: 
     Node {
       type: 'Identifier',
       start: 2527,
       end: 2545,
       name: 'augmentsArguments1' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 2554, end: 2693, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 2694,
    end: 2724,
    expression: 
     Node {
       type: 'CallExpression',
       start: 2694,
       end: 2723,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 2726,
    end: 3038,
    id: 
     Node {
       type: 'Identifier',
       start: 2735,
       end: 2753,
       name: 'augmentsArguments2' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 2762, end: 3038, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 3039,
    end: 3069,
    expression: 
     Node {
       type: 'CallExpression',
       start: 3039,
       end: 3068,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 3071,
    end: 3225,
    id: 
     Node {
       type: 'Identifier',
       start: 3080,
       end: 3098,
       name: 'augmentsArguments3' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 3107, end: 3225, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 3226,
    end: 3247,
    expression: 
     Node {
       type: 'CallExpression',
       start: 3226,
       end: 3246,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'FunctionDeclaration',
    start: 3249,
    end: 3481,
    id: 
     Node {
       type: 'Identifier',
       start: 3258,
       end: 3276,
       name: 'augmentsArguments4' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 3280, end: 3481, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 3482,
    end: 3503,
    expression: 
     Node {
       type: 'CallExpression',
       start: 3482,
       end: 3502,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 3504,
    end: 3534,
    expression: 
     Node {
       type: 'CallExpression',
       start: 3504,
       end: 3533,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 3536,
    end: 3754,
    id: 
     Node {
       type: 'Identifier',
       start: 3545,
       end: 3563,
       name: 'augmentsArguments5' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 3567, end: 3754, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 3755,
    end: 3778,
    expression: 
     Node {
       type: 'CallExpression',
       start: 3755,
       end: 3777,
       callee: [Node],
       arguments: [Array] } },
  Node { type: 'EmptyStatement', start: 3780, end: 3781 },
  Node {
    type: 'ExpressionStatement',
    start: 3781,
    end: 4984,
    expression: 
     Node {
       type: 'CallExpression',
       start: 3781,
       end: 4983,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'FunctionDeclaration',
    start: 4997,
    end: 5017,
    id: Node { type: 'Identifier', start: 5006, end: 5012, name: 'named1' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 5015, end: 5017, body: [] } },
  Node { type: 'EmptyStatement', start: 5017, end: 5018 },
  Node {
    type: 'FunctionDeclaration',
    start: 5019,
    end: 5041,
    id: Node { type: 'Identifier', start: 5028, end: 5034, name: 'named2' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 5039, end: 5041, body: [] } },
  Node { type: 'EmptyStatement', start: 5041, end: 5042 },
  Node {
    type: 'FunctionDeclaration',
    start: 5043,
    end: 5065,
    id: Node { type: 'Identifier', start: 5052, end: 5058, name: 'named3' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 5063, end: 5065, body: [] } },
  Node { type: 'EmptyStatement', start: 5065, end: 5066 },
  Node {
    type: 'FunctionDeclaration',
    start: 5067,
    end: 5091,
    id: Node { type: 'Identifier', start: 5076, end: 5082, name: 'named4' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 5089, end: 5091, body: [] } },
  Node { type: 'EmptyStatement', start: 5091, end: 5092 },
  Node {
    type: 'FunctionDeclaration',
    start: 5093,
    end: 5119,
    id: Node { type: 'Identifier', start: 5102, end: 5108, name: 'named5' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 5117, end: 5119, body: [] } },
  Node { type: 'EmptyStatement', start: 5119, end: 5120 },
  Node {
    type: 'FunctionDeclaration',
    start: 5121,
    end: 5145,
    id: Node { type: 'Identifier', start: 5130, end: 5136, name: 'named6' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 5143, end: 5145, body: [] } },
  Node { type: 'EmptyStatement', start: 5145, end: 5146 },
  Node {
    type: 'FunctionDeclaration',
    start: 5147,
    end: 5173,
    id: Node { type: 'Identifier', start: 5156, end: 5162, name: 'named7' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 5171, end: 5173, body: [] } },
  Node { type: 'EmptyStatement', start: 5173, end: 5174 },
  Node {
    type: 'FunctionDeclaration',
    start: 5175,
    end: 5201,
    id: Node { type: 'Identifier', start: 5184, end: 5190, name: 'named8' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 5199, end: 5201, body: [] } },
  Node { type: 'EmptyStatement', start: 5201, end: 5202 },
  Node {
    type: 'FunctionDeclaration',
    start: 5203,
    end: 5229,
    id: Node { type: 'Identifier', start: 5212, end: 5218, name: 'named9' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 5227, end: 5229, body: [] } },
  Node { type: 'EmptyStatement', start: 5229, end: 5230 },
  Node {
    type: 'FunctionDeclaration',
    start: 5231,
    end: 5257,
    id: Node { type: 'Identifier', start: 5240, end: 5247, name: 'named10' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 5255, end: 5257, body: [] } },
  Node { type: 'EmptyStatement', start: 5257, end: 5258 },
  Node {
    type: 'FunctionDeclaration',
    start: 5259,
    end: 5287,
    id: Node { type: 'Identifier', start: 5268, end: 5275, name: 'named11' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 5285, end: 5287, body: [] } },
  Node { type: 'EmptyStatement', start: 5287, end: 5288 },
  Node {
    type: 'FunctionDeclaration',
    start: 5289,
    end: 5325,
    id: Node { type: 'Identifier', start: 5298, end: 5305, name: 'named12' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 5323, end: 5325, body: [] } },
  Node { type: 'EmptyStatement', start: 5325, end: 5326 },
  Node {
    type: 'ExpressionStatement',
    start: 5328,
    end: 5358,
    expression: 
     Node {
       type: 'CallExpression',
       start: 5328,
       end: 5357,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 5359,
    end: 5389,
    expression: 
     Node {
       type: 'CallExpression',
       start: 5359,
       end: 5388,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 5390,
    end: 5420,
    expression: 
     Node {
       type: 'CallExpression',
       start: 5390,
       end: 5419,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 5421,
    end: 5451,
    expression: 
     Node {
       type: 'CallExpression',
       start: 5421,
       end: 5450,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 5452,
    end: 5482,
    expression: 
     Node {
       type: 'CallExpression',
       start: 5452,
       end: 5481,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 5483,
    end: 5513,
    expression: 
     Node {
       type: 'CallExpression',
       start: 5483,
       end: 5512,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 5514,
    end: 5544,
    expression: 
     Node {
       type: 'CallExpression',
       start: 5514,
       end: 5543,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 5545,
    end: 5575,
    expression: 
     Node {
       type: 'CallExpression',
       start: 5545,
       end: 5574,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 5576,
    end: 5606,
    expression: 
     Node {
       type: 'CallExpression',
       start: 5576,
       end: 5605,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 5607,
    end: 5638,
    expression: 
     Node {
       type: 'CallExpression',
       start: 5607,
       end: 5637,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 5639,
    end: 5670,
    expression: 
     Node {
       type: 'CallExpression',
       start: 5639,
       end: 5669,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 5671,
    end: 5702,
    expression: 
     Node {
       type: 'CallExpression',
       start: 5671,
       end: 5701,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 5704,
    end: 5743,
    expression: 
     Node {
       type: 'CallExpression',
       start: 5704,
       end: 5742,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 5744,
    end: 5785,
    expression: 
     Node {
       type: 'CallExpression',
       start: 5744,
       end: 5784,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 5786,
    end: 5827,
    expression: 
     Node {
       type: 'CallExpression',
       start: 5786,
       end: 5826,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 5828,
    end: 5871,
    expression: 
     Node {
       type: 'CallExpression',
       start: 5828,
       end: 5870,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 5872,
    end: 5917,
    expression: 
     Node {
       type: 'CallExpression',
       start: 5872,
       end: 5916,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 5918,
    end: 5961,
    expression: 
     Node {
       type: 'CallExpression',
       start: 5918,
       end: 5960,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 5962,
    end: 6007,
    expression: 
     Node {
       type: 'CallExpression',
       start: 5962,
       end: 6006,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 6008,
    end: 6053,
    expression: 
     Node {
       type: 'CallExpression',
       start: 6008,
       end: 6052,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 6054,
    end: 6099,
    expression: 
     Node {
       type: 'CallExpression',
       start: 6054,
       end: 6098,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 6100,
    end: 6144,
    expression: 
     Node {
       type: 'CallExpression',
       start: 6100,
       end: 6143,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 6145,
    end: 6191,
    expression: 
     Node {
       type: 'CallExpression',
       start: 6145,
       end: 6190,
       callee: [Node],
       arguments: [Array] } },
  ... 75 more items ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 80,
  id: Node { type: 'Identifier', start: 9, end: 15, name: 'assert' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 16, end: 20, name: 'cond' },
     Node {
       type: 'AssignmentPattern',
       start: 22,
       end: 30,
       left: [Node],
       right: [Node] } ],
  body: Node { type: 'BlockStatement', start: 32, end: 80, body: [ [Node] ] } }
FunctionDeclaration
0
80
Node { type: 'Identifier', start: 9, end: 15, name: 'assert' }
Identifier
9
15
assert
false
false
false
[ Node { type: 'Identifier', start: 16, end: 20, name: 'cond' },
  Node {
    type: 'AssignmentPattern',
    start: 22,
    end: 30,
    left: Node { type: 'Identifier', start: 22, end: 25, name: 'msg' },
    right: Node { type: 'Literal', start: 28, end: 30, value: '', raw: '""' } } ]
Node { type: 'Identifier', start: 16, end: 20, name: 'cond' }
Identifier
16
20
cond
Node {
  type: 'AssignmentPattern',
  start: 22,
  end: 30,
  left: Node { type: 'Identifier', start: 22, end: 25, name: 'msg' },
  right: Node { type: 'Literal', start: 28, end: 30, value: '', raw: '""' } }
AssignmentPattern
22
30
Node { type: 'Identifier', start: 22, end: 25, name: 'msg' }
Identifier
22
25
msg
Node { type: 'Literal', start: 28, end: 30, value: '', raw: '""' }
Literal
28
30

""
Node {
  type: 'BlockStatement',
  start: 32,
  end: 80,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 38,
       end: 78,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
32
80
[ Node {
    type: 'IfStatement',
    start: 38,
    end: 78,
    test: 
     Node {
       type: 'UnaryExpression',
       start: 42,
       end: 47,
       operator: '!',
       prefix: true,
       argument: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 57, end: 78, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 38,
  end: 78,
  test: 
   Node {
     type: 'UnaryExpression',
     start: 42,
     end: 47,
     operator: '!',
     prefix: true,
     argument: Node { type: 'Identifier', start: 43, end: 47, name: 'cond' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 57,
     end: 78,
     argument: 
      Node {
        type: 'NewExpression',
        start: 63,
        end: 77,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
38
78
Node {
  type: 'UnaryExpression',
  start: 42,
  end: 47,
  operator: '!',
  prefix: true,
  argument: Node { type: 'Identifier', start: 43, end: 47, name: 'cond' } }
UnaryExpression
42
47
!
true
Node { type: 'Identifier', start: 43, end: 47, name: 'cond' }
Identifier
43
47
cond
Node {
  type: 'ThrowStatement',
  start: 57,
  end: 78,
  argument: 
   Node {
     type: 'NewExpression',
     start: 63,
     end: 77,
     callee: Node { type: 'Identifier', start: 67, end: 72, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
57
78
Node {
  type: 'NewExpression',
  start: 63,
  end: 77,
  callee: Node { type: 'Identifier', start: 67, end: 72, name: 'Error' },
  arguments: 
   [ Node { type: 'Identifier', start: 73, end: 76, name: 'msg' } ] }
NewExpression
63
77
Node { type: 'Identifier', start: 67, end: 72, name: 'Error' }
Identifier
67
72
Error
[ Node { type: 'Identifier', start: 73, end: 76, name: 'msg' } ]
Node { type: 'Identifier', start: 73, end: 76, name: 'msg' }
Identifier
73
76
msg
null
[+] Exception: es6-default-parameters.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 608,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 84,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 85,
       end: 102,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 104,
       end: 375,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 376,
       end: 420,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 422,
       end: 438,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 439,
       end: 453,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 455,
       end: 532,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 533,
       end: 607,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
608
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 84,
    id: Node { type: 'Identifier', start: 9, end: 15, name: 'assert' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 22, end: 84, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 85,
    end: 102,
    expression: 
     Node {
       type: 'CallExpression',
       start: 85,
       end: 101,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 104,
    end: 375,
    id: 
     Node {
       type: 'Identifier',
       start: 113,
       end: 146,
       name: 'shouldThrowInvalidConstAssignment' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 150, end: 375, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 376,
    end: 420,
    expression: 
     Node {
       type: 'CallExpression',
       start: 376,
       end: 419,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 422,
    end: 438,
    id: Node { type: 'Identifier', start: 431, end: 434, name: 'baz' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 436, end: 438, body: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 439,
    end: 453,
    expression: 
     Node {
       type: 'CallExpression',
       start: 439,
       end: 452,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 455,
    end: 532,
    id: Node { type: 'Identifier', start: 464, end: 467, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 470, end: 532, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 533,
    end: 607,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 538,
       end: 547,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 549,
       end: 557,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 559,
       end: 562,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 568,
       end: 607,
       expression: [Node] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 84,
  id: Node { type: 'Identifier', start: 9, end: 15, name: 'assert' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 16, end: 20, name: 'cond' } ],
  body: Node { type: 'BlockStatement', start: 22, end: 84, body: [ [Node] ] } }
FunctionDeclaration
0
84
Node { type: 'Identifier', start: 9, end: 15, name: 'assert' }
Identifier
9
15
assert
false
false
false
[ Node { type: 'Identifier', start: 16, end: 20, name: 'cond' } ]
Node { type: 'Identifier', start: 16, end: 20, name: 'cond' }
Identifier
16
20
cond
Node {
  type: 'BlockStatement',
  start: 22,
  end: 84,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 28,
       end: 82,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
22
84
[ Node {
    type: 'IfStatement',
    start: 28,
    end: 82,
    test: 
     Node {
       type: 'UnaryExpression',
       start: 32,
       end: 37,
       operator: '!',
       prefix: true,
       argument: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 47, end: 82, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 28,
  end: 82,
  test: 
   Node {
     type: 'UnaryExpression',
     start: 32,
     end: 37,
     operator: '!',
     prefix: true,
     argument: Node { type: 'Identifier', start: 33, end: 37, name: 'cond' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 47,
     end: 82,
     argument: 
      Node {
        type: 'NewExpression',
        start: 53,
        end: 81,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
28
82
Node {
  type: 'UnaryExpression',
  start: 32,
  end: 37,
  operator: '!',
  prefix: true,
  argument: Node { type: 'Identifier', start: 33, end: 37, name: 'cond' } }
UnaryExpression
32
37
!
true
Node { type: 'Identifier', start: 33, end: 37, name: 'cond' }
Identifier
33
37
cond
Node {
  type: 'ThrowStatement',
  start: 47,
  end: 82,
  argument: 
   Node {
     type: 'NewExpression',
     start: 53,
     end: 81,
     callee: Node { type: 'Identifier', start: 57, end: 62, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
47
82
Node {
  type: 'NewExpression',
  start: 53,
  end: 81,
  callee: Node { type: 'Identifier', start: 57, end: 62, name: 'Error' },
  arguments: 
   [ Node {
       type: 'Literal',
       start: 63,
       end: 80,
       value: 'broke assertion',
       raw: '"broke assertion"' } ] }
NewExpression
53
81
Node { type: 'Identifier', start: 57, end: 62, name: 'Error' }
Identifier
57
62
Error
[ Node {
    type: 'Literal',
    start: 63,
    end: 80,
    value: 'broke assertion',
    raw: '"broke assertion"' } ]
Node {
  type: 'Literal',
  start: 63,
  end: 80,
  value: 'broke assertion',
  raw: '"broke assertion"' }
Literal
63
80
broke assertion
"broke assertion"
null
[+] Exception: es6-for-of-loop-exception.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1076,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 0,
       end: 18,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 20,
       end: 136,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 138,
       end: 152,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 154,
       end: 176,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 178,
       end: 616,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 618,
       end: 928,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 930,
       end: 965,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 966,
       end: 1049,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 1050,
       end: 1075,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
1076
[ Node {
    type: 'VariableDeclaration',
    start: 0,
    end: 18,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 20,
    end: 136,
    id: Node { type: 'Identifier', start: 29, end: 32, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 39, end: 136, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 138,
    end: 152,
    expression: 
     Node {
       type: 'CallExpression',
       start: 138,
       end: 151,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 154,
    end: 176,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 178,
    end: 616,
    id: 
     Node {
       type: 'Identifier',
       start: 187,
       end: 201,
       name: 'validateEscape' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 208, end: 616, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 618,
    end: 928,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 623,
       end: 632,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 634,
       end: 643,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 645,
       end: 648,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 650, end: 928, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 930,
    end: 965,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 966,
    end: 1049,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 970,
       end: 999,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1005,
       end: 1049,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 1050,
    end: 1075,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1050,
       end: 1074,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 0,
  end: 18,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 4,
       end: 17,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
0
18
[ Node {
    type: 'VariableDeclarator',
    start: 4,
    end: 17,
    id: Node { type: 'Identifier', start: 4, end: 10, name: 'global' },
    init: Node { type: 'Literal', start: 13, end: 17, value: null, raw: 'null' } } ]
Node {
  type: 'VariableDeclarator',
  start: 4,
  end: 17,
  id: Node { type: 'Identifier', start: 4, end: 10, name: 'global' },
  init: Node { type: 'Literal', start: 13, end: 17, value: null, raw: 'null' } }
VariableDeclarator
4
17
Node { type: 'Identifier', start: 4, end: 10, name: 'global' }
Identifier
4
10
global
Node { type: 'Literal', start: 13, end: 17, value: null, raw: 'null' }
Literal
13
17
null
[+] Exception: escape-object-in-diamond-then-exit.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 491,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 117,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 119,
       end: 207,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 209,
       end: 288,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 290,
       end: 490,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
491
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 117,
    id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 36, end: 117, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 119,
    end: 207,
    id: 
     Node {
       type: 'Identifier',
       start: 128,
       end: 143,
       name: 'toHighSurrogate' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 150, end: 207, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 209,
    end: 288,
    id: 
     Node {
       type: 'Identifier',
       start: 218,
       end: 232,
       name: 'toLowSurrogate' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 239, end: 288, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 290,
    end: 490,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 295,
       end: 310,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 312,
       end: 324,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 326,
       end: 329,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 331, end: 490, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 117,
  id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
     Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ],
  body: Node { type: 'BlockStatement', start: 36, end: 117, body: [ [Node] ] } }
FunctionDeclaration
0
117
Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' }
Identifier
9
17
shouldBe
false
false
false
[ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
  Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ]
Node { type: 'Identifier', start: 18, end: 24, name: 'actual' }
Identifier
18
24
actual
Node { type: 'Identifier', start: 26, end: 34, name: 'expected' }
Identifier
26
34
expected
Node {
  type: 'BlockStatement',
  start: 36,
  end: 117,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 42,
       end: 115,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
36
117
[ Node {
    type: 'IfStatement',
    start: 42,
    end: 115,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 46,
       end: 65,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 75, end: 115, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 42,
  end: 115,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 46,
     end: 65,
     left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
     operator: '!==',
     right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 75,
     end: 115,
     argument: 
      Node {
        type: 'NewExpression',
        start: 81,
        end: 114,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
42
115
Node {
  type: 'BinaryExpression',
  start: 46,
  end: 65,
  left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
  operator: '!==',
  right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } }
BinaryExpression
46
65
Node { type: 'Identifier', start: 46, end: 52, name: 'actual' }
Identifier
46
52
actual
!==
Node { type: 'Identifier', start: 57, end: 65, name: 'expected' }
Identifier
57
65
expected
Node {
  type: 'ThrowStatement',
  start: 75,
  end: 115,
  argument: 
   Node {
     type: 'NewExpression',
     start: 81,
     end: 114,
     callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
75
115
Node {
  type: 'NewExpression',
  start: 81,
  end: 114,
  callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
  arguments: 
   [ Node {
       type: 'BinaryExpression',
       start: 91,
       end: 113,
       left: [Node],
       operator: '+',
       right: [Node] } ] }
NewExpression
81
114
Node { type: 'Identifier', start: 85, end: 90, name: 'Error' }
Identifier
85
90
Error
[ Node {
    type: 'BinaryExpression',
    start: 91,
    end: 113,
    left: 
     Node {
       type: 'Literal',
       start: 91,
       end: 104,
       value: 'bad value: ',
       raw: '\'bad value: \'' },
    operator: '+',
    right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } } ]
Node {
  type: 'BinaryExpression',
  start: 91,
  end: 113,
  left: 
   Node {
     type: 'Literal',
     start: 91,
     end: 104,
     value: 'bad value: ',
     raw: '\'bad value: \'' },
  operator: '+',
  right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } }
BinaryExpression
91
113
Node {
  type: 'Literal',
  start: 91,
  end: 104,
  value: 'bad value: ',
  raw: '\'bad value: \'' }
Literal
91
104
bad value: 
'bad value: '
+
Node { type: 'Identifier', start: 107, end: 113, name: 'actual' }
Identifier
107
113
actual
null
[+] Exception: escape-unescape-surrogates.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 789,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 117,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 119,
       end: 468,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ClassDeclaration',
       start: 472,
       end: 597,
       id: [Node],
       superClass: null,
       body: [Node] },
     Node { type: 'EmptyStatement', start: 597, end: 598 },
     Node {
       type: 'VariableDeclaration',
       start: 600,
       end: 624,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 625,
       end: 706,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 707,
       end: 788,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
789
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 117,
    id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 36, end: 117, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 119,
    end: 468,
    id: Node { type: 'Identifier', start: 128, end: 139, name: 'shouldThrow' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 160, end: 468, body: [Array] } },
  Node {
    type: 'ClassDeclaration',
    start: 472,
    end: 597,
    id: Node { type: 'Identifier', start: 478, end: 483, name: 'Hello' },
    superClass: null,
    body: Node { type: 'ClassBody', start: 484, end: 597, body: [Array] } },
  Node { type: 'EmptyStatement', start: 597, end: 598 },
  Node {
    type: 'VariableDeclaration',
    start: 600,
    end: 624,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 625,
    end: 706,
    expression: 
     Node {
       type: 'CallExpression',
       start: 625,
       end: 705,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 707,
    end: 788,
    expression: 
     Node {
       type: 'CallExpression',
       start: 707,
       end: 787,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 117,
  id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
     Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ],
  body: Node { type: 'BlockStatement', start: 36, end: 117, body: [ [Node] ] } }
FunctionDeclaration
0
117
Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' }
Identifier
9
17
shouldBe
false
false
false
[ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
  Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ]
Node { type: 'Identifier', start: 18, end: 24, name: 'actual' }
Identifier
18
24
actual
Node { type: 'Identifier', start: 26, end: 34, name: 'expected' }
Identifier
26
34
expected
Node {
  type: 'BlockStatement',
  start: 36,
  end: 117,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 42,
       end: 115,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
36
117
[ Node {
    type: 'IfStatement',
    start: 42,
    end: 115,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 46,
       end: 65,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 75, end: 115, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 42,
  end: 115,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 46,
     end: 65,
     left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
     operator: '!==',
     right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 75,
     end: 115,
     argument: 
      Node {
        type: 'NewExpression',
        start: 81,
        end: 114,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
42
115
Node {
  type: 'BinaryExpression',
  start: 46,
  end: 65,
  left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
  operator: '!==',
  right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } }
BinaryExpression
46
65
Node { type: 'Identifier', start: 46, end: 52, name: 'actual' }
Identifier
46
52
actual
!==
Node { type: 'Identifier', start: 57, end: 65, name: 'expected' }
Identifier
57
65
expected
Node {
  type: 'ThrowStatement',
  start: 75,
  end: 115,
  argument: 
   Node {
     type: 'NewExpression',
     start: 81,
     end: 114,
     callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
75
115
Node {
  type: 'NewExpression',
  start: 81,
  end: 114,
  callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
  arguments: 
   [ Node {
       type: 'BinaryExpression',
       start: 91,
       end: 113,
       left: [Node],
       operator: '+',
       right: [Node] } ] }
NewExpression
81
114
Node { type: 'Identifier', start: 85, end: 90, name: 'Error' }
Identifier
85
90
Error
[ Node {
    type: 'BinaryExpression',
    start: 91,
    end: 113,
    left: 
     Node {
       type: 'Literal',
       start: 91,
       end: 104,
       value: 'bad value: ',
       raw: '\'bad value: \'' },
    operator: '+',
    right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } } ]
Node {
  type: 'BinaryExpression',
  start: 91,
  end: 113,
  left: 
   Node {
     type: 'Literal',
     start: 91,
     end: 104,
     value: 'bad value: ',
     raw: '\'bad value: \'' },
  operator: '+',
  right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } }
BinaryExpression
91
113
Node {
  type: 'Literal',
  start: 91,
  end: 104,
  value: 'bad value: ',
  raw: '\'bad value: \'' }
Literal
91
104
bad value: 
'bad value: '
+
Node { type: 'Identifier', start: 107, end: 113, name: 'actual' }
Identifier
107
113
actual
null
[+] Exception: eval-and-super.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1387,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 0,
       end: 664,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 666,
       end: 1386,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
1387
[ Node {
    type: 'ExpressionStatement',
    start: 0,
    end: 664,
    expression: 
     Node {
       type: 'CallExpression',
       start: 0,
       end: 663,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 666,
    end: 1386,
    expression: 
     Node {
       type: 'CallExpression',
       start: 666,
       end: 1385,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'ExpressionStatement',
  start: 0,
  end: 664,
  expression: 
   Node {
     type: 'CallExpression',
     start: 0,
     end: 663,
     callee: 
      Node {
        type: 'FunctionExpression',
        start: 1,
        end: 660,
        id: null,
        generator: false,
        expression: false,
        async: false,
        params: [],
        body: [Node] },
     arguments: [] } }
ExpressionStatement
0
664
Node {
  type: 'CallExpression',
  start: 0,
  end: 663,
  callee: 
   Node {
     type: 'FunctionExpression',
     start: 1,
     end: 660,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [],
     body: Node { type: 'BlockStatement', start: 13, end: 660, body: [Array] } },
  arguments: [] }
CallExpression
0
663
Node {
  type: 'FunctionExpression',
  start: 1,
  end: 660,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: 
   Node {
     type: 'BlockStatement',
     start: 13,
     end: 660,
     body: 
      [ [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node] ] } }
FunctionExpression
1
660
null
[+] Exception: eval-cached.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 395,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 0,
       end: 193,
       declarations: [Array],
       kind: 'var' },
     Node { type: 'BlockStatement', start: 195, end: 251, body: [Array] },
     Node {
       type: 'ExpressionStatement',
       start: 253,
       end: 315,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 317,
       end: 353,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 354,
       end: 395,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
395
[ Node {
    type: 'VariableDeclaration',
    start: 0,
    end: 193,
    declarations: [ [Node] ],
    kind: 'var' },
  Node { type: 'BlockStatement', start: 195, end: 251, body: [ [Node] ] },
  Node {
    type: 'ExpressionStatement',
    start: 253,
    end: 315,
    expression: 
     Node {
       type: 'CallExpression',
       start: 253,
       end: 314,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 317,
    end: 353,
    expression: 
     Node {
       type: 'CallExpression',
       start: 317,
       end: 352,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 354,
    end: 395,
    expression: 
     Node {
       type: 'CallExpression',
       start: 354,
       end: 394,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 0,
  end: 193,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 4,
       end: 192,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
0
193
[ Node {
    type: 'VariableDeclarator',
    start: 4,
    end: 192,
    id: Node { type: 'Identifier', start: 4, end: 10, name: 'assert' },
    init: 
     Node {
       type: 'FunctionExpression',
       start: 13,
       end: 192,
       id: null,
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] } } ]
Node {
  type: 'VariableDeclarator',
  start: 4,
  end: 192,
  id: Node { type: 'Identifier', start: 4, end: 10, name: 'assert' },
  init: 
   Node {
     type: 'FunctionExpression',
     start: 13,
     end: 192,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [ [Node], [Node], [Node] ],
     body: Node { type: 'BlockStatement', start: 50, end: 192, body: [Array] } } }
VariableDeclarator
4
192
Node { type: 'Identifier', start: 4, end: 10, name: 'assert' }
Identifier
4
10
assert
Node {
  type: 'FunctionExpression',
  start: 13,
  end: 192,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 23, end: 29, name: 'result' },
     Node { type: 'Identifier', start: 31, end: 39, name: 'expected' },
     Node { type: 'Identifier', start: 41, end: 48, name: 'message' } ],
  body: Node { type: 'BlockStatement', start: 50, end: 192, body: [ [Node] ] } }
FunctionExpression
13
192
null
[+] Exception: eval-func-decl-block-scoping-reassign.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 467,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 0,
       end: 193,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 195,
       end: 411,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 412,
       end: 418,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 421,
       end: 467,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
467
[ Node {
    type: 'VariableDeclaration',
    start: 0,
    end: 193,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 195,
    end: 411,
    id: Node { type: 'Identifier', start: 204, end: 207, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 210, end: 411, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 412,
    end: 418,
    expression: 
     Node {
       type: 'CallExpression',
       start: 412,
       end: 417,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ForStatement',
    start: 421,
    end: 467,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 426,
       end: 435,
       declarations: [Array],
       kind: 'let' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 437,
       end: 446,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 448,
       end: 451,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 453, end: 467, body: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 0,
  end: 193,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 4,
       end: 192,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
0
193
[ Node {
    type: 'VariableDeclarator',
    start: 4,
    end: 192,
    id: Node { type: 'Identifier', start: 4, end: 10, name: 'assert' },
    init: 
     Node {
       type: 'FunctionExpression',
       start: 13,
       end: 192,
       id: null,
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] } } ]
Node {
  type: 'VariableDeclarator',
  start: 4,
  end: 192,
  id: Node { type: 'Identifier', start: 4, end: 10, name: 'assert' },
  init: 
   Node {
     type: 'FunctionExpression',
     start: 13,
     end: 192,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [ [Node], [Node], [Node] ],
     body: Node { type: 'BlockStatement', start: 50, end: 192, body: [Array] } } }
VariableDeclarator
4
192
Node { type: 'Identifier', start: 4, end: 10, name: 'assert' }
Identifier
4
10
assert
Node {
  type: 'FunctionExpression',
  start: 13,
  end: 192,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 23, end: 29, name: 'result' },
     Node { type: 'Identifier', start: 31, end: 39, name: 'expected' },
     Node { type: 'Identifier', start: 41, end: 48, name: 'message' } ],
  body: Node { type: 'BlockStatement', start: 50, end: 192, body: [ [Node] ] } }
FunctionExpression
13
192
null
[+] Exception: eval-func-decl-block-with-remove.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 2265,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 0,
       end: 201,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 203,
       end: 625,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 627,
       end: 947,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 949,
       end: 1063,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 1065,
       end: 1370,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 1372,
       end: 1485,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 1487,
       end: 1777,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 1779,
       end: 1892,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 1894,
       end: 2149,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 2151,
       end: 2264,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
2265
[ Node {
    type: 'VariableDeclaration',
    start: 0,
    end: 201,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 203,
    end: 625,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 627,
    end: 947,
    id: Node { type: 'Identifier', start: 636, end: 639, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 642, end: 947, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 949,
    end: 1063,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 954,
       end: 963,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 965,
       end: 974,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 976,
       end: 979,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 981, end: 1063, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 1065,
    end: 1370,
    id: Node { type: 'Identifier', start: 1074, end: 1077, name: 'boo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 1080, end: 1370, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 1372,
    end: 1485,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 1377,
       end: 1386,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1388,
       end: 1397,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 1399,
       end: 1402,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 1403, end: 1485, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 1487,
    end: 1777,
    id: Node { type: 'Identifier', start: 1496, end: 1499, name: 'joo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 1502, end: 1777, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 1779,
    end: 1892,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 1784,
       end: 1793,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1795,
       end: 1804,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 1806,
       end: 1809,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 1810, end: 1892, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 1894,
    end: 2149,
    id: Node { type: 'Identifier', start: 1903, end: 1906, name: 'koo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 1909, end: 2149, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 2151,
    end: 2264,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 2156,
       end: 2165,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 2167,
       end: 2176,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 2178,
       end: 2181,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 2182, end: 2264, body: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 0,
  end: 201,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 4,
       end: 200,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
0
201
[ Node {
    type: 'VariableDeclarator',
    start: 4,
    end: 200,
    id: Node { type: 'Identifier', start: 4, end: 10, name: 'assert' },
    init: 
     Node {
       type: 'FunctionExpression',
       start: 13,
       end: 200,
       id: null,
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] } } ]
Node {
  type: 'VariableDeclarator',
  start: 4,
  end: 200,
  id: Node { type: 'Identifier', start: 4, end: 10, name: 'assert' },
  init: 
   Node {
     type: 'FunctionExpression',
     start: 13,
     end: 200,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [ [Node], [Node], [Node] ],
     body: Node { type: 'BlockStatement', start: 50, end: 200, body: [Array] } } }
VariableDeclarator
4
200
Node { type: 'Identifier', start: 4, end: 10, name: 'assert' }
Identifier
4
10
assert
Node {
  type: 'FunctionExpression',
  start: 13,
  end: 200,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 23, end: 29, name: 'result' },
     Node { type: 'Identifier', start: 31, end: 39, name: 'expected' },
     Node { type: 'Identifier', start: 41, end: 48, name: 'message' } ],
  body: Node { type: 'BlockStatement', start: 50, end: 200, body: [ [Node] ] } }
FunctionExpression
13
200
null
[+] Exception: eval-func-decl-block-with-var-and-remove.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 2353,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 0,
       end: 201,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 203,
       end: 625,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 627,
       end: 853,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 855,
       end: 968,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 970,
       end: 1220,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 1222,
       end: 1335,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 1337,
       end: 1563,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 1565,
       end: 1678,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 1680,
       end: 1920,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 1922,
       end: 2035,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 2037,
       end: 2237,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 2239,
       end: 2352,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
2353
[ Node {
    type: 'VariableDeclaration',
    start: 0,
    end: 201,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 203,
    end: 625,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 627,
    end: 853,
    id: Node { type: 'Identifier', start: 636, end: 639, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 642, end: 853, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 855,
    end: 968,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 860,
       end: 869,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 871,
       end: 880,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 882,
       end: 885,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 886, end: 968, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 970,
    end: 1220,
    id: Node { type: 'Identifier', start: 979, end: 982, name: 'boo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 985, end: 1220, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 1222,
    end: 1335,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 1227,
       end: 1236,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1238,
       end: 1247,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 1249,
       end: 1252,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 1253, end: 1335, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 1337,
    end: 1563,
    id: Node { type: 'Identifier', start: 1346, end: 1349, name: 'hoo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 1352, end: 1563, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 1565,
    end: 1678,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 1570,
       end: 1579,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1581,
       end: 1590,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 1592,
       end: 1595,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 1596, end: 1678, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 1680,
    end: 1920,
    id: Node { type: 'Identifier', start: 1689, end: 1692, name: 'joo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 1695, end: 1920, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 1922,
    end: 2035,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 1927,
       end: 1936,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1938,
       end: 1947,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 1949,
       end: 1952,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 1953, end: 2035, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 2037,
    end: 2237,
    id: Node { type: 'Identifier', start: 2046, end: 2049, name: 'koo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 2052, end: 2237, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 2239,
    end: 2352,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 2244,
       end: 2253,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 2255,
       end: 2264,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 2266,
       end: 2269,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 2270, end: 2352, body: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 0,
  end: 201,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 4,
       end: 200,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
0
201
[ Node {
    type: 'VariableDeclarator',
    start: 4,
    end: 200,
    id: Node { type: 'Identifier', start: 4, end: 10, name: 'assert' },
    init: 
     Node {
       type: 'FunctionExpression',
       start: 13,
       end: 200,
       id: null,
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] } } ]
Node {
  type: 'VariableDeclarator',
  start: 4,
  end: 200,
  id: Node { type: 'Identifier', start: 4, end: 10, name: 'assert' },
  init: 
   Node {
     type: 'FunctionExpression',
     start: 13,
     end: 200,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [ [Node], [Node], [Node] ],
     body: Node { type: 'BlockStatement', start: 50, end: 200, body: [Array] } } }
VariableDeclarator
4
200
Node { type: 'Identifier', start: 4, end: 10, name: 'assert' }
Identifier
4
10
assert
Node {
  type: 'FunctionExpression',
  start: 13,
  end: 200,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 23, end: 29, name: 'result' },
     Node { type: 'Identifier', start: 31, end: 39, name: 'expected' },
     Node { type: 'Identifier', start: 41, end: 48, name: 'message' } ],
  body: Node { type: 'BlockStatement', start: 50, end: 200, body: [ [Node] ] } }
FunctionExpression
13
200
null
[+] Exception: eval-func-decl-block-with-var-sinthesize.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 204,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 0,
       end: 10,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 12,
       end: 125,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 127,
       end: 204,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
204
[ Node {
    type: 'VariableDeclaration',
    start: 0,
    end: 10,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 12,
    end: 125,
    expression: 
     Node {
       type: 'CallExpression',
       start: 13,
       end: 123,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'IfStatement',
    start: 127,
    end: 204,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 131,
       end: 150,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 154, end: 204, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 0,
  end: 10,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 4,
       end: 9,
       id: [Node],
       init: null } ],
  kind: 'var' }
VariableDeclaration
0
10
[ Node {
    type: 'VariableDeclarator',
    start: 4,
    end: 9,
    id: Node { type: 'Identifier', start: 4, end: 9, name: 'init1' },
    init: null } ]
Node {
  type: 'VariableDeclarator',
  start: 4,
  end: 9,
  id: Node { type: 'Identifier', start: 4, end: 9, name: 'init1' },
  init: null }
VariableDeclarator
4
9
Node { type: 'Identifier', start: 4, end: 9, name: 'init1' }
Identifier
4
9
init1
null
[+] Exception: eval-func-decl-in-block-scope-and-bind-to-top-eval-scope.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1524,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 0,
       end: 201,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 203,
       end: 624,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 626,
       end: 819,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 822,
       end: 935,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 937,
       end: 1111,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 1113,
       end: 1226,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 1228,
       end: 1451,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1453,
       end: 1459,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1460,
       end: 1523,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
1524
[ Node {
    type: 'VariableDeclaration',
    start: 0,
    end: 201,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 203,
    end: 624,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 626,
    end: 819,
    id: Node { type: 'Identifier', start: 635, end: 638, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 641, end: 819, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 822,
    end: 935,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 827,
       end: 836,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 838,
       end: 847,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 849,
       end: 852,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 853, end: 935, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 937,
    end: 1111,
    id: Node { type: 'Identifier', start: 946, end: 949, name: 'boo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 952, end: 1111, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 1113,
    end: 1226,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 1118,
       end: 1127,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1129,
       end: 1138,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 1140,
       end: 1143,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 1144, end: 1226, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 1228,
    end: 1451,
    id: Node { type: 'Identifier', start: 1237, end: 1240, name: 'goo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 1243, end: 1451, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1453,
    end: 1459,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1453,
       end: 1458,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 1460,
    end: 1523,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1460,
       end: 1522,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 0,
  end: 201,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 4,
       end: 200,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
0
201
[ Node {
    type: 'VariableDeclarator',
    start: 4,
    end: 200,
    id: Node { type: 'Identifier', start: 4, end: 10, name: 'assert' },
    init: 
     Node {
       type: 'FunctionExpression',
       start: 13,
       end: 200,
       id: null,
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] } } ]
Node {
  type: 'VariableDeclarator',
  start: 4,
  end: 200,
  id: Node { type: 'Identifier', start: 4, end: 10, name: 'assert' },
  init: 
   Node {
     type: 'FunctionExpression',
     start: 13,
     end: 200,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [ [Node], [Node], [Node] ],
     body: Node { type: 'BlockStatement', start: 50, end: 200, body: [Array] } } }
VariableDeclarator
4
200
Node { type: 'Identifier', start: 4, end: 10, name: 'assert' }
Identifier
4
10
assert
Node {
  type: 'FunctionExpression',
  start: 13,
  end: 200,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 23, end: 29, name: 'result' },
     Node { type: 'Identifier', start: 31, end: 39, name: 'expected' },
     Node { type: 'Identifier', start: 41, end: 48, name: 'message' } ],
  body: Node { type: 'BlockStatement', start: 50, end: 200, body: [ [Node] ] } }
FunctionExpression
13
200
null
[+] Exception: eval-func-decl-in-eval-within-block-with-let.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 3214,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 0,
       end: 201,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 203,
       end: 625,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 627,
       end: 847,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 849,
       end: 1115,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node { type: 'BlockStatement', start: 1116, end: 1315, body: [Array] },
     Node { type: 'BlockStatement', start: 1316, end: 1724, body: [Array] },
     Node { type: 'BlockStatement', start: 1725, end: 2203, body: [Array] },
     Node { type: 'BlockStatement', start: 2204, end: 2691, body: [Array] },
     Node { type: 'BlockStatement', start: 2692, end: 3214, body: [Array] } ],
  sourceType: 'script' }
Program
0
3214
[ Node {
    type: 'VariableDeclaration',
    start: 0,
    end: 201,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 203,
    end: 625,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 627,
    end: 847,
    id: Node { type: 'Identifier', start: 636, end: 639, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 689, end: 847, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 849,
    end: 1115,
    id: Node { type: 'Identifier', start: 858, end: 861, name: 'boo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 911, end: 1115, body: [Array] } },
  Node {
    type: 'BlockStatement',
    start: 1116,
    end: 1315,
    body: [ [Node], [Node] ] },
  Node {
    type: 'BlockStatement',
    start: 1316,
    end: 1724,
    body: [ [Node], [Node], [Node], [Node] ] },
  Node {
    type: 'BlockStatement',
    start: 1725,
    end: 2203,
    body: [ [Node], [Node], [Node], [Node], [Node], [Node] ] },
  Node {
    type: 'BlockStatement',
    start: 2204,
    end: 2691,
    body: [ [Node], [Node], [Node], [Node], [Node], [Node] ] },
  Node {
    type: 'BlockStatement',
    start: 2692,
    end: 3214,
    body: [ [Node], [Node], [Node], [Node], [Node], [Node] ] } ]
Node {
  type: 'VariableDeclaration',
  start: 0,
  end: 201,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 4,
       end: 200,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
0
201
[ Node {
    type: 'VariableDeclarator',
    start: 4,
    end: 200,
    id: Node { type: 'Identifier', start: 4, end: 10, name: 'assert' },
    init: 
     Node {
       type: 'FunctionExpression',
       start: 13,
       end: 200,
       id: null,
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] } } ]
Node {
  type: 'VariableDeclarator',
  start: 4,
  end: 200,
  id: Node { type: 'Identifier', start: 4, end: 10, name: 'assert' },
  init: 
   Node {
     type: 'FunctionExpression',
     start: 13,
     end: 200,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [ [Node], [Node], [Node] ],
     body: Node { type: 'BlockStatement', start: 50, end: 200, body: [Array] } } }
VariableDeclarator
4
200
Node { type: 'Identifier', start: 4, end: 10, name: 'assert' }
Identifier
4
10
assert
Node {
  type: 'FunctionExpression',
  start: 13,
  end: 200,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 23, end: 29, name: 'result' },
     Node { type: 'Identifier', start: 31, end: 39, name: 'expected' },
     Node { type: 'Identifier', start: 41, end: 48, name: 'message' } ],
  body: Node { type: 'BlockStatement', start: 50, end: 200, body: [ [Node] ] } }
FunctionExpression
13
200
null
[+] Exception: eval-func-decl-in-eval-within-with-scope.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1242,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 0,
       end: 193,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 195,
       end: 518,
       declarations: [Array],
       kind: 'var' },
     Node { type: 'BlockStatement', start: 520, end: 635, body: [Array] },
     Node {
       type: 'ExpressionStatement',
       start: 637,
       end: 767,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 768,
       end: 821,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 822,
       end: 919,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 920,
       end: 973,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 975,
       end: 995,
       expression: [Node] },
     Node { type: 'BlockStatement', start: 996, end: 1241, body: [Array] } ],
  sourceType: 'script' }
Program
0
1242
[ Node {
    type: 'VariableDeclaration',
    start: 0,
    end: 193,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 195,
    end: 518,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'BlockStatement',
    start: 520,
    end: 635,
    body: [ [Node], [Node], [Node] ] },
  Node {
    type: 'ExpressionStatement',
    start: 637,
    end: 767,
    expression: 
     Node {
       type: 'CallExpression',
       start: 637,
       end: 766,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 768,
    end: 821,
    expression: 
     Node {
       type: 'CallExpression',
       start: 768,
       end: 820,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 822,
    end: 919,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 920,
    end: 973,
    expression: 
     Node {
       type: 'CallExpression',
       start: 920,
       end: 972,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 975,
    end: 995,
    expression: 
     Node {
       type: 'CallExpression',
       start: 975,
       end: 994,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'BlockStatement',
    start: 996,
    end: 1241,
    body: [ [Node], [Node], [Node], [Node], [Node] ] } ]
Node {
  type: 'VariableDeclaration',
  start: 0,
  end: 193,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 4,
       end: 192,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
0
193
[ Node {
    type: 'VariableDeclarator',
    start: 4,
    end: 192,
    id: Node { type: 'Identifier', start: 4, end: 10, name: 'assert' },
    init: 
     Node {
       type: 'FunctionExpression',
       start: 13,
       end: 192,
       id: null,
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] } } ]
Node {
  type: 'VariableDeclarator',
  start: 4,
  end: 192,
  id: Node { type: 'Identifier', start: 4, end: 10, name: 'assert' },
  init: 
   Node {
     type: 'FunctionExpression',
     start: 13,
     end: 192,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [ [Node], [Node], [Node] ],
     body: Node { type: 'BlockStatement', start: 50, end: 192, body: [Array] } } }
VariableDeclarator
4
192
Node { type: 'Identifier', start: 4, end: 10, name: 'assert' }
Identifier
4
10
assert
Node {
  type: 'FunctionExpression',
  start: 13,
  end: 192,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 23, end: 29, name: 'result' },
     Node { type: 'Identifier', start: 31, end: 39, name: 'expected' },
     Node { type: 'Identifier', start: 41, end: 48, name: 'message' } ],
  body: Node { type: 'BlockStatement', start: 50, end: 192, body: [ [Node] ] } }
FunctionExpression
13
192
null
[+] Exception: eval-func-decl-in-frozen-global.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1631,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 0,
       end: 201,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 203,
       end: 624,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 627,
       end: 754,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 757,
       end: 950,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 952,
       end: 1177,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 1179,
       end: 1292,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 1294,
       end: 1554,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1556,
       end: 1565,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1566,
       end: 1629,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
1631
[ Node {
    type: 'VariableDeclaration',
    start: 0,
    end: 201,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 203,
    end: 624,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 627,
    end: 754,
    id: Node { type: 'Identifier', start: 636, end: 639, name: 'bar' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 642, end: 754, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 757,
    end: 950,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 762,
       end: 771,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 773,
       end: 782,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 784,
       end: 787,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 788, end: 950, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 952,
    end: 1177,
    id: Node { type: 'Identifier', start: 961, end: 964, name: 'baz' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 967, end: 1177, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 1179,
    end: 1292,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 1184,
       end: 1193,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1195,
       end: 1204,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 1206,
       end: 1209,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 1210, end: 1292, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 1294,
    end: 1554,
    id: Node { type: 'Identifier', start: 1303, end: 1309, name: 'foobar' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 1312, end: 1554, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1556,
    end: 1565,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1556,
       end: 1564,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 1566,
    end: 1629,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1566,
       end: 1628,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 0,
  end: 201,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 4,
       end: 200,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
0
201
[ Node {
    type: 'VariableDeclarator',
    start: 4,
    end: 200,
    id: Node { type: 'Identifier', start: 4, end: 10, name: 'assert' },
    init: 
     Node {
       type: 'FunctionExpression',
       start: 13,
       end: 200,
       id: null,
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] } } ]
Node {
  type: 'VariableDeclarator',
  start: 4,
  end: 200,
  id: Node { type: 'Identifier', start: 4, end: 10, name: 'assert' },
  init: 
   Node {
     type: 'FunctionExpression',
     start: 13,
     end: 200,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [ [Node], [Node], [Node] ],
     body: Node { type: 'BlockStatement', start: 50, end: 200, body: [Array] } } }
VariableDeclarator
4
200
Node { type: 'Identifier', start: 4, end: 10, name: 'assert' }
Identifier
4
10
assert
Node {
  type: 'FunctionExpression',
  start: 13,
  end: 200,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 23, end: 29, name: 'result' },
     Node { type: 'Identifier', start: 31, end: 39, name: 'expected' },
     Node { type: 'Identifier', start: 41, end: 48, name: 'message' } ],
  body: Node { type: 'BlockStatement', start: 50, end: 200, body: [ [Node] ] } }
FunctionExpression
13
200
null
[+] Exception: eval-func-decl-in-global-of-eval.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1076,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 0,
       end: 201,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 203,
       end: 625,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 627,
       end: 643,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 644,
       end: 664,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 809,
       end: 863,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 865,
       end: 887,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 889,
       end: 905,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 907,
       end: 923,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'ExpressionStatement',
       start: 924,
       end: 1014,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1016,
       end: 1051,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1053,
       end: 1075,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
1076
[ Node {
    type: 'VariableDeclaration',
    start: 0,
    end: 201,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 203,
    end: 625,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 627,
    end: 643,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 644,
    end: 664,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 809,
    end: 863,
    expression: 
     Node {
       type: 'CallExpression',
       start: 809,
       end: 862,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 865,
    end: 887,
    expression: 
     Node {
       type: 'CallExpression',
       start: 865,
       end: 886,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 889,
    end: 905,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 889,
       end: 904,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'VariableDeclaration',
    start: 907,
    end: 923,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'ExpressionStatement',
    start: 924,
    end: 1014,
    expression: 
     Node {
       type: 'CallExpression',
       start: 924,
       end: 1013,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1016,
    end: 1051,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 1016,
       end: 1050,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 1053,
    end: 1075,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1053,
       end: 1074,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 0,
  end: 201,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 4,
       end: 200,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
0
201
[ Node {
    type: 'VariableDeclarator',
    start: 4,
    end: 200,
    id: Node { type: 'Identifier', start: 4, end: 10, name: 'assert' },
    init: 
     Node {
       type: 'FunctionExpression',
       start: 13,
       end: 200,
       id: null,
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] } } ]
Node {
  type: 'VariableDeclarator',
  start: 4,
  end: 200,
  id: Node { type: 'Identifier', start: 4, end: 10, name: 'assert' },
  init: 
   Node {
     type: 'FunctionExpression',
     start: 13,
     end: 200,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [ [Node], [Node], [Node] ],
     body: Node { type: 'BlockStatement', start: 50, end: 200, body: [Array] } } }
VariableDeclarator
4
200
Node { type: 'Identifier', start: 4, end: 10, name: 'assert' }
Identifier
4
10
assert
Node {
  type: 'FunctionExpression',
  start: 13,
  end: 200,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 23, end: 29, name: 'result' },
     Node { type: 'Identifier', start: 31, end: 39, name: 'expected' },
     Node { type: 'Identifier', start: 41, end: 48, name: 'message' } ],
  body: Node { type: 'BlockStatement', start: 50, end: 200, body: [ [Node] ] } }
FunctionExpression
13
200
null
[+] Exception: eval-func-decl-in-global.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 507,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 0,
       end: 196,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 198,
       end: 210,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 212,
       end: 416,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 418,
       end: 459,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 460,
       end: 506,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
507
[ Node {
    type: 'VariableDeclaration',
    start: 0,
    end: 196,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 198,
    end: 210,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 212,
    end: 416,
    expression: 
     Node {
       type: 'CallExpression',
       start: 213,
       end: 414,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 418,
    end: 459,
    expression: 
     Node {
       type: 'CallExpression',
       start: 418,
       end: 458,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 460,
    end: 506,
    expression: 
     Node {
       type: 'CallExpression',
       start: 460,
       end: 505,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 0,
  end: 196,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 4,
       end: 195,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
0
196
[ Node {
    type: 'VariableDeclarator',
    start: 4,
    end: 195,
    id: Node { type: 'Identifier', start: 4, end: 10, name: 'assert' },
    init: 
     Node {
       type: 'FunctionExpression',
       start: 13,
       end: 195,
       id: null,
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] } } ]
Node {
  type: 'VariableDeclarator',
  start: 4,
  end: 195,
  id: Node { type: 'Identifier', start: 4, end: 10, name: 'assert' },
  init: 
   Node {
     type: 'FunctionExpression',
     start: 13,
     end: 195,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [ [Node], [Node], [Node] ],
     body: Node { type: 'BlockStatement', start: 50, end: 195, body: [Array] } } }
VariableDeclarator
4
195
Node { type: 'Identifier', start: 4, end: 10, name: 'assert' }
Identifier
4
10
assert
Node {
  type: 'FunctionExpression',
  start: 13,
  end: 195,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 23, end: 29, name: 'result' },
     Node { type: 'Identifier', start: 31, end: 39, name: 'expected' },
     Node { type: 'Identifier', start: 41, end: 48, name: 'message' } ],
  body: Node { type: 'BlockStatement', start: 50, end: 195, body: [ [Node] ] } }
FunctionExpression
13
195
null
[+] Exception: eval-func-decl-in-if.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 4253,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 0,
       end: 171,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 173,
       end: 595,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 597,
       end: 770,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 772,
       end: 787,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 789,
       end: 854,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 855,
       end: 873,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 875,
       end: 943,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 944,
       end: 963,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 965,
       end: 1090,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1091,
       end: 1113,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1116,
       end: 1168,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1169,
       end: 1188,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1190,
       end: 1244,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1245,
       end: 1264,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1266,
       end: 1377,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1378,
       end: 1400,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 1402,
       end: 2078,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 2080,
       end: 2086,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 2088,
       end: 2534,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 2536,
       end: 2643,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 2645,
       end: 2758,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 2760,
       end: 2870,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 2872,
       end: 3212,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 3214,
       end: 3560,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 3562,
       end: 3903,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 3905,
       end: 3933,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 3934,
       end: 4023,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 4024,
       end: 4116,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 4117,
       end: 4206,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 4208,
       end: 4221,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 4222,
       end: 4238,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 4239,
       end: 4252,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
4253
[ Node {
    type: 'VariableDeclaration',
    start: 0,
    end: 171,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 173,
    end: 595,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 597,
    end: 770,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 772,
    end: 787,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 789,
    end: 854,
    expression: 
     Node {
       type: 'CallExpression',
       start: 789,
       end: 853,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 855,
    end: 873,
    expression: 
     Node {
       type: 'CallExpression',
       start: 855,
       end: 872,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 875,
    end: 943,
    expression: 
     Node {
       type: 'CallExpression',
       start: 875,
       end: 942,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 944,
    end: 963,
    expression: 
     Node {
       type: 'CallExpression',
       start: 944,
       end: 962,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 965,
    end: 1090,
    expression: 
     Node {
       type: 'CallExpression',
       start: 965,
       end: 1089,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1091,
    end: 1113,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1091,
       end: 1112,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1116,
    end: 1168,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1116,
       end: 1167,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1169,
    end: 1188,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1169,
       end: 1187,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1190,
    end: 1244,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1190,
       end: 1243,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1245,
    end: 1264,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1245,
       end: 1263,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1266,
    end: 1377,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1266,
       end: 1376,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1378,
    end: 1400,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1378,
       end: 1399,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 1402,
    end: 2078,
    id: Node { type: 'Identifier', start: 1411, end: 1414, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 1418, end: 2078, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 2080,
    end: 2086,
    expression: 
     Node {
       type: 'CallExpression',
       start: 2080,
       end: 2085,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'FunctionDeclaration',
    start: 2088,
    end: 2534,
    id: Node { type: 'Identifier', start: 2097, end: 2100, name: 'boo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 2104, end: 2534, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 2536,
    end: 2643,
    id: Node { type: 'Identifier', start: 2545, end: 2548, name: 'bar' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 2552, end: 2643, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 2645,
    end: 2758,
    id: Node { type: 'Identifier', start: 2654, end: 2660, name: 'foobar' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 2664, end: 2758, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 2760,
    end: 2870,
    id: Node { type: 'Identifier', start: 2769, end: 2772, name: 'baz' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 2775, end: 2870, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 2872,
    end: 3212,
    id: Node { type: 'Identifier', start: 2881, end: 2891, name: 'barWithTry' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 2895, end: 3212, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 3214,
    end: 3560,
    id: 
     Node {
       type: 'Identifier',
       start: 3223,
       end: 3236,
       name: 'foobarWithTry' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 3240, end: 3560, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 3562,
    end: 3903,
    id: Node { type: 'Identifier', start: 3571, end: 3581, name: 'bazWithTry' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 3585, end: 3903, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 3905,
    end: 3933,
    expression: 
     Node {
       type: 'CallExpression',
       start: 3905,
       end: 3932,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 3934,
    end: 4023,
    expression: 
     Node {
       type: 'CallExpression',
       start: 3934,
       end: 4022,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 4024,
    end: 4116,
    expression: 
     Node {
       type: 'CallExpression',
       start: 4024,
       end: 4115,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 4117,
    end: 4206,
    expression: 
     Node {
       type: 'CallExpression',
       start: 4117,
       end: 4205,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 4208,
    end: 4221,
    expression: 
     Node {
       type: 'CallExpression',
       start: 4208,
       end: 4220,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 4222,
    end: 4238,
    expression: 
     Node {
       type: 'CallExpression',
       start: 4222,
       end: 4237,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 4239,
    end: 4252,
    expression: 
     Node {
       type: 'CallExpression',
       start: 4239,
       end: 4251,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'VariableDeclaration',
  start: 0,
  end: 171,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 4,
       end: 170,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
0
171
[ Node {
    type: 'VariableDeclarator',
    start: 4,
    end: 170,
    id: Node { type: 'Identifier', start: 4, end: 10, name: 'assert' },
    init: 
     Node {
       type: 'FunctionExpression',
       start: 13,
       end: 170,
       id: null,
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] } } ]
Node {
  type: 'VariableDeclarator',
  start: 4,
  end: 170,
  id: Node { type: 'Identifier', start: 4, end: 10, name: 'assert' },
  init: 
   Node {
     type: 'FunctionExpression',
     start: 13,
     end: 170,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [ [Node], [Node] ],
     body: Node { type: 'BlockStatement', start: 41, end: 170, body: [Array] } } }
VariableDeclarator
4
170
Node { type: 'Identifier', start: 4, end: 10, name: 'assert' }
Identifier
4
10
assert
Node {
  type: 'FunctionExpression',
  start: 13,
  end: 170,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 23, end: 29, name: 'result' },
     Node { type: 'Identifier', start: 31, end: 39, name: 'expected' } ],
  body: Node { type: 'BlockStatement', start: 41, end: 170, body: [ [Node] ] } }
FunctionExpression
13
170
null
[+] Exception: eval-func-decl-with-let-const-class.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 3225,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 0,
       end: 201,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 203,
       end: 625,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 627,
       end: 816,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 818,
       end: 932,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 934,
       end: 1115,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 1117,
       end: 1230,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 1232,
       end: 1333,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 1335,
       end: 1457,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 2056,
       end: 2236,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 2238,
       end: 2352,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 2354,
       end: 2550,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 2552,
       end: 2665,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 2667,
       end: 2867,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 2869,
       end: 2982,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 2984,
       end: 3088,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 3090,
       end: 3108,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 3110,
       end: 3224,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
3225
[ Node {
    type: 'VariableDeclaration',
    start: 0,
    end: 201,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 203,
    end: 625,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 627,
    end: 816,
    id: Node { type: 'Identifier', start: 636, end: 639, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 642, end: 816, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 818,
    end: 932,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 823,
       end: 832,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 834,
       end: 843,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 845,
       end: 848,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 850, end: 932, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 934,
    end: 1115,
    id: Node { type: 'Identifier', start: 943, end: 946, name: 'boo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 949, end: 1115, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 1117,
    end: 1230,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 1122,
       end: 1131,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1133,
       end: 1142,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 1144,
       end: 1147,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 1148, end: 1230, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 1232,
    end: 1333,
    id: Node { type: 'Identifier', start: 1241, end: 1247, name: 'foobar' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 1250, end: 1333, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 1335,
    end: 1457,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 1340,
       end: 1349,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1351,
       end: 1360,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 1362,
       end: 1365,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 1366, end: 1457, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 2056,
    end: 2236,
    id: Node { type: 'Identifier', start: 2065, end: 2068, name: 'hoo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 2071, end: 2236, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 2238,
    end: 2352,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 2243,
       end: 2252,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 2254,
       end: 2263,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 2265,
       end: 2268,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 2270, end: 2352, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 2354,
    end: 2550,
    id: Node { type: 'Identifier', start: 2363, end: 2366, name: 'joo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 2369, end: 2550, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 2552,
    end: 2665,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 2557,
       end: 2566,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 2568,
       end: 2577,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 2579,
       end: 2582,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 2583, end: 2665, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 2667,
    end: 2867,
    id: Node { type: 'Identifier', start: 2676, end: 2679, name: 'koo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 2682, end: 2867, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 2869,
    end: 2982,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 2874,
       end: 2883,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 2885,
       end: 2894,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 2896,
       end: 2899,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 2900, end: 2982, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 2984,
    end: 3088,
    id: Node { type: 'Identifier', start: 2993, end: 2996, name: 'loo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 2999, end: 3088, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 3090,
    end: 3108,
    expression: 
     Node {
       type: 'CallExpression',
       start: 3090,
       end: 3107,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 3110,
    end: 3224,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 3115,
       end: 3124,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 3126,
       end: 3135,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 3137,
       end: 3140,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 3142, end: 3224, body: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 0,
  end: 201,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 4,
       end: 200,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
0
201
[ Node {
    type: 'VariableDeclarator',
    start: 4,
    end: 200,
    id: Node { type: 'Identifier', start: 4, end: 10, name: 'assert' },
    init: 
     Node {
       type: 'FunctionExpression',
       start: 13,
       end: 200,
       id: null,
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] } } ]
Node {
  type: 'VariableDeclarator',
  start: 4,
  end: 200,
  id: Node { type: 'Identifier', start: 4, end: 10, name: 'assert' },
  init: 
   Node {
     type: 'FunctionExpression',
     start: 13,
     end: 200,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [ [Node], [Node], [Node] ],
     body: Node { type: 'BlockStatement', start: 50, end: 200, body: [Array] } } }
VariableDeclarator
4
200
Node { type: 'Identifier', start: 4, end: 10, name: 'assert' }
Identifier
4
10
assert
Node {
  type: 'FunctionExpression',
  start: 13,
  end: 200,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 23, end: 29, name: 'result' },
     Node { type: 'Identifier', start: 31, end: 39, name: 'expected' },
     Node { type: 'Identifier', start: 41, end: 48, name: 'message' } ],
  body: Node { type: 'BlockStatement', start: 50, end: 200, body: [ [Node] ] } }
FunctionExpression
13
200
null
[+] Exception: eval-func-decl-within-eval-with-reassign-to-var.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1517,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 0,
       end: 201,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 203,
       end: 625,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 627,
       end: 790,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 792,
       end: 905,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 907,
       end: 1090,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 1092,
       end: 1205,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 1207,
       end: 1444,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1446,
       end: 1452,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1453,
       end: 1516,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
1517
[ Node {
    type: 'VariableDeclaration',
    start: 0,
    end: 201,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 203,
    end: 625,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 627,
    end: 790,
    id: Node { type: 'Identifier', start: 636, end: 639, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 642, end: 790, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 792,
    end: 905,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 797,
       end: 806,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 808,
       end: 817,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 819,
       end: 822,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 823, end: 905, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 907,
    end: 1090,
    id: Node { type: 'Identifier', start: 916, end: 919, name: 'boo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 922, end: 1090, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 1092,
    end: 1205,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 1097,
       end: 1106,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1108,
       end: 1117,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 1119,
       end: 1122,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 1123, end: 1205, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 1207,
    end: 1444,
    id: Node { type: 'Identifier', start: 1216, end: 1219, name: 'goo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 1222, end: 1444, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1446,
    end: 1452,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1446,
       end: 1451,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 1453,
    end: 1516,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1453,
       end: 1515,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 0,
  end: 201,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 4,
       end: 200,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
0
201
[ Node {
    type: 'VariableDeclarator',
    start: 4,
    end: 200,
    id: Node { type: 'Identifier', start: 4, end: 10, name: 'assert' },
    init: 
     Node {
       type: 'FunctionExpression',
       start: 13,
       end: 200,
       id: null,
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] } } ]
Node {
  type: 'VariableDeclarator',
  start: 4,
  end: 200,
  id: Node { type: 'Identifier', start: 4, end: 10, name: 'assert' },
  init: 
   Node {
     type: 'FunctionExpression',
     start: 13,
     end: 200,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [ [Node], [Node], [Node] ],
     body: Node { type: 'BlockStatement', start: 50, end: 200, body: [Array] } } }
VariableDeclarator
4
200
Node { type: 'Identifier', start: 4, end: 10, name: 'assert' }
Identifier
4
10
assert
Node {
  type: 'FunctionExpression',
  start: 13,
  end: 200,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 23, end: 29, name: 'result' },
     Node { type: 'Identifier', start: 31, end: 39, name: 'expected' },
     Node { type: 'Identifier', start: 41, end: 48, name: 'message' } ],
  body: Node { type: 'BlockStatement', start: 50, end: 200, body: [ [Node] ] } }
FunctionExpression
13
200
null
[+] Exception: eval-func-decl-within-eval-without-reassign-to-let.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 489,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 125,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 127,
       end: 145,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ForStatement',
       start: 146,
       end: 296,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 298,
       end: 488,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
489
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 125,
    id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 36, end: 125, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 127,
    end: 145,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ForStatement',
    start: 146,
    end: 296,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 151,
       end: 160,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 162,
       end: 169,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 171,
       end: 174,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 176, end: 296, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 298,
    end: 488,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 303,
       end: 312,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 314,
       end: 321,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 323,
       end: 326,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 328, end: 488, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 125,
  id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
     Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ],
  body: Node { type: 'BlockStatement', start: 36, end: 125, body: [ [Node] ] } }
FunctionDeclaration
0
125
Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' }
Identifier
9
17
shouldBe
false
false
false
[ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
  Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ]
Node { type: 'Identifier', start: 18, end: 24, name: 'actual' }
Identifier
18
24
actual
Node { type: 'Identifier', start: 26, end: 34, name: 'expected' }
Identifier
26
34
expected
Node {
  type: 'BlockStatement',
  start: 36,
  end: 125,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 42,
       end: 123,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
36
125
[ Node {
    type: 'IfStatement',
    start: 42,
    end: 123,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 46,
       end: 65,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 75, end: 123, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 42,
  end: 123,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 46,
     end: 65,
     left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
     operator: '!==',
     right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 75,
     end: 123,
     argument: 
      Node {
        type: 'NewExpression',
        start: 81,
        end: 122,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
42
123
Node {
  type: 'BinaryExpression',
  start: 46,
  end: 65,
  left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
  operator: '!==',
  right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } }
BinaryExpression
46
65
Node { type: 'Identifier', start: 46, end: 52, name: 'actual' }
Identifier
46
52
actual
!==
Node { type: 'Identifier', start: 57, end: 65, name: 'expected' }
Identifier
57
65
expected
Node {
  type: 'ThrowStatement',
  start: 75,
  end: 123,
  argument: 
   Node {
     type: 'NewExpression',
     start: 81,
     end: 122,
     callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
75
123
Node {
  type: 'NewExpression',
  start: 81,
  end: 122,
  callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
  arguments: 
   [ Node {
       type: 'TemplateLiteral',
       start: 91,
       end: 121,
       expressions: [Array],
       quasis: [Array] } ] }
NewExpression
81
122
Node { type: 'Identifier', start: 85, end: 90, name: 'Error' }
Identifier
85
90
Error
[ Node {
    type: 'TemplateLiteral',
    start: 91,
    end: 121,
    expressions: [ [Node] ],
    quasis: [ [Node], [Node] ] } ]
Node {
  type: 'TemplateLiteral',
  start: 91,
  end: 121,
  expressions: 
   [ Node {
       type: 'CallExpression',
       start: 105,
       end: 119,
       callee: [Node],
       arguments: [Array] } ],
  quasis: 
   [ Node {
       type: 'TemplateElement',
       start: 92,
       end: 103,
       value: [Object],
       tail: false },
     Node {
       type: 'TemplateElement',
       start: 120,
       end: 120,
       value: [Object],
       tail: true } ] }
TemplateLiteral
91
121
[ Node {
    type: 'CallExpression',
    start: 105,
    end: 119,
    callee: Node { type: 'Identifier', start: 105, end: 111, name: 'String' },
    arguments: [ [Node] ] } ]
Node {
  type: 'CallExpression',
  start: 105,
  end: 119,
  callee: Node { type: 'Identifier', start: 105, end: 111, name: 'String' },
  arguments: 
   [ Node { type: 'Identifier', start: 112, end: 118, name: 'actual' } ] }
CallExpression
105
119
Node { type: 'Identifier', start: 105, end: 111, name: 'String' }
Identifier
105
111
String
[ Node { type: 'Identifier', start: 112, end: 118, name: 'actual' } ]
Node { type: 'Identifier', start: 112, end: 118, name: 'actual' }
Identifier
112
118
actual
[ Node {
    type: 'TemplateElement',
    start: 92,
    end: 103,
    value: { raw: 'bad value: ', cooked: 'bad value: ' },
    tail: false },
  Node {
    type: 'TemplateElement',
    start: 120,
    end: 120,
    value: { raw: '', cooked: '' },
    tail: true } ]
Node {
  type: 'TemplateElement',
  start: 92,
  end: 103,
  value: { raw: 'bad value: ', cooked: 'bad value: ' },
  tail: false }
TemplateElement
92
103
{ raw: 'bad value: ', cooked: 'bad value: ' }
bad value: 
bad value: 
false
Node {
  type: 'TemplateElement',
  start: 120,
  end: 120,
  value: { raw: '', cooked: '' },
  tail: true }
TemplateElement
120
120
{ raw: '', cooked: '' }


true
null
[+] Exception: eval-in-arrow-function.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 272,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 117,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 119,
       end: 210,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 211,
       end: 226,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 228,
       end: 271,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
272
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 117,
    id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 36, end: 117, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 119,
    end: 210,
    id: Node { type: 'Identifier', start: 128, end: 132, name: 'test' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 135, end: 210, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 211,
    end: 226,
    expression: 
     Node {
       type: 'CallExpression',
       start: 211,
       end: 225,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 228,
    end: 271,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 233,
       end: 242,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 244,
       end: 253,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 255,
       end: 258,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 264,
       end: 271,
       expression: [Node] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 117,
  id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
     Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ],
  body: Node { type: 'BlockStatement', start: 36, end: 117, body: [ [Node] ] } }
FunctionDeclaration
0
117
Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' }
Identifier
9
17
shouldBe
false
false
false
[ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
  Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ]
Node { type: 'Identifier', start: 18, end: 24, name: 'actual' }
Identifier
18
24
actual
Node { type: 'Identifier', start: 26, end: 34, name: 'expected' }
Identifier
26
34
expected
Node {
  type: 'BlockStatement',
  start: 36,
  end: 117,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 42,
       end: 115,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
36
117
[ Node {
    type: 'IfStatement',
    start: 42,
    end: 115,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 46,
       end: 65,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 75, end: 115, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 42,
  end: 115,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 46,
     end: 65,
     left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
     operator: '!==',
     right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 75,
     end: 115,
     argument: 
      Node {
        type: 'NewExpression',
        start: 81,
        end: 114,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
42
115
Node {
  type: 'BinaryExpression',
  start: 46,
  end: 65,
  left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
  operator: '!==',
  right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } }
BinaryExpression
46
65
Node { type: 'Identifier', start: 46, end: 52, name: 'actual' }
Identifier
46
52
actual
!==
Node { type: 'Identifier', start: 57, end: 65, name: 'expected' }
Identifier
57
65
expected
Node {
  type: 'ThrowStatement',
  start: 75,
  end: 115,
  argument: 
   Node {
     type: 'NewExpression',
     start: 81,
     end: 114,
     callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
75
115
Node {
  type: 'NewExpression',
  start: 81,
  end: 114,
  callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
  arguments: 
   [ Node {
       type: 'BinaryExpression',
       start: 91,
       end: 113,
       left: [Node],
       operator: '+',
       right: [Node] } ] }
NewExpression
81
114
Node { type: 'Identifier', start: 85, end: 90, name: 'Error' }
Identifier
85
90
Error
[ Node {
    type: 'BinaryExpression',
    start: 91,
    end: 113,
    left: 
     Node {
       type: 'Literal',
       start: 91,
       end: 104,
       value: 'bad value: ',
       raw: '"bad value: "' },
    operator: '+',
    right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } } ]
Node {
  type: 'BinaryExpression',
  start: 91,
  end: 113,
  left: 
   Node {
     type: 'Literal',
     start: 91,
     end: 104,
     value: 'bad value: ',
     raw: '"bad value: "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } }
BinaryExpression
91
113
Node {
  type: 'Literal',
  start: 91,
  end: 104,
  value: 'bad value: ',
  raw: '"bad value: "' }
Literal
91
104
bad value: 
"bad value: "
+
Node { type: 'Identifier', start: 107, end: 113, name: 'actual' }
Identifier
107
113
actual
null
[+] Exception: eval-script-contains-null-character.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 226,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 39,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 41,
       end: 55,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 57,
       end: 93,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 95,
       end: 224,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
226
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 39,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 16, end: 39, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 41,
    end: 55,
    expression: 
     Node {
       type: 'CallExpression',
       start: 41,
       end: 54,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 57,
    end: 93,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 57,
       end: 93,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ForStatement',
    start: 95,
    end: 224,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 100,
       end: 109,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 111,
       end: 120,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 122,
       end: 125,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 127, end: 224, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 39,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 13, end: 14, name: 'a' } ],
  body: Node { type: 'BlockStatement', start: 16, end: 39, body: [ [Node] ] } }
FunctionDeclaration
0
39
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'a' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'a' }
Identifier
13
14
a
Node {
  type: 'BlockStatement',
  start: 16,
  end: 39,
  body: 
   [ Node { type: 'ReturnStatement', start: 22, end: 37, argument: [Node] } ] }
BlockStatement
16
39
[ Node {
    type: 'ReturnStatement',
    start: 22,
    end: 37,
    argument: 
     Node {
       type: 'CallExpression',
       start: 29,
       end: 36,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'ReturnStatement',
  start: 22,
  end: 37,
  argument: 
   Node {
     type: 'CallExpression',
     start: 29,
     end: 36,
     callee: Node { type: 'Identifier', start: 29, end: 33, name: 'eval' },
     arguments: [ [Node] ] } }
ReturnStatement
22
37
Node {
  type: 'CallExpression',
  start: 29,
  end: 36,
  callee: Node { type: 'Identifier', start: 29, end: 33, name: 'eval' },
  arguments: [ Node { type: 'Identifier', start: 34, end: 35, name: 'a' } ] }
CallExpression
29
36
Node { type: 'Identifier', start: 29, end: 33, name: 'eval' }
Identifier
29
33
eval
[ Node { type: 'Identifier', start: 34, end: 35, name: 'a' } ]
Node { type: 'Identifier', start: 34, end: 35, name: 'a' }
Identifier
34
35
a
Node {
  type: 'ExpressionStatement',
  start: 41,
  end: 55,
  expression: 
   Node {
     type: 'CallExpression',
     start: 41,
     end: 54,
     callee: Node { type: 'Identifier', start: 41, end: 49, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
41
55
Node {
  type: 'CallExpression',
  start: 41,
  end: 54,
  callee: Node { type: 'Identifier', start: 41, end: 49, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 50, end: 53, name: 'foo' } ] }
CallExpression
41
54
Node { type: 'Identifier', start: 41, end: 49, name: 'noInline' }
Identifier
41
49
noInline
[ Node { type: 'Identifier', start: 50, end: 53, name: 'foo' } ]
Node { type: 'Identifier', start: 50, end: 53, name: 'foo' }
Identifier
50
53
foo
Node {
  type: 'ExpressionStatement',
  start: 57,
  end: 93,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 57,
     end: 93,
     operator: '=',
     left: Node { type: 'Identifier', start: 57, end: 61, name: 'eval' },
     right: 
      Node {
        type: 'FunctionExpression',
        start: 64,
        end: 93,
        id: null,
        generator: false,
        expression: false,
        async: false,
        params: [Array],
        body: [Node] } } }
ExpressionStatement
57
93
Node {
  type: 'AssignmentExpression',
  start: 57,
  end: 93,
  operator: '=',
  left: Node { type: 'Identifier', start: 57, end: 61, name: 'eval' },
  right: 
   Node {
     type: 'FunctionExpression',
     start: 64,
     end: 93,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [ [Node] ],
     body: Node { type: 'BlockStatement', start: 76, end: 93, body: [Array] } } }
AssignmentExpression
57
93
=
Node { type: 'Identifier', start: 57, end: 61, name: 'eval' }
Identifier
57
61
eval
Node {
  type: 'FunctionExpression',
  start: 64,
  end: 93,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 73, end: 74, name: 'a' } ],
  body: Node { type: 'BlockStatement', start: 76, end: 93, body: [ [Node] ] } }
FunctionExpression
64
93
null
[+] Exception: eval-that-is-not-eval.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 668,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 76,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 77,
       end: 94,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 95,
       end: 187,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 188,
       end: 226,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 227,
       end: 242,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 244,
       end: 285,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 287,
       end: 474,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 475,
       end: 489,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 491,
       end: 650,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 651,
       end: 667,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
668
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 76,
    id: Node { type: 'Identifier', start: 9, end: 15, name: 'assert' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 76, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 77,
    end: 94,
    expression: 
     Node {
       type: 'CallExpression',
       start: 77,
       end: 93,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 95,
    end: 187,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 188,
    end: 226,
    id: Node { type: 'Identifier', start: 197, end: 201, name: 'read' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 204, end: 226, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 227,
    end: 242,
    expression: 
     Node {
       type: 'CallExpression',
       start: 227,
       end: 241,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 244,
    end: 285,
    id: Node { type: 'Identifier', start: 253, end: 256, name: 'bar' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 263, end: 285, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 287,
    end: 474,
    id: Node { type: 'Identifier', start: 296, end: 299, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 306, end: 474, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 475,
    end: 489,
    expression: 
     Node {
       type: 'CallExpression',
       start: 475,
       end: 488,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 491,
    end: 650,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 496,
       end: 505,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 507,
       end: 515,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 517,
       end: 520,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 522, end: 650, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 651,
    end: 667,
    expression: 
     Node {
       type: 'CallExpression',
       start: 651,
       end: 666,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 76,
  id: Node { type: 'Identifier', start: 9, end: 15, name: 'assert' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ],
  body: Node { type: 'BlockStatement', start: 19, end: 76, body: [ [Node] ] } }
FunctionDeclaration
0
76
Node { type: 'Identifier', start: 9, end: 15, name: 'assert' }
Identifier
9
15
assert
false
false
false
[ Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ]
Node { type: 'Identifier', start: 16, end: 17, name: 'b' }
Identifier
16
17
b
Node {
  type: 'BlockStatement',
  start: 19,
  end: 76,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 25,
       end: 74,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
19
76
[ Node {
    type: 'IfStatement',
    start: 25,
    end: 74,
    test: 
     Node {
       type: 'UnaryExpression',
       start: 29,
       end: 31,
       operator: '!',
       prefix: true,
       argument: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 41, end: 74, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 25,
  end: 74,
  test: 
   Node {
     type: 'UnaryExpression',
     start: 29,
     end: 31,
     operator: '!',
     prefix: true,
     argument: Node { type: 'Identifier', start: 30, end: 31, name: 'b' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 41,
     end: 74,
     argument: 
      Node {
        type: 'NewExpression',
        start: 47,
        end: 73,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
25
74
Node {
  type: 'UnaryExpression',
  start: 29,
  end: 31,
  operator: '!',
  prefix: true,
  argument: Node { type: 'Identifier', start: 30, end: 31, name: 'b' } }
UnaryExpression
29
31
!
true
Node { type: 'Identifier', start: 30, end: 31, name: 'b' }
Identifier
30
31
b
Node {
  type: 'ThrowStatement',
  start: 41,
  end: 74,
  argument: 
   Node {
     type: 'NewExpression',
     start: 47,
     end: 73,
     callee: Node { type: 'Identifier', start: 51, end: 56, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
41
74
Node {
  type: 'NewExpression',
  start: 47,
  end: 73,
  callee: Node { type: 'Identifier', start: 51, end: 56, name: 'Error' },
  arguments: 
   [ Node {
       type: 'Literal',
       start: 57,
       end: 72,
       value: 'Bad assertion',
       raw: '"Bad assertion"' } ] }
NewExpression
47
73
Node { type: 'Identifier', start: 51, end: 56, name: 'Error' }
Identifier
51
56
Error
[ Node {
    type: 'Literal',
    start: 57,
    end: 72,
    value: 'Bad assertion',
    raw: '"Bad assertion"' } ]
Node {
  type: 'Literal',
  start: 57,
  end: 72,
  value: 'Bad assertion',
  raw: '"Bad assertion"' }
Literal
57
72
Bad assertion
"Bad assertion"
null
[+] Exception: exception-dfg-inlined-frame-not-strict-equal.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1245,
  body: 
   [ Node { type: 'EmptyStatement', start: 0, end: 1 },
     Node {
       type: 'ExpressionStatement',
       start: 1,
       end: 412,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 415,
       end: 491,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 492,
       end: 509,
       expression: [Node] },
     Node { type: 'EmptyStatement', start: 512, end: 513 },
     Node {
       type: 'ExpressionStatement',
       start: 513,
       end: 1244,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
1245
[ Node { type: 'EmptyStatement', start: 0, end: 1 },
  Node {
    type: 'ExpressionStatement',
    start: 1,
    end: 412,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1,
       end: 411,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'FunctionDeclaration',
    start: 415,
    end: 491,
    id: Node { type: 'Identifier', start: 424, end: 430, name: 'assert' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 434, end: 491, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 492,
    end: 509,
    expression: 
     Node {
       type: 'CallExpression',
       start: 492,
       end: 508,
       callee: [Node],
       arguments: [Array] } },
  Node { type: 'EmptyStatement', start: 512, end: 513 },
  Node {
    type: 'ExpressionStatement',
    start: 513,
    end: 1244,
    expression: 
     Node {
       type: 'CallExpression',
       start: 513,
       end: 1243,
       callee: [Node],
       arguments: [] } } ]
Node { type: 'EmptyStatement', start: 0, end: 1 }
EmptyStatement
0
1
Node {
  type: 'ExpressionStatement',
  start: 1,
  end: 412,
  expression: 
   Node {
     type: 'CallExpression',
     start: 1,
     end: 411,
     callee: 
      Node {
        type: 'FunctionExpression',
        start: 2,
        end: 408,
        id: null,
        generator: false,
        expression: false,
        async: false,
        params: [],
        body: [Node] },
     arguments: [] } }
ExpressionStatement
1
412
Node {
  type: 'CallExpression',
  start: 1,
  end: 411,
  callee: 
   Node {
     type: 'FunctionExpression',
     start: 2,
     end: 408,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [],
     body: Node { type: 'BlockStatement', start: 14, end: 408, body: [Array] } },
  arguments: [] }
CallExpression
1
411
Node {
  type: 'FunctionExpression',
  start: 2,
  end: 408,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: 
   Node {
     type: 'BlockStatement',
     start: 14,
     end: 408,
     body: [ [Node], [Node], [Node], [Node], [Node] ] } }
FunctionExpression
2
408
null
[+] Exception: exception-dfg-not-strict-equal.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 622,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 76,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 77,
       end: 94,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 95,
       end: 187,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 188,
       end: 226,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 227,
       end: 242,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 244,
       end: 428,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 429,
       end: 443,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 445,
       end: 604,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 605,
       end: 621,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
622
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 76,
    id: Node { type: 'Identifier', start: 9, end: 15, name: 'assert' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 76, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 77,
    end: 94,
    expression: 
     Node {
       type: 'CallExpression',
       start: 77,
       end: 93,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 95,
    end: 187,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 188,
    end: 226,
    id: Node { type: 'Identifier', start: 197, end: 201, name: 'read' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 204, end: 226, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 227,
    end: 242,
    expression: 
     Node {
       type: 'CallExpression',
       start: 227,
       end: 241,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 244,
    end: 428,
    id: Node { type: 'Identifier', start: 253, end: 256, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 263, end: 428, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 429,
    end: 443,
    expression: 
     Node {
       type: 'CallExpression',
       start: 429,
       end: 442,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 445,
    end: 604,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 450,
       end: 459,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 461,
       end: 469,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 471,
       end: 474,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 476, end: 604, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 605,
    end: 621,
    expression: 
     Node {
       type: 'CallExpression',
       start: 605,
       end: 620,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 76,
  id: Node { type: 'Identifier', start: 9, end: 15, name: 'assert' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ],
  body: Node { type: 'BlockStatement', start: 19, end: 76, body: [ [Node] ] } }
FunctionDeclaration
0
76
Node { type: 'Identifier', start: 9, end: 15, name: 'assert' }
Identifier
9
15
assert
false
false
false
[ Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ]
Node { type: 'Identifier', start: 16, end: 17, name: 'b' }
Identifier
16
17
b
Node {
  type: 'BlockStatement',
  start: 19,
  end: 76,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 25,
       end: 74,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
19
76
[ Node {
    type: 'IfStatement',
    start: 25,
    end: 74,
    test: 
     Node {
       type: 'UnaryExpression',
       start: 29,
       end: 31,
       operator: '!',
       prefix: true,
       argument: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 41, end: 74, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 25,
  end: 74,
  test: 
   Node {
     type: 'UnaryExpression',
     start: 29,
     end: 31,
     operator: '!',
     prefix: true,
     argument: Node { type: 'Identifier', start: 30, end: 31, name: 'b' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 41,
     end: 74,
     argument: 
      Node {
        type: 'NewExpression',
        start: 47,
        end: 73,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
25
74
Node {
  type: 'UnaryExpression',
  start: 29,
  end: 31,
  operator: '!',
  prefix: true,
  argument: Node { type: 'Identifier', start: 30, end: 31, name: 'b' } }
UnaryExpression
29
31
!
true
Node { type: 'Identifier', start: 30, end: 31, name: 'b' }
Identifier
30
31
b
Node {
  type: 'ThrowStatement',
  start: 41,
  end: 74,
  argument: 
   Node {
     type: 'NewExpression',
     start: 47,
     end: 73,
     callee: Node { type: 'Identifier', start: 51, end: 56, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
41
74
Node {
  type: 'NewExpression',
  start: 47,
  end: 73,
  callee: Node { type: 'Identifier', start: 51, end: 56, name: 'Error' },
  arguments: 
   [ Node {
       type: 'Literal',
       start: 57,
       end: 72,
       value: 'Bad assertion',
       raw: '"Bad assertion"' } ] }
NewExpression
47
73
Node { type: 'Identifier', start: 51, end: 56, name: 'Error' }
Identifier
51
56
Error
[ Node {
    type: 'Literal',
    start: 57,
    end: 72,
    value: 'Bad assertion',
    raw: '"Bad assertion"' } ]
Node {
  type: 'Literal',
  start: 57,
  end: 72,
  value: 'Bad assertion',
  raw: '"Bad assertion"' }
Literal
57
72
Bad assertion
"Bad assertion"
null
[+] Exception: exception-dfg-operation-read-value.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 647,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 0,
       end: 13,
       expression: [Node],
       directive: 'use strict' },
     Node {
       type: 'FunctionDeclaration',
       start: 14,
       end: 114,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 115,
       end: 132,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 134,
       end: 196,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 198,
       end: 394,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 396,
       end: 551,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 553,
       end: 576,
       declarations: [Array],
       kind: 'const' },
     Node {
       type: 'ForStatement',
       start: 577,
       end: 646,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
647
[ Node {
    type: 'ExpressionStatement',
    start: 0,
    end: 13,
    expression: 
     Node {
       type: 'Literal',
       start: 0,
       end: 12,
       value: 'use strict',
       raw: '"use strict"' },
    directive: 'use strict' },
  Node {
    type: 'FunctionDeclaration',
    start: 14,
    end: 114,
    id: Node { type: 'Identifier', start: 23, end: 29, name: 'assert' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 39, end: 114, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 115,
    end: 132,
    expression: 
     Node {
       type: 'CallExpression',
       start: 115,
       end: 131,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 134,
    end: 196,
    id: Node { type: 'Identifier', start: 143, end: 146, name: 'baz' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 150, end: 196, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 198,
    end: 394,
    id: Node { type: 'Identifier', start: 207, end: 210, name: 'bar' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 214, end: 394, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 396,
    end: 551,
    id: Node { type: 'Identifier', start: 405, end: 408, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 412, end: 551, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 553,
    end: 576,
    declarations: [ [Node] ],
    kind: 'const' },
  Node {
    type: 'ForStatement',
    start: 577,
    end: 646,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 582,
       end: 591,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 593,
       end: 606,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 608,
       end: 611,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 613, end: 646, body: [Array] } } ]
Node {
  type: 'ExpressionStatement',
  start: 0,
  end: 13,
  expression: 
   Node {
     type: 'Literal',
     start: 0,
     end: 12,
     value: 'use strict',
     raw: '"use strict"' },
  directive: 'use strict' }
ExpressionStatement
0
13
Node {
  type: 'Literal',
  start: 0,
  end: 12,
  value: 'use strict',
  raw: '"use strict"' }
Literal
0
12
use strict
"use strict"
use strict
Node {
  type: 'FunctionDeclaration',
  start: 14,
  end: 114,
  id: Node { type: 'Identifier', start: 23, end: 29, name: 'assert' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 30, end: 34, name: 'cond' },
     Node { type: 'Identifier', start: 36, end: 37, name: 'm' } ],
  body: Node { type: 'BlockStatement', start: 39, end: 114, body: [ [Node] ] } }
FunctionDeclaration
14
114
Node { type: 'Identifier', start: 23, end: 29, name: 'assert' }
Identifier
23
29
assert
false
false
false
[ Node { type: 'Identifier', start: 30, end: 34, name: 'cond' },
  Node { type: 'Identifier', start: 36, end: 37, name: 'm' } ]
Node { type: 'Identifier', start: 30, end: 34, name: 'cond' }
Identifier
30
34
cond
Node { type: 'Identifier', start: 36, end: 37, name: 'm' }
Identifier
36
37
m
Node {
  type: 'BlockStatement',
  start: 39,
  end: 114,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 45,
       end: 112,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
39
114
[ Node {
    type: 'IfStatement',
    start: 45,
    end: 112,
    test: 
     Node {
       type: 'UnaryExpression',
       start: 49,
       end: 54,
       operator: '!',
       prefix: true,
       argument: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 64, end: 112, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 45,
  end: 112,
  test: 
   Node {
     type: 'UnaryExpression',
     start: 49,
     end: 54,
     operator: '!',
     prefix: true,
     argument: Node { type: 'Identifier', start: 50, end: 54, name: 'cond' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 64,
     end: 112,
     argument: 
      Node {
        type: 'NewExpression',
        start: 70,
        end: 111,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
45
112
Node {
  type: 'UnaryExpression',
  start: 49,
  end: 54,
  operator: '!',
  prefix: true,
  argument: Node { type: 'Identifier', start: 50, end: 54, name: 'cond' } }
UnaryExpression
49
54
!
true
Node { type: 'Identifier', start: 50, end: 54, name: 'cond' }
Identifier
50
54
cond
Node {
  type: 'ThrowStatement',
  start: 64,
  end: 112,
  argument: 
   Node {
     type: 'NewExpression',
     start: 70,
     end: 111,
     callee: Node { type: 'Identifier', start: 74, end: 79, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
64
112
Node {
  type: 'NewExpression',
  start: 70,
  end: 111,
  callee: Node { type: 'Identifier', start: 74, end: 79, name: 'Error' },
  arguments: 
   [ Node {
       type: 'BinaryExpression',
       start: 80,
       end: 110,
       left: [Node],
       operator: '+',
       right: [Node] } ] }
NewExpression
70
111
Node { type: 'Identifier', start: 74, end: 79, name: 'Error' }
Identifier
74
79
Error
[ Node {
    type: 'BinaryExpression',
    start: 80,
    end: 110,
    left: 
     Node {
       type: 'BinaryExpression',
       start: 80,
       end: 104,
       left: [Node],
       operator: '+',
       right: [Node] },
    operator: '+',
    right: Node { type: 'Literal', start: 107, end: 110, value: '\'', raw: '"\'"' } } ]
Node {
  type: 'BinaryExpression',
  start: 80,
  end: 110,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 80,
     end: 104,
     left: 
      Node {
        type: 'Literal',
        start: 80,
        end: 100,
        value: 'broke assertion: \'',
        raw: '"broke assertion: \'"' },
     operator: '+',
     right: Node { type: 'Identifier', start: 103, end: 104, name: 'm' } },
  operator: '+',
  right: Node { type: 'Literal', start: 107, end: 110, value: '\'', raw: '"\'"' } }
BinaryExpression
80
110
Node {
  type: 'BinaryExpression',
  start: 80,
  end: 104,
  left: 
   Node {
     type: 'Literal',
     start: 80,
     end: 100,
     value: 'broke assertion: \'',
     raw: '"broke assertion: \'"' },
  operator: '+',
  right: Node { type: 'Identifier', start: 103, end: 104, name: 'm' } }
BinaryExpression
80
104
Node {
  type: 'Literal',
  start: 80,
  end: 100,
  value: 'broke assertion: \'',
  raw: '"broke assertion: \'"' }
Literal
80
100
broke assertion: '
"broke assertion: '"
+
Node { type: 'Identifier', start: 103, end: 104, name: 'm' }
Identifier
103
104
m
+
Node { type: 'Literal', start: 107, end: 110, value: '\'', raw: '"\'"' }
Literal
107
110
'
"'"
null
[+] Exception: exception-dfg-throw-from-catch-block.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 890,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 40,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 42,
       end: 56,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 58,
       end: 73,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ForStatement',
       start: 74,
       end: 126,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 128,
       end: 144,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 145,
       end: 204,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ForStatement',
       start: 206,
       end: 473,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 501,
       end: 513,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ForStatement',
       start: 514,
       end: 557,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 559,
       end: 571,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 572,
       end: 590,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 591,
       end: 612,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'TryStatement',
       start: 613,
       end: 679,
       block: [Node],
       handler: [Node],
       finalizer: null },
     Node {
       type: 'IfStatement',
       start: 681,
       end: 730,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 731,
       end: 810,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 811,
       end: 889,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
890
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 40,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 40, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 42,
    end: 56,
    expression: 
     Node {
       type: 'CallExpression',
       start: 42,
       end: 55,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 58,
    end: 73,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ForStatement',
    start: 74,
    end: 126,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 79,
       end: 88,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 90,
       end: 96,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 98,
       end: 101,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 107,
       end: 126,
       expression: [Node] } },
  Node {
    type: 'VariableDeclaration',
    start: 128,
    end: 144,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 145,
    end: 204,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ForStatement',
    start: 206,
    end: 473,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 211,
       end: 220,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 222,
       end: 231,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 233,
       end: 236,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 238, end: 473, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 501,
    end: 513,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ForStatement',
    start: 514,
    end: 557,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 519,
       end: 528,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 530,
       end: 536,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 538,
       end: 541,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 547,
       end: 557,
       expression: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 559,
    end: 571,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 559,
       end: 570,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'VariableDeclaration',
    start: 572,
    end: 590,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 591,
    end: 612,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'TryStatement',
    start: 613,
    end: 679,
    block: Node { type: 'BlockStatement', start: 617, end: 644, body: [Array] },
    handler: 
     Node {
       type: 'CatchClause',
       start: 645,
       end: 679,
       param: [Node],
       body: [Node] },
    finalizer: null },
  Node {
    type: 'IfStatement',
    start: 681,
    end: 730,
    test: 
     Node {
       type: 'UnaryExpression',
       start: 685,
       end: 694,
       operator: '!',
       prefix: true,
       argument: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 700, end: 730, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 731,
    end: 810,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 735,
       end: 750,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 756, end: 810, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 811,
    end: 889,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 815,
       end: 827,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 833, end: 889, argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 40,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'a' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ],
  body: Node { type: 'BlockStatement', start: 19, end: 40, body: [ [Node] ] } }
FunctionDeclaration
0
40
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'a' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'a' }
Identifier
13
14
a
Node { type: 'Identifier', start: 16, end: 17, name: 'b' }
Identifier
16
17
b
Node {
  type: 'BlockStatement',
  start: 19,
  end: 40,
  body: 
   [ Node { type: 'ReturnStatement', start: 25, end: 38, argument: [Node] } ] }
BlockStatement
19
40
[ Node {
    type: 'ReturnStatement',
    start: 25,
    end: 38,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 32,
       end: 37,
       left: [Node],
       operator: '+',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 25,
  end: 38,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 32,
     end: 37,
     left: Node { type: 'Identifier', start: 32, end: 33, name: 'a' },
     operator: '+',
     right: Node { type: 'Identifier', start: 36, end: 37, name: 'b' } } }
ReturnStatement
25
38
Node {
  type: 'BinaryExpression',
  start: 32,
  end: 37,
  left: Node { type: 'Identifier', start: 32, end: 33, name: 'a' },
  operator: '+',
  right: Node { type: 'Identifier', start: 36, end: 37, name: 'b' } }
BinaryExpression
32
37
Node { type: 'Identifier', start: 32, end: 33, name: 'a' }
Identifier
32
33
a
+
Node { type: 'Identifier', start: 36, end: 37, name: 'b' }
Identifier
36
37
b
Node {
  type: 'ExpressionStatement',
  start: 42,
  end: 56,
  expression: 
   Node {
     type: 'CallExpression',
     start: 42,
     end: 55,
     callee: Node { type: 'Identifier', start: 42, end: 50, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
42
56
Node {
  type: 'CallExpression',
  start: 42,
  end: 55,
  callee: Node { type: 'Identifier', start: 42, end: 50, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 51, end: 54, name: 'foo' } ] }
CallExpression
42
55
Node { type: 'Identifier', start: 42, end: 50, name: 'noInline' }
Identifier
42
50
noInline
[ Node { type: 'Identifier', start: 51, end: 54, name: 'foo' } ]
Node { type: 'Identifier', start: 51, end: 54, name: 'foo' }
Identifier
51
54
foo
Node {
  type: 'VariableDeclaration',
  start: 58,
  end: 73,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 62,
       end: 72,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
58
73
[ Node {
    type: 'VariableDeclarator',
    start: 62,
    end: 72,
    id: Node { type: 'Identifier', start: 62, end: 66, name: 'bStr' },
    init: Node { type: 'Literal', start: 69, end: 72, value: 'b', raw: '"b"' } } ]
Node {
  type: 'VariableDeclarator',
  start: 62,
  end: 72,
  id: Node { type: 'Identifier', start: 62, end: 66, name: 'bStr' },
  init: Node { type: 'Literal', start: 69, end: 72, value: 'b', raw: '"b"' } }
VariableDeclarator
62
72
Node { type: 'Identifier', start: 62, end: 66, name: 'bStr' }
Identifier
62
66
bStr
Node { type: 'Literal', start: 69, end: 72, value: 'b', raw: '"b"' }
Literal
69
72
b
"b"
var
Node {
  type: 'ForStatement',
  start: 74,
  end: 126,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 79,
     end: 88,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 90,
     end: 96,
     left: Node { type: 'Identifier', start: 90, end: 91, name: 'i' },
     operator: '<',
     right: Node { type: 'Literal', start: 94, end: 96, value: 30, raw: '30' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 98,
     end: 101,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 100, end: 101, name: 'i' } },
  body: 
   Node {
     type: 'ExpressionStatement',
     start: 107,
     end: 126,
     expression: 
      Node {
        type: 'AssignmentExpression',
        start: 107,
        end: 125,
        operator: '=',
        left: [Node],
        right: [Node] } } }
ForStatement
74
126
Node {
  type: 'VariableDeclaration',
  start: 79,
  end: 88,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 83,
       end: 88,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
79
88
[ Node {
    type: 'VariableDeclarator',
    start: 83,
    end: 88,
    id: Node { type: 'Identifier', start: 83, end: 84, name: 'i' },
    init: Node { type: 'Literal', start: 87, end: 88, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 83,
  end: 88,
  id: Node { type: 'Identifier', start: 83, end: 84, name: 'i' },
  init: Node { type: 'Literal', start: 87, end: 88, value: 0, raw: '0' } }
VariableDeclarator
83
88
Node { type: 'Identifier', start: 83, end: 84, name: 'i' }
Identifier
83
84
i
Node { type: 'Literal', start: 87, end: 88, value: 0, raw: '0' }
Literal
87
88
0
0
var
Node {
  type: 'BinaryExpression',
  start: 90,
  end: 96,
  left: Node { type: 'Identifier', start: 90, end: 91, name: 'i' },
  operator: '<',
  right: Node { type: 'Literal', start: 94, end: 96, value: 30, raw: '30' } }
BinaryExpression
90
96
Node { type: 'Identifier', start: 90, end: 91, name: 'i' }
Identifier
90
91
i
<
Node { type: 'Literal', start: 94, end: 96, value: 30, raw: '30' }
Literal
94
96
30
30
Node {
  type: 'UpdateExpression',
  start: 98,
  end: 101,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 100, end: 101, name: 'i' } }
UpdateExpression
98
101
++
true
Node { type: 'Identifier', start: 100, end: 101, name: 'i' }
Identifier
100
101
i
Node {
  type: 'ExpressionStatement',
  start: 107,
  end: 126,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 107,
     end: 125,
     operator: '=',
     left: Node { type: 'Identifier', start: 107, end: 111, name: 'bStr' },
     right: 
      Node {
        type: 'BinaryExpression',
        start: 114,
        end: 125,
        left: [Node],
        operator: '+',
        right: [Node] } } }
ExpressionStatement
107
126
Node {
  type: 'AssignmentExpression',
  start: 107,
  end: 125,
  operator: '=',
  left: Node { type: 'Identifier', start: 107, end: 111, name: 'bStr' },
  right: 
   Node {
     type: 'BinaryExpression',
     start: 114,
     end: 125,
     left: Node { type: 'Identifier', start: 114, end: 118, name: 'bStr' },
     operator: '+',
     right: Node { type: 'Identifier', start: 121, end: 125, name: 'bStr' } } }
AssignmentExpression
107
125
=
Node { type: 'Identifier', start: 107, end: 111, name: 'bStr' }
Identifier
107
111
bStr
Node {
  type: 'BinaryExpression',
  start: 114,
  end: 125,
  left: Node { type: 'Identifier', start: 114, end: 118, name: 'bStr' },
  operator: '+',
  right: Node { type: 'Identifier', start: 121, end: 125, name: 'bStr' } }
BinaryExpression
114
125
Node { type: 'Identifier', start: 114, end: 118, name: 'bStr' }
Identifier
114
118
bStr
+
Node { type: 'Identifier', start: 121, end: 125, name: 'bStr' }
Identifier
121
125
bStr
Node {
  type: 'VariableDeclaration',
  start: 128,
  end: 144,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 132,
       end: 143,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
128
144
[ Node {
    type: 'VariableDeclarator',
    start: 132,
    end: 143,
    id: Node { type: 'Identifier', start: 132, end: 139, name: 'effects' },
    init: Node { type: 'Literal', start: 142, end: 143, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 132,
  end: 143,
  id: Node { type: 'Identifier', start: 132, end: 139, name: 'effects' },
  init: Node { type: 'Literal', start: 142, end: 143, value: 0, raw: '0' } }
VariableDeclarator
132
143
Node { type: 'Identifier', start: 132, end: 139, name: 'effects' }
Identifier
132
139
effects
Node { type: 'Literal', start: 142, end: 143, value: 0, raw: '0' }
Literal
142
143
0
0
var
Node {
  type: 'VariableDeclaration',
  start: 145,
  end: 204,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 149,
       end: 203,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
145
204
[ Node {
    type: 'VariableDeclarator',
    start: 149,
    end: 203,
    id: Node { type: 'Identifier', start: 149, end: 150, name: 'b' },
    init: 
     Node {
       type: 'ObjectExpression',
       start: 153,
       end: 203,
       properties: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 149,
  end: 203,
  id: Node { type: 'Identifier', start: 149, end: 150, name: 'b' },
  init: 
   Node {
     type: 'ObjectExpression',
     start: 153,
     end: 203,
     properties: [ [Node] ] } }
VariableDeclarator
149
203
Node { type: 'Identifier', start: 149, end: 150, name: 'b' }
Identifier
149
150
b
Node {
  type: 'ObjectExpression',
  start: 153,
  end: 203,
  properties: 
   [ Node {
       type: 'Property',
       start: 154,
       end: 202,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
153
203
[ Node {
    type: 'Property',
    start: 154,
    end: 202,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 154, end: 162, name: 'toString' },
    value: 
     Node {
       type: 'FunctionExpression',
       start: 164,
       end: 202,
       id: null,
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 154,
  end: 202,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 154, end: 162, name: 'toString' },
  value: 
   Node {
     type: 'FunctionExpression',
     start: 164,
     end: 202,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [],
     body: Node { type: 'BlockStatement', start: 175, end: 202, body: [Array] } },
  kind: 'init' }
Property
154
202
false
false
false
Node { type: 'Identifier', start: 154, end: 162, name: 'toString' }
Identifier
154
162
toString
Node {
  type: 'FunctionExpression',
  start: 164,
  end: 202,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: 
   Node {
     type: 'BlockStatement',
     start: 175,
     end: 202,
     body: [ [Node], [Node] ] } }
FunctionExpression
164
202
null
[+] Exception: exception-effect-strcat.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 675,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 46,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 48,
       end: 62,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 64,
       end: 354,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 356,
       end: 374,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ForStatement',
       start: 375,
       end: 436,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 438,
       end: 456,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 457,
       end: 478,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'TryStatement',
       start: 479,
       end: 557,
       block: [Node],
       handler: [Node],
       finalizer: null },
     Node {
       type: 'IfStatement',
       start: 559,
       end: 607,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 608,
       end: 674,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
675
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 46,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 46, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 48,
    end: 62,
    expression: 
     Node {
       type: 'CallExpression',
       start: 48,
       end: 61,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 64,
    end: 354,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 69,
       end: 78,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 80,
       end: 89,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 91,
       end: 94,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 96, end: 354, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 356,
    end: 374,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ForStatement',
    start: 375,
    end: 436,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 380,
       end: 389,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 391,
       end: 397,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 399,
       end: 402,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 408,
       end: 436,
       expression: [Node] } },
  Node {
    type: 'VariableDeclaration',
    start: 438,
    end: 456,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 457,
    end: 478,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'TryStatement',
    start: 479,
    end: 557,
    block: Node { type: 'BlockStatement', start: 483, end: 522, body: [Array] },
    handler: 
     Node {
       type: 'CatchClause',
       start: 523,
       end: 557,
       param: [Node],
       body: [Node] },
    finalizer: null },
  Node {
    type: 'IfStatement',
    start: 559,
    end: 607,
    test: 
     Node {
       type: 'UnaryExpression',
       start: 563,
       end: 572,
       operator: '!',
       prefix: true,
       argument: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 578, end: 607, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 608,
    end: 674,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 612,
       end: 627,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 633, end: 674, argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 46,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'a' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ],
  body: Node { type: 'BlockStatement', start: 19, end: 46, body: [ [Node] ] } }
FunctionDeclaration
0
46
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'a' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'a' }
Identifier
13
14
a
Node { type: 'Identifier', start: 16, end: 17, name: 'b' }
Identifier
16
17
b
Node {
  type: 'BlockStatement',
  start: 19,
  end: 46,
  body: 
   [ Node { type: 'ReturnStatement', start: 25, end: 44, argument: [Node] } ] }
BlockStatement
19
46
[ Node {
    type: 'ReturnStatement',
    start: 25,
    end: 44,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 32,
       end: 43,
       left: [Node],
       operator: '+',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 25,
  end: 44,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 32,
     end: 43,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 32,
        end: 39,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Identifier', start: 42, end: 43, name: 'b' } } }
ReturnStatement
25
44
Node {
  type: 'BinaryExpression',
  start: 32,
  end: 43,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 32,
     end: 39,
     left: Node { type: 'Identifier', start: 32, end: 33, name: 'a' },
     operator: '+',
     right: Node { type: 'Literal', start: 36, end: 39, value: 'x', raw: '"x"' } },
  operator: '+',
  right: Node { type: 'Identifier', start: 42, end: 43, name: 'b' } }
BinaryExpression
32
43
Node {
  type: 'BinaryExpression',
  start: 32,
  end: 39,
  left: Node { type: 'Identifier', start: 32, end: 33, name: 'a' },
  operator: '+',
  right: Node { type: 'Literal', start: 36, end: 39, value: 'x', raw: '"x"' } }
BinaryExpression
32
39
Node { type: 'Identifier', start: 32, end: 33, name: 'a' }
Identifier
32
33
a
+
Node { type: 'Literal', start: 36, end: 39, value: 'x', raw: '"x"' }
Literal
36
39
x
"x"
+
Node { type: 'Identifier', start: 42, end: 43, name: 'b' }
Identifier
42
43
b
Node {
  type: 'ExpressionStatement',
  start: 48,
  end: 62,
  expression: 
   Node {
     type: 'CallExpression',
     start: 48,
     end: 61,
     callee: Node { type: 'Identifier', start: 48, end: 56, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
48
62
Node {
  type: 'CallExpression',
  start: 48,
  end: 61,
  callee: Node { type: 'Identifier', start: 48, end: 56, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 57, end: 60, name: 'foo' } ] }
CallExpression
48
61
Node { type: 'Identifier', start: 48, end: 56, name: 'noInline' }
Identifier
48
56
noInline
[ Node { type: 'Identifier', start: 57, end: 60, name: 'foo' } ]
Node { type: 'Identifier', start: 57, end: 60, name: 'foo' }
Identifier
57
60
foo
Node {
  type: 'ForStatement',
  start: 64,
  end: 354,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 69,
     end: 78,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 80,
     end: 89,
     left: Node { type: 'Identifier', start: 80, end: 81, name: 'i' },
     operator: '<',
     right: Node { type: 'Literal', start: 84, end: 89, value: 10000, raw: '10000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 91,
     end: 94,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 93, end: 94, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 96,
     end: 354,
     body: [ [Node], [Node], [Node], [Node], [Node] ] } }
ForStatement
64
354
Node {
  type: 'VariableDeclaration',
  start: 69,
  end: 78,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 73,
       end: 78,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
69
78
[ Node {
    type: 'VariableDeclarator',
    start: 73,
    end: 78,
    id: Node { type: 'Identifier', start: 73, end: 74, name: 'i' },
    init: Node { type: 'Literal', start: 77, end: 78, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 73,
  end: 78,
  id: Node { type: 'Identifier', start: 73, end: 74, name: 'i' },
  init: Node { type: 'Literal', start: 77, end: 78, value: 0, raw: '0' } }
VariableDeclarator
73
78
Node { type: 'Identifier', start: 73, end: 74, name: 'i' }
Identifier
73
74
i
Node { type: 'Literal', start: 77, end: 78, value: 0, raw: '0' }
Literal
77
78
0
0
var
Node {
  type: 'BinaryExpression',
  start: 80,
  end: 89,
  left: Node { type: 'Identifier', start: 80, end: 81, name: 'i' },
  operator: '<',
  right: Node { type: 'Literal', start: 84, end: 89, value: 10000, raw: '10000' } }
BinaryExpression
80
89
Node { type: 'Identifier', start: 80, end: 81, name: 'i' }
Identifier
80
81
i
<
Node { type: 'Literal', start: 84, end: 89, value: 10000, raw: '10000' }
Literal
84
89
10000
10000
Node {
  type: 'UpdateExpression',
  start: 91,
  end: 94,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 93, end: 94, name: 'i' } }
UpdateExpression
91
94
++
true
Node { type: 'Identifier', start: 93, end: 94, name: 'i' }
Identifier
93
94
i
Node {
  type: 'BlockStatement',
  start: 96,
  end: 354,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 102,
       end: 108,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 113,
       end: 126,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 131,
       end: 248,
       test: [Node],
       consequent: [Node],
       alternate: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 253,
       end: 278,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 283,
       end: 352,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
96
354
[ Node {
    type: 'VariableDeclaration',
    start: 102,
    end: 108,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 113,
    end: 126,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 131,
    end: 248,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 135,
       end: 140,
       left: [Node],
       operator: '&',
       right: [Node] },
    consequent: Node { type: 'BlockStatement', start: 142, end: 192, body: [Array] },
    alternate: Node { type: 'BlockStatement', start: 198, end: 248, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 253,
    end: 278,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 283,
    end: 352,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 287,
       end: 305,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 315, end: 352, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 102,
  end: 108,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 106,
       end: 107,
       id: [Node],
       init: null } ],
  kind: 'var' }
VariableDeclaration
102
108
[ Node {
    type: 'VariableDeclarator',
    start: 106,
    end: 107,
    id: Node { type: 'Identifier', start: 106, end: 107, name: 'b' },
    init: null } ]
Node {
  type: 'VariableDeclarator',
  start: 106,
  end: 107,
  id: Node { type: 'Identifier', start: 106, end: 107, name: 'b' },
  init: null }
VariableDeclarator
106
107
Node { type: 'Identifier', start: 106, end: 107, name: 'b' }
Identifier
106
107
b
null
[+] Exception: exception-in-strcat-string-overflow.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 505,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 46,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 48,
       end: 62,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 64,
       end: 237,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 239,
       end: 257,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 258,
       end: 279,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'TryStatement',
       start: 280,
       end: 387,
       block: [Node],
       handler: [Node],
       finalizer: null },
     Node {
       type: 'IfStatement',
       start: 389,
       end: 437,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 438,
       end: 504,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
505
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 46,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 46, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 48,
    end: 62,
    expression: 
     Node {
       type: 'CallExpression',
       start: 48,
       end: 61,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 64,
    end: 237,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 69,
       end: 78,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 80,
       end: 89,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 91,
       end: 94,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 96, end: 237, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 239,
    end: 257,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 258,
    end: 279,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'TryStatement',
    start: 280,
    end: 387,
    block: Node { type: 'BlockStatement', start: 284, end: 352, body: [Array] },
    handler: 
     Node {
       type: 'CatchClause',
       start: 353,
       end: 387,
       param: [Node],
       body: [Node] },
    finalizer: null },
  Node {
    type: 'IfStatement',
    start: 389,
    end: 437,
    test: 
     Node {
       type: 'UnaryExpression',
       start: 393,
       end: 402,
       operator: '!',
       prefix: true,
       argument: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 408, end: 437, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 438,
    end: 504,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 442,
       end: 457,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 463, end: 504, argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 46,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'a' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ],
  body: Node { type: 'BlockStatement', start: 19, end: 46, body: [ [Node] ] } }
FunctionDeclaration
0
46
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'a' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'a' }
Identifier
13
14
a
Node { type: 'Identifier', start: 16, end: 17, name: 'b' }
Identifier
16
17
b
Node {
  type: 'BlockStatement',
  start: 19,
  end: 46,
  body: 
   [ Node { type: 'ReturnStatement', start: 25, end: 44, argument: [Node] } ] }
BlockStatement
19
46
[ Node {
    type: 'ReturnStatement',
    start: 25,
    end: 44,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 32,
       end: 43,
       left: [Node],
       operator: '+',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 25,
  end: 44,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 32,
     end: 43,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 32,
        end: 39,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Identifier', start: 42, end: 43, name: 'b' } } }
ReturnStatement
25
44
Node {
  type: 'BinaryExpression',
  start: 32,
  end: 43,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 32,
     end: 39,
     left: Node { type: 'Identifier', start: 32, end: 33, name: 'a' },
     operator: '+',
     right: Node { type: 'Literal', start: 36, end: 39, value: 'x', raw: '"x"' } },
  operator: '+',
  right: Node { type: 'Identifier', start: 42, end: 43, name: 'b' } }
BinaryExpression
32
43
Node {
  type: 'BinaryExpression',
  start: 32,
  end: 39,
  left: Node { type: 'Identifier', start: 32, end: 33, name: 'a' },
  operator: '+',
  right: Node { type: 'Literal', start: 36, end: 39, value: 'x', raw: '"x"' } }
BinaryExpression
32
39
Node { type: 'Identifier', start: 32, end: 33, name: 'a' }
Identifier
32
33
a
+
Node { type: 'Literal', start: 36, end: 39, value: 'x', raw: '"x"' }
Literal
36
39
x
"x"
+
Node { type: 'Identifier', start: 42, end: 43, name: 'b' }
Identifier
42
43
b
Node {
  type: 'ExpressionStatement',
  start: 48,
  end: 62,
  expression: 
   Node {
     type: 'CallExpression',
     start: 48,
     end: 61,
     callee: Node { type: 'Identifier', start: 48, end: 56, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
48
62
Node {
  type: 'CallExpression',
  start: 48,
  end: 61,
  callee: Node { type: 'Identifier', start: 48, end: 56, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 57, end: 60, name: 'foo' } ] }
CallExpression
48
61
Node { type: 'Identifier', start: 48, end: 56, name: 'noInline' }
Identifier
48
56
noInline
[ Node { type: 'Identifier', start: 57, end: 60, name: 'foo' } ]
Node { type: 'Identifier', start: 57, end: 60, name: 'foo' }
Identifier
57
60
foo
Node {
  type: 'ForStatement',
  start: 64,
  end: 237,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 69,
     end: 78,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 80,
     end: 89,
     left: Node { type: 'Identifier', start: 80, end: 81, name: 'i' },
     operator: '<',
     right: Node { type: 'Literal', start: 84, end: 89, value: 10000, raw: '10000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 91,
     end: 94,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 93, end: 94, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 96,
     end: 237,
     body: [ [Node], [Node] ] } }
ForStatement
64
237
Node {
  type: 'VariableDeclaration',
  start: 69,
  end: 78,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 73,
       end: 78,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
69
78
[ Node {
    type: 'VariableDeclarator',
    start: 73,
    end: 78,
    id: Node { type: 'Identifier', start: 73, end: 74, name: 'i' },
    init: Node { type: 'Literal', start: 77, end: 78, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 73,
  end: 78,
  id: Node { type: 'Identifier', start: 73, end: 74, name: 'i' },
  init: Node { type: 'Literal', start: 77, end: 78, value: 0, raw: '0' } }
VariableDeclarator
73
78
Node { type: 'Identifier', start: 73, end: 74, name: 'i' }
Identifier
73
74
i
Node { type: 'Literal', start: 77, end: 78, value: 0, raw: '0' }
Literal
77
78
0
0
var
Node {
  type: 'BinaryExpression',
  start: 80,
  end: 89,
  left: Node { type: 'Identifier', start: 80, end: 81, name: 'i' },
  operator: '<',
  right: Node { type: 'Literal', start: 84, end: 89, value: 10000, raw: '10000' } }
BinaryExpression
80
89
Node { type: 'Identifier', start: 80, end: 81, name: 'i' }
Identifier
80
81
i
<
Node { type: 'Literal', start: 84, end: 89, value: 10000, raw: '10000' }
Literal
84
89
10000
10000
Node {
  type: 'UpdateExpression',
  start: 91,
  end: 94,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 93, end: 94, name: 'i' } }
UpdateExpression
91
94
++
true
Node { type: 'Identifier', start: 93, end: 94, name: 'i' }
Identifier
93
94
i
Node {
  type: 'BlockStatement',
  start: 96,
  end: 237,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 102,
       end: 163,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 168,
       end: 235,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
96
237
[ Node {
    type: 'VariableDeclaration',
    start: 102,
    end: 163,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 168,
    end: 235,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 172,
       end: 188,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 198, end: 235, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 102,
  end: 163,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 106,
       end: 162,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
102
163
[ Node {
    type: 'VariableDeclarator',
    start: 106,
    end: 162,
    id: Node { type: 'Identifier', start: 106, end: 112, name: 'result' },
    init: 
     Node {
       type: 'CallExpression',
       start: 115,
       end: 162,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 106,
  end: 162,
  id: Node { type: 'Identifier', start: 106, end: 112, name: 'result' },
  init: 
   Node {
     type: 'CallExpression',
     start: 115,
     end: 162,
     callee: Node { type: 'Identifier', start: 115, end: 118, name: 'foo' },
     arguments: [ [Node], [Node] ] } }
VariableDeclarator
106
162
Node { type: 'Identifier', start: 106, end: 112, name: 'result' }
Identifier
106
112
result
Node {
  type: 'CallExpression',
  start: 115,
  end: 162,
  callee: Node { type: 'Identifier', start: 115, end: 118, name: 'foo' },
  arguments: 
   [ Node {
       type: 'ObjectExpression',
       start: 119,
       end: 157,
       properties: [Array] },
     Node { type: 'Literal', start: 159, end: 161, value: 42, raw: '42' } ] }
CallExpression
115
162
Node { type: 'Identifier', start: 115, end: 118, name: 'foo' }
Identifier
115
118
foo
[ Node {
    type: 'ObjectExpression',
    start: 119,
    end: 157,
    properties: [ [Node] ] },
  Node { type: 'Literal', start: 159, end: 161, value: 42, raw: '42' } ]
Node {
  type: 'ObjectExpression',
  start: 119,
  end: 157,
  properties: 
   [ Node {
       type: 'Property',
       start: 120,
       end: 156,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
119
157
[ Node {
    type: 'Property',
    start: 120,
    end: 156,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 120, end: 128, name: 'toString' },
    value: 
     Node {
       type: 'FunctionExpression',
       start: 130,
       end: 156,
       id: null,
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 120,
  end: 156,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 120, end: 128, name: 'toString' },
  value: 
   Node {
     type: 'FunctionExpression',
     start: 130,
     end: 156,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [],
     body: Node { type: 'BlockStatement', start: 141, end: 156, body: [Array] } },
  kind: 'init' }
Property
120
156
false
false
false
Node { type: 'Identifier', start: 120, end: 128, name: 'toString' }
Identifier
120
128
toString
Node {
  type: 'FunctionExpression',
  start: 130,
  end: 156,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 141, end: 156, body: [ [Node] ] } }
FunctionExpression
130
156
null
[+] Exception: exception-in-strcat.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 2118,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 1,
       end: 106,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 108,
       end: 385,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 387,
       end: 403,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 405,
       end: 516,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 518,
       end: 650,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 652,
       end: 835,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 837,
       end: 954,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1006,
       end: 1144,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1146,
       end: 1395,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1397,
       end: 1552,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 1554,
       end: 1641,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 1643,
       end: 1798,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 1800,
       end: 1887,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 1889,
       end: 2002,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 2004,
       end: 2117,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
2118
[ Node {
    type: 'VariableDeclaration',
    start: 1,
    end: 106,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 108,
    end: 385,
    id: Node { type: 'Identifier', start: 117, end: 128, name: 'shouldThrow' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 144, end: 385, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 387,
    end: 403,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 405,
    end: 516,
    expression: 
     Node {
       type: 'CallExpression',
       start: 405,
       end: 515,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 518,
    end: 650,
    expression: 
     Node {
       type: 'CallExpression',
       start: 518,
       end: 649,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 652,
    end: 835,
    expression: 
     Node {
       type: 'CallExpression',
       start: 652,
       end: 834,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 837,
    end: 954,
    expression: 
     Node {
       type: 'CallExpression',
       start: 837,
       end: 953,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1006,
    end: 1144,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1006,
       end: 1143,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1146,
    end: 1395,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1146,
       end: 1394,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1397,
    end: 1552,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1397,
       end: 1551,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'IfStatement',
    start: 1554,
    end: 1641,
    test: 
     Node {
       type: 'CallExpression',
       start: 1558,
       end: 1601,
       callee: [Node],
       arguments: [Array] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1607,
       end: 1641,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 1643,
    end: 1798,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1643,
       end: 1797,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'IfStatement',
    start: 1800,
    end: 1887,
    test: 
     Node {
       type: 'CallExpression',
       start: 1804,
       end: 1847,
       callee: [Node],
       arguments: [Array] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1853,
       end: 1887,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 1889,
    end: 2002,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1889,
       end: 2001,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 2004,
    end: 2117,
    expression: 
     Node {
       type: 'CallExpression',
       start: 2004,
       end: 2116,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 1,
  end: 106,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 5,
       end: 105,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
1
106
[ Node {
    type: 'VariableDeclarator',
    start: 5,
    end: 105,
    id: Node { type: 'Identifier', start: 5, end: 16, name: 'propertyKey' },
    init: 
     Node {
       type: 'ObjectExpression',
       start: 19,
       end: 105,
       properties: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 5,
  end: 105,
  id: Node { type: 'Identifier', start: 5, end: 16, name: 'propertyKey' },
  init: 
   Node {
     type: 'ObjectExpression',
     start: 19,
     end: 105,
     properties: [ [Node] ] } }
VariableDeclarator
5
105
Node { type: 'Identifier', start: 5, end: 16, name: 'propertyKey' }
Identifier
5
16
propertyKey
Node {
  type: 'ObjectExpression',
  start: 19,
  end: 105,
  properties: 
   [ Node {
       type: 'Property',
       start: 25,
       end: 103,
       method: true,
       shorthand: false,
       computed: false,
       key: [Node],
       kind: 'init',
       value: [Node] } ] }
ObjectExpression
19
105
[ Node {
    type: 'Property',
    start: 25,
    end: 103,
    method: true,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 25, end: 33, name: 'toString' },
    kind: 'init',
    value: 
     Node {
       type: 'FunctionExpression',
       start: 33,
       end: 103,
       id: null,
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] } } ]
Node {
  type: 'Property',
  start: 25,
  end: 103,
  method: true,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 25, end: 33, name: 'toString' },
  kind: 'init',
  value: 
   Node {
     type: 'FunctionExpression',
     start: 33,
     end: 103,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [],
     body: Node { type: 'BlockStatement', start: 36, end: 103, body: [Array] } } }
Property
25
103
true
false
false
Node { type: 'Identifier', start: 25, end: 33, name: 'toString' }
Identifier
25
33
toString
init
Node {
  type: 'FunctionExpression',
  start: 33,
  end: 103,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 36, end: 103, body: [ [Node] ] } }
FunctionExpression
33
103
null
[+] Exception: exception-in-to-property-key-should-be-handled-early-in-object-methods.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 3512,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 1,
       end: 106,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 108,
       end: 385,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 400,
       end: 1296,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1315,
       end: 2308,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 2330,
       end: 3511,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
3512
[ Node {
    type: 'VariableDeclaration',
    start: 1,
    end: 106,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 108,
    end: 385,
    id: Node { type: 'Identifier', start: 117, end: 128, name: 'shouldThrow' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 144, end: 385, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 400,
    end: 1296,
    expression: 
     Node {
       type: 'CallExpression',
       start: 401,
       end: 1294,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 1315,
    end: 2308,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1316,
       end: 2306,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 2330,
    end: 3511,
    expression: 
     Node {
       type: 'CallExpression',
       start: 2331,
       end: 3509,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'VariableDeclaration',
  start: 1,
  end: 106,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 5,
       end: 105,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
1
106
[ Node {
    type: 'VariableDeclarator',
    start: 5,
    end: 105,
    id: Node { type: 'Identifier', start: 5, end: 16, name: 'propertyKey' },
    init: 
     Node {
       type: 'ObjectExpression',
       start: 19,
       end: 105,
       properties: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 5,
  end: 105,
  id: Node { type: 'Identifier', start: 5, end: 16, name: 'propertyKey' },
  init: 
   Node {
     type: 'ObjectExpression',
     start: 19,
     end: 105,
     properties: [ [Node] ] } }
VariableDeclarator
5
105
Node { type: 'Identifier', start: 5, end: 16, name: 'propertyKey' }
Identifier
5
16
propertyKey
Node {
  type: 'ObjectExpression',
  start: 19,
  end: 105,
  properties: 
   [ Node {
       type: 'Property',
       start: 25,
       end: 103,
       method: true,
       shorthand: false,
       computed: false,
       key: [Node],
       kind: 'init',
       value: [Node] } ] }
ObjectExpression
19
105
[ Node {
    type: 'Property',
    start: 25,
    end: 103,
    method: true,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 25, end: 33, name: 'toString' },
    kind: 'init',
    value: 
     Node {
       type: 'FunctionExpression',
       start: 33,
       end: 103,
       id: null,
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] } } ]
Node {
  type: 'Property',
  start: 25,
  end: 103,
  method: true,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 25, end: 33, name: 'toString' },
  kind: 'init',
  value: 
   Node {
     type: 'FunctionExpression',
     start: 33,
     end: 103,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [],
     body: Node { type: 'BlockStatement', start: 36, end: 103, body: [Array] } } }
Property
25
103
true
false
false
Node { type: 'Identifier', start: 25, end: 33, name: 'toString' }
Identifier
25
33
toString
init
Node {
  type: 'FunctionExpression',
  start: 33,
  end: 103,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 36, end: 103, body: [ [Node] ] } }
FunctionExpression
33
103
null
[+] Exception: exception-in-to-property-key-should-be-handled-early.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 297,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 42,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 44,
       end: 58,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 60,
       end: 201,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 203,
       end: 233,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 234,
       end: 296,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
297
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 42,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 42, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 44,
    end: 58,
    expression: 
     Node {
       type: 'CallExpression',
       start: 44,
       end: 57,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 60,
    end: 201,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 65,
       end: 74,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 76,
       end: 86,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 88,
       end: 91,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 93, end: 201, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 203,
    end: 233,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 234,
    end: 296,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 238,
       end: 253,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 259, end: 296, argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 42,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'x' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'o' } ],
  body: Node { type: 'BlockStatement', start: 19, end: 42, body: [ [Node] ] } }
FunctionDeclaration
0
42
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'x' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'o' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'x' }
Identifier
13
14
x
Node { type: 'Identifier', start: 16, end: 17, name: 'o' }
Identifier
16
17
o
Node {
  type: 'BlockStatement',
  start: 19,
  end: 42,
  body: 
   [ Node { type: 'ReturnStatement', start: 25, end: 40, argument: [Node] } ] }
BlockStatement
19
42
[ Node {
    type: 'ReturnStatement',
    start: 25,
    end: 40,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 32,
       end: 39,
       left: [Node],
       operator: '+',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 25,
  end: 40,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 32,
     end: 39,
     left: 
      Node {
        type: 'MemberExpression',
        start: 32,
        end: 35,
        object: [Node],
        property: [Node],
        computed: false },
     operator: '+',
     right: Node { type: 'Identifier', start: 38, end: 39, name: 'x' } } }
ReturnStatement
25
40
Node {
  type: 'BinaryExpression',
  start: 32,
  end: 39,
  left: 
   Node {
     type: 'MemberExpression',
     start: 32,
     end: 35,
     object: Node { type: 'Identifier', start: 32, end: 33, name: 'o' },
     property: Node { type: 'Identifier', start: 34, end: 35, name: 'f' },
     computed: false },
  operator: '+',
  right: Node { type: 'Identifier', start: 38, end: 39, name: 'x' } }
BinaryExpression
32
39
Node {
  type: 'MemberExpression',
  start: 32,
  end: 35,
  object: Node { type: 'Identifier', start: 32, end: 33, name: 'o' },
  property: Node { type: 'Identifier', start: 34, end: 35, name: 'f' },
  computed: false }
MemberExpression
32
35
Node { type: 'Identifier', start: 32, end: 33, name: 'o' }
Identifier
32
33
o
Node { type: 'Identifier', start: 34, end: 35, name: 'f' }
Identifier
34
35
f
false
+
Node { type: 'Identifier', start: 38, end: 39, name: 'x' }
Identifier
38
39
x
Node {
  type: 'ExpressionStatement',
  start: 44,
  end: 58,
  expression: 
   Node {
     type: 'CallExpression',
     start: 44,
     end: 57,
     callee: Node { type: 'Identifier', start: 44, end: 52, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
44
58
Node {
  type: 'CallExpression',
  start: 44,
  end: 57,
  callee: Node { type: 'Identifier', start: 44, end: 52, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 53, end: 56, name: 'foo' } ] }
CallExpression
44
57
Node { type: 'Identifier', start: 44, end: 52, name: 'noInline' }
Identifier
44
52
noInline
[ Node { type: 'Identifier', start: 53, end: 56, name: 'foo' } ]
Node { type: 'Identifier', start: 53, end: 56, name: 'foo' }
Identifier
53
56
foo
Node {
  type: 'ForStatement',
  start: 60,
  end: 201,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 65,
     end: 74,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 76,
     end: 86,
     left: Node { type: 'Identifier', start: 76, end: 77, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 80,
        end: 86,
        value: 100000,
        raw: '100000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 88,
     end: 91,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 90, end: 91, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 93,
     end: 201,
     body: [ [Node], [Node] ] } }
ForStatement
60
201
Node {
  type: 'VariableDeclaration',
  start: 65,
  end: 74,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 69,
       end: 74,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
65
74
[ Node {
    type: 'VariableDeclarator',
    start: 69,
    end: 74,
    id: Node { type: 'Identifier', start: 69, end: 70, name: 'i' },
    init: Node { type: 'Literal', start: 73, end: 74, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 69,
  end: 74,
  id: Node { type: 'Identifier', start: 69, end: 70, name: 'i' },
  init: Node { type: 'Literal', start: 73, end: 74, value: 0, raw: '0' } }
VariableDeclarator
69
74
Node { type: 'Identifier', start: 69, end: 70, name: 'i' }
Identifier
69
70
i
Node { type: 'Literal', start: 73, end: 74, value: 0, raw: '0' }
Literal
73
74
0
0
var
Node {
  type: 'BinaryExpression',
  start: 76,
  end: 86,
  left: Node { type: 'Identifier', start: 76, end: 77, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 80,
     end: 86,
     value: 100000,
     raw: '100000' } }
BinaryExpression
76
86
Node { type: 'Identifier', start: 76, end: 77, name: 'i' }
Identifier
76
77
i
<
Node {
  type: 'Literal',
  start: 80,
  end: 86,
  value: 100000,
  raw: '100000' }
Literal
80
86
100000
100000
Node {
  type: 'UpdateExpression',
  start: 88,
  end: 91,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 90, end: 91, name: 'i' } }
UpdateExpression
88
91
++
true
Node { type: 'Identifier', start: 90, end: 91, name: 'i' }
Identifier
90
91
i
Node {
  type: 'BlockStatement',
  start: 93,
  end: 201,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 99,
       end: 129,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 134,
       end: 199,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
93
201
[ Node {
    type: 'VariableDeclaration',
    start: 99,
    end: 129,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 134,
    end: 199,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 138,
       end: 152,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 162, end: 199, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 99,
  end: 129,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 103,
       end: 128,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
99
129
[ Node {
    type: 'VariableDeclarator',
    start: 103,
    end: 128,
    id: Node { type: 'Identifier', start: 103, end: 109, name: 'result' },
    init: 
     Node {
       type: 'CallExpression',
       start: 112,
       end: 128,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 103,
  end: 128,
  id: Node { type: 'Identifier', start: 103, end: 109, name: 'result' },
  init: 
   Node {
     type: 'CallExpression',
     start: 112,
     end: 128,
     callee: Node { type: 'Identifier', start: 112, end: 115, name: 'foo' },
     arguments: [ [Node], [Node] ] } }
VariableDeclarator
103
128
Node { type: 'Identifier', start: 103, end: 109, name: 'result' }
Identifier
103
109
result
Node {
  type: 'CallExpression',
  start: 112,
  end: 128,
  callee: Node { type: 'Identifier', start: 112, end: 115, name: 'foo' },
  arguments: 
   [ Node { type: 'Literal', start: 116, end: 120, value: 42.5, raw: '42.5' },
     Node {
       type: 'ObjectExpression',
       start: 122,
       end: 127,
       properties: [Array] } ] }
CallExpression
112
128
Node { type: 'Identifier', start: 112, end: 115, name: 'foo' }
Identifier
112
115
foo
[ Node { type: 'Literal', start: 116, end: 120, value: 42.5, raw: '42.5' },
  Node {
    type: 'ObjectExpression',
    start: 122,
    end: 127,
    properties: [ [Node] ] } ]
Node { type: 'Literal', start: 116, end: 120, value: 42.5, raw: '42.5' }
Literal
116
120
42.5
42.5
Node {
  type: 'ObjectExpression',
  start: 122,
  end: 127,
  properties: 
   [ Node {
       type: 'Property',
       start: 123,
       end: 126,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
122
127
[ Node {
    type: 'Property',
    start: 123,
    end: 126,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 123, end: 124, name: 'f' },
    value: Node { type: 'Literal', start: 125, end: 126, value: 5, raw: '5' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 123,
  end: 126,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 123, end: 124, name: 'f' },
  value: Node { type: 'Literal', start: 125, end: 126, value: 5, raw: '5' },
  kind: 'init' }
Property
123
126
false
false
false
Node { type: 'Identifier', start: 123, end: 124, name: 'f' }
Identifier
123
124
f
Node { type: 'Literal', start: 125, end: 126, value: 5, raw: '5' }
Literal
125
126
5
5
init
var
Node {
  type: 'IfStatement',
  start: 134,
  end: 199,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 138,
     end: 152,
     left: Node { type: 'Identifier', start: 138, end: 144, name: 'result' },
     operator: '!=',
     right: Node { type: 'Literal', start: 148, end: 152, value: 47.5, raw: '47.5' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 162,
     end: 199,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 168,
        end: 198,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
134
199
Node {
  type: 'BinaryExpression',
  start: 138,
  end: 152,
  left: Node { type: 'Identifier', start: 138, end: 144, name: 'result' },
  operator: '!=',
  right: Node { type: 'Literal', start: 148, end: 152, value: 47.5, raw: '47.5' } }
BinaryExpression
138
152
Node { type: 'Identifier', start: 138, end: 144, name: 'result' }
Identifier
138
144
result
!=
Node { type: 'Literal', start: 148, end: 152, value: 47.5, raw: '47.5' }
Literal
148
152
47.5
47.5
Node {
  type: 'ThrowStatement',
  start: 162,
  end: 199,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 168,
     end: 198,
     left: 
      Node {
        type: 'Literal',
        start: 168,
        end: 189,
        value: 'Error: bad result: ',
        raw: '"Error: bad result: "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 192, end: 198, name: 'result' } } }
ThrowStatement
162
199
Node {
  type: 'BinaryExpression',
  start: 168,
  end: 198,
  left: 
   Node {
     type: 'Literal',
     start: 168,
     end: 189,
     value: 'Error: bad result: ',
     raw: '"Error: bad result: "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 192, end: 198, name: 'result' } }
BinaryExpression
168
198
Node {
  type: 'Literal',
  start: 168,
  end: 189,
  value: 'Error: bad result: ',
  raw: '"Error: bad result: "' }
Literal
168
189
Error: bad result: 
"Error: bad result: "
+
Node { type: 'Identifier', start: 192, end: 198, name: 'result' }
Identifier
192
198
result
null
[+] Exception: exit-after-int32-to-double.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 383,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 53,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 55,
       end: 69,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 71,
       end: 248,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 250,
       end: 309,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 310,
       end: 381,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
383
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 53,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 22, end: 53, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 55,
    end: 69,
    expression: 
     Node {
       type: 'CallExpression',
       start: 55,
       end: 68,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 71,
    end: 248,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 76,
       end: 85,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 87,
       end: 97,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 99,
       end: 102,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 104, end: 248, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 250,
    end: 309,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 310,
    end: 381,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 314,
       end: 338,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 344, end: 381, argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 53,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'a' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'b' },
     Node { type: 'Identifier', start: 19, end: 20, name: 'c' } ],
  body: Node { type: 'BlockStatement', start: 22, end: 53, body: [ [Node] ] } }
FunctionDeclaration
0
53
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'a' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'b' },
  Node { type: 'Identifier', start: 19, end: 20, name: 'c' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'a' }
Identifier
13
14
a
Node { type: 'Identifier', start: 16, end: 17, name: 'b' }
Identifier
16
17
b
Node { type: 'Identifier', start: 19, end: 20, name: 'c' }
Identifier
19
20
c
Node {
  type: 'BlockStatement',
  start: 22,
  end: 53,
  body: 
   [ Node { type: 'ReturnStatement', start: 28, end: 51, argument: [Node] } ] }
BlockStatement
22
53
[ Node {
    type: 'ReturnStatement',
    start: 28,
    end: 51,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 35,
       end: 50,
       left: [Node],
       operator: '+',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 28,
  end: 51,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 35,
     end: 50,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 35,
        end: 44,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: 
      Node {
        type: 'MemberExpression',
        start: 47,
        end: 50,
        object: [Node],
        property: [Node],
        computed: false } } }
ReturnStatement
28
51
Node {
  type: 'BinaryExpression',
  start: 35,
  end: 50,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 35,
     end: 44,
     left: 
      Node {
        type: 'MemberExpression',
        start: 35,
        end: 38,
        object: [Node],
        property: [Node],
        computed: false },
     operator: '+',
     right: 
      Node {
        type: 'MemberExpression',
        start: 41,
        end: 44,
        object: [Node],
        property: [Node],
        computed: false } },
  operator: '+',
  right: 
   Node {
     type: 'MemberExpression',
     start: 47,
     end: 50,
     object: Node { type: 'Identifier', start: 47, end: 48, name: 'c' },
     property: Node { type: 'Identifier', start: 49, end: 50, name: 'f' },
     computed: false } }
BinaryExpression
35
50
Node {
  type: 'BinaryExpression',
  start: 35,
  end: 44,
  left: 
   Node {
     type: 'MemberExpression',
     start: 35,
     end: 38,
     object: Node { type: 'Identifier', start: 35, end: 36, name: 'a' },
     property: Node { type: 'Identifier', start: 37, end: 38, name: 'f' },
     computed: false },
  operator: '+',
  right: 
   Node {
     type: 'MemberExpression',
     start: 41,
     end: 44,
     object: Node { type: 'Identifier', start: 41, end: 42, name: 'b' },
     property: Node { type: 'Identifier', start: 43, end: 44, name: 'f' },
     computed: false } }
BinaryExpression
35
44
Node {
  type: 'MemberExpression',
  start: 35,
  end: 38,
  object: Node { type: 'Identifier', start: 35, end: 36, name: 'a' },
  property: Node { type: 'Identifier', start: 37, end: 38, name: 'f' },
  computed: false }
MemberExpression
35
38
Node { type: 'Identifier', start: 35, end: 36, name: 'a' }
Identifier
35
36
a
Node { type: 'Identifier', start: 37, end: 38, name: 'f' }
Identifier
37
38
f
false
+
Node {
  type: 'MemberExpression',
  start: 41,
  end: 44,
  object: Node { type: 'Identifier', start: 41, end: 42, name: 'b' },
  property: Node { type: 'Identifier', start: 43, end: 44, name: 'f' },
  computed: false }
MemberExpression
41
44
Node { type: 'Identifier', start: 41, end: 42, name: 'b' }
Identifier
41
42
b
Node { type: 'Identifier', start: 43, end: 44, name: 'f' }
Identifier
43
44
f
false
+
Node {
  type: 'MemberExpression',
  start: 47,
  end: 50,
  object: Node { type: 'Identifier', start: 47, end: 48, name: 'c' },
  property: Node { type: 'Identifier', start: 49, end: 50, name: 'f' },
  computed: false }
MemberExpression
47
50
Node { type: 'Identifier', start: 47, end: 48, name: 'c' }
Identifier
47
48
c
Node { type: 'Identifier', start: 49, end: 50, name: 'f' }
Identifier
49
50
f
false
Node {
  type: 'ExpressionStatement',
  start: 55,
  end: 69,
  expression: 
   Node {
     type: 'CallExpression',
     start: 55,
     end: 68,
     callee: Node { type: 'Identifier', start: 55, end: 63, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
55
69
Node {
  type: 'CallExpression',
  start: 55,
  end: 68,
  callee: Node { type: 'Identifier', start: 55, end: 63, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 64, end: 67, name: 'foo' } ] }
CallExpression
55
68
Node { type: 'Identifier', start: 55, end: 63, name: 'noInline' }
Identifier
55
63
noInline
[ Node { type: 'Identifier', start: 64, end: 67, name: 'foo' } ]
Node { type: 'Identifier', start: 64, end: 67, name: 'foo' }
Identifier
64
67
foo
Node {
  type: 'ForStatement',
  start: 71,
  end: 248,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 76,
     end: 85,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 87,
     end: 97,
     left: Node { type: 'Identifier', start: 87, end: 88, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 91,
        end: 97,
        value: 100000,
        raw: '100000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 99,
     end: 102,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 101, end: 102, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 104,
     end: 248,
     body: [ [Node], [Node] ] } }
ForStatement
71
248
Node {
  type: 'VariableDeclaration',
  start: 76,
  end: 85,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 80,
       end: 85,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
76
85
[ Node {
    type: 'VariableDeclarator',
    start: 80,
    end: 85,
    id: Node { type: 'Identifier', start: 80, end: 81, name: 'i' },
    init: Node { type: 'Literal', start: 84, end: 85, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 80,
  end: 85,
  id: Node { type: 'Identifier', start: 80, end: 81, name: 'i' },
  init: Node { type: 'Literal', start: 84, end: 85, value: 0, raw: '0' } }
VariableDeclarator
80
85
Node { type: 'Identifier', start: 80, end: 81, name: 'i' }
Identifier
80
81
i
Node { type: 'Literal', start: 84, end: 85, value: 0, raw: '0' }
Literal
84
85
0
0
var
Node {
  type: 'BinaryExpression',
  start: 87,
  end: 97,
  left: Node { type: 'Identifier', start: 87, end: 88, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 91,
     end: 97,
     value: 100000,
     raw: '100000' } }
BinaryExpression
87
97
Node { type: 'Identifier', start: 87, end: 88, name: 'i' }
Identifier
87
88
i
<
Node {
  type: 'Literal',
  start: 91,
  end: 97,
  value: 100000,
  raw: '100000' }
Literal
91
97
100000
100000
Node {
  type: 'UpdateExpression',
  start: 99,
  end: 102,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 101, end: 102, name: 'i' } }
UpdateExpression
99
102
++
true
Node { type: 'Identifier', start: 101, end: 102, name: 'i' }
Identifier
101
102
i
Node {
  type: 'BlockStatement',
  start: 104,
  end: 248,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 110,
       end: 168,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 173,
       end: 246,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
104
248
[ Node {
    type: 'VariableDeclaration',
    start: 110,
    end: 168,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 173,
    end: 246,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 177,
       end: 199,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 209, end: 246, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 110,
  end: 168,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 114,
       end: 167,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
110
168
[ Node {
    type: 'VariableDeclarator',
    start: 114,
    end: 167,
    id: Node { type: 'Identifier', start: 114, end: 120, name: 'result' },
    init: 
     Node {
       type: 'CallExpression',
       start: 123,
       end: 167,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 114,
  end: 167,
  id: Node { type: 'Identifier', start: 114, end: 120, name: 'result' },
  init: 
   Node {
     type: 'CallExpression',
     start: 123,
     end: 167,
     callee: Node { type: 'Identifier', start: 123, end: 126, name: 'foo' },
     arguments: [ [Node], [Node], [Node] ] } }
VariableDeclarator
114
167
Node { type: 'Identifier', start: 114, end: 120, name: 'result' }
Identifier
114
120
result
Node {
  type: 'CallExpression',
  start: 123,
  end: 167,
  callee: Node { type: 'Identifier', start: 123, end: 126, name: 'foo' },
  arguments: 
   [ Node {
       type: 'ObjectExpression',
       start: 127,
       end: 141,
       properties: [Array] },
     Node {
       type: 'ObjectExpression',
       start: 143,
       end: 157,
       properties: [Array] },
     Node {
       type: 'ObjectExpression',
       start: 159,
       end: 166,
       properties: [Array] } ] }
CallExpression
123
167
Node { type: 'Identifier', start: 123, end: 126, name: 'foo' }
Identifier
123
126
foo
[ Node {
    type: 'ObjectExpression',
    start: 127,
    end: 141,
    properties: [ [Node] ] },
  Node {
    type: 'ObjectExpression',
    start: 143,
    end: 157,
    properties: [ [Node] ] },
  Node {
    type: 'ObjectExpression',
    start: 159,
    end: 166,
    properties: [ [Node] ] } ]
Node {
  type: 'ObjectExpression',
  start: 127,
  end: 141,
  properties: 
   [ Node {
       type: 'Property',
       start: 128,
       end: 140,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
127
141
[ Node {
    type: 'Property',
    start: 128,
    end: 140,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 128, end: 129, name: 'f' },
    value: 
     Node {
       type: 'Literal',
       start: 130,
       end: 140,
       value: 2000000000,
       raw: '2000000000' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 128,
  end: 140,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 128, end: 129, name: 'f' },
  value: 
   Node {
     type: 'Literal',
     start: 130,
     end: 140,
     value: 2000000000,
     raw: '2000000000' },
  kind: 'init' }
Property
128
140
false
false
false
Node { type: 'Identifier', start: 128, end: 129, name: 'f' }
Identifier
128
129
f
Node {
  type: 'Literal',
  start: 130,
  end: 140,
  value: 2000000000,
  raw: '2000000000' }
Literal
130
140
2000000000
2000000000
init
Node {
  type: 'ObjectExpression',
  start: 143,
  end: 157,
  properties: 
   [ Node {
       type: 'Property',
       start: 144,
       end: 156,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
143
157
[ Node {
    type: 'Property',
    start: 144,
    end: 156,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 144, end: 145, name: 'f' },
    value: 
     Node {
       type: 'Literal',
       start: 146,
       end: 156,
       value: 2000000000,
       raw: '2000000000' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 144,
  end: 156,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 144, end: 145, name: 'f' },
  value: 
   Node {
     type: 'Literal',
     start: 146,
     end: 156,
     value: 2000000000,
     raw: '2000000000' },
  kind: 'init' }
Property
144
156
false
false
false
Node { type: 'Identifier', start: 144, end: 145, name: 'f' }
Identifier
144
145
f
Node {
  type: 'Literal',
  start: 146,
  end: 156,
  value: 2000000000,
  raw: '2000000000' }
Literal
146
156
2000000000
2000000000
init
Node {
  type: 'ObjectExpression',
  start: 159,
  end: 166,
  properties: 
   [ Node {
       type: 'Property',
       start: 160,
       end: 165,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
159
166
[ Node {
    type: 'Property',
    start: 160,
    end: 165,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 160, end: 161, name: 'f' },
    value: Node { type: 'Literal', start: 162, end: 165, value: 0.5, raw: '0.5' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 160,
  end: 165,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 160, end: 161, name: 'f' },
  value: Node { type: 'Literal', start: 162, end: 165, value: 0.5, raw: '0.5' },
  kind: 'init' }
Property
160
165
false
false
false
Node { type: 'Identifier', start: 160, end: 161, name: 'f' }
Identifier
160
161
f
Node { type: 'Literal', start: 162, end: 165, value: 0.5, raw: '0.5' }
Literal
162
165
0.5
0.5
init
var
Node {
  type: 'IfStatement',
  start: 173,
  end: 246,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 177,
     end: 199,
     left: Node { type: 'Identifier', start: 177, end: 183, name: 'result' },
     operator: '!=',
     right: 
      Node {
        type: 'Literal',
        start: 187,
        end: 199,
        value: 4000000000.5,
        raw: '4000000000.5' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 209,
     end: 246,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 215,
        end: 245,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
173
246
Node {
  type: 'BinaryExpression',
  start: 177,
  end: 199,
  left: Node { type: 'Identifier', start: 177, end: 183, name: 'result' },
  operator: '!=',
  right: 
   Node {
     type: 'Literal',
     start: 187,
     end: 199,
     value: 4000000000.5,
     raw: '4000000000.5' } }
BinaryExpression
177
199
Node { type: 'Identifier', start: 177, end: 183, name: 'result' }
Identifier
177
183
result
!=
Node {
  type: 'Literal',
  start: 187,
  end: 199,
  value: 4000000000.5,
  raw: '4000000000.5' }
Literal
187
199
4000000000.5
4000000000.5
Node {
  type: 'ThrowStatement',
  start: 209,
  end: 246,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 215,
     end: 245,
     left: 
      Node {
        type: 'Literal',
        start: 215,
        end: 236,
        value: 'Error: bad result: ',
        raw: '"Error: bad result: "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 239, end: 245, name: 'result' } } }
ThrowStatement
209
246
Node {
  type: 'BinaryExpression',
  start: 215,
  end: 245,
  left: 
   Node {
     type: 'Literal',
     start: 215,
     end: 236,
     value: 'Error: bad result: ',
     raw: '"Error: bad result: "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 239, end: 245, name: 'result' } }
BinaryExpression
215
245
Node {
  type: 'Literal',
  start: 215,
  end: 236,
  value: 'Error: bad result: ',
  raw: '"Error: bad result: "' }
Literal
215
236
Error: bad result: 
"Error: bad result: "
+
Node { type: 'Identifier', start: 239, end: 245, name: 'result' }
Identifier
239
245
result
null
[+] Exception: exit-after-int52-to-double.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 586,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 48,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 50,
       end: 64,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 66,
       end: 82,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 83,
       end: 192,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 194,
       end: 382,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 384,
       end: 395,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 396,
       end: 472,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 473,
       end: 517,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 518,
       end: 585,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
586
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 48,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 22, end: 48, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 50,
    end: 64,
    expression: 
     Node {
       type: 'CallExpression',
       start: 50,
       end: 63,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 66,
    end: 82,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 83,
    end: 192,
    id: 
     Node {
       type: 'Identifier',
       start: 92,
       end: 107,
       name: 'makeWeirdObject' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 110, end: 192, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 194,
    end: 382,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 199,
       end: 208,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 210,
       end: 220,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 222,
       end: 225,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 227, end: 382, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 384,
    end: 395,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 396,
    end: 472,
    expression: 
     Node {
       type: 'CallExpression',
       start: 396,
       end: 471,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 473,
    end: 517,
    expression: 
     Node {
       type: 'CallExpression',
       start: 473,
       end: 516,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'IfStatement',
    start: 518,
    end: 585,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 522,
       end: 542,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 548, end: 585, argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 48,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'a' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'b' },
     Node { type: 'Identifier', start: 19, end: 20, name: 'c' } ],
  body: Node { type: 'BlockStatement', start: 22, end: 48, body: [ [Node] ] } }
FunctionDeclaration
0
48
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'a' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'b' },
  Node { type: 'Identifier', start: 19, end: 20, name: 'c' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'a' }
Identifier
13
14
a
Node { type: 'Identifier', start: 16, end: 17, name: 'b' }
Identifier
16
17
b
Node { type: 'Identifier', start: 19, end: 20, name: 'c' }
Identifier
19
20
c
Node {
  type: 'BlockStatement',
  start: 22,
  end: 48,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 28,
       end: 46,
       expression: [Node] } ] }
BlockStatement
22
48
[ Node {
    type: 'ExpressionStatement',
    start: 28,
    end: 46,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 28,
       end: 45,
       operator: '=',
       left: [Node],
       right: [Node] } } ]
Node {
  type: 'ExpressionStatement',
  start: 28,
  end: 46,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 28,
     end: 45,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 28,
        end: 33,
        object: [Node],
        property: [Node],
        computed: false },
     right: 
      Node {
        type: 'BinaryExpression',
        start: 36,
        end: 45,
        left: [Node],
        operator: '+',
        right: [Node] } } }
ExpressionStatement
28
46
Node {
  type: 'AssignmentExpression',
  start: 28,
  end: 45,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 28,
     end: 33,
     object: 
      Node {
        type: 'MemberExpression',
        start: 28,
        end: 31,
        object: [Node],
        property: [Node],
        computed: false },
     property: Node { type: 'Identifier', start: 32, end: 33, name: 'f' },
     computed: false },
  right: 
   Node {
     type: 'BinaryExpression',
     start: 36,
     end: 45,
     left: 
      Node {
        type: 'MemberExpression',
        start: 36,
        end: 39,
        object: [Node],
        property: [Node],
        computed: false },
     operator: '+',
     right: 
      Node {
        type: 'MemberExpression',
        start: 42,
        end: 45,
        object: [Node],
        property: [Node],
        computed: false } } }
AssignmentExpression
28
45
=
Node {
  type: 'MemberExpression',
  start: 28,
  end: 33,
  object: 
   Node {
     type: 'MemberExpression',
     start: 28,
     end: 31,
     object: Node { type: 'Identifier', start: 28, end: 29, name: 'c' },
     property: Node { type: 'Identifier', start: 30, end: 31, name: 'f' },
     computed: false },
  property: Node { type: 'Identifier', start: 32, end: 33, name: 'f' },
  computed: false }
MemberExpression
28
33
Node {
  type: 'MemberExpression',
  start: 28,
  end: 31,
  object: Node { type: 'Identifier', start: 28, end: 29, name: 'c' },
  property: Node { type: 'Identifier', start: 30, end: 31, name: 'f' },
  computed: false }
MemberExpression
28
31
Node { type: 'Identifier', start: 28, end: 29, name: 'c' }
Identifier
28
29
c
Node { type: 'Identifier', start: 30, end: 31, name: 'f' }
Identifier
30
31
f
false
Node { type: 'Identifier', start: 32, end: 33, name: 'f' }
Identifier
32
33
f
false
Node {
  type: 'BinaryExpression',
  start: 36,
  end: 45,
  left: 
   Node {
     type: 'MemberExpression',
     start: 36,
     end: 39,
     object: Node { type: 'Identifier', start: 36, end: 37, name: 'a' },
     property: Node { type: 'Identifier', start: 38, end: 39, name: 'f' },
     computed: false },
  operator: '+',
  right: 
   Node {
     type: 'MemberExpression',
     start: 42,
     end: 45,
     object: Node { type: 'Identifier', start: 42, end: 43, name: 'b' },
     property: Node { type: 'Identifier', start: 44, end: 45, name: 'f' },
     computed: false } }
BinaryExpression
36
45
Node {
  type: 'MemberExpression',
  start: 36,
  end: 39,
  object: Node { type: 'Identifier', start: 36, end: 37, name: 'a' },
  property: Node { type: 'Identifier', start: 38, end: 39, name: 'f' },
  computed: false }
MemberExpression
36
39
Node { type: 'Identifier', start: 36, end: 37, name: 'a' }
Identifier
36
37
a
Node { type: 'Identifier', start: 38, end: 39, name: 'f' }
Identifier
38
39
f
false
+
Node {
  type: 'MemberExpression',
  start: 42,
  end: 45,
  object: Node { type: 'Identifier', start: 42, end: 43, name: 'b' },
  property: Node { type: 'Identifier', start: 44, end: 45, name: 'f' },
  computed: false }
MemberExpression
42
45
Node { type: 'Identifier', start: 42, end: 43, name: 'b' }
Identifier
42
43
b
Node { type: 'Identifier', start: 44, end: 45, name: 'f' }
Identifier
44
45
f
false
Node {
  type: 'ExpressionStatement',
  start: 50,
  end: 64,
  expression: 
   Node {
     type: 'CallExpression',
     start: 50,
     end: 63,
     callee: Node { type: 'Identifier', start: 50, end: 58, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
50
64
Node {
  type: 'CallExpression',
  start: 50,
  end: 63,
  callee: Node { type: 'Identifier', start: 50, end: 58, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 59, end: 62, name: 'foo' } ] }
CallExpression
50
63
Node { type: 'Identifier', start: 50, end: 58, name: 'noInline' }
Identifier
50
58
noInline
[ Node { type: 'Identifier', start: 59, end: 62, name: 'foo' } ]
Node { type: 'Identifier', start: 59, end: 62, name: 'foo' }
Identifier
59
62
foo
Node {
  type: 'VariableDeclaration',
  start: 66,
  end: 82,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 70,
       end: 81,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
66
82
[ Node {
    type: 'VariableDeclarator',
    start: 70,
    end: 81,
    id: Node { type: 'Identifier', start: 70, end: 77, name: 'counter' },
    init: Node { type: 'Literal', start: 80, end: 81, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 70,
  end: 81,
  id: Node { type: 'Identifier', start: 70, end: 77, name: 'counter' },
  init: Node { type: 'Literal', start: 80, end: 81, value: 0, raw: '0' } }
VariableDeclarator
70
81
Node { type: 'Identifier', start: 70, end: 77, name: 'counter' }
Identifier
70
77
counter
Node { type: 'Literal', start: 80, end: 81, value: 0, raw: '0' }
Literal
80
81
0
0
var
Node {
  type: 'FunctionDeclaration',
  start: 83,
  end: 192,
  id: 
   Node {
     type: 'Identifier',
     start: 92,
     end: 107,
     name: 'makeWeirdObject' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: 
   Node {
     type: 'BlockStatement',
     start: 110,
     end: 192,
     body: [ [Node], [Node], [Node] ] } }
FunctionDeclaration
83
192
Node {
  type: 'Identifier',
  start: 92,
  end: 107,
  name: 'makeWeirdObject' }
Identifier
92
107
makeWeirdObject
false
false
false
[]
Node {
  type: 'BlockStatement',
  start: 110,
  end: 192,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 116,
       end: 132,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 137,
       end: 171,
       expression: [Node] },
     Node {
       type: 'ReturnStatement',
       start: 176,
       end: 190,
       argument: [Node] } ] }
BlockStatement
110
192
[ Node {
    type: 'VariableDeclaration',
    start: 116,
    end: 132,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 137,
    end: 171,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 137,
       end: 170,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ReturnStatement',
    start: 176,
    end: 190,
    argument: Node { type: 'Identifier', start: 183, end: 189, name: 'result' } } ]
Node {
  type: 'VariableDeclaration',
  start: 116,
  end: 132,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 120,
       end: 131,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
116
132
[ Node {
    type: 'VariableDeclarator',
    start: 120,
    end: 131,
    id: Node { type: 'Identifier', start: 120, end: 126, name: 'result' },
    init: Node { type: 'ObjectExpression', start: 129, end: 131, properties: [] } } ]
Node {
  type: 'VariableDeclarator',
  start: 120,
  end: 131,
  id: Node { type: 'Identifier', start: 120, end: 126, name: 'result' },
  init: Node { type: 'ObjectExpression', start: 129, end: 131, properties: [] } }
VariableDeclarator
120
131
Node { type: 'Identifier', start: 120, end: 126, name: 'result' }
Identifier
120
126
result
Node { type: 'ObjectExpression', start: 129, end: 131, properties: [] }
ObjectExpression
129
131
[]
var
Node {
  type: 'ExpressionStatement',
  start: 137,
  end: 171,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 137,
     end: 170,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 137,
        end: 165,
        object: [Node],
        property: [Node],
        computed: true },
     right: Node { type: 'Literal', start: 168, end: 170, value: 42, raw: '42' } } }
ExpressionStatement
137
171
Node {
  type: 'AssignmentExpression',
  start: 137,
  end: 170,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 137,
     end: 165,
     object: Node { type: 'Identifier', start: 137, end: 143, name: 'result' },
     property: 
      Node {
        type: 'BinaryExpression',
        start: 144,
        end: 164,
        left: [Node],
        operator: '+',
        right: [Node] },
     computed: true },
  right: Node { type: 'Literal', start: 168, end: 170, value: 42, raw: '42' } }
AssignmentExpression
137
170
=
Node {
  type: 'MemberExpression',
  start: 137,
  end: 165,
  object: Node { type: 'Identifier', start: 137, end: 143, name: 'result' },
  property: 
   Node {
     type: 'BinaryExpression',
     start: 144,
     end: 164,
     left: 
      Node {
        type: 'Literal',
        start: 144,
        end: 150,
        value: 'blah',
        raw: '"blah"' },
     operator: '+',
     right: 
      Node {
        type: 'UpdateExpression',
        start: 154,
        end: 163,
        operator: '++',
        prefix: false,
        argument: [Node] } },
  computed: true }
MemberExpression
137
165
Node { type: 'Identifier', start: 137, end: 143, name: 'result' }
Identifier
137
143
result
Node {
  type: 'BinaryExpression',
  start: 144,
  end: 164,
  left: 
   Node {
     type: 'Literal',
     start: 144,
     end: 150,
     value: 'blah',
     raw: '"blah"' },
  operator: '+',
  right: 
   Node {
     type: 'UpdateExpression',
     start: 154,
     end: 163,
     operator: '++',
     prefix: false,
     argument: Node { type: 'Identifier', start: 154, end: 161, name: 'counter' } } }
BinaryExpression
144
164
Node {
  type: 'Literal',
  start: 144,
  end: 150,
  value: 'blah',
  raw: '"blah"' }
Literal
144
150
blah
"blah"
+
Node {
  type: 'UpdateExpression',
  start: 154,
  end: 163,
  operator: '++',
  prefix: false,
  argument: Node { type: 'Identifier', start: 154, end: 161, name: 'counter' } }
UpdateExpression
154
163
++
false
Node { type: 'Identifier', start: 154, end: 161, name: 'counter' }
Identifier
154
161
counter
true
Node { type: 'Literal', start: 168, end: 170, value: 42, raw: '42' }
Literal
168
170
42
42
Node {
  type: 'ReturnStatement',
  start: 176,
  end: 190,
  argument: Node { type: 'Identifier', start: 183, end: 189, name: 'result' } }
ReturnStatement
176
190
Node { type: 'Identifier', start: 183, end: 189, name: 'result' }
Identifier
183
189
result
Node {
  type: 'ForStatement',
  start: 194,
  end: 382,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 199,
     end: 208,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 210,
     end: 220,
     left: Node { type: 'Identifier', start: 210, end: 211, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 214,
        end: 220,
        value: 100000,
        raw: '100000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 222,
     end: 225,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 224, end: 225, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 227,
     end: 382,
     body: [ [Node], [Node], [Node] ] } }
ForStatement
194
382
Node {
  type: 'VariableDeclaration',
  start: 199,
  end: 208,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 203,
       end: 208,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
199
208
[ Node {
    type: 'VariableDeclarator',
    start: 203,
    end: 208,
    id: Node { type: 'Identifier', start: 203, end: 204, name: 'i' },
    init: Node { type: 'Literal', start: 207, end: 208, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 203,
  end: 208,
  id: Node { type: 'Identifier', start: 203, end: 204, name: 'i' },
  init: Node { type: 'Literal', start: 207, end: 208, value: 0, raw: '0' } }
VariableDeclarator
203
208
Node { type: 'Identifier', start: 203, end: 204, name: 'i' }
Identifier
203
204
i
Node { type: 'Literal', start: 207, end: 208, value: 0, raw: '0' }
Literal
207
208
0
0
var
Node {
  type: 'BinaryExpression',
  start: 210,
  end: 220,
  left: Node { type: 'Identifier', start: 210, end: 211, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 214,
     end: 220,
     value: 100000,
     raw: '100000' } }
BinaryExpression
210
220
Node { type: 'Identifier', start: 210, end: 211, name: 'i' }
Identifier
210
211
i
<
Node {
  type: 'Literal',
  start: 214,
  end: 220,
  value: 100000,
  raw: '100000' }
Literal
214
220
100000
100000
Node {
  type: 'UpdateExpression',
  start: 222,
  end: 225,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 224, end: 225, name: 'i' } }
UpdateExpression
222
225
++
true
Node { type: 'Identifier', start: 224, end: 225, name: 'i' }
Identifier
224
225
i
Node {
  type: 'BlockStatement',
  start: 227,
  end: 382,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 233,
       end: 259,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 264,
       end: 307,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 312,
       end: 380,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
227
382
[ Node {
    type: 'VariableDeclaration',
    start: 233,
    end: 259,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 264,
    end: 307,
    expression: 
     Node {
       type: 'CallExpression',
       start: 264,
       end: 306,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'IfStatement',
    start: 312,
    end: 380,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 316,
       end: 333,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 343, end: 380, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 233,
  end: 259,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 237,
       end: 258,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
233
259
[ Node {
    type: 'VariableDeclarator',
    start: 237,
    end: 258,
    id: Node { type: 'Identifier', start: 237, end: 238, name: 'o' },
    init: 
     Node {
       type: 'CallExpression',
       start: 241,
       end: 258,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'VariableDeclarator',
  start: 237,
  end: 258,
  id: Node { type: 'Identifier', start: 237, end: 238, name: 'o' },
  init: 
   Node {
     type: 'CallExpression',
     start: 241,
     end: 258,
     callee: 
      Node {
        type: 'Identifier',
        start: 241,
        end: 256,
        name: 'makeWeirdObject' },
     arguments: [] } }
VariableDeclarator
237
258
Node { type: 'Identifier', start: 237, end: 238, name: 'o' }
Identifier
237
238
o
Node {
  type: 'CallExpression',
  start: 241,
  end: 258,
  callee: 
   Node {
     type: 'Identifier',
     start: 241,
     end: 256,
     name: 'makeWeirdObject' },
  arguments: [] }
CallExpression
241
258
Node {
  type: 'Identifier',
  start: 241,
  end: 256,
  name: 'makeWeirdObject' }
Identifier
241
256
makeWeirdObject
[]
var
Node {
  type: 'ExpressionStatement',
  start: 264,
  end: 307,
  expression: 
   Node {
     type: 'CallExpression',
     start: 264,
     end: 306,
     callee: Node { type: 'Identifier', start: 264, end: 267, name: 'foo' },
     arguments: [ [Node], [Node], [Node] ] } }
ExpressionStatement
264
307
Node {
  type: 'CallExpression',
  start: 264,
  end: 306,
  callee: Node { type: 'Identifier', start: 264, end: 267, name: 'foo' },
  arguments: 
   [ Node {
       type: 'ObjectExpression',
       start: 268,
       end: 282,
       properties: [Array] },
     Node {
       type: 'ObjectExpression',
       start: 284,
       end: 298,
       properties: [Array] },
     Node {
       type: 'ObjectExpression',
       start: 300,
       end: 305,
       properties: [Array] } ] }
CallExpression
264
306
Node { type: 'Identifier', start: 264, end: 267, name: 'foo' }
Identifier
264
267
foo
[ Node {
    type: 'ObjectExpression',
    start: 268,
    end: 282,
    properties: [ [Node] ] },
  Node {
    type: 'ObjectExpression',
    start: 284,
    end: 298,
    properties: [ [Node] ] },
  Node {
    type: 'ObjectExpression',
    start: 300,
    end: 305,
    properties: [ [Node] ] } ]
Node {
  type: 'ObjectExpression',
  start: 268,
  end: 282,
  properties: 
   [ Node {
       type: 'Property',
       start: 269,
       end: 281,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
268
282
[ Node {
    type: 'Property',
    start: 269,
    end: 281,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 269, end: 270, name: 'f' },
    value: 
     Node {
       type: 'Literal',
       start: 271,
       end: 281,
       value: 2000000000,
       raw: '2000000000' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 269,
  end: 281,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 269, end: 270, name: 'f' },
  value: 
   Node {
     type: 'Literal',
     start: 271,
     end: 281,
     value: 2000000000,
     raw: '2000000000' },
  kind: 'init' }
Property
269
281
false
false
false
Node { type: 'Identifier', start: 269, end: 270, name: 'f' }
Identifier
269
270
f
Node {
  type: 'Literal',
  start: 271,
  end: 281,
  value: 2000000000,
  raw: '2000000000' }
Literal
271
281
2000000000
2000000000
init
Node {
  type: 'ObjectExpression',
  start: 284,
  end: 298,
  properties: 
   [ Node {
       type: 'Property',
       start: 285,
       end: 297,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
284
298
[ Node {
    type: 'Property',
    start: 285,
    end: 297,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 285, end: 286, name: 'f' },
    value: 
     Node {
       type: 'Literal',
       start: 287,
       end: 297,
       value: 2000000000,
       raw: '2000000000' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 285,
  end: 297,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 285, end: 286, name: 'f' },
  value: 
   Node {
     type: 'Literal',
     start: 287,
     end: 297,
     value: 2000000000,
     raw: '2000000000' },
  kind: 'init' }
Property
285
297
false
false
false
Node { type: 'Identifier', start: 285, end: 286, name: 'f' }
Identifier
285
286
f
Node {
  type: 'Literal',
  start: 287,
  end: 297,
  value: 2000000000,
  raw: '2000000000' }
Literal
287
297
2000000000
2000000000
init
Node {
  type: 'ObjectExpression',
  start: 300,
  end: 305,
  properties: 
   [ Node {
       type: 'Property',
       start: 301,
       end: 304,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
300
305
[ Node {
    type: 'Property',
    start: 301,
    end: 304,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 301, end: 302, name: 'f' },
    value: Node { type: 'Identifier', start: 303, end: 304, name: 'o' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 301,
  end: 304,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 301, end: 302, name: 'f' },
  value: Node { type: 'Identifier', start: 303, end: 304, name: 'o' },
  kind: 'init' }
Property
301
304
false
false
false
Node { type: 'Identifier', start: 301, end: 302, name: 'f' }
Identifier
301
302
f
Node { type: 'Identifier', start: 303, end: 304, name: 'o' }
Identifier
303
304
o
init
Node {
  type: 'IfStatement',
  start: 312,
  end: 380,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 316,
     end: 333,
     left: 
      Node {
        type: 'MemberExpression',
        start: 316,
        end: 319,
        object: [Node],
        property: [Node],
        computed: false },
     operator: '!=',
     right: 
      Node {
        type: 'Literal',
        start: 323,
        end: 333,
        value: 4000000000,
        raw: '4000000000' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 343,
     end: 380,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 349,
        end: 379,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
312
380
Node {
  type: 'BinaryExpression',
  start: 316,
  end: 333,
  left: 
   Node {
     type: 'MemberExpression',
     start: 316,
     end: 319,
     object: Node { type: 'Identifier', start: 316, end: 317, name: 'o' },
     property: Node { type: 'Identifier', start: 318, end: 319, name: 'f' },
     computed: false },
  operator: '!=',
  right: 
   Node {
     type: 'Literal',
     start: 323,
     end: 333,
     value: 4000000000,
     raw: '4000000000' } }
BinaryExpression
316
333
Node {
  type: 'MemberExpression',
  start: 316,
  end: 319,
  object: Node { type: 'Identifier', start: 316, end: 317, name: 'o' },
  property: Node { type: 'Identifier', start: 318, end: 319, name: 'f' },
  computed: false }
MemberExpression
316
319
Node { type: 'Identifier', start: 316, end: 317, name: 'o' }
Identifier
316
317
o
Node { type: 'Identifier', start: 318, end: 319, name: 'f' }
Identifier
318
319
f
false
!=
Node {
  type: 'Literal',
  start: 323,
  end: 333,
  value: 4000000000,
  raw: '4000000000' }
Literal
323
333
4000000000
4000000000
Node {
  type: 'ThrowStatement',
  start: 343,
  end: 380,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 349,
     end: 379,
     left: 
      Node {
        type: 'Literal',
        start: 349,
        end: 370,
        value: 'Error: bad result: ',
        raw: '"Error: bad result: "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 373, end: 379, name: 'result' } } }
ThrowStatement
343
380
Node {
  type: 'BinaryExpression',
  start: 349,
  end: 379,
  left: 
   Node {
     type: 'Literal',
     start: 349,
     end: 370,
     value: 'Error: bad result: ',
     raw: '"Error: bad result: "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 373, end: 379, name: 'result' } }
BinaryExpression
349
379
Node {
  type: 'Literal',
  start: 349,
  end: 370,
  value: 'Error: bad result: ',
  raw: '"Error: bad result: "' }
Literal
349
370
Error: bad result: 
"Error: bad result: "
+
Node { type: 'Identifier', start: 373, end: 379, name: 'result' }
Identifier
373
379
result
null
[+] Exception: exit-after-int52-to-value.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 383,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 101,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 103,
       end: 117,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 119,
       end: 271,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 273,
       end: 319,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 320,
       end: 382,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
383
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 101,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 20, end: 101, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 103,
    end: 117,
    expression: 
     Node {
       type: 'CallExpression',
       start: 103,
       end: 116,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 119,
    end: 271,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 124,
       end: 133,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 135,
       end: 145,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 147,
       end: 150,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 152, end: 271, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 273,
    end: 319,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 320,
    end: 382,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 324,
       end: 339,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 345, end: 382, argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 101,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'o' },
     Node { type: 'Identifier', start: 16, end: 18, name: 'io' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 20,
     end: 101,
     body: [ [Node], [Node], [Node] ] } }
FunctionDeclaration
0
101
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'o' },
  Node { type: 'Identifier', start: 16, end: 18, name: 'io' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'o' }
Identifier
13
14
o
Node { type: 'Identifier', start: 16, end: 18, name: 'io' }
Identifier
16
18
io
Node {
  type: 'BlockStatement',
  start: 20,
  end: 101,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 26,
       end: 39,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 44,
       end: 77,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node { type: 'ReturnStatement', start: 82, end: 99, argument: [Node] } ] }
BlockStatement
20
101
[ Node {
    type: 'VariableDeclaration',
    start: 26,
    end: 39,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 44,
    end: 77,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 48,
       end: 58,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: 
     Node {
       type: 'ExpressionStatement',
       start: 68,
       end: 77,
       expression: [Node] },
    alternate: null },
  Node {
    type: 'ReturnStatement',
    start: 82,
    end: 99,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 89,
       end: 98,
       left: [Node],
       operator: '+',
       right: [Node] } } ]
Node {
  type: 'VariableDeclaration',
  start: 26,
  end: 39,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 30,
       end: 38,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
26
39
[ Node {
    type: 'VariableDeclarator',
    start: 30,
    end: 38,
    id: Node { type: 'Identifier', start: 30, end: 31, name: 'i' },
    init: 
     Node {
       type: 'MemberExpression',
       start: 34,
       end: 38,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'VariableDeclarator',
  start: 30,
  end: 38,
  id: Node { type: 'Identifier', start: 30, end: 31, name: 'i' },
  init: 
   Node {
     type: 'MemberExpression',
     start: 34,
     end: 38,
     object: Node { type: 'Identifier', start: 34, end: 36, name: 'io' },
     property: Node { type: 'Identifier', start: 37, end: 38, name: 'f' },
     computed: false } }
VariableDeclarator
30
38
Node { type: 'Identifier', start: 30, end: 31, name: 'i' }
Identifier
30
31
i
Node {
  type: 'MemberExpression',
  start: 34,
  end: 38,
  object: Node { type: 'Identifier', start: 34, end: 36, name: 'io' },
  property: Node { type: 'Identifier', start: 37, end: 38, name: 'f' },
  computed: false }
MemberExpression
34
38
Node { type: 'Identifier', start: 34, end: 36, name: 'io' }
Identifier
34
36
io
Node { type: 'Identifier', start: 37, end: 38, name: 'f' }
Identifier
37
38
f
false
var
Node {
  type: 'IfStatement',
  start: 44,
  end: 77,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 48,
     end: 58,
     left: Node { type: 'Identifier', start: 48, end: 49, name: 'i' },
     operator: '!=',
     right: Node { type: 'Literal', start: 53, end: 58, value: 92160, raw: '92160' } },
  consequent: 
   Node {
     type: 'ExpressionStatement',
     start: 68,
     end: 77,
     expression: 
      Node {
        type: 'AssignmentExpression',
        start: 68,
        end: 76,
        operator: '=',
        left: [Node],
        right: [Node] } },
  alternate: null }
IfStatement
44
77
Node {
  type: 'BinaryExpression',
  start: 48,
  end: 58,
  left: Node { type: 'Identifier', start: 48, end: 49, name: 'i' },
  operator: '!=',
  right: Node { type: 'Literal', start: 53, end: 58, value: 92160, raw: '92160' } }
BinaryExpression
48
58
Node { type: 'Identifier', start: 48, end: 49, name: 'i' }
Identifier
48
49
i
!=
Node { type: 'Literal', start: 53, end: 58, value: 92160, raw: '92160' }
Literal
53
58
92160
92160
Node {
  type: 'ExpressionStatement',
  start: 68,
  end: 77,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 68,
     end: 76,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 68,
        end: 71,
        object: [Node],
        property: [Node],
        computed: false },
     right: Node { type: 'Literal', start: 74, end: 76, value: 42, raw: '42' } } }
ExpressionStatement
68
77
Node {
  type: 'AssignmentExpression',
  start: 68,
  end: 76,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 68,
     end: 71,
     object: Node { type: 'Identifier', start: 68, end: 69, name: 'o' },
     property: Node { type: 'Identifier', start: 70, end: 71, name: 'g' },
     computed: false },
  right: Node { type: 'Literal', start: 74, end: 76, value: 42, raw: '42' } }
AssignmentExpression
68
76
=
Node {
  type: 'MemberExpression',
  start: 68,
  end: 71,
  object: Node { type: 'Identifier', start: 68, end: 69, name: 'o' },
  property: Node { type: 'Identifier', start: 70, end: 71, name: 'g' },
  computed: false }
MemberExpression
68
71
Node { type: 'Identifier', start: 68, end: 69, name: 'o' }
Identifier
68
69
o
Node { type: 'Identifier', start: 70, end: 71, name: 'g' }
Identifier
70
71
g
false
Node { type: 'Literal', start: 74, end: 76, value: 42, raw: '42' }
Literal
74
76
42
42
null
[+] Exception: exit-after-llvm-folds-large-int-constant.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 673,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 0,
       end: 38,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 40,
       end: 46,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'FunctionDeclaration',
       start: 47,
       end: 315,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 316,
       end: 333,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 335,
       end: 452,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 454,
       end: 591,
       declarations: [Array],
       kind: 'const' },
     Node {
       type: 'ExpressionStatement',
       start: 593,
       end: 607,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 609,
       end: 672,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
673
[ Node {
    type: 'VariableDeclaration',
    start: 0,
    end: 38,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 40,
    end: 46,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'FunctionDeclaration',
    start: 47,
    end: 315,
    id: Node { type: 'Identifier', start: 56, end: 62, name: 'verify' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node], [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 81, end: 315, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 316,
    end: 333,
    expression: 
     Node {
       type: 'CallExpression',
       start: 316,
       end: 332,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 335,
    end: 452,
    id: Node { type: 'Identifier', start: 344, end: 348, name: 'func' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node], [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 367, end: 452, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 454,
    end: 591,
    declarations: [ [Node] ],
    kind: 'const' },
  Node {
    type: 'ExpressionStatement',
    start: 593,
    end: 607,
    expression: 
     Node {
       type: 'CallExpression',
       start: 593,
       end: 606,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 609,
    end: 672,
    init: 
     Node {
       type: 'AssignmentExpression',
       start: 614,
       end: 619,
       operator: '=',
       left: [Node],
       right: [Node] },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 621,
       end: 629,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 631,
       end: 634,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 636, end: 672, body: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 0,
  end: 38,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 4,
       end: 37,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
0
38
[ Node {
    type: 'VariableDeclarator',
    start: 4,
    end: 37,
    id: Node { type: 'Identifier', start: 4, end: 17, name: 'createBuiltin' },
    init: 
     Node {
       type: 'MemberExpression',
       start: 20,
       end: 37,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'VariableDeclarator',
  start: 4,
  end: 37,
  id: Node { type: 'Identifier', start: 4, end: 17, name: 'createBuiltin' },
  init: 
   Node {
     type: 'MemberExpression',
     start: 20,
     end: 37,
     object: Node { type: 'Identifier', start: 20, end: 23, name: '$vm' },
     property: Node { type: 'Identifier', start: 24, end: 37, name: 'createBuiltin' },
     computed: false } }
VariableDeclarator
4
37
Node { type: 'Identifier', start: 4, end: 17, name: 'createBuiltin' }
Identifier
4
17
createBuiltin
Node {
  type: 'MemberExpression',
  start: 20,
  end: 37,
  object: Node { type: 'Identifier', start: 20, end: 23, name: '$vm' },
  property: Node { type: 'Identifier', start: 24, end: 37, name: 'createBuiltin' },
  computed: false }
MemberExpression
20
37
Node { type: 'Identifier', start: 20, end: 23, name: '$vm' }
Identifier
20
23
$vm
Node { type: 'Identifier', start: 24, end: 37, name: 'createBuiltin' }
Identifier
24
37
createBuiltin
false
var
Node {
  type: 'VariableDeclaration',
  start: 40,
  end: 46,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 44,
       end: 45,
       id: [Node],
       init: null } ],
  kind: 'let' }
VariableDeclaration
40
46
[ Node {
    type: 'VariableDeclarator',
    start: 44,
    end: 45,
    id: Node { type: 'Identifier', start: 44, end: 45, name: 'i' },
    init: null } ]
Node {
  type: 'VariableDeclarator',
  start: 44,
  end: 45,
  id: Node { type: 'Identifier', start: 44, end: 45, name: 'i' },
  init: null }
VariableDeclarator
44
45
Node { type: 'Identifier', start: 44, end: 45, name: 'i' }
Identifier
44
45
i
null
[+] Exception: exit-during-inlined-arity-fixup-recover-proper-frame.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 951,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 76,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 78,
       end: 95,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 96,
       end: 148,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 150,
       end: 164,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 165,
       end: 179,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 181,
       end: 376,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 378,
       end: 653,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 655,
       end: 708,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 709,
       end: 783,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 784,
       end: 950,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
951
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 76,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 76, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 78,
    end: 95,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 96,
    end: 148,
    id: Node { type: 'Identifier', start: 105, end: 108, name: 'bar' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 111, end: 148, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 150,
    end: 164,
    expression: 
     Node {
       type: 'CallExpression',
       start: 150,
       end: 163,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 165,
    end: 179,
    expression: 
     Node {
       type: 'CallExpression',
       start: 165,
       end: 178,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 181,
    end: 376,
    id: Node { type: 'Identifier', start: 190, end: 198, name: 'arraycmp' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 205, end: 376, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 378,
    end: 653,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 383,
       end: 392,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 394,
       end: 403,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 405,
       end: 408,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 410, end: 653, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 655,
    end: 708,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 709,
    end: 783,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 713,
       end: 733,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 739, end: 783, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 784,
    end: 950,
    test: 
     Node {
       type: 'UnaryExpression',
       start: 788,
       end: 849,
       operator: '!',
       prefix: true,
       argument: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 855, end: 950, argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 76,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'a' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 19,
     end: 76,
     body: [ [Node], [Node], [Node] ] } }
FunctionDeclaration
0
76
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'a' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'a' }
Identifier
13
14
a
Node { type: 'Identifier', start: 16, end: 17, name: 'b' }
Identifier
16
17
b
Node {
  type: 'BlockStatement',
  start: 19,
  end: 76,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 25,
       end: 44,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 49,
       end: 55,
       expression: [Node] },
     Node { type: 'ReturnStatement', start: 60, end: 74, argument: [Node] } ] }
BlockStatement
19
76
[ Node {
    type: 'VariableDeclaration',
    start: 25,
    end: 44,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 49,
    end: 55,
    expression: 
     Node {
       type: 'CallExpression',
       start: 49,
       end: 54,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ReturnStatement',
    start: 60,
    end: 74,
    argument: Node { type: 'Identifier', start: 67, end: 73, name: 'result' } } ]
Node {
  type: 'VariableDeclaration',
  start: 25,
  end: 44,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 29,
       end: 43,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
25
44
[ Node {
    type: 'VariableDeclarator',
    start: 29,
    end: 43,
    id: Node { type: 'Identifier', start: 29, end: 35, name: 'result' },
    init: 
     Node {
       type: 'BinaryExpression',
       start: 38,
       end: 43,
       left: [Node],
       operator: '+',
       right: [Node] } } ]
Node {
  type: 'VariableDeclarator',
  start: 29,
  end: 43,
  id: Node { type: 'Identifier', start: 29, end: 35, name: 'result' },
  init: 
   Node {
     type: 'BinaryExpression',
     start: 38,
     end: 43,
     left: Node { type: 'Identifier', start: 38, end: 39, name: 'a' },
     operator: '+',
     right: Node { type: 'Identifier', start: 42, end: 43, name: 'b' } } }
VariableDeclarator
29
43
Node { type: 'Identifier', start: 29, end: 35, name: 'result' }
Identifier
29
35
result
Node {
  type: 'BinaryExpression',
  start: 38,
  end: 43,
  left: Node { type: 'Identifier', start: 38, end: 39, name: 'a' },
  operator: '+',
  right: Node { type: 'Identifier', start: 42, end: 43, name: 'b' } }
BinaryExpression
38
43
Node { type: 'Identifier', start: 38, end: 39, name: 'a' }
Identifier
38
39
a
+
Node { type: 'Identifier', start: 42, end: 43, name: 'b' }
Identifier
42
43
b
var
Node {
  type: 'ExpressionStatement',
  start: 49,
  end: 55,
  expression: 
   Node {
     type: 'CallExpression',
     start: 49,
     end: 54,
     callee: Node { type: 'Identifier', start: 49, end: 52, name: 'bar' },
     arguments: [] } }
ExpressionStatement
49
55
Node {
  type: 'CallExpression',
  start: 49,
  end: 54,
  callee: Node { type: 'Identifier', start: 49, end: 52, name: 'bar' },
  arguments: [] }
CallExpression
49
54
Node { type: 'Identifier', start: 49, end: 52, name: 'bar' }
Identifier
49
52
bar
[]
Node {
  type: 'ReturnStatement',
  start: 60,
  end: 74,
  argument: Node { type: 'Identifier', start: 67, end: 73, name: 'result' } }
ReturnStatement
60
74
Node { type: 'Identifier', start: 67, end: 73, name: 'result' }
Identifier
67
73
result
Node {
  type: 'VariableDeclaration',
  start: 78,
  end: 95,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 82,
       end: 94,
       id: [Node],
       init: null } ],
  kind: 'var' }
VariableDeclaration
78
95
[ Node {
    type: 'VariableDeclarator',
    start: 82,
    end: 94,
    id: Node { type: 'Identifier', start: 82, end: 94, name: 'capturedArgs' },
    init: null } ]
Node {
  type: 'VariableDeclarator',
  start: 82,
  end: 94,
  id: Node { type: 'Identifier', start: 82, end: 94, name: 'capturedArgs' },
  init: null }
VariableDeclarator
82
94
Node { type: 'Identifier', start: 82, end: 94, name: 'capturedArgs' }
Identifier
82
94
capturedArgs
null
[+] Exception: exit-from-ftl-when-caller-passed-extra-args-then-use-function-dot-arguments.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 282,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 65,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 67,
       end: 105,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 107,
       end: 121,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 122,
       end: 136,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 138,
       end: 187,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 189,
       end: 220,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 221,
       end: 280,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
282
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 65,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: 
     [ [Node],
       [Node],
       [Node],
       [Node],
       [Node],
       [Node],
       [Node],
       [Node],
       [Node],
       [Node],
       [Node] ],
    body: Node { type: 'BlockStatement', start: 46, end: 65, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 67,
    end: 105,
    id: Node { type: 'Identifier', start: 76, end: 79, name: 'bar' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 83, end: 105, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 107,
    end: 121,
    expression: 
     Node {
       type: 'CallExpression',
       start: 107,
       end: 120,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 122,
    end: 136,
    expression: 
     Node {
       type: 'CallExpression',
       start: 122,
       end: 135,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 138,
    end: 187,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 143,
       end: 152,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 154,
       end: 164,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 166,
       end: 169,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 175,
       end: 187,
       expression: [Node] } },
  Node {
    type: 'VariableDeclaration',
    start: 189,
    end: 220,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 221,
    end: 280,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 225,
       end: 237,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 243, end: 280, argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 65,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'o' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'a' },
     Node { type: 'Identifier', start: 19, end: 20, name: 'b' },
     Node { type: 'Identifier', start: 22, end: 23, name: 'c' },
     Node { type: 'Identifier', start: 25, end: 26, name: 'd' },
     Node { type: 'Identifier', start: 28, end: 29, name: 'e' },
     Node { type: 'Identifier', start: 31, end: 32, name: 'f' },
     Node { type: 'Identifier', start: 34, end: 35, name: 'g' },
     Node { type: 'Identifier', start: 37, end: 38, name: 'h' },
     Node { type: 'Identifier', start: 40, end: 41, name: 'i' },
     Node { type: 'Identifier', start: 43, end: 44, name: 'j' } ],
  body: Node { type: 'BlockStatement', start: 46, end: 65, body: [ [Node] ] } }
FunctionDeclaration
0
65
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'o' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'a' },
  Node { type: 'Identifier', start: 19, end: 20, name: 'b' },
  Node { type: 'Identifier', start: 22, end: 23, name: 'c' },
  Node { type: 'Identifier', start: 25, end: 26, name: 'd' },
  Node { type: 'Identifier', start: 28, end: 29, name: 'e' },
  Node { type: 'Identifier', start: 31, end: 32, name: 'f' },
  Node { type: 'Identifier', start: 34, end: 35, name: 'g' },
  Node { type: 'Identifier', start: 37, end: 38, name: 'h' },
  Node { type: 'Identifier', start: 40, end: 41, name: 'i' },
  Node { type: 'Identifier', start: 43, end: 44, name: 'j' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'o' }
Identifier
13
14
o
Node { type: 'Identifier', start: 16, end: 17, name: 'a' }
Identifier
16
17
a
Node { type: 'Identifier', start: 19, end: 20, name: 'b' }
Identifier
19
20
b
Node { type: 'Identifier', start: 22, end: 23, name: 'c' }
Identifier
22
23
c
Node { type: 'Identifier', start: 25, end: 26, name: 'd' }
Identifier
25
26
d
Node { type: 'Identifier', start: 28, end: 29, name: 'e' }
Identifier
28
29
e
Node { type: 'Identifier', start: 31, end: 32, name: 'f' }
Identifier
31
32
f
Node { type: 'Identifier', start: 34, end: 35, name: 'g' }
Identifier
34
35
g
Node { type: 'Identifier', start: 37, end: 38, name: 'h' }
Identifier
37
38
h
Node { type: 'Identifier', start: 40, end: 41, name: 'i' }
Identifier
40
41
i
Node { type: 'Identifier', start: 43, end: 44, name: 'j' }
Identifier
43
44
j
Node {
  type: 'BlockStatement',
  start: 46,
  end: 65,
  body: 
   [ Node { type: 'ReturnStatement', start: 52, end: 63, argument: [Node] } ] }
BlockStatement
46
65
[ Node {
    type: 'ReturnStatement',
    start: 52,
    end: 63,
    argument: 
     Node {
       type: 'MemberExpression',
       start: 59,
       end: 62,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'ReturnStatement',
  start: 52,
  end: 63,
  argument: 
   Node {
     type: 'MemberExpression',
     start: 59,
     end: 62,
     object: Node { type: 'Identifier', start: 59, end: 60, name: 'o' },
     property: Node { type: 'Identifier', start: 61, end: 62, name: 'f' },
     computed: false } }
ReturnStatement
52
63
Node {
  type: 'MemberExpression',
  start: 59,
  end: 62,
  object: Node { type: 'Identifier', start: 59, end: 60, name: 'o' },
  property: Node { type: 'Identifier', start: 61, end: 62, name: 'f' },
  computed: false }
MemberExpression
59
62
Node { type: 'Identifier', start: 59, end: 60, name: 'o' }
Identifier
59
60
o
Node { type: 'Identifier', start: 61, end: 62, name: 'f' }
Identifier
61
62
f
false
Node {
  type: 'FunctionDeclaration',
  start: 67,
  end: 105,
  id: Node { type: 'Identifier', start: 76, end: 79, name: 'bar' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 80, end: 81, name: 'o' } ],
  body: Node { type: 'BlockStatement', start: 83, end: 105, body: [ [Node] ] } }
FunctionDeclaration
67
105
Node { type: 'Identifier', start: 76, end: 79, name: 'bar' }
Identifier
76
79
bar
false
false
false
[ Node { type: 'Identifier', start: 80, end: 81, name: 'o' } ]
Node { type: 'Identifier', start: 80, end: 81, name: 'o' }
Identifier
80
81
o
Node {
  type: 'BlockStatement',
  start: 83,
  end: 105,
  body: 
   [ Node { type: 'ReturnStatement', start: 89, end: 103, argument: [Node] } ] }
BlockStatement
83
105
[ Node {
    type: 'ReturnStatement',
    start: 89,
    end: 103,
    argument: 
     Node {
       type: 'CallExpression',
       start: 96,
       end: 102,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'ReturnStatement',
  start: 89,
  end: 103,
  argument: 
   Node {
     type: 'CallExpression',
     start: 96,
     end: 102,
     callee: Node { type: 'Identifier', start: 96, end: 99, name: 'foo' },
     arguments: [ [Node] ] } }
ReturnStatement
89
103
Node {
  type: 'CallExpression',
  start: 96,
  end: 102,
  callee: Node { type: 'Identifier', start: 96, end: 99, name: 'foo' },
  arguments: 
   [ Node { type: 'Identifier', start: 100, end: 101, name: 'o' } ] }
CallExpression
96
102
Node { type: 'Identifier', start: 96, end: 99, name: 'foo' }
Identifier
96
99
foo
[ Node { type: 'Identifier', start: 100, end: 101, name: 'o' } ]
Node { type: 'Identifier', start: 100, end: 101, name: 'o' }
Identifier
100
101
o
Node {
  type: 'ExpressionStatement',
  start: 107,
  end: 121,
  expression: 
   Node {
     type: 'CallExpression',
     start: 107,
     end: 120,
     callee: Node { type: 'Identifier', start: 107, end: 115, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
107
121
Node {
  type: 'CallExpression',
  start: 107,
  end: 120,
  callee: Node { type: 'Identifier', start: 107, end: 115, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 116, end: 119, name: 'foo' } ] }
CallExpression
107
120
Node { type: 'Identifier', start: 107, end: 115, name: 'noInline' }
Identifier
107
115
noInline
[ Node { type: 'Identifier', start: 116, end: 119, name: 'foo' } ]
Node { type: 'Identifier', start: 116, end: 119, name: 'foo' }
Identifier
116
119
foo
Node {
  type: 'ExpressionStatement',
  start: 122,
  end: 136,
  expression: 
   Node {
     type: 'CallExpression',
     start: 122,
     end: 135,
     callee: Node { type: 'Identifier', start: 122, end: 130, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
122
136
Node {
  type: 'CallExpression',
  start: 122,
  end: 135,
  callee: Node { type: 'Identifier', start: 122, end: 130, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 131, end: 134, name: 'bar' } ] }
CallExpression
122
135
Node { type: 'Identifier', start: 122, end: 130, name: 'noInline' }
Identifier
122
130
noInline
[ Node { type: 'Identifier', start: 131, end: 134, name: 'bar' } ]
Node { type: 'Identifier', start: 131, end: 134, name: 'bar' }
Identifier
131
134
bar
Node {
  type: 'ForStatement',
  start: 138,
  end: 187,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 143,
     end: 152,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 154,
     end: 164,
     left: Node { type: 'Identifier', start: 154, end: 155, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 158,
        end: 164,
        value: 100000,
        raw: '100000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 166,
     end: 169,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 168, end: 169, name: 'i' } },
  body: 
   Node {
     type: 'ExpressionStatement',
     start: 175,
     end: 187,
     expression: 
      Node {
        type: 'CallExpression',
        start: 175,
        end: 186,
        callee: [Node],
        arguments: [Array] } } }
ForStatement
138
187
Node {
  type: 'VariableDeclaration',
  start: 143,
  end: 152,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 147,
       end: 152,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
143
152
[ Node {
    type: 'VariableDeclarator',
    start: 147,
    end: 152,
    id: Node { type: 'Identifier', start: 147, end: 148, name: 'i' },
    init: Node { type: 'Literal', start: 151, end: 152, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 147,
  end: 152,
  id: Node { type: 'Identifier', start: 147, end: 148, name: 'i' },
  init: Node { type: 'Literal', start: 151, end: 152, value: 0, raw: '0' } }
VariableDeclarator
147
152
Node { type: 'Identifier', start: 147, end: 148, name: 'i' }
Identifier
147
148
i
Node { type: 'Literal', start: 151, end: 152, value: 0, raw: '0' }
Literal
151
152
0
0
var
Node {
  type: 'BinaryExpression',
  start: 154,
  end: 164,
  left: Node { type: 'Identifier', start: 154, end: 155, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 158,
     end: 164,
     value: 100000,
     raw: '100000' } }
BinaryExpression
154
164
Node { type: 'Identifier', start: 154, end: 155, name: 'i' }
Identifier
154
155
i
<
Node {
  type: 'Literal',
  start: 158,
  end: 164,
  value: 100000,
  raw: '100000' }
Literal
158
164
100000
100000
Node {
  type: 'UpdateExpression',
  start: 166,
  end: 169,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 168, end: 169, name: 'i' } }
UpdateExpression
166
169
++
true
Node { type: 'Identifier', start: 168, end: 169, name: 'i' }
Identifier
168
169
i
Node {
  type: 'ExpressionStatement',
  start: 175,
  end: 187,
  expression: 
   Node {
     type: 'CallExpression',
     start: 175,
     end: 186,
     callee: Node { type: 'Identifier', start: 175, end: 178, name: 'bar' },
     arguments: [ [Node] ] } }
ExpressionStatement
175
187
Node {
  type: 'CallExpression',
  start: 175,
  end: 186,
  callee: Node { type: 'Identifier', start: 175, end: 178, name: 'bar' },
  arguments: 
   [ Node {
       type: 'ObjectExpression',
       start: 179,
       end: 185,
       properties: [Array] } ] }
CallExpression
175
186
Node { type: 'Identifier', start: 175, end: 178, name: 'bar' }
Identifier
175
178
bar
[ Node {
    type: 'ObjectExpression',
    start: 179,
    end: 185,
    properties: [ [Node] ] } ]
Node {
  type: 'ObjectExpression',
  start: 179,
  end: 185,
  properties: 
   [ Node {
       type: 'Property',
       start: 180,
       end: 184,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
179
185
[ Node {
    type: 'Property',
    start: 180,
    end: 184,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 180, end: 181, name: 'f' },
    value: Node { type: 'Literal', start: 182, end: 184, value: 42, raw: '42' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 180,
  end: 184,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 180, end: 181, name: 'f' },
  value: Node { type: 'Literal', start: 182, end: 184, value: 42, raw: '42' },
  kind: 'init' }
Property
180
184
false
false
false
Node { type: 'Identifier', start: 180, end: 181, name: 'f' }
Identifier
180
181
f
Node { type: 'Literal', start: 182, end: 184, value: 42, raw: '42' }
Literal
182
184
42
42
init
Node {
  type: 'VariableDeclaration',
  start: 189,
  end: 220,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 193,
       end: 219,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
189
220
[ Node {
    type: 'VariableDeclarator',
    start: 193,
    end: 219,
    id: Node { type: 'Identifier', start: 193, end: 199, name: 'result' },
    init: 
     Node {
       type: 'CallExpression',
       start: 202,
       end: 219,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 193,
  end: 219,
  id: Node { type: 'Identifier', start: 193, end: 199, name: 'result' },
  init: 
   Node {
     type: 'CallExpression',
     start: 202,
     end: 219,
     callee: Node { type: 'Identifier', start: 202, end: 205, name: 'bar' },
     arguments: [ [Node] ] } }
VariableDeclarator
193
219
Node { type: 'Identifier', start: 193, end: 199, name: 'result' }
Identifier
193
199
result
Node {
  type: 'CallExpression',
  start: 202,
  end: 219,
  callee: Node { type: 'Identifier', start: 202, end: 205, name: 'bar' },
  arguments: 
   [ Node {
       type: 'ObjectExpression',
       start: 206,
       end: 218,
       properties: [Array] } ] }
CallExpression
202
219
Node { type: 'Identifier', start: 202, end: 205, name: 'bar' }
Identifier
202
205
bar
[ Node {
    type: 'ObjectExpression',
    start: 206,
    end: 218,
    properties: [ [Node], [Node] ] } ]
Node {
  type: 'ObjectExpression',
  start: 206,
  end: 218,
  properties: 
   [ Node {
       type: 'Property',
       start: 207,
       end: 211,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 213,
       end: 217,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
206
218
[ Node {
    type: 'Property',
    start: 207,
    end: 211,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 207, end: 208, name: 'g' },
    value: Node { type: 'Literal', start: 209, end: 211, value: 24, raw: '24' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 213,
    end: 217,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 213, end: 214, name: 'f' },
    value: Node { type: 'Literal', start: 215, end: 217, value: 43, raw: '43' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 207,
  end: 211,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 207, end: 208, name: 'g' },
  value: Node { type: 'Literal', start: 209, end: 211, value: 24, raw: '24' },
  kind: 'init' }
Property
207
211
false
false
false
Node { type: 'Identifier', start: 207, end: 208, name: 'g' }
Identifier
207
208
g
Node { type: 'Literal', start: 209, end: 211, value: 24, raw: '24' }
Literal
209
211
24
24
init
Node {
  type: 'Property',
  start: 213,
  end: 217,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 213, end: 214, name: 'f' },
  value: Node { type: 'Literal', start: 215, end: 217, value: 43, raw: '43' },
  kind: 'init' }
Property
213
217
false
false
false
Node { type: 'Identifier', start: 213, end: 214, name: 'f' }
Identifier
213
214
f
Node { type: 'Literal', start: 215, end: 217, value: 43, raw: '43' }
Literal
215
217
43
43
init
var
Node {
  type: 'IfStatement',
  start: 221,
  end: 280,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 225,
     end: 237,
     left: Node { type: 'Identifier', start: 225, end: 231, name: 'result' },
     operator: '!=',
     right: Node { type: 'Literal', start: 235, end: 237, value: 43, raw: '43' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 243,
     end: 280,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 249,
        end: 279,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
221
280
Node {
  type: 'BinaryExpression',
  start: 225,
  end: 237,
  left: Node { type: 'Identifier', start: 225, end: 231, name: 'result' },
  operator: '!=',
  right: Node { type: 'Literal', start: 235, end: 237, value: 43, raw: '43' } }
BinaryExpression
225
237
Node { type: 'Identifier', start: 225, end: 231, name: 'result' }
Identifier
225
231
result
!=
Node { type: 'Literal', start: 235, end: 237, value: 43, raw: '43' }
Literal
235
237
43
43
Node {
  type: 'ThrowStatement',
  start: 243,
  end: 280,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 249,
     end: 279,
     left: 
      Node {
        type: 'Literal',
        start: 249,
        end: 270,
        value: 'Error: bad result: ',
        raw: '"Error: bad result: "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 273, end: 279, name: 'result' } } }
ThrowStatement
243
280
Node {
  type: 'BinaryExpression',
  start: 249,
  end: 279,
  left: 
   Node {
     type: 'Literal',
     start: 249,
     end: 270,
     value: 'Error: bad result: ',
     raw: '"Error: bad result: "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 273, end: 279, name: 'result' } }
BinaryExpression
249
279
Node {
  type: 'Literal',
  start: 249,
  end: 270,
  value: 'Error: bad result: ',
  raw: '"Error: bad result: "' }
Literal
249
270
Error: bad result: 
"Error: bad result: "
+
Node { type: 'Identifier', start: 273, end: 279, name: 'result' }
Identifier
273
279
result
null
[+] Exception: exit-from-ftl-with-arity-check-fail.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 573,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 0,
       end: 571,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
573
[ Node {
    type: 'ExpressionStatement',
    start: 0,
    end: 571,
    expression: 
     Node {
       type: 'CallExpression',
       start: 0,
       end: 570,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'ExpressionStatement',
  start: 0,
  end: 571,
  expression: 
   Node {
     type: 'CallExpression',
     start: 0,
     end: 570,
     callee: 
      Node {
        type: 'FunctionExpression',
        start: 1,
        end: 567,
        id: null,
        generator: false,
        expression: false,
        async: false,
        params: [],
        body: [Node] },
     arguments: [] } }
ExpressionStatement
0
571
Node {
  type: 'CallExpression',
  start: 0,
  end: 570,
  callee: 
   Node {
     type: 'FunctionExpression',
     start: 1,
     end: 567,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [],
     body: Node { type: 'BlockStatement', start: 12, end: 567, body: [Array] } },
  arguments: [] }
CallExpression
0
570
Node {
  type: 'FunctionExpression',
  start: 1,
  end: 567,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: 
   Node {
     type: 'BlockStatement',
     start: 12,
     end: 567,
     body: 
      [ [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node] ] } }
FunctionExpression
1
567
null
[+] Exception: exit-from-getter.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 572,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 0,
       end: 570,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
572
[ Node {
    type: 'ExpressionStatement',
    start: 0,
    end: 570,
    expression: 
     Node {
       type: 'CallExpression',
       start: 0,
       end: 569,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'ExpressionStatement',
  start: 0,
  end: 570,
  expression: 
   Node {
     type: 'CallExpression',
     start: 0,
     end: 569,
     callee: 
      Node {
        type: 'FunctionExpression',
        start: 1,
        end: 566,
        id: null,
        generator: false,
        expression: false,
        async: false,
        params: [],
        body: [Node] },
     arguments: [] } }
ExpressionStatement
0
570
Node {
  type: 'CallExpression',
  start: 0,
  end: 569,
  callee: 
   Node {
     type: 'FunctionExpression',
     start: 1,
     end: 566,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [],
     body: Node { type: 'BlockStatement', start: 12, end: 566, body: [Array] } },
  arguments: [] }
CallExpression
0
569
Node {
  type: 'FunctionExpression',
  start: 1,
  end: 566,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: 
   Node {
     type: 'BlockStatement',
     start: 12,
     end: 566,
     body: 
      [ [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node] ] } }
FunctionExpression
1
566
null
[+] Exception: exit-from-setter.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 393,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 74,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 76,
       end: 90,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 92,
       end: 248,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 250,
       end: 300,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 301,
       end: 392,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
393
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 74,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 27, end: 74, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 76,
    end: 90,
    expression: 
     Node {
       type: 'CallExpression',
       start: 76,
       end: 89,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 92,
    end: 248,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 97,
       end: 106,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 108,
       end: 118,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 120,
       end: 123,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 125, end: 248, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 250,
    end: 300,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 301,
    end: 392,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 305,
       end: 342,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 348, end: 392, argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 74,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'a' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'b' },
     Node { type: 'Identifier', start: 19, end: 25, name: 'string' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 27,
     end: 74,
     body: [ [Node], [Node] ] } }
FunctionDeclaration
0
74
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'a' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'b' },
  Node { type: 'Identifier', start: 19, end: 25, name: 'string' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'a' }
Identifier
13
14
a
Node { type: 'Identifier', start: 16, end: 17, name: 'b' }
Identifier
16
17
b
Node { type: 'Identifier', start: 19, end: 25, name: 'string' }
Identifier
19
25
string
Node {
  type: 'BlockStatement',
  start: 27,
  end: 74,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 33,
       end: 47,
       declarations: [Array],
       kind: 'var' },
     Node { type: 'ReturnStatement', start: 52, end: 72, argument: [Node] } ] }
BlockStatement
27
74
[ Node {
    type: 'VariableDeclaration',
    start: 33,
    end: 47,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ReturnStatement',
    start: 52,
    end: 72,
    argument: 
     Node {
       type: 'CallExpression',
       start: 59,
       end: 71,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 33,
  end: 47,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 37,
       end: 46,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
33
47
[ Node {
    type: 'VariableDeclarator',
    start: 37,
    end: 46,
    id: Node { type: 'Identifier', start: 37, end: 38, name: 'x' },
    init: 
     Node {
       type: 'BinaryExpression',
       start: 41,
       end: 46,
       left: [Node],
       operator: '+',
       right: [Node] } } ]
Node {
  type: 'VariableDeclarator',
  start: 37,
  end: 46,
  id: Node { type: 'Identifier', start: 37, end: 38, name: 'x' },
  init: 
   Node {
     type: 'BinaryExpression',
     start: 41,
     end: 46,
     left: Node { type: 'Identifier', start: 41, end: 42, name: 'a' },
     operator: '+',
     right: Node { type: 'Identifier', start: 45, end: 46, name: 'b' } } }
VariableDeclarator
37
46
Node { type: 'Identifier', start: 37, end: 38, name: 'x' }
Identifier
37
38
x
Node {
  type: 'BinaryExpression',
  start: 41,
  end: 46,
  left: Node { type: 'Identifier', start: 41, end: 42, name: 'a' },
  operator: '+',
  right: Node { type: 'Identifier', start: 45, end: 46, name: 'b' } }
BinaryExpression
41
46
Node { type: 'Identifier', start: 41, end: 42, name: 'a' }
Identifier
41
42
a
+
Node { type: 'Identifier', start: 45, end: 46, name: 'b' }
Identifier
45
46
b
var
Node {
  type: 'ReturnStatement',
  start: 52,
  end: 72,
  argument: 
   Node {
     type: 'CallExpression',
     start: 59,
     end: 71,
     callee: Node { type: 'Identifier', start: 59, end: 63, name: 'eval' },
     arguments: [ [Node] ] } }
ReturnStatement
52
72
Node {
  type: 'CallExpression',
  start: 59,
  end: 71,
  callee: Node { type: 'Identifier', start: 59, end: 63, name: 'eval' },
  arguments: 
   [ Node { type: 'Identifier', start: 64, end: 70, name: 'string' } ] }
CallExpression
59
71
Node { type: 'Identifier', start: 59, end: 63, name: 'eval' }
Identifier
59
63
eval
[ Node { type: 'Identifier', start: 64, end: 70, name: 'string' } ]
Node { type: 'Identifier', start: 64, end: 70, name: 'string' }
Identifier
64
70
string
Node {
  type: 'ExpressionStatement',
  start: 76,
  end: 90,
  expression: 
   Node {
     type: 'CallExpression',
     start: 76,
     end: 89,
     callee: Node { type: 'Identifier', start: 76, end: 84, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
76
90
Node {
  type: 'CallExpression',
  start: 76,
  end: 89,
  callee: Node { type: 'Identifier', start: 76, end: 84, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 85, end: 88, name: 'foo' } ] }
CallExpression
76
89
Node { type: 'Identifier', start: 76, end: 84, name: 'noInline' }
Identifier
76
84
noInline
[ Node { type: 'Identifier', start: 85, end: 88, name: 'foo' } ]
Node { type: 'Identifier', start: 85, end: 88, name: 'foo' }
Identifier
85
88
foo
Node {
  type: 'ForStatement',
  start: 92,
  end: 248,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 97,
     end: 106,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 108,
     end: 118,
     left: Node { type: 'Identifier', start: 108, end: 109, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 112,
        end: 118,
        value: 100000,
        raw: '100000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 120,
     end: 123,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 122, end: 123, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 125,
     end: 248,
     body: [ [Node], [Node] ] } }
ForStatement
92
248
Node {
  type: 'VariableDeclaration',
  start: 97,
  end: 106,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 101,
       end: 106,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
97
106
[ Node {
    type: 'VariableDeclarator',
    start: 101,
    end: 106,
    id: Node { type: 'Identifier', start: 101, end: 102, name: 'i' },
    init: Node { type: 'Literal', start: 105, end: 106, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 101,
  end: 106,
  id: Node { type: 'Identifier', start: 101, end: 102, name: 'i' },
  init: Node { type: 'Literal', start: 105, end: 106, value: 0, raw: '0' } }
VariableDeclarator
101
106
Node { type: 'Identifier', start: 101, end: 102, name: 'i' }
Identifier
101
102
i
Node { type: 'Literal', start: 105, end: 106, value: 0, raw: '0' }
Literal
105
106
0
0
var
Node {
  type: 'BinaryExpression',
  start: 108,
  end: 118,
  left: Node { type: 'Identifier', start: 108, end: 109, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 112,
     end: 118,
     value: 100000,
     raw: '100000' } }
BinaryExpression
108
118
Node { type: 'Identifier', start: 108, end: 109, name: 'i' }
Identifier
108
109
i
<
Node {
  type: 'Literal',
  start: 112,
  end: 118,
  value: 100000,
  raw: '100000' }
Literal
112
118
100000
100000
Node {
  type: 'UpdateExpression',
  start: 120,
  end: 123,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 122, end: 123, name: 'i' } }
UpdateExpression
120
123
++
true
Node { type: 'Identifier', start: 122, end: 123, name: 'i' }
Identifier
122
123
i
Node {
  type: 'BlockStatement',
  start: 125,
  end: 248,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 131,
       end: 163,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 168,
       end: 246,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
125
248
[ Node {
    type: 'VariableDeclaration',
    start: 131,
    end: 163,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 168,
    end: 246,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 172,
       end: 191,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 201, end: 246, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 131,
  end: 163,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 135,
       end: 162,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
131
163
[ Node {
    type: 'VariableDeclarator',
    start: 135,
    end: 162,
    id: Node { type: 'Identifier', start: 135, end: 141, name: 'result' },
    init: 
     Node {
       type: 'CallExpression',
       start: 144,
       end: 162,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 135,
  end: 162,
  id: Node { type: 'Identifier', start: 135, end: 141, name: 'result' },
  init: 
   Node {
     type: 'CallExpression',
     start: 144,
     end: 162,
     callee: Node { type: 'Identifier', start: 144, end: 147, name: 'foo' },
     arguments: [ [Node], [Node], [Node] ] } }
VariableDeclarator
135
162
Node { type: 'Identifier', start: 135, end: 141, name: 'result' }
Identifier
135
141
result
Node {
  type: 'CallExpression',
  start: 144,
  end: 162,
  callee: Node { type: 'Identifier', start: 144, end: 147, name: 'foo' },
  arguments: 
   [ Node { type: 'Literal', start: 148, end: 149, value: 1, raw: '1' },
     Node { type: 'Literal', start: 151, end: 152, value: 2, raw: '2' },
     Node {
       type: 'Literal',
       start: 154,
       end: 161,
       value: 'x + 1',
       raw: '"x + 1"' } ] }
CallExpression
144
162
Node { type: 'Identifier', start: 144, end: 147, name: 'foo' }
Identifier
144
147
foo
[ Node { type: 'Literal', start: 148, end: 149, value: 1, raw: '1' },
  Node { type: 'Literal', start: 151, end: 152, value: 2, raw: '2' },
  Node {
    type: 'Literal',
    start: 154,
    end: 161,
    value: 'x + 1',
    raw: '"x + 1"' } ]
Node { type: 'Literal', start: 148, end: 149, value: 1, raw: '1' }
Literal
148
149
1
1
Node { type: 'Literal', start: 151, end: 152, value: 2, raw: '2' }
Literal
151
152
2
2
Node {
  type: 'Literal',
  start: 154,
  end: 161,
  value: 'x + 1',
  raw: '"x + 1"' }
Literal
154
161
x + 1
"x + 1"
var
Node {
  type: 'IfStatement',
  start: 168,
  end: 246,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 172,
     end: 191,
     left: Node { type: 'Identifier', start: 172, end: 178, name: 'result' },
     operator: '!=',
     right: 
      Node {
        type: 'BinaryExpression',
        start: 182,
        end: 191,
        left: [Node],
        operator: '+',
        right: [Node] } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 201,
     end: 246,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 207,
        end: 245,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
168
246
Node {
  type: 'BinaryExpression',
  start: 172,
  end: 191,
  left: Node { type: 'Identifier', start: 172, end: 178, name: 'result' },
  operator: '!=',
  right: 
   Node {
     type: 'BinaryExpression',
     start: 182,
     end: 191,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 182,
        end: 187,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Literal', start: 190, end: 191, value: 1, raw: '1' } } }
BinaryExpression
172
191
Node { type: 'Identifier', start: 172, end: 178, name: 'result' }
Identifier
172
178
result
!=
Node {
  type: 'BinaryExpression',
  start: 182,
  end: 191,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 182,
     end: 187,
     left: Node { type: 'Literal', start: 182, end: 183, value: 1, raw: '1' },
     operator: '+',
     right: Node { type: 'Literal', start: 186, end: 187, value: 2, raw: '2' } },
  operator: '+',
  right: Node { type: 'Literal', start: 190, end: 191, value: 1, raw: '1' } }
BinaryExpression
182
191
Node {
  type: 'BinaryExpression',
  start: 182,
  end: 187,
  left: Node { type: 'Literal', start: 182, end: 183, value: 1, raw: '1' },
  operator: '+',
  right: Node { type: 'Literal', start: 186, end: 187, value: 2, raw: '2' } }
BinaryExpression
182
187
Node { type: 'Literal', start: 182, end: 183, value: 1, raw: '1' }
Literal
182
183
1
1
+
Node { type: 'Literal', start: 186, end: 187, value: 2, raw: '2' }
Literal
186
187
2
2
+
Node { type: 'Literal', start: 190, end: 191, value: 1, raw: '1' }
Literal
190
191
1
1
Node {
  type: 'ThrowStatement',
  start: 201,
  end: 246,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 207,
     end: 245,
     left: 
      Node {
        type: 'Literal',
        start: 207,
        end: 236,
        value: 'Error: bad result in loop: ',
        raw: '"Error: bad result in loop: "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 239, end: 245, name: 'result' } } }
ThrowStatement
201
246
Node {
  type: 'BinaryExpression',
  start: 207,
  end: 245,
  left: 
   Node {
     type: 'Literal',
     start: 207,
     end: 236,
     value: 'Error: bad result in loop: ',
     raw: '"Error: bad result in loop: "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 239, end: 245, name: 'result' } }
BinaryExpression
207
245
Node {
  type: 'Literal',
  start: 207,
  end: 236,
  value: 'Error: bad result in loop: ',
  raw: '"Error: bad result in loop: "' }
Literal
207
236
Error: bad result in loop: 
"Error: bad result in loop: "
+
Node { type: 'Identifier', start: 239, end: 245, name: 'result' }
Identifier
239
245
result
null
[+] Exception: exit-then-eval.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 356,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 0,
       end: 32,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 33,
       end: 47,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 49,
       end: 103,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 105,
       end: 119,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 121,
       end: 250,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 252,
       end: 267,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 268,
       end: 287,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 288,
       end: 355,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
356
[ Node {
    type: 'VariableDeclaration',
    start: 0,
    end: 32,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 33,
    end: 47,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 33,
       end: 46,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'FunctionDeclaration',
    start: 49,
    end: 103,
    id: Node { type: 'Identifier', start: 58, end: 61, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 64, end: 103, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 105,
    end: 119,
    expression: 
     Node {
       type: 'CallExpression',
       start: 105,
       end: 118,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 121,
    end: 250,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 126,
       end: 135,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 137,
       end: 148,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 150,
       end: 153,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 155, end: 250, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 252,
    end: 267,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 252,
       end: 266,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'VariableDeclaration',
    start: 268,
    end: 287,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 288,
    end: 355,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 292,
       end: 305,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 311, end: 355, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 0,
  end: 32,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 4,
       end: 31,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
0
32
[ Node {
    type: 'VariableDeclarator',
    start: 4,
    end: 31,
    id: Node { type: 'Identifier', start: 4, end: 9, name: 'array' },
    init: 
     Node {
       type: 'NewExpression',
       start: 12,
       end: 31,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 4,
  end: 31,
  id: Node { type: 'Identifier', start: 4, end: 9, name: 'array' },
  init: 
   Node {
     type: 'NewExpression',
     start: 12,
     end: 31,
     callee: Node { type: 'Identifier', start: 16, end: 28, name: 'Float64Array' },
     arguments: [ [Node] ] } }
VariableDeclarator
4
31
Node { type: 'Identifier', start: 4, end: 9, name: 'array' }
Identifier
4
9
array
Node {
  type: 'NewExpression',
  start: 12,
  end: 31,
  callee: Node { type: 'Identifier', start: 16, end: 28, name: 'Float64Array' },
  arguments: 
   [ Node { type: 'Literal', start: 29, end: 30, value: 1, raw: '1' } ] }
NewExpression
12
31
Node { type: 'Identifier', start: 16, end: 28, name: 'Float64Array' }
Identifier
16
28
Float64Array
[ Node { type: 'Literal', start: 29, end: 30, value: 1, raw: '1' } ]
Node { type: 'Literal', start: 29, end: 30, value: 1, raw: '1' }
Literal
29
30
1
1
var
Node {
  type: 'ExpressionStatement',
  start: 33,
  end: 47,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 33,
     end: 46,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 33,
        end: 41,
        object: [Node],
        property: [Node],
        computed: true },
     right: Node { type: 'Literal', start: 44, end: 46, value: 42, raw: '42' } } }
ExpressionStatement
33
47
Node {
  type: 'AssignmentExpression',
  start: 33,
  end: 46,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 33,
     end: 41,
     object: Node { type: 'Identifier', start: 33, end: 38, name: 'array' },
     property: Node { type: 'Literal', start: 39, end: 40, value: 0, raw: '0' },
     computed: true },
  right: Node { type: 'Literal', start: 44, end: 46, value: 42, raw: '42' } }
AssignmentExpression
33
46
=
Node {
  type: 'MemberExpression',
  start: 33,
  end: 41,
  object: Node { type: 'Identifier', start: 33, end: 38, name: 'array' },
  property: Node { type: 'Literal', start: 39, end: 40, value: 0, raw: '0' },
  computed: true }
MemberExpression
33
41
Node { type: 'Identifier', start: 33, end: 38, name: 'array' }
Identifier
33
38
array
Node { type: 'Literal', start: 39, end: 40, value: 0, raw: '0' }
Literal
39
40
0
0
true
Node { type: 'Literal', start: 44, end: 46, value: 42, raw: '42' }
Literal
44
46
42
42
Node {
  type: 'FunctionDeclaration',
  start: 49,
  end: 103,
  id: Node { type: 'Identifier', start: 58, end: 61, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 64, end: 103, body: [ [Node] ] } }
FunctionDeclaration
49
103
Node { type: 'Identifier', start: 58, end: 61, name: 'foo' }
Identifier
58
61
foo
false
false
false
[]
Node {
  type: 'BlockStatement',
  start: 64,
  end: 103,
  body: 
   [ Node { type: 'ReturnStatement', start: 70, end: 101, argument: [Node] } ] }
BlockStatement
64
103
[ Node {
    type: 'ReturnStatement',
    start: 70,
    end: 101,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 77,
       end: 100,
       left: [Node],
       operator: '+',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 70,
  end: 101,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 77,
     end: 100,
     left: 
      Node {
        type: 'CallExpression',
        start: 77,
        end: 96,
        callee: [Node],
        arguments: [Array] },
     operator: '+',
     right: Node { type: 'Literal', start: 99, end: 100, value: 1, raw: '1' } } }
ReturnStatement
70
101
Node {
  type: 'BinaryExpression',
  start: 77,
  end: 100,
  left: 
   Node {
     type: 'CallExpression',
     start: 77,
     end: 96,
     callee: Node { type: 'Identifier', start: 77, end: 86, name: 'fiatInt52' },
     arguments: [ [Node] ] },
  operator: '+',
  right: Node { type: 'Literal', start: 99, end: 100, value: 1, raw: '1' } }
BinaryExpression
77
100
Node {
  type: 'CallExpression',
  start: 77,
  end: 96,
  callee: Node { type: 'Identifier', start: 77, end: 86, name: 'fiatInt52' },
  arguments: 
   [ Node {
       type: 'MemberExpression',
       start: 87,
       end: 95,
       object: [Node],
       property: [Node],
       computed: true } ] }
CallExpression
77
96
Node { type: 'Identifier', start: 77, end: 86, name: 'fiatInt52' }
Identifier
77
86
fiatInt52
[ Node {
    type: 'MemberExpression',
    start: 87,
    end: 95,
    object: Node { type: 'Identifier', start: 87, end: 92, name: 'array' },
    property: Node { type: 'Literal', start: 93, end: 94, value: 0, raw: '0' },
    computed: true } ]
Node {
  type: 'MemberExpression',
  start: 87,
  end: 95,
  object: Node { type: 'Identifier', start: 87, end: 92, name: 'array' },
  property: Node { type: 'Literal', start: 93, end: 94, value: 0, raw: '0' },
  computed: true }
MemberExpression
87
95
Node { type: 'Identifier', start: 87, end: 92, name: 'array' }
Identifier
87
92
array
Node { type: 'Literal', start: 93, end: 94, value: 0, raw: '0' }
Literal
93
94
0
0
true
+
Node { type: 'Literal', start: 99, end: 100, value: 1, raw: '1' }
Literal
99
100
1
1
Node {
  type: 'ExpressionStatement',
  start: 105,
  end: 119,
  expression: 
   Node {
     type: 'CallExpression',
     start: 105,
     end: 118,
     callee: Node { type: 'Identifier', start: 105, end: 113, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
105
119
Node {
  type: 'CallExpression',
  start: 105,
  end: 118,
  callee: Node { type: 'Identifier', start: 105, end: 113, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 114, end: 117, name: 'foo' } ] }
CallExpression
105
118
Node { type: 'Identifier', start: 105, end: 113, name: 'noInline' }
Identifier
105
113
noInline
[ Node { type: 'Identifier', start: 114, end: 117, name: 'foo' } ]
Node { type: 'Identifier', start: 114, end: 117, name: 'foo' }
Identifier
114
117
foo
Node {
  type: 'ForStatement',
  start: 121,
  end: 250,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 126,
     end: 135,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 137,
     end: 148,
     left: Node { type: 'Identifier', start: 137, end: 138, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 141,
        end: 148,
        value: 1000000,
        raw: '1000000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 150,
     end: 153,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 152, end: 153, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 155,
     end: 250,
     body: [ [Node], [Node] ] } }
ForStatement
121
250
Node {
  type: 'VariableDeclaration',
  start: 126,
  end: 135,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 130,
       end: 135,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
126
135
[ Node {
    type: 'VariableDeclarator',
    start: 130,
    end: 135,
    id: Node { type: 'Identifier', start: 130, end: 131, name: 'i' },
    init: Node { type: 'Literal', start: 134, end: 135, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 130,
  end: 135,
  id: Node { type: 'Identifier', start: 130, end: 131, name: 'i' },
  init: Node { type: 'Literal', start: 134, end: 135, value: 0, raw: '0' } }
VariableDeclarator
130
135
Node { type: 'Identifier', start: 130, end: 131, name: 'i' }
Identifier
130
131
i
Node { type: 'Literal', start: 134, end: 135, value: 0, raw: '0' }
Literal
134
135
0
0
var
Node {
  type: 'BinaryExpression',
  start: 137,
  end: 148,
  left: Node { type: 'Identifier', start: 137, end: 138, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 141,
     end: 148,
     value: 1000000,
     raw: '1000000' } }
BinaryExpression
137
148
Node { type: 'Identifier', start: 137, end: 138, name: 'i' }
Identifier
137
138
i
<
Node {
  type: 'Literal',
  start: 141,
  end: 148,
  value: 1000000,
  raw: '1000000' }
Literal
141
148
1000000
1000000
Node {
  type: 'UpdateExpression',
  start: 150,
  end: 153,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 152, end: 153, name: 'i' } }
UpdateExpression
150
153
++
true
Node { type: 'Identifier', start: 152, end: 153, name: 'i' }
Identifier
152
153
i
Node {
  type: 'BlockStatement',
  start: 155,
  end: 250,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 161,
       end: 180,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 185,
       end: 248,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
155
250
[ Node {
    type: 'VariableDeclaration',
    start: 161,
    end: 180,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 185,
    end: 248,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 189,
       end: 201,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 211, end: 248, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 161,
  end: 180,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 165,
       end: 179,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
161
180
[ Node {
    type: 'VariableDeclarator',
    start: 165,
    end: 179,
    id: Node { type: 'Identifier', start: 165, end: 171, name: 'result' },
    init: 
     Node {
       type: 'CallExpression',
       start: 174,
       end: 179,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'VariableDeclarator',
  start: 165,
  end: 179,
  id: Node { type: 'Identifier', start: 165, end: 171, name: 'result' },
  init: 
   Node {
     type: 'CallExpression',
     start: 174,
     end: 179,
     callee: Node { type: 'Identifier', start: 174, end: 177, name: 'foo' },
     arguments: [] } }
VariableDeclarator
165
179
Node { type: 'Identifier', start: 165, end: 171, name: 'result' }
Identifier
165
171
result
Node {
  type: 'CallExpression',
  start: 174,
  end: 179,
  callee: Node { type: 'Identifier', start: 174, end: 177, name: 'foo' },
  arguments: [] }
CallExpression
174
179
Node { type: 'Identifier', start: 174, end: 177, name: 'foo' }
Identifier
174
177
foo
[]
var
Node {
  type: 'IfStatement',
  start: 185,
  end: 248,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 189,
     end: 201,
     left: Node { type: 'Identifier', start: 189, end: 195, name: 'result' },
     operator: '!=',
     right: Node { type: 'Literal', start: 199, end: 201, value: 43, raw: '43' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 211,
     end: 248,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 217,
        end: 247,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
185
248
Node {
  type: 'BinaryExpression',
  start: 189,
  end: 201,
  left: Node { type: 'Identifier', start: 189, end: 195, name: 'result' },
  operator: '!=',
  right: Node { type: 'Literal', start: 199, end: 201, value: 43, raw: '43' } }
BinaryExpression
189
201
Node { type: 'Identifier', start: 189, end: 195, name: 'result' }
Identifier
189
195
result
!=
Node { type: 'Literal', start: 199, end: 201, value: 43, raw: '43' }
Literal
199
201
43
43
Node {
  type: 'ThrowStatement',
  start: 211,
  end: 248,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 217,
     end: 247,
     left: 
      Node {
        type: 'Literal',
        start: 217,
        end: 238,
        value: 'Error: bad result: ',
        raw: '"Error: bad result: "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 241, end: 247, name: 'result' } } }
ThrowStatement
211
248
Node {
  type: 'BinaryExpression',
  start: 217,
  end: 247,
  left: 
   Node {
     type: 'Literal',
     start: 217,
     end: 238,
     value: 'Error: bad result: ',
     raw: '"Error: bad result: "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 241, end: 247, name: 'result' } }
BinaryExpression
217
247
Node {
  type: 'Literal',
  start: 217,
  end: 238,
  value: 'Error: bad result: ',
  raw: '"Error: bad result: "' }
Literal
217
238
Error: bad result: 
"Error: bad result: "
+
Node { type: 'Identifier', start: 241, end: 247, name: 'result' }
Identifier
241
247
result
null
[+] Exception: fiat-double-to-int52-then-exit-not-int52.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 220,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 58,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 60,
       end: 74,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 76,
       end: 219,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
220
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 58,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 15, end: 58, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 60,
    end: 74,
    expression: 
     Node {
       type: 'CallExpression',
       start: 60,
       end: 73,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 76,
    end: 219,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 81,
       end: 90,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 92,
       end: 103,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 105,
       end: 108,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 110, end: 219, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 58,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 15, end: 58, body: [ [Node] ] } }
FunctionDeclaration
0
58
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[]
Node {
  type: 'BlockStatement',
  start: 15,
  end: 58,
  body: 
   [ Node { type: 'ReturnStatement', start: 21, end: 56, argument: [Node] } ] }
BlockStatement
15
58
[ Node {
    type: 'ReturnStatement',
    start: 21,
    end: 56,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 28,
       end: 55,
       left: [Node],
       operator: '+',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 21,
  end: 56,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 28,
     end: 55,
     left: 
      Node {
        type: 'CallExpression',
        start: 28,
        end: 51,
        callee: [Node],
        arguments: [Array] },
     operator: '+',
     right: Node { type: 'Literal', start: 54, end: 55, value: 1, raw: '1' } } }
ReturnStatement
21
56
Node {
  type: 'BinaryExpression',
  start: 28,
  end: 55,
  left: 
   Node {
     type: 'CallExpression',
     start: 28,
     end: 51,
     callee: Node { type: 'Identifier', start: 28, end: 37, name: 'fiatInt52' },
     arguments: [ [Node] ] },
  operator: '+',
  right: Node { type: 'Literal', start: 54, end: 55, value: 1, raw: '1' } }
BinaryExpression
28
55
Node {
  type: 'CallExpression',
  start: 28,
  end: 51,
  callee: Node { type: 'Identifier', start: 28, end: 37, name: 'fiatInt52' },
  arguments: 
   [ Node {
       type: 'CallExpression',
       start: 38,
       end: 50,
       callee: [Node],
       arguments: [Array] } ] }
CallExpression
28
51
Node { type: 'Identifier', start: 28, end: 37, name: 'fiatInt52' }
Identifier
28
37
fiatInt52
[ Node {
    type: 'CallExpression',
    start: 38,
    end: 50,
    callee: 
     Node {
       type: 'MemberExpression',
       start: 38,
       end: 47,
       object: [Node],
       property: [Node],
       computed: false },
    arguments: [ [Node] ] } ]
Node {
  type: 'CallExpression',
  start: 38,
  end: 50,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 38,
     end: 47,
     object: Node { type: 'Identifier', start: 38, end: 42, name: 'Math' },
     property: Node { type: 'Identifier', start: 43, end: 47, name: 'sqrt' },
     computed: false },
  arguments: 
   [ Node { type: 'Literal', start: 48, end: 49, value: 2, raw: '2' } ] }
CallExpression
38
50
Node {
  type: 'MemberExpression',
  start: 38,
  end: 47,
  object: Node { type: 'Identifier', start: 38, end: 42, name: 'Math' },
  property: Node { type: 'Identifier', start: 43, end: 47, name: 'sqrt' },
  computed: false }
MemberExpression
38
47
Node { type: 'Identifier', start: 38, end: 42, name: 'Math' }
Identifier
38
42
Math
Node { type: 'Identifier', start: 43, end: 47, name: 'sqrt' }
Identifier
43
47
sqrt
false
[ Node { type: 'Literal', start: 48, end: 49, value: 2, raw: '2' } ]
Node { type: 'Literal', start: 48, end: 49, value: 2, raw: '2' }
Literal
48
49
2
2
+
Node { type: 'Literal', start: 54, end: 55, value: 1, raw: '1' }
Literal
54
55
1
1
Node {
  type: 'ExpressionStatement',
  start: 60,
  end: 74,
  expression: 
   Node {
     type: 'CallExpression',
     start: 60,
     end: 73,
     callee: Node { type: 'Identifier', start: 60, end: 68, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
60
74
Node {
  type: 'CallExpression',
  start: 60,
  end: 73,
  callee: Node { type: 'Identifier', start: 60, end: 68, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 69, end: 72, name: 'foo' } ] }
CallExpression
60
73
Node { type: 'Identifier', start: 60, end: 68, name: 'noInline' }
Identifier
60
68
noInline
[ Node { type: 'Identifier', start: 69, end: 72, name: 'foo' } ]
Node { type: 'Identifier', start: 69, end: 72, name: 'foo' }
Identifier
69
72
foo
Node {
  type: 'ForStatement',
  start: 76,
  end: 219,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 81,
     end: 90,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 92,
     end: 103,
     left: Node { type: 'Identifier', start: 92, end: 93, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 96,
        end: 103,
        value: 1000000,
        raw: '1000000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 105,
     end: 108,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 107, end: 108, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 110,
     end: 219,
     body: [ [Node], [Node] ] } }
ForStatement
76
219
Node {
  type: 'VariableDeclaration',
  start: 81,
  end: 90,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 85,
       end: 90,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
81
90
[ Node {
    type: 'VariableDeclarator',
    start: 85,
    end: 90,
    id: Node { type: 'Identifier', start: 85, end: 86, name: 'i' },
    init: Node { type: 'Literal', start: 89, end: 90, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 85,
  end: 90,
  id: Node { type: 'Identifier', start: 85, end: 86, name: 'i' },
  init: Node { type: 'Literal', start: 89, end: 90, value: 0, raw: '0' } }
VariableDeclarator
85
90
Node { type: 'Identifier', start: 85, end: 86, name: 'i' }
Identifier
85
86
i
Node { type: 'Literal', start: 89, end: 90, value: 0, raw: '0' }
Literal
89
90
0
0
var
Node {
  type: 'BinaryExpression',
  start: 92,
  end: 103,
  left: Node { type: 'Identifier', start: 92, end: 93, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 96,
     end: 103,
     value: 1000000,
     raw: '1000000' } }
BinaryExpression
92
103
Node { type: 'Identifier', start: 92, end: 93, name: 'i' }
Identifier
92
93
i
<
Node {
  type: 'Literal',
  start: 96,
  end: 103,
  value: 1000000,
  raw: '1000000' }
Literal
96
103
1000000
1000000
Node {
  type: 'UpdateExpression',
  start: 105,
  end: 108,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 107, end: 108, name: 'i' } }
UpdateExpression
105
108
++
true
Node { type: 'Identifier', start: 107, end: 108, name: 'i' }
Identifier
107
108
i
Node {
  type: 'BlockStatement',
  start: 110,
  end: 219,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 116,
       end: 135,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 140,
       end: 217,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
110
219
[ Node {
    type: 'VariableDeclaration',
    start: 116,
    end: 135,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 140,
    end: 217,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 144,
       end: 170,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 180, end: 217, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 116,
  end: 135,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 120,
       end: 134,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
116
135
[ Node {
    type: 'VariableDeclarator',
    start: 120,
    end: 134,
    id: Node { type: 'Identifier', start: 120, end: 126, name: 'result' },
    init: 
     Node {
       type: 'CallExpression',
       start: 129,
       end: 134,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'VariableDeclarator',
  start: 120,
  end: 134,
  id: Node { type: 'Identifier', start: 120, end: 126, name: 'result' },
  init: 
   Node {
     type: 'CallExpression',
     start: 129,
     end: 134,
     callee: Node { type: 'Identifier', start: 129, end: 132, name: 'foo' },
     arguments: [] } }
VariableDeclarator
120
134
Node { type: 'Identifier', start: 120, end: 126, name: 'result' }
Identifier
120
126
result
Node {
  type: 'CallExpression',
  start: 129,
  end: 134,
  callee: Node { type: 'Identifier', start: 129, end: 132, name: 'foo' },
  arguments: [] }
CallExpression
129
134
Node { type: 'Identifier', start: 129, end: 132, name: 'foo' }
Identifier
129
132
foo
[]
var
Node {
  type: 'IfStatement',
  start: 140,
  end: 217,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 144,
     end: 170,
     left: Node { type: 'Identifier', start: 144, end: 150, name: 'result' },
     operator: '!=',
     right: 
      Node {
        type: 'BinaryExpression',
        start: 154,
        end: 170,
        left: [Node],
        operator: '+',
        right: [Node] } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 180,
     end: 217,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 186,
        end: 216,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
140
217
Node {
  type: 'BinaryExpression',
  start: 144,
  end: 170,
  left: Node { type: 'Identifier', start: 144, end: 150, name: 'result' },
  operator: '!=',
  right: 
   Node {
     type: 'BinaryExpression',
     start: 154,
     end: 170,
     left: 
      Node {
        type: 'CallExpression',
        start: 154,
        end: 166,
        callee: [Node],
        arguments: [Array] },
     operator: '+',
     right: Node { type: 'Literal', start: 169, end: 170, value: 1, raw: '1' } } }
BinaryExpression
144
170
Node { type: 'Identifier', start: 144, end: 150, name: 'result' }
Identifier
144
150
result
!=
Node {
  type: 'BinaryExpression',
  start: 154,
  end: 170,
  left: 
   Node {
     type: 'CallExpression',
     start: 154,
     end: 166,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 154,
        end: 163,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [ [Node] ] },
  operator: '+',
  right: Node { type: 'Literal', start: 169, end: 170, value: 1, raw: '1' } }
BinaryExpression
154
170
Node {
  type: 'CallExpression',
  start: 154,
  end: 166,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 154,
     end: 163,
     object: Node { type: 'Identifier', start: 154, end: 158, name: 'Math' },
     property: Node { type: 'Identifier', start: 159, end: 163, name: 'sqrt' },
     computed: false },
  arguments: 
   [ Node { type: 'Literal', start: 164, end: 165, value: 2, raw: '2' } ] }
CallExpression
154
166
Node {
  type: 'MemberExpression',
  start: 154,
  end: 163,
  object: Node { type: 'Identifier', start: 154, end: 158, name: 'Math' },
  property: Node { type: 'Identifier', start: 159, end: 163, name: 'sqrt' },
  computed: false }
MemberExpression
154
163
Node { type: 'Identifier', start: 154, end: 158, name: 'Math' }
Identifier
154
158
Math
Node { type: 'Identifier', start: 159, end: 163, name: 'sqrt' }
Identifier
159
163
sqrt
false
[ Node { type: 'Literal', start: 164, end: 165, value: 2, raw: '2' } ]
Node { type: 'Literal', start: 164, end: 165, value: 2, raw: '2' }
Literal
164
165
2
2
+
Node { type: 'Literal', start: 169, end: 170, value: 1, raw: '1' }
Literal
169
170
1
1
Node {
  type: 'ThrowStatement',
  start: 180,
  end: 217,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 186,
     end: 216,
     left: 
      Node {
        type: 'Literal',
        start: 186,
        end: 207,
        value: 'Error: bad result: ',
        raw: '"Error: bad result: "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 210, end: 216, name: 'result' } } }
ThrowStatement
180
217
Node {
  type: 'BinaryExpression',
  start: 186,
  end: 216,
  left: 
   Node {
     type: 'Literal',
     start: 186,
     end: 207,
     value: 'Error: bad result: ',
     raw: '"Error: bad result: "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 210, end: 216, name: 'result' } }
BinaryExpression
186
216
Node {
  type: 'Literal',
  start: 186,
  end: 207,
  value: 'Error: bad result: ',
  raw: '"Error: bad result: "' }
Literal
186
207
Error: bad result: 
"Error: bad result: "
+
Node { type: 'Identifier', start: 210, end: 216, name: 'result' }
Identifier
210
216
result
null
[+] Exception: fiat-double-to-int52-then-fail-to-fold.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 213,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 61,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 63,
       end: 77,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 79,
       end: 212,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
213
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 61,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 15, end: 61, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 63,
    end: 77,
    expression: 
     Node {
       type: 'CallExpression',
       start: 63,
       end: 76,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 79,
    end: 212,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 84,
       end: 93,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 95,
       end: 106,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 108,
       end: 111,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 113, end: 212, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 61,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 15, end: 61, body: [ [Node] ] } }
FunctionDeclaration
0
61
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[]
Node {
  type: 'BlockStatement',
  start: 15,
  end: 61,
  body: 
   [ Node { type: 'ReturnStatement', start: 21, end: 59, argument: [Node] } ] }
BlockStatement
15
61
[ Node {
    type: 'ReturnStatement',
    start: 21,
    end: 59,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 28,
       end: 58,
       left: [Node],
       operator: '+',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 21,
  end: 59,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 28,
     end: 58,
     left: 
      Node {
        type: 'CallExpression',
        start: 28,
        end: 54,
        callee: [Node],
        arguments: [Array] },
     operator: '+',
     right: Node { type: 'Literal', start: 57, end: 58, value: 1, raw: '1' } } }
ReturnStatement
21
59
Node {
  type: 'BinaryExpression',
  start: 28,
  end: 58,
  left: 
   Node {
     type: 'CallExpression',
     start: 28,
     end: 54,
     callee: Node { type: 'Identifier', start: 28, end: 37, name: 'fiatInt52' },
     arguments: [ [Node] ] },
  operator: '+',
  right: Node { type: 'Literal', start: 57, end: 58, value: 1, raw: '1' } }
BinaryExpression
28
58
Node {
  type: 'CallExpression',
  start: 28,
  end: 54,
  callee: Node { type: 'Identifier', start: 28, end: 37, name: 'fiatInt52' },
  arguments: 
   [ Node {
       type: 'CallExpression',
       start: 38,
       end: 53,
       callee: [Node],
       arguments: [Array] } ] }
CallExpression
28
54
Node { type: 'Identifier', start: 28, end: 37, name: 'fiatInt52' }
Identifier
28
37
fiatInt52
[ Node {
    type: 'CallExpression',
    start: 38,
    end: 53,
    callee: 
     Node {
       type: 'MemberExpression',
       start: 38,
       end: 49,
       object: [Node],
       property: [Node],
       computed: false },
    arguments: [ [Node] ] } ]
Node {
  type: 'CallExpression',
  start: 38,
  end: 53,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 38,
     end: 49,
     object: Node { type: 'Identifier', start: 38, end: 42, name: 'Math' },
     property: Node { type: 'Identifier', start: 43, end: 49, name: 'fround' },
     computed: false },
  arguments: 
   [ Node { type: 'Literal', start: 50, end: 52, value: 42, raw: '42' } ] }
CallExpression
38
53
Node {
  type: 'MemberExpression',
  start: 38,
  end: 49,
  object: Node { type: 'Identifier', start: 38, end: 42, name: 'Math' },
  property: Node { type: 'Identifier', start: 43, end: 49, name: 'fround' },
  computed: false }
MemberExpression
38
49
Node { type: 'Identifier', start: 38, end: 42, name: 'Math' }
Identifier
38
42
Math
Node { type: 'Identifier', start: 43, end: 49, name: 'fround' }
Identifier
43
49
fround
false
[ Node { type: 'Literal', start: 50, end: 52, value: 42, raw: '42' } ]
Node { type: 'Literal', start: 50, end: 52, value: 42, raw: '42' }
Literal
50
52
42
42
+
Node { type: 'Literal', start: 57, end: 58, value: 1, raw: '1' }
Literal
57
58
1
1
Node {
  type: 'ExpressionStatement',
  start: 63,
  end: 77,
  expression: 
   Node {
     type: 'CallExpression',
     start: 63,
     end: 76,
     callee: Node { type: 'Identifier', start: 63, end: 71, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
63
77
Node {
  type: 'CallExpression',
  start: 63,
  end: 76,
  callee: Node { type: 'Identifier', start: 63, end: 71, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 72, end: 75, name: 'foo' } ] }
CallExpression
63
76
Node { type: 'Identifier', start: 63, end: 71, name: 'noInline' }
Identifier
63
71
noInline
[ Node { type: 'Identifier', start: 72, end: 75, name: 'foo' } ]
Node { type: 'Identifier', start: 72, end: 75, name: 'foo' }
Identifier
72
75
foo
Node {
  type: 'ForStatement',
  start: 79,
  end: 212,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 84,
     end: 93,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 95,
     end: 106,
     left: Node { type: 'Identifier', start: 95, end: 96, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 99,
        end: 106,
        value: 1000000,
        raw: '1000000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 108,
     end: 111,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 110, end: 111, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 113,
     end: 212,
     body: [ [Node], [Node] ] } }
ForStatement
79
212
Node {
  type: 'VariableDeclaration',
  start: 84,
  end: 93,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 88,
       end: 93,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
84
93
[ Node {
    type: 'VariableDeclarator',
    start: 88,
    end: 93,
    id: Node { type: 'Identifier', start: 88, end: 89, name: 'i' },
    init: Node { type: 'Literal', start: 92, end: 93, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 88,
  end: 93,
  id: Node { type: 'Identifier', start: 88, end: 89, name: 'i' },
  init: Node { type: 'Literal', start: 92, end: 93, value: 0, raw: '0' } }
VariableDeclarator
88
93
Node { type: 'Identifier', start: 88, end: 89, name: 'i' }
Identifier
88
89
i
Node { type: 'Literal', start: 92, end: 93, value: 0, raw: '0' }
Literal
92
93
0
0
var
Node {
  type: 'BinaryExpression',
  start: 95,
  end: 106,
  left: Node { type: 'Identifier', start: 95, end: 96, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 99,
     end: 106,
     value: 1000000,
     raw: '1000000' } }
BinaryExpression
95
106
Node { type: 'Identifier', start: 95, end: 96, name: 'i' }
Identifier
95
96
i
<
Node {
  type: 'Literal',
  start: 99,
  end: 106,
  value: 1000000,
  raw: '1000000' }
Literal
99
106
1000000
1000000
Node {
  type: 'UpdateExpression',
  start: 108,
  end: 111,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 110, end: 111, name: 'i' } }
UpdateExpression
108
111
++
true
Node { type: 'Identifier', start: 110, end: 111, name: 'i' }
Identifier
110
111
i
Node {
  type: 'BlockStatement',
  start: 113,
  end: 212,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 119,
       end: 138,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 143,
       end: 210,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
113
212
[ Node {
    type: 'VariableDeclaration',
    start: 119,
    end: 138,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 143,
    end: 210,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 147,
       end: 163,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 173, end: 210, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 119,
  end: 138,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 123,
       end: 137,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
119
138
[ Node {
    type: 'VariableDeclarator',
    start: 123,
    end: 137,
    id: Node { type: 'Identifier', start: 123, end: 129, name: 'result' },
    init: 
     Node {
       type: 'CallExpression',
       start: 132,
       end: 137,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'VariableDeclarator',
  start: 123,
  end: 137,
  id: Node { type: 'Identifier', start: 123, end: 129, name: 'result' },
  init: 
   Node {
     type: 'CallExpression',
     start: 132,
     end: 137,
     callee: Node { type: 'Identifier', start: 132, end: 135, name: 'foo' },
     arguments: [] } }
VariableDeclarator
123
137
Node { type: 'Identifier', start: 123, end: 129, name: 'result' }
Identifier
123
129
result
Node {
  type: 'CallExpression',
  start: 132,
  end: 137,
  callee: Node { type: 'Identifier', start: 132, end: 135, name: 'foo' },
  arguments: [] }
CallExpression
132
137
Node { type: 'Identifier', start: 132, end: 135, name: 'foo' }
Identifier
132
135
foo
[]
var
Node {
  type: 'IfStatement',
  start: 143,
  end: 210,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 147,
     end: 163,
     left: Node { type: 'Identifier', start: 147, end: 153, name: 'result' },
     operator: '!=',
     right: 
      Node {
        type: 'BinaryExpression',
        start: 157,
        end: 163,
        left: [Node],
        operator: '+',
        right: [Node] } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 173,
     end: 210,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 179,
        end: 209,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
143
210
Node {
  type: 'BinaryExpression',
  start: 147,
  end: 163,
  left: Node { type: 'Identifier', start: 147, end: 153, name: 'result' },
  operator: '!=',
  right: 
   Node {
     type: 'BinaryExpression',
     start: 157,
     end: 163,
     left: Node { type: 'Literal', start: 157, end: 159, value: 42, raw: '42' },
     operator: '+',
     right: Node { type: 'Literal', start: 162, end: 163, value: 1, raw: '1' } } }
BinaryExpression
147
163
Node { type: 'Identifier', start: 147, end: 153, name: 'result' }
Identifier
147
153
result
!=
Node {
  type: 'BinaryExpression',
  start: 157,
  end: 163,
  left: Node { type: 'Literal', start: 157, end: 159, value: 42, raw: '42' },
  operator: '+',
  right: Node { type: 'Literal', start: 162, end: 163, value: 1, raw: '1' } }
BinaryExpression
157
163
Node { type: 'Literal', start: 157, end: 159, value: 42, raw: '42' }
Literal
157
159
42
42
+
Node { type: 'Literal', start: 162, end: 163, value: 1, raw: '1' }
Literal
162
163
1
1
Node {
  type: 'ThrowStatement',
  start: 173,
  end: 210,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 179,
     end: 209,
     left: 
      Node {
        type: 'Literal',
        start: 179,
        end: 200,
        value: 'Error: bad result: ',
        raw: '"Error: bad result: "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 203, end: 209, name: 'result' } } }
ThrowStatement
173
210
Node {
  type: 'BinaryExpression',
  start: 179,
  end: 209,
  left: 
   Node {
     type: 'Literal',
     start: 179,
     end: 200,
     value: 'Error: bad result: ',
     raw: '"Error: bad result: "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 203, end: 209, name: 'result' } }
BinaryExpression
179
209
Node {
  type: 'Literal',
  start: 179,
  end: 200,
  value: 'Error: bad result: ',
  raw: '"Error: bad result: "' }
Literal
179
200
Error: bad result: 
"Error: bad result: "
+
Node { type: 'Identifier', start: 203, end: 209, name: 'result' }
Identifier
203
209
result
null
[+] Exception: fiat-double-to-int52-then-fold.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 251,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 0,
       end: 32,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 33,
       end: 47,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 49,
       end: 103,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 105,
       end: 119,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 121,
       end: 250,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
251
[ Node {
    type: 'VariableDeclaration',
    start: 0,
    end: 32,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 33,
    end: 47,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 33,
       end: 46,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'FunctionDeclaration',
    start: 49,
    end: 103,
    id: Node { type: 'Identifier', start: 58, end: 61, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 64, end: 103, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 105,
    end: 119,
    expression: 
     Node {
       type: 'CallExpression',
       start: 105,
       end: 118,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 121,
    end: 250,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 126,
       end: 135,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 137,
       end: 148,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 150,
       end: 153,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 155, end: 250, body: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 0,
  end: 32,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 4,
       end: 31,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
0
32
[ Node {
    type: 'VariableDeclarator',
    start: 4,
    end: 31,
    id: Node { type: 'Identifier', start: 4, end: 9, name: 'array' },
    init: 
     Node {
       type: 'NewExpression',
       start: 12,
       end: 31,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 4,
  end: 31,
  id: Node { type: 'Identifier', start: 4, end: 9, name: 'array' },
  init: 
   Node {
     type: 'NewExpression',
     start: 12,
     end: 31,
     callee: Node { type: 'Identifier', start: 16, end: 28, name: 'Float64Array' },
     arguments: [ [Node] ] } }
VariableDeclarator
4
31
Node { type: 'Identifier', start: 4, end: 9, name: 'array' }
Identifier
4
9
array
Node {
  type: 'NewExpression',
  start: 12,
  end: 31,
  callee: Node { type: 'Identifier', start: 16, end: 28, name: 'Float64Array' },
  arguments: 
   [ Node { type: 'Literal', start: 29, end: 30, value: 1, raw: '1' } ] }
NewExpression
12
31
Node { type: 'Identifier', start: 16, end: 28, name: 'Float64Array' }
Identifier
16
28
Float64Array
[ Node { type: 'Literal', start: 29, end: 30, value: 1, raw: '1' } ]
Node { type: 'Literal', start: 29, end: 30, value: 1, raw: '1' }
Literal
29
30
1
1
var
Node {
  type: 'ExpressionStatement',
  start: 33,
  end: 47,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 33,
     end: 46,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 33,
        end: 41,
        object: [Node],
        property: [Node],
        computed: true },
     right: Node { type: 'Literal', start: 44, end: 46, value: 42, raw: '42' } } }
ExpressionStatement
33
47
Node {
  type: 'AssignmentExpression',
  start: 33,
  end: 46,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 33,
     end: 41,
     object: Node { type: 'Identifier', start: 33, end: 38, name: 'array' },
     property: Node { type: 'Literal', start: 39, end: 40, value: 0, raw: '0' },
     computed: true },
  right: Node { type: 'Literal', start: 44, end: 46, value: 42, raw: '42' } }
AssignmentExpression
33
46
=
Node {
  type: 'MemberExpression',
  start: 33,
  end: 41,
  object: Node { type: 'Identifier', start: 33, end: 38, name: 'array' },
  property: Node { type: 'Literal', start: 39, end: 40, value: 0, raw: '0' },
  computed: true }
MemberExpression
33
41
Node { type: 'Identifier', start: 33, end: 38, name: 'array' }
Identifier
33
38
array
Node { type: 'Literal', start: 39, end: 40, value: 0, raw: '0' }
Literal
39
40
0
0
true
Node { type: 'Literal', start: 44, end: 46, value: 42, raw: '42' }
Literal
44
46
42
42
Node {
  type: 'FunctionDeclaration',
  start: 49,
  end: 103,
  id: Node { type: 'Identifier', start: 58, end: 61, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 64, end: 103, body: [ [Node] ] } }
FunctionDeclaration
49
103
Node { type: 'Identifier', start: 58, end: 61, name: 'foo' }
Identifier
58
61
foo
false
false
false
[]
Node {
  type: 'BlockStatement',
  start: 64,
  end: 103,
  body: 
   [ Node { type: 'ReturnStatement', start: 70, end: 101, argument: [Node] } ] }
BlockStatement
64
103
[ Node {
    type: 'ReturnStatement',
    start: 70,
    end: 101,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 77,
       end: 100,
       left: [Node],
       operator: '+',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 70,
  end: 101,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 77,
     end: 100,
     left: 
      Node {
        type: 'CallExpression',
        start: 77,
        end: 96,
        callee: [Node],
        arguments: [Array] },
     operator: '+',
     right: Node { type: 'Literal', start: 99, end: 100, value: 1, raw: '1' } } }
ReturnStatement
70
101
Node {
  type: 'BinaryExpression',
  start: 77,
  end: 100,
  left: 
   Node {
     type: 'CallExpression',
     start: 77,
     end: 96,
     callee: Node { type: 'Identifier', start: 77, end: 86, name: 'fiatInt52' },
     arguments: [ [Node] ] },
  operator: '+',
  right: Node { type: 'Literal', start: 99, end: 100, value: 1, raw: '1' } }
BinaryExpression
77
100
Node {
  type: 'CallExpression',
  start: 77,
  end: 96,
  callee: Node { type: 'Identifier', start: 77, end: 86, name: 'fiatInt52' },
  arguments: 
   [ Node {
       type: 'MemberExpression',
       start: 87,
       end: 95,
       object: [Node],
       property: [Node],
       computed: true } ] }
CallExpression
77
96
Node { type: 'Identifier', start: 77, end: 86, name: 'fiatInt52' }
Identifier
77
86
fiatInt52
[ Node {
    type: 'MemberExpression',
    start: 87,
    end: 95,
    object: Node { type: 'Identifier', start: 87, end: 92, name: 'array' },
    property: Node { type: 'Literal', start: 93, end: 94, value: 0, raw: '0' },
    computed: true } ]
Node {
  type: 'MemberExpression',
  start: 87,
  end: 95,
  object: Node { type: 'Identifier', start: 87, end: 92, name: 'array' },
  property: Node { type: 'Literal', start: 93, end: 94, value: 0, raw: '0' },
  computed: true }
MemberExpression
87
95
Node { type: 'Identifier', start: 87, end: 92, name: 'array' }
Identifier
87
92
array
Node { type: 'Literal', start: 93, end: 94, value: 0, raw: '0' }
Literal
93
94
0
0
true
+
Node { type: 'Literal', start: 99, end: 100, value: 1, raw: '1' }
Literal
99
100
1
1
Node {
  type: 'ExpressionStatement',
  start: 105,
  end: 119,
  expression: 
   Node {
     type: 'CallExpression',
     start: 105,
     end: 118,
     callee: Node { type: 'Identifier', start: 105, end: 113, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
105
119
Node {
  type: 'CallExpression',
  start: 105,
  end: 118,
  callee: Node { type: 'Identifier', start: 105, end: 113, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 114, end: 117, name: 'foo' } ] }
CallExpression
105
118
Node { type: 'Identifier', start: 105, end: 113, name: 'noInline' }
Identifier
105
113
noInline
[ Node { type: 'Identifier', start: 114, end: 117, name: 'foo' } ]
Node { type: 'Identifier', start: 114, end: 117, name: 'foo' }
Identifier
114
117
foo
Node {
  type: 'ForStatement',
  start: 121,
  end: 250,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 126,
     end: 135,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 137,
     end: 148,
     left: Node { type: 'Identifier', start: 137, end: 138, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 141,
        end: 148,
        value: 1000000,
        raw: '1000000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 150,
     end: 153,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 152, end: 153, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 155,
     end: 250,
     body: [ [Node], [Node] ] } }
ForStatement
121
250
Node {
  type: 'VariableDeclaration',
  start: 126,
  end: 135,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 130,
       end: 135,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
126
135
[ Node {
    type: 'VariableDeclarator',
    start: 130,
    end: 135,
    id: Node { type: 'Identifier', start: 130, end: 131, name: 'i' },
    init: Node { type: 'Literal', start: 134, end: 135, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 130,
  end: 135,
  id: Node { type: 'Identifier', start: 130, end: 131, name: 'i' },
  init: Node { type: 'Literal', start: 134, end: 135, value: 0, raw: '0' } }
VariableDeclarator
130
135
Node { type: 'Identifier', start: 130, end: 131, name: 'i' }
Identifier
130
131
i
Node { type: 'Literal', start: 134, end: 135, value: 0, raw: '0' }
Literal
134
135
0
0
var
Node {
  type: 'BinaryExpression',
  start: 137,
  end: 148,
  left: Node { type: 'Identifier', start: 137, end: 138, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 141,
     end: 148,
     value: 1000000,
     raw: '1000000' } }
BinaryExpression
137
148
Node { type: 'Identifier', start: 137, end: 138, name: 'i' }
Identifier
137
138
i
<
Node {
  type: 'Literal',
  start: 141,
  end: 148,
  value: 1000000,
  raw: '1000000' }
Literal
141
148
1000000
1000000
Node {
  type: 'UpdateExpression',
  start: 150,
  end: 153,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 152, end: 153, name: 'i' } }
UpdateExpression
150
153
++
true
Node { type: 'Identifier', start: 152, end: 153, name: 'i' }
Identifier
152
153
i
Node {
  type: 'BlockStatement',
  start: 155,
  end: 250,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 161,
       end: 180,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 185,
       end: 248,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
155
250
[ Node {
    type: 'VariableDeclaration',
    start: 161,
    end: 180,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 185,
    end: 248,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 189,
       end: 201,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 211, end: 248, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 161,
  end: 180,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 165,
       end: 179,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
161
180
[ Node {
    type: 'VariableDeclarator',
    start: 165,
    end: 179,
    id: Node { type: 'Identifier', start: 165, end: 171, name: 'result' },
    init: 
     Node {
       type: 'CallExpression',
       start: 174,
       end: 179,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'VariableDeclarator',
  start: 165,
  end: 179,
  id: Node { type: 'Identifier', start: 165, end: 171, name: 'result' },
  init: 
   Node {
     type: 'CallExpression',
     start: 174,
     end: 179,
     callee: Node { type: 'Identifier', start: 174, end: 177, name: 'foo' },
     arguments: [] } }
VariableDeclarator
165
179
Node { type: 'Identifier', start: 165, end: 171, name: 'result' }
Identifier
165
171
result
Node {
  type: 'CallExpression',
  start: 174,
  end: 179,
  callee: Node { type: 'Identifier', start: 174, end: 177, name: 'foo' },
  arguments: [] }
CallExpression
174
179
Node { type: 'Identifier', start: 174, end: 177, name: 'foo' }
Identifier
174
177
foo
[]
var
Node {
  type: 'IfStatement',
  start: 185,
  end: 248,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 189,
     end: 201,
     left: Node { type: 'Identifier', start: 189, end: 195, name: 'result' },
     operator: '!=',
     right: Node { type: 'Literal', start: 199, end: 201, value: 43, raw: '43' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 211,
     end: 248,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 217,
        end: 247,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
185
248
Node {
  type: 'BinaryExpression',
  start: 189,
  end: 201,
  left: Node { type: 'Identifier', start: 189, end: 195, name: 'result' },
  operator: '!=',
  right: Node { type: 'Literal', start: 199, end: 201, value: 43, raw: '43' } }
BinaryExpression
189
201
Node { type: 'Identifier', start: 189, end: 195, name: 'result' }
Identifier
189
195
result
!=
Node { type: 'Literal', start: 199, end: 201, value: 43, raw: '43' }
Literal
199
201
43
43
Node {
  type: 'ThrowStatement',
  start: 211,
  end: 248,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 217,
     end: 247,
     left: 
      Node {
        type: 'Literal',
        start: 217,
        end: 238,
        value: 'Error: bad result: ',
        raw: '"Error: bad result: "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 241, end: 247, name: 'result' } } }
ThrowStatement
211
248
Node {
  type: 'BinaryExpression',
  start: 217,
  end: 247,
  left: 
   Node {
     type: 'Literal',
     start: 217,
     end: 238,
     value: 'Error: bad result: ',
     raw: '"Error: bad result: "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 241, end: 247, name: 'result' } }
BinaryExpression
217
247
Node {
  type: 'Literal',
  start: 217,
  end: 238,
  value: 'Error: bad result: ',
  raw: '"Error: bad result: "' }
Literal
217
238
Error: bad result: 
"Error: bad result: "
+
Node { type: 'Identifier', start: 241, end: 247, name: 'result' }
Identifier
241
247
result
null
[+] Exception: fiat-double-to-int52.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 216,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 50,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 52,
       end: 66,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 68,
       end: 83,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ForStatement',
       start: 85,
       end: 215,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
216
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 50,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 16, end: 50, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 52,
    end: 66,
    expression: 
     Node {
       type: 'CallExpression',
       start: 52,
       end: 65,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 68,
    end: 83,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ForStatement',
    start: 85,
    end: 215,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 90,
       end: 99,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 101,
       end: 112,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 114,
       end: 117,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 119, end: 215, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 50,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 13, end: 14, name: 'o' } ],
  body: Node { type: 'BlockStatement', start: 16, end: 50, body: [ [Node] ] } }
FunctionDeclaration
0
50
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'o' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'o' }
Identifier
13
14
o
Node {
  type: 'BlockStatement',
  start: 16,
  end: 50,
  body: 
   [ Node { type: 'ReturnStatement', start: 22, end: 48, argument: [Node] } ] }
BlockStatement
16
50
[ Node {
    type: 'ReturnStatement',
    start: 22,
    end: 48,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 29,
       end: 47,
       left: [Node],
       operator: '+',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 22,
  end: 48,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 29,
     end: 47,
     left: 
      Node {
        type: 'CallExpression',
        start: 29,
        end: 43,
        callee: [Node],
        arguments: [Array] },
     operator: '+',
     right: Node { type: 'Literal', start: 46, end: 47, value: 1, raw: '1' } } }
ReturnStatement
22
48
Node {
  type: 'BinaryExpression',
  start: 29,
  end: 47,
  left: 
   Node {
     type: 'CallExpression',
     start: 29,
     end: 43,
     callee: Node { type: 'Identifier', start: 29, end: 38, name: 'fiatInt52' },
     arguments: [ [Node] ] },
  operator: '+',
  right: Node { type: 'Literal', start: 46, end: 47, value: 1, raw: '1' } }
BinaryExpression
29
47
Node {
  type: 'CallExpression',
  start: 29,
  end: 43,
  callee: Node { type: 'Identifier', start: 29, end: 38, name: 'fiatInt52' },
  arguments: 
   [ Node {
       type: 'MemberExpression',
       start: 39,
       end: 42,
       object: [Node],
       property: [Node],
       computed: false } ] }
CallExpression
29
43
Node { type: 'Identifier', start: 29, end: 38, name: 'fiatInt52' }
Identifier
29
38
fiatInt52
[ Node {
    type: 'MemberExpression',
    start: 39,
    end: 42,
    object: Node { type: 'Identifier', start: 39, end: 40, name: 'o' },
    property: Node { type: 'Identifier', start: 41, end: 42, name: 'f' },
    computed: false } ]
Node {
  type: 'MemberExpression',
  start: 39,
  end: 42,
  object: Node { type: 'Identifier', start: 39, end: 40, name: 'o' },
  property: Node { type: 'Identifier', start: 41, end: 42, name: 'f' },
  computed: false }
MemberExpression
39
42
Node { type: 'Identifier', start: 39, end: 40, name: 'o' }
Identifier
39
40
o
Node { type: 'Identifier', start: 41, end: 42, name: 'f' }
Identifier
41
42
f
false
+
Node { type: 'Literal', start: 46, end: 47, value: 1, raw: '1' }
Literal
46
47
1
1
Node {
  type: 'ExpressionStatement',
  start: 52,
  end: 66,
  expression: 
   Node {
     type: 'CallExpression',
     start: 52,
     end: 65,
     callee: Node { type: 'Identifier', start: 52, end: 60, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
52
66
Node {
  type: 'CallExpression',
  start: 52,
  end: 65,
  callee: Node { type: 'Identifier', start: 52, end: 60, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 61, end: 64, name: 'foo' } ] }
CallExpression
52
65
Node { type: 'Identifier', start: 52, end: 60, name: 'noInline' }
Identifier
52
60
noInline
[ Node { type: 'Identifier', start: 61, end: 64, name: 'foo' } ]
Node { type: 'Identifier', start: 61, end: 64, name: 'foo' }
Identifier
61
64
foo
Node {
  type: 'VariableDeclaration',
  start: 68,
  end: 83,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 72,
       end: 82,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
68
83
[ Node {
    type: 'VariableDeclarator',
    start: 72,
    end: 82,
    id: Node { type: 'Identifier', start: 72, end: 73, name: 'o' },
    init: 
     Node {
       type: 'ObjectExpression',
       start: 76,
       end: 82,
       properties: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 72,
  end: 82,
  id: Node { type: 'Identifier', start: 72, end: 73, name: 'o' },
  init: 
   Node {
     type: 'ObjectExpression',
     start: 76,
     end: 82,
     properties: [ [Node] ] } }
VariableDeclarator
72
82
Node { type: 'Identifier', start: 72, end: 73, name: 'o' }
Identifier
72
73
o
Node {
  type: 'ObjectExpression',
  start: 76,
  end: 82,
  properties: 
   [ Node {
       type: 'Property',
       start: 77,
       end: 81,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
76
82
[ Node {
    type: 'Property',
    start: 77,
    end: 81,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 77, end: 78, name: 'f' },
    value: Node { type: 'Literal', start: 79, end: 81, value: 42, raw: '42' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 77,
  end: 81,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 77, end: 78, name: 'f' },
  value: Node { type: 'Literal', start: 79, end: 81, value: 42, raw: '42' },
  kind: 'init' }
Property
77
81
false
false
false
Node { type: 'Identifier', start: 77, end: 78, name: 'f' }
Identifier
77
78
f
Node { type: 'Literal', start: 79, end: 81, value: 42, raw: '42' }
Literal
79
81
42
42
init
var
Node {
  type: 'ForStatement',
  start: 85,
  end: 215,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 90,
     end: 99,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 101,
     end: 112,
     left: Node { type: 'Identifier', start: 101, end: 102, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 105,
        end: 112,
        value: 1000000,
        raw: '1000000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 114,
     end: 117,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 116, end: 117, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 119,
     end: 215,
     body: [ [Node], [Node] ] } }
ForStatement
85
215
Node {
  type: 'VariableDeclaration',
  start: 90,
  end: 99,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 94,
       end: 99,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
90
99
[ Node {
    type: 'VariableDeclarator',
    start: 94,
    end: 99,
    id: Node { type: 'Identifier', start: 94, end: 95, name: 'i' },
    init: Node { type: 'Literal', start: 98, end: 99, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 94,
  end: 99,
  id: Node { type: 'Identifier', start: 94, end: 95, name: 'i' },
  init: Node { type: 'Literal', start: 98, end: 99, value: 0, raw: '0' } }
VariableDeclarator
94
99
Node { type: 'Identifier', start: 94, end: 95, name: 'i' }
Identifier
94
95
i
Node { type: 'Literal', start: 98, end: 99, value: 0, raw: '0' }
Literal
98
99
0
0
var
Node {
  type: 'BinaryExpression',
  start: 101,
  end: 112,
  left: Node { type: 'Identifier', start: 101, end: 102, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 105,
     end: 112,
     value: 1000000,
     raw: '1000000' } }
BinaryExpression
101
112
Node { type: 'Identifier', start: 101, end: 102, name: 'i' }
Identifier
101
102
i
<
Node {
  type: 'Literal',
  start: 105,
  end: 112,
  value: 1000000,
  raw: '1000000' }
Literal
105
112
1000000
1000000
Node {
  type: 'UpdateExpression',
  start: 114,
  end: 117,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 116, end: 117, name: 'i' } }
UpdateExpression
114
117
++
true
Node { type: 'Identifier', start: 116, end: 117, name: 'i' }
Identifier
116
117
i
Node {
  type: 'BlockStatement',
  start: 119,
  end: 215,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 125,
       end: 145,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 150,
       end: 213,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
119
215
[ Node {
    type: 'VariableDeclaration',
    start: 125,
    end: 145,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 150,
    end: 213,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 154,
       end: 166,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 176, end: 213, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 125,
  end: 145,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 129,
       end: 144,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
125
145
[ Node {
    type: 'VariableDeclarator',
    start: 129,
    end: 144,
    id: Node { type: 'Identifier', start: 129, end: 135, name: 'result' },
    init: 
     Node {
       type: 'CallExpression',
       start: 138,
       end: 144,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 129,
  end: 144,
  id: Node { type: 'Identifier', start: 129, end: 135, name: 'result' },
  init: 
   Node {
     type: 'CallExpression',
     start: 138,
     end: 144,
     callee: Node { type: 'Identifier', start: 138, end: 141, name: 'foo' },
     arguments: [ [Node] ] } }
VariableDeclarator
129
144
Node { type: 'Identifier', start: 129, end: 135, name: 'result' }
Identifier
129
135
result
Node {
  type: 'CallExpression',
  start: 138,
  end: 144,
  callee: Node { type: 'Identifier', start: 138, end: 141, name: 'foo' },
  arguments: 
   [ Node { type: 'Identifier', start: 142, end: 143, name: 'o' } ] }
CallExpression
138
144
Node { type: 'Identifier', start: 138, end: 141, name: 'foo' }
Identifier
138
141
foo
[ Node { type: 'Identifier', start: 142, end: 143, name: 'o' } ]
Node { type: 'Identifier', start: 142, end: 143, name: 'o' }
Identifier
142
143
o
var
Node {
  type: 'IfStatement',
  start: 150,
  end: 213,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 154,
     end: 166,
     left: Node { type: 'Identifier', start: 154, end: 160, name: 'result' },
     operator: '!=',
     right: Node { type: 'Literal', start: 164, end: 166, value: 43, raw: '43' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 176,
     end: 213,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 182,
        end: 212,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
150
213
Node {
  type: 'BinaryExpression',
  start: 154,
  end: 166,
  left: Node { type: 'Identifier', start: 154, end: 160, name: 'result' },
  operator: '!=',
  right: Node { type: 'Literal', start: 164, end: 166, value: 43, raw: '43' } }
BinaryExpression
154
166
Node { type: 'Identifier', start: 154, end: 160, name: 'result' }
Identifier
154
160
result
!=
Node { type: 'Literal', start: 164, end: 166, value: 43, raw: '43' }
Literal
164
166
43
43
Node {
  type: 'ThrowStatement',
  start: 176,
  end: 213,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 182,
     end: 212,
     left: 
      Node {
        type: 'Literal',
        start: 182,
        end: 203,
        value: 'Error: bad result: ',
        raw: '"Error: bad result: "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 206, end: 212, name: 'result' } } }
ThrowStatement
176
213
Node {
  type: 'BinaryExpression',
  start: 182,
  end: 212,
  left: 
   Node {
     type: 'Literal',
     start: 182,
     end: 203,
     value: 'Error: bad result: ',
     raw: '"Error: bad result: "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 206, end: 212, name: 'result' } }
BinaryExpression
182
212
Node {
  type: 'Literal',
  start: 182,
  end: 203,
  value: 'Error: bad result: ',
  raw: '"Error: bad result: "' }
Literal
182
203
Error: bad result: 
"Error: bad result: "
+
Node { type: 'Identifier', start: 206, end: 212, name: 'result' }
Identifier
206
212
result
null
[+] Exception: fiat-int32-to-int52.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 304,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 0,
       end: 32,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 33,
       end: 47,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 49,
       end: 100,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 102,
       end: 141,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 143,
       end: 157,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 158,
       end: 172,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 174,
       end: 303,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
304
[ Node {
    type: 'VariableDeclaration',
    start: 0,
    end: 32,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 33,
    end: 47,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 33,
       end: 46,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'FunctionDeclaration',
    start: 49,
    end: 100,
    id: Node { type: 'Identifier', start: 58, end: 61, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 64, end: 100, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 102,
    end: 141,
    id: Node { type: 'Identifier', start: 111, end: 114, name: 'bar' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 117, end: 141, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 143,
    end: 157,
    expression: 
     Node {
       type: 'CallExpression',
       start: 143,
       end: 156,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 158,
    end: 172,
    expression: 
     Node {
       type: 'CallExpression',
       start: 158,
       end: 171,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 174,
    end: 303,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 179,
       end: 188,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 190,
       end: 201,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 203,
       end: 206,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 208, end: 303, body: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 0,
  end: 32,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 4,
       end: 31,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
0
32
[ Node {
    type: 'VariableDeclarator',
    start: 4,
    end: 31,
    id: Node { type: 'Identifier', start: 4, end: 9, name: 'array' },
    init: 
     Node {
       type: 'NewExpression',
       start: 12,
       end: 31,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 4,
  end: 31,
  id: Node { type: 'Identifier', start: 4, end: 9, name: 'array' },
  init: 
   Node {
     type: 'NewExpression',
     start: 12,
     end: 31,
     callee: Node { type: 'Identifier', start: 16, end: 28, name: 'Float64Array' },
     arguments: [ [Node] ] } }
VariableDeclarator
4
31
Node { type: 'Identifier', start: 4, end: 9, name: 'array' }
Identifier
4
9
array
Node {
  type: 'NewExpression',
  start: 12,
  end: 31,
  callee: Node { type: 'Identifier', start: 16, end: 28, name: 'Float64Array' },
  arguments: 
   [ Node { type: 'Literal', start: 29, end: 30, value: 1, raw: '1' } ] }
NewExpression
12
31
Node { type: 'Identifier', start: 16, end: 28, name: 'Float64Array' }
Identifier
16
28
Float64Array
[ Node { type: 'Literal', start: 29, end: 30, value: 1, raw: '1' } ]
Node { type: 'Literal', start: 29, end: 30, value: 1, raw: '1' }
Literal
29
30
1
1
var
Node {
  type: 'ExpressionStatement',
  start: 33,
  end: 47,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 33,
     end: 46,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 33,
        end: 41,
        object: [Node],
        property: [Node],
        computed: true },
     right: Node { type: 'Literal', start: 44, end: 46, value: 42, raw: '42' } } }
ExpressionStatement
33
47
Node {
  type: 'AssignmentExpression',
  start: 33,
  end: 46,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 33,
     end: 41,
     object: Node { type: 'Identifier', start: 33, end: 38, name: 'array' },
     property: Node { type: 'Literal', start: 39, end: 40, value: 0, raw: '0' },
     computed: true },
  right: Node { type: 'Literal', start: 44, end: 46, value: 42, raw: '42' } }
AssignmentExpression
33
46
=
Node {
  type: 'MemberExpression',
  start: 33,
  end: 41,
  object: Node { type: 'Identifier', start: 33, end: 38, name: 'array' },
  property: Node { type: 'Literal', start: 39, end: 40, value: 0, raw: '0' },
  computed: true }
MemberExpression
33
41
Node { type: 'Identifier', start: 33, end: 38, name: 'array' }
Identifier
33
38
array
Node { type: 'Literal', start: 39, end: 40, value: 0, raw: '0' }
Literal
39
40
0
0
true
Node { type: 'Literal', start: 44, end: 46, value: 42, raw: '42' }
Literal
44
46
42
42
Node {
  type: 'FunctionDeclaration',
  start: 49,
  end: 100,
  id: Node { type: 'Identifier', start: 58, end: 61, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 64, end: 100, body: [ [Node] ] } }
FunctionDeclaration
49
100
Node { type: 'Identifier', start: 58, end: 61, name: 'foo' }
Identifier
58
61
foo
false
false
false
[]
Node {
  type: 'BlockStatement',
  start: 64,
  end: 100,
  body: 
   [ Node { type: 'ReturnStatement', start: 70, end: 98, argument: [Node] } ] }
BlockStatement
64
100
[ Node {
    type: 'ReturnStatement',
    start: 70,
    end: 98,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 77,
       end: 97,
       left: [Node],
       operator: '+',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 70,
  end: 98,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 77,
     end: 97,
     left: 
      Node {
        type: 'CallExpression',
        start: 77,
        end: 93,
        callee: [Node],
        arguments: [Array] },
     operator: '+',
     right: Node { type: 'Literal', start: 96, end: 97, value: 1, raw: '1' } } }
ReturnStatement
70
98
Node {
  type: 'BinaryExpression',
  start: 77,
  end: 97,
  left: 
   Node {
     type: 'CallExpression',
     start: 77,
     end: 93,
     callee: Node { type: 'Identifier', start: 77, end: 86, name: 'fiatInt52' },
     arguments: [ [Node] ] },
  operator: '+',
  right: Node { type: 'Literal', start: 96, end: 97, value: 1, raw: '1' } }
BinaryExpression
77
97
Node {
  type: 'CallExpression',
  start: 77,
  end: 93,
  callee: Node { type: 'Identifier', start: 77, end: 86, name: 'fiatInt52' },
  arguments: 
   [ Node {
       type: 'CallExpression',
       start: 87,
       end: 92,
       callee: [Node],
       arguments: [] } ] }
CallExpression
77
93
Node { type: 'Identifier', start: 77, end: 86, name: 'fiatInt52' }
Identifier
77
86
fiatInt52
[ Node {
    type: 'CallExpression',
    start: 87,
    end: 92,
    callee: Node { type: 'Identifier', start: 87, end: 90, name: 'bar' },
    arguments: [] } ]
Node {
  type: 'CallExpression',
  start: 87,
  end: 92,
  callee: Node { type: 'Identifier', start: 87, end: 90, name: 'bar' },
  arguments: [] }
CallExpression
87
92
Node { type: 'Identifier', start: 87, end: 90, name: 'bar' }
Identifier
87
90
bar
[]
+
Node { type: 'Literal', start: 96, end: 97, value: 1, raw: '1' }
Literal
96
97
1
1
Node {
  type: 'FunctionDeclaration',
  start: 102,
  end: 141,
  id: Node { type: 'Identifier', start: 111, end: 114, name: 'bar' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 117, end: 141, body: [ [Node] ] } }
FunctionDeclaration
102
141
Node { type: 'Identifier', start: 111, end: 114, name: 'bar' }
Identifier
111
114
bar
false
false
false
[]
Node {
  type: 'BlockStatement',
  start: 117,
  end: 141,
  body: 
   [ Node {
       type: 'ReturnStatement',
       start: 123,
       end: 139,
       argument: [Node] } ] }
BlockStatement
117
141
[ Node {
    type: 'ReturnStatement',
    start: 123,
    end: 139,
    argument: 
     Node {
       type: 'MemberExpression',
       start: 130,
       end: 138,
       object: [Node],
       property: [Node],
       computed: true } } ]
Node {
  type: 'ReturnStatement',
  start: 123,
  end: 139,
  argument: 
   Node {
     type: 'MemberExpression',
     start: 130,
     end: 138,
     object: Node { type: 'Identifier', start: 130, end: 135, name: 'array' },
     property: Node { type: 'Literal', start: 136, end: 137, value: 0, raw: '0' },
     computed: true } }
ReturnStatement
123
139
Node {
  type: 'MemberExpression',
  start: 130,
  end: 138,
  object: Node { type: 'Identifier', start: 130, end: 135, name: 'array' },
  property: Node { type: 'Literal', start: 136, end: 137, value: 0, raw: '0' },
  computed: true }
MemberExpression
130
138
Node { type: 'Identifier', start: 130, end: 135, name: 'array' }
Identifier
130
135
array
Node { type: 'Literal', start: 136, end: 137, value: 0, raw: '0' }
Literal
136
137
0
0
true
Node {
  type: 'ExpressionStatement',
  start: 143,
  end: 157,
  expression: 
   Node {
     type: 'CallExpression',
     start: 143,
     end: 156,
     callee: Node { type: 'Identifier', start: 143, end: 151, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
143
157
Node {
  type: 'CallExpression',
  start: 143,
  end: 156,
  callee: Node { type: 'Identifier', start: 143, end: 151, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 152, end: 155, name: 'foo' } ] }
CallExpression
143
156
Node { type: 'Identifier', start: 143, end: 151, name: 'noInline' }
Identifier
143
151
noInline
[ Node { type: 'Identifier', start: 152, end: 155, name: 'foo' } ]
Node { type: 'Identifier', start: 152, end: 155, name: 'foo' }
Identifier
152
155
foo
Node {
  type: 'ExpressionStatement',
  start: 158,
  end: 172,
  expression: 
   Node {
     type: 'CallExpression',
     start: 158,
     end: 171,
     callee: Node { type: 'Identifier', start: 158, end: 166, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
158
172
Node {
  type: 'CallExpression',
  start: 158,
  end: 171,
  callee: Node { type: 'Identifier', start: 158, end: 166, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 167, end: 170, name: 'bar' } ] }
CallExpression
158
171
Node { type: 'Identifier', start: 158, end: 166, name: 'noInline' }
Identifier
158
166
noInline
[ Node { type: 'Identifier', start: 167, end: 170, name: 'bar' } ]
Node { type: 'Identifier', start: 167, end: 170, name: 'bar' }
Identifier
167
170
bar
Node {
  type: 'ForStatement',
  start: 174,
  end: 303,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 179,
     end: 188,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 190,
     end: 201,
     left: Node { type: 'Identifier', start: 190, end: 191, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 194,
        end: 201,
        value: 1000000,
        raw: '1000000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 203,
     end: 206,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 205, end: 206, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 208,
     end: 303,
     body: [ [Node], [Node] ] } }
ForStatement
174
303
Node {
  type: 'VariableDeclaration',
  start: 179,
  end: 188,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 183,
       end: 188,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
179
188
[ Node {
    type: 'VariableDeclarator',
    start: 183,
    end: 188,
    id: Node { type: 'Identifier', start: 183, end: 184, name: 'i' },
    init: Node { type: 'Literal', start: 187, end: 188, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 183,
  end: 188,
  id: Node { type: 'Identifier', start: 183, end: 184, name: 'i' },
  init: Node { type: 'Literal', start: 187, end: 188, value: 0, raw: '0' } }
VariableDeclarator
183
188
Node { type: 'Identifier', start: 183, end: 184, name: 'i' }
Identifier
183
184
i
Node { type: 'Literal', start: 187, end: 188, value: 0, raw: '0' }
Literal
187
188
0
0
var
Node {
  type: 'BinaryExpression',
  start: 190,
  end: 201,
  left: Node { type: 'Identifier', start: 190, end: 191, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 194,
     end: 201,
     value: 1000000,
     raw: '1000000' } }
BinaryExpression
190
201
Node { type: 'Identifier', start: 190, end: 191, name: 'i' }
Identifier
190
191
i
<
Node {
  type: 'Literal',
  start: 194,
  end: 201,
  value: 1000000,
  raw: '1000000' }
Literal
194
201
1000000
1000000
Node {
  type: 'UpdateExpression',
  start: 203,
  end: 206,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 205, end: 206, name: 'i' } }
UpdateExpression
203
206
++
true
Node { type: 'Identifier', start: 205, end: 206, name: 'i' }
Identifier
205
206
i
Node {
  type: 'BlockStatement',
  start: 208,
  end: 303,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 214,
       end: 233,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 238,
       end: 301,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
208
303
[ Node {
    type: 'VariableDeclaration',
    start: 214,
    end: 233,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 238,
    end: 301,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 242,
       end: 254,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 264, end: 301, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 214,
  end: 233,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 218,
       end: 232,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
214
233
[ Node {
    type: 'VariableDeclarator',
    start: 218,
    end: 232,
    id: Node { type: 'Identifier', start: 218, end: 224, name: 'result' },
    init: 
     Node {
       type: 'CallExpression',
       start: 227,
       end: 232,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'VariableDeclarator',
  start: 218,
  end: 232,
  id: Node { type: 'Identifier', start: 218, end: 224, name: 'result' },
  init: 
   Node {
     type: 'CallExpression',
     start: 227,
     end: 232,
     callee: Node { type: 'Identifier', start: 227, end: 230, name: 'foo' },
     arguments: [] } }
VariableDeclarator
218
232
Node { type: 'Identifier', start: 218, end: 224, name: 'result' }
Identifier
218
224
result
Node {
  type: 'CallExpression',
  start: 227,
  end: 232,
  callee: Node { type: 'Identifier', start: 227, end: 230, name: 'foo' },
  arguments: [] }
CallExpression
227
232
Node { type: 'Identifier', start: 227, end: 230, name: 'foo' }
Identifier
227
230
foo
[]
var
Node {
  type: 'IfStatement',
  start: 238,
  end: 301,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 242,
     end: 254,
     left: Node { type: 'Identifier', start: 242, end: 248, name: 'result' },
     operator: '!=',
     right: Node { type: 'Literal', start: 252, end: 254, value: 43, raw: '43' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 264,
     end: 301,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 270,
        end: 300,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
238
301
Node {
  type: 'BinaryExpression',
  start: 242,
  end: 254,
  left: Node { type: 'Identifier', start: 242, end: 248, name: 'result' },
  operator: '!=',
  right: Node { type: 'Literal', start: 252, end: 254, value: 43, raw: '43' } }
BinaryExpression
242
254
Node { type: 'Identifier', start: 242, end: 248, name: 'result' }
Identifier
242
248
result
!=
Node { type: 'Literal', start: 252, end: 254, value: 43, raw: '43' }
Literal
252
254
43
43
Node {
  type: 'ThrowStatement',
  start: 264,
  end: 301,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 270,
     end: 300,
     left: 
      Node {
        type: 'Literal',
        start: 270,
        end: 291,
        value: 'Error: bad result: ',
        raw: '"Error: bad result: "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 294, end: 300, name: 'result' } } }
ThrowStatement
264
301
Node {
  type: 'BinaryExpression',
  start: 270,
  end: 300,
  left: 
   Node {
     type: 'Literal',
     start: 270,
     end: 291,
     value: 'Error: bad result: ',
     raw: '"Error: bad result: "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 294, end: 300, name: 'result' } }
BinaryExpression
270
300
Node {
  type: 'Literal',
  start: 270,
  end: 291,
  value: 'Error: bad result: ',
  raw: '"Error: bad result: "' }
Literal
270
291
Error: bad result: 
"Error: bad result: "
+
Node { type: 'Identifier', start: 294, end: 300, name: 'result' }
Identifier
294
300
result
null
[+] Exception: fiat-value-to-int52-double-path.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 459,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 64,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 66,
       end: 85,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 86,
       end: 170,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 172,
       end: 186,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 187,
       end: 201,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 203,
       end: 349,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 351,
       end: 365,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 366,
       end: 385,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 386,
       end: 458,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
459
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 64,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 15, end: 64, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 66,
    end: 85,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 86,
    end: 170,
    id: Node { type: 'Identifier', start: 95, end: 98, name: 'bar' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 102, end: 170, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 172,
    end: 186,
    expression: 
     Node {
       type: 'CallExpression',
       start: 172,
       end: 185,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 187,
    end: 201,
    expression: 
     Node {
       type: 'CallExpression',
       start: 187,
       end: 200,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 203,
    end: 349,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 208,
       end: 217,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 219,
       end: 230,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 232,
       end: 235,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 237, end: 349, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 351,
    end: 365,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 351,
       end: 364,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'VariableDeclaration',
    start: 366,
    end: 385,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 386,
    end: 458,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 390,
       end: 408,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 414, end: 458, argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 64,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 15, end: 64, body: [ [Node] ] } }
FunctionDeclaration
0
64
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[]
Node {
  type: 'BlockStatement',
  start: 15,
  end: 64,
  body: 
   [ Node { type: 'ReturnStatement', start: 21, end: 62, argument: [Node] } ] }
BlockStatement
15
64
[ Node {
    type: 'ReturnStatement',
    start: 21,
    end: 62,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 28,
       end: 61,
       left: [Node],
       operator: '+',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 21,
  end: 62,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 28,
     end: 61,
     left: 
      Node {
        type: 'CallExpression',
        start: 28,
        end: 57,
        callee: [Node],
        arguments: [Array] },
     operator: '+',
     right: Node { type: 'Literal', start: 60, end: 61, value: 1, raw: '1' } } }
ReturnStatement
21
62
Node {
  type: 'BinaryExpression',
  start: 28,
  end: 61,
  left: 
   Node {
     type: 'CallExpression',
     start: 28,
     end: 57,
     callee: Node { type: 'Identifier', start: 28, end: 37, name: 'fiatInt52' },
     arguments: [ [Node] ] },
  operator: '+',
  right: Node { type: 'Literal', start: 60, end: 61, value: 1, raw: '1' } }
BinaryExpression
28
61
Node {
  type: 'CallExpression',
  start: 28,
  end: 57,
  callee: Node { type: 'Identifier', start: 28, end: 37, name: 'fiatInt52' },
  arguments: 
   [ Node {
       type: 'CallExpression',
       start: 38,
       end: 56,
       callee: [Node],
       arguments: [Array] } ] }
CallExpression
28
57
Node { type: 'Identifier', start: 28, end: 37, name: 'fiatInt52' }
Identifier
28
37
fiatInt52
[ Node {
    type: 'CallExpression',
    start: 38,
    end: 56,
    callee: Node { type: 'Identifier', start: 38, end: 41, name: 'bar' },
    arguments: [ [Node] ] } ]
Node {
  type: 'CallExpression',
  start: 38,
  end: 56,
  callee: Node { type: 'Identifier', start: 38, end: 41, name: 'bar' },
  arguments: 
   [ Node {
       type: 'CallExpression',
       start: 42,
       end: 55,
       callee: [Node],
       arguments: [] } ] }
CallExpression
38
56
Node { type: 'Identifier', start: 38, end: 41, name: 'bar' }
Identifier
38
41
bar
[ Node {
    type: 'CallExpression',
    start: 42,
    end: 55,
    callee: 
     Node {
       type: 'MemberExpression',
       start: 42,
       end: 53,
       object: [Node],
       property: [Node],
       computed: false },
    arguments: [] } ]
Node {
  type: 'CallExpression',
  start: 42,
  end: 55,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 42,
     end: 53,
     object: Node { type: 'Identifier', start: 42, end: 45, name: '$vm' },
     property: Node { type: 'Identifier', start: 46, end: 53, name: 'dfgTrue' },
     computed: false },
  arguments: [] }
CallExpression
42
55
Node {
  type: 'MemberExpression',
  start: 42,
  end: 53,
  object: Node { type: 'Identifier', start: 42, end: 45, name: '$vm' },
  property: Node { type: 'Identifier', start: 46, end: 53, name: 'dfgTrue' },
  computed: false }
MemberExpression
42
53
Node { type: 'Identifier', start: 42, end: 45, name: '$vm' }
Identifier
42
45
$vm
Node { type: 'Identifier', start: 46, end: 53, name: 'dfgTrue' }
Identifier
46
53
dfgTrue
false
[]
+
Node { type: 'Literal', start: 60, end: 61, value: 1, raw: '1' }
Literal
60
61
1
1
Node {
  type: 'VariableDeclaration',
  start: 66,
  end: 85,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 70,
       end: 84,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
66
85
[ Node {
    type: 'VariableDeclarator',
    start: 70,
    end: 84,
    id: Node { type: 'Identifier', start: 70, end: 76, name: 'thingy' },
    init: Node { type: 'Literal', start: 79, end: 84, value: false, raw: 'false' } } ]
Node {
  type: 'VariableDeclarator',
  start: 70,
  end: 84,
  id: Node { type: 'Identifier', start: 70, end: 76, name: 'thingy' },
  init: Node { type: 'Literal', start: 79, end: 84, value: false, raw: 'false' } }
VariableDeclarator
70
84
Node { type: 'Identifier', start: 70, end: 76, name: 'thingy' }
Identifier
70
76
thingy
Node { type: 'Literal', start: 79, end: 84, value: false, raw: 'false' }
Literal
79
84
false
false
var
Node {
  type: 'FunctionDeclaration',
  start: 86,
  end: 170,
  id: Node { type: 'Identifier', start: 95, end: 98, name: 'bar' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 99, end: 100, name: 'p' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 102,
     end: 170,
     body: [ [Node], [Node] ] } }
FunctionDeclaration
86
170
Node { type: 'Identifier', start: 95, end: 98, name: 'bar' }
Identifier
95
98
bar
false
false
false
[ Node { type: 'Identifier', start: 99, end: 100, name: 'p' } ]
Node { type: 'Identifier', start: 99, end: 100, name: 'p' }
Identifier
99
100
p
Node {
  type: 'BlockStatement',
  start: 102,
  end: 170,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 108,
       end: 143,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ReturnStatement',
       start: 148,
       end: 168,
       argument: [Node] } ] }
BlockStatement
102
170
[ Node {
    type: 'IfStatement',
    start: 108,
    end: 143,
    test: Node { type: 'Identifier', start: 112, end: 118, name: 'thingy' },
    consequent: 
     Node {
       type: 'ReturnStatement',
       start: 128,
       end: 143,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'ReturnStatement',
    start: 148,
    end: 168,
    argument: 
     Node {
       type: 'ConditionalExpression',
       start: 155,
       end: 167,
       test: [Node],
       consequent: [Node],
       alternate: [Node] } } ]
Node {
  type: 'IfStatement',
  start: 108,
  end: 143,
  test: Node { type: 'Identifier', start: 112, end: 118, name: 'thingy' },
  consequent: 
   Node {
     type: 'ReturnStatement',
     start: 128,
     end: 143,
     argument: 
      Node {
        type: 'Literal',
        start: 135,
        end: 142,
        value: 'hello',
        raw: '"hello"' } },
  alternate: null }
IfStatement
108
143
Node { type: 'Identifier', start: 112, end: 118, name: 'thingy' }
Identifier
112
118
thingy
Node {
  type: 'ReturnStatement',
  start: 128,
  end: 143,
  argument: 
   Node {
     type: 'Literal',
     start: 135,
     end: 142,
     value: 'hello',
     raw: '"hello"' } }
ReturnStatement
128
143
Node {
  type: 'Literal',
  start: 135,
  end: 142,
  value: 'hello',
  raw: '"hello"' }
Literal
135
142
hello
"hello"
null
[+] Exception: fiat-value-to-int52-then-exit-not-double.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 450,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 64,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 66,
       end: 85,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 86,
       end: 166,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 168,
       end: 182,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 183,
       end: 197,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 199,
       end: 345,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 347,
       end: 361,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 362,
       end: 381,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 382,
       end: 449,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
450
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 64,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 15, end: 64, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 66,
    end: 85,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 86,
    end: 166,
    id: Node { type: 'Identifier', start: 95, end: 98, name: 'bar' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 102, end: 166, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 168,
    end: 182,
    expression: 
     Node {
       type: 'CallExpression',
       start: 168,
       end: 181,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 183,
    end: 197,
    expression: 
     Node {
       type: 'CallExpression',
       start: 183,
       end: 196,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 199,
    end: 345,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 204,
       end: 213,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 215,
       end: 226,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 228,
       end: 231,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 233, end: 345, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 347,
    end: 361,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 347,
       end: 360,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'VariableDeclaration',
    start: 362,
    end: 381,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 382,
    end: 449,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 386,
       end: 399,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 405, end: 449, argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 64,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 15, end: 64, body: [ [Node] ] } }
FunctionDeclaration
0
64
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[]
Node {
  type: 'BlockStatement',
  start: 15,
  end: 64,
  body: 
   [ Node { type: 'ReturnStatement', start: 21, end: 62, argument: [Node] } ] }
BlockStatement
15
64
[ Node {
    type: 'ReturnStatement',
    start: 21,
    end: 62,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 28,
       end: 61,
       left: [Node],
       operator: '+',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 21,
  end: 62,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 28,
     end: 61,
     left: 
      Node {
        type: 'CallExpression',
        start: 28,
        end: 57,
        callee: [Node],
        arguments: [Array] },
     operator: '+',
     right: Node { type: 'Literal', start: 60, end: 61, value: 1, raw: '1' } } }
ReturnStatement
21
62
Node {
  type: 'BinaryExpression',
  start: 28,
  end: 61,
  left: 
   Node {
     type: 'CallExpression',
     start: 28,
     end: 57,
     callee: Node { type: 'Identifier', start: 28, end: 37, name: 'fiatInt52' },
     arguments: [ [Node] ] },
  operator: '+',
  right: Node { type: 'Literal', start: 60, end: 61, value: 1, raw: '1' } }
BinaryExpression
28
61
Node {
  type: 'CallExpression',
  start: 28,
  end: 57,
  callee: Node { type: 'Identifier', start: 28, end: 37, name: 'fiatInt52' },
  arguments: 
   [ Node {
       type: 'CallExpression',
       start: 38,
       end: 56,
       callee: [Node],
       arguments: [Array] } ] }
CallExpression
28
57
Node { type: 'Identifier', start: 28, end: 37, name: 'fiatInt52' }
Identifier
28
37
fiatInt52
[ Node {
    type: 'CallExpression',
    start: 38,
    end: 56,
    callee: Node { type: 'Identifier', start: 38, end: 41, name: 'bar' },
    arguments: [ [Node] ] } ]
Node {
  type: 'CallExpression',
  start: 38,
  end: 56,
  callee: Node { type: 'Identifier', start: 38, end: 41, name: 'bar' },
  arguments: 
   [ Node {
       type: 'CallExpression',
       start: 42,
       end: 55,
       callee: [Node],
       arguments: [] } ] }
CallExpression
38
56
Node { type: 'Identifier', start: 38, end: 41, name: 'bar' }
Identifier
38
41
bar
[ Node {
    type: 'CallExpression',
    start: 42,
    end: 55,
    callee: 
     Node {
       type: 'MemberExpression',
       start: 42,
       end: 53,
       object: [Node],
       property: [Node],
       computed: false },
    arguments: [] } ]
Node {
  type: 'CallExpression',
  start: 42,
  end: 55,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 42,
     end: 53,
     object: Node { type: 'Identifier', start: 42, end: 45, name: '$vm' },
     property: Node { type: 'Identifier', start: 46, end: 53, name: 'dfgTrue' },
     computed: false },
  arguments: [] }
CallExpression
42
55
Node {
  type: 'MemberExpression',
  start: 42,
  end: 53,
  object: Node { type: 'Identifier', start: 42, end: 45, name: '$vm' },
  property: Node { type: 'Identifier', start: 46, end: 53, name: 'dfgTrue' },
  computed: false }
MemberExpression
42
53
Node { type: 'Identifier', start: 42, end: 45, name: '$vm' }
Identifier
42
45
$vm
Node { type: 'Identifier', start: 46, end: 53, name: 'dfgTrue' }
Identifier
46
53
dfgTrue
false
[]
+
Node { type: 'Literal', start: 60, end: 61, value: 1, raw: '1' }
Literal
60
61
1
1
Node {
  type: 'VariableDeclaration',
  start: 66,
  end: 85,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 70,
       end: 84,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
66
85
[ Node {
    type: 'VariableDeclarator',
    start: 70,
    end: 84,
    id: Node { type: 'Identifier', start: 70, end: 76, name: 'thingy' },
    init: Node { type: 'Literal', start: 79, end: 84, value: false, raw: 'false' } } ]
Node {
  type: 'VariableDeclarator',
  start: 70,
  end: 84,
  id: Node { type: 'Identifier', start: 70, end: 76, name: 'thingy' },
  init: Node { type: 'Literal', start: 79, end: 84, value: false, raw: 'false' } }
VariableDeclarator
70
84
Node { type: 'Identifier', start: 70, end: 76, name: 'thingy' }
Identifier
70
76
thingy
Node { type: 'Literal', start: 79, end: 84, value: false, raw: 'false' }
Literal
79
84
false
false
var
Node {
  type: 'FunctionDeclaration',
  start: 86,
  end: 166,
  id: Node { type: 'Identifier', start: 95, end: 98, name: 'bar' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 99, end: 100, name: 'p' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 102,
     end: 166,
     body: [ [Node], [Node] ] } }
FunctionDeclaration
86
166
Node { type: 'Identifier', start: 95, end: 98, name: 'bar' }
Identifier
95
98
bar
false
false
false
[ Node { type: 'Identifier', start: 99, end: 100, name: 'p' } ]
Node { type: 'Identifier', start: 99, end: 100, name: 'p' }
Identifier
99
100
p
Node {
  type: 'BlockStatement',
  start: 102,
  end: 166,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 108,
       end: 139,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ReturnStatement',
       start: 144,
       end: 164,
       argument: [Node] } ] }
BlockStatement
102
166
[ Node {
    type: 'IfStatement',
    start: 108,
    end: 139,
    test: Node { type: 'Identifier', start: 112, end: 118, name: 'thingy' },
    consequent: 
     Node {
       type: 'ReturnStatement',
       start: 128,
       end: 139,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'ReturnStatement',
    start: 144,
    end: 164,
    argument: 
     Node {
       type: 'ConditionalExpression',
       start: 151,
       end: 163,
       test: [Node],
       consequent: [Node],
       alternate: [Node] } } ]
Node {
  type: 'IfStatement',
  start: 108,
  end: 139,
  test: Node { type: 'Identifier', start: 112, end: 118, name: 'thingy' },
  consequent: 
   Node {
     type: 'ReturnStatement',
     start: 128,
     end: 139,
     argument: Node { type: 'Literal', start: 135, end: 138, value: 5.5, raw: '5.5' } },
  alternate: null }
IfStatement
108
139
Node { type: 'Identifier', start: 112, end: 118, name: 'thingy' }
Identifier
112
118
thingy
Node {
  type: 'ReturnStatement',
  start: 128,
  end: 139,
  argument: Node { type: 'Literal', start: 135, end: 138, value: 5.5, raw: '5.5' } }
ReturnStatement
128
139
Node { type: 'Literal', start: 135, end: 138, value: 5.5, raw: '5.5' }
Literal
135
138
5.5
5.5
null
[+] Exception: fiat-value-to-int52-then-exit-not-int52.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 235,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 70,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 72,
       end: 86,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 88,
       end: 234,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
235
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 70,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 15, end: 70, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 72,
    end: 86,
    expression: 
     Node {
       type: 'CallExpression',
       start: 72,
       end: 85,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 88,
    end: 234,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 93,
       end: 102,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 104,
       end: 115,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 117,
       end: 120,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 122, end: 234, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 70,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 15, end: 70, body: [ [Node] ] } }
FunctionDeclaration
0
70
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[]
Node {
  type: 'BlockStatement',
  start: 15,
  end: 70,
  body: 
   [ Node { type: 'ReturnStatement', start: 21, end: 68, argument: [Node] } ] }
BlockStatement
15
70
[ Node {
    type: 'ReturnStatement',
    start: 21,
    end: 68,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 28,
       end: 67,
       left: [Node],
       operator: '+',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 21,
  end: 68,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 28,
     end: 67,
     left: 
      Node {
        type: 'CallExpression',
        start: 28,
        end: 63,
        callee: [Node],
        arguments: [Array] },
     operator: '+',
     right: Node { type: 'Literal', start: 66, end: 67, value: 1, raw: '1' } } }
ReturnStatement
21
68
Node {
  type: 'BinaryExpression',
  start: 28,
  end: 67,
  left: 
   Node {
     type: 'CallExpression',
     start: 28,
     end: 63,
     callee: Node { type: 'Identifier', start: 28, end: 37, name: 'fiatInt52' },
     arguments: [ [Node] ] },
  operator: '+',
  right: Node { type: 'Literal', start: 66, end: 67, value: 1, raw: '1' } }
BinaryExpression
28
67
Node {
  type: 'CallExpression',
  start: 28,
  end: 63,
  callee: Node { type: 'Identifier', start: 28, end: 37, name: 'fiatInt52' },
  arguments: 
   [ Node {
       type: 'ConditionalExpression',
       start: 38,
       end: 62,
       test: [Node],
       consequent: [Node],
       alternate: [Node] } ] }
CallExpression
28
63
Node { type: 'Identifier', start: 28, end: 37, name: 'fiatInt52' }
Identifier
28
37
fiatInt52
[ Node {
    type: 'ConditionalExpression',
    start: 38,
    end: 62,
    test: 
     Node {
       type: 'CallExpression',
       start: 38,
       end: 51,
       callee: [Node],
       arguments: [] },
    consequent: Node { type: 'Literal', start: 54, end: 57, value: 5.5, raw: '5.5' },
    alternate: Node { type: 'Literal', start: 60, end: 62, value: 42, raw: '42' } } ]
Node {
  type: 'ConditionalExpression',
  start: 38,
  end: 62,
  test: 
   Node {
     type: 'CallExpression',
     start: 38,
     end: 51,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 38,
        end: 49,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [] },
  consequent: Node { type: 'Literal', start: 54, end: 57, value: 5.5, raw: '5.5' },
  alternate: Node { type: 'Literal', start: 60, end: 62, value: 42, raw: '42' } }
ConditionalExpression
38
62
Node {
  type: 'CallExpression',
  start: 38,
  end: 51,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 38,
     end: 49,
     object: Node { type: 'Identifier', start: 38, end: 41, name: '$vm' },
     property: Node { type: 'Identifier', start: 42, end: 49, name: 'dfgTrue' },
     computed: false },
  arguments: [] }
CallExpression
38
51
Node {
  type: 'MemberExpression',
  start: 38,
  end: 49,
  object: Node { type: 'Identifier', start: 38, end: 41, name: '$vm' },
  property: Node { type: 'Identifier', start: 42, end: 49, name: 'dfgTrue' },
  computed: false }
MemberExpression
38
49
Node { type: 'Identifier', start: 38, end: 41, name: '$vm' }
Identifier
38
41
$vm
Node { type: 'Identifier', start: 42, end: 49, name: 'dfgTrue' }
Identifier
42
49
dfgTrue
false
[]
Node { type: 'Literal', start: 54, end: 57, value: 5.5, raw: '5.5' }
Literal
54
57
5.5
5.5
Node { type: 'Literal', start: 60, end: 62, value: 42, raw: '42' }
Literal
60
62
42
42
+
Node { type: 'Literal', start: 66, end: 67, value: 1, raw: '1' }
Literal
66
67
1
1
Node {
  type: 'ExpressionStatement',
  start: 72,
  end: 86,
  expression: 
   Node {
     type: 'CallExpression',
     start: 72,
     end: 85,
     callee: Node { type: 'Identifier', start: 72, end: 80, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
72
86
Node {
  type: 'CallExpression',
  start: 72,
  end: 85,
  callee: Node { type: 'Identifier', start: 72, end: 80, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 81, end: 84, name: 'foo' } ] }
CallExpression
72
85
Node { type: 'Identifier', start: 72, end: 80, name: 'noInline' }
Identifier
72
80
noInline
[ Node { type: 'Identifier', start: 81, end: 84, name: 'foo' } ]
Node { type: 'Identifier', start: 81, end: 84, name: 'foo' }
Identifier
81
84
foo
Node {
  type: 'ForStatement',
  start: 88,
  end: 234,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 93,
     end: 102,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 104,
     end: 115,
     left: Node { type: 'Identifier', start: 104, end: 105, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 108,
        end: 115,
        value: 1000000,
        raw: '1000000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 117,
     end: 120,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 119, end: 120, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 122,
     end: 234,
     body: [ [Node], [Node] ] } }
ForStatement
88
234
Node {
  type: 'VariableDeclaration',
  start: 93,
  end: 102,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 97,
       end: 102,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
93
102
[ Node {
    type: 'VariableDeclarator',
    start: 97,
    end: 102,
    id: Node { type: 'Identifier', start: 97, end: 98, name: 'i' },
    init: Node { type: 'Literal', start: 101, end: 102, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 97,
  end: 102,
  id: Node { type: 'Identifier', start: 97, end: 98, name: 'i' },
  init: Node { type: 'Literal', start: 101, end: 102, value: 0, raw: '0' } }
VariableDeclarator
97
102
Node { type: 'Identifier', start: 97, end: 98, name: 'i' }
Identifier
97
98
i
Node { type: 'Literal', start: 101, end: 102, value: 0, raw: '0' }
Literal
101
102
0
0
var
Node {
  type: 'BinaryExpression',
  start: 104,
  end: 115,
  left: Node { type: 'Identifier', start: 104, end: 105, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 108,
     end: 115,
     value: 1000000,
     raw: '1000000' } }
BinaryExpression
104
115
Node { type: 'Identifier', start: 104, end: 105, name: 'i' }
Identifier
104
105
i
<
Node {
  type: 'Literal',
  start: 108,
  end: 115,
  value: 1000000,
  raw: '1000000' }
Literal
108
115
1000000
1000000
Node {
  type: 'UpdateExpression',
  start: 117,
  end: 120,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 119, end: 120, name: 'i' } }
UpdateExpression
117
120
++
true
Node { type: 'Identifier', start: 119, end: 120, name: 'i' }
Identifier
119
120
i
Node {
  type: 'BlockStatement',
  start: 122,
  end: 234,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 128,
       end: 147,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 152,
       end: 232,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
122
234
[ Node {
    type: 'VariableDeclaration',
    start: 128,
    end: 147,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 152,
    end: 232,
    test: 
     Node {
       type: 'LogicalExpression',
       start: 156,
       end: 185,
       left: [Node],
       operator: '&&',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 195, end: 232, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 128,
  end: 147,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 132,
       end: 146,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
128
147
[ Node {
    type: 'VariableDeclarator',
    start: 132,
    end: 146,
    id: Node { type: 'Identifier', start: 132, end: 138, name: 'result' },
    init: 
     Node {
       type: 'CallExpression',
       start: 141,
       end: 146,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'VariableDeclarator',
  start: 132,
  end: 146,
  id: Node { type: 'Identifier', start: 132, end: 138, name: 'result' },
  init: 
   Node {
     type: 'CallExpression',
     start: 141,
     end: 146,
     callee: Node { type: 'Identifier', start: 141, end: 144, name: 'foo' },
     arguments: [] } }
VariableDeclarator
132
146
Node { type: 'Identifier', start: 132, end: 138, name: 'result' }
Identifier
132
138
result
Node {
  type: 'CallExpression',
  start: 141,
  end: 146,
  callee: Node { type: 'Identifier', start: 141, end: 144, name: 'foo' },
  arguments: [] }
CallExpression
141
146
Node { type: 'Identifier', start: 141, end: 144, name: 'foo' }
Identifier
141
144
foo
[]
var
Node {
  type: 'IfStatement',
  start: 152,
  end: 232,
  test: 
   Node {
     type: 'LogicalExpression',
     start: 156,
     end: 185,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 156,
        end: 168,
        left: [Node],
        operator: '!=',
        right: [Node] },
     operator: '&&',
     right: 
      Node {
        type: 'BinaryExpression',
        start: 172,
        end: 185,
        left: [Node],
        operator: '!=',
        right: [Node] } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 195,
     end: 232,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 201,
        end: 231,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
152
232
Node {
  type: 'LogicalExpression',
  start: 156,
  end: 185,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 156,
     end: 168,
     left: Node { type: 'Identifier', start: 156, end: 162, name: 'result' },
     operator: '!=',
     right: Node { type: 'Literal', start: 166, end: 168, value: 43, raw: '43' } },
  operator: '&&',
  right: 
   Node {
     type: 'BinaryExpression',
     start: 172,
     end: 185,
     left: Node { type: 'Identifier', start: 172, end: 178, name: 'result' },
     operator: '!=',
     right: Node { type: 'Literal', start: 182, end: 185, value: 6.5, raw: '6.5' } } }
LogicalExpression
156
185
Node {
  type: 'BinaryExpression',
  start: 156,
  end: 168,
  left: Node { type: 'Identifier', start: 156, end: 162, name: 'result' },
  operator: '!=',
  right: Node { type: 'Literal', start: 166, end: 168, value: 43, raw: '43' } }
BinaryExpression
156
168
Node { type: 'Identifier', start: 156, end: 162, name: 'result' }
Identifier
156
162
result
!=
Node { type: 'Literal', start: 166, end: 168, value: 43, raw: '43' }
Literal
166
168
43
43
&&
Node {
  type: 'BinaryExpression',
  start: 172,
  end: 185,
  left: Node { type: 'Identifier', start: 172, end: 178, name: 'result' },
  operator: '!=',
  right: Node { type: 'Literal', start: 182, end: 185, value: 6.5, raw: '6.5' } }
BinaryExpression
172
185
Node { type: 'Identifier', start: 172, end: 178, name: 'result' }
Identifier
172
178
result
!=
Node { type: 'Literal', start: 182, end: 185, value: 6.5, raw: '6.5' }
Literal
182
185
6.5
6.5
Node {
  type: 'ThrowStatement',
  start: 195,
  end: 232,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 201,
     end: 231,
     left: 
      Node {
        type: 'Literal',
        start: 201,
        end: 222,
        value: 'Error: bad result: ',
        raw: '"Error: bad result: "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 225, end: 231, name: 'result' } } }
ThrowStatement
195
232
Node {
  type: 'BinaryExpression',
  start: 201,
  end: 231,
  left: 
   Node {
     type: 'Literal',
     start: 201,
     end: 222,
     value: 'Error: bad result: ',
     raw: '"Error: bad result: "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 225, end: 231, name: 'result' } }
BinaryExpression
201
231
Node {
  type: 'Literal',
  start: 201,
  end: 222,
  value: 'Error: bad result: ',
  raw: '"Error: bad result: "' }
Literal
201
222
Error: bad result: 
"Error: bad result: "
+
Node { type: 'Identifier', start: 225, end: 231, name: 'result' }
Identifier
225
231
result
null
[+] Exception: fiat-value-to-int52-then-fail-to-fold.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 235,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 70,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 72,
       end: 86,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 88,
       end: 234,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
235
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 70,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 15, end: 70, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 72,
    end: 86,
    expression: 
     Node {
       type: 'CallExpression',
       start: 72,
       end: 85,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 88,
    end: 234,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 93,
       end: 102,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 104,
       end: 115,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 117,
       end: 120,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 122, end: 234, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 70,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 15, end: 70, body: [ [Node] ] } }
FunctionDeclaration
0
70
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[]
Node {
  type: 'BlockStatement',
  start: 15,
  end: 70,
  body: 
   [ Node { type: 'ReturnStatement', start: 21, end: 68, argument: [Node] } ] }
BlockStatement
15
70
[ Node {
    type: 'ReturnStatement',
    start: 21,
    end: 68,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 28,
       end: 67,
       left: [Node],
       operator: '+',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 21,
  end: 68,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 28,
     end: 67,
     left: 
      Node {
        type: 'CallExpression',
        start: 28,
        end: 63,
        callee: [Node],
        arguments: [Array] },
     operator: '+',
     right: Node { type: 'Literal', start: 66, end: 67, value: 1, raw: '1' } } }
ReturnStatement
21
68
Node {
  type: 'BinaryExpression',
  start: 28,
  end: 67,
  left: 
   Node {
     type: 'CallExpression',
     start: 28,
     end: 63,
     callee: Node { type: 'Identifier', start: 28, end: 37, name: 'fiatInt52' },
     arguments: [ [Node] ] },
  operator: '+',
  right: Node { type: 'Literal', start: 66, end: 67, value: 1, raw: '1' } }
BinaryExpression
28
67
Node {
  type: 'CallExpression',
  start: 28,
  end: 63,
  callee: Node { type: 'Identifier', start: 28, end: 37, name: 'fiatInt52' },
  arguments: 
   [ Node {
       type: 'ConditionalExpression',
       start: 38,
       end: 62,
       test: [Node],
       consequent: [Node],
       alternate: [Node] } ] }
CallExpression
28
63
Node { type: 'Identifier', start: 28, end: 37, name: 'fiatInt52' }
Identifier
28
37
fiatInt52
[ Node {
    type: 'ConditionalExpression',
    start: 38,
    end: 62,
    test: 
     Node {
       type: 'CallExpression',
       start: 38,
       end: 51,
       callee: [Node],
       arguments: [] },
    consequent: Node { type: 'Literal', start: 54, end: 56, value: 42, raw: '42' },
    alternate: Node { type: 'Literal', start: 59, end: 62, value: 5.5, raw: '5.5' } } ]
Node {
  type: 'ConditionalExpression',
  start: 38,
  end: 62,
  test: 
   Node {
     type: 'CallExpression',
     start: 38,
     end: 51,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 38,
        end: 49,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [] },
  consequent: Node { type: 'Literal', start: 54, end: 56, value: 42, raw: '42' },
  alternate: Node { type: 'Literal', start: 59, end: 62, value: 5.5, raw: '5.5' } }
ConditionalExpression
38
62
Node {
  type: 'CallExpression',
  start: 38,
  end: 51,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 38,
     end: 49,
     object: Node { type: 'Identifier', start: 38, end: 41, name: '$vm' },
     property: Node { type: 'Identifier', start: 42, end: 49, name: 'dfgTrue' },
     computed: false },
  arguments: [] }
CallExpression
38
51
Node {
  type: 'MemberExpression',
  start: 38,
  end: 49,
  object: Node { type: 'Identifier', start: 38, end: 41, name: '$vm' },
  property: Node { type: 'Identifier', start: 42, end: 49, name: 'dfgTrue' },
  computed: false }
MemberExpression
38
49
Node { type: 'Identifier', start: 38, end: 41, name: '$vm' }
Identifier
38
41
$vm
Node { type: 'Identifier', start: 42, end: 49, name: 'dfgTrue' }
Identifier
42
49
dfgTrue
false
[]
Node { type: 'Literal', start: 54, end: 56, value: 42, raw: '42' }
Literal
54
56
42
42
Node { type: 'Literal', start: 59, end: 62, value: 5.5, raw: '5.5' }
Literal
59
62
5.5
5.5
+
Node { type: 'Literal', start: 66, end: 67, value: 1, raw: '1' }
Literal
66
67
1
1
Node {
  type: 'ExpressionStatement',
  start: 72,
  end: 86,
  expression: 
   Node {
     type: 'CallExpression',
     start: 72,
     end: 85,
     callee: Node { type: 'Identifier', start: 72, end: 80, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
72
86
Node {
  type: 'CallExpression',
  start: 72,
  end: 85,
  callee: Node { type: 'Identifier', start: 72, end: 80, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 81, end: 84, name: 'foo' } ] }
CallExpression
72
85
Node { type: 'Identifier', start: 72, end: 80, name: 'noInline' }
Identifier
72
80
noInline
[ Node { type: 'Identifier', start: 81, end: 84, name: 'foo' } ]
Node { type: 'Identifier', start: 81, end: 84, name: 'foo' }
Identifier
81
84
foo
Node {
  type: 'ForStatement',
  start: 88,
  end: 234,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 93,
     end: 102,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 104,
     end: 115,
     left: Node { type: 'Identifier', start: 104, end: 105, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 108,
        end: 115,
        value: 1000000,
        raw: '1000000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 117,
     end: 120,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 119, end: 120, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 122,
     end: 234,
     body: [ [Node], [Node] ] } }
ForStatement
88
234
Node {
  type: 'VariableDeclaration',
  start: 93,
  end: 102,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 97,
       end: 102,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
93
102
[ Node {
    type: 'VariableDeclarator',
    start: 97,
    end: 102,
    id: Node { type: 'Identifier', start: 97, end: 98, name: 'i' },
    init: Node { type: 'Literal', start: 101, end: 102, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 97,
  end: 102,
  id: Node { type: 'Identifier', start: 97, end: 98, name: 'i' },
  init: Node { type: 'Literal', start: 101, end: 102, value: 0, raw: '0' } }
VariableDeclarator
97
102
Node { type: 'Identifier', start: 97, end: 98, name: 'i' }
Identifier
97
98
i
Node { type: 'Literal', start: 101, end: 102, value: 0, raw: '0' }
Literal
101
102
0
0
var
Node {
  type: 'BinaryExpression',
  start: 104,
  end: 115,
  left: Node { type: 'Identifier', start: 104, end: 105, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 108,
     end: 115,
     value: 1000000,
     raw: '1000000' } }
BinaryExpression
104
115
Node { type: 'Identifier', start: 104, end: 105, name: 'i' }
Identifier
104
105
i
<
Node {
  type: 'Literal',
  start: 108,
  end: 115,
  value: 1000000,
  raw: '1000000' }
Literal
108
115
1000000
1000000
Node {
  type: 'UpdateExpression',
  start: 117,
  end: 120,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 119, end: 120, name: 'i' } }
UpdateExpression
117
120
++
true
Node { type: 'Identifier', start: 119, end: 120, name: 'i' }
Identifier
119
120
i
Node {
  type: 'BlockStatement',
  start: 122,
  end: 234,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 128,
       end: 147,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 152,
       end: 232,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
122
234
[ Node {
    type: 'VariableDeclaration',
    start: 128,
    end: 147,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 152,
    end: 232,
    test: 
     Node {
       type: 'LogicalExpression',
       start: 156,
       end: 185,
       left: [Node],
       operator: '&&',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 195, end: 232, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 128,
  end: 147,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 132,
       end: 146,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
128
147
[ Node {
    type: 'VariableDeclarator',
    start: 132,
    end: 146,
    id: Node { type: 'Identifier', start: 132, end: 138, name: 'result' },
    init: 
     Node {
       type: 'CallExpression',
       start: 141,
       end: 146,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'VariableDeclarator',
  start: 132,
  end: 146,
  id: Node { type: 'Identifier', start: 132, end: 138, name: 'result' },
  init: 
   Node {
     type: 'CallExpression',
     start: 141,
     end: 146,
     callee: Node { type: 'Identifier', start: 141, end: 144, name: 'foo' },
     arguments: [] } }
VariableDeclarator
132
146
Node { type: 'Identifier', start: 132, end: 138, name: 'result' }
Identifier
132
138
result
Node {
  type: 'CallExpression',
  start: 141,
  end: 146,
  callee: Node { type: 'Identifier', start: 141, end: 144, name: 'foo' },
  arguments: [] }
CallExpression
141
146
Node { type: 'Identifier', start: 141, end: 144, name: 'foo' }
Identifier
141
144
foo
[]
var
Node {
  type: 'IfStatement',
  start: 152,
  end: 232,
  test: 
   Node {
     type: 'LogicalExpression',
     start: 156,
     end: 185,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 156,
        end: 168,
        left: [Node],
        operator: '!=',
        right: [Node] },
     operator: '&&',
     right: 
      Node {
        type: 'BinaryExpression',
        start: 172,
        end: 185,
        left: [Node],
        operator: '!=',
        right: [Node] } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 195,
     end: 232,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 201,
        end: 231,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
152
232
Node {
  type: 'LogicalExpression',
  start: 156,
  end: 185,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 156,
     end: 168,
     left: Node { type: 'Identifier', start: 156, end: 162, name: 'result' },
     operator: '!=',
     right: Node { type: 'Literal', start: 166, end: 168, value: 43, raw: '43' } },
  operator: '&&',
  right: 
   Node {
     type: 'BinaryExpression',
     start: 172,
     end: 185,
     left: Node { type: 'Identifier', start: 172, end: 178, name: 'result' },
     operator: '!=',
     right: Node { type: 'Literal', start: 182, end: 185, value: 6.5, raw: '6.5' } } }
LogicalExpression
156
185
Node {
  type: 'BinaryExpression',
  start: 156,
  end: 168,
  left: Node { type: 'Identifier', start: 156, end: 162, name: 'result' },
  operator: '!=',
  right: Node { type: 'Literal', start: 166, end: 168, value: 43, raw: '43' } }
BinaryExpression
156
168
Node { type: 'Identifier', start: 156, end: 162, name: 'result' }
Identifier
156
162
result
!=
Node { type: 'Literal', start: 166, end: 168, value: 43, raw: '43' }
Literal
166
168
43
43
&&
Node {
  type: 'BinaryExpression',
  start: 172,
  end: 185,
  left: Node { type: 'Identifier', start: 172, end: 178, name: 'result' },
  operator: '!=',
  right: Node { type: 'Literal', start: 182, end: 185, value: 6.5, raw: '6.5' } }
BinaryExpression
172
185
Node { type: 'Identifier', start: 172, end: 178, name: 'result' }
Identifier
172
178
result
!=
Node { type: 'Literal', start: 182, end: 185, value: 6.5, raw: '6.5' }
Literal
182
185
6.5
6.5
Node {
  type: 'ThrowStatement',
  start: 195,
  end: 232,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 201,
     end: 231,
     left: 
      Node {
        type: 'Literal',
        start: 201,
        end: 222,
        value: 'Error: bad result: ',
        raw: '"Error: bad result: "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 225, end: 231, name: 'result' } } }
ThrowStatement
195
232
Node {
  type: 'BinaryExpression',
  start: 201,
  end: 231,
  left: 
   Node {
     type: 'Literal',
     start: 201,
     end: 222,
     value: 'Error: bad result: ',
     raw: '"Error: bad result: "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 225, end: 231, name: 'result' } }
BinaryExpression
201
231
Node {
  type: 'Literal',
  start: 201,
  end: 222,
  value: 'Error: bad result: ',
  raw: '"Error: bad result: "' }
Literal
201
222
Error: bad result: 
"Error: bad result: "
+
Node { type: 'Identifier', start: 225, end: 231, name: 'result' }
Identifier
225
231
result
null
[+] Exception: fiat-value-to-int52-then-fold.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 290,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 64,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 66,
       end: 110,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 112,
       end: 126,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 127,
       end: 141,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 143,
       end: 289,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
290
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 64,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 15, end: 64, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 66,
    end: 110,
    id: Node { type: 'Identifier', start: 75, end: 78, name: 'bar' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 82, end: 110, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 112,
    end: 126,
    expression: 
     Node {
       type: 'CallExpression',
       start: 112,
       end: 125,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 127,
    end: 141,
    expression: 
     Node {
       type: 'CallExpression',
       start: 127,
       end: 140,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 143,
    end: 289,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 148,
       end: 157,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 159,
       end: 170,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 172,
       end: 175,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 177, end: 289, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 64,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 15, end: 64, body: [ [Node] ] } }
FunctionDeclaration
0
64
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[]
Node {
  type: 'BlockStatement',
  start: 15,
  end: 64,
  body: 
   [ Node { type: 'ReturnStatement', start: 21, end: 62, argument: [Node] } ] }
BlockStatement
15
64
[ Node {
    type: 'ReturnStatement',
    start: 21,
    end: 62,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 28,
       end: 61,
       left: [Node],
       operator: '+',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 21,
  end: 62,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 28,
     end: 61,
     left: 
      Node {
        type: 'CallExpression',
        start: 28,
        end: 57,
        callee: [Node],
        arguments: [Array] },
     operator: '+',
     right: Node { type: 'Literal', start: 60, end: 61, value: 1, raw: '1' } } }
ReturnStatement
21
62
Node {
  type: 'BinaryExpression',
  start: 28,
  end: 61,
  left: 
   Node {
     type: 'CallExpression',
     start: 28,
     end: 57,
     callee: Node { type: 'Identifier', start: 28, end: 37, name: 'fiatInt52' },
     arguments: [ [Node] ] },
  operator: '+',
  right: Node { type: 'Literal', start: 60, end: 61, value: 1, raw: '1' } }
BinaryExpression
28
61
Node {
  type: 'CallExpression',
  start: 28,
  end: 57,
  callee: Node { type: 'Identifier', start: 28, end: 37, name: 'fiatInt52' },
  arguments: 
   [ Node {
       type: 'CallExpression',
       start: 38,
       end: 56,
       callee: [Node],
       arguments: [Array] } ] }
CallExpression
28
57
Node { type: 'Identifier', start: 28, end: 37, name: 'fiatInt52' }
Identifier
28
37
fiatInt52
[ Node {
    type: 'CallExpression',
    start: 38,
    end: 56,
    callee: Node { type: 'Identifier', start: 38, end: 41, name: 'bar' },
    arguments: [ [Node] ] } ]
Node {
  type: 'CallExpression',
  start: 38,
  end: 56,
  callee: Node { type: 'Identifier', start: 38, end: 41, name: 'bar' },
  arguments: 
   [ Node {
       type: 'CallExpression',
       start: 42,
       end: 55,
       callee: [Node],
       arguments: [] } ] }
CallExpression
38
56
Node { type: 'Identifier', start: 38, end: 41, name: 'bar' }
Identifier
38
41
bar
[ Node {
    type: 'CallExpression',
    start: 42,
    end: 55,
    callee: 
     Node {
       type: 'MemberExpression',
       start: 42,
       end: 53,
       object: [Node],
       property: [Node],
       computed: false },
    arguments: [] } ]
Node {
  type: 'CallExpression',
  start: 42,
  end: 55,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 42,
     end: 53,
     object: Node { type: 'Identifier', start: 42, end: 45, name: '$vm' },
     property: Node { type: 'Identifier', start: 46, end: 53, name: 'dfgTrue' },
     computed: false },
  arguments: [] }
CallExpression
42
55
Node {
  type: 'MemberExpression',
  start: 42,
  end: 53,
  object: Node { type: 'Identifier', start: 42, end: 45, name: '$vm' },
  property: Node { type: 'Identifier', start: 46, end: 53, name: 'dfgTrue' },
  computed: false }
MemberExpression
42
53
Node { type: 'Identifier', start: 42, end: 45, name: '$vm' }
Identifier
42
45
$vm
Node { type: 'Identifier', start: 46, end: 53, name: 'dfgTrue' }
Identifier
46
53
dfgTrue
false
[]
+
Node { type: 'Literal', start: 60, end: 61, value: 1, raw: '1' }
Literal
60
61
1
1
Node {
  type: 'FunctionDeclaration',
  start: 66,
  end: 110,
  id: Node { type: 'Identifier', start: 75, end: 78, name: 'bar' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 79, end: 80, name: 'p' } ],
  body: Node { type: 'BlockStatement', start: 82, end: 110, body: [ [Node] ] } }
FunctionDeclaration
66
110
Node { type: 'Identifier', start: 75, end: 78, name: 'bar' }
Identifier
75
78
bar
false
false
false
[ Node { type: 'Identifier', start: 79, end: 80, name: 'p' } ]
Node { type: 'Identifier', start: 79, end: 80, name: 'p' }
Identifier
79
80
p
Node {
  type: 'BlockStatement',
  start: 82,
  end: 110,
  body: 
   [ Node { type: 'ReturnStatement', start: 88, end: 108, argument: [Node] } ] }
BlockStatement
82
110
[ Node {
    type: 'ReturnStatement',
    start: 88,
    end: 108,
    argument: 
     Node {
       type: 'ConditionalExpression',
       start: 95,
       end: 107,
       test: [Node],
       consequent: [Node],
       alternate: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 88,
  end: 108,
  argument: 
   Node {
     type: 'ConditionalExpression',
     start: 95,
     end: 107,
     test: Node { type: 'Identifier', start: 95, end: 96, name: 'p' },
     consequent: Node { type: 'Literal', start: 99, end: 101, value: 42, raw: '42' },
     alternate: Node { type: 'Literal', start: 104, end: 107, value: 5.5, raw: '5.5' } } }
ReturnStatement
88
108
Node {
  type: 'ConditionalExpression',
  start: 95,
  end: 107,
  test: Node { type: 'Identifier', start: 95, end: 96, name: 'p' },
  consequent: Node { type: 'Literal', start: 99, end: 101, value: 42, raw: '42' },
  alternate: Node { type: 'Literal', start: 104, end: 107, value: 5.5, raw: '5.5' } }
ConditionalExpression
95
107
Node { type: 'Identifier', start: 95, end: 96, name: 'p' }
Identifier
95
96
p
Node { type: 'Literal', start: 99, end: 101, value: 42, raw: '42' }
Literal
99
101
42
42
Node { type: 'Literal', start: 104, end: 107, value: 5.5, raw: '5.5' }
Literal
104
107
5.5
5.5
Node {
  type: 'ExpressionStatement',
  start: 112,
  end: 126,
  expression: 
   Node {
     type: 'CallExpression',
     start: 112,
     end: 125,
     callee: Node { type: 'Identifier', start: 112, end: 120, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
112
126
Node {
  type: 'CallExpression',
  start: 112,
  end: 125,
  callee: Node { type: 'Identifier', start: 112, end: 120, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 121, end: 124, name: 'foo' } ] }
CallExpression
112
125
Node { type: 'Identifier', start: 112, end: 120, name: 'noInline' }
Identifier
112
120
noInline
[ Node { type: 'Identifier', start: 121, end: 124, name: 'foo' } ]
Node { type: 'Identifier', start: 121, end: 124, name: 'foo' }
Identifier
121
124
foo
Node {
  type: 'ExpressionStatement',
  start: 127,
  end: 141,
  expression: 
   Node {
     type: 'CallExpression',
     start: 127,
     end: 140,
     callee: Node { type: 'Identifier', start: 127, end: 135, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
127
141
Node {
  type: 'CallExpression',
  start: 127,
  end: 140,
  callee: Node { type: 'Identifier', start: 127, end: 135, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 136, end: 139, name: 'bar' } ] }
CallExpression
127
140
Node { type: 'Identifier', start: 127, end: 135, name: 'noInline' }
Identifier
127
135
noInline
[ Node { type: 'Identifier', start: 136, end: 139, name: 'bar' } ]
Node { type: 'Identifier', start: 136, end: 139, name: 'bar' }
Identifier
136
139
bar
Node {
  type: 'ForStatement',
  start: 143,
  end: 289,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 148,
     end: 157,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 159,
     end: 170,
     left: Node { type: 'Identifier', start: 159, end: 160, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 163,
        end: 170,
        value: 1000000,
        raw: '1000000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 172,
     end: 175,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 174, end: 175, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 177,
     end: 289,
     body: [ [Node], [Node] ] } }
ForStatement
143
289
Node {
  type: 'VariableDeclaration',
  start: 148,
  end: 157,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 152,
       end: 157,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
148
157
[ Node {
    type: 'VariableDeclarator',
    start: 152,
    end: 157,
    id: Node { type: 'Identifier', start: 152, end: 153, name: 'i' },
    init: Node { type: 'Literal', start: 156, end: 157, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 152,
  end: 157,
  id: Node { type: 'Identifier', start: 152, end: 153, name: 'i' },
  init: Node { type: 'Literal', start: 156, end: 157, value: 0, raw: '0' } }
VariableDeclarator
152
157
Node { type: 'Identifier', start: 152, end: 153, name: 'i' }
Identifier
152
153
i
Node { type: 'Literal', start: 156, end: 157, value: 0, raw: '0' }
Literal
156
157
0
0
var
Node {
  type: 'BinaryExpression',
  start: 159,
  end: 170,
  left: Node { type: 'Identifier', start: 159, end: 160, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 163,
     end: 170,
     value: 1000000,
     raw: '1000000' } }
BinaryExpression
159
170
Node { type: 'Identifier', start: 159, end: 160, name: 'i' }
Identifier
159
160
i
<
Node {
  type: 'Literal',
  start: 163,
  end: 170,
  value: 1000000,
  raw: '1000000' }
Literal
163
170
1000000
1000000
Node {
  type: 'UpdateExpression',
  start: 172,
  end: 175,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 174, end: 175, name: 'i' } }
UpdateExpression
172
175
++
true
Node { type: 'Identifier', start: 174, end: 175, name: 'i' }
Identifier
174
175
i
Node {
  type: 'BlockStatement',
  start: 177,
  end: 289,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 183,
       end: 202,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 207,
       end: 287,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
177
289
[ Node {
    type: 'VariableDeclaration',
    start: 183,
    end: 202,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 207,
    end: 287,
    test: 
     Node {
       type: 'LogicalExpression',
       start: 211,
       end: 240,
       left: [Node],
       operator: '&&',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 250, end: 287, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 183,
  end: 202,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 187,
       end: 201,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
183
202
[ Node {
    type: 'VariableDeclarator',
    start: 187,
    end: 201,
    id: Node { type: 'Identifier', start: 187, end: 193, name: 'result' },
    init: 
     Node {
       type: 'CallExpression',
       start: 196,
       end: 201,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'VariableDeclarator',
  start: 187,
  end: 201,
  id: Node { type: 'Identifier', start: 187, end: 193, name: 'result' },
  init: 
   Node {
     type: 'CallExpression',
     start: 196,
     end: 201,
     callee: Node { type: 'Identifier', start: 196, end: 199, name: 'foo' },
     arguments: [] } }
VariableDeclarator
187
201
Node { type: 'Identifier', start: 187, end: 193, name: 'result' }
Identifier
187
193
result
Node {
  type: 'CallExpression',
  start: 196,
  end: 201,
  callee: Node { type: 'Identifier', start: 196, end: 199, name: 'foo' },
  arguments: [] }
CallExpression
196
201
Node { type: 'Identifier', start: 196, end: 199, name: 'foo' }
Identifier
196
199
foo
[]
var
Node {
  type: 'IfStatement',
  start: 207,
  end: 287,
  test: 
   Node {
     type: 'LogicalExpression',
     start: 211,
     end: 240,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 211,
        end: 223,
        left: [Node],
        operator: '!=',
        right: [Node] },
     operator: '&&',
     right: 
      Node {
        type: 'BinaryExpression',
        start: 227,
        end: 240,
        left: [Node],
        operator: '!=',
        right: [Node] } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 250,
     end: 287,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 256,
        end: 286,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
207
287
Node {
  type: 'LogicalExpression',
  start: 211,
  end: 240,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 211,
     end: 223,
     left: Node { type: 'Identifier', start: 211, end: 217, name: 'result' },
     operator: '!=',
     right: Node { type: 'Literal', start: 221, end: 223, value: 43, raw: '43' } },
  operator: '&&',
  right: 
   Node {
     type: 'BinaryExpression',
     start: 227,
     end: 240,
     left: Node { type: 'Identifier', start: 227, end: 233, name: 'result' },
     operator: '!=',
     right: Node { type: 'Literal', start: 237, end: 240, value: 6.5, raw: '6.5' } } }
LogicalExpression
211
240
Node {
  type: 'BinaryExpression',
  start: 211,
  end: 223,
  left: Node { type: 'Identifier', start: 211, end: 217, name: 'result' },
  operator: '!=',
  right: Node { type: 'Literal', start: 221, end: 223, value: 43, raw: '43' } }
BinaryExpression
211
223
Node { type: 'Identifier', start: 211, end: 217, name: 'result' }
Identifier
211
217
result
!=
Node { type: 'Literal', start: 221, end: 223, value: 43, raw: '43' }
Literal
221
223
43
43
&&
Node {
  type: 'BinaryExpression',
  start: 227,
  end: 240,
  left: Node { type: 'Identifier', start: 227, end: 233, name: 'result' },
  operator: '!=',
  right: Node { type: 'Literal', start: 237, end: 240, value: 6.5, raw: '6.5' } }
BinaryExpression
227
240
Node { type: 'Identifier', start: 227, end: 233, name: 'result' }
Identifier
227
233
result
!=
Node { type: 'Literal', start: 237, end: 240, value: 6.5, raw: '6.5' }
Literal
237
240
6.5
6.5
Node {
  type: 'ThrowStatement',
  start: 250,
  end: 287,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 256,
     end: 286,
     left: 
      Node {
        type: 'Literal',
        start: 256,
        end: 277,
        value: 'Error: bad result: ',
        raw: '"Error: bad result: "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 280, end: 286, name: 'result' } } }
ThrowStatement
250
287
Node {
  type: 'BinaryExpression',
  start: 256,
  end: 286,
  left: 
   Node {
     type: 'Literal',
     start: 256,
     end: 277,
     value: 'Error: bad result: ',
     raw: '"Error: bad result: "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 280, end: 286, name: 'result' } }
BinaryExpression
256
286
Node {
  type: 'Literal',
  start: 256,
  end: 277,
  value: 'Error: bad result: ',
  raw: '"Error: bad result: "' }
Literal
256
277
Error: bad result: 
"Error: bad result: "
+
Node { type: 'Identifier', start: 280, end: 286, name: 'result' }
Identifier
280
286
result
null
[+] Exception: fiat-value-to-int52.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 927,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 137,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 139,
       end: 651,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 653,
       end: 816,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 819,
       end: 845,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 846,
       end: 872,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 873,
       end: 899,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 900,
       end: 926,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
927
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 137,
    id: Node { type: 'Identifier', start: 9, end: 15, name: 'repeat' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 30, end: 137, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 139,
    end: 651,
    id: Node { type: 'Identifier', start: 148, end: 160, name: 'createSimple' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 198, end: 651, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 653,
    end: 816,
    id: Node { type: 'Identifier', start: 662, end: 666, name: 'test' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 694, end: 816, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 819,
    end: 845,
    expression: 
     Node {
       type: 'CallExpression',
       start: 819,
       end: 844,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 846,
    end: 872,
    expression: 
     Node {
       type: 'CallExpression',
       start: 846,
       end: 871,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 873,
    end: 899,
    expression: 
     Node {
       type: 'CallExpression',
       start: 873,
       end: 898,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 900,
    end: 926,
    expression: 
     Node {
       type: 'CallExpression',
       start: 900,
       end: 925,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 137,
  id: Node { type: 'Identifier', start: 9, end: 15, name: 'repeat' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 16, end: 21, name: 'count' },
     Node { type: 'Identifier', start: 23, end: 28, name: 'thunk' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 30,
     end: 137,
     body: [ [Node], [Node], [Node] ] } }
FunctionDeclaration
0
137
Node { type: 'Identifier', start: 9, end: 15, name: 'repeat' }
Identifier
9
15
repeat
false
false
false
[ Node { type: 'Identifier', start: 16, end: 21, name: 'count' },
  Node { type: 'Identifier', start: 23, end: 28, name: 'thunk' } ]
Node { type: 'Identifier', start: 16, end: 21, name: 'count' }
Identifier
16
21
count
Node { type: 'Identifier', start: 23, end: 28, name: 'thunk' }
Identifier
23
28
thunk
Node {
  type: 'BlockStatement',
  start: 30,
  end: 137,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 36,
       end: 52,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'ForStatement',
       start: 57,
       end: 116,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ReturnStatement',
       start: 121,
       end: 135,
       argument: [Node] } ] }
BlockStatement
30
137
[ Node {
    type: 'VariableDeclaration',
    start: 36,
    end: 52,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'ForStatement',
    start: 57,
    end: 116,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 62,
       end: 71,
       declarations: [Array],
       kind: 'let' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 73,
       end: 82,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 84,
       end: 87,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 97,
       end: 116,
       expression: [Node] } },
  Node {
    type: 'ReturnStatement',
    start: 121,
    end: 135,
    argument: Node { type: 'Identifier', start: 128, end: 134, name: 'result' } } ]
Node {
  type: 'VariableDeclaration',
  start: 36,
  end: 52,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 40,
       end: 51,
       id: [Node],
       init: [Node] } ],
  kind: 'let' }
VariableDeclaration
36
52
[ Node {
    type: 'VariableDeclarator',
    start: 40,
    end: 51,
    id: Node { type: 'Identifier', start: 40, end: 46, name: 'result' },
    init: Node { type: 'Literal', start: 49, end: 51, value: '', raw: '""' } } ]
Node {
  type: 'VariableDeclarator',
  start: 40,
  end: 51,
  id: Node { type: 'Identifier', start: 40, end: 46, name: 'result' },
  init: Node { type: 'Literal', start: 49, end: 51, value: '', raw: '""' } }
VariableDeclarator
40
51
Node { type: 'Identifier', start: 40, end: 46, name: 'result' }
Identifier
40
46
result
Node { type: 'Literal', start: 49, end: 51, value: '', raw: '""' }
Literal
49
51

""
let
Node {
  type: 'ForStatement',
  start: 57,
  end: 116,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 62,
     end: 71,
     declarations: [ [Node] ],
     kind: 'let' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 73,
     end: 82,
     left: Node { type: 'Identifier', start: 73, end: 74, name: 'i' },
     operator: '<',
     right: Node { type: 'Identifier', start: 77, end: 82, name: 'count' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 84,
     end: 87,
     operator: '++',
     prefix: false,
     argument: Node { type: 'Identifier', start: 84, end: 85, name: 'i' } },
  body: 
   Node {
     type: 'ExpressionStatement',
     start: 97,
     end: 116,
     expression: 
      Node {
        type: 'AssignmentExpression',
        start: 97,
        end: 115,
        operator: '+=',
        left: [Node],
        right: [Node] } } }
ForStatement
57
116
Node {
  type: 'VariableDeclaration',
  start: 62,
  end: 71,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 66,
       end: 71,
       id: [Node],
       init: [Node] } ],
  kind: 'let' }
VariableDeclaration
62
71
[ Node {
    type: 'VariableDeclarator',
    start: 66,
    end: 71,
    id: Node { type: 'Identifier', start: 66, end: 67, name: 'i' },
    init: Node { type: 'Literal', start: 70, end: 71, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 66,
  end: 71,
  id: Node { type: 'Identifier', start: 66, end: 67, name: 'i' },
  init: Node { type: 'Literal', start: 70, end: 71, value: 0, raw: '0' } }
VariableDeclarator
66
71
Node { type: 'Identifier', start: 66, end: 67, name: 'i' }
Identifier
66
67
i
Node { type: 'Literal', start: 70, end: 71, value: 0, raw: '0' }
Literal
70
71
0
0
let
Node {
  type: 'BinaryExpression',
  start: 73,
  end: 82,
  left: Node { type: 'Identifier', start: 73, end: 74, name: 'i' },
  operator: '<',
  right: Node { type: 'Identifier', start: 77, end: 82, name: 'count' } }
BinaryExpression
73
82
Node { type: 'Identifier', start: 73, end: 74, name: 'i' }
Identifier
73
74
i
<
Node { type: 'Identifier', start: 77, end: 82, name: 'count' }
Identifier
77
82
count
Node {
  type: 'UpdateExpression',
  start: 84,
  end: 87,
  operator: '++',
  prefix: false,
  argument: Node { type: 'Identifier', start: 84, end: 85, name: 'i' } }
UpdateExpression
84
87
++
false
Node { type: 'Identifier', start: 84, end: 85, name: 'i' }
Identifier
84
85
i
Node {
  type: 'ExpressionStatement',
  start: 97,
  end: 116,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 97,
     end: 115,
     operator: '+=',
     left: Node { type: 'Identifier', start: 97, end: 103, name: 'result' },
     right: 
      Node {
        type: 'CallExpression',
        start: 107,
        end: 115,
        callee: [Node],
        arguments: [Array] } } }
ExpressionStatement
97
116
Node {
  type: 'AssignmentExpression',
  start: 97,
  end: 115,
  operator: '+=',
  left: Node { type: 'Identifier', start: 97, end: 103, name: 'result' },
  right: 
   Node {
     type: 'CallExpression',
     start: 107,
     end: 115,
     callee: Node { type: 'Identifier', start: 107, end: 112, name: 'thunk' },
     arguments: [ [Node] ] } }
AssignmentExpression
97
115
+=
Node { type: 'Identifier', start: 97, end: 103, name: 'result' }
Identifier
97
103
result
Node {
  type: 'CallExpression',
  start: 107,
  end: 115,
  callee: Node { type: 'Identifier', start: 107, end: 112, name: 'thunk' },
  arguments: 
   [ Node { type: 'Identifier', start: 113, end: 114, name: 'i' } ] }
CallExpression
107
115
Node { type: 'Identifier', start: 107, end: 112, name: 'thunk' }
Identifier
107
112
thunk
[ Node { type: 'Identifier', start: 113, end: 114, name: 'i' } ]
Node { type: 'Identifier', start: 113, end: 114, name: 'i' }
Identifier
113
114
i
Node {
  type: 'ReturnStatement',
  start: 121,
  end: 135,
  argument: Node { type: 'Identifier', start: 128, end: 134, name: 'result' } }
ReturnStatement
121
135
Node { type: 'Identifier', start: 128, end: 134, name: 'result' }
Identifier
128
134
result
Node {
  type: 'FunctionDeclaration',
  start: 139,
  end: 651,
  id: Node { type: 'Identifier', start: 148, end: 160, name: 'createSimple' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 161, end: 171, name: 'outerDepth' },
     Node { type: 'Identifier', start: 173, end: 183, name: 'innerDepth' },
     Node { type: 'Identifier', start: 185, end: 196, name: 'returnDepth' } ],
  body: Node { type: 'BlockStatement', start: 198, end: 651, body: [ [Node] ] } }
FunctionDeclaration
139
651
Node { type: 'Identifier', start: 148, end: 160, name: 'createSimple' }
Identifier
148
160
createSimple
false
false
false
[ Node { type: 'Identifier', start: 161, end: 171, name: 'outerDepth' },
  Node { type: 'Identifier', start: 173, end: 183, name: 'innerDepth' },
  Node { type: 'Identifier', start: 185, end: 196, name: 'returnDepth' } ]
Node { type: 'Identifier', start: 161, end: 171, name: 'outerDepth' }
Identifier
161
171
outerDepth
Node { type: 'Identifier', start: 173, end: 183, name: 'innerDepth' }
Identifier
173
183
innerDepth
Node { type: 'Identifier', start: 185, end: 196, name: 'returnDepth' }
Identifier
185
196
returnDepth
Node {
  type: 'BlockStatement',
  start: 198,
  end: 651,
  body: 
   [ Node {
       type: 'ReturnStatement',
       start: 204,
       end: 649,
       argument: [Node] } ] }
BlockStatement
198
651
[ Node {
    type: 'ReturnStatement',
    start: 204,
    end: 649,
    argument: 
     Node {
       type: 'CallExpression',
       start: 211,
       end: 648,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'ReturnStatement',
  start: 204,
  end: 649,
  argument: 
   Node {
     type: 'CallExpression',
     start: 211,
     end: 648,
     callee: 
      Node {
        type: 'CallExpression',
        start: 211,
        end: 646,
        callee: [Node],
        arguments: [Array] },
     arguments: [] } }
ReturnStatement
204
649
Node {
  type: 'CallExpression',
  start: 211,
  end: 648,
  callee: 
   Node {
     type: 'CallExpression',
     start: 211,
     end: 646,
     callee: Node { type: 'Identifier', start: 211, end: 219, name: 'Function' },
     arguments: [ [Node] ] },
  arguments: [] }
CallExpression
211
648
Node {
  type: 'CallExpression',
  start: 211,
  end: 646,
  callee: Node { type: 'Identifier', start: 211, end: 219, name: 'Function' },
  arguments: 
   [ Node {
       type: 'TemplateLiteral',
       start: 229,
       end: 640,
       expressions: [Array],
       quasis: [Array] } ] }
CallExpression
211
646
Node { type: 'Identifier', start: 211, end: 219, name: 'Function' }
Identifier
211
219
Function
[ Node {
    type: 'TemplateLiteral',
    start: 229,
    end: 640,
    expressions: [ [Node], [Node], [Node], [Node], [Node] ],
    quasis: [ [Node], [Node], [Node], [Node], [Node], [Node] ] } ]
Node {
  type: 'TemplateLiteral',
  start: 229,
  end: 640,
  expressions: 
   [ Node {
       type: 'CallExpression',
       start: 277,
       end: 338,
       callee: [Node],
       arguments: [Array] },
     Node {
       type: 'CallExpression',
       start: 376,
       end: 437,
       callee: [Node],
       arguments: [Array] },
     Node {
       type: 'CallExpression',
       start: 484,
       end: 513,
       callee: [Node],
       arguments: [Array] },
     Node { type: 'Identifier', start: 561, end: 572, name: 'returnDepth' },
     Node {
       type: 'CallExpression',
       start: 589,
       end: 618,
       callee: [Node],
       arguments: [Array] } ],
  quasis: 
   [ Node {
       type: 'TemplateElement',
       start: 230,
       end: 275,
       value: [Object],
       tail: false },
     Node {
       type: 'TemplateElement',
       start: 339,
       end: 374,
       value: [Object],
       tail: false },
     Node {
       type: 'TemplateElement',
       start: 438,
       end: 482,
       value: [Object],
       tail: false },
     Node {
       type: 'TemplateElement',
       start: 514,
       end: 559,
       value: [Object],
       tail: false },
     Node {
       type: 'TemplateElement',
       start: 573,
       end: 587,
       value: [Object],
       tail: false },
     Node {
       type: 'TemplateElement',
       start: 619,
       end: 639,
       value: [Object],
       tail: true } ] }
TemplateLiteral
229
640
[ Node {
    type: 'CallExpression',
    start: 277,
    end: 338,
    callee: Node { type: 'Identifier', start: 277, end: 283, name: 'repeat' },
    arguments: [ [Node], [Node] ] },
  Node {
    type: 'CallExpression',
    start: 376,
    end: 437,
    callee: Node { type: 'Identifier', start: 376, end: 382, name: 'repeat' },
    arguments: [ [Node], [Node] ] },
  Node {
    type: 'CallExpression',
    start: 484,
    end: 513,
    callee: Node { type: 'Identifier', start: 484, end: 490, name: 'repeat' },
    arguments: [ [Node], [Node] ] },
  Node { type: 'Identifier', start: 561, end: 572, name: 'returnDepth' },
  Node {
    type: 'CallExpression',
    start: 589,
    end: 618,
    callee: Node { type: 'Identifier', start: 589, end: 595, name: 'repeat' },
    arguments: [ [Node], [Node] ] } ]
Node {
  type: 'CallExpression',
  start: 277,
  end: 338,
  callee: Node { type: 'Identifier', start: 277, end: 283, name: 'repeat' },
  arguments: 
   [ Node { type: 'Identifier', start: 284, end: 294, name: 'outerDepth' },
     Node {
       type: 'ArrowFunctionExpression',
       start: 296,
       end: 336,
       id: null,
       generator: false,
       expression: true,
       async: false,
       params: [Array],
       body: [Node] } ] }
CallExpression
277
338
Node { type: 'Identifier', start: 277, end: 283, name: 'repeat' }
Identifier
277
283
repeat
[ Node { type: 'Identifier', start: 284, end: 294, name: 'outerDepth' },
  Node {
    type: 'ArrowFunctionExpression',
    start: 296,
    end: 336,
    id: null,
    generator: false,
    expression: true,
    async: false,
    params: [ [Node] ],
    body: 
     Node {
       type: 'BinaryExpression',
       start: 303,
       end: 336,
       left: [Node],
       operator: '+',
       right: [Node] } } ]
Node { type: 'Identifier', start: 284, end: 294, name: 'outerDepth' }
Identifier
284
294
outerDepth
Node {
  type: 'ArrowFunctionExpression',
  start: 296,
  end: 336,
  id: null,
  generator: false,
  expression: true,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 297, end: 298, name: 'i' } ],
  body: 
   Node {
     type: 'BinaryExpression',
     start: 303,
     end: 336,
     left: 
      Node {
        type: 'TemplateLiteral',
        start: 303,
        end: 328,
        expressions: [Array],
        quasis: [Array] },
     operator: '+',
     right: 
      Node {
        type: 'Literal',
        start: 331,
        end: 336,
        value: '{\n',
        raw: '"{\\n"' } } }
ArrowFunctionExpression
296
336
null
[+] Exception: finally-for-in.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 951,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 0,
       end: 44,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 46,
       end: 60,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 62,
       end: 950,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
951
[ Node {
    type: 'VariableDeclaration',
    start: 0,
    end: 44,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 46,
    end: 60,
    expression: 
     Node {
       type: 'CallExpression',
       start: 46,
       end: 59,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 62,
    end: 950,
    expression: 
     Node {
       type: 'CallExpression',
       start: 62,
       end: 949,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'VariableDeclaration',
  start: 0,
  end: 44,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 4,
       end: 43,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
0
44
[ Node {
    type: 'VariableDeclarator',
    start: 4,
    end: 43,
    id: Node { type: 'Identifier', start: 4, end: 7, name: 'foo' },
    init: 
     Node {
       type: 'FunctionExpression',
       start: 10,
       end: 43,
       id: null,
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] } } ]
Node {
  type: 'VariableDeclarator',
  start: 4,
  end: 43,
  id: Node { type: 'Identifier', start: 4, end: 7, name: 'foo' },
  init: 
   Node {
     type: 'FunctionExpression',
     start: 10,
     end: 43,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [ [Node] ],
     body: Node { type: 'BlockStatement', start: 22, end: 43, body: [Array] } } }
VariableDeclarator
4
43
Node { type: 'Identifier', start: 4, end: 7, name: 'foo' }
Identifier
4
7
foo
Node {
  type: 'FunctionExpression',
  start: 10,
  end: 43,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 19, end: 20, name: 'o' } ],
  body: Node { type: 'BlockStatement', start: 22, end: 43, body: [ [Node] ] } }
FunctionExpression
10
43
null
[+] Exception: flatten-oversize-dictionary-object.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 401,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 44,
       end: 65,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'ExpressionStatement',
       start: 97,
       end: 112,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 158,
       end: 170,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 171,
       end: 183,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 216,
       end: 231,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 233,
       end: 260,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'FunctionDeclaration',
       start: 262,
       end: 305,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 306,
       end: 320,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 358,
       end: 400,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
401
[ Node {
    type: 'VariableDeclaration',
    start: 44,
    end: 65,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'ExpressionStatement',
    start: 97,
    end: 112,
    expression: 
     Node {
       type: 'UnaryExpression',
       start: 97,
       end: 111,
       operator: 'delete',
       prefix: true,
       argument: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 158,
    end: 170,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 158,
       end: 169,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 171,
    end: 183,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 171,
       end: 182,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 216,
    end: 231,
    expression: 
     Node {
       type: 'UnaryExpression',
       start: 216,
       end: 230,
       operator: 'delete',
       prefix: true,
       argument: [Node] } },
  Node {
    type: 'VariableDeclaration',
    start: 233,
    end: 260,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'FunctionDeclaration',
    start: 262,
    end: 305,
    id: Node { type: 'Identifier', start: 271, end: 274, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 277, end: 305, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 306,
    end: 320,
    expression: 
     Node {
       type: 'CallExpression',
       start: 306,
       end: 319,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 358,
    end: 400,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 363,
       end: 372,
       declarations: [Array],
       kind: 'let' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 374,
       end: 383,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 385,
       end: 388,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 394,
       end: 400,
       expression: [Node] } } ]
Node {
  type: 'VariableDeclaration',
  start: 44,
  end: 65,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 48,
       end: 64,
       id: [Node],
       init: [Node] } ],
  kind: 'let' }
VariableDeclaration
44
65
[ Node {
    type: 'VariableDeclarator',
    start: 48,
    end: 64,
    id: Node { type: 'Identifier', start: 48, end: 51, name: 'obj' },
    init: 
     Node {
       type: 'ObjectExpression',
       start: 54,
       end: 64,
       properties: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 48,
  end: 64,
  id: Node { type: 'Identifier', start: 48, end: 51, name: 'obj' },
  init: 
   Node {
     type: 'ObjectExpression',
     start: 54,
     end: 64,
     properties: [ [Node] ] } }
VariableDeclarator
48
64
Node { type: 'Identifier', start: 48, end: 51, name: 'obj' }
Identifier
48
51
obj
Node {
  type: 'ObjectExpression',
  start: 54,
  end: 64,
  properties: 
   [ Node {
       type: 'Property',
       start: 56,
       end: 62,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
54
64
[ Node {
    type: 'Property',
    start: 56,
    end: 62,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 56, end: 59, name: 'foo' },
    value: Node { type: 'Literal', start: 61, end: 62, value: 1, raw: '1' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 56,
  end: 62,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 56, end: 59, name: 'foo' },
  value: Node { type: 'Literal', start: 61, end: 62, value: 1, raw: '1' },
  kind: 'init' }
Property
56
62
false
false
false
Node { type: 'Identifier', start: 56, end: 59, name: 'foo' }
Identifier
56
59
foo
Node { type: 'Literal', start: 61, end: 62, value: 1, raw: '1' }
Literal
61
62
1
1
init
let
Node {
  type: 'ExpressionStatement',
  start: 97,
  end: 112,
  expression: 
   Node {
     type: 'UnaryExpression',
     start: 97,
     end: 111,
     operator: 'delete',
     prefix: true,
     argument: 
      Node {
        type: 'MemberExpression',
        start: 104,
        end: 111,
        object: [Node],
        property: [Node],
        computed: false } } }
ExpressionStatement
97
112
Node {
  type: 'UnaryExpression',
  start: 97,
  end: 111,
  operator: 'delete',
  prefix: true,
  argument: 
   Node {
     type: 'MemberExpression',
     start: 104,
     end: 111,
     object: Node { type: 'Identifier', start: 104, end: 107, name: 'obj' },
     property: Node { type: 'Identifier', start: 108, end: 111, name: 'foo' },
     computed: false } }
UnaryExpression
97
111
delete
true
Node {
  type: 'MemberExpression',
  start: 104,
  end: 111,
  object: Node { type: 'Identifier', start: 104, end: 107, name: 'obj' },
  property: Node { type: 'Identifier', start: 108, end: 111, name: 'foo' },
  computed: false }
MemberExpression
104
111
Node { type: 'Identifier', start: 104, end: 107, name: 'obj' }
Identifier
104
107
obj
Node { type: 'Identifier', start: 108, end: 111, name: 'foo' }
Identifier
108
111
foo
false
Node {
  type: 'ExpressionStatement',
  start: 158,
  end: 170,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 158,
     end: 169,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 158,
        end: 165,
        object: [Node],
        property: [Node],
        computed: false },
     right: Node { type: 'Literal', start: 168, end: 169, value: 1, raw: '1' } } }
ExpressionStatement
158
170
Node {
  type: 'AssignmentExpression',
  start: 158,
  end: 169,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 158,
     end: 165,
     object: Node { type: 'Identifier', start: 158, end: 161, name: 'obj' },
     property: Node { type: 'Identifier', start: 162, end: 165, name: 'foo' },
     computed: false },
  right: Node { type: 'Literal', start: 168, end: 169, value: 1, raw: '1' } }
AssignmentExpression
158
169
=
Node {
  type: 'MemberExpression',
  start: 158,
  end: 165,
  object: Node { type: 'Identifier', start: 158, end: 161, name: 'obj' },
  property: Node { type: 'Identifier', start: 162, end: 165, name: 'foo' },
  computed: false }
MemberExpression
158
165
Node { type: 'Identifier', start: 158, end: 161, name: 'obj' }
Identifier
158
161
obj
Node { type: 'Identifier', start: 162, end: 165, name: 'foo' }
Identifier
162
165
foo
false
Node { type: 'Literal', start: 168, end: 169, value: 1, raw: '1' }
Literal
168
169
1
1
Node {
  type: 'ExpressionStatement',
  start: 171,
  end: 183,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 171,
     end: 182,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 171,
        end: 178,
        object: [Node],
        property: [Node],
        computed: false },
     right: Node { type: 'Literal', start: 181, end: 182, value: 2, raw: '2' } } }
ExpressionStatement
171
183
Node {
  type: 'AssignmentExpression',
  start: 171,
  end: 182,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 171,
     end: 178,
     object: Node { type: 'Identifier', start: 171, end: 174, name: 'obj' },
     property: Node { type: 'Identifier', start: 175, end: 178, name: 'bar' },
     computed: false },
  right: Node { type: 'Literal', start: 181, end: 182, value: 2, raw: '2' } }
AssignmentExpression
171
182
=
Node {
  type: 'MemberExpression',
  start: 171,
  end: 178,
  object: Node { type: 'Identifier', start: 171, end: 174, name: 'obj' },
  property: Node { type: 'Identifier', start: 175, end: 178, name: 'bar' },
  computed: false }
MemberExpression
171
178
Node { type: 'Identifier', start: 171, end: 174, name: 'obj' }
Identifier
171
174
obj
Node { type: 'Identifier', start: 175, end: 178, name: 'bar' }
Identifier
175
178
bar
false
Node { type: 'Literal', start: 181, end: 182, value: 2, raw: '2' }
Literal
181
182
2
2
Node {
  type: 'ExpressionStatement',
  start: 216,
  end: 231,
  expression: 
   Node {
     type: 'UnaryExpression',
     start: 216,
     end: 230,
     operator: 'delete',
     prefix: true,
     argument: 
      Node {
        type: 'MemberExpression',
        start: 223,
        end: 230,
        object: [Node],
        property: [Node],
        computed: false } } }
ExpressionStatement
216
231
Node {
  type: 'UnaryExpression',
  start: 216,
  end: 230,
  operator: 'delete',
  prefix: true,
  argument: 
   Node {
     type: 'MemberExpression',
     start: 223,
     end: 230,
     object: Node { type: 'Identifier', start: 223, end: 226, name: 'obj' },
     property: Node { type: 'Identifier', start: 227, end: 230, name: 'foo' },
     computed: false } }
UnaryExpression
216
230
delete
true
Node {
  type: 'MemberExpression',
  start: 223,
  end: 230,
  object: Node { type: 'Identifier', start: 223, end: 226, name: 'obj' },
  property: Node { type: 'Identifier', start: 227, end: 230, name: 'foo' },
  computed: false }
MemberExpression
223
230
Node { type: 'Identifier', start: 223, end: 226, name: 'obj' }
Identifier
223
226
obj
Node { type: 'Identifier', start: 227, end: 230, name: 'foo' }
Identifier
227
230
foo
false
Node {
  type: 'VariableDeclaration',
  start: 233,
  end: 260,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 237,
       end: 259,
       id: [Node],
       init: [Node] } ],
  kind: 'let' }
VariableDeclaration
233
260
[ Node {
    type: 'VariableDeclarator',
    start: 237,
    end: 259,
    id: Node { type: 'Identifier', start: 237, end: 238, name: 'o' },
    init: 
     Node {
       type: 'CallExpression',
       start: 241,
       end: 259,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 237,
  end: 259,
  id: Node { type: 'Identifier', start: 237, end: 238, name: 'o' },
  init: 
   Node {
     type: 'CallExpression',
     start: 241,
     end: 259,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 241,
        end: 254,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [ [Node] ] } }
VariableDeclarator
237
259
Node { type: 'Identifier', start: 237, end: 238, name: 'o' }
Identifier
237
238
o
Node {
  type: 'CallExpression',
  start: 241,
  end: 259,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 241,
     end: 254,
     object: Node { type: 'Identifier', start: 241, end: 247, name: 'Object' },
     property: Node { type: 'Identifier', start: 248, end: 254, name: 'create' },
     computed: false },
  arguments: 
   [ Node { type: 'Identifier', start: 255, end: 258, name: 'obj' } ] }
CallExpression
241
259
Node {
  type: 'MemberExpression',
  start: 241,
  end: 254,
  object: Node { type: 'Identifier', start: 241, end: 247, name: 'Object' },
  property: Node { type: 'Identifier', start: 248, end: 254, name: 'create' },
  computed: false }
MemberExpression
241
254
Node { type: 'Identifier', start: 241, end: 247, name: 'Object' }
Identifier
241
247
Object
Node { type: 'Identifier', start: 248, end: 254, name: 'create' }
Identifier
248
254
create
false
[ Node { type: 'Identifier', start: 255, end: 258, name: 'obj' } ]
Node { type: 'Identifier', start: 255, end: 258, name: 'obj' }
Identifier
255
258
obj
let
Node {
  type: 'FunctionDeclaration',
  start: 262,
  end: 305,
  id: Node { type: 'Identifier', start: 271, end: 274, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 277, end: 305, body: [ [Node] ] } }
FunctionDeclaration
262
305
Node { type: 'Identifier', start: 271, end: 274, name: 'foo' }
Identifier
271
274
foo
false
false
false
[]
Node {
  type: 'BlockStatement',
  start: 277,
  end: 305,
  body: 
   [ Node {
       type: 'ReturnStatement',
       start: 283,
       end: 303,
       argument: [Node] } ] }
BlockStatement
277
305
[ Node {
    type: 'ReturnStatement',
    start: 283,
    end: 303,
    argument: 
     Node {
       type: 'CallExpression',
       start: 290,
       end: 302,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'ReturnStatement',
  start: 283,
  end: 303,
  argument: 
   Node {
     type: 'CallExpression',
     start: 290,
     end: 302,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 290,
        end: 300,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [] } }
ReturnStatement
283
303
Node {
  type: 'CallExpression',
  start: 290,
  end: 302,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 290,
     end: 300,
     object: Node { type: 'Identifier', start: 290, end: 291, name: 'o' },
     property: Node { type: 'Identifier', start: 292, end: 300, name: 'toString' },
     computed: false },
  arguments: [] }
CallExpression
290
302
Node {
  type: 'MemberExpression',
  start: 290,
  end: 300,
  object: Node { type: 'Identifier', start: 290, end: 291, name: 'o' },
  property: Node { type: 'Identifier', start: 292, end: 300, name: 'toString' },
  computed: false }
MemberExpression
290
300
Node { type: 'Identifier', start: 290, end: 291, name: 'o' }
Identifier
290
291
o
Node { type: 'Identifier', start: 292, end: 300, name: 'toString' }
Identifier
292
300
toString
false
[]
Node {
  type: 'ExpressionStatement',
  start: 306,
  end: 320,
  expression: 
   Node {
     type: 'CallExpression',
     start: 306,
     end: 319,
     callee: Node { type: 'Identifier', start: 306, end: 314, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
306
320
Node {
  type: 'CallExpression',
  start: 306,
  end: 319,
  callee: Node { type: 'Identifier', start: 306, end: 314, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 315, end: 318, name: 'foo' } ] }
CallExpression
306
319
Node { type: 'Identifier', start: 306, end: 314, name: 'noInline' }
Identifier
306
314
noInline
[ Node { type: 'Identifier', start: 315, end: 318, name: 'foo' } ]
Node { type: 'Identifier', start: 315, end: 318, name: 'foo' }
Identifier
315
318
foo
Node {
  type: 'ForStatement',
  start: 358,
  end: 400,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 363,
     end: 372,
     declarations: [ [Node] ],
     kind: 'let' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 374,
     end: 383,
     left: Node { type: 'Identifier', start: 374, end: 375, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 378,
        end: 383,
        value: 10000,
        raw: '10000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 385,
     end: 388,
     operator: '++',
     prefix: false,
     argument: Node { type: 'Identifier', start: 385, end: 386, name: 'i' } },
  body: 
   Node {
     type: 'ExpressionStatement',
     start: 394,
     end: 400,
     expression: 
      Node {
        type: 'CallExpression',
        start: 394,
        end: 399,
        callee: [Node],
        arguments: [] } } }
ForStatement
358
400
Node {
  type: 'VariableDeclaration',
  start: 363,
  end: 372,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 367,
       end: 372,
       id: [Node],
       init: [Node] } ],
  kind: 'let' }
VariableDeclaration
363
372
[ Node {
    type: 'VariableDeclarator',
    start: 367,
    end: 372,
    id: Node { type: 'Identifier', start: 367, end: 368, name: 'i' },
    init: Node { type: 'Literal', start: 371, end: 372, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 367,
  end: 372,
  id: Node { type: 'Identifier', start: 367, end: 368, name: 'i' },
  init: Node { type: 'Literal', start: 371, end: 372, value: 0, raw: '0' } }
VariableDeclarator
367
372
Node { type: 'Identifier', start: 367, end: 368, name: 'i' }
Identifier
367
368
i
Node { type: 'Literal', start: 371, end: 372, value: 0, raw: '0' }
Literal
371
372
0
0
let
Node {
  type: 'BinaryExpression',
  start: 374,
  end: 383,
  left: Node { type: 'Identifier', start: 374, end: 375, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 378,
     end: 383,
     value: 10000,
     raw: '10000' } }
BinaryExpression
374
383
Node { type: 'Identifier', start: 374, end: 375, name: 'i' }
Identifier
374
375
i
<
Node {
  type: 'Literal',
  start: 378,
  end: 383,
  value: 10000,
  raw: '10000' }
Literal
378
383
10000
10000
Node {
  type: 'UpdateExpression',
  start: 385,
  end: 388,
  operator: '++',
  prefix: false,
  argument: Node { type: 'Identifier', start: 385, end: 386, name: 'i' } }
UpdateExpression
385
388
++
false
Node { type: 'Identifier', start: 385, end: 386, name: 'i' }
Identifier
385
386
i
Node {
  type: 'ExpressionStatement',
  start: 394,
  end: 400,
  expression: 
   Node {
     type: 'CallExpression',
     start: 394,
     end: 399,
     callee: Node { type: 'Identifier', start: 394, end: 397, name: 'foo' },
     arguments: [] } }
ExpressionStatement
394
400
Node {
  type: 'CallExpression',
  start: 394,
  end: 399,
  callee: Node { type: 'Identifier', start: 394, end: 397, name: 'foo' },
  arguments: [] }
CallExpression
394
399
Node { type: 'Identifier', start: 394, end: 397, name: 'foo' }
Identifier
394
397
foo
[]
script
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 497,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 36,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 38,
       end: 405,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 407,
       end: 422,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 424,
       end: 472,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 474,
       end: 496,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
497
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 36,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 16, end: 36, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 38,
    end: 405,
    id: Node { type: 'Identifier', start: 47, end: 51, name: 'test' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 58, end: 405, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 407,
    end: 422,
    expression: 
     Node {
       type: 'CallExpression',
       start: 407,
       end: 421,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 424,
    end: 472,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 429,
       end: 438,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 440,
       end: 450,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 452,
       end: 455,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 461,
       end: 472,
       expression: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 474,
    end: 496,
    expression: 
     Node {
       type: 'CallExpression',
       start: 474,
       end: 495,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 36,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 13, end: 14, name: 'o' } ],
  body: Node { type: 'BlockStatement', start: 16, end: 36, body: [ [Node] ] } }
FunctionDeclaration
0
36
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'o' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'o' }
Identifier
13
14
o
Node {
  type: 'BlockStatement',
  start: 16,
  end: 36,
  body: 
   [ Node { type: 'ReturnStatement', start: 22, end: 34, argument: [Node] } ] }
BlockStatement
16
36
[ Node {
    type: 'ReturnStatement',
    start: 22,
    end: 34,
    argument: 
     Node {
       type: 'MemberExpression',
       start: 29,
       end: 33,
       object: [Node],
       property: [Node],
       computed: true } } ]
Node {
  type: 'ReturnStatement',
  start: 22,
  end: 34,
  argument: 
   Node {
     type: 'MemberExpression',
     start: 29,
     end: 33,
     object: Node { type: 'Identifier', start: 29, end: 30, name: 'o' },
     property: Node { type: 'Literal', start: 31, end: 32, value: 0, raw: '0' },
     computed: true } }
ReturnStatement
22
34
Node {
  type: 'MemberExpression',
  start: 29,
  end: 33,
  object: Node { type: 'Identifier', start: 29, end: 30, name: 'o' },
  property: Node { type: 'Literal', start: 31, end: 32, value: 0, raw: '0' },
  computed: true }
MemberExpression
29
33
Node { type: 'Identifier', start: 29, end: 30, name: 'o' }
Identifier
29
30
o
Node { type: 'Literal', start: 31, end: 32, value: 0, raw: '0' }
Literal
31
32
0
0
true
Node {
  type: 'FunctionDeclaration',
  start: 38,
  end: 405,
  id: Node { type: 'Identifier', start: 47, end: 51, name: 'test' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 52, end: 53, name: 'a' },
     Node { type: 'Identifier', start: 55, end: 56, name: 'x' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 58,
     end: 405,
     body: [ [Node], [Node], [Node], [Node], [Node], [Node] ] } }
FunctionDeclaration
38
405
Node { type: 'Identifier', start: 47, end: 51, name: 'test' }
Identifier
47
51
test
false
false
false
[ Node { type: 'Identifier', start: 52, end: 53, name: 'a' },
  Node { type: 'Identifier', start: 55, end: 56, name: 'x' } ]
Node { type: 'Identifier', start: 52, end: 53, name: 'a' }
Identifier
52
53
a
Node { type: 'Identifier', start: 55, end: 56, name: 'x' }
Identifier
55
56
x
Node {
  type: 'BlockStatement',
  start: 58,
  end: 405,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 64,
       end: 97,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 102,
       end: 118,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 123,
       end: 174,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 179,
       end: 209,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 214,
       end: 239,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 244,
       end: 403,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
58
405
[ Node {
    type: 'VariableDeclaration',
    start: 64,
    end: 97,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 102,
    end: 118,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 102,
       end: 117,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'VariableDeclaration',
    start: 123,
    end: 174,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 179,
    end: 209,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 214,
    end: 239,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 244,
    end: 403,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 248,
       end: 273,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 283, end: 403, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 64,
  end: 97,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 68,
       end: 96,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
64
97
[ Node {
    type: 'VariableDeclarator',
    start: 68,
    end: 96,
    id: Node { type: 'Identifier', start: 68, end: 76, name: 'intArray' },
    init: 
     Node {
       type: 'NewExpression',
       start: 79,
       end: 96,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 68,
  end: 96,
  id: Node { type: 'Identifier', start: 68, end: 76, name: 'intArray' },
  init: 
   Node {
     type: 'NewExpression',
     start: 79,
     end: 96,
     callee: Node { type: 'Identifier', start: 83, end: 93, name: 'Int32Array' },
     arguments: [ [Node] ] } }
VariableDeclarator
68
96
Node { type: 'Identifier', start: 68, end: 76, name: 'intArray' }
Identifier
68
76
intArray
Node {
  type: 'NewExpression',
  start: 79,
  end: 96,
  callee: Node { type: 'Identifier', start: 83, end: 93, name: 'Int32Array' },
  arguments: 
   [ Node { type: 'Literal', start: 94, end: 95, value: 1, raw: '1' } ] }
NewExpression
79
96
Node { type: 'Identifier', start: 83, end: 93, name: 'Int32Array' }
Identifier
83
93
Int32Array
[ Node { type: 'Literal', start: 94, end: 95, value: 1, raw: '1' } ]
Node { type: 'Literal', start: 94, end: 95, value: 1, raw: '1' }
Literal
94
95
1
1
var
Node {
  type: 'ExpressionStatement',
  start: 102,
  end: 118,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 102,
     end: 117,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 102,
        end: 113,
        object: [Node],
        property: [Node],
        computed: true },
     right: Node { type: 'Identifier', start: 116, end: 117, name: 'a' } } }
ExpressionStatement
102
118
Node {
  type: 'AssignmentExpression',
  start: 102,
  end: 117,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 102,
     end: 113,
     object: Node { type: 'Identifier', start: 102, end: 110, name: 'intArray' },
     property: Node { type: 'Literal', start: 111, end: 112, value: 0, raw: '0' },
     computed: true },
  right: Node { type: 'Identifier', start: 116, end: 117, name: 'a' } }
AssignmentExpression
102
117
=
Node {
  type: 'MemberExpression',
  start: 102,
  end: 113,
  object: Node { type: 'Identifier', start: 102, end: 110, name: 'intArray' },
  property: Node { type: 'Literal', start: 111, end: 112, value: 0, raw: '0' },
  computed: true }
MemberExpression
102
113
Node { type: 'Identifier', start: 102, end: 110, name: 'intArray' }
Identifier
102
110
intArray
Node { type: 'Literal', start: 111, end: 112, value: 0, raw: '0' }
Literal
111
112
0
0
true
Node { type: 'Identifier', start: 116, end: 117, name: 'a' }
Identifier
116
117
a
Node {
  type: 'VariableDeclaration',
  start: 123,
  end: 174,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 127,
       end: 173,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
123
174
[ Node {
    type: 'VariableDeclarator',
    start: 127,
    end: 173,
    id: Node { type: 'Identifier', start: 127, end: 137, name: 'floatArray' },
    init: 
     Node {
       type: 'NewExpression',
       start: 140,
       end: 173,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 127,
  end: 173,
  id: Node { type: 'Identifier', start: 127, end: 137, name: 'floatArray' },
  init: 
   Node {
     type: 'NewExpression',
     start: 140,
     end: 173,
     callee: Node { type: 'Identifier', start: 144, end: 156, name: 'Float32Array' },
     arguments: [ [Node] ] } }
VariableDeclarator
127
173
Node { type: 'Identifier', start: 127, end: 137, name: 'floatArray' }
Identifier
127
137
floatArray
Node {
  type: 'NewExpression',
  start: 140,
  end: 173,
  callee: Node { type: 'Identifier', start: 144, end: 156, name: 'Float32Array' },
  arguments: 
   [ Node {
       type: 'MemberExpression',
       start: 157,
       end: 172,
       object: [Node],
       property: [Node],
       computed: false } ] }
NewExpression
140
173
Node { type: 'Identifier', start: 144, end: 156, name: 'Float32Array' }
Identifier
144
156
Float32Array
[ Node {
    type: 'MemberExpression',
    start: 157,
    end: 172,
    object: Node { type: 'Identifier', start: 157, end: 165, name: 'intArray' },
    property: Node { type: 'Identifier', start: 166, end: 172, name: 'buffer' },
    computed: false } ]
Node {
  type: 'MemberExpression',
  start: 157,
  end: 172,
  object: Node { type: 'Identifier', start: 157, end: 165, name: 'intArray' },
  property: Node { type: 'Identifier', start: 166, end: 172, name: 'buffer' },
  computed: false }
MemberExpression
157
172
Node { type: 'Identifier', start: 157, end: 165, name: 'intArray' }
Identifier
157
165
intArray
Node { type: 'Identifier', start: 166, end: 172, name: 'buffer' }
Identifier
166
172
buffer
false
var
Node {
  type: 'VariableDeclaration',
  start: 179,
  end: 209,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 183,
       end: 208,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
179
209
[ Node {
    type: 'VariableDeclarator',
    start: 183,
    end: 208,
    id: Node { type: 'Identifier', start: 183, end: 190, name: 'element' },
    init: 
     Node {
       type: 'CallExpression',
       start: 193,
       end: 208,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 183,
  end: 208,
  id: Node { type: 'Identifier', start: 183, end: 190, name: 'element' },
  init: 
   Node {
     type: 'CallExpression',
     start: 193,
     end: 208,
     callee: Node { type: 'Identifier', start: 193, end: 196, name: 'foo' },
     arguments: [ [Node] ] } }
VariableDeclarator
183
208
Node { type: 'Identifier', start: 183, end: 190, name: 'element' }
Identifier
183
190
element
Node {
  type: 'CallExpression',
  start: 193,
  end: 208,
  callee: Node { type: 'Identifier', start: 193, end: 196, name: 'foo' },
  arguments: 
   [ Node { type: 'Identifier', start: 197, end: 207, name: 'floatArray' } ] }
CallExpression
193
208
Node { type: 'Identifier', start: 193, end: 196, name: 'foo' }
Identifier
193
196
foo
[ Node { type: 'Identifier', start: 197, end: 207, name: 'floatArray' } ]
Node { type: 'Identifier', start: 197, end: 207, name: 'floatArray' }
Identifier
197
207
floatArray
var
Node {
  type: 'VariableDeclaration',
  start: 214,
  end: 239,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 218,
       end: 238,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
214
239
[ Node {
    type: 'VariableDeclarator',
    start: 218,
    end: 238,
    id: Node { type: 'Identifier', start: 218, end: 224, name: 'result' },
    init: 
     Node {
       type: 'BinaryExpression',
       start: 227,
       end: 238,
       left: [Node],
       operator: '+',
       right: [Node] } } ]
Node {
  type: 'VariableDeclarator',
  start: 218,
  end: 238,
  id: Node { type: 'Identifier', start: 218, end: 224, name: 'result' },
  init: 
   Node {
     type: 'BinaryExpression',
     start: 227,
     end: 238,
     left: Node { type: 'Identifier', start: 227, end: 234, name: 'element' },
     operator: '+',
     right: Node { type: 'Literal', start: 237, end: 238, value: 1, raw: '1' } } }
VariableDeclarator
218
238
Node { type: 'Identifier', start: 218, end: 224, name: 'result' }
Identifier
218
224
result
Node {
  type: 'BinaryExpression',
  start: 227,
  end: 238,
  left: Node { type: 'Identifier', start: 227, end: 234, name: 'element' },
  operator: '+',
  right: Node { type: 'Literal', start: 237, end: 238, value: 1, raw: '1' } }
BinaryExpression
227
238
Node { type: 'Identifier', start: 227, end: 234, name: 'element' }
Identifier
227
234
element
+
Node { type: 'Literal', start: 237, end: 238, value: 1, raw: '1' }
Literal
237
238
1
1
var
Node {
  type: 'IfStatement',
  start: 244,
  end: 403,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 248,
     end: 273,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 249,
        end: 260,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '!=',
     right: 
      Node {
        type: 'BinaryExpression',
        start: 266,
        end: 272,
        left: [Node],
        operator: '+',
        right: [Node] } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 283,
     end: 403,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 289,
        end: 402,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
244
403
Node {
  type: 'BinaryExpression',
  start: 248,
  end: 273,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 249,
     end: 260,
     left: Node { type: 'Literal', start: 249, end: 251, value: '', raw: '""' },
     operator: '+',
     right: Node { type: 'Identifier', start: 254, end: 260, name: 'result' } },
  operator: '!=',
  right: 
   Node {
     type: 'BinaryExpression',
     start: 266,
     end: 272,
     left: Node { type: 'Literal', start: 266, end: 268, value: '', raw: '""' },
     operator: '+',
     right: Node { type: 'Identifier', start: 271, end: 272, name: 'x' } } }
BinaryExpression
248
273
Node {
  type: 'BinaryExpression',
  start: 249,
  end: 260,
  left: Node { type: 'Literal', start: 249, end: 251, value: '', raw: '""' },
  operator: '+',
  right: Node { type: 'Identifier', start: 254, end: 260, name: 'result' } }
BinaryExpression
249
260
Node { type: 'Literal', start: 249, end: 251, value: '', raw: '""' }
Literal
249
251

""
+
Node { type: 'Identifier', start: 254, end: 260, name: 'result' }
Identifier
254
260
result
!=
Node {
  type: 'BinaryExpression',
  start: 266,
  end: 272,
  left: Node { type: 'Literal', start: 266, end: 268, value: '', raw: '""' },
  operator: '+',
  right: Node { type: 'Identifier', start: 271, end: 272, name: 'x' } }
BinaryExpression
266
272
Node { type: 'Literal', start: 266, end: 268, value: '', raw: '""' }
Literal
266
268

""
+
Node { type: 'Identifier', start: 271, end: 272, name: 'x' }
Identifier
271
272
x
Node {
  type: 'ThrowStatement',
  start: 283,
  end: 403,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 289,
     end: 402,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 289,
        end: 382,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: 
      Node {
        type: 'Literal',
        start: 385,
        end: 402,
        value: ' from the array',
        raw: '" from the array"' } } }
ThrowStatement
283
403
Node {
  type: 'BinaryExpression',
  start: 289,
  end: 402,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 289,
     end: 382,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 289,
        end: 372,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Identifier', start: 375, end: 382, name: 'element' } },
  operator: '+',
  right: 
   Node {
     type: 'Literal',
     start: 385,
     end: 402,
     value: ' from the array',
     raw: '" from the array"' } }
BinaryExpression
289
402
Node {
  type: 'BinaryExpression',
  start: 289,
  end: 382,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 289,
     end: 372,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 289,
        end: 358,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: 
      Node {
        type: 'Literal',
        start: 361,
        end: 372,
        value: '; loaded ',
        raw: '"; loaded "' } },
  operator: '+',
  right: Node { type: 'Identifier', start: 375, end: 382, name: 'element' } }
BinaryExpression
289
382
Node {
  type: 'BinaryExpression',
  start: 289,
  end: 372,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 289,
     end: 358,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 289,
        end: 354,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Identifier', start: 357, end: 358, name: 'x' } },
  operator: '+',
  right: 
   Node {
     type: 'Literal',
     start: 361,
     end: 372,
     value: '; loaded ',
     raw: '"; loaded "' } }
BinaryExpression
289
372
Node {
  type: 'BinaryExpression',
  start: 289,
  end: 358,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 289,
     end: 354,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 289,
        end: 333,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: 
      Node {
        type: 'Literal',
        start: 336,
        end: 354,
        value: ', but expected: ',
        raw: '", but expected: "' } },
  operator: '+',
  right: Node { type: 'Identifier', start: 357, end: 358, name: 'x' } }
BinaryExpression
289
358
Node {
  type: 'BinaryExpression',
  start: 289,
  end: 354,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 289,
     end: 333,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 289,
        end: 324,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Identifier', start: 327, end: 333, name: 'result' } },
  operator: '+',
  right: 
   Node {
     type: 'Literal',
     start: 336,
     end: 354,
     value: ', but expected: ',
     raw: '", but expected: "' } }
BinaryExpression
289
354
Node {
  type: 'BinaryExpression',
  start: 289,
  end: 333,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 289,
     end: 324,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 289,
        end: 317,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Literal', start: 320, end: 324, value: ': ', raw: '": "' } },
  operator: '+',
  right: Node { type: 'Identifier', start: 327, end: 333, name: 'result' } }
BinaryExpression
289
333
Node {
  type: 'BinaryExpression',
  start: 289,
  end: 324,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 289,
     end: 317,
     left: 
      Node {
        type: 'Literal',
        start: 289,
        end: 313,
        value: 'Error: bad result for ',
        raw: '"Error: bad result for "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 316, end: 317, name: 'a' } },
  operator: '+',
  right: Node { type: 'Literal', start: 320, end: 324, value: ': ', raw: '": "' } }
BinaryExpression
289
324
Node {
  type: 'BinaryExpression',
  start: 289,
  end: 317,
  left: 
   Node {
     type: 'Literal',
     start: 289,
     end: 313,
     value: 'Error: bad result for ',
     raw: '"Error: bad result for "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 316, end: 317, name: 'a' } }
BinaryExpression
289
317
Node {
  type: 'Literal',
  start: 289,
  end: 313,
  value: 'Error: bad result for ',
  raw: '"Error: bad result for "' }
Literal
289
313
Error: bad result for 
"Error: bad result for "
+
Node { type: 'Identifier', start: 316, end: 317, name: 'a' }
Identifier
316
317
a
+
Node { type: 'Literal', start: 320, end: 324, value: ': ', raw: '": "' }
Literal
320
324
: 
": "
+
Node { type: 'Identifier', start: 327, end: 333, name: 'result' }
Identifier
327
333
result
+
Node {
  type: 'Literal',
  start: 336,
  end: 354,
  value: ', but expected: ',
  raw: '", but expected: "' }
Literal
336
354
, but expected: 
", but expected: "
+
Node { type: 'Identifier', start: 357, end: 358, name: 'x' }
Identifier
357
358
x
+
Node {
  type: 'Literal',
  start: 361,
  end: 372,
  value: '; loaded ',
  raw: '"; loaded "' }
Literal
361
372
; loaded 
"; loaded "
+
Node { type: 'Identifier', start: 375, end: 382, name: 'element' }
Identifier
375
382
element
+
Node {
  type: 'Literal',
  start: 385,
  end: 402,
  value: ' from the array',
  raw: '" from the array"' }
Literal
385
402
 from the array
" from the array"
null
[+] Exception: float32-array-nan-inlined.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 496,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 36,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 38,
       end: 52,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 54,
       end: 421,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 423,
       end: 471,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 473,
       end: 495,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
496
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 36,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 16, end: 36, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 38,
    end: 52,
    expression: 
     Node {
       type: 'CallExpression',
       start: 38,
       end: 51,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 54,
    end: 421,
    id: Node { type: 'Identifier', start: 63, end: 67, name: 'test' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 74, end: 421, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 423,
    end: 471,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 428,
       end: 437,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 439,
       end: 449,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 451,
       end: 454,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 460,
       end: 471,
       expression: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 473,
    end: 495,
    expression: 
     Node {
       type: 'CallExpression',
       start: 473,
       end: 494,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 36,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 13, end: 14, name: 'o' } ],
  body: Node { type: 'BlockStatement', start: 16, end: 36, body: [ [Node] ] } }
FunctionDeclaration
0
36
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'o' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'o' }
Identifier
13
14
o
Node {
  type: 'BlockStatement',
  start: 16,
  end: 36,
  body: 
   [ Node { type: 'ReturnStatement', start: 22, end: 34, argument: [Node] } ] }
BlockStatement
16
36
[ Node {
    type: 'ReturnStatement',
    start: 22,
    end: 34,
    argument: 
     Node {
       type: 'MemberExpression',
       start: 29,
       end: 33,
       object: [Node],
       property: [Node],
       computed: true } } ]
Node {
  type: 'ReturnStatement',
  start: 22,
  end: 34,
  argument: 
   Node {
     type: 'MemberExpression',
     start: 29,
     end: 33,
     object: Node { type: 'Identifier', start: 29, end: 30, name: 'o' },
     property: Node { type: 'Literal', start: 31, end: 32, value: 0, raw: '0' },
     computed: true } }
ReturnStatement
22
34
Node {
  type: 'MemberExpression',
  start: 29,
  end: 33,
  object: Node { type: 'Identifier', start: 29, end: 30, name: 'o' },
  property: Node { type: 'Literal', start: 31, end: 32, value: 0, raw: '0' },
  computed: true }
MemberExpression
29
33
Node { type: 'Identifier', start: 29, end: 30, name: 'o' }
Identifier
29
30
o
Node { type: 'Literal', start: 31, end: 32, value: 0, raw: '0' }
Literal
31
32
0
0
true
Node {
  type: 'ExpressionStatement',
  start: 38,
  end: 52,
  expression: 
   Node {
     type: 'CallExpression',
     start: 38,
     end: 51,
     callee: Node { type: 'Identifier', start: 38, end: 46, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
38
52
Node {
  type: 'CallExpression',
  start: 38,
  end: 51,
  callee: Node { type: 'Identifier', start: 38, end: 46, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 47, end: 50, name: 'foo' } ] }
CallExpression
38
51
Node { type: 'Identifier', start: 38, end: 46, name: 'noInline' }
Identifier
38
46
noInline
[ Node { type: 'Identifier', start: 47, end: 50, name: 'foo' } ]
Node { type: 'Identifier', start: 47, end: 50, name: 'foo' }
Identifier
47
50
foo
Node {
  type: 'FunctionDeclaration',
  start: 54,
  end: 421,
  id: Node { type: 'Identifier', start: 63, end: 67, name: 'test' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 68, end: 69, name: 'a' },
     Node { type: 'Identifier', start: 71, end: 72, name: 'x' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 74,
     end: 421,
     body: [ [Node], [Node], [Node], [Node], [Node], [Node] ] } }
FunctionDeclaration
54
421
Node { type: 'Identifier', start: 63, end: 67, name: 'test' }
Identifier
63
67
test
false
false
false
[ Node { type: 'Identifier', start: 68, end: 69, name: 'a' },
  Node { type: 'Identifier', start: 71, end: 72, name: 'x' } ]
Node { type: 'Identifier', start: 68, end: 69, name: 'a' }
Identifier
68
69
a
Node { type: 'Identifier', start: 71, end: 72, name: 'x' }
Identifier
71
72
x
Node {
  type: 'BlockStatement',
  start: 74,
  end: 421,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 80,
       end: 113,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 118,
       end: 134,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 139,
       end: 190,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 195,
       end: 225,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 230,
       end: 255,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 260,
       end: 419,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
74
421
[ Node {
    type: 'VariableDeclaration',
    start: 80,
    end: 113,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 118,
    end: 134,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 118,
       end: 133,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'VariableDeclaration',
    start: 139,
    end: 190,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 195,
    end: 225,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 230,
    end: 255,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 260,
    end: 419,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 264,
       end: 289,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 299, end: 419, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 80,
  end: 113,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 84,
       end: 112,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
80
113
[ Node {
    type: 'VariableDeclarator',
    start: 84,
    end: 112,
    id: Node { type: 'Identifier', start: 84, end: 92, name: 'intArray' },
    init: 
     Node {
       type: 'NewExpression',
       start: 95,
       end: 112,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 84,
  end: 112,
  id: Node { type: 'Identifier', start: 84, end: 92, name: 'intArray' },
  init: 
   Node {
     type: 'NewExpression',
     start: 95,
     end: 112,
     callee: Node { type: 'Identifier', start: 99, end: 109, name: 'Int32Array' },
     arguments: [ [Node] ] } }
VariableDeclarator
84
112
Node { type: 'Identifier', start: 84, end: 92, name: 'intArray' }
Identifier
84
92
intArray
Node {
  type: 'NewExpression',
  start: 95,
  end: 112,
  callee: Node { type: 'Identifier', start: 99, end: 109, name: 'Int32Array' },
  arguments: 
   [ Node { type: 'Literal', start: 110, end: 111, value: 1, raw: '1' } ] }
NewExpression
95
112
Node { type: 'Identifier', start: 99, end: 109, name: 'Int32Array' }
Identifier
99
109
Int32Array
[ Node { type: 'Literal', start: 110, end: 111, value: 1, raw: '1' } ]
Node { type: 'Literal', start: 110, end: 111, value: 1, raw: '1' }
Literal
110
111
1
1
var
Node {
  type: 'ExpressionStatement',
  start: 118,
  end: 134,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 118,
     end: 133,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 118,
        end: 129,
        object: [Node],
        property: [Node],
        computed: true },
     right: Node { type: 'Identifier', start: 132, end: 133, name: 'a' } } }
ExpressionStatement
118
134
Node {
  type: 'AssignmentExpression',
  start: 118,
  end: 133,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 118,
     end: 129,
     object: Node { type: 'Identifier', start: 118, end: 126, name: 'intArray' },
     property: Node { type: 'Literal', start: 127, end: 128, value: 0, raw: '0' },
     computed: true },
  right: Node { type: 'Identifier', start: 132, end: 133, name: 'a' } }
AssignmentExpression
118
133
=
Node {
  type: 'MemberExpression',
  start: 118,
  end: 129,
  object: Node { type: 'Identifier', start: 118, end: 126, name: 'intArray' },
  property: Node { type: 'Literal', start: 127, end: 128, value: 0, raw: '0' },
  computed: true }
MemberExpression
118
129
Node { type: 'Identifier', start: 118, end: 126, name: 'intArray' }
Identifier
118
126
intArray
Node { type: 'Literal', start: 127, end: 128, value: 0, raw: '0' }
Literal
127
128
0
0
true
Node { type: 'Identifier', start: 132, end: 133, name: 'a' }
Identifier
132
133
a
Node {
  type: 'VariableDeclaration',
  start: 139,
  end: 190,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 143,
       end: 189,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
139
190
[ Node {
    type: 'VariableDeclarator',
    start: 143,
    end: 189,
    id: Node { type: 'Identifier', start: 143, end: 153, name: 'floatArray' },
    init: 
     Node {
       type: 'NewExpression',
       start: 156,
       end: 189,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 143,
  end: 189,
  id: Node { type: 'Identifier', start: 143, end: 153, name: 'floatArray' },
  init: 
   Node {
     type: 'NewExpression',
     start: 156,
     end: 189,
     callee: Node { type: 'Identifier', start: 160, end: 172, name: 'Float32Array' },
     arguments: [ [Node] ] } }
VariableDeclarator
143
189
Node { type: 'Identifier', start: 143, end: 153, name: 'floatArray' }
Identifier
143
153
floatArray
Node {
  type: 'NewExpression',
  start: 156,
  end: 189,
  callee: Node { type: 'Identifier', start: 160, end: 172, name: 'Float32Array' },
  arguments: 
   [ Node {
       type: 'MemberExpression',
       start: 173,
       end: 188,
       object: [Node],
       property: [Node],
       computed: false } ] }
NewExpression
156
189
Node { type: 'Identifier', start: 160, end: 172, name: 'Float32Array' }
Identifier
160
172
Float32Array
[ Node {
    type: 'MemberExpression',
    start: 173,
    end: 188,
    object: Node { type: 'Identifier', start: 173, end: 181, name: 'intArray' },
    property: Node { type: 'Identifier', start: 182, end: 188, name: 'buffer' },
    computed: false } ]
Node {
  type: 'MemberExpression',
  start: 173,
  end: 188,
  object: Node { type: 'Identifier', start: 173, end: 181, name: 'intArray' },
  property: Node { type: 'Identifier', start: 182, end: 188, name: 'buffer' },
  computed: false }
MemberExpression
173
188
Node { type: 'Identifier', start: 173, end: 181, name: 'intArray' }
Identifier
173
181
intArray
Node { type: 'Identifier', start: 182, end: 188, name: 'buffer' }
Identifier
182
188
buffer
false
var
Node {
  type: 'VariableDeclaration',
  start: 195,
  end: 225,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 199,
       end: 224,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
195
225
[ Node {
    type: 'VariableDeclarator',
    start: 199,
    end: 224,
    id: Node { type: 'Identifier', start: 199, end: 206, name: 'element' },
    init: 
     Node {
       type: 'CallExpression',
       start: 209,
       end: 224,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 199,
  end: 224,
  id: Node { type: 'Identifier', start: 199, end: 206, name: 'element' },
  init: 
   Node {
     type: 'CallExpression',
     start: 209,
     end: 224,
     callee: Node { type: 'Identifier', start: 209, end: 212, name: 'foo' },
     arguments: [ [Node] ] } }
VariableDeclarator
199
224
Node { type: 'Identifier', start: 199, end: 206, name: 'element' }
Identifier
199
206
element
Node {
  type: 'CallExpression',
  start: 209,
  end: 224,
  callee: Node { type: 'Identifier', start: 209, end: 212, name: 'foo' },
  arguments: 
   [ Node { type: 'Identifier', start: 213, end: 223, name: 'floatArray' } ] }
CallExpression
209
224
Node { type: 'Identifier', start: 209, end: 212, name: 'foo' }
Identifier
209
212
foo
[ Node { type: 'Identifier', start: 213, end: 223, name: 'floatArray' } ]
Node { type: 'Identifier', start: 213, end: 223, name: 'floatArray' }
Identifier
213
223
floatArray
var
Node {
  type: 'VariableDeclaration',
  start: 230,
  end: 255,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 234,
       end: 254,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
230
255
[ Node {
    type: 'VariableDeclarator',
    start: 234,
    end: 254,
    id: Node { type: 'Identifier', start: 234, end: 240, name: 'result' },
    init: 
     Node {
       type: 'BinaryExpression',
       start: 243,
       end: 254,
       left: [Node],
       operator: '+',
       right: [Node] } } ]
Node {
  type: 'VariableDeclarator',
  start: 234,
  end: 254,
  id: Node { type: 'Identifier', start: 234, end: 240, name: 'result' },
  init: 
   Node {
     type: 'BinaryExpression',
     start: 243,
     end: 254,
     left: Node { type: 'Identifier', start: 243, end: 250, name: 'element' },
     operator: '+',
     right: Node { type: 'Literal', start: 253, end: 254, value: 1, raw: '1' } } }
VariableDeclarator
234
254
Node { type: 'Identifier', start: 234, end: 240, name: 'result' }
Identifier
234
240
result
Node {
  type: 'BinaryExpression',
  start: 243,
  end: 254,
  left: Node { type: 'Identifier', start: 243, end: 250, name: 'element' },
  operator: '+',
  right: Node { type: 'Literal', start: 253, end: 254, value: 1, raw: '1' } }
BinaryExpression
243
254
Node { type: 'Identifier', start: 243, end: 250, name: 'element' }
Identifier
243
250
element
+
Node { type: 'Literal', start: 253, end: 254, value: 1, raw: '1' }
Literal
253
254
1
1
var
Node {
  type: 'IfStatement',
  start: 260,
  end: 419,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 264,
     end: 289,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 265,
        end: 276,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '!=',
     right: 
      Node {
        type: 'BinaryExpression',
        start: 282,
        end: 288,
        left: [Node],
        operator: '+',
        right: [Node] } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 299,
     end: 419,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 305,
        end: 418,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
260
419
Node {
  type: 'BinaryExpression',
  start: 264,
  end: 289,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 265,
     end: 276,
     left: Node { type: 'Literal', start: 265, end: 267, value: '', raw: '""' },
     operator: '+',
     right: Node { type: 'Identifier', start: 270, end: 276, name: 'result' } },
  operator: '!=',
  right: 
   Node {
     type: 'BinaryExpression',
     start: 282,
     end: 288,
     left: Node { type: 'Literal', start: 282, end: 284, value: '', raw: '""' },
     operator: '+',
     right: Node { type: 'Identifier', start: 287, end: 288, name: 'x' } } }
BinaryExpression
264
289
Node {
  type: 'BinaryExpression',
  start: 265,
  end: 276,
  left: Node { type: 'Literal', start: 265, end: 267, value: '', raw: '""' },
  operator: '+',
  right: Node { type: 'Identifier', start: 270, end: 276, name: 'result' } }
BinaryExpression
265
276
Node { type: 'Literal', start: 265, end: 267, value: '', raw: '""' }
Literal
265
267

""
+
Node { type: 'Identifier', start: 270, end: 276, name: 'result' }
Identifier
270
276
result
!=
Node {
  type: 'BinaryExpression',
  start: 282,
  end: 288,
  left: Node { type: 'Literal', start: 282, end: 284, value: '', raw: '""' },
  operator: '+',
  right: Node { type: 'Identifier', start: 287, end: 288, name: 'x' } }
BinaryExpression
282
288
Node { type: 'Literal', start: 282, end: 284, value: '', raw: '""' }
Literal
282
284

""
+
Node { type: 'Identifier', start: 287, end: 288, name: 'x' }
Identifier
287
288
x
Node {
  type: 'ThrowStatement',
  start: 299,
  end: 419,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 305,
     end: 418,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 305,
        end: 398,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: 
      Node {
        type: 'Literal',
        start: 401,
        end: 418,
        value: ' from the array',
        raw: '" from the array"' } } }
ThrowStatement
299
419
Node {
  type: 'BinaryExpression',
  start: 305,
  end: 418,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 305,
     end: 398,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 305,
        end: 388,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Identifier', start: 391, end: 398, name: 'element' } },
  operator: '+',
  right: 
   Node {
     type: 'Literal',
     start: 401,
     end: 418,
     value: ' from the array',
     raw: '" from the array"' } }
BinaryExpression
305
418
Node {
  type: 'BinaryExpression',
  start: 305,
  end: 398,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 305,
     end: 388,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 305,
        end: 374,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: 
      Node {
        type: 'Literal',
        start: 377,
        end: 388,
        value: '; loaded ',
        raw: '"; loaded "' } },
  operator: '+',
  right: Node { type: 'Identifier', start: 391, end: 398, name: 'element' } }
BinaryExpression
305
398
Node {
  type: 'BinaryExpression',
  start: 305,
  end: 388,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 305,
     end: 374,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 305,
        end: 370,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Identifier', start: 373, end: 374, name: 'x' } },
  operator: '+',
  right: 
   Node {
     type: 'Literal',
     start: 377,
     end: 388,
     value: '; loaded ',
     raw: '"; loaded "' } }
BinaryExpression
305
388
Node {
  type: 'BinaryExpression',
  start: 305,
  end: 374,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 305,
     end: 370,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 305,
        end: 349,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: 
      Node {
        type: 'Literal',
        start: 352,
        end: 370,
        value: ', but expected: ',
        raw: '", but expected: "' } },
  operator: '+',
  right: Node { type: 'Identifier', start: 373, end: 374, name: 'x' } }
BinaryExpression
305
374
Node {
  type: 'BinaryExpression',
  start: 305,
  end: 370,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 305,
     end: 349,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 305,
        end: 340,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Identifier', start: 343, end: 349, name: 'result' } },
  operator: '+',
  right: 
   Node {
     type: 'Literal',
     start: 352,
     end: 370,
     value: ', but expected: ',
     raw: '", but expected: "' } }
BinaryExpression
305
370
Node {
  type: 'BinaryExpression',
  start: 305,
  end: 349,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 305,
     end: 340,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 305,
        end: 333,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Literal', start: 336, end: 340, value: ': ', raw: '": "' } },
  operator: '+',
  right: Node { type: 'Identifier', start: 343, end: 349, name: 'result' } }
BinaryExpression
305
349
Node {
  type: 'BinaryExpression',
  start: 305,
  end: 340,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 305,
     end: 333,
     left: 
      Node {
        type: 'Literal',
        start: 305,
        end: 329,
        value: 'Error: bad result for ',
        raw: '"Error: bad result for "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 332, end: 333, name: 'a' } },
  operator: '+',
  right: Node { type: 'Literal', start: 336, end: 340, value: ': ', raw: '": "' } }
BinaryExpression
305
340
Node {
  type: 'BinaryExpression',
  start: 305,
  end: 333,
  left: 
   Node {
     type: 'Literal',
     start: 305,
     end: 329,
     value: 'Error: bad result for ',
     raw: '"Error: bad result for "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 332, end: 333, name: 'a' } }
BinaryExpression
305
333
Node {
  type: 'Literal',
  start: 305,
  end: 329,
  value: 'Error: bad result for ',
  raw: '"Error: bad result for "' }
Literal
305
329
Error: bad result for 
"Error: bad result for "
+
Node { type: 'Identifier', start: 332, end: 333, name: 'a' }
Identifier
332
333
a
+
Node { type: 'Literal', start: 336, end: 340, value: ': ', raw: '": "' }
Literal
336
340
: 
": "
+
Node { type: 'Identifier', start: 343, end: 349, name: 'result' }
Identifier
343
349
result
+
Node {
  type: 'Literal',
  start: 352,
  end: 370,
  value: ', but expected: ',
  raw: '", but expected: "' }
Literal
352
370
, but expected: 
", but expected: "
+
Node { type: 'Identifier', start: 373, end: 374, name: 'x' }
Identifier
373
374
x
+
Node {
  type: 'Literal',
  start: 377,
  end: 388,
  value: '; loaded ',
  raw: '"; loaded "' }
Literal
377
388
; loaded 
"; loaded "
+
Node { type: 'Identifier', start: 391, end: 398, name: 'element' }
Identifier
391
398
element
+
Node {
  type: 'Literal',
  start: 401,
  end: 418,
  value: ' from the array',
  raw: '" from the array"' }
Literal
401
418
 from the array
" from the array"
null
[+] Exception: float32-array-nan.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 424,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 37,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 39,
       end: 53,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 55,
       end: 93,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 94,
       end: 132,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 134,
       end: 275,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 277,
       end: 337,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 339,
       end: 395,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 397,
       end: 422,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
424
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 37,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 16, end: 37, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 39,
    end: 53,
    expression: 
     Node {
       type: 'CallExpression',
       start: 39,
       end: 52,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 55,
    end: 93,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 94,
    end: 132,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 134,
    end: 275,
    id: Node { type: 'Identifier', start: 143, end: 147, name: 'test' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 165, end: 275, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 277,
    end: 337,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 282,
       end: 291,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 293,
       end: 301,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 303,
       end: 306,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 312,
       end: 337,
       expression: [Node] } },
  Node {
    type: 'ForStatement',
    start: 339,
    end: 395,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 344,
       end: 353,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 355,
       end: 365,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 367,
       end: 370,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 376,
       end: 395,
       expression: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 397,
    end: 422,
    expression: 
     Node {
       type: 'CallExpression',
       start: 397,
       end: 421,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 37,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 13, end: 14, name: 'a' } ],
  body: Node { type: 'BlockStatement', start: 16, end: 37, body: [ [Node] ] } }
FunctionDeclaration
0
37
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'a' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'a' }
Identifier
13
14
a
Node {
  type: 'BlockStatement',
  start: 16,
  end: 37,
  body: 
   [ Node { type: 'ReturnStatement', start: 22, end: 35, argument: [Node] } ] }
BlockStatement
16
37
[ Node {
    type: 'ReturnStatement',
    start: 22,
    end: 35,
    argument: 
     Node {
       type: 'MemberExpression',
       start: 29,
       end: 34,
       object: [Node],
       property: [Node],
       computed: true } } ]
Node {
  type: 'ReturnStatement',
  start: 22,
  end: 35,
  argument: 
   Node {
     type: 'MemberExpression',
     start: 29,
     end: 34,
     object: Node { type: 'Identifier', start: 29, end: 30, name: 'a' },
     property: Node { type: 'Literal', start: 31, end: 33, value: 42, raw: '42' },
     computed: true } }
ReturnStatement
22
35
Node {
  type: 'MemberExpression',
  start: 29,
  end: 34,
  object: Node { type: 'Identifier', start: 29, end: 30, name: 'a' },
  property: Node { type: 'Literal', start: 31, end: 33, value: 42, raw: '42' },
  computed: true }
MemberExpression
29
34
Node { type: 'Identifier', start: 29, end: 30, name: 'a' }
Identifier
29
30
a
Node { type: 'Literal', start: 31, end: 33, value: 42, raw: '42' }
Literal
31
33
42
42
true
Node {
  type: 'ExpressionStatement',
  start: 39,
  end: 53,
  expression: 
   Node {
     type: 'CallExpression',
     start: 39,
     end: 52,
     callee: Node { type: 'Identifier', start: 39, end: 47, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
39
53
Node {
  type: 'CallExpression',
  start: 39,
  end: 52,
  callee: Node { type: 'Identifier', start: 39, end: 47, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 48, end: 51, name: 'foo' } ] }
CallExpression
39
52
Node { type: 'Identifier', start: 39, end: 47, name: 'noInline' }
Identifier
39
47
noInline
[ Node { type: 'Identifier', start: 48, end: 51, name: 'foo' } ]
Node { type: 'Identifier', start: 48, end: 51, name: 'foo' }
Identifier
48
51
foo
Node {
  type: 'VariableDeclaration',
  start: 55,
  end: 93,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 59,
       end: 92,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
55
93
[ Node {
    type: 'VariableDeclarator',
    start: 59,
    end: 92,
    id: Node { type: 'Identifier', start: 59, end: 69, name: 'shortArray' },
    init: 
     Node {
       type: 'NewExpression',
       start: 72,
       end: 92,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 59,
  end: 92,
  id: Node { type: 'Identifier', start: 59, end: 69, name: 'shortArray' },
  init: 
   Node {
     type: 'NewExpression',
     start: 72,
     end: 92,
     callee: Node { type: 'Identifier', start: 76, end: 88, name: 'Float32Array' },
     arguments: [ [Node] ] } }
VariableDeclarator
59
92
Node { type: 'Identifier', start: 59, end: 69, name: 'shortArray' }
Identifier
59
69
shortArray
Node {
  type: 'NewExpression',
  start: 72,
  end: 92,
  callee: Node { type: 'Identifier', start: 76, end: 88, name: 'Float32Array' },
  arguments: 
   [ Node { type: 'Literal', start: 89, end: 91, value: 10, raw: '10' } ] }
NewExpression
72
92
Node { type: 'Identifier', start: 76, end: 88, name: 'Float32Array' }
Identifier
76
88
Float32Array
[ Node { type: 'Literal', start: 89, end: 91, value: 10, raw: '10' } ]
Node { type: 'Literal', start: 89, end: 91, value: 10, raw: '10' }
Literal
89
91
10
10
var
Node {
  type: 'VariableDeclaration',
  start: 94,
  end: 132,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 98,
       end: 131,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
94
132
[ Node {
    type: 'VariableDeclarator',
    start: 98,
    end: 131,
    id: Node { type: 'Identifier', start: 98, end: 107, name: 'longArray' },
    init: 
     Node {
       type: 'NewExpression',
       start: 110,
       end: 131,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 98,
  end: 131,
  id: Node { type: 'Identifier', start: 98, end: 107, name: 'longArray' },
  init: 
   Node {
     type: 'NewExpression',
     start: 110,
     end: 131,
     callee: Node { type: 'Identifier', start: 114, end: 126, name: 'Float32Array' },
     arguments: [ [Node] ] } }
VariableDeclarator
98
131
Node { type: 'Identifier', start: 98, end: 107, name: 'longArray' }
Identifier
98
107
longArray
Node {
  type: 'NewExpression',
  start: 110,
  end: 131,
  callee: Node { type: 'Identifier', start: 114, end: 126, name: 'Float32Array' },
  arguments: 
   [ Node { type: 'Literal', start: 127, end: 130, value: 100, raw: '100' } ] }
NewExpression
110
131
Node { type: 'Identifier', start: 114, end: 126, name: 'Float32Array' }
Identifier
114
126
Float32Array
[ Node { type: 'Literal', start: 127, end: 130, value: 100, raw: '100' } ]
Node { type: 'Literal', start: 127, end: 130, value: 100, raw: '100' }
Literal
127
130
100
100
var
Node {
  type: 'FunctionDeclaration',
  start: 134,
  end: 275,
  id: Node { type: 'Identifier', start: 143, end: 147, name: 'test' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 148, end: 153, name: 'array' },
     Node { type: 'Identifier', start: 155, end: 163, name: 'expected' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 165,
     end: 275,
     body: [ [Node], [Node] ] } }
FunctionDeclaration
134
275
Node { type: 'Identifier', start: 143, end: 147, name: 'test' }
Identifier
143
147
test
false
false
false
[ Node { type: 'Identifier', start: 148, end: 153, name: 'array' },
  Node { type: 'Identifier', start: 155, end: 163, name: 'expected' } ]
Node { type: 'Identifier', start: 148, end: 153, name: 'array' }
Identifier
148
153
array
Node { type: 'Identifier', start: 155, end: 163, name: 'expected' }
Identifier
155
163
expected
Node {
  type: 'BlockStatement',
  start: 165,
  end: 275,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 171,
       end: 195,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 200,
       end: 273,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
165
275
[ Node {
    type: 'VariableDeclaration',
    start: 171,
    end: 195,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 200,
    end: 273,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 204,
       end: 222,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 232, end: 273, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 171,
  end: 195,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 175,
       end: 194,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
171
195
[ Node {
    type: 'VariableDeclarator',
    start: 175,
    end: 194,
    id: Node { type: 'Identifier', start: 175, end: 181, name: 'result' },
    init: 
     Node {
       type: 'CallExpression',
       start: 184,
       end: 194,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 175,
  end: 194,
  id: Node { type: 'Identifier', start: 175, end: 181, name: 'result' },
  init: 
   Node {
     type: 'CallExpression',
     start: 184,
     end: 194,
     callee: Node { type: 'Identifier', start: 184, end: 187, name: 'foo' },
     arguments: [ [Node] ] } }
VariableDeclarator
175
194
Node { type: 'Identifier', start: 175, end: 181, name: 'result' }
Identifier
175
181
result
Node {
  type: 'CallExpression',
  start: 184,
  end: 194,
  callee: Node { type: 'Identifier', start: 184, end: 187, name: 'foo' },
  arguments: 
   [ Node { type: 'Identifier', start: 188, end: 193, name: 'array' } ] }
CallExpression
184
194
Node { type: 'Identifier', start: 184, end: 187, name: 'foo' }
Identifier
184
187
foo
[ Node { type: 'Identifier', start: 188, end: 193, name: 'array' } ]
Node { type: 'Identifier', start: 188, end: 193, name: 'array' }
Identifier
188
193
array
var
Node {
  type: 'IfStatement',
  start: 200,
  end: 273,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 204,
     end: 222,
     left: Node { type: 'Identifier', start: 204, end: 210, name: 'result' },
     operator: '!=',
     right: Node { type: 'Identifier', start: 214, end: 222, name: 'expected' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 232,
     end: 273,
     argument: 
      Node {
        type: 'NewExpression',
        start: 238,
        end: 272,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
200
273
Node {
  type: 'BinaryExpression',
  start: 204,
  end: 222,
  left: Node { type: 'Identifier', start: 204, end: 210, name: 'result' },
  operator: '!=',
  right: Node { type: 'Identifier', start: 214, end: 222, name: 'expected' } }
BinaryExpression
204
222
Node { type: 'Identifier', start: 204, end: 210, name: 'result' }
Identifier
204
210
result
!=
Node { type: 'Identifier', start: 214, end: 222, name: 'expected' }
Identifier
214
222
expected
Node {
  type: 'ThrowStatement',
  start: 232,
  end: 273,
  argument: 
   Node {
     type: 'NewExpression',
     start: 238,
     end: 272,
     callee: Node { type: 'Identifier', start: 242, end: 247, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
232
273
Node {
  type: 'NewExpression',
  start: 238,
  end: 272,
  callee: Node { type: 'Identifier', start: 242, end: 247, name: 'Error' },
  arguments: 
   [ Node {
       type: 'BinaryExpression',
       start: 248,
       end: 271,
       left: [Node],
       operator: '+',
       right: [Node] } ] }
NewExpression
238
272
Node { type: 'Identifier', start: 242, end: 247, name: 'Error' }
Identifier
242
247
Error
[ Node {
    type: 'BinaryExpression',
    start: 248,
    end: 271,
    left: 
     Node {
       type: 'Literal',
       start: 248,
       end: 262,
       value: 'bad result: ',
       raw: '"bad result: "' },
    operator: '+',
    right: Node { type: 'Identifier', start: 265, end: 271, name: 'result' } } ]
Node {
  type: 'BinaryExpression',
  start: 248,
  end: 271,
  left: 
   Node {
     type: 'Literal',
     start: 248,
     end: 262,
     value: 'bad result: ',
     raw: '"bad result: "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 265, end: 271, name: 'result' } }
BinaryExpression
248
271
Node {
  type: 'Literal',
  start: 248,
  end: 262,
  value: 'bad result: ',
  raw: '"bad result: "' }
Literal
248
262
bad result: 
"bad result: "
+
Node { type: 'Identifier', start: 265, end: 271, name: 'result' }
Identifier
265
271
result
null
[+] Exception: float32-array-out-of-bounds.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 298,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 23,
       end: 84,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 86,
       end: 100,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 102,
       end: 134,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ForStatement',
       start: 136,
       end: 184,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'IfStatement',
       start: 186,
       end: 297,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
298
[ Node {
    type: 'FunctionDeclaration',
    start: 23,
    end: 84,
    id: Node { type: 'Identifier', start: 32, end: 35, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 39, end: 84, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 86,
    end: 100,
    expression: 
     Node {
       type: 'CallExpression',
       start: 86,
       end: 99,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 102,
    end: 134,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ForStatement',
    start: 136,
    end: 184,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 141,
       end: 150,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 152,
       end: 162,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 164,
       end: 167,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 173,
       end: 184,
       expression: [Node] } },
  Node {
    type: 'IfStatement',
    start: 186,
    end: 297,
    test: 
     Node {
       type: 'CallExpression',
       start: 190,
       end: 219,
       callee: [Node],
       arguments: [Array] },
    consequent: Node { type: 'ThrowStatement', start: 225, end: 297, argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 23,
  end: 84,
  id: Node { type: 'Identifier', start: 32, end: 35, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 36, end: 37, name: 'a' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 39,
     end: 84,
     body: [ [Node], [Node], [Node] ] } }
FunctionDeclaration
23
84
Node { type: 'Identifier', start: 32, end: 35, name: 'foo' }
Identifier
32
35
foo
false
false
false
[ Node { type: 'Identifier', start: 36, end: 37, name: 'a' } ]
Node { type: 'Identifier', start: 36, end: 37, name: 'a' }
Identifier
36
37
a
Node {
  type: 'BlockStatement',
  start: 39,
  end: 84,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 45,
       end: 54,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 59,
       end: 68,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 73,
       end: 82,
       expression: [Node] } ] }
BlockStatement
39
84
[ Node {
    type: 'ExpressionStatement',
    start: 45,
    end: 54,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 45,
       end: 53,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 59,
    end: 68,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 59,
       end: 67,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 73,
    end: 82,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 73,
       end: 81,
       operator: '=',
       left: [Node],
       right: [Node] } } ]
Node {
  type: 'ExpressionStatement',
  start: 45,
  end: 54,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 45,
     end: 53,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 45,
        end: 49,
        object: [Node],
        property: [Node],
        computed: true },
     right: Node { type: 'Literal', start: 52, end: 53, value: 1, raw: '1' } } }
ExpressionStatement
45
54
Node {
  type: 'AssignmentExpression',
  start: 45,
  end: 53,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 45,
     end: 49,
     object: Node { type: 'Identifier', start: 45, end: 46, name: 'a' },
     property: Node { type: 'Literal', start: 47, end: 48, value: 0, raw: '0' },
     computed: true },
  right: Node { type: 'Literal', start: 52, end: 53, value: 1, raw: '1' } }
AssignmentExpression
45
53
=
Node {
  type: 'MemberExpression',
  start: 45,
  end: 49,
  object: Node { type: 'Identifier', start: 45, end: 46, name: 'a' },
  property: Node { type: 'Literal', start: 47, end: 48, value: 0, raw: '0' },
  computed: true }
MemberExpression
45
49
Node { type: 'Identifier', start: 45, end: 46, name: 'a' }
Identifier
45
46
a
Node { type: 'Literal', start: 47, end: 48, value: 0, raw: '0' }
Literal
47
48
0
0
true
Node { type: 'Literal', start: 52, end: 53, value: 1, raw: '1' }
Literal
52
53
1
1
Node {
  type: 'ExpressionStatement',
  start: 59,
  end: 68,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 59,
     end: 67,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 59,
        end: 63,
        object: [Node],
        property: [Node],
        computed: true },
     right: Node { type: 'Literal', start: 66, end: 67, value: 2, raw: '2' } } }
ExpressionStatement
59
68
Node {
  type: 'AssignmentExpression',
  start: 59,
  end: 67,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 59,
     end: 63,
     object: Node { type: 'Identifier', start: 59, end: 60, name: 'a' },
     property: Node { type: 'Literal', start: 61, end: 62, value: 1, raw: '1' },
     computed: true },
  right: Node { type: 'Literal', start: 66, end: 67, value: 2, raw: '2' } }
AssignmentExpression
59
67
=
Node {
  type: 'MemberExpression',
  start: 59,
  end: 63,
  object: Node { type: 'Identifier', start: 59, end: 60, name: 'a' },
  property: Node { type: 'Literal', start: 61, end: 62, value: 1, raw: '1' },
  computed: true }
MemberExpression
59
63
Node { type: 'Identifier', start: 59, end: 60, name: 'a' }
Identifier
59
60
a
Node { type: 'Literal', start: 61, end: 62, value: 1, raw: '1' }
Literal
61
62
1
1
true
Node { type: 'Literal', start: 66, end: 67, value: 2, raw: '2' }
Literal
66
67
2
2
Node {
  type: 'ExpressionStatement',
  start: 73,
  end: 82,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 73,
     end: 81,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 73,
        end: 77,
        object: [Node],
        property: [Node],
        computed: true },
     right: Node { type: 'Literal', start: 80, end: 81, value: 3, raw: '3' } } }
ExpressionStatement
73
82
Node {
  type: 'AssignmentExpression',
  start: 73,
  end: 81,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 73,
     end: 77,
     object: Node { type: 'Identifier', start: 73, end: 74, name: 'a' },
     property: Node { type: 'Literal', start: 75, end: 76, value: 2, raw: '2' },
     computed: true },
  right: Node { type: 'Literal', start: 80, end: 81, value: 3, raw: '3' } }
AssignmentExpression
73
81
=
Node {
  type: 'MemberExpression',
  start: 73,
  end: 77,
  object: Node { type: 'Identifier', start: 73, end: 74, name: 'a' },
  property: Node { type: 'Literal', start: 75, end: 76, value: 2, raw: '2' },
  computed: true }
MemberExpression
73
77
Node { type: 'Identifier', start: 73, end: 74, name: 'a' }
Identifier
73
74
a
Node { type: 'Literal', start: 75, end: 76, value: 2, raw: '2' }
Literal
75
76
2
2
true
Node { type: 'Literal', start: 80, end: 81, value: 3, raw: '3' }
Literal
80
81
3
3
Node {
  type: 'ExpressionStatement',
  start: 86,
  end: 100,
  expression: 
   Node {
     type: 'CallExpression',
     start: 86,
     end: 99,
     callee: Node { type: 'Identifier', start: 86, end: 94, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
86
100
Node {
  type: 'CallExpression',
  start: 86,
  end: 99,
  callee: Node { type: 'Identifier', start: 86, end: 94, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 95, end: 98, name: 'foo' } ] }
CallExpression
86
99
Node { type: 'Identifier', start: 86, end: 94, name: 'noInline' }
Identifier
86
94
noInline
[ Node { type: 'Identifier', start: 95, end: 98, name: 'foo' } ]
Node { type: 'Identifier', start: 95, end: 98, name: 'foo' }
Identifier
95
98
foo
Node {
  type: 'VariableDeclaration',
  start: 102,
  end: 134,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 106,
       end: 133,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
102
134
[ Node {
    type: 'VariableDeclarator',
    start: 106,
    end: 133,
    id: Node { type: 'Identifier', start: 106, end: 111, name: 'array' },
    init: 
     Node {
       type: 'NewExpression',
       start: 114,
       end: 133,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 106,
  end: 133,
  id: Node { type: 'Identifier', start: 106, end: 111, name: 'array' },
  init: 
   Node {
     type: 'NewExpression',
     start: 114,
     end: 133,
     callee: Node { type: 'Identifier', start: 118, end: 130, name: 'Float32Array' },
     arguments: [ [Node] ] } }
VariableDeclarator
106
133
Node { type: 'Identifier', start: 106, end: 111, name: 'array' }
Identifier
106
111
array
Node {
  type: 'NewExpression',
  start: 114,
  end: 133,
  callee: Node { type: 'Identifier', start: 118, end: 130, name: 'Float32Array' },
  arguments: 
   [ Node { type: 'Literal', start: 131, end: 132, value: 1, raw: '1' } ] }
NewExpression
114
133
Node { type: 'Identifier', start: 118, end: 130, name: 'Float32Array' }
Identifier
118
130
Float32Array
[ Node { type: 'Literal', start: 131, end: 132, value: 1, raw: '1' } ]
Node { type: 'Literal', start: 131, end: 132, value: 1, raw: '1' }
Literal
131
132
1
1
var
Node {
  type: 'ForStatement',
  start: 136,
  end: 184,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 141,
     end: 150,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 152,
     end: 162,
     left: Node { type: 'Identifier', start: 152, end: 153, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 156,
        end: 162,
        value: 100000,
        raw: '100000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 164,
     end: 167,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 166, end: 167, name: 'i' } },
  body: 
   Node {
     type: 'ExpressionStatement',
     start: 173,
     end: 184,
     expression: 
      Node {
        type: 'CallExpression',
        start: 173,
        end: 183,
        callee: [Node],
        arguments: [Array] } } }
ForStatement
136
184
Node {
  type: 'VariableDeclaration',
  start: 141,
  end: 150,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 145,
       end: 150,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
141
150
[ Node {
    type: 'VariableDeclarator',
    start: 145,
    end: 150,
    id: Node { type: 'Identifier', start: 145, end: 146, name: 'i' },
    init: Node { type: 'Literal', start: 149, end: 150, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 145,
  end: 150,
  id: Node { type: 'Identifier', start: 145, end: 146, name: 'i' },
  init: Node { type: 'Literal', start: 149, end: 150, value: 0, raw: '0' } }
VariableDeclarator
145
150
Node { type: 'Identifier', start: 145, end: 146, name: 'i' }
Identifier
145
146
i
Node { type: 'Literal', start: 149, end: 150, value: 0, raw: '0' }
Literal
149
150
0
0
var
Node {
  type: 'BinaryExpression',
  start: 152,
  end: 162,
  left: Node { type: 'Identifier', start: 152, end: 153, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 156,
     end: 162,
     value: 100000,
     raw: '100000' } }
BinaryExpression
152
162
Node { type: 'Identifier', start: 152, end: 153, name: 'i' }
Identifier
152
153
i
<
Node {
  type: 'Literal',
  start: 156,
  end: 162,
  value: 100000,
  raw: '100000' }
Literal
156
162
100000
100000
Node {
  type: 'UpdateExpression',
  start: 164,
  end: 167,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 166, end: 167, name: 'i' } }
UpdateExpression
164
167
++
true
Node { type: 'Identifier', start: 166, end: 167, name: 'i' }
Identifier
166
167
i
Node {
  type: 'ExpressionStatement',
  start: 173,
  end: 184,
  expression: 
   Node {
     type: 'CallExpression',
     start: 173,
     end: 183,
     callee: Node { type: 'Identifier', start: 173, end: 176, name: 'foo' },
     arguments: [ [Node] ] } }
ExpressionStatement
173
184
Node {
  type: 'CallExpression',
  start: 173,
  end: 183,
  callee: Node { type: 'Identifier', start: 173, end: 176, name: 'foo' },
  arguments: 
   [ Node { type: 'Identifier', start: 177, end: 182, name: 'array' } ] }
CallExpression
173
183
Node { type: 'Identifier', start: 173, end: 176, name: 'foo' }
Identifier
173
176
foo
[ Node { type: 'Identifier', start: 177, end: 182, name: 'array' } ]
Node { type: 'Identifier', start: 177, end: 182, name: 'array' }
Identifier
177
182
array
Node {
  type: 'IfStatement',
  start: 186,
  end: 297,
  test: 
   Node {
     type: 'CallExpression',
     start: 190,
     end: 219,
     callee: 
      Node {
        type: 'Identifier',
        start: 190,
        end: 214,
        name: 'reoptimizationRetryCount' },
     arguments: [ [Node] ] },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 225,
     end: 297,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 231,
        end: 296,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
186
297
Node {
  type: 'CallExpression',
  start: 190,
  end: 219,
  callee: 
   Node {
     type: 'Identifier',
     start: 190,
     end: 214,
     name: 'reoptimizationRetryCount' },
  arguments: 
   [ Node { type: 'Identifier', start: 215, end: 218, name: 'foo' } ] }
CallExpression
190
219
Node {
  type: 'Identifier',
  start: 190,
  end: 214,
  name: 'reoptimizationRetryCount' }
Identifier
190
214
reoptimizationRetryCount
[ Node { type: 'Identifier', start: 215, end: 218, name: 'foo' } ]
Node { type: 'Identifier', start: 215, end: 218, name: 'foo' }
Identifier
215
218
foo
Node {
  type: 'ThrowStatement',
  start: 225,
  end: 297,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 231,
     end: 296,
     left: 
      Node {
        type: 'Literal',
        start: 231,
        end: 264,
        value: 'Error: unexpected retry count: ',
        raw: '"Error: unexpected retry count: "' },
     operator: '+',
     right: 
      Node {
        type: 'CallExpression',
        start: 267,
        end: 296,
        callee: [Node],
        arguments: [Array] } } }
ThrowStatement
225
297
Node {
  type: 'BinaryExpression',
  start: 231,
  end: 296,
  left: 
   Node {
     type: 'Literal',
     start: 231,
     end: 264,
     value: 'Error: unexpected retry count: ',
     raw: '"Error: unexpected retry count: "' },
  operator: '+',
  right: 
   Node {
     type: 'CallExpression',
     start: 267,
     end: 296,
     callee: 
      Node {
        type: 'Identifier',
        start: 267,
        end: 291,
        name: 'reoptimizationRetryCount' },
     arguments: [ [Node] ] } }
BinaryExpression
231
296
Node {
  type: 'Literal',
  start: 231,
  end: 264,
  value: 'Error: unexpected retry count: ',
  raw: '"Error: unexpected retry count: "' }
Literal
231
264
Error: unexpected retry count: 
"Error: unexpected retry count: "
+
Node {
  type: 'CallExpression',
  start: 267,
  end: 296,
  callee: 
   Node {
     type: 'Identifier',
     start: 267,
     end: 291,
     name: 'reoptimizationRetryCount' },
  arguments: 
   [ Node { type: 'Identifier', start: 292, end: 295, name: 'foo' } ] }
CallExpression
267
296
Node {
  type: 'Identifier',
  start: 267,
  end: 291,
  name: 'reoptimizationRetryCount' }
Identifier
267
291
reoptimizationRetryCount
[ Node { type: 'Identifier', start: 292, end: 295, name: 'foo' } ]
Node { type: 'Identifier', start: 292, end: 295, name: 'foo' }
Identifier
292
295
foo
null
[+] Exception: float32-repeat-out-of-bounds.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 563,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 104,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 106,
       end: 145,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 147,
       end: 161,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 163,
       end: 296,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 298,
       end: 344,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 346,
       end: 376,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 377,
       end: 441,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 443,
       end: 474,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 475,
       end: 501,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 502,
       end: 562,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
563
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 104,
    id: Node { type: 'Identifier', start: 9, end: 13, name: 'make' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 21, end: 104, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 106,
    end: 145,
    id: Node { type: 'Identifier', start: 115, end: 118, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 125, end: 145, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 147,
    end: 161,
    expression: 
     Node {
       type: 'CallExpression',
       start: 147,
       end: 160,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 163,
    end: 296,
    id: Node { type: 'Identifier', start: 172, end: 176, name: 'test' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 184, end: 296, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 298,
    end: 344,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 303,
       end: 312,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 314,
       end: 324,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 326,
       end: 329,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 335,
       end: 344,
       expression: [Node] } },
  Node {
    type: 'VariableDeclaration',
    start: 346,
    end: 376,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 377,
    end: 441,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 381,
       end: 398,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 404, end: 441, argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 443,
    end: 474,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 443,
       end: 473,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 475,
    end: 501,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 475,
       end: 500,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'IfStatement',
    start: 502,
    end: 562,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 506,
       end: 519,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 525, end: 562, argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 104,
  id: Node { type: 'Identifier', start: 9, end: 13, name: 'make' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 14, end: 19, name: 'value' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 21,
     end: 104,
     body: [ [Node], [Node], [Node] ] } }
FunctionDeclaration
0
104
Node { type: 'Identifier', start: 9, end: 13, name: 'make' }
Identifier
9
13
make
false
false
false
[ Node { type: 'Identifier', start: 14, end: 19, name: 'value' } ]
Node { type: 'Identifier', start: 14, end: 19, name: 'value' }
Identifier
14
19
value
Node {
  type: 'BlockStatement',
  start: 21,
  end: 104,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 27,
       end: 60,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 65,
       end: 83,
       expression: [Node] },
     Node { type: 'ReturnStatement', start: 88, end: 102, argument: [Node] } ] }
BlockStatement
21
104
[ Node {
    type: 'VariableDeclaration',
    start: 27,
    end: 60,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 65,
    end: 83,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 65,
       end: 82,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ReturnStatement',
    start: 88,
    end: 102,
    argument: Node { type: 'Identifier', start: 95, end: 101, name: 'result' } } ]
Node {
  type: 'VariableDeclaration',
  start: 27,
  end: 60,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 31,
       end: 59,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
27
60
[ Node {
    type: 'VariableDeclarator',
    start: 31,
    end: 59,
    id: Node { type: 'Identifier', start: 31, end: 37, name: 'result' },
    init: 
     Node {
       type: 'NewExpression',
       start: 40,
       end: 59,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 31,
  end: 59,
  id: Node { type: 'Identifier', start: 31, end: 37, name: 'result' },
  init: 
   Node {
     type: 'NewExpression',
     start: 40,
     end: 59,
     callee: Node { type: 'Identifier', start: 44, end: 56, name: 'Float32Array' },
     arguments: [ [Node] ] } }
VariableDeclarator
31
59
Node { type: 'Identifier', start: 31, end: 37, name: 'result' }
Identifier
31
37
result
Node {
  type: 'NewExpression',
  start: 40,
  end: 59,
  callee: Node { type: 'Identifier', start: 44, end: 56, name: 'Float32Array' },
  arguments: 
   [ Node { type: 'Literal', start: 57, end: 58, value: 1, raw: '1' } ] }
NewExpression
40
59
Node { type: 'Identifier', start: 44, end: 56, name: 'Float32Array' }
Identifier
44
56
Float32Array
[ Node { type: 'Literal', start: 57, end: 58, value: 1, raw: '1' } ]
Node { type: 'Literal', start: 57, end: 58, value: 1, raw: '1' }
Literal
57
58
1
1
var
Node {
  type: 'ExpressionStatement',
  start: 65,
  end: 83,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 65,
     end: 82,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 65,
        end: 74,
        object: [Node],
        property: [Node],
        computed: true },
     right: Node { type: 'Identifier', start: 77, end: 82, name: 'value' } } }
ExpressionStatement
65
83
Node {
  type: 'AssignmentExpression',
  start: 65,
  end: 82,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 65,
     end: 74,
     object: Node { type: 'Identifier', start: 65, end: 71, name: 'result' },
     property: Node { type: 'Literal', start: 72, end: 73, value: 0, raw: '0' },
     computed: true },
  right: Node { type: 'Identifier', start: 77, end: 82, name: 'value' } }
AssignmentExpression
65
82
=
Node {
  type: 'MemberExpression',
  start: 65,
  end: 74,
  object: Node { type: 'Identifier', start: 65, end: 71, name: 'result' },
  property: Node { type: 'Literal', start: 72, end: 73, value: 0, raw: '0' },
  computed: true }
MemberExpression
65
74
Node { type: 'Identifier', start: 65, end: 71, name: 'result' }
Identifier
65
71
result
Node { type: 'Literal', start: 72, end: 73, value: 0, raw: '0' }
Literal
72
73
0
0
true
Node { type: 'Identifier', start: 77, end: 82, name: 'value' }
Identifier
77
82
value
Node {
  type: 'ReturnStatement',
  start: 88,
  end: 102,
  argument: Node { type: 'Identifier', start: 95, end: 101, name: 'result' } }
ReturnStatement
88
102
Node { type: 'Identifier', start: 95, end: 101, name: 'result' }
Identifier
95
101
result
Node {
  type: 'FunctionDeclaration',
  start: 106,
  end: 145,
  id: Node { type: 'Identifier', start: 115, end: 118, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 119, end: 120, name: 'a' },
     Node { type: 'Identifier', start: 122, end: 123, name: 'i' } ],
  body: Node { type: 'BlockStatement', start: 125, end: 145, body: [ [Node] ] } }
FunctionDeclaration
106
145
Node { type: 'Identifier', start: 115, end: 118, name: 'foo' }
Identifier
115
118
foo
false
false
false
[ Node { type: 'Identifier', start: 119, end: 120, name: 'a' },
  Node { type: 'Identifier', start: 122, end: 123, name: 'i' } ]
Node { type: 'Identifier', start: 119, end: 120, name: 'a' }
Identifier
119
120
a
Node { type: 'Identifier', start: 122, end: 123, name: 'i' }
Identifier
122
123
i
Node {
  type: 'BlockStatement',
  start: 125,
  end: 145,
  body: 
   [ Node {
       type: 'ReturnStatement',
       start: 131,
       end: 143,
       argument: [Node] } ] }
BlockStatement
125
145
[ Node {
    type: 'ReturnStatement',
    start: 131,
    end: 143,
    argument: 
     Node {
       type: 'MemberExpression',
       start: 138,
       end: 142,
       object: [Node],
       property: [Node],
       computed: true } } ]
Node {
  type: 'ReturnStatement',
  start: 131,
  end: 143,
  argument: 
   Node {
     type: 'MemberExpression',
     start: 138,
     end: 142,
     object: Node { type: 'Identifier', start: 138, end: 139, name: 'a' },
     property: Node { type: 'Identifier', start: 140, end: 141, name: 'i' },
     computed: true } }
ReturnStatement
131
143
Node {
  type: 'MemberExpression',
  start: 138,
  end: 142,
  object: Node { type: 'Identifier', start: 138, end: 139, name: 'a' },
  property: Node { type: 'Identifier', start: 140, end: 141, name: 'i' },
  computed: true }
MemberExpression
138
142
Node { type: 'Identifier', start: 138, end: 139, name: 'a' }
Identifier
138
139
a
Node { type: 'Identifier', start: 140, end: 141, name: 'i' }
Identifier
140
141
i
true
Node {
  type: 'ExpressionStatement',
  start: 147,
  end: 161,
  expression: 
   Node {
     type: 'CallExpression',
     start: 147,
     end: 160,
     callee: Node { type: 'Identifier', start: 147, end: 155, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
147
161
Node {
  type: 'CallExpression',
  start: 147,
  end: 160,
  callee: Node { type: 'Identifier', start: 147, end: 155, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 156, end: 159, name: 'foo' } ] }
CallExpression
147
160
Node { type: 'Identifier', start: 147, end: 155, name: 'noInline' }
Identifier
147
155
noInline
[ Node { type: 'Identifier', start: 156, end: 159, name: 'foo' } ]
Node { type: 'Identifier', start: 156, end: 159, name: 'foo' }
Identifier
156
159
foo
Node {
  type: 'FunctionDeclaration',
  start: 163,
  end: 296,
  id: Node { type: 'Identifier', start: 172, end: 176, name: 'test' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 177, end: 182, name: 'value' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 184,
     end: 296,
     body: [ [Node], [Node] ] } }
FunctionDeclaration
163
296
Node { type: 'Identifier', start: 172, end: 176, name: 'test' }
Identifier
172
176
test
false
false
false
[ Node { type: 'Identifier', start: 177, end: 182, name: 'value' } ]
Node { type: 'Identifier', start: 177, end: 182, name: 'value' }
Identifier
177
182
value
Node {
  type: 'BlockStatement',
  start: 184,
  end: 296,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 190,
       end: 223,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 228,
       end: 294,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
184
296
[ Node {
    type: 'VariableDeclaration',
    start: 190,
    end: 223,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 228,
    end: 294,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 232,
       end: 247,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 257, end: 294, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 190,
  end: 223,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 194,
       end: 222,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
190
223
[ Node {
    type: 'VariableDeclarator',
    start: 194,
    end: 222,
    id: Node { type: 'Identifier', start: 194, end: 200, name: 'result' },
    init: 
     Node {
       type: 'CallExpression',
       start: 203,
       end: 222,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 194,
  end: 222,
  id: Node { type: 'Identifier', start: 194, end: 200, name: 'result' },
  init: 
   Node {
     type: 'CallExpression',
     start: 203,
     end: 222,
     callee: Node { type: 'Identifier', start: 203, end: 206, name: 'foo' },
     arguments: [ [Node], [Node] ] } }
VariableDeclarator
194
222
Node { type: 'Identifier', start: 194, end: 200, name: 'result' }
Identifier
194
200
result
Node {
  type: 'CallExpression',
  start: 203,
  end: 222,
  callee: Node { type: 'Identifier', start: 203, end: 206, name: 'foo' },
  arguments: 
   [ Node {
       type: 'CallExpression',
       start: 207,
       end: 218,
       callee: [Node],
       arguments: [Array] },
     Node { type: 'Literal', start: 220, end: 221, value: 0, raw: '0' } ] }
CallExpression
203
222
Node { type: 'Identifier', start: 203, end: 206, name: 'foo' }
Identifier
203
206
foo
[ Node {
    type: 'CallExpression',
    start: 207,
    end: 218,
    callee: Node { type: 'Identifier', start: 207, end: 211, name: 'make' },
    arguments: [ [Node] ] },
  Node { type: 'Literal', start: 220, end: 221, value: 0, raw: '0' } ]
Node {
  type: 'CallExpression',
  start: 207,
  end: 218,
  callee: Node { type: 'Identifier', start: 207, end: 211, name: 'make' },
  arguments: 
   [ Node { type: 'Identifier', start: 212, end: 217, name: 'value' } ] }
CallExpression
207
218
Node { type: 'Identifier', start: 207, end: 211, name: 'make' }
Identifier
207
211
make
[ Node { type: 'Identifier', start: 212, end: 217, name: 'value' } ]
Node { type: 'Identifier', start: 212, end: 217, name: 'value' }
Identifier
212
217
value
Node { type: 'Literal', start: 220, end: 221, value: 0, raw: '0' }
Literal
220
221
0
0
var
Node {
  type: 'IfStatement',
  start: 228,
  end: 294,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 232,
     end: 247,
     left: Node { type: 'Identifier', start: 232, end: 238, name: 'result' },
     operator: '!=',
     right: Node { type: 'Identifier', start: 242, end: 247, name: 'value' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 257,
     end: 294,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 263,
        end: 293,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
228
294
Node {
  type: 'BinaryExpression',
  start: 232,
  end: 247,
  left: Node { type: 'Identifier', start: 232, end: 238, name: 'result' },
  operator: '!=',
  right: Node { type: 'Identifier', start: 242, end: 247, name: 'value' } }
BinaryExpression
232
247
Node { type: 'Identifier', start: 232, end: 238, name: 'result' }
Identifier
232
238
result
!=
Node { type: 'Identifier', start: 242, end: 247, name: 'value' }
Identifier
242
247
value
Node {
  type: 'ThrowStatement',
  start: 257,
  end: 294,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 263,
     end: 293,
     left: 
      Node {
        type: 'Literal',
        start: 263,
        end: 284,
        value: 'Error: bad result: ',
        raw: '"Error: bad result: "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 287, end: 293, name: 'result' } } }
ThrowStatement
257
294
Node {
  type: 'BinaryExpression',
  start: 263,
  end: 293,
  left: 
   Node {
     type: 'Literal',
     start: 263,
     end: 284,
     value: 'Error: bad result: ',
     raw: '"Error: bad result: "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 287, end: 293, name: 'result' } }
BinaryExpression
263
293
Node {
  type: 'Literal',
  start: 263,
  end: 284,
  value: 'Error: bad result: ',
  raw: '"Error: bad result: "' }
Literal
263
284
Error: bad result: 
"Error: bad result: "
+
Node { type: 'Identifier', start: 287, end: 293, name: 'result' }
Identifier
287
293
result
null
[+] Exception: float32array-out-of-bounds.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 834,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 29,
       end: 65,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 67,
       end: 210,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 212,
       end: 614,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 616,
       end: 631,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 633,
       end: 684,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'IfStatement',
       start: 686,
       end: 833,
       test: [Node],
       consequent: [Node],
       alternate: [Node] } ],
  sourceType: 'script' }
Program
0
834
[ Node {
    type: 'FunctionDeclaration',
    start: 29,
    end: 65,
    id: Node { type: 'Identifier', start: 38, end: 41, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 45, end: 65, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 67,
    end: 210,
    id: Node { type: 'Identifier', start: 76, end: 87, name: 'isBigEndian' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 90, end: 210, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 212,
    end: 614,
    id: Node { type: 'Identifier', start: 221, end: 225, name: 'test' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 235, end: 614, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 616,
    end: 631,
    expression: 
     Node {
       type: 'CallExpression',
       start: 616,
       end: 630,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 633,
    end: 684,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 638,
       end: 647,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 649,
       end: 659,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 661,
       end: 664,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 670,
       end: 684,
       expression: [Node] } },
  Node {
    type: 'IfStatement',
    start: 686,
    end: 833,
    test: 
     Node {
       type: 'CallExpression',
       start: 690,
       end: 703,
       callee: [Node],
       arguments: [] },
    consequent: Node { type: 'BlockStatement', start: 705, end: 766, body: [Array] },
    alternate: Node { type: 'BlockStatement', start: 772, end: 833, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 29,
  end: 65,
  id: Node { type: 'Identifier', start: 38, end: 41, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 42, end: 43, name: 'o' } ],
  body: Node { type: 'BlockStatement', start: 45, end: 65, body: [ [Node] ] } }
FunctionDeclaration
29
65
Node { type: 'Identifier', start: 38, end: 41, name: 'foo' }
Identifier
38
41
foo
false
false
false
[ Node { type: 'Identifier', start: 42, end: 43, name: 'o' } ]
Node { type: 'Identifier', start: 42, end: 43, name: 'o' }
Identifier
42
43
o
Node {
  type: 'BlockStatement',
  start: 45,
  end: 65,
  body: 
   [ Node { type: 'ReturnStatement', start: 51, end: 63, argument: [Node] } ] }
BlockStatement
45
65
[ Node {
    type: 'ReturnStatement',
    start: 51,
    end: 63,
    argument: 
     Node {
       type: 'MemberExpression',
       start: 58,
       end: 62,
       object: [Node],
       property: [Node],
       computed: true } } ]
Node {
  type: 'ReturnStatement',
  start: 51,
  end: 63,
  argument: 
   Node {
     type: 'MemberExpression',
     start: 58,
     end: 62,
     object: Node { type: 'Identifier', start: 58, end: 59, name: 'o' },
     property: Node { type: 'Literal', start: 60, end: 61, value: 0, raw: '0' },
     computed: true } }
ReturnStatement
51
63
Node {
  type: 'MemberExpression',
  start: 58,
  end: 62,
  object: Node { type: 'Identifier', start: 58, end: 59, name: 'o' },
  property: Node { type: 'Literal', start: 60, end: 61, value: 0, raw: '0' },
  computed: true }
MemberExpression
58
62
Node { type: 'Identifier', start: 58, end: 59, name: 'o' }
Identifier
58
59
o
Node { type: 'Literal', start: 60, end: 61, value: 0, raw: '0' }
Literal
60
61
0
0
true
Node {
  type: 'FunctionDeclaration',
  start: 67,
  end: 210,
  id: Node { type: 'Identifier', start: 76, end: 87, name: 'isBigEndian' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: 
   Node {
     type: 'BlockStatement',
     start: 90,
     end: 210,
     body: [ [Node], [Node], [Node], [Node] ] } }
FunctionDeclaration
67
210
Node { type: 'Identifier', start: 76, end: 87, name: 'isBigEndian' }
Identifier
76
87
isBigEndian
false
false
false
[]
Node {
  type: 'BlockStatement',
  start: 90,
  end: 210,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 96,
       end: 125,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 130,
       end: 142,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 147,
       end: 186,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ReturnStatement',
       start: 191,
       end: 208,
       argument: [Node] } ] }
BlockStatement
90
210
[ Node {
    type: 'VariableDeclaration',
    start: 96,
    end: 125,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 130,
    end: 142,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 130,
       end: 141,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'VariableDeclaration',
    start: 147,
    end: 186,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ReturnStatement',
    start: 191,
    end: 208,
    argument: 
     Node {
       type: 'UnaryExpression',
       start: 198,
       end: 207,
       operator: '!',
       prefix: true,
       argument: [Node] } } ]
Node {
  type: 'VariableDeclaration',
  start: 96,
  end: 125,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 100,
       end: 124,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
96
125
[ Node {
    type: 'VariableDeclarator',
    start: 100,
    end: 124,
    id: Node { type: 'Identifier', start: 100, end: 104, name: 'word' },
    init: 
     Node {
       type: 'NewExpression',
       start: 107,
       end: 124,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 100,
  end: 124,
  id: Node { type: 'Identifier', start: 100, end: 104, name: 'word' },
  init: 
   Node {
     type: 'NewExpression',
     start: 107,
     end: 124,
     callee: Node { type: 'Identifier', start: 111, end: 121, name: 'Int16Array' },
     arguments: [ [Node] ] } }
VariableDeclarator
100
124
Node { type: 'Identifier', start: 100, end: 104, name: 'word' }
Identifier
100
104
word
Node {
  type: 'NewExpression',
  start: 107,
  end: 124,
  callee: Node { type: 'Identifier', start: 111, end: 121, name: 'Int16Array' },
  arguments: 
   [ Node { type: 'Literal', start: 122, end: 123, value: 1, raw: '1' } ] }
NewExpression
107
124
Node { type: 'Identifier', start: 111, end: 121, name: 'Int16Array' }
Identifier
111
121
Int16Array
[ Node { type: 'Literal', start: 122, end: 123, value: 1, raw: '1' } ]
Node { type: 'Literal', start: 122, end: 123, value: 1, raw: '1' }
Literal
122
123
1
1
var
Node {
  type: 'ExpressionStatement',
  start: 130,
  end: 142,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 130,
     end: 141,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 130,
        end: 137,
        object: [Node],
        property: [Node],
        computed: true },
     right: Node { type: 'Literal', start: 140, end: 141, value: 1, raw: '1' } } }
ExpressionStatement
130
142
Node {
  type: 'AssignmentExpression',
  start: 130,
  end: 141,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 130,
     end: 137,
     object: Node { type: 'Identifier', start: 130, end: 134, name: 'word' },
     property: Node { type: 'Literal', start: 135, end: 136, value: 0, raw: '0' },
     computed: true },
  right: Node { type: 'Literal', start: 140, end: 141, value: 1, raw: '1' } }
AssignmentExpression
130
141
=
Node {
  type: 'MemberExpression',
  start: 130,
  end: 137,
  object: Node { type: 'Identifier', start: 130, end: 134, name: 'word' },
  property: Node { type: 'Literal', start: 135, end: 136, value: 0, raw: '0' },
  computed: true }
MemberExpression
130
137
Node { type: 'Identifier', start: 130, end: 134, name: 'word' }
Identifier
130
134
word
Node { type: 'Literal', start: 135, end: 136, value: 0, raw: '0' }
Literal
135
136
0
0
true
Node { type: 'Literal', start: 140, end: 141, value: 1, raw: '1' }
Literal
140
141
1
1
Node {
  type: 'VariableDeclaration',
  start: 147,
  end: 186,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 151,
       end: 185,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
147
186
[ Node {
    type: 'VariableDeclarator',
    start: 151,
    end: 185,
    id: Node { type: 'Identifier', start: 151, end: 156, name: 'bytes' },
    init: 
     Node {
       type: 'NewExpression',
       start: 159,
       end: 185,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 151,
  end: 185,
  id: Node { type: 'Identifier', start: 151, end: 156, name: 'bytes' },
  init: 
   Node {
     type: 'NewExpression',
     start: 159,
     end: 185,
     callee: Node { type: 'Identifier', start: 163, end: 172, name: 'Int8Array' },
     arguments: [ [Node] ] } }
VariableDeclarator
151
185
Node { type: 'Identifier', start: 151, end: 156, name: 'bytes' }
Identifier
151
156
bytes
Node {
  type: 'NewExpression',
  start: 159,
  end: 185,
  callee: Node { type: 'Identifier', start: 163, end: 172, name: 'Int8Array' },
  arguments: 
   [ Node {
       type: 'MemberExpression',
       start: 173,
       end: 184,
       object: [Node],
       property: [Node],
       computed: false } ] }
NewExpression
159
185
Node { type: 'Identifier', start: 163, end: 172, name: 'Int8Array' }
Identifier
163
172
Int8Array
[ Node {
    type: 'MemberExpression',
    start: 173,
    end: 184,
    object: Node { type: 'Identifier', start: 173, end: 177, name: 'word' },
    property: Node { type: 'Identifier', start: 178, end: 184, name: 'buffer' },
    computed: false } ]
Node {
  type: 'MemberExpression',
  start: 173,
  end: 184,
  object: Node { type: 'Identifier', start: 173, end: 177, name: 'word' },
  property: Node { type: 'Identifier', start: 178, end: 184, name: 'buffer' },
  computed: false }
MemberExpression
173
184
Node { type: 'Identifier', start: 173, end: 177, name: 'word' }
Identifier
173
177
word
Node { type: 'Identifier', start: 178, end: 184, name: 'buffer' }
Identifier
178
184
buffer
false
var
Node {
  type: 'ReturnStatement',
  start: 191,
  end: 208,
  argument: 
   Node {
     type: 'UnaryExpression',
     start: 198,
     end: 207,
     operator: '!',
     prefix: true,
     argument: 
      Node {
        type: 'MemberExpression',
        start: 199,
        end: 207,
        object: [Node],
        property: [Node],
        computed: true } } }
ReturnStatement
191
208
Node {
  type: 'UnaryExpression',
  start: 198,
  end: 207,
  operator: '!',
  prefix: true,
  argument: 
   Node {
     type: 'MemberExpression',
     start: 199,
     end: 207,
     object: Node { type: 'Identifier', start: 199, end: 204, name: 'bytes' },
     property: Node { type: 'Literal', start: 205, end: 206, value: 0, raw: '0' },
     computed: true } }
UnaryExpression
198
207
!
true
Node {
  type: 'MemberExpression',
  start: 199,
  end: 207,
  object: Node { type: 'Identifier', start: 199, end: 204, name: 'bytes' },
  property: Node { type: 'Literal', start: 205, end: 206, value: 0, raw: '0' },
  computed: true }
MemberExpression
199
207
Node { type: 'Identifier', start: 199, end: 204, name: 'bytes' }
Identifier
199
204
bytes
Node { type: 'Literal', start: 205, end: 206, value: 0, raw: '0' }
Literal
205
206
0
0
true
Node {
  type: 'FunctionDeclaration',
  start: 212,
  end: 614,
  id: Node { type: 'Identifier', start: 221, end: 225, name: 'test' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 226, end: 227, name: 'a' },
     Node { type: 'Identifier', start: 229, end: 230, name: 'b' },
     Node { type: 'Identifier', start: 232, end: 233, name: 'x' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 235,
     end: 614,
     body: [ [Node], [Node], [Node], [Node], [Node], [Node], [Node] ] } }
FunctionDeclaration
212
614
Node { type: 'Identifier', start: 221, end: 225, name: 'test' }
Identifier
221
225
test
false
false
false
[ Node { type: 'Identifier', start: 226, end: 227, name: 'a' },
  Node { type: 'Identifier', start: 229, end: 230, name: 'b' },
  Node { type: 'Identifier', start: 232, end: 233, name: 'x' } ]
Node { type: 'Identifier', start: 226, end: 227, name: 'a' }
Identifier
226
227
a
Node { type: 'Identifier', start: 229, end: 230, name: 'b' }
Identifier
229
230
b
Node { type: 'Identifier', start: 232, end: 233, name: 'x' }
Identifier
232
233
x
Node {
  type: 'BlockStatement',
  start: 235,
  end: 614,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 241,
       end: 274,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 279,
       end: 295,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 300,
       end: 316,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 321,
       end: 372,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 377,
       end: 407,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 412,
       end: 437,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 442,
       end: 612,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
235
614
[ Node {
    type: 'VariableDeclaration',
    start: 241,
    end: 274,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 279,
    end: 295,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 279,
       end: 294,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 300,
    end: 316,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 300,
       end: 315,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'VariableDeclaration',
    start: 321,
    end: 372,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 377,
    end: 407,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 412,
    end: 437,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 442,
    end: 612,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 446,
       end: 471,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 481, end: 612, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 241,
  end: 274,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 245,
       end: 273,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
241
274
[ Node {
    type: 'VariableDeclarator',
    start: 245,
    end: 273,
    id: Node { type: 'Identifier', start: 245, end: 253, name: 'intArray' },
    init: 
     Node {
       type: 'NewExpression',
       start: 256,
       end: 273,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 245,
  end: 273,
  id: Node { type: 'Identifier', start: 245, end: 253, name: 'intArray' },
  init: 
   Node {
     type: 'NewExpression',
     start: 256,
     end: 273,
     callee: Node { type: 'Identifier', start: 260, end: 270, name: 'Int32Array' },
     arguments: [ [Node] ] } }
VariableDeclarator
245
273
Node { type: 'Identifier', start: 245, end: 253, name: 'intArray' }
Identifier
245
253
intArray
Node {
  type: 'NewExpression',
  start: 256,
  end: 273,
  callee: Node { type: 'Identifier', start: 260, end: 270, name: 'Int32Array' },
  arguments: 
   [ Node { type: 'Literal', start: 271, end: 272, value: 2, raw: '2' } ] }
NewExpression
256
273
Node { type: 'Identifier', start: 260, end: 270, name: 'Int32Array' }
Identifier
260
270
Int32Array
[ Node { type: 'Literal', start: 271, end: 272, value: 2, raw: '2' } ]
Node { type: 'Literal', start: 271, end: 272, value: 2, raw: '2' }
Literal
271
272
2
2
var
Node {
  type: 'ExpressionStatement',
  start: 279,
  end: 295,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 279,
     end: 294,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 279,
        end: 290,
        object: [Node],
        property: [Node],
        computed: true },
     right: Node { type: 'Identifier', start: 293, end: 294, name: 'a' } } }
ExpressionStatement
279
295
Node {
  type: 'AssignmentExpression',
  start: 279,
  end: 294,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 279,
     end: 290,
     object: Node { type: 'Identifier', start: 279, end: 287, name: 'intArray' },
     property: Node { type: 'Literal', start: 288, end: 289, value: 0, raw: '0' },
     computed: true },
  right: Node { type: 'Identifier', start: 293, end: 294, name: 'a' } }
AssignmentExpression
279
294
=
Node {
  type: 'MemberExpression',
  start: 279,
  end: 290,
  object: Node { type: 'Identifier', start: 279, end: 287, name: 'intArray' },
  property: Node { type: 'Literal', start: 288, end: 289, value: 0, raw: '0' },
  computed: true }
MemberExpression
279
290
Node { type: 'Identifier', start: 279, end: 287, name: 'intArray' }
Identifier
279
287
intArray
Node { type: 'Literal', start: 288, end: 289, value: 0, raw: '0' }
Literal
288
289
0
0
true
Node { type: 'Identifier', start: 293, end: 294, name: 'a' }
Identifier
293
294
a
Node {
  type: 'ExpressionStatement',
  start: 300,
  end: 316,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 300,
     end: 315,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 300,
        end: 311,
        object: [Node],
        property: [Node],
        computed: true },
     right: Node { type: 'Identifier', start: 314, end: 315, name: 'b' } } }
ExpressionStatement
300
316
Node {
  type: 'AssignmentExpression',
  start: 300,
  end: 315,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 300,
     end: 311,
     object: Node { type: 'Identifier', start: 300, end: 308, name: 'intArray' },
     property: Node { type: 'Literal', start: 309, end: 310, value: 1, raw: '1' },
     computed: true },
  right: Node { type: 'Identifier', start: 314, end: 315, name: 'b' } }
AssignmentExpression
300
315
=
Node {
  type: 'MemberExpression',
  start: 300,
  end: 311,
  object: Node { type: 'Identifier', start: 300, end: 308, name: 'intArray' },
  property: Node { type: 'Literal', start: 309, end: 310, value: 1, raw: '1' },
  computed: true }
MemberExpression
300
311
Node { type: 'Identifier', start: 300, end: 308, name: 'intArray' }
Identifier
300
308
intArray
Node { type: 'Literal', start: 309, end: 310, value: 1, raw: '1' }
Literal
309
310
1
1
true
Node { type: 'Identifier', start: 314, end: 315, name: 'b' }
Identifier
314
315
b
Node {
  type: 'VariableDeclaration',
  start: 321,
  end: 372,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 325,
       end: 371,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
321
372
[ Node {
    type: 'VariableDeclarator',
    start: 325,
    end: 371,
    id: Node { type: 'Identifier', start: 325, end: 335, name: 'floatArray' },
    init: 
     Node {
       type: 'NewExpression',
       start: 338,
       end: 371,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 325,
  end: 371,
  id: Node { type: 'Identifier', start: 325, end: 335, name: 'floatArray' },
  init: 
   Node {
     type: 'NewExpression',
     start: 338,
     end: 371,
     callee: Node { type: 'Identifier', start: 342, end: 354, name: 'Float64Array' },
     arguments: [ [Node] ] } }
VariableDeclarator
325
371
Node { type: 'Identifier', start: 325, end: 335, name: 'floatArray' }
Identifier
325
335
floatArray
Node {
  type: 'NewExpression',
  start: 338,
  end: 371,
  callee: Node { type: 'Identifier', start: 342, end: 354, name: 'Float64Array' },
  arguments: 
   [ Node {
       type: 'MemberExpression',
       start: 355,
       end: 370,
       object: [Node],
       property: [Node],
       computed: false } ] }
NewExpression
338
371
Node { type: 'Identifier', start: 342, end: 354, name: 'Float64Array' }
Identifier
342
354
Float64Array
[ Node {
    type: 'MemberExpression',
    start: 355,
    end: 370,
    object: Node { type: 'Identifier', start: 355, end: 363, name: 'intArray' },
    property: Node { type: 'Identifier', start: 364, end: 370, name: 'buffer' },
    computed: false } ]
Node {
  type: 'MemberExpression',
  start: 355,
  end: 370,
  object: Node { type: 'Identifier', start: 355, end: 363, name: 'intArray' },
  property: Node { type: 'Identifier', start: 364, end: 370, name: 'buffer' },
  computed: false }
MemberExpression
355
370
Node { type: 'Identifier', start: 355, end: 363, name: 'intArray' }
Identifier
355
363
intArray
Node { type: 'Identifier', start: 364, end: 370, name: 'buffer' }
Identifier
364
370
buffer
false
var
Node {
  type: 'VariableDeclaration',
  start: 377,
  end: 407,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 381,
       end: 406,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
377
407
[ Node {
    type: 'VariableDeclarator',
    start: 381,
    end: 406,
    id: Node { type: 'Identifier', start: 381, end: 388, name: 'element' },
    init: 
     Node {
       type: 'CallExpression',
       start: 391,
       end: 406,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 381,
  end: 406,
  id: Node { type: 'Identifier', start: 381, end: 388, name: 'element' },
  init: 
   Node {
     type: 'CallExpression',
     start: 391,
     end: 406,
     callee: Node { type: 'Identifier', start: 391, end: 394, name: 'foo' },
     arguments: [ [Node] ] } }
VariableDeclarator
381
406
Node { type: 'Identifier', start: 381, end: 388, name: 'element' }
Identifier
381
388
element
Node {
  type: 'CallExpression',
  start: 391,
  end: 406,
  callee: Node { type: 'Identifier', start: 391, end: 394, name: 'foo' },
  arguments: 
   [ Node { type: 'Identifier', start: 395, end: 405, name: 'floatArray' } ] }
CallExpression
391
406
Node { type: 'Identifier', start: 391, end: 394, name: 'foo' }
Identifier
391
394
foo
[ Node { type: 'Identifier', start: 395, end: 405, name: 'floatArray' } ]
Node { type: 'Identifier', start: 395, end: 405, name: 'floatArray' }
Identifier
395
405
floatArray
var
Node {
  type: 'VariableDeclaration',
  start: 412,
  end: 437,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 416,
       end: 436,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
412
437
[ Node {
    type: 'VariableDeclarator',
    start: 416,
    end: 436,
    id: Node { type: 'Identifier', start: 416, end: 422, name: 'result' },
    init: 
     Node {
       type: 'BinaryExpression',
       start: 425,
       end: 436,
       left: [Node],
       operator: '+',
       right: [Node] } } ]
Node {
  type: 'VariableDeclarator',
  start: 416,
  end: 436,
  id: Node { type: 'Identifier', start: 416, end: 422, name: 'result' },
  init: 
   Node {
     type: 'BinaryExpression',
     start: 425,
     end: 436,
     left: Node { type: 'Identifier', start: 425, end: 432, name: 'element' },
     operator: '+',
     right: Node { type: 'Literal', start: 435, end: 436, value: 1, raw: '1' } } }
VariableDeclarator
416
436
Node { type: 'Identifier', start: 416, end: 422, name: 'result' }
Identifier
416
422
result
Node {
  type: 'BinaryExpression',
  start: 425,
  end: 436,
  left: Node { type: 'Identifier', start: 425, end: 432, name: 'element' },
  operator: '+',
  right: Node { type: 'Literal', start: 435, end: 436, value: 1, raw: '1' } }
BinaryExpression
425
436
Node { type: 'Identifier', start: 425, end: 432, name: 'element' }
Identifier
425
432
element
+
Node { type: 'Literal', start: 435, end: 436, value: 1, raw: '1' }
Literal
435
436
1
1
var
Node {
  type: 'IfStatement',
  start: 442,
  end: 612,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 446,
     end: 471,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 447,
        end: 458,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '!=',
     right: 
      Node {
        type: 'BinaryExpression',
        start: 464,
        end: 470,
        left: [Node],
        operator: '+',
        right: [Node] } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 481,
     end: 612,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 487,
        end: 611,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
442
612
Node {
  type: 'BinaryExpression',
  start: 446,
  end: 471,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 447,
     end: 458,
     left: Node { type: 'Literal', start: 447, end: 449, value: '', raw: '""' },
     operator: '+',
     right: Node { type: 'Identifier', start: 452, end: 458, name: 'result' } },
  operator: '!=',
  right: 
   Node {
     type: 'BinaryExpression',
     start: 464,
     end: 470,
     left: Node { type: 'Literal', start: 464, end: 466, value: '', raw: '""' },
     operator: '+',
     right: Node { type: 'Identifier', start: 469, end: 470, name: 'x' } } }
BinaryExpression
446
471
Node {
  type: 'BinaryExpression',
  start: 447,
  end: 458,
  left: Node { type: 'Literal', start: 447, end: 449, value: '', raw: '""' },
  operator: '+',
  right: Node { type: 'Identifier', start: 452, end: 458, name: 'result' } }
BinaryExpression
447
458
Node { type: 'Literal', start: 447, end: 449, value: '', raw: '""' }
Literal
447
449

""
+
Node { type: 'Identifier', start: 452, end: 458, name: 'result' }
Identifier
452
458
result
!=
Node {
  type: 'BinaryExpression',
  start: 464,
  end: 470,
  left: Node { type: 'Literal', start: 464, end: 466, value: '', raw: '""' },
  operator: '+',
  right: Node { type: 'Identifier', start: 469, end: 470, name: 'x' } }
BinaryExpression
464
470
Node { type: 'Literal', start: 464, end: 466, value: '', raw: '""' }
Literal
464
466

""
+
Node { type: 'Identifier', start: 469, end: 470, name: 'x' }
Identifier
469
470
x
Node {
  type: 'ThrowStatement',
  start: 481,
  end: 612,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 487,
     end: 611,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 487,
        end: 591,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: 
      Node {
        type: 'Literal',
        start: 594,
        end: 611,
        value: ' from the array',
        raw: '" from the array"' } } }
ThrowStatement
481
612
Node {
  type: 'BinaryExpression',
  start: 487,
  end: 611,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 487,
     end: 591,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 487,
        end: 581,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Identifier', start: 584, end: 591, name: 'element' } },
  operator: '+',
  right: 
   Node {
     type: 'Literal',
     start: 594,
     end: 611,
     value: ' from the array',
     raw: '" from the array"' } }
BinaryExpression
487
611
Node {
  type: 'BinaryExpression',
  start: 487,
  end: 591,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 487,
     end: 581,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 487,
        end: 567,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: 
      Node {
        type: 'Literal',
        start: 570,
        end: 581,
        value: '; loaded ',
        raw: '"; loaded "' } },
  operator: '+',
  right: Node { type: 'Identifier', start: 584, end: 591, name: 'element' } }
BinaryExpression
487
591
Node {
  type: 'BinaryExpression',
  start: 487,
  end: 581,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 487,
     end: 567,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 487,
        end: 563,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Identifier', start: 566, end: 567, name: 'x' } },
  operator: '+',
  right: 
   Node {
     type: 'Literal',
     start: 570,
     end: 581,
     value: '; loaded ',
     raw: '"; loaded "' } }
BinaryExpression
487
581
Node {
  type: 'BinaryExpression',
  start: 487,
  end: 567,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 487,
     end: 563,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 487,
        end: 542,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: 
      Node {
        type: 'Literal',
        start: 545,
        end: 563,
        value: ', but expected: ',
        raw: '", but expected: "' } },
  operator: '+',
  right: Node { type: 'Identifier', start: 566, end: 567, name: 'x' } }
BinaryExpression
487
567
Node {
  type: 'BinaryExpression',
  start: 487,
  end: 563,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 487,
     end: 542,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 487,
        end: 533,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Identifier', start: 536, end: 542, name: 'result' } },
  operator: '+',
  right: 
   Node {
     type: 'Literal',
     start: 545,
     end: 563,
     value: ', but expected: ',
     raw: '", but expected: "' } }
BinaryExpression
487
563
Node {
  type: 'BinaryExpression',
  start: 487,
  end: 542,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 487,
     end: 533,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 487,
        end: 526,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Literal', start: 529, end: 533, value: ': ', raw: '": "' } },
  operator: '+',
  right: Node { type: 'Identifier', start: 536, end: 542, name: 'result' } }
BinaryExpression
487
542
Node {
  type: 'BinaryExpression',
  start: 487,
  end: 533,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 487,
     end: 526,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 487,
        end: 522,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Identifier', start: 525, end: 526, name: 'b' } },
  operator: '+',
  right: Node { type: 'Literal', start: 529, end: 533, value: ': ', raw: '": "' } }
BinaryExpression
487
533
Node {
  type: 'BinaryExpression',
  start: 487,
  end: 526,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 487,
     end: 522,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 487,
        end: 515,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Literal', start: 518, end: 522, value: ', ', raw: '", "' } },
  operator: '+',
  right: Node { type: 'Identifier', start: 525, end: 526, name: 'b' } }
BinaryExpression
487
526
Node {
  type: 'BinaryExpression',
  start: 487,
  end: 522,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 487,
     end: 515,
     left: 
      Node {
        type: 'Literal',
        start: 487,
        end: 511,
        value: 'Error: bad result for ',
        raw: '"Error: bad result for "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 514, end: 515, name: 'a' } },
  operator: '+',
  right: Node { type: 'Literal', start: 518, end: 522, value: ', ', raw: '", "' } }
BinaryExpression
487
522
Node {
  type: 'BinaryExpression',
  start: 487,
  end: 515,
  left: 
   Node {
     type: 'Literal',
     start: 487,
     end: 511,
     value: 'Error: bad result for ',
     raw: '"Error: bad result for "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 514, end: 515, name: 'a' } }
BinaryExpression
487
515
Node {
  type: 'Literal',
  start: 487,
  end: 511,
  value: 'Error: bad result for ',
  raw: '"Error: bad result for "' }
Literal
487
511
Error: bad result for 
"Error: bad result for "
+
Node { type: 'Identifier', start: 514, end: 515, name: 'a' }
Identifier
514
515
a
+
Node { type: 'Literal', start: 518, end: 522, value: ', ', raw: '", "' }
Literal
518
522
, 
", "
+
Node { type: 'Identifier', start: 525, end: 526, name: 'b' }
Identifier
525
526
b
+
Node { type: 'Literal', start: 529, end: 533, value: ': ', raw: '": "' }
Literal
529
533
: 
": "
+
Node { type: 'Identifier', start: 536, end: 542, name: 'result' }
Identifier
536
542
result
+
Node {
  type: 'Literal',
  start: 545,
  end: 563,
  value: ', but expected: ',
  raw: '", but expected: "' }
Literal
545
563
, but expected: 
", but expected: "
+
Node { type: 'Identifier', start: 566, end: 567, name: 'x' }
Identifier
566
567
x
+
Node {
  type: 'Literal',
  start: 570,
  end: 581,
  value: '; loaded ',
  raw: '"; loaded "' }
Literal
570
581
; loaded 
"; loaded "
+
Node { type: 'Identifier', start: 584, end: 591, name: 'element' }
Identifier
584
591
element
+
Node {
  type: 'Literal',
  start: 594,
  end: 611,
  value: ' from the array',
  raw: '" from the array"' }
Literal
594
611
 from the array
" from the array"
null
[+] Exception: float64-array-nan-inlined.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 804,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 36,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 38,
       end: 52,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 54,
       end: 197,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 199,
       end: 601,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 603,
       end: 654,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'IfStatement',
       start: 656,
       end: 803,
       test: [Node],
       consequent: [Node],
       alternate: [Node] } ],
  sourceType: 'script' }
Program
0
804
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 36,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 16, end: 36, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 38,
    end: 52,
    expression: 
     Node {
       type: 'CallExpression',
       start: 38,
       end: 51,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 54,
    end: 197,
    id: Node { type: 'Identifier', start: 63, end: 74, name: 'isBigEndian' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 77, end: 197, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 199,
    end: 601,
    id: Node { type: 'Identifier', start: 208, end: 212, name: 'test' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 222, end: 601, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 603,
    end: 654,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 608,
       end: 617,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 619,
       end: 629,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 631,
       end: 634,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 640,
       end: 654,
       expression: [Node] } },
  Node {
    type: 'IfStatement',
    start: 656,
    end: 803,
    test: 
     Node {
       type: 'CallExpression',
       start: 660,
       end: 673,
       callee: [Node],
       arguments: [] },
    consequent: Node { type: 'BlockStatement', start: 675, end: 736, body: [Array] },
    alternate: Node { type: 'BlockStatement', start: 742, end: 803, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 36,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 13, end: 14, name: 'o' } ],
  body: Node { type: 'BlockStatement', start: 16, end: 36, body: [ [Node] ] } }
FunctionDeclaration
0
36
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'o' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'o' }
Identifier
13
14
o
Node {
  type: 'BlockStatement',
  start: 16,
  end: 36,
  body: 
   [ Node { type: 'ReturnStatement', start: 22, end: 34, argument: [Node] } ] }
BlockStatement
16
36
[ Node {
    type: 'ReturnStatement',
    start: 22,
    end: 34,
    argument: 
     Node {
       type: 'MemberExpression',
       start: 29,
       end: 33,
       object: [Node],
       property: [Node],
       computed: true } } ]
Node {
  type: 'ReturnStatement',
  start: 22,
  end: 34,
  argument: 
   Node {
     type: 'MemberExpression',
     start: 29,
     end: 33,
     object: Node { type: 'Identifier', start: 29, end: 30, name: 'o' },
     property: Node { type: 'Literal', start: 31, end: 32, value: 0, raw: '0' },
     computed: true } }
ReturnStatement
22
34
Node {
  type: 'MemberExpression',
  start: 29,
  end: 33,
  object: Node { type: 'Identifier', start: 29, end: 30, name: 'o' },
  property: Node { type: 'Literal', start: 31, end: 32, value: 0, raw: '0' },
  computed: true }
MemberExpression
29
33
Node { type: 'Identifier', start: 29, end: 30, name: 'o' }
Identifier
29
30
o
Node { type: 'Literal', start: 31, end: 32, value: 0, raw: '0' }
Literal
31
32
0
0
true
Node {
  type: 'ExpressionStatement',
  start: 38,
  end: 52,
  expression: 
   Node {
     type: 'CallExpression',
     start: 38,
     end: 51,
     callee: Node { type: 'Identifier', start: 38, end: 46, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
38
52
Node {
  type: 'CallExpression',
  start: 38,
  end: 51,
  callee: Node { type: 'Identifier', start: 38, end: 46, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 47, end: 50, name: 'foo' } ] }
CallExpression
38
51
Node { type: 'Identifier', start: 38, end: 46, name: 'noInline' }
Identifier
38
46
noInline
[ Node { type: 'Identifier', start: 47, end: 50, name: 'foo' } ]
Node { type: 'Identifier', start: 47, end: 50, name: 'foo' }
Identifier
47
50
foo
Node {
  type: 'FunctionDeclaration',
  start: 54,
  end: 197,
  id: Node { type: 'Identifier', start: 63, end: 74, name: 'isBigEndian' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: 
   Node {
     type: 'BlockStatement',
     start: 77,
     end: 197,
     body: [ [Node], [Node], [Node], [Node] ] } }
FunctionDeclaration
54
197
Node { type: 'Identifier', start: 63, end: 74, name: 'isBigEndian' }
Identifier
63
74
isBigEndian
false
false
false
[]
Node {
  type: 'BlockStatement',
  start: 77,
  end: 197,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 83,
       end: 112,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 117,
       end: 129,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 134,
       end: 173,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ReturnStatement',
       start: 178,
       end: 195,
       argument: [Node] } ] }
BlockStatement
77
197
[ Node {
    type: 'VariableDeclaration',
    start: 83,
    end: 112,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 117,
    end: 129,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 117,
       end: 128,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'VariableDeclaration',
    start: 134,
    end: 173,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ReturnStatement',
    start: 178,
    end: 195,
    argument: 
     Node {
       type: 'UnaryExpression',
       start: 185,
       end: 194,
       operator: '!',
       prefix: true,
       argument: [Node] } } ]
Node {
  type: 'VariableDeclaration',
  start: 83,
  end: 112,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 87,
       end: 111,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
83
112
[ Node {
    type: 'VariableDeclarator',
    start: 87,
    end: 111,
    id: Node { type: 'Identifier', start: 87, end: 91, name: 'word' },
    init: 
     Node {
       type: 'NewExpression',
       start: 94,
       end: 111,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 87,
  end: 111,
  id: Node { type: 'Identifier', start: 87, end: 91, name: 'word' },
  init: 
   Node {
     type: 'NewExpression',
     start: 94,
     end: 111,
     callee: Node { type: 'Identifier', start: 98, end: 108, name: 'Int16Array' },
     arguments: [ [Node] ] } }
VariableDeclarator
87
111
Node { type: 'Identifier', start: 87, end: 91, name: 'word' }
Identifier
87
91
word
Node {
  type: 'NewExpression',
  start: 94,
  end: 111,
  callee: Node { type: 'Identifier', start: 98, end: 108, name: 'Int16Array' },
  arguments: 
   [ Node { type: 'Literal', start: 109, end: 110, value: 1, raw: '1' } ] }
NewExpression
94
111
Node { type: 'Identifier', start: 98, end: 108, name: 'Int16Array' }
Identifier
98
108
Int16Array
[ Node { type: 'Literal', start: 109, end: 110, value: 1, raw: '1' } ]
Node { type: 'Literal', start: 109, end: 110, value: 1, raw: '1' }
Literal
109
110
1
1
var
Node {
  type: 'ExpressionStatement',
  start: 117,
  end: 129,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 117,
     end: 128,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 117,
        end: 124,
        object: [Node],
        property: [Node],
        computed: true },
     right: Node { type: 'Literal', start: 127, end: 128, value: 1, raw: '1' } } }
ExpressionStatement
117
129
Node {
  type: 'AssignmentExpression',
  start: 117,
  end: 128,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 117,
     end: 124,
     object: Node { type: 'Identifier', start: 117, end: 121, name: 'word' },
     property: Node { type: 'Literal', start: 122, end: 123, value: 0, raw: '0' },
     computed: true },
  right: Node { type: 'Literal', start: 127, end: 128, value: 1, raw: '1' } }
AssignmentExpression
117
128
=
Node {
  type: 'MemberExpression',
  start: 117,
  end: 124,
  object: Node { type: 'Identifier', start: 117, end: 121, name: 'word' },
  property: Node { type: 'Literal', start: 122, end: 123, value: 0, raw: '0' },
  computed: true }
MemberExpression
117
124
Node { type: 'Identifier', start: 117, end: 121, name: 'word' }
Identifier
117
121
word
Node { type: 'Literal', start: 122, end: 123, value: 0, raw: '0' }
Literal
122
123
0
0
true
Node { type: 'Literal', start: 127, end: 128, value: 1, raw: '1' }
Literal
127
128
1
1
Node {
  type: 'VariableDeclaration',
  start: 134,
  end: 173,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 138,
       end: 172,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
134
173
[ Node {
    type: 'VariableDeclarator',
    start: 138,
    end: 172,
    id: Node { type: 'Identifier', start: 138, end: 143, name: 'bytes' },
    init: 
     Node {
       type: 'NewExpression',
       start: 146,
       end: 172,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 138,
  end: 172,
  id: Node { type: 'Identifier', start: 138, end: 143, name: 'bytes' },
  init: 
   Node {
     type: 'NewExpression',
     start: 146,
     end: 172,
     callee: Node { type: 'Identifier', start: 150, end: 159, name: 'Int8Array' },
     arguments: [ [Node] ] } }
VariableDeclarator
138
172
Node { type: 'Identifier', start: 138, end: 143, name: 'bytes' }
Identifier
138
143
bytes
Node {
  type: 'NewExpression',
  start: 146,
  end: 172,
  callee: Node { type: 'Identifier', start: 150, end: 159, name: 'Int8Array' },
  arguments: 
   [ Node {
       type: 'MemberExpression',
       start: 160,
       end: 171,
       object: [Node],
       property: [Node],
       computed: false } ] }
NewExpression
146
172
Node { type: 'Identifier', start: 150, end: 159, name: 'Int8Array' }
Identifier
150
159
Int8Array
[ Node {
    type: 'MemberExpression',
    start: 160,
    end: 171,
    object: Node { type: 'Identifier', start: 160, end: 164, name: 'word' },
    property: Node { type: 'Identifier', start: 165, end: 171, name: 'buffer' },
    computed: false } ]
Node {
  type: 'MemberExpression',
  start: 160,
  end: 171,
  object: Node { type: 'Identifier', start: 160, end: 164, name: 'word' },
  property: Node { type: 'Identifier', start: 165, end: 171, name: 'buffer' },
  computed: false }
MemberExpression
160
171
Node { type: 'Identifier', start: 160, end: 164, name: 'word' }
Identifier
160
164
word
Node { type: 'Identifier', start: 165, end: 171, name: 'buffer' }
Identifier
165
171
buffer
false
var
Node {
  type: 'ReturnStatement',
  start: 178,
  end: 195,
  argument: 
   Node {
     type: 'UnaryExpression',
     start: 185,
     end: 194,
     operator: '!',
     prefix: true,
     argument: 
      Node {
        type: 'MemberExpression',
        start: 186,
        end: 194,
        object: [Node],
        property: [Node],
        computed: true } } }
ReturnStatement
178
195
Node {
  type: 'UnaryExpression',
  start: 185,
  end: 194,
  operator: '!',
  prefix: true,
  argument: 
   Node {
     type: 'MemberExpression',
     start: 186,
     end: 194,
     object: Node { type: 'Identifier', start: 186, end: 191, name: 'bytes' },
     property: Node { type: 'Literal', start: 192, end: 193, value: 0, raw: '0' },
     computed: true } }
UnaryExpression
185
194
!
true
Node {
  type: 'MemberExpression',
  start: 186,
  end: 194,
  object: Node { type: 'Identifier', start: 186, end: 191, name: 'bytes' },
  property: Node { type: 'Literal', start: 192, end: 193, value: 0, raw: '0' },
  computed: true }
MemberExpression
186
194
Node { type: 'Identifier', start: 186, end: 191, name: 'bytes' }
Identifier
186
191
bytes
Node { type: 'Literal', start: 192, end: 193, value: 0, raw: '0' }
Literal
192
193
0
0
true
Node {
  type: 'FunctionDeclaration',
  start: 199,
  end: 601,
  id: Node { type: 'Identifier', start: 208, end: 212, name: 'test' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 213, end: 214, name: 'a' },
     Node { type: 'Identifier', start: 216, end: 217, name: 'b' },
     Node { type: 'Identifier', start: 219, end: 220, name: 'x' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 222,
     end: 601,
     body: [ [Node], [Node], [Node], [Node], [Node], [Node], [Node] ] } }
FunctionDeclaration
199
601
Node { type: 'Identifier', start: 208, end: 212, name: 'test' }
Identifier
208
212
test
false
false
false
[ Node { type: 'Identifier', start: 213, end: 214, name: 'a' },
  Node { type: 'Identifier', start: 216, end: 217, name: 'b' },
  Node { type: 'Identifier', start: 219, end: 220, name: 'x' } ]
Node { type: 'Identifier', start: 213, end: 214, name: 'a' }
Identifier
213
214
a
Node { type: 'Identifier', start: 216, end: 217, name: 'b' }
Identifier
216
217
b
Node { type: 'Identifier', start: 219, end: 220, name: 'x' }
Identifier
219
220
x
Node {
  type: 'BlockStatement',
  start: 222,
  end: 601,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 228,
       end: 261,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 266,
       end: 282,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 287,
       end: 303,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 308,
       end: 359,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 364,
       end: 394,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 399,
       end: 424,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 429,
       end: 599,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
222
601
[ Node {
    type: 'VariableDeclaration',
    start: 228,
    end: 261,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 266,
    end: 282,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 266,
       end: 281,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 287,
    end: 303,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 287,
       end: 302,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'VariableDeclaration',
    start: 308,
    end: 359,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 364,
    end: 394,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 399,
    end: 424,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 429,
    end: 599,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 433,
       end: 458,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 468, end: 599, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 228,
  end: 261,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 232,
       end: 260,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
228
261
[ Node {
    type: 'VariableDeclarator',
    start: 232,
    end: 260,
    id: Node { type: 'Identifier', start: 232, end: 240, name: 'intArray' },
    init: 
     Node {
       type: 'NewExpression',
       start: 243,
       end: 260,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 232,
  end: 260,
  id: Node { type: 'Identifier', start: 232, end: 240, name: 'intArray' },
  init: 
   Node {
     type: 'NewExpression',
     start: 243,
     end: 260,
     callee: Node { type: 'Identifier', start: 247, end: 257, name: 'Int32Array' },
     arguments: [ [Node] ] } }
VariableDeclarator
232
260
Node { type: 'Identifier', start: 232, end: 240, name: 'intArray' }
Identifier
232
240
intArray
Node {
  type: 'NewExpression',
  start: 243,
  end: 260,
  callee: Node { type: 'Identifier', start: 247, end: 257, name: 'Int32Array' },
  arguments: 
   [ Node { type: 'Literal', start: 258, end: 259, value: 2, raw: '2' } ] }
NewExpression
243
260
Node { type: 'Identifier', start: 247, end: 257, name: 'Int32Array' }
Identifier
247
257
Int32Array
[ Node { type: 'Literal', start: 258, end: 259, value: 2, raw: '2' } ]
Node { type: 'Literal', start: 258, end: 259, value: 2, raw: '2' }
Literal
258
259
2
2
var
Node {
  type: 'ExpressionStatement',
  start: 266,
  end: 282,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 266,
     end: 281,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 266,
        end: 277,
        object: [Node],
        property: [Node],
        computed: true },
     right: Node { type: 'Identifier', start: 280, end: 281, name: 'a' } } }
ExpressionStatement
266
282
Node {
  type: 'AssignmentExpression',
  start: 266,
  end: 281,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 266,
     end: 277,
     object: Node { type: 'Identifier', start: 266, end: 274, name: 'intArray' },
     property: Node { type: 'Literal', start: 275, end: 276, value: 0, raw: '0' },
     computed: true },
  right: Node { type: 'Identifier', start: 280, end: 281, name: 'a' } }
AssignmentExpression
266
281
=
Node {
  type: 'MemberExpression',
  start: 266,
  end: 277,
  object: Node { type: 'Identifier', start: 266, end: 274, name: 'intArray' },
  property: Node { type: 'Literal', start: 275, end: 276, value: 0, raw: '0' },
  computed: true }
MemberExpression
266
277
Node { type: 'Identifier', start: 266, end: 274, name: 'intArray' }
Identifier
266
274
intArray
Node { type: 'Literal', start: 275, end: 276, value: 0, raw: '0' }
Literal
275
276
0
0
true
Node { type: 'Identifier', start: 280, end: 281, name: 'a' }
Identifier
280
281
a
Node {
  type: 'ExpressionStatement',
  start: 287,
  end: 303,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 287,
     end: 302,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 287,
        end: 298,
        object: [Node],
        property: [Node],
        computed: true },
     right: Node { type: 'Identifier', start: 301, end: 302, name: 'b' } } }
ExpressionStatement
287
303
Node {
  type: 'AssignmentExpression',
  start: 287,
  end: 302,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 287,
     end: 298,
     object: Node { type: 'Identifier', start: 287, end: 295, name: 'intArray' },
     property: Node { type: 'Literal', start: 296, end: 297, value: 1, raw: '1' },
     computed: true },
  right: Node { type: 'Identifier', start: 301, end: 302, name: 'b' } }
AssignmentExpression
287
302
=
Node {
  type: 'MemberExpression',
  start: 287,
  end: 298,
  object: Node { type: 'Identifier', start: 287, end: 295, name: 'intArray' },
  property: Node { type: 'Literal', start: 296, end: 297, value: 1, raw: '1' },
  computed: true }
MemberExpression
287
298
Node { type: 'Identifier', start: 287, end: 295, name: 'intArray' }
Identifier
287
295
intArray
Node { type: 'Literal', start: 296, end: 297, value: 1, raw: '1' }
Literal
296
297
1
1
true
Node { type: 'Identifier', start: 301, end: 302, name: 'b' }
Identifier
301
302
b
Node {
  type: 'VariableDeclaration',
  start: 308,
  end: 359,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 312,
       end: 358,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
308
359
[ Node {
    type: 'VariableDeclarator',
    start: 312,
    end: 358,
    id: Node { type: 'Identifier', start: 312, end: 322, name: 'floatArray' },
    init: 
     Node {
       type: 'NewExpression',
       start: 325,
       end: 358,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 312,
  end: 358,
  id: Node { type: 'Identifier', start: 312, end: 322, name: 'floatArray' },
  init: 
   Node {
     type: 'NewExpression',
     start: 325,
     end: 358,
     callee: Node { type: 'Identifier', start: 329, end: 341, name: 'Float64Array' },
     arguments: [ [Node] ] } }
VariableDeclarator
312
358
Node { type: 'Identifier', start: 312, end: 322, name: 'floatArray' }
Identifier
312
322
floatArray
Node {
  type: 'NewExpression',
  start: 325,
  end: 358,
  callee: Node { type: 'Identifier', start: 329, end: 341, name: 'Float64Array' },
  arguments: 
   [ Node {
       type: 'MemberExpression',
       start: 342,
       end: 357,
       object: [Node],
       property: [Node],
       computed: false } ] }
NewExpression
325
358
Node { type: 'Identifier', start: 329, end: 341, name: 'Float64Array' }
Identifier
329
341
Float64Array
[ Node {
    type: 'MemberExpression',
    start: 342,
    end: 357,
    object: Node { type: 'Identifier', start: 342, end: 350, name: 'intArray' },
    property: Node { type: 'Identifier', start: 351, end: 357, name: 'buffer' },
    computed: false } ]
Node {
  type: 'MemberExpression',
  start: 342,
  end: 357,
  object: Node { type: 'Identifier', start: 342, end: 350, name: 'intArray' },
  property: Node { type: 'Identifier', start: 351, end: 357, name: 'buffer' },
  computed: false }
MemberExpression
342
357
Node { type: 'Identifier', start: 342, end: 350, name: 'intArray' }
Identifier
342
350
intArray
Node { type: 'Identifier', start: 351, end: 357, name: 'buffer' }
Identifier
351
357
buffer
false
var
Node {
  type: 'VariableDeclaration',
  start: 364,
  end: 394,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 368,
       end: 393,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
364
394
[ Node {
    type: 'VariableDeclarator',
    start: 368,
    end: 393,
    id: Node { type: 'Identifier', start: 368, end: 375, name: 'element' },
    init: 
     Node {
       type: 'CallExpression',
       start: 378,
       end: 393,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 368,
  end: 393,
  id: Node { type: 'Identifier', start: 368, end: 375, name: 'element' },
  init: 
   Node {
     type: 'CallExpression',
     start: 378,
     end: 393,
     callee: Node { type: 'Identifier', start: 378, end: 381, name: 'foo' },
     arguments: [ [Node] ] } }
VariableDeclarator
368
393
Node { type: 'Identifier', start: 368, end: 375, name: 'element' }
Identifier
368
375
element
Node {
  type: 'CallExpression',
  start: 378,
  end: 393,
  callee: Node { type: 'Identifier', start: 378, end: 381, name: 'foo' },
  arguments: 
   [ Node { type: 'Identifier', start: 382, end: 392, name: 'floatArray' } ] }
CallExpression
378
393
Node { type: 'Identifier', start: 378, end: 381, name: 'foo' }
Identifier
378
381
foo
[ Node { type: 'Identifier', start: 382, end: 392, name: 'floatArray' } ]
Node { type: 'Identifier', start: 382, end: 392, name: 'floatArray' }
Identifier
382
392
floatArray
var
Node {
  type: 'VariableDeclaration',
  start: 399,
  end: 424,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 403,
       end: 423,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
399
424
[ Node {
    type: 'VariableDeclarator',
    start: 403,
    end: 423,
    id: Node { type: 'Identifier', start: 403, end: 409, name: 'result' },
    init: 
     Node {
       type: 'BinaryExpression',
       start: 412,
       end: 423,
       left: [Node],
       operator: '+',
       right: [Node] } } ]
Node {
  type: 'VariableDeclarator',
  start: 403,
  end: 423,
  id: Node { type: 'Identifier', start: 403, end: 409, name: 'result' },
  init: 
   Node {
     type: 'BinaryExpression',
     start: 412,
     end: 423,
     left: Node { type: 'Identifier', start: 412, end: 419, name: 'element' },
     operator: '+',
     right: Node { type: 'Literal', start: 422, end: 423, value: 1, raw: '1' } } }
VariableDeclarator
403
423
Node { type: 'Identifier', start: 403, end: 409, name: 'result' }
Identifier
403
409
result
Node {
  type: 'BinaryExpression',
  start: 412,
  end: 423,
  left: Node { type: 'Identifier', start: 412, end: 419, name: 'element' },
  operator: '+',
  right: Node { type: 'Literal', start: 422, end: 423, value: 1, raw: '1' } }
BinaryExpression
412
423
Node { type: 'Identifier', start: 412, end: 419, name: 'element' }
Identifier
412
419
element
+
Node { type: 'Literal', start: 422, end: 423, value: 1, raw: '1' }
Literal
422
423
1
1
var
Node {
  type: 'IfStatement',
  start: 429,
  end: 599,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 433,
     end: 458,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 434,
        end: 445,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '!=',
     right: 
      Node {
        type: 'BinaryExpression',
        start: 451,
        end: 457,
        left: [Node],
        operator: '+',
        right: [Node] } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 468,
     end: 599,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 474,
        end: 598,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
429
599
Node {
  type: 'BinaryExpression',
  start: 433,
  end: 458,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 434,
     end: 445,
     left: Node { type: 'Literal', start: 434, end: 436, value: '', raw: '""' },
     operator: '+',
     right: Node { type: 'Identifier', start: 439, end: 445, name: 'result' } },
  operator: '!=',
  right: 
   Node {
     type: 'BinaryExpression',
     start: 451,
     end: 457,
     left: Node { type: 'Literal', start: 451, end: 453, value: '', raw: '""' },
     operator: '+',
     right: Node { type: 'Identifier', start: 456, end: 457, name: 'x' } } }
BinaryExpression
433
458
Node {
  type: 'BinaryExpression',
  start: 434,
  end: 445,
  left: Node { type: 'Literal', start: 434, end: 436, value: '', raw: '""' },
  operator: '+',
  right: Node { type: 'Identifier', start: 439, end: 445, name: 'result' } }
BinaryExpression
434
445
Node { type: 'Literal', start: 434, end: 436, value: '', raw: '""' }
Literal
434
436

""
+
Node { type: 'Identifier', start: 439, end: 445, name: 'result' }
Identifier
439
445
result
!=
Node {
  type: 'BinaryExpression',
  start: 451,
  end: 457,
  left: Node { type: 'Literal', start: 451, end: 453, value: '', raw: '""' },
  operator: '+',
  right: Node { type: 'Identifier', start: 456, end: 457, name: 'x' } }
BinaryExpression
451
457
Node { type: 'Literal', start: 451, end: 453, value: '', raw: '""' }
Literal
451
453

""
+
Node { type: 'Identifier', start: 456, end: 457, name: 'x' }
Identifier
456
457
x
Node {
  type: 'ThrowStatement',
  start: 468,
  end: 599,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 474,
     end: 598,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 474,
        end: 578,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: 
      Node {
        type: 'Literal',
        start: 581,
        end: 598,
        value: ' from the array',
        raw: '" from the array"' } } }
ThrowStatement
468
599
Node {
  type: 'BinaryExpression',
  start: 474,
  end: 598,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 474,
     end: 578,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 474,
        end: 568,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Identifier', start: 571, end: 578, name: 'element' } },
  operator: '+',
  right: 
   Node {
     type: 'Literal',
     start: 581,
     end: 598,
     value: ' from the array',
     raw: '" from the array"' } }
BinaryExpression
474
598
Node {
  type: 'BinaryExpression',
  start: 474,
  end: 578,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 474,
     end: 568,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 474,
        end: 554,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: 
      Node {
        type: 'Literal',
        start: 557,
        end: 568,
        value: '; loaded ',
        raw: '"; loaded "' } },
  operator: '+',
  right: Node { type: 'Identifier', start: 571, end: 578, name: 'element' } }
BinaryExpression
474
578
Node {
  type: 'BinaryExpression',
  start: 474,
  end: 568,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 474,
     end: 554,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 474,
        end: 550,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Identifier', start: 553, end: 554, name: 'x' } },
  operator: '+',
  right: 
   Node {
     type: 'Literal',
     start: 557,
     end: 568,
     value: '; loaded ',
     raw: '"; loaded "' } }
BinaryExpression
474
568
Node {
  type: 'BinaryExpression',
  start: 474,
  end: 554,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 474,
     end: 550,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 474,
        end: 529,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: 
      Node {
        type: 'Literal',
        start: 532,
        end: 550,
        value: ', but expected: ',
        raw: '", but expected: "' } },
  operator: '+',
  right: Node { type: 'Identifier', start: 553, end: 554, name: 'x' } }
BinaryExpression
474
554
Node {
  type: 'BinaryExpression',
  start: 474,
  end: 550,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 474,
     end: 529,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 474,
        end: 520,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Identifier', start: 523, end: 529, name: 'result' } },
  operator: '+',
  right: 
   Node {
     type: 'Literal',
     start: 532,
     end: 550,
     value: ', but expected: ',
     raw: '", but expected: "' } }
BinaryExpression
474
550
Node {
  type: 'BinaryExpression',
  start: 474,
  end: 529,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 474,
     end: 520,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 474,
        end: 513,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Literal', start: 516, end: 520, value: ': ', raw: '": "' } },
  operator: '+',
  right: Node { type: 'Identifier', start: 523, end: 529, name: 'result' } }
BinaryExpression
474
529
Node {
  type: 'BinaryExpression',
  start: 474,
  end: 520,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 474,
     end: 513,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 474,
        end: 509,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Identifier', start: 512, end: 513, name: 'b' } },
  operator: '+',
  right: Node { type: 'Literal', start: 516, end: 520, value: ': ', raw: '": "' } }
BinaryExpression
474
520
Node {
  type: 'BinaryExpression',
  start: 474,
  end: 513,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 474,
     end: 509,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 474,
        end: 502,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Literal', start: 505, end: 509, value: ', ', raw: '", "' } },
  operator: '+',
  right: Node { type: 'Identifier', start: 512, end: 513, name: 'b' } }
BinaryExpression
474
513
Node {
  type: 'BinaryExpression',
  start: 474,
  end: 509,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 474,
     end: 502,
     left: 
      Node {
        type: 'Literal',
        start: 474,
        end: 498,
        value: 'Error: bad result for ',
        raw: '"Error: bad result for "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 501, end: 502, name: 'a' } },
  operator: '+',
  right: Node { type: 'Literal', start: 505, end: 509, value: ', ', raw: '", "' } }
BinaryExpression
474
509
Node {
  type: 'BinaryExpression',
  start: 474,
  end: 502,
  left: 
   Node {
     type: 'Literal',
     start: 474,
     end: 498,
     value: 'Error: bad result for ',
     raw: '"Error: bad result for "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 501, end: 502, name: 'a' } }
BinaryExpression
474
502
Node {
  type: 'Literal',
  start: 474,
  end: 498,
  value: 'Error: bad result for ',
  raw: '"Error: bad result for "' }
Literal
474
498
Error: bad result for 
"Error: bad result for "
+
Node { type: 'Identifier', start: 501, end: 502, name: 'a' }
Identifier
501
502
a
+
Node { type: 'Literal', start: 505, end: 509, value: ', ', raw: '", "' }
Literal
505
509
, 
", "
+
Node { type: 'Identifier', start: 512, end: 513, name: 'b' }
Identifier
512
513
b
+
Node { type: 'Literal', start: 516, end: 520, value: ': ', raw: '": "' }
Literal
516
520
: 
": "
+
Node { type: 'Identifier', start: 523, end: 529, name: 'result' }
Identifier
523
529
result
+
Node {
  type: 'Literal',
  start: 532,
  end: 550,
  value: ', but expected: ',
  raw: '", but expected: "' }
Literal
532
550
, but expected: 
", but expected: "
+
Node { type: 'Identifier', start: 553, end: 554, name: 'x' }
Identifier
553
554
x
+
Node {
  type: 'Literal',
  start: 557,
  end: 568,
  value: '; loaded ',
  raw: '"; loaded "' }
Literal
557
568
; loaded 
"; loaded "
+
Node { type: 'Identifier', start: 571, end: 578, name: 'element' }
Identifier
571
578
element
+
Node {
  type: 'Literal',
  start: 581,
  end: 598,
  value: ' from the array',
  raw: '" from the array"' }
Literal
581
598
 from the array
" from the array"
null
[+] Exception: float64-array-nan.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 9394,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 46,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 47,
       end: 70,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 72,
       end: 118,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 119,
       end: 142,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 144,
       end: 190,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 191,
       end: 214,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 216,
       end: 597,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 598,
       end: 635,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 637,
       end: 1010,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1011,
       end: 1040,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 1042,
       end: 1423,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1424,
       end: 1460,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 1462,
       end: 1842,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1843,
       end: 1872,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 1874,
       end: 2262,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 2263,
       end: 2300,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 2303,
       end: 8205,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 8267,
       end: 9393,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
9394
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 46,
    id: Node { type: 'Identifier', start: 9, end: 21, name: 'opaqueDivBy2' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 25, end: 46, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 47,
    end: 70,
    expression: 
     Node {
       type: 'CallExpression',
       start: 47,
       end: 69,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 72,
    end: 118,
    id: Node { type: 'Identifier', start: 81, end: 93, name: 'opaqueDivBy3' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 97, end: 118, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 119,
    end: 142,
    expression: 
     Node {
       type: 'CallExpression',
       start: 119,
       end: 141,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 144,
    end: 190,
    id: Node { type: 'Identifier', start: 153, end: 165, name: 'opaqueDivBy4' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 169, end: 190, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 191,
    end: 214,
    expression: 
     Node {
       type: 'CallExpression',
       start: 191,
       end: 213,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 216,
    end: 597,
    id: 
     Node {
       type: 'Identifier',
       start: 225,
       end: 251,
       name: 'opaqueDivBySafeMaxMinusOne' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 255, end: 597, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 598,
    end: 635,
    expression: 
     Node {
       type: 'CallExpression',
       start: 598,
       end: 634,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 637,
    end: 1010,
    id: 
     Node {
       type: 'Identifier',
       start: 646,
       end: 664,
       name: 'opaqueDivBySafeMax' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 668, end: 1010, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1011,
    end: 1040,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1011,
       end: 1039,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 1042,
    end: 1423,
    id: 
     Node {
       type: 'Identifier',
       start: 1051,
       end: 1076,
       name: 'opaqueDivBySafeMaxPlusOne' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 1080, end: 1423, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1424,
    end: 1460,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1424,
       end: 1459,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 1462,
    end: 1842,
    id: 
     Node {
       type: 'Identifier',
       start: 1471,
       end: 1489,
       name: 'opaqueDivBySafeMin' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 1493, end: 1842, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1843,
    end: 1872,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1843,
       end: 1871,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 1874,
    end: 2262,
    id: 
     Node {
       type: 'Identifier',
       start: 1883,
       end: 1909,
       name: 'opaqueDivBySafeMinMinusOne' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 1913, end: 2262, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 2263,
    end: 2300,
    expression: 
     Node {
       type: 'CallExpression',
       start: 2263,
       end: 2299,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 2303,
    end: 8205,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 2308,
       end: 2317,
       declarations: [Array],
       kind: 'let' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 2319,
       end: 2326,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 2328,
       end: 2331,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 2333, end: 8205, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 8267,
    end: 9393,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 8272,
       end: 8281,
       declarations: [Array],
       kind: 'let' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 8283,
       end: 8290,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 8292,
       end: 8295,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 8297, end: 9393, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 46,
  id: Node { type: 'Identifier', start: 9, end: 21, name: 'opaqueDivBy2' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 22, end: 23, name: 'a' } ],
  body: Node { type: 'BlockStatement', start: 25, end: 46, body: [ [Node] ] } }
FunctionDeclaration
0
46
Node { type: 'Identifier', start: 9, end: 21, name: 'opaqueDivBy2' }
Identifier
9
21
opaqueDivBy2
false
false
false
[ Node { type: 'Identifier', start: 22, end: 23, name: 'a' } ]
Node { type: 'Identifier', start: 22, end: 23, name: 'a' }
Identifier
22
23
a
Node {
  type: 'BlockStatement',
  start: 25,
  end: 46,
  body: 
   [ Node { type: 'ReturnStatement', start: 31, end: 44, argument: [Node] } ] }
BlockStatement
25
46
[ Node {
    type: 'ReturnStatement',
    start: 31,
    end: 44,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 38,
       end: 43,
       left: [Node],
       operator: '/',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 31,
  end: 44,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 38,
     end: 43,
     left: Node { type: 'Identifier', start: 38, end: 39, name: 'a' },
     operator: '/',
     right: Node { type: 'Literal', start: 42, end: 43, value: 2, raw: '2' } } }
ReturnStatement
31
44
Node {
  type: 'BinaryExpression',
  start: 38,
  end: 43,
  left: Node { type: 'Identifier', start: 38, end: 39, name: 'a' },
  operator: '/',
  right: Node { type: 'Literal', start: 42, end: 43, value: 2, raw: '2' } }
BinaryExpression
38
43
Node { type: 'Identifier', start: 38, end: 39, name: 'a' }
Identifier
38
39
a
/
Node { type: 'Literal', start: 42, end: 43, value: 2, raw: '2' }
Literal
42
43
2
2
Node {
  type: 'ExpressionStatement',
  start: 47,
  end: 70,
  expression: 
   Node {
     type: 'CallExpression',
     start: 47,
     end: 69,
     callee: Node { type: 'Identifier', start: 47, end: 55, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
47
70
Node {
  type: 'CallExpression',
  start: 47,
  end: 69,
  callee: Node { type: 'Identifier', start: 47, end: 55, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 56, end: 68, name: 'opaqueDivBy2' } ] }
CallExpression
47
69
Node { type: 'Identifier', start: 47, end: 55, name: 'noInline' }
Identifier
47
55
noInline
[ Node { type: 'Identifier', start: 56, end: 68, name: 'opaqueDivBy2' } ]
Node { type: 'Identifier', start: 56, end: 68, name: 'opaqueDivBy2' }
Identifier
56
68
opaqueDivBy2
Node {
  type: 'FunctionDeclaration',
  start: 72,
  end: 118,
  id: Node { type: 'Identifier', start: 81, end: 93, name: 'opaqueDivBy3' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 94, end: 95, name: 'a' } ],
  body: Node { type: 'BlockStatement', start: 97, end: 118, body: [ [Node] ] } }
FunctionDeclaration
72
118
Node { type: 'Identifier', start: 81, end: 93, name: 'opaqueDivBy3' }
Identifier
81
93
opaqueDivBy3
false
false
false
[ Node { type: 'Identifier', start: 94, end: 95, name: 'a' } ]
Node { type: 'Identifier', start: 94, end: 95, name: 'a' }
Identifier
94
95
a
Node {
  type: 'BlockStatement',
  start: 97,
  end: 118,
  body: 
   [ Node {
       type: 'ReturnStatement',
       start: 103,
       end: 116,
       argument: [Node] } ] }
BlockStatement
97
118
[ Node {
    type: 'ReturnStatement',
    start: 103,
    end: 116,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 110,
       end: 115,
       left: [Node],
       operator: '/',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 103,
  end: 116,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 110,
     end: 115,
     left: Node { type: 'Identifier', start: 110, end: 111, name: 'a' },
     operator: '/',
     right: Node { type: 'Literal', start: 114, end: 115, value: 3, raw: '3' } } }
ReturnStatement
103
116
Node {
  type: 'BinaryExpression',
  start: 110,
  end: 115,
  left: Node { type: 'Identifier', start: 110, end: 111, name: 'a' },
  operator: '/',
  right: Node { type: 'Literal', start: 114, end: 115, value: 3, raw: '3' } }
BinaryExpression
110
115
Node { type: 'Identifier', start: 110, end: 111, name: 'a' }
Identifier
110
111
a
/
Node { type: 'Literal', start: 114, end: 115, value: 3, raw: '3' }
Literal
114
115
3
3
Node {
  type: 'ExpressionStatement',
  start: 119,
  end: 142,
  expression: 
   Node {
     type: 'CallExpression',
     start: 119,
     end: 141,
     callee: Node { type: 'Identifier', start: 119, end: 127, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
119
142
Node {
  type: 'CallExpression',
  start: 119,
  end: 141,
  callee: Node { type: 'Identifier', start: 119, end: 127, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 128, end: 140, name: 'opaqueDivBy3' } ] }
CallExpression
119
141
Node { type: 'Identifier', start: 119, end: 127, name: 'noInline' }
Identifier
119
127
noInline
[ Node { type: 'Identifier', start: 128, end: 140, name: 'opaqueDivBy3' } ]
Node { type: 'Identifier', start: 128, end: 140, name: 'opaqueDivBy3' }
Identifier
128
140
opaqueDivBy3
Node {
  type: 'FunctionDeclaration',
  start: 144,
  end: 190,
  id: Node { type: 'Identifier', start: 153, end: 165, name: 'opaqueDivBy4' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 166, end: 167, name: 'a' } ],
  body: Node { type: 'BlockStatement', start: 169, end: 190, body: [ [Node] ] } }
FunctionDeclaration
144
190
Node { type: 'Identifier', start: 153, end: 165, name: 'opaqueDivBy4' }
Identifier
153
165
opaqueDivBy4
false
false
false
[ Node { type: 'Identifier', start: 166, end: 167, name: 'a' } ]
Node { type: 'Identifier', start: 166, end: 167, name: 'a' }
Identifier
166
167
a
Node {
  type: 'BlockStatement',
  start: 169,
  end: 190,
  body: 
   [ Node {
       type: 'ReturnStatement',
       start: 175,
       end: 188,
       argument: [Node] } ] }
BlockStatement
169
190
[ Node {
    type: 'ReturnStatement',
    start: 175,
    end: 188,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 182,
       end: 187,
       left: [Node],
       operator: '/',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 175,
  end: 188,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 182,
     end: 187,
     left: Node { type: 'Identifier', start: 182, end: 183, name: 'a' },
     operator: '/',
     right: Node { type: 'Literal', start: 186, end: 187, value: 4, raw: '4' } } }
ReturnStatement
175
188
Node {
  type: 'BinaryExpression',
  start: 182,
  end: 187,
  left: Node { type: 'Identifier', start: 182, end: 183, name: 'a' },
  operator: '/',
  right: Node { type: 'Literal', start: 186, end: 187, value: 4, raw: '4' } }
BinaryExpression
182
187
Node { type: 'Identifier', start: 182, end: 183, name: 'a' }
Identifier
182
183
a
/
Node { type: 'Literal', start: 186, end: 187, value: 4, raw: '4' }
Literal
186
187
4
4
Node {
  type: 'ExpressionStatement',
  start: 191,
  end: 214,
  expression: 
   Node {
     type: 'CallExpression',
     start: 191,
     end: 213,
     callee: Node { type: 'Identifier', start: 191, end: 199, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
191
214
Node {
  type: 'CallExpression',
  start: 191,
  end: 213,
  callee: Node { type: 'Identifier', start: 191, end: 199, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 200, end: 212, name: 'opaqueDivBy4' } ] }
CallExpression
191
213
Node { type: 'Identifier', start: 191, end: 199, name: 'noInline' }
Identifier
191
199
noInline
[ Node { type: 'Identifier', start: 200, end: 212, name: 'opaqueDivBy4' } ]
Node { type: 'Identifier', start: 200, end: 212, name: 'opaqueDivBy4' }
Identifier
200
212
opaqueDivBy4
Node {
  type: 'FunctionDeclaration',
  start: 216,
  end: 597,
  id: 
   Node {
     type: 'Identifier',
     start: 225,
     end: 251,
     name: 'opaqueDivBySafeMaxMinusOne' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 252, end: 253, name: 'a' } ],
  body: Node { type: 'BlockStatement', start: 255, end: 597, body: [ [Node] ] } }
FunctionDeclaration
216
597
Node {
  type: 'Identifier',
  start: 225,
  end: 251,
  name: 'opaqueDivBySafeMaxMinusOne' }
Identifier
225
251
opaqueDivBySafeMaxMinusOne
false
false
false
[ Node { type: 'Identifier', start: 252, end: 253, name: 'a' } ]
Node { type: 'Identifier', start: 252, end: 253, name: 'a' }
Identifier
252
253
a
Node {
  type: 'BlockStatement',
  start: 255,
  end: 597,
  body: 
   [ Node {
       type: 'ReturnStatement',
       start: 275,
       end: 595,
       argument: [Node] } ] }
BlockStatement
255
597
[ Node {
    type: 'ReturnStatement',
    start: 275,
    end: 595,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 282,
       end: 594,
       left: [Node],
       operator: '/',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 275,
  end: 595,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 282,
     end: 594,
     left: Node { type: 'Identifier', start: 282, end: 283, name: 'a' },
     operator: '/',
     right: 
      Node {
        type: 'Literal',
        start: 286,
        end: 594,
        value: 4.49423283715579e+307,
        raw: '44942328371557897693232629769725618340449424473557664318357520289433168951375240783177119330601884005280028469967848339414697442203604155623211857659868531094441973356216371319075554900311523529863270738021251442209537670585615720368478277635206809290837627671146574559986811484619929076208839082406056034304' } } }
ReturnStatement
275
595
Node {
  type: 'BinaryExpression',
  start: 282,
  end: 594,
  left: Node { type: 'Identifier', start: 282, end: 283, name: 'a' },
  operator: '/',
  right: 
   Node {
     type: 'Literal',
     start: 286,
     end: 594,
     value: 4.49423283715579e+307,
     raw: '44942328371557897693232629769725618340449424473557664318357520289433168951375240783177119330601884005280028469967848339414697442203604155623211857659868531094441973356216371319075554900311523529863270738021251442209537670585615720368478277635206809290837627671146574559986811484619929076208839082406056034304' } }
BinaryExpression
282
594
Node { type: 'Identifier', start: 282, end: 283, name: 'a' }
Identifier
282
283
a
/
Node {
  type: 'Literal',
  start: 286,
  end: 594,
  value: 4.49423283715579e+307,
  raw: '44942328371557897693232629769725618340449424473557664318357520289433168951375240783177119330601884005280028469967848339414697442203604155623211857659868531094441973356216371319075554900311523529863270738021251442209537670585615720368478277635206809290837627671146574559986811484619929076208839082406056034304' }
Literal
286
594
4.49423283715579e+307
44942328371557897693232629769725618340449424473557664318357520289433168951375240783177119330601884005280028469967848339414697442203604155623211857659868531094441973356216371319075554900311523529863270738021251442209537670585615720368478277635206809290837627671146574559986811484619929076208839082406056034304
Node {
  type: 'ExpressionStatement',
  start: 598,
  end: 635,
  expression: 
   Node {
     type: 'CallExpression',
     start: 598,
     end: 634,
     callee: Node { type: 'Identifier', start: 598, end: 606, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
598
635
Node {
  type: 'CallExpression',
  start: 598,
  end: 634,
  callee: Node { type: 'Identifier', start: 598, end: 606, name: 'noInline' },
  arguments: 
   [ Node {
       type: 'Identifier',
       start: 607,
       end: 633,
       name: 'opaqueDivBySafeMaxMinusOne' } ] }
CallExpression
598
634
Node { type: 'Identifier', start: 598, end: 606, name: 'noInline' }
Identifier
598
606
noInline
[ Node {
    type: 'Identifier',
    start: 607,
    end: 633,
    name: 'opaqueDivBySafeMaxMinusOne' } ]
Node {
  type: 'Identifier',
  start: 607,
  end: 633,
  name: 'opaqueDivBySafeMaxMinusOne' }
Identifier
607
633
opaqueDivBySafeMaxMinusOne
Node {
  type: 'FunctionDeclaration',
  start: 637,
  end: 1010,
  id: 
   Node {
     type: 'Identifier',
     start: 646,
     end: 664,
     name: 'opaqueDivBySafeMax' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 665, end: 666, name: 'a' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 668,
     end: 1010,
     body: [ [Node] ] } }
FunctionDeclaration
637
1010
Node {
  type: 'Identifier',
  start: 646,
  end: 664,
  name: 'opaqueDivBySafeMax' }
Identifier
646
664
opaqueDivBySafeMax
false
false
false
[ Node { type: 'Identifier', start: 665, end: 666, name: 'a' } ]
Node { type: 'Identifier', start: 665, end: 666, name: 'a' }
Identifier
665
666
a
Node {
  type: 'BlockStatement',
  start: 668,
  end: 1010,
  body: 
   [ Node {
       type: 'ReturnStatement',
       start: 688,
       end: 1008,
       argument: [Node] } ] }
BlockStatement
668
1010
[ Node {
    type: 'ReturnStatement',
    start: 688,
    end: 1008,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 695,
       end: 1007,
       left: [Node],
       operator: '/',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 688,
  end: 1008,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 695,
     end: 1007,
     left: Node { type: 'Identifier', start: 695, end: 696, name: 'a' },
     operator: '/',
     right: 
      Node {
        type: 'Literal',
        start: 699,
        end: 1007,
        value: 8.98846567431158e+307,
        raw: '89884656743115795386465259539451236680898848947115328636715040578866337902750481566354238661203768010560056939935696678829394884407208311246423715319737062188883946712432742638151109800623047059726541476042502884419075341171231440736956555270413618581675255342293149119973622969239858152417678164812112068608' } } }
ReturnStatement
688
1008
Node {
  type: 'BinaryExpression',
  start: 695,
  end: 1007,
  left: Node { type: 'Identifier', start: 695, end: 696, name: 'a' },
  operator: '/',
  right: 
   Node {
     type: 'Literal',
     start: 699,
     end: 1007,
     value: 8.98846567431158e+307,
     raw: '89884656743115795386465259539451236680898848947115328636715040578866337902750481566354238661203768010560056939935696678829394884407208311246423715319737062188883946712432742638151109800623047059726541476042502884419075341171231440736956555270413618581675255342293149119973622969239858152417678164812112068608' } }
BinaryExpression
695
1007
Node { type: 'Identifier', start: 695, end: 696, name: 'a' }
Identifier
695
696
a
/
Node {
  type: 'Literal',
  start: 699,
  end: 1007,
  value: 8.98846567431158e+307,
  raw: '89884656743115795386465259539451236680898848947115328636715040578866337902750481566354238661203768010560056939935696678829394884407208311246423715319737062188883946712432742638151109800623047059726541476042502884419075341171231440736956555270413618581675255342293149119973622969239858152417678164812112068608' }
Literal
699
1007
8.98846567431158e+307
89884656743115795386465259539451236680898848947115328636715040578866337902750481566354238661203768010560056939935696678829394884407208311246423715319737062188883946712432742638151109800623047059726541476042502884419075341171231440736956555270413618581675255342293149119973622969239858152417678164812112068608
Node {
  type: 'ExpressionStatement',
  start: 1011,
  end: 1040,
  expression: 
   Node {
     type: 'CallExpression',
     start: 1011,
     end: 1039,
     callee: Node { type: 'Identifier', start: 1011, end: 1019, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
1011
1040
Node {
  type: 'CallExpression',
  start: 1011,
  end: 1039,
  callee: Node { type: 'Identifier', start: 1011, end: 1019, name: 'noInline' },
  arguments: 
   [ Node {
       type: 'Identifier',
       start: 1020,
       end: 1038,
       name: 'opaqueDivBySafeMax' } ] }
CallExpression
1011
1039
Node { type: 'Identifier', start: 1011, end: 1019, name: 'noInline' }
Identifier
1011
1019
noInline
[ Node {
    type: 'Identifier',
    start: 1020,
    end: 1038,
    name: 'opaqueDivBySafeMax' } ]
Node {
  type: 'Identifier',
  start: 1020,
  end: 1038,
  name: 'opaqueDivBySafeMax' }
Identifier
1020
1038
opaqueDivBySafeMax
Node {
  type: 'FunctionDeclaration',
  start: 1042,
  end: 1423,
  id: 
   Node {
     type: 'Identifier',
     start: 1051,
     end: 1076,
     name: 'opaqueDivBySafeMaxPlusOne' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 1077, end: 1078, name: 'a' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 1080,
     end: 1423,
     body: [ [Node] ] } }
FunctionDeclaration
1042
1423
Node {
  type: 'Identifier',
  start: 1051,
  end: 1076,
  name: 'opaqueDivBySafeMaxPlusOne' }
Identifier
1051
1076
opaqueDivBySafeMaxPlusOne
false
false
false
[ Node { type: 'Identifier', start: 1077, end: 1078, name: 'a' } ]
Node { type: 'Identifier', start: 1077, end: 1078, name: 'a' }
Identifier
1077
1078
a
Node {
  type: 'BlockStatement',
  start: 1080,
  end: 1423,
  body: 
   [ Node {
       type: 'ReturnStatement',
       start: 1100,
       end: 1421,
       argument: [Node] } ] }
BlockStatement
1080
1423
[ Node {
    type: 'ReturnStatement',
    start: 1100,
    end: 1421,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 1107,
       end: 1420,
       left: [Node],
       operator: '/',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 1100,
  end: 1421,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 1107,
     end: 1420,
     left: Node { type: 'Identifier', start: 1107, end: 1108, name: 'a' },
     operator: '/',
     right: 
      Node {
        type: 'Literal',
        start: 1111,
        end: 1420,
        value: Infinity,
        raw: '179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137216' } } }
ReturnStatement
1100
1421
Node {
  type: 'BinaryExpression',
  start: 1107,
  end: 1420,
  left: Node { type: 'Identifier', start: 1107, end: 1108, name: 'a' },
  operator: '/',
  right: 
   Node {
     type: 'Literal',
     start: 1111,
     end: 1420,
     value: Infinity,
     raw: '179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137216' } }
BinaryExpression
1107
1420
Node { type: 'Identifier', start: 1107, end: 1108, name: 'a' }
Identifier
1107
1108
a
/
Node {
  type: 'Literal',
  start: 1111,
  end: 1420,
  value: Infinity,
  raw: '179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137216' }
Literal
1111
1420
Infinity
179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137216
Node {
  type: 'ExpressionStatement',
  start: 1424,
  end: 1460,
  expression: 
   Node {
     type: 'CallExpression',
     start: 1424,
     end: 1459,
     callee: Node { type: 'Identifier', start: 1424, end: 1432, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
1424
1460
Node {
  type: 'CallExpression',
  start: 1424,
  end: 1459,
  callee: Node { type: 'Identifier', start: 1424, end: 1432, name: 'noInline' },
  arguments: 
   [ Node {
       type: 'Identifier',
       start: 1433,
       end: 1458,
       name: 'opaqueDivBySafeMaxPlusOne' } ] }
CallExpression
1424
1459
Node { type: 'Identifier', start: 1424, end: 1432, name: 'noInline' }
Identifier
1424
1432
noInline
[ Node {
    type: 'Identifier',
    start: 1433,
    end: 1458,
    name: 'opaqueDivBySafeMaxPlusOne' } ]
Node {
  type: 'Identifier',
  start: 1433,
  end: 1458,
  name: 'opaqueDivBySafeMaxPlusOne' }
Identifier
1433
1458
opaqueDivBySafeMaxPlusOne
Node {
  type: 'FunctionDeclaration',
  start: 1462,
  end: 1842,
  id: 
   Node {
     type: 'Identifier',
     start: 1471,
     end: 1489,
     name: 'opaqueDivBySafeMin' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 1490, end: 1491, name: 'a' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 1493,
     end: 1842,
     body: [ [Node] ] } }
FunctionDeclaration
1462
1842
Node {
  type: 'Identifier',
  start: 1471,
  end: 1489,
  name: 'opaqueDivBySafeMin' }
Identifier
1471
1489
opaqueDivBySafeMin
false
false
false
[ Node { type: 'Identifier', start: 1490, end: 1491, name: 'a' } ]
Node { type: 'Identifier', start: 1490, end: 1491, name: 'a' }
Identifier
1490
1491
a
Node {
  type: 'BlockStatement',
  start: 1493,
  end: 1842,
  body: 
   [ Node {
       type: 'ReturnStatement',
       start: 1514,
       end: 1840,
       argument: [Node] } ] }
BlockStatement
1493
1842
[ Node {
    type: 'ReturnStatement',
    start: 1514,
    end: 1840,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 1521,
       end: 1839,
       left: [Node],
       operator: '/',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 1514,
  end: 1840,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 1521,
     end: 1839,
     left: Node { type: 'Identifier', start: 1521, end: 1522, name: 'a' },
     operator: '/',
     right: 
      Node {
        type: 'BinaryExpression',
        start: 1526,
        end: 1838,
        left: [Node],
        operator: '/',
        right: [Node] } } }
ReturnStatement
1514
1840
Node {
  type: 'BinaryExpression',
  start: 1521,
  end: 1839,
  left: Node { type: 'Identifier', start: 1521, end: 1522, name: 'a' },
  operator: '/',
  right: 
   Node {
     type: 'BinaryExpression',
     start: 1526,
     end: 1838,
     left: Node { type: 'Literal', start: 1526, end: 1527, value: 1, raw: '1' },
     operator: '/',
     right: 
      Node {
        type: 'Literal',
        start: 1530,
        end: 1838,
        value: 4.49423283715579e+307,
        raw: '44942328371557897693232629769725618340449424473557664318357520289433168951375240783177119330601884005280028469967848339414697442203604155623211857659868531094441973356216371319075554900311523529863270738021251442209537670585615720368478277635206809290837627671146574559986811484619929076208839082406056034304' } } }
BinaryExpression
1521
1839
Node { type: 'Identifier', start: 1521, end: 1522, name: 'a' }
Identifier
1521
1522
a
/
Node {
  type: 'BinaryExpression',
  start: 1526,
  end: 1838,
  left: Node { type: 'Literal', start: 1526, end: 1527, value: 1, raw: '1' },
  operator: '/',
  right: 
   Node {
     type: 'Literal',
     start: 1530,
     end: 1838,
     value: 4.49423283715579e+307,
     raw: '44942328371557897693232629769725618340449424473557664318357520289433168951375240783177119330601884005280028469967848339414697442203604155623211857659868531094441973356216371319075554900311523529863270738021251442209537670585615720368478277635206809290837627671146574559986811484619929076208839082406056034304' } }
BinaryExpression
1526
1838
Node { type: 'Literal', start: 1526, end: 1527, value: 1, raw: '1' }
Literal
1526
1527
1
1
/
Node {
  type: 'Literal',
  start: 1530,
  end: 1838,
  value: 4.49423283715579e+307,
  raw: '44942328371557897693232629769725618340449424473557664318357520289433168951375240783177119330601884005280028469967848339414697442203604155623211857659868531094441973356216371319075554900311523529863270738021251442209537670585615720368478277635206809290837627671146574559986811484619929076208839082406056034304' }
Literal
1530
1838
4.49423283715579e+307
44942328371557897693232629769725618340449424473557664318357520289433168951375240783177119330601884005280028469967848339414697442203604155623211857659868531094441973356216371319075554900311523529863270738021251442209537670585615720368478277635206809290837627671146574559986811484619929076208839082406056034304
Node {
  type: 'ExpressionStatement',
  start: 1843,
  end: 1872,
  expression: 
   Node {
     type: 'CallExpression',
     start: 1843,
     end: 1871,
     callee: Node { type: 'Identifier', start: 1843, end: 1851, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
1843
1872
Node {
  type: 'CallExpression',
  start: 1843,
  end: 1871,
  callee: Node { type: 'Identifier', start: 1843, end: 1851, name: 'noInline' },
  arguments: 
   [ Node {
       type: 'Identifier',
       start: 1852,
       end: 1870,
       name: 'opaqueDivBySafeMin' } ] }
CallExpression
1843
1871
Node { type: 'Identifier', start: 1843, end: 1851, name: 'noInline' }
Identifier
1843
1851
noInline
[ Node {
    type: 'Identifier',
    start: 1852,
    end: 1870,
    name: 'opaqueDivBySafeMin' } ]
Node {
  type: 'Identifier',
  start: 1852,
  end: 1870,
  name: 'opaqueDivBySafeMin' }
Identifier
1852
1870
opaqueDivBySafeMin
Node {
  type: 'FunctionDeclaration',
  start: 1874,
  end: 2262,
  id: 
   Node {
     type: 'Identifier',
     start: 1883,
     end: 1909,
     name: 'opaqueDivBySafeMinMinusOne' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 1910, end: 1911, name: 'a' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 1913,
     end: 2262,
     body: [ [Node] ] } }
FunctionDeclaration
1874
2262
Node {
  type: 'Identifier',
  start: 1883,
  end: 1909,
  name: 'opaqueDivBySafeMinMinusOne' }
Identifier
1883
1909
opaqueDivBySafeMinMinusOne
false
false
false
[ Node { type: 'Identifier', start: 1910, end: 1911, name: 'a' } ]
Node { type: 'Identifier', start: 1910, end: 1911, name: 'a' }
Identifier
1910
1911
a
Node {
  type: 'BlockStatement',
  start: 1913,
  end: 2262,
  body: 
   [ Node {
       type: 'ReturnStatement',
       start: 1934,
       end: 2260,
       argument: [Node] } ] }
BlockStatement
1913
2262
[ Node {
    type: 'ReturnStatement',
    start: 1934,
    end: 2260,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 1941,
       end: 2259,
       left: [Node],
       operator: '/',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 1934,
  end: 2260,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 1941,
     end: 2259,
     left: Node { type: 'Identifier', start: 1941, end: 1942, name: 'a' },
     operator: '/',
     right: 
      Node {
        type: 'BinaryExpression',
        start: 1946,
        end: 2258,
        left: [Node],
        operator: '/',
        right: [Node] } } }
ReturnStatement
1934
2260
Node {
  type: 'BinaryExpression',
  start: 1941,
  end: 2259,
  left: Node { type: 'Identifier', start: 1941, end: 1942, name: 'a' },
  operator: '/',
  right: 
   Node {
     type: 'BinaryExpression',
     start: 1946,
     end: 2258,
     left: Node { type: 'Literal', start: 1946, end: 1947, value: 1, raw: '1' },
     operator: '/',
     right: 
      Node {
        type: 'Literal',
        start: 1950,
        end: 2258,
        value: 8.98846567431158e+307,
        raw: '89884656743115795386465259539451236680898848947115328636715040578866337902750481566354238661203768010560056939935696678829394884407208311246423715319737062188883946712432742638151109800623047059726541476042502884419075341171231440736956555270413618581675255342293149119973622969239858152417678164812112068608' } } }
BinaryExpression
1941
2259
Node { type: 'Identifier', start: 1941, end: 1942, name: 'a' }
Identifier
1941
1942
a
/
Node {
  type: 'BinaryExpression',
  start: 1946,
  end: 2258,
  left: Node { type: 'Literal', start: 1946, end: 1947, value: 1, raw: '1' },
  operator: '/',
  right: 
   Node {
     type: 'Literal',
     start: 1950,
     end: 2258,
     value: 8.98846567431158e+307,
     raw: '89884656743115795386465259539451236680898848947115328636715040578866337902750481566354238661203768010560056939935696678829394884407208311246423715319737062188883946712432742638151109800623047059726541476042502884419075341171231440736956555270413618581675255342293149119973622969239858152417678164812112068608' } }
BinaryExpression
1946
2258
Node { type: 'Literal', start: 1946, end: 1947, value: 1, raw: '1' }
Literal
1946
1947
1
1
/
Node {
  type: 'Literal',
  start: 1950,
  end: 2258,
  value: 8.98846567431158e+307,
  raw: '89884656743115795386465259539451236680898848947115328636715040578866337902750481566354238661203768010560056939935696678829394884407208311246423715319737062188883946712432742638151109800623047059726541476042502884419075341171231440736956555270413618581675255342293149119973622969239858152417678164812112068608' }
Literal
1950
2258
8.98846567431158e+307
89884656743115795386465259539451236680898848947115328636715040578866337902750481566354238661203768010560056939935696678829394884407208311246423715319737062188883946712432742638151109800623047059726541476042502884419075341171231440736956555270413618581675255342293149119973622969239858152417678164812112068608
Node {
  type: 'ExpressionStatement',
  start: 2263,
  end: 2300,
  expression: 
   Node {
     type: 'CallExpression',
     start: 2263,
     end: 2299,
     callee: Node { type: 'Identifier', start: 2263, end: 2271, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
2263
2300
Node {
  type: 'CallExpression',
  start: 2263,
  end: 2299,
  callee: Node { type: 'Identifier', start: 2263, end: 2271, name: 'noInline' },
  arguments: 
   [ Node {
       type: 'Identifier',
       start: 2272,
       end: 2298,
       name: 'opaqueDivBySafeMinMinusOne' } ] }
CallExpression
2263
2299
Node { type: 'Identifier', start: 2263, end: 2271, name: 'noInline' }
Identifier
2263
2271
noInline
[ Node {
    type: 'Identifier',
    start: 2272,
    end: 2298,
    name: 'opaqueDivBySafeMinMinusOne' } ]
Node {
  type: 'Identifier',
  start: 2272,
  end: 2298,
  name: 'opaqueDivBySafeMinMinusOne' }
Identifier
2272
2298
opaqueDivBySafeMinMinusOne
Node {
  type: 'ForStatement',
  start: 2303,
  end: 8205,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 2308,
     end: 2317,
     declarations: [ [Node] ],
     kind: 'let' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 2319,
     end: 2326,
     left: Node { type: 'Identifier', start: 2319, end: 2320, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 2323,
        end: 2326,
        value: 10000,
        raw: '1e4' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 2328,
     end: 2331,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 2330, end: 2331, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 2333,
     end: 8205,
     body: 
      [ [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node] ] } }
ForStatement
2303
8205
Node {
  type: 'VariableDeclaration',
  start: 2308,
  end: 2317,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 2312,
       end: 2317,
       id: [Node],
       init: [Node] } ],
  kind: 'let' }
VariableDeclaration
2308
2317
[ Node {
    type: 'VariableDeclarator',
    start: 2312,
    end: 2317,
    id: Node { type: 'Identifier', start: 2312, end: 2313, name: 'i' },
    init: Node { type: 'Literal', start: 2316, end: 2317, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 2312,
  end: 2317,
  id: Node { type: 'Identifier', start: 2312, end: 2313, name: 'i' },
  init: Node { type: 'Literal', start: 2316, end: 2317, value: 0, raw: '0' } }
VariableDeclarator
2312
2317
Node { type: 'Identifier', start: 2312, end: 2313, name: 'i' }
Identifier
2312
2313
i
Node { type: 'Literal', start: 2316, end: 2317, value: 0, raw: '0' }
Literal
2316
2317
0
0
let
Node {
  type: 'BinaryExpression',
  start: 2319,
  end: 2326,
  left: Node { type: 'Identifier', start: 2319, end: 2320, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 2323,
     end: 2326,
     value: 10000,
     raw: '1e4' } }
BinaryExpression
2319
2326
Node { type: 'Identifier', start: 2319, end: 2320, name: 'i' }
Identifier
2319
2320
i
<
Node {
  type: 'Literal',
  start: 2323,
  end: 2326,
  value: 10000,
  raw: '1e4' }
Literal
2323
2326
10000
1e4
Node {
  type: 'UpdateExpression',
  start: 2328,
  end: 2331,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 2330, end: 2331, name: 'i' } }
UpdateExpression
2328
2331
++
true
Node { type: 'Identifier', start: 2330, end: 2331, name: 'i' }
Identifier
2330
2331
i
Node {
  type: 'BlockStatement',
  start: 2333,
  end: 8205,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 2339,
       end: 2374,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'IfStatement',
       start: 2379,
       end: 2479,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 2484,
       end: 2511,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 2516,
       end: 2600,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 2605,
       end: 2637,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 2642,
       end: 2733,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 2738,
       end: 2771,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 2776,
       end: 2869,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 2874,
       end: 2904,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 2909,
       end: 3008,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 3014,
       end: 3045,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 3050,
       end: 3150,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 3155,
       end: 3182,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 3187,
       end: 3271,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 3276,
       end: 3308,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 3313,
       end: 3404,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 3409,
       end: 3442,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 3447,
       end: 3540,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 3545,
       end: 3575,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 3580,
       end: 3679,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 3685,
       end: 3716,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 3721,
       end: 3821,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 3826,
       end: 3853,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 3858,
       end: 3942,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 3947,
       end: 3979,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 3984,
       end: 4075,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 4080,
       end: 4113,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 4118,
       end: 4211,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 4216,
       end: 4246,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 4251,
       end: 4350,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 4356,
       end: 4401,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 4406,
       end: 4524,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 4529,
       end: 4570,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 4575,
       end: 4673,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 4678,
       end: 4724,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 4729,
       end: 4834,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 4839,
       end: 4886,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 4891,
       end: 4998,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 5003,
       end: 5047,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 5052,
       end: 5169,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 5175,
       end: 5212,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 5217,
       end: 5328,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 5333,
       end: 5366,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 5371,
       end: 5461,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 5466,
       end: 5504,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 5509,
       end: 5606,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 5611,
       end: 5650,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 5655,
       end: 5754,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 5759,
       end: 5795,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 5800,
       end: 5909,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 5915,
       end: 5959,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 5964,
       end: 6060,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 6065,
       end: 6105,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 6110,
       end: 6207,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 6212,
       end: 6257,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 6262,
       end: 6364,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 6369,
       end: 6415,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 6420,
       end: 6523,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 6528,
       end: 6571,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 6576,
       end: 6671,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 6677,
       end: 6714,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 6719,
       end: 6830,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 6835,
       end: 6868,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 6873,
       end: 6963,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 6968,
       end: 7006,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 7011,
       end: 7108,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 7113,
       end: 7152,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 7157,
       end: 7256,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 7261,
       end: 7297,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 7302,
       end: 7412,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 7418,
       end: 7463,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 7468,
       end: 7572,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 7577,
       end: 7618,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 7623,
       end: 7721,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 7726,
       end: 7772,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 7777,
       end: 7882,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 7887,
       end: 7934,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 7939,
       end: 8046,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 8051,
       end: 8095,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 8100,
       end: 8203,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
2333
8205
[ Node {
    type: 'VariableDeclaration',
    start: 2339,
    end: 2374,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'IfStatement',
    start: 2379,
    end: 2479,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 2383,
       end: 2412,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 2422,
       end: 2479,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 2484,
    end: 2511,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 2484,
       end: 2510,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'IfStatement',
    start: 2516,
    end: 2600,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 2520,
       end: 2537,
       left: [Node],
       operator: '===',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 2547,
       end: 2600,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 2605,
    end: 2637,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 2605,
       end: 2636,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'IfStatement',
    start: 2642,
    end: 2733,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 2646,
       end: 2665,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 2675,
       end: 2733,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 2738,
    end: 2771,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 2738,
       end: 2770,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'IfStatement',
    start: 2776,
    end: 2869,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 2780,
       end: 2800,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 2810,
       end: 2869,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 2874,
    end: 2904,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 2874,
       end: 2903,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'IfStatement',
    start: 2909,
    end: 3008,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 2913,
       end: 2942,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 2952,
       end: 3008,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 3014,
    end: 3045,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 3014,
       end: 3044,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'IfStatement',
    start: 3050,
    end: 3150,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 3054,
       end: 3083,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 3093,
       end: 3150,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 3155,
    end: 3182,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 3155,
       end: 3181,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'IfStatement',
    start: 3187,
    end: 3271,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 3191,
       end: 3208,
       left: [Node],
       operator: '===',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 3218,
       end: 3271,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 3276,
    end: 3308,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 3276,
       end: 3307,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'IfStatement',
    start: 3313,
    end: 3404,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 3317,
       end: 3336,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 3346,
       end: 3404,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 3409,
    end: 3442,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 3409,
       end: 3441,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'IfStatement',
    start: 3447,
    end: 3540,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 3451,
       end: 3471,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 3481,
       end: 3540,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 3545,
    end: 3575,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 3545,
       end: 3574,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'IfStatement',
    start: 3580,
    end: 3679,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 3584,
       end: 3613,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 3623,
       end: 3679,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 3685,
    end: 3716,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 3685,
       end: 3715,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'IfStatement',
    start: 3721,
    end: 3821,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 3725,
       end: 3754,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 3764,
       end: 3821,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 3826,
    end: 3853,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 3826,
       end: 3852,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'IfStatement',
    start: 3858,
    end: 3942,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 3862,
       end: 3879,
       left: [Node],
       operator: '===',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 3889,
       end: 3942,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 3947,
    end: 3979,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 3947,
       end: 3978,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'IfStatement',
    start: 3984,
    end: 4075,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 3988,
       end: 4007,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 4017,
       end: 4075,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 4080,
    end: 4113,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 4080,
       end: 4112,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'IfStatement',
    start: 4118,
    end: 4211,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 4122,
       end: 4142,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 4152,
       end: 4211,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 4216,
    end: 4246,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 4216,
       end: 4245,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'IfStatement',
    start: 4251,
    end: 4350,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 4255,
       end: 4284,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 4294,
       end: 4350,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 4356,
    end: 4401,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 4356,
       end: 4400,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'IfStatement',
    start: 4406,
    end: 4524,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 4410,
       end: 4443,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 4453,
       end: 4524,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 4529,
    end: 4570,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 4529,
       end: 4569,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'IfStatement',
    start: 4575,
    end: 4673,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 4579,
       end: 4596,
       left: [Node],
       operator: '===',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 4606,
       end: 4673,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 4678,
    end: 4724,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 4678,
       end: 4723,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'IfStatement',
    start: 4729,
    end: 4834,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 4733,
       end: 4752,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 4762,
       end: 4834,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 4839,
    end: 4886,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 4839,
       end: 4885,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'IfStatement',
    start: 4891,
    end: 4998,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 4895,
       end: 4915,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 4925,
       end: 4998,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 5003,
    end: 5047,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 5003,
       end: 5046,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'IfStatement',
    start: 5052,
    end: 5169,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 5056,
       end: 5089,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 5099,
       end: 5169,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 5175,
    end: 5212,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 5175,
       end: 5211,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'IfStatement',
    start: 5217,
    end: 5328,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 5221,
       end: 5255,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 5265,
       end: 5328,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 5333,
    end: 5366,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 5333,
       end: 5365,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'IfStatement',
    start: 5371,
    end: 5461,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 5375,
       end: 5392,
       left: [Node],
       operator: '===',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 5402,
       end: 5461,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 5466,
    end: 5504,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 5466,
       end: 5503,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'IfStatement',
    start: 5509,
    end: 5606,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 5513,
       end: 5532,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 5542,
       end: 5606,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 5611,
    end: 5650,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 5611,
       end: 5649,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'IfStatement',
    start: 5655,
    end: 5754,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 5659,
       end: 5679,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 5689,
       end: 5754,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 5759,
    end: 5795,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 5759,
       end: 5794,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'IfStatement',
    start: 5800,
    end: 5909,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 5804,
       end: 5837,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 5847,
       end: 5909,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 5915,
    end: 5959,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 5915,
       end: 5958,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'IfStatement',
    start: 5964,
    end: 6060,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 5968,
       end: 5980,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 5990,
       end: 6060,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 6065,
    end: 6105,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 6065,
       end: 6104,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'IfStatement',
    start: 6110,
    end: 6207,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 6114,
       end: 6131,
       left: [Node],
       operator: '===',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 6141,
       end: 6207,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 6212,
    end: 6257,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 6212,
       end: 6256,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'IfStatement',
    start: 6262,
    end: 6364,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 6266,
       end: 6283,
       left: [Node],
       operator: '===',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 6293,
       end: 6364,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 6369,
    end: 6415,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 6369,
       end: 6414,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'IfStatement',
    start: 6420,
    end: 6523,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 6424,
       end: 6441,
       left: [Node],
       operator: '===',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 6451,
       end: 6523,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 6528,
    end: 6571,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 6528,
       end: 6570,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'IfStatement',
    start: 6576,
    end: 6671,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 6580,
       end: 6592,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 6602,
       end: 6671,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 6677,
    end: 6714,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 6677,
       end: 6713,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'IfStatement',
    start: 6719,
    end: 6830,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 6723,
       end: 6757,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 6767,
       end: 6830,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 6835,
    end: 6868,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 6835,
       end: 6867,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'IfStatement',
    start: 6873,
    end: 6963,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 6877,
       end: 6894,
       left: [Node],
       operator: '===',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 6904,
       end: 6963,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 6968,
    end: 7006,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 6968,
       end: 7005,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'IfStatement',
    start: 7011,
    end: 7108,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 7015,
       end: 7034,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 7044,
       end: 7108,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 7113,
    end: 7152,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 7113,
       end: 7151,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'IfStatement',
    start: 7157,
    end: 7256,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 7161,
       end: 7181,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 7191,
       end: 7256,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 7261,
    end: 7297,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 7261,
       end: 7296,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'IfStatement',
    start: 7302,
    end: 7412,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 7306,
       end: 7340,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 7350,
       end: 7412,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 7418,
    end: 7463,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 7418,
       end: 7462,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'IfStatement',
    start: 7468,
    end: 7572,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 7472,
       end: 7491,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 7501,
       end: 7572,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 7577,
    end: 7618,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 7577,
       end: 7617,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'IfStatement',
    start: 7623,
    end: 7721,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 7627,
       end: 7644,
       left: [Node],
       operator: '===',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 7654,
       end: 7721,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 7726,
    end: 7772,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 7726,
       end: 7771,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'IfStatement',
    start: 7777,
    end: 7882,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 7781,
       end: 7800,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 7810,
       end: 7882,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 7887,
    end: 7934,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 7887,
       end: 7933,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'IfStatement',
    start: 7939,
    end: 8046,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 7943,
       end: 7963,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 7973,
       end: 8046,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 8051,
    end: 8095,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 8051,
       end: 8094,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'IfStatement',
    start: 8100,
    end: 8203,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 8104,
       end: 8123,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 8133,
       end: 8203,
       argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 2339,
  end: 2374,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 2343,
       end: 2373,
       id: [Node],
       init: [Node] } ],
  kind: 'let' }
VariableDeclaration
2339
2374
[ Node {
    type: 'VariableDeclarator',
    start: 2343,
    end: 2373,
    id: Node { type: 'Identifier', start: 2343, end: 2349, name: 'result' },
    init: 
     Node {
       type: 'CallExpression',
       start: 2352,
       end: 2373,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 2343,
  end: 2373,
  id: Node { type: 'Identifier', start: 2343, end: 2349, name: 'result' },
  init: 
   Node {
     type: 'CallExpression',
     start: 2352,
     end: 2373,
     callee: 
      Node {
        type: 'Identifier',
        start: 2352,
        end: 2364,
        name: 'opaqueDivBy2' },
     arguments: [ [Node] ] } }
VariableDeclarator
2343
2373
Node { type: 'Identifier', start: 2343, end: 2349, name: 'result' }
Identifier
2343
2349
result
Node {
  type: 'CallExpression',
  start: 2352,
  end: 2373,
  callee: 
   Node {
     type: 'Identifier',
     start: 2352,
     end: 2364,
     name: 'opaqueDivBy2' },
  arguments: 
   [ Node {
       type: 'MemberExpression',
       start: 2365,
       end: 2372,
       object: [Node],
       property: [Node],
       computed: false } ] }
CallExpression
2352
2373
Node {
  type: 'Identifier',
  start: 2352,
  end: 2364,
  name: 'opaqueDivBy2' }
Identifier
2352
2364
opaqueDivBy2
[ Node {
    type: 'MemberExpression',
    start: 2365,
    end: 2372,
    object: Node { type: 'Identifier', start: 2365, end: 2369, name: 'Math' },
    property: Node { type: 'Identifier', start: 2370, end: 2372, name: 'PI' },
    computed: false } ]
Node {
  type: 'MemberExpression',
  start: 2365,
  end: 2372,
  object: Node { type: 'Identifier', start: 2365, end: 2369, name: 'Math' },
  property: Node { type: 'Identifier', start: 2370, end: 2372, name: 'PI' },
  computed: false }
MemberExpression
2365
2372
Node { type: 'Identifier', start: 2365, end: 2369, name: 'Math' }
Identifier
2365
2369
Math
Node { type: 'Identifier', start: 2370, end: 2372, name: 'PI' }
Identifier
2370
2372
PI
false
let
Node {
  type: 'IfStatement',
  start: 2379,
  end: 2479,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 2383,
     end: 2412,
     left: Node { type: 'Identifier', start: 2383, end: 2389, name: 'result' },
     operator: '!==',
     right: 
      Node {
        type: 'Literal',
        start: 2394,
        end: 2412,
        value: 1.5707963267948966,
        raw: '1.5707963267948966' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 2422,
     end: 2479,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 2428,
        end: 2478,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
2379
2479
Node {
  type: 'BinaryExpression',
  start: 2383,
  end: 2412,
  left: Node { type: 'Identifier', start: 2383, end: 2389, name: 'result' },
  operator: '!==',
  right: 
   Node {
     type: 'Literal',
     start: 2394,
     end: 2412,
     value: 1.5707963267948966,
     raw: '1.5707963267948966' } }
BinaryExpression
2383
2412
Node { type: 'Identifier', start: 2383, end: 2389, name: 'result' }
Identifier
2383
2389
result
!==
Node {
  type: 'Literal',
  start: 2394,
  end: 2412,
  value: 1.5707963267948966,
  raw: '1.5707963267948966' }
Literal
2394
2412
1.5707963267948966
1.5707963267948966
Node {
  type: 'ThrowStatement',
  start: 2422,
  end: 2479,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 2428,
     end: 2478,
     left: 
      Node {
        type: 'Literal',
        start: 2428,
        end: 2469,
        value: 'Failed opaqueDivBy2(Math.PI). Result = ',
        raw: '"Failed opaqueDivBy2(Math.PI). Result = "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 2472, end: 2478, name: 'result' } } }
ThrowStatement
2422
2479
Node {
  type: 'BinaryExpression',
  start: 2428,
  end: 2478,
  left: 
   Node {
     type: 'Literal',
     start: 2428,
     end: 2469,
     value: 'Failed opaqueDivBy2(Math.PI). Result = ',
     raw: '"Failed opaqueDivBy2(Math.PI). Result = "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 2472, end: 2478, name: 'result' } }
BinaryExpression
2428
2478
Node {
  type: 'Literal',
  start: 2428,
  end: 2469,
  value: 'Failed opaqueDivBy2(Math.PI). Result = ',
  raw: '"Failed opaqueDivBy2(Math.PI). Result = "' }
Literal
2428
2469
Failed opaqueDivBy2(Math.PI). Result = 
"Failed opaqueDivBy2(Math.PI). Result = "
+
Node { type: 'Identifier', start: 2472, end: 2478, name: 'result' }
Identifier
2472
2478
result
null
[+] Exception: floating-point-div-to-mul.js:TypeError: Cannot read property 'hasOwnProperty' of null
[+] Exception: flush-after-force-exit-in-bytecodeparser-needs-to-update-argument-positions.js:SyntaxError: Unexpected token {
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 431,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 163,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 164,
       end: 178,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 180,
       end: 318,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 320,
       end: 344,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 345,
       end: 430,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
431
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 163,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 163, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 164,
    end: 178,
    expression: 
     Node {
       type: 'CallExpression',
       start: 164,
       end: 177,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 180,
    end: 318,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 185,
       end: 194,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 196,
       end: 205,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 207,
       end: 210,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 212, end: 318, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 320,
    end: 344,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 345,
    end: 430,
    test: 
     Node {
       type: 'LogicalExpression',
       start: 349,
       end: 380,
       left: [Node],
       operator: '&&',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 386, end: 430, argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 163,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'a' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 19,
     end: 163,
     body: [ [Node], [Node], [Node] ] } }
FunctionDeclaration
0
163
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'a' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'a' }
Identifier
13
14
a
Node { type: 'Identifier', start: 16, end: 17, name: 'b' }
Identifier
16
17
b
Node {
  type: 'BlockStatement',
  start: 19,
  end: 163,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 25,
       end: 64,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 69,
       end: 126,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ReturnStatement',
       start: 131,
       end: 161,
       argument: [Node] } ] }
BlockStatement
19
163
[ Node {
    type: 'VariableDeclaration',
    start: 25,
    end: 64,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 69,
    end: 126,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 73,
       end: 87,
       left: [Node],
       operator: '==',
       right: [Node] },
    consequent: Node { type: 'ReturnStatement', start: 97, end: 126, argument: [Node] },
    alternate: null },
  Node {
    type: 'ReturnStatement',
    start: 131,
    end: 161,
    argument: 
     Node {
       type: 'ArrayExpression',
       start: 138,
       end: 160,
       elements: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 25,
  end: 64,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 29,
       end: 63,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
25
64
[ Node {
    type: 'VariableDeclarator',
    start: 29,
    end: 63,
    id: Node { type: 'Identifier', start: 29, end: 34, name: 'value' },
    init: 
     Node {
       type: 'ConditionalExpression',
       start: 37,
       end: 63,
       test: [Node],
       consequent: [Node],
       alternate: [Node] } } ]
Node {
  type: 'VariableDeclarator',
  start: 29,
  end: 63,
  id: Node { type: 'Identifier', start: 29, end: 34, name: 'value' },
  init: 
   Node {
     type: 'ConditionalExpression',
     start: 37,
     end: 63,
     test: 
      Node {
        type: 'CallExpression',
        start: 37,
        end: 50,
        callee: [Node],
        arguments: [] },
     consequent: 
      Node {
        type: 'UnaryExpression',
        start: 53,
        end: 55,
        operator: '-',
        prefix: true,
        argument: [Node] },
     alternate: Node { type: 'Literal', start: 58, end: 63, value: 'foo', raw: '"foo"' } } }
VariableDeclarator
29
63
Node { type: 'Identifier', start: 29, end: 34, name: 'value' }
Identifier
29
34
value
Node {
  type: 'ConditionalExpression',
  start: 37,
  end: 63,
  test: 
   Node {
     type: 'CallExpression',
     start: 37,
     end: 50,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 37,
        end: 48,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [] },
  consequent: 
   Node {
     type: 'UnaryExpression',
     start: 53,
     end: 55,
     operator: '-',
     prefix: true,
     argument: Node { type: 'Literal', start: 54, end: 55, value: 0, raw: '0' } },
  alternate: Node { type: 'Literal', start: 58, end: 63, value: 'foo', raw: '"foo"' } }
ConditionalExpression
37
63
Node {
  type: 'CallExpression',
  start: 37,
  end: 50,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 37,
     end: 48,
     object: Node { type: 'Identifier', start: 37, end: 40, name: '$vm' },
     property: Node { type: 'Identifier', start: 41, end: 48, name: 'dfgTrue' },
     computed: false },
  arguments: [] }
CallExpression
37
50
Node {
  type: 'MemberExpression',
  start: 37,
  end: 48,
  object: Node { type: 'Identifier', start: 37, end: 40, name: '$vm' },
  property: Node { type: 'Identifier', start: 41, end: 48, name: 'dfgTrue' },
  computed: false }
MemberExpression
37
48
Node { type: 'Identifier', start: 37, end: 40, name: '$vm' }
Identifier
37
40
$vm
Node { type: 'Identifier', start: 41, end: 48, name: 'dfgTrue' }
Identifier
41
48
dfgTrue
false
[]
Node {
  type: 'UnaryExpression',
  start: 53,
  end: 55,
  operator: '-',
  prefix: true,
  argument: Node { type: 'Literal', start: 54, end: 55, value: 0, raw: '0' } }
UnaryExpression
53
55
-
true
Node { type: 'Literal', start: 54, end: 55, value: 0, raw: '0' }
Literal
54
55
0
0
Node { type: 'Literal', start: 58, end: 63, value: 'foo', raw: '"foo"' }
Literal
58
63
foo
"foo"
var
Node {
  type: 'IfStatement',
  start: 69,
  end: 126,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 73,
     end: 87,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 73,
        end: 78,
        left: [Node],
        operator: '*',
        right: [Node] },
     operator: '==',
     right: Node { type: 'Identifier', start: 82, end: 87, name: 'value' } },
  consequent: 
   Node {
     type: 'ReturnStatement',
     start: 97,
     end: 126,
     argument: 
      Node {
        type: 'ArrayExpression',
        start: 104,
        end: 125,
        elements: [Array] } },
  alternate: null }
IfStatement
69
126
Node {
  type: 'BinaryExpression',
  start: 73,
  end: 87,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 73,
     end: 78,
     left: Node { type: 'Identifier', start: 73, end: 74, name: 'a' },
     operator: '*',
     right: Node { type: 'Identifier', start: 77, end: 78, name: 'b' } },
  operator: '==',
  right: Node { type: 'Identifier', start: 82, end: 87, name: 'value' } }
BinaryExpression
73
87
Node {
  type: 'BinaryExpression',
  start: 73,
  end: 78,
  left: Node { type: 'Identifier', start: 73, end: 74, name: 'a' },
  operator: '*',
  right: Node { type: 'Identifier', start: 77, end: 78, name: 'b' } }
BinaryExpression
73
78
Node { type: 'Identifier', start: 73, end: 74, name: 'a' }
Identifier
73
74
a
*
Node { type: 'Identifier', start: 77, end: 78, name: 'b' }
Identifier
77
78
b
==
Node { type: 'Identifier', start: 82, end: 87, name: 'value' }
Identifier
82
87
value
Node {
  type: 'ReturnStatement',
  start: 97,
  end: 126,
  argument: 
   Node {
     type: 'ArrayExpression',
     start: 104,
     end: 125,
     elements: [ [Node], [Node] ] } }
ReturnStatement
97
126
Node {
  type: 'ArrayExpression',
  start: 104,
  end: 125,
  elements: 
   [ Node {
       type: 'CallExpression',
       start: 105,
       end: 118,
       callee: [Node],
       arguments: [] },
     Node { type: 'Literal', start: 120, end: 124, value: true, raw: 'true' } ] }
ArrayExpression
104
125
[ Node {
    type: 'CallExpression',
    start: 105,
    end: 118,
    callee: 
     Node {
       type: 'MemberExpression',
       start: 105,
       end: 116,
       object: [Node],
       property: [Node],
       computed: false },
    arguments: [] },
  Node { type: 'Literal', start: 120, end: 124, value: true, raw: 'true' } ]
Node {
  type: 'CallExpression',
  start: 105,
  end: 118,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 105,
     end: 116,
     object: Node { type: 'Identifier', start: 105, end: 108, name: '$vm' },
     property: Node { type: 'Identifier', start: 109, end: 116, name: 'dfgTrue' },
     computed: false },
  arguments: [] }
CallExpression
105
118
Node {
  type: 'MemberExpression',
  start: 105,
  end: 116,
  object: Node { type: 'Identifier', start: 105, end: 108, name: '$vm' },
  property: Node { type: 'Identifier', start: 109, end: 116, name: 'dfgTrue' },
  computed: false }
MemberExpression
105
116
Node { type: 'Identifier', start: 105, end: 108, name: '$vm' }
Identifier
105
108
$vm
Node { type: 'Identifier', start: 109, end: 116, name: 'dfgTrue' }
Identifier
109
116
dfgTrue
false
[]
Node { type: 'Literal', start: 120, end: 124, value: true, raw: 'true' }
Literal
120
124
true
true
null
[+] Exception: fold-based-on-int32-proof-mul-branch.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 296,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 47,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 48,
       end: 62,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 64,
       end: 199,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 201,
       end: 225,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 226,
       end: 295,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
296
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 47,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 47, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 48,
    end: 62,
    expression: 
     Node {
       type: 'CallExpression',
       start: 48,
       end: 61,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 64,
    end: 199,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 69,
       end: 78,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 80,
       end: 89,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 91,
       end: 94,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 96, end: 199, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 201,
    end: 225,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 226,
    end: 295,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 230,
       end: 245,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 251, end: 295, argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 47,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'a' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ],
  body: Node { type: 'BlockStatement', start: 19, end: 47, body: [ [Node] ] } }
FunctionDeclaration
0
47
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'a' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'a' }
Identifier
13
14
a
Node { type: 'Identifier', start: 16, end: 17, name: 'b' }
Identifier
16
17
b
Node {
  type: 'BlockStatement',
  start: 19,
  end: 47,
  body: 
   [ Node { type: 'ReturnStatement', start: 25, end: 45, argument: [Node] } ] }
BlockStatement
19
47
[ Node {
    type: 'ReturnStatement',
    start: 25,
    end: 45,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 32,
       end: 44,
       left: [Node],
       operator: '===',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 25,
  end: 45,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 32,
     end: 44,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 32,
        end: 37,
        left: [Node],
        operator: '*',
        right: [Node] },
     operator: '===',
     right: 
      Node {
        type: 'UnaryExpression',
        start: 42,
        end: 44,
        operator: '-',
        prefix: true,
        argument: [Node] } } }
ReturnStatement
25
45
Node {
  type: 'BinaryExpression',
  start: 32,
  end: 44,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 32,
     end: 37,
     left: Node { type: 'Identifier', start: 32, end: 33, name: 'a' },
     operator: '*',
     right: Node { type: 'Identifier', start: 36, end: 37, name: 'b' } },
  operator: '===',
  right: 
   Node {
     type: 'UnaryExpression',
     start: 42,
     end: 44,
     operator: '-',
     prefix: true,
     argument: Node { type: 'Literal', start: 43, end: 44, value: 0, raw: '0' } } }
BinaryExpression
32
44
Node {
  type: 'BinaryExpression',
  start: 32,
  end: 37,
  left: Node { type: 'Identifier', start: 32, end: 33, name: 'a' },
  operator: '*',
  right: Node { type: 'Identifier', start: 36, end: 37, name: 'b' } }
BinaryExpression
32
37
Node { type: 'Identifier', start: 32, end: 33, name: 'a' }
Identifier
32
33
a
*
Node { type: 'Identifier', start: 36, end: 37, name: 'b' }
Identifier
36
37
b
===
Node {
  type: 'UnaryExpression',
  start: 42,
  end: 44,
  operator: '-',
  prefix: true,
  argument: Node { type: 'Literal', start: 43, end: 44, value: 0, raw: '0' } }
UnaryExpression
42
44
-
true
Node { type: 'Literal', start: 43, end: 44, value: 0, raw: '0' }
Literal
43
44
0
0
Node {
  type: 'ExpressionStatement',
  start: 48,
  end: 62,
  expression: 
   Node {
     type: 'CallExpression',
     start: 48,
     end: 61,
     callee: Node { type: 'Identifier', start: 48, end: 56, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
48
62
Node {
  type: 'CallExpression',
  start: 48,
  end: 61,
  callee: Node { type: 'Identifier', start: 48, end: 56, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 57, end: 60, name: 'foo' } ] }
CallExpression
48
61
Node { type: 'Identifier', start: 48, end: 56, name: 'noInline' }
Identifier
48
56
noInline
[ Node { type: 'Identifier', start: 57, end: 60, name: 'foo' } ]
Node { type: 'Identifier', start: 57, end: 60, name: 'foo' }
Identifier
57
60
foo
Node {
  type: 'ForStatement',
  start: 64,
  end: 199,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 69,
     end: 78,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 80,
     end: 89,
     left: Node { type: 'Identifier', start: 80, end: 81, name: 'i' },
     operator: '<',
     right: Node { type: 'Literal', start: 84, end: 89, value: 10000, raw: '10000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 91,
     end: 94,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 93, end: 94, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 96,
     end: 199,
     body: [ [Node], [Node] ] } }
ForStatement
64
199
Node {
  type: 'VariableDeclaration',
  start: 69,
  end: 78,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 73,
       end: 78,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
69
78
[ Node {
    type: 'VariableDeclarator',
    start: 73,
    end: 78,
    id: Node { type: 'Identifier', start: 73, end: 74, name: 'i' },
    init: Node { type: 'Literal', start: 77, end: 78, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 73,
  end: 78,
  id: Node { type: 'Identifier', start: 73, end: 74, name: 'i' },
  init: Node { type: 'Literal', start: 77, end: 78, value: 0, raw: '0' } }
VariableDeclarator
73
78
Node { type: 'Identifier', start: 73, end: 74, name: 'i' }
Identifier
73
74
i
Node { type: 'Literal', start: 77, end: 78, value: 0, raw: '0' }
Literal
77
78
0
0
var
Node {
  type: 'BinaryExpression',
  start: 80,
  end: 89,
  left: Node { type: 'Identifier', start: 80, end: 81, name: 'i' },
  operator: '<',
  right: Node { type: 'Literal', start: 84, end: 89, value: 10000, raw: '10000' } }
BinaryExpression
80
89
Node { type: 'Identifier', start: 80, end: 81, name: 'i' }
Identifier
80
81
i
<
Node { type: 'Literal', start: 84, end: 89, value: 10000, raw: '10000' }
Literal
84
89
10000
10000
Node {
  type: 'UpdateExpression',
  start: 91,
  end: 94,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 93, end: 94, name: 'i' } }
UpdateExpression
91
94
++
true
Node { type: 'Identifier', start: 93, end: 94, name: 'i' }
Identifier
93
94
i
Node {
  type: 'BlockStatement',
  start: 96,
  end: 199,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 102,
       end: 125,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 130,
       end: 197,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
96
199
[ Node {
    type: 'VariableDeclaration',
    start: 102,
    end: 125,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 130,
    end: 197,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 134,
       end: 150,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 160, end: 197, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 102,
  end: 125,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 106,
       end: 124,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
102
125
[ Node {
    type: 'VariableDeclarator',
    start: 106,
    end: 124,
    id: Node { type: 'Identifier', start: 106, end: 112, name: 'result' },
    init: 
     Node {
       type: 'CallExpression',
       start: 115,
       end: 124,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 106,
  end: 124,
  id: Node { type: 'Identifier', start: 106, end: 112, name: 'result' },
  init: 
   Node {
     type: 'CallExpression',
     start: 115,
     end: 124,
     callee: Node { type: 'Identifier', start: 115, end: 118, name: 'foo' },
     arguments: [ [Node], [Node] ] } }
VariableDeclarator
106
124
Node { type: 'Identifier', start: 106, end: 112, name: 'result' }
Identifier
106
112
result
Node {
  type: 'CallExpression',
  start: 115,
  end: 124,
  callee: Node { type: 'Identifier', start: 115, end: 118, name: 'foo' },
  arguments: 
   [ Node { type: 'Literal', start: 119, end: 120, value: 1, raw: '1' },
     Node { type: 'Literal', start: 122, end: 123, value: 1, raw: '1' } ] }
CallExpression
115
124
Node { type: 'Identifier', start: 115, end: 118, name: 'foo' }
Identifier
115
118
foo
[ Node { type: 'Literal', start: 119, end: 120, value: 1, raw: '1' },
  Node { type: 'Literal', start: 122, end: 123, value: 1, raw: '1' } ]
Node { type: 'Literal', start: 119, end: 120, value: 1, raw: '1' }
Literal
119
120
1
1
Node { type: 'Literal', start: 122, end: 123, value: 1, raw: '1' }
Literal
122
123
1
1
var
Node {
  type: 'IfStatement',
  start: 130,
  end: 197,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 134,
     end: 150,
     left: Node { type: 'Identifier', start: 134, end: 140, name: 'result' },
     operator: '!==',
     right: 
      Node {
        type: 'Literal',
        start: 145,
        end: 150,
        value: false,
        raw: 'false' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 160,
     end: 197,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 166,
        end: 196,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
130
197
Node {
  type: 'BinaryExpression',
  start: 134,
  end: 150,
  left: Node { type: 'Identifier', start: 134, end: 140, name: 'result' },
  operator: '!==',
  right: 
   Node {
     type: 'Literal',
     start: 145,
     end: 150,
     value: false,
     raw: 'false' } }
BinaryExpression
134
150
Node { type: 'Identifier', start: 134, end: 140, name: 'result' }
Identifier
134
140
result
!==
Node {
  type: 'Literal',
  start: 145,
  end: 150,
  value: false,
  raw: 'false' }
Literal
145
150
false
false
Node {
  type: 'ThrowStatement',
  start: 160,
  end: 197,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 166,
     end: 196,
     left: 
      Node {
        type: 'Literal',
        start: 166,
        end: 187,
        value: 'Error: bad result: ',
        raw: '"Error: bad result: "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 190, end: 196, name: 'result' } } }
ThrowStatement
160
197
Node {
  type: 'BinaryExpression',
  start: 166,
  end: 196,
  left: 
   Node {
     type: 'Literal',
     start: 166,
     end: 187,
     value: 'Error: bad result: ',
     raw: '"Error: bad result: "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 190, end: 196, name: 'result' } }
BinaryExpression
166
196
Node {
  type: 'Literal',
  start: 166,
  end: 187,
  value: 'Error: bad result: ',
  raw: '"Error: bad result: "' }
Literal
166
187
Error: bad result: 
"Error: bad result: "
+
Node { type: 'Identifier', start: 190, end: 196, name: 'result' }
Identifier
190
196
result
null
[+] Exception: fold-based-on-int32-proof-mul.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 332,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 66,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 67,
       end: 81,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 83,
       end: 217,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 219,
       end: 260,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 261,
       end: 331,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
332
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 66,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 66, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 67,
    end: 81,
    expression: 
     Node {
       type: 'CallExpression',
       start: 67,
       end: 80,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 83,
    end: 217,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 88,
       end: 97,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 99,
       end: 108,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 110,
       end: 113,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 115, end: 217, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 219,
    end: 260,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 261,
    end: 331,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 265,
       end: 281,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 287, end: 331, argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 66,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'a' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 19,
     end: 66,
     body: [ [Node], [Node] ] } }
FunctionDeclaration
0
66
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'a' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'a' }
Identifier
13
14
a
Node { type: 'Identifier', start: 16, end: 17, name: 'b' }
Identifier
16
17
b
Node {
  type: 'BlockStatement',
  start: 19,
  end: 66,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 25,
       end: 39,
       declarations: [Array],
       kind: 'var' },
     Node { type: 'ReturnStatement', start: 44, end: 64, argument: [Node] } ] }
BlockStatement
19
66
[ Node {
    type: 'VariableDeclaration',
    start: 25,
    end: 39,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ReturnStatement',
    start: 44,
    end: 64,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 51,
       end: 63,
       left: [Node],
       operator: '==',
       right: [Node] } } ]
Node {
  type: 'VariableDeclaration',
  start: 25,
  end: 39,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 29,
       end: 38,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
25
39
[ Node {
    type: 'VariableDeclarator',
    start: 29,
    end: 38,
    id: Node { type: 'Identifier', start: 29, end: 30, name: 'c' },
    init: 
     Node {
       type: 'BinaryExpression',
       start: 33,
       end: 38,
       left: [Node],
       operator: '+',
       right: [Node] } } ]
Node {
  type: 'VariableDeclarator',
  start: 29,
  end: 38,
  id: Node { type: 'Identifier', start: 29, end: 30, name: 'c' },
  init: 
   Node {
     type: 'BinaryExpression',
     start: 33,
     end: 38,
     left: Node { type: 'Identifier', start: 33, end: 34, name: 'a' },
     operator: '+',
     right: Node { type: 'Identifier', start: 37, end: 38, name: 'b' } } }
VariableDeclarator
29
38
Node { type: 'Identifier', start: 29, end: 30, name: 'c' }
Identifier
29
30
c
Node {
  type: 'BinaryExpression',
  start: 33,
  end: 38,
  left: Node { type: 'Identifier', start: 33, end: 34, name: 'a' },
  operator: '+',
  right: Node { type: 'Identifier', start: 37, end: 38, name: 'b' } }
BinaryExpression
33
38
Node { type: 'Identifier', start: 33, end: 34, name: 'a' }
Identifier
33
34
a
+
Node { type: 'Identifier', start: 37, end: 38, name: 'b' }
Identifier
37
38
b
var
Node {
  type: 'ReturnStatement',
  start: 44,
  end: 64,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 51,
     end: 63,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 52,
        end: 57,
        left: [Node],
        operator: '|',
        right: [Node] },
     operator: '==',
     right: Node { type: 'Identifier', start: 62, end: 63, name: 'c' } } }
ReturnStatement
44
64
Node {
  type: 'BinaryExpression',
  start: 51,
  end: 63,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 52,
     end: 57,
     left: Node { type: 'Identifier', start: 52, end: 53, name: 'c' },
     operator: '|',
     right: Node { type: 'Literal', start: 56, end: 57, value: 0, raw: '0' } },
  operator: '==',
  right: Node { type: 'Identifier', start: 62, end: 63, name: 'c' } }
BinaryExpression
51
63
Node {
  type: 'BinaryExpression',
  start: 52,
  end: 57,
  left: Node { type: 'Identifier', start: 52, end: 53, name: 'c' },
  operator: '|',
  right: Node { type: 'Literal', start: 56, end: 57, value: 0, raw: '0' } }
BinaryExpression
52
57
Node { type: 'Identifier', start: 52, end: 53, name: 'c' }
Identifier
52
53
c
|
Node { type: 'Literal', start: 56, end: 57, value: 0, raw: '0' }
Literal
56
57
0
0
==
Node { type: 'Identifier', start: 62, end: 63, name: 'c' }
Identifier
62
63
c
Node {
  type: 'ExpressionStatement',
  start: 67,
  end: 81,
  expression: 
   Node {
     type: 'CallExpression',
     start: 67,
     end: 80,
     callee: Node { type: 'Identifier', start: 67, end: 75, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
67
81
Node {
  type: 'CallExpression',
  start: 67,
  end: 80,
  callee: Node { type: 'Identifier', start: 67, end: 75, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 76, end: 79, name: 'foo' } ] }
CallExpression
67
80
Node { type: 'Identifier', start: 67, end: 75, name: 'noInline' }
Identifier
67
75
noInline
[ Node { type: 'Identifier', start: 76, end: 79, name: 'foo' } ]
Node { type: 'Identifier', start: 76, end: 79, name: 'foo' }
Identifier
76
79
foo
Node {
  type: 'ForStatement',
  start: 83,
  end: 217,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 88,
     end: 97,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 99,
     end: 108,
     left: Node { type: 'Identifier', start: 99, end: 100, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 103,
        end: 108,
        value: 10000,
        raw: '10000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 110,
     end: 113,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 112, end: 113, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 115,
     end: 217,
     body: [ [Node], [Node] ] } }
ForStatement
83
217
Node {
  type: 'VariableDeclaration',
  start: 88,
  end: 97,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 92,
       end: 97,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
88
97
[ Node {
    type: 'VariableDeclarator',
    start: 92,
    end: 97,
    id: Node { type: 'Identifier', start: 92, end: 93, name: 'i' },
    init: Node { type: 'Literal', start: 96, end: 97, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 92,
  end: 97,
  id: Node { type: 'Identifier', start: 92, end: 93, name: 'i' },
  init: Node { type: 'Literal', start: 96, end: 97, value: 0, raw: '0' } }
VariableDeclarator
92
97
Node { type: 'Identifier', start: 92, end: 93, name: 'i' }
Identifier
92
93
i
Node { type: 'Literal', start: 96, end: 97, value: 0, raw: '0' }
Literal
96
97
0
0
var
Node {
  type: 'BinaryExpression',
  start: 99,
  end: 108,
  left: Node { type: 'Identifier', start: 99, end: 100, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 103,
     end: 108,
     value: 10000,
     raw: '10000' } }
BinaryExpression
99
108
Node { type: 'Identifier', start: 99, end: 100, name: 'i' }
Identifier
99
100
i
<
Node {
  type: 'Literal',
  start: 103,
  end: 108,
  value: 10000,
  raw: '10000' }
Literal
103
108
10000
10000
Node {
  type: 'UpdateExpression',
  start: 110,
  end: 113,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 112, end: 113, name: 'i' } }
UpdateExpression
110
113
++
true
Node { type: 'Identifier', start: 112, end: 113, name: 'i' }
Identifier
112
113
i
Node {
  type: 'BlockStatement',
  start: 115,
  end: 217,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 121,
       end: 144,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 149,
       end: 215,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
115
217
[ Node {
    type: 'VariableDeclaration',
    start: 121,
    end: 144,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 149,
    end: 215,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 153,
       end: 168,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 178, end: 215, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 121,
  end: 144,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 125,
       end: 143,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
121
144
[ Node {
    type: 'VariableDeclarator',
    start: 125,
    end: 143,
    id: Node { type: 'Identifier', start: 125, end: 131, name: 'result' },
    init: 
     Node {
       type: 'CallExpression',
       start: 134,
       end: 143,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 125,
  end: 143,
  id: Node { type: 'Identifier', start: 125, end: 131, name: 'result' },
  init: 
   Node {
     type: 'CallExpression',
     start: 134,
     end: 143,
     callee: Node { type: 'Identifier', start: 134, end: 137, name: 'foo' },
     arguments: [ [Node], [Node] ] } }
VariableDeclarator
125
143
Node { type: 'Identifier', start: 125, end: 131, name: 'result' }
Identifier
125
131
result
Node {
  type: 'CallExpression',
  start: 134,
  end: 143,
  callee: Node { type: 'Identifier', start: 134, end: 137, name: 'foo' },
  arguments: 
   [ Node { type: 'Literal', start: 138, end: 139, value: 1, raw: '1' },
     Node { type: 'Literal', start: 141, end: 142, value: 1, raw: '1' } ] }
CallExpression
134
143
Node { type: 'Identifier', start: 134, end: 137, name: 'foo' }
Identifier
134
137
foo
[ Node { type: 'Literal', start: 138, end: 139, value: 1, raw: '1' },
  Node { type: 'Literal', start: 141, end: 142, value: 1, raw: '1' } ]
Node { type: 'Literal', start: 138, end: 139, value: 1, raw: '1' }
Literal
138
139
1
1
Node { type: 'Literal', start: 141, end: 142, value: 1, raw: '1' }
Literal
141
142
1
1
var
Node {
  type: 'IfStatement',
  start: 149,
  end: 215,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 153,
     end: 168,
     left: Node { type: 'Identifier', start: 153, end: 159, name: 'result' },
     operator: '!==',
     right: Node { type: 'Literal', start: 164, end: 168, value: true, raw: 'true' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 178,
     end: 215,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 184,
        end: 214,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
149
215
Node {
  type: 'BinaryExpression',
  start: 153,
  end: 168,
  left: Node { type: 'Identifier', start: 153, end: 159, name: 'result' },
  operator: '!==',
  right: Node { type: 'Literal', start: 164, end: 168, value: true, raw: 'true' } }
BinaryExpression
153
168
Node { type: 'Identifier', start: 153, end: 159, name: 'result' }
Identifier
153
159
result
!==
Node { type: 'Literal', start: 164, end: 168, value: true, raw: 'true' }
Literal
164
168
true
true
Node {
  type: 'ThrowStatement',
  start: 178,
  end: 215,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 184,
     end: 214,
     left: 
      Node {
        type: 'Literal',
        start: 184,
        end: 205,
        value: 'Error: bad result: ',
        raw: '"Error: bad result: "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 208, end: 214, name: 'result' } } }
ThrowStatement
178
215
Node {
  type: 'BinaryExpression',
  start: 184,
  end: 214,
  left: 
   Node {
     type: 'Literal',
     start: 184,
     end: 205,
     value: 'Error: bad result: ',
     raw: '"Error: bad result: "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 208, end: 214, name: 'result' } }
BinaryExpression
184
214
Node {
  type: 'Literal',
  start: 184,
  end: 205,
  value: 'Error: bad result: ',
  raw: '"Error: bad result: "' }
Literal
184
205
Error: bad result: 
"Error: bad result: "
+
Node { type: 'Identifier', start: 208, end: 214, name: 'result' }
Identifier
208
214
result
null
[+] Exception: fold-based-on-int32-proof-or-zero.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 321,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 55,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 56,
       end: 70,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 72,
       end: 207,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 209,
       end: 250,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 251,
       end: 320,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
321
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 55,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 55, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 56,
    end: 70,
    expression: 
     Node {
       type: 'CallExpression',
       start: 56,
       end: 69,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 72,
    end: 207,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 77,
       end: 86,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 88,
       end: 97,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 99,
       end: 102,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 104, end: 207, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 209,
    end: 250,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 251,
    end: 320,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 255,
       end: 270,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 276, end: 320, argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 55,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'a' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ],
  body: Node { type: 'BlockStatement', start: 19, end: 55, body: [ [Node] ] } }
FunctionDeclaration
0
55
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'a' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'a' }
Identifier
13
14
a
Node { type: 'Identifier', start: 16, end: 17, name: 'b' }
Identifier
16
17
b
Node {
  type: 'BlockStatement',
  start: 19,
  end: 55,
  body: 
   [ Node { type: 'ReturnStatement', start: 25, end: 53, argument: [Node] } ] }
BlockStatement
19
55
[ Node {
    type: 'ReturnStatement',
    start: 25,
    end: 53,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 32,
       end: 52,
       left: [Node],
       operator: '===',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 25,
  end: 53,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 32,
     end: 52,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 32,
        end: 37,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '===',
     right: 
      Node {
        type: 'Literal',
        start: 42,
        end: 52,
        value: 2147483648,
        raw: '2147483648' } } }
ReturnStatement
25
53
Node {
  type: 'BinaryExpression',
  start: 32,
  end: 52,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 32,
     end: 37,
     left: Node { type: 'Identifier', start: 32, end: 33, name: 'a' },
     operator: '+',
     right: Node { type: 'Identifier', start: 36, end: 37, name: 'b' } },
  operator: '===',
  right: 
   Node {
     type: 'Literal',
     start: 42,
     end: 52,
     value: 2147483648,
     raw: '2147483648' } }
BinaryExpression
32
52
Node {
  type: 'BinaryExpression',
  start: 32,
  end: 37,
  left: Node { type: 'Identifier', start: 32, end: 33, name: 'a' },
  operator: '+',
  right: Node { type: 'Identifier', start: 36, end: 37, name: 'b' } }
BinaryExpression
32
37
Node { type: 'Identifier', start: 32, end: 33, name: 'a' }
Identifier
32
33
a
+
Node { type: 'Identifier', start: 36, end: 37, name: 'b' }
Identifier
36
37
b
===
Node {
  type: 'Literal',
  start: 42,
  end: 52,
  value: 2147483648,
  raw: '2147483648' }
Literal
42
52
2147483648
2147483648
Node {
  type: 'ExpressionStatement',
  start: 56,
  end: 70,
  expression: 
   Node {
     type: 'CallExpression',
     start: 56,
     end: 69,
     callee: Node { type: 'Identifier', start: 56, end: 64, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
56
70
Node {
  type: 'CallExpression',
  start: 56,
  end: 69,
  callee: Node { type: 'Identifier', start: 56, end: 64, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 65, end: 68, name: 'foo' } ] }
CallExpression
56
69
Node { type: 'Identifier', start: 56, end: 64, name: 'noInline' }
Identifier
56
64
noInline
[ Node { type: 'Identifier', start: 65, end: 68, name: 'foo' } ]
Node { type: 'Identifier', start: 65, end: 68, name: 'foo' }
Identifier
65
68
foo
Node {
  type: 'ForStatement',
  start: 72,
  end: 207,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 77,
     end: 86,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 88,
     end: 97,
     left: Node { type: 'Identifier', start: 88, end: 89, name: 'i' },
     operator: '<',
     right: Node { type: 'Literal', start: 92, end: 97, value: 10000, raw: '10000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 99,
     end: 102,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 101, end: 102, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 104,
     end: 207,
     body: [ [Node], [Node] ] } }
ForStatement
72
207
Node {
  type: 'VariableDeclaration',
  start: 77,
  end: 86,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 81,
       end: 86,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
77
86
[ Node {
    type: 'VariableDeclarator',
    start: 81,
    end: 86,
    id: Node { type: 'Identifier', start: 81, end: 82, name: 'i' },
    init: Node { type: 'Literal', start: 85, end: 86, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 81,
  end: 86,
  id: Node { type: 'Identifier', start: 81, end: 82, name: 'i' },
  init: Node { type: 'Literal', start: 85, end: 86, value: 0, raw: '0' } }
VariableDeclarator
81
86
Node { type: 'Identifier', start: 81, end: 82, name: 'i' }
Identifier
81
82
i
Node { type: 'Literal', start: 85, end: 86, value: 0, raw: '0' }
Literal
85
86
0
0
var
Node {
  type: 'BinaryExpression',
  start: 88,
  end: 97,
  left: Node { type: 'Identifier', start: 88, end: 89, name: 'i' },
  operator: '<',
  right: Node { type: 'Literal', start: 92, end: 97, value: 10000, raw: '10000' } }
BinaryExpression
88
97
Node { type: 'Identifier', start: 88, end: 89, name: 'i' }
Identifier
88
89
i
<
Node { type: 'Literal', start: 92, end: 97, value: 10000, raw: '10000' }
Literal
92
97
10000
10000
Node {
  type: 'UpdateExpression',
  start: 99,
  end: 102,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 101, end: 102, name: 'i' } }
UpdateExpression
99
102
++
true
Node { type: 'Identifier', start: 101, end: 102, name: 'i' }
Identifier
101
102
i
Node {
  type: 'BlockStatement',
  start: 104,
  end: 207,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 110,
       end: 133,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 138,
       end: 205,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
104
207
[ Node {
    type: 'VariableDeclaration',
    start: 110,
    end: 133,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 138,
    end: 205,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 142,
       end: 158,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 168, end: 205, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 110,
  end: 133,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 114,
       end: 132,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
110
133
[ Node {
    type: 'VariableDeclarator',
    start: 114,
    end: 132,
    id: Node { type: 'Identifier', start: 114, end: 120, name: 'result' },
    init: 
     Node {
       type: 'CallExpression',
       start: 123,
       end: 132,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 114,
  end: 132,
  id: Node { type: 'Identifier', start: 114, end: 120, name: 'result' },
  init: 
   Node {
     type: 'CallExpression',
     start: 123,
     end: 132,
     callee: Node { type: 'Identifier', start: 123, end: 126, name: 'foo' },
     arguments: [ [Node], [Node] ] } }
VariableDeclarator
114
132
Node { type: 'Identifier', start: 114, end: 120, name: 'result' }
Identifier
114
120
result
Node {
  type: 'CallExpression',
  start: 123,
  end: 132,
  callee: Node { type: 'Identifier', start: 123, end: 126, name: 'foo' },
  arguments: 
   [ Node { type: 'Literal', start: 127, end: 128, value: 1, raw: '1' },
     Node { type: 'Literal', start: 130, end: 131, value: 1, raw: '1' } ] }
CallExpression
123
132
Node { type: 'Identifier', start: 123, end: 126, name: 'foo' }
Identifier
123
126
foo
[ Node { type: 'Literal', start: 127, end: 128, value: 1, raw: '1' },
  Node { type: 'Literal', start: 130, end: 131, value: 1, raw: '1' } ]
Node { type: 'Literal', start: 127, end: 128, value: 1, raw: '1' }
Literal
127
128
1
1
Node { type: 'Literal', start: 130, end: 131, value: 1, raw: '1' }
Literal
130
131
1
1
var
Node {
  type: 'IfStatement',
  start: 138,
  end: 205,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 142,
     end: 158,
     left: Node { type: 'Identifier', start: 142, end: 148, name: 'result' },
     operator: '!==',
     right: 
      Node {
        type: 'Literal',
        start: 153,
        end: 158,
        value: false,
        raw: 'false' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 168,
     end: 205,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 174,
        end: 204,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
138
205
Node {
  type: 'BinaryExpression',
  start: 142,
  end: 158,
  left: Node { type: 'Identifier', start: 142, end: 148, name: 'result' },
  operator: '!==',
  right: 
   Node {
     type: 'Literal',
     start: 153,
     end: 158,
     value: false,
     raw: 'false' } }
BinaryExpression
142
158
Node { type: 'Identifier', start: 142, end: 148, name: 'result' }
Identifier
142
148
result
!==
Node {
  type: 'Literal',
  start: 153,
  end: 158,
  value: false,
  raw: 'false' }
Literal
153
158
false
false
Node {
  type: 'ThrowStatement',
  start: 168,
  end: 205,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 174,
     end: 204,
     left: 
      Node {
        type: 'Literal',
        start: 174,
        end: 195,
        value: 'Error: bad result: ',
        raw: '"Error: bad result: "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 198, end: 204, name: 'result' } } }
ThrowStatement
168
205
Node {
  type: 'BinaryExpression',
  start: 174,
  end: 204,
  left: 
   Node {
     type: 'Literal',
     start: 174,
     end: 195,
     value: 'Error: bad result: ',
     raw: '"Error: bad result: "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 198, end: 204, name: 'result' } }
BinaryExpression
174
204
Node {
  type: 'Literal',
  start: 174,
  end: 195,
  value: 'Error: bad result: ',
  raw: '"Error: bad result: "' }
Literal
174
195
Error: bad result: 
"Error: bad result: "
+
Node { type: 'Identifier', start: 198, end: 204, name: 'result' }
Identifier
198
204
result
null
[+] Exception: fold-based-on-int32-proof.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 623,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 41,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 43,
       end: 100,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 102,
       end: 140,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 142,
       end: 156,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 158,
       end: 621,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
623
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 41,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 41, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 43,
    end: 100,
    id: Node { type: 'Identifier', start: 52, end: 55, name: 'bar' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 58, end: 100, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 102,
    end: 140,
    id: Node { type: 'Identifier', start: 111, end: 114, name: 'baz' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 117, end: 140, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 142,
    end: 156,
    expression: 
     Node {
       type: 'CallExpression',
       start: 142,
       end: 155,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 158,
    end: 621,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 163,
       end: 172,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 174,
       end: 183,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 185,
       end: 188,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 190, end: 621, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 41,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'a' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ],
  body: Node { type: 'BlockStatement', start: 19, end: 41, body: [ [Node] ] } }
FunctionDeclaration
0
41
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'a' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'a' }
Identifier
13
14
a
Node { type: 'Identifier', start: 16, end: 17, name: 'b' }
Identifier
16
17
b
Node {
  type: 'BlockStatement',
  start: 19,
  end: 41,
  body: 
   [ Node { type: 'ReturnStatement', start: 25, end: 39, argument: [Node] } ] }
BlockStatement
19
41
[ Node {
    type: 'ReturnStatement',
    start: 25,
    end: 39,
    argument: Node { type: 'ArrayExpression', start: 32, end: 38, elements: [Array] } } ]
Node {
  type: 'ReturnStatement',
  start: 25,
  end: 39,
  argument: 
   Node {
     type: 'ArrayExpression',
     start: 32,
     end: 38,
     elements: [ [Node], [Node] ] } }
ReturnStatement
25
39
Node {
  type: 'ArrayExpression',
  start: 32,
  end: 38,
  elements: 
   [ Node { type: 'Identifier', start: 33, end: 34, name: 'a' },
     Node { type: 'Identifier', start: 36, end: 37, name: 'b' } ] }
ArrayExpression
32
38
[ Node { type: 'Identifier', start: 33, end: 34, name: 'a' },
  Node { type: 'Identifier', start: 36, end: 37, name: 'b' } ]
Node { type: 'Identifier', start: 33, end: 34, name: 'a' }
Identifier
33
34
a
Node { type: 'Identifier', start: 36, end: 37, name: 'b' }
Identifier
36
37
b
Node {
  type: 'FunctionDeclaration',
  start: 43,
  end: 100,
  id: Node { type: 'Identifier', start: 52, end: 55, name: 'bar' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 58, end: 100, body: [ [Node] ] } }
FunctionDeclaration
43
100
Node { type: 'Identifier', start: 52, end: 55, name: 'bar' }
Identifier
52
55
bar
false
false
false
[]
Node {
  type: 'BlockStatement',
  start: 58,
  end: 100,
  body: 
   [ Node { type: 'ReturnStatement', start: 64, end: 98, argument: [Node] } ] }
BlockStatement
58
100
[ Node {
    type: 'ReturnStatement',
    start: 64,
    end: 98,
    argument: 
     Node {
       type: 'CallExpression',
       start: 71,
       end: 97,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'ReturnStatement',
  start: 64,
  end: 98,
  argument: 
   Node {
     type: 'CallExpression',
     start: 71,
     end: 97,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 71,
        end: 80,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [ [Node], [Node] ] } }
ReturnStatement
64
98
Node {
  type: 'CallExpression',
  start: 71,
  end: 97,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 71,
     end: 80,
     object: Node { type: 'Identifier', start: 71, end: 74, name: 'foo' },
     property: Node { type: 'Identifier', start: 75, end: 80, name: 'apply' },
     computed: false },
  arguments: 
   [ Node { type: 'ThisExpression', start: 81, end: 85 },
     Node { type: 'Identifier', start: 87, end: 96, name: 'arguments' } ] }
CallExpression
71
97
Node {
  type: 'MemberExpression',
  start: 71,
  end: 80,
  object: Node { type: 'Identifier', start: 71, end: 74, name: 'foo' },
  property: Node { type: 'Identifier', start: 75, end: 80, name: 'apply' },
  computed: false }
MemberExpression
71
80
Node { type: 'Identifier', start: 71, end: 74, name: 'foo' }
Identifier
71
74
foo
Node { type: 'Identifier', start: 75, end: 80, name: 'apply' }
Identifier
75
80
apply
false
[ Node { type: 'ThisExpression', start: 81, end: 85 },
  Node { type: 'Identifier', start: 87, end: 96, name: 'arguments' } ]
Node { type: 'ThisExpression', start: 81, end: 85 }
ThisExpression
81
85
Node { type: 'Identifier', start: 87, end: 96, name: 'arguments' }
Identifier
87
96
arguments
Node {
  type: 'FunctionDeclaration',
  start: 102,
  end: 140,
  id: Node { type: 'Identifier', start: 111, end: 114, name: 'baz' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 117, end: 140, body: [ [Node] ] } }
FunctionDeclaration
102
140
Node { type: 'Identifier', start: 111, end: 114, name: 'baz' }
Identifier
111
114
baz
false
false
false
[]
Node {
  type: 'BlockStatement',
  start: 117,
  end: 140,
  body: 
   [ Node {
       type: 'ReturnStatement',
       start: 123,
       end: 138,
       argument: [Node] } ] }
BlockStatement
117
140
[ Node {
    type: 'ReturnStatement',
    start: 123,
    end: 138,
    argument: 
     Node {
       type: 'CallExpression',
       start: 130,
       end: 137,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'ReturnStatement',
  start: 123,
  end: 138,
  argument: 
   Node {
     type: 'CallExpression',
     start: 130,
     end: 137,
     callee: Node { type: 'Identifier', start: 130, end: 133, name: 'bar' },
     arguments: [ [Node] ] } }
ReturnStatement
123
138
Node {
  type: 'CallExpression',
  start: 130,
  end: 137,
  callee: Node { type: 'Identifier', start: 130, end: 133, name: 'bar' },
  arguments: 
   [ Node { type: 'Literal', start: 134, end: 136, value: 42, raw: '42' } ] }
CallExpression
130
137
Node { type: 'Identifier', start: 130, end: 133, name: 'bar' }
Identifier
130
133
bar
[ Node { type: 'Literal', start: 134, end: 136, value: 42, raw: '42' } ]
Node { type: 'Literal', start: 134, end: 136, value: 42, raw: '42' }
Literal
134
136
42
42
Node {
  type: 'ExpressionStatement',
  start: 142,
  end: 156,
  expression: 
   Node {
     type: 'CallExpression',
     start: 142,
     end: 155,
     callee: Node { type: 'Identifier', start: 142, end: 150, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
142
156
Node {
  type: 'CallExpression',
  start: 142,
  end: 155,
  callee: Node { type: 'Identifier', start: 142, end: 150, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 151, end: 154, name: 'baz' } ] }
CallExpression
142
155
Node { type: 'Identifier', start: 142, end: 150, name: 'noInline' }
Identifier
142
150
noInline
[ Node { type: 'Identifier', start: 151, end: 154, name: 'baz' } ]
Node { type: 'Identifier', start: 151, end: 154, name: 'baz' }
Identifier
151
154
baz
Node {
  type: 'ForStatement',
  start: 158,
  end: 621,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 163,
     end: 172,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 174,
     end: 183,
     left: Node { type: 'Identifier', start: 174, end: 175, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 178,
        end: 183,
        value: 10000,
        raw: '10000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 185,
     end: 188,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 187, end: 188, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 190,
     end: 621,
     body: [ [Node], [Node], [Node], [Node], [Node] ] } }
ForStatement
158
621
Node {
  type: 'VariableDeclaration',
  start: 163,
  end: 172,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 167,
       end: 172,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
163
172
[ Node {
    type: 'VariableDeclarator',
    start: 167,
    end: 172,
    id: Node { type: 'Identifier', start: 167, end: 168, name: 'i' },
    init: Node { type: 'Literal', start: 171, end: 172, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 167,
  end: 172,
  id: Node { type: 'Identifier', start: 167, end: 168, name: 'i' },
  init: Node { type: 'Literal', start: 171, end: 172, value: 0, raw: '0' } }
VariableDeclarator
167
172
Node { type: 'Identifier', start: 167, end: 168, name: 'i' }
Identifier
167
168
i
Node { type: 'Literal', start: 171, end: 172, value: 0, raw: '0' }
Literal
171
172
0
0
var
Node {
  type: 'BinaryExpression',
  start: 174,
  end: 183,
  left: Node { type: 'Identifier', start: 174, end: 175, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 178,
     end: 183,
     value: 10000,
     raw: '10000' } }
BinaryExpression
174
183
Node { type: 'Identifier', start: 174, end: 175, name: 'i' }
Identifier
174
175
i
<
Node {
  type: 'Literal',
  start: 178,
  end: 183,
  value: 10000,
  raw: '10000' }
Literal
178
183
10000
10000
Node {
  type: 'UpdateExpression',
  start: 185,
  end: 188,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 187, end: 188, name: 'i' } }
UpdateExpression
185
188
++
true
Node { type: 'Identifier', start: 187, end: 188, name: 'i' }
Identifier
187
188
i
Node {
  type: 'BlockStatement',
  start: 190,
  end: 621,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 196,
       end: 215,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 220,
       end: 299,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 304,
       end: 381,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 386,
       end: 468,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ForStatement',
       start: 473,
       end: 619,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ] }
BlockStatement
190
621
[ Node {
    type: 'VariableDeclaration',
    start: 196,
    end: 215,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 220,
    end: 299,
    test: 
     Node {
       type: 'UnaryExpression',
       start: 224,
       end: 250,
       operator: '!',
       prefix: true,
       argument: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 260, end: 299, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 304,
    end: 381,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 308,
       end: 326,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 336, end: 381, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 386,
    end: 468,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 390,
       end: 405,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 415, end: 468, argument: [Node] },
    alternate: null },
  Node {
    type: 'ForStatement',
    start: 473,
    end: 619,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 478,
       end: 487,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 489,
       end: 494,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 496,
       end: 499,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 501, end: 619, body: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 196,
  end: 215,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 200,
       end: 214,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
196
215
[ Node {
    type: 'VariableDeclarator',
    start: 200,
    end: 214,
    id: Node { type: 'Identifier', start: 200, end: 206, name: 'result' },
    init: 
     Node {
       type: 'CallExpression',
       start: 209,
       end: 214,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'VariableDeclarator',
  start: 200,
  end: 214,
  id: Node { type: 'Identifier', start: 200, end: 206, name: 'result' },
  init: 
   Node {
     type: 'CallExpression',
     start: 209,
     end: 214,
     callee: Node { type: 'Identifier', start: 209, end: 212, name: 'baz' },
     arguments: [] } }
VariableDeclarator
200
214
Node { type: 'Identifier', start: 200, end: 206, name: 'result' }
Identifier
200
206
result
Node {
  type: 'CallExpression',
  start: 209,
  end: 214,
  callee: Node { type: 'Identifier', start: 209, end: 212, name: 'baz' },
  arguments: [] }
CallExpression
209
214
Node { type: 'Identifier', start: 209, end: 212, name: 'baz' }
Identifier
209
212
baz
[]
var
Node {
  type: 'IfStatement',
  start: 220,
  end: 299,
  test: 
   Node {
     type: 'UnaryExpression',
     start: 224,
     end: 250,
     operator: '!',
     prefix: true,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 226,
        end: 249,
        left: [Node],
        operator: 'instanceof',
        right: [Node] } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 260,
     end: 299,
     argument: 
      Node {
        type: 'Literal',
        start: 266,
        end: 298,
        value: 'Error: result is not an array.',
        raw: '"Error: result is not an array."' } },
  alternate: null }
IfStatement
220
299
Node {
  type: 'UnaryExpression',
  start: 224,
  end: 250,
  operator: '!',
  prefix: true,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 226,
     end: 249,
     left: Node { type: 'Identifier', start: 226, end: 232, name: 'result' },
     operator: 'instanceof',
     right: Node { type: 'Identifier', start: 244, end: 249, name: 'Array' } } }
UnaryExpression
224
250
!
true
Node {
  type: 'BinaryExpression',
  start: 226,
  end: 249,
  left: Node { type: 'Identifier', start: 226, end: 232, name: 'result' },
  operator: 'instanceof',
  right: Node { type: 'Identifier', start: 244, end: 249, name: 'Array' } }
BinaryExpression
226
249
Node { type: 'Identifier', start: 226, end: 232, name: 'result' }
Identifier
226
232
result
instanceof
Node { type: 'Identifier', start: 244, end: 249, name: 'Array' }
Identifier
244
249
Array
Node {
  type: 'ThrowStatement',
  start: 260,
  end: 299,
  argument: 
   Node {
     type: 'Literal',
     start: 266,
     end: 298,
     value: 'Error: result is not an array.',
     raw: '"Error: result is not an array."' } }
ThrowStatement
260
299
Node {
  type: 'Literal',
  start: 266,
  end: 298,
  value: 'Error: result is not an array.',
  raw: '"Error: result is not an array."' }
Literal
266
298
Error: result is not an array.
"Error: result is not an array."
null
[+] Exception: fold-load-varargs-arity-check-fail-barely.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 636,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 53,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 55,
       end: 112,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 114,
       end: 152,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 154,
       end: 168,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 170,
       end: 633,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
636
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 53,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 25, end: 53, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 55,
    end: 112,
    id: Node { type: 'Identifier', start: 64, end: 67, name: 'bar' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 70, end: 112, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 114,
    end: 152,
    id: Node { type: 'Identifier', start: 123, end: 126, name: 'baz' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 129, end: 152, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 154,
    end: 168,
    expression: 
     Node {
       type: 'CallExpression',
       start: 154,
       end: 167,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 170,
    end: 633,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 175,
       end: 184,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 186,
       end: 195,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 197,
       end: 200,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 202, end: 633, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 53,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'a' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'b' },
     Node { type: 'Identifier', start: 19, end: 20, name: 'c' },
     Node { type: 'Identifier', start: 22, end: 23, name: 'd' } ],
  body: Node { type: 'BlockStatement', start: 25, end: 53, body: [ [Node] ] } }
FunctionDeclaration
0
53
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'a' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'b' },
  Node { type: 'Identifier', start: 19, end: 20, name: 'c' },
  Node { type: 'Identifier', start: 22, end: 23, name: 'd' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'a' }
Identifier
13
14
a
Node { type: 'Identifier', start: 16, end: 17, name: 'b' }
Identifier
16
17
b
Node { type: 'Identifier', start: 19, end: 20, name: 'c' }
Identifier
19
20
c
Node { type: 'Identifier', start: 22, end: 23, name: 'd' }
Identifier
22
23
d
Node {
  type: 'BlockStatement',
  start: 25,
  end: 53,
  body: 
   [ Node { type: 'ReturnStatement', start: 31, end: 51, argument: [Node] } ] }
BlockStatement
25
53
[ Node {
    type: 'ReturnStatement',
    start: 31,
    end: 51,
    argument: Node { type: 'ArrayExpression', start: 38, end: 50, elements: [Array] } } ]
Node {
  type: 'ReturnStatement',
  start: 31,
  end: 51,
  argument: 
   Node {
     type: 'ArrayExpression',
     start: 38,
     end: 50,
     elements: [ [Node], [Node], [Node], [Node] ] } }
ReturnStatement
31
51
Node {
  type: 'ArrayExpression',
  start: 38,
  end: 50,
  elements: 
   [ Node { type: 'Identifier', start: 39, end: 40, name: 'a' },
     Node { type: 'Identifier', start: 42, end: 43, name: 'b' },
     Node { type: 'Identifier', start: 45, end: 46, name: 'c' },
     Node { type: 'Identifier', start: 48, end: 49, name: 'd' } ] }
ArrayExpression
38
50
[ Node { type: 'Identifier', start: 39, end: 40, name: 'a' },
  Node { type: 'Identifier', start: 42, end: 43, name: 'b' },
  Node { type: 'Identifier', start: 45, end: 46, name: 'c' },
  Node { type: 'Identifier', start: 48, end: 49, name: 'd' } ]
Node { type: 'Identifier', start: 39, end: 40, name: 'a' }
Identifier
39
40
a
Node { type: 'Identifier', start: 42, end: 43, name: 'b' }
Identifier
42
43
b
Node { type: 'Identifier', start: 45, end: 46, name: 'c' }
Identifier
45
46
c
Node { type: 'Identifier', start: 48, end: 49, name: 'd' }
Identifier
48
49
d
Node {
  type: 'FunctionDeclaration',
  start: 55,
  end: 112,
  id: Node { type: 'Identifier', start: 64, end: 67, name: 'bar' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 70, end: 112, body: [ [Node] ] } }
FunctionDeclaration
55
112
Node { type: 'Identifier', start: 64, end: 67, name: 'bar' }
Identifier
64
67
bar
false
false
false
[]
Node {
  type: 'BlockStatement',
  start: 70,
  end: 112,
  body: 
   [ Node { type: 'ReturnStatement', start: 76, end: 110, argument: [Node] } ] }
BlockStatement
70
112
[ Node {
    type: 'ReturnStatement',
    start: 76,
    end: 110,
    argument: 
     Node {
       type: 'CallExpression',
       start: 83,
       end: 109,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'ReturnStatement',
  start: 76,
  end: 110,
  argument: 
   Node {
     type: 'CallExpression',
     start: 83,
     end: 109,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 83,
        end: 92,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [ [Node], [Node] ] } }
ReturnStatement
76
110
Node {
  type: 'CallExpression',
  start: 83,
  end: 109,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 83,
     end: 92,
     object: Node { type: 'Identifier', start: 83, end: 86, name: 'foo' },
     property: Node { type: 'Identifier', start: 87, end: 92, name: 'apply' },
     computed: false },
  arguments: 
   [ Node { type: 'ThisExpression', start: 93, end: 97 },
     Node { type: 'Identifier', start: 99, end: 108, name: 'arguments' } ] }
CallExpression
83
109
Node {
  type: 'MemberExpression',
  start: 83,
  end: 92,
  object: Node { type: 'Identifier', start: 83, end: 86, name: 'foo' },
  property: Node { type: 'Identifier', start: 87, end: 92, name: 'apply' },
  computed: false }
MemberExpression
83
92
Node { type: 'Identifier', start: 83, end: 86, name: 'foo' }
Identifier
83
86
foo
Node { type: 'Identifier', start: 87, end: 92, name: 'apply' }
Identifier
87
92
apply
false
[ Node { type: 'ThisExpression', start: 93, end: 97 },
  Node { type: 'Identifier', start: 99, end: 108, name: 'arguments' } ]
Node { type: 'ThisExpression', start: 93, end: 97 }
ThisExpression
93
97
Node { type: 'Identifier', start: 99, end: 108, name: 'arguments' }
Identifier
99
108
arguments
Node {
  type: 'FunctionDeclaration',
  start: 114,
  end: 152,
  id: Node { type: 'Identifier', start: 123, end: 126, name: 'baz' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 129, end: 152, body: [ [Node] ] } }
FunctionDeclaration
114
152
Node { type: 'Identifier', start: 123, end: 126, name: 'baz' }
Identifier
123
126
baz
false
false
false
[]
Node {
  type: 'BlockStatement',
  start: 129,
  end: 152,
  body: 
   [ Node {
       type: 'ReturnStatement',
       start: 135,
       end: 150,
       argument: [Node] } ] }
BlockStatement
129
152
[ Node {
    type: 'ReturnStatement',
    start: 135,
    end: 150,
    argument: 
     Node {
       type: 'CallExpression',
       start: 142,
       end: 149,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'ReturnStatement',
  start: 135,
  end: 150,
  argument: 
   Node {
     type: 'CallExpression',
     start: 142,
     end: 149,
     callee: Node { type: 'Identifier', start: 142, end: 145, name: 'bar' },
     arguments: [ [Node] ] } }
ReturnStatement
135
150
Node {
  type: 'CallExpression',
  start: 142,
  end: 149,
  callee: Node { type: 'Identifier', start: 142, end: 145, name: 'bar' },
  arguments: 
   [ Node { type: 'Literal', start: 146, end: 148, value: 42, raw: '42' } ] }
CallExpression
142
149
Node { type: 'Identifier', start: 142, end: 145, name: 'bar' }
Identifier
142
145
bar
[ Node { type: 'Literal', start: 146, end: 148, value: 42, raw: '42' } ]
Node { type: 'Literal', start: 146, end: 148, value: 42, raw: '42' }
Literal
146
148
42
42
Node {
  type: 'ExpressionStatement',
  start: 154,
  end: 168,
  expression: 
   Node {
     type: 'CallExpression',
     start: 154,
     end: 167,
     callee: Node { type: 'Identifier', start: 154, end: 162, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
154
168
Node {
  type: 'CallExpression',
  start: 154,
  end: 167,
  callee: Node { type: 'Identifier', start: 154, end: 162, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 163, end: 166, name: 'baz' } ] }
CallExpression
154
167
Node { type: 'Identifier', start: 154, end: 162, name: 'noInline' }
Identifier
154
162
noInline
[ Node { type: 'Identifier', start: 163, end: 166, name: 'baz' } ]
Node { type: 'Identifier', start: 163, end: 166, name: 'baz' }
Identifier
163
166
baz
Node {
  type: 'ForStatement',
  start: 170,
  end: 633,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 175,
     end: 184,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 186,
     end: 195,
     left: Node { type: 'Identifier', start: 186, end: 187, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 190,
        end: 195,
        value: 10000,
        raw: '10000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 197,
     end: 200,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 199, end: 200, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 202,
     end: 633,
     body: [ [Node], [Node], [Node], [Node], [Node] ] } }
ForStatement
170
633
Node {
  type: 'VariableDeclaration',
  start: 175,
  end: 184,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 179,
       end: 184,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
175
184
[ Node {
    type: 'VariableDeclarator',
    start: 179,
    end: 184,
    id: Node { type: 'Identifier', start: 179, end: 180, name: 'i' },
    init: Node { type: 'Literal', start: 183, end: 184, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 179,
  end: 184,
  id: Node { type: 'Identifier', start: 179, end: 180, name: 'i' },
  init: Node { type: 'Literal', start: 183, end: 184, value: 0, raw: '0' } }
VariableDeclarator
179
184
Node { type: 'Identifier', start: 179, end: 180, name: 'i' }
Identifier
179
180
i
Node { type: 'Literal', start: 183, end: 184, value: 0, raw: '0' }
Literal
183
184
0
0
var
Node {
  type: 'BinaryExpression',
  start: 186,
  end: 195,
  left: Node { type: 'Identifier', start: 186, end: 187, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 190,
     end: 195,
     value: 10000,
     raw: '10000' } }
BinaryExpression
186
195
Node { type: 'Identifier', start: 186, end: 187, name: 'i' }
Identifier
186
187
i
<
Node {
  type: 'Literal',
  start: 190,
  end: 195,
  value: 10000,
  raw: '10000' }
Literal
190
195
10000
10000
Node {
  type: 'UpdateExpression',
  start: 197,
  end: 200,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 199, end: 200, name: 'i' } }
UpdateExpression
197
200
++
true
Node { type: 'Identifier', start: 199, end: 200, name: 'i' }
Identifier
199
200
i
Node {
  type: 'BlockStatement',
  start: 202,
  end: 633,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 208,
       end: 227,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 232,
       end: 311,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 316,
       end: 393,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 398,
       end: 480,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ForStatement',
       start: 485,
       end: 631,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ] }
BlockStatement
202
633
[ Node {
    type: 'VariableDeclaration',
    start: 208,
    end: 227,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 232,
    end: 311,
    test: 
     Node {
       type: 'UnaryExpression',
       start: 236,
       end: 262,
       operator: '!',
       prefix: true,
       argument: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 272, end: 311, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 316,
    end: 393,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 320,
       end: 338,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 348, end: 393, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 398,
    end: 480,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 402,
       end: 417,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 427, end: 480, argument: [Node] },
    alternate: null },
  Node {
    type: 'ForStatement',
    start: 485,
    end: 631,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 490,
       end: 499,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 501,
       end: 506,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 508,
       end: 511,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 513, end: 631, body: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 208,
  end: 227,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 212,
       end: 226,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
208
227
[ Node {
    type: 'VariableDeclarator',
    start: 212,
    end: 226,
    id: Node { type: 'Identifier', start: 212, end: 218, name: 'result' },
    init: 
     Node {
       type: 'CallExpression',
       start: 221,
       end: 226,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'VariableDeclarator',
  start: 212,
  end: 226,
  id: Node { type: 'Identifier', start: 212, end: 218, name: 'result' },
  init: 
   Node {
     type: 'CallExpression',
     start: 221,
     end: 226,
     callee: Node { type: 'Identifier', start: 221, end: 224, name: 'baz' },
     arguments: [] } }
VariableDeclarator
212
226
Node { type: 'Identifier', start: 212, end: 218, name: 'result' }
Identifier
212
218
result
Node {
  type: 'CallExpression',
  start: 221,
  end: 226,
  callee: Node { type: 'Identifier', start: 221, end: 224, name: 'baz' },
  arguments: [] }
CallExpression
221
226
Node { type: 'Identifier', start: 221, end: 224, name: 'baz' }
Identifier
221
224
baz
[]
var
Node {
  type: 'IfStatement',
  start: 232,
  end: 311,
  test: 
   Node {
     type: 'UnaryExpression',
     start: 236,
     end: 262,
     operator: '!',
     prefix: true,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 238,
        end: 261,
        left: [Node],
        operator: 'instanceof',
        right: [Node] } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 272,
     end: 311,
     argument: 
      Node {
        type: 'Literal',
        start: 278,
        end: 310,
        value: 'Error: result is not an array.',
        raw: '"Error: result is not an array."' } },
  alternate: null }
IfStatement
232
311
Node {
  type: 'UnaryExpression',
  start: 236,
  end: 262,
  operator: '!',
  prefix: true,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 238,
     end: 261,
     left: Node { type: 'Identifier', start: 238, end: 244, name: 'result' },
     operator: 'instanceof',
     right: Node { type: 'Identifier', start: 256, end: 261, name: 'Array' } } }
UnaryExpression
236
262
!
true
Node {
  type: 'BinaryExpression',
  start: 238,
  end: 261,
  left: Node { type: 'Identifier', start: 238, end: 244, name: 'result' },
  operator: 'instanceof',
  right: Node { type: 'Identifier', start: 256, end: 261, name: 'Array' } }
BinaryExpression
238
261
Node { type: 'Identifier', start: 238, end: 244, name: 'result' }
Identifier
238
244
result
instanceof
Node { type: 'Identifier', start: 256, end: 261, name: 'Array' }
Identifier
256
261
Array
Node {
  type: 'ThrowStatement',
  start: 272,
  end: 311,
  argument: 
   Node {
     type: 'Literal',
     start: 278,
     end: 310,
     value: 'Error: result is not an array.',
     raw: '"Error: result is not an array."' } }
ThrowStatement
272
311
Node {
  type: 'Literal',
  start: 278,
  end: 310,
  value: 'Error: result is not an array.',
  raw: '"Error: result is not an array."' }
Literal
278
310
Error: result is not an array.
"Error: result is not an array."
null
[+] Exception: fold-load-varargs-arity-check-fail.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 629,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 23,
       end: 58,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 60,
       end: 261,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 263,
       end: 323,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 325,
       end: 339,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 341,
       end: 509,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'IfStatement',
       start: 511,
       end: 628,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
629
[ Node {
    type: 'FunctionDeclaration',
    start: 23,
    end: 58,
    id: Node { type: 'Identifier', start: 32, end: 35, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 39, end: 58, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 60,
    end: 261,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 65,
       end: 74,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 76,
       end: 83,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 85,
       end: 88,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 90, end: 261, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 263,
    end: 323,
    id: Node { type: 'Identifier', start: 272, end: 275, name: 'bar' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 279, end: 323, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 325,
    end: 339,
    expression: 
     Node {
       type: 'CallExpression',
       start: 325,
       end: 338,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 341,
    end: 509,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 346,
       end: 355,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 357,
       end: 367,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 369,
       end: 372,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 374, end: 509, body: [Array] } },
  Node {
    type: 'IfStatement',
    start: 511,
    end: 628,
    test: 
     Node {
       type: 'CallExpression',
       start: 515,
       end: 544,
       callee: [Node],
       arguments: [Array] },
    consequent: Node { type: 'ThrowStatement', start: 550, end: 628, argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 23,
  end: 58,
  id: Node { type: 'Identifier', start: 32, end: 35, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 36, end: 37, name: 'o' } ],
  body: Node { type: 'BlockStatement', start: 39, end: 58, body: [ [Node] ] } }
FunctionDeclaration
23
58
Node { type: 'Identifier', start: 32, end: 35, name: 'foo' }
Identifier
32
35
foo
false
false
false
[ Node { type: 'Identifier', start: 36, end: 37, name: 'o' } ]
Node { type: 'Identifier', start: 36, end: 37, name: 'o' }
Identifier
36
37
o
Node {
  type: 'BlockStatement',
  start: 39,
  end: 58,
  body: 
   [ Node { type: 'ReturnStatement', start: 45, end: 56, argument: [Node] } ] }
BlockStatement
39
58
[ Node {
    type: 'ReturnStatement',
    start: 45,
    end: 56,
    argument: 
     Node {
       type: 'MemberExpression',
       start: 52,
       end: 55,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'ReturnStatement',
  start: 45,
  end: 56,
  argument: 
   Node {
     type: 'MemberExpression',
     start: 52,
     end: 55,
     object: Node { type: 'Identifier', start: 52, end: 53, name: 'o' },
     property: Node { type: 'Identifier', start: 54, end: 55, name: 'f' },
     computed: false } }
ReturnStatement
45
56
Node {
  type: 'MemberExpression',
  start: 52,
  end: 55,
  object: Node { type: 'Identifier', start: 52, end: 53, name: 'o' },
  property: Node { type: 'Identifier', start: 54, end: 55, name: 'f' },
  computed: false }
MemberExpression
52
55
Node { type: 'Identifier', start: 52, end: 53, name: 'o' }
Identifier
52
53
o
Node { type: 'Identifier', start: 54, end: 55, name: 'f' }
Identifier
54
55
f
false
Node {
  type: 'ForStatement',
  start: 60,
  end: 261,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 65,
     end: 74,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 76,
     end: 83,
     left: Node { type: 'Identifier', start: 76, end: 77, name: 'i' },
     operator: '<',
     right: Node { type: 'Literal', start: 80, end: 83, value: 100, raw: '100' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 85,
     end: 88,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 87, end: 88, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 90,
     end: 261,
     body: [ [Node], [Node] ] } }
ForStatement
60
261
Node {
  type: 'VariableDeclaration',
  start: 65,
  end: 74,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 69,
       end: 74,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
65
74
[ Node {
    type: 'VariableDeclarator',
    start: 69,
    end: 74,
    id: Node { type: 'Identifier', start: 69, end: 70, name: 'i' },
    init: Node { type: 'Literal', start: 73, end: 74, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 69,
  end: 74,
  id: Node { type: 'Identifier', start: 69, end: 70, name: 'i' },
  init: Node { type: 'Literal', start: 73, end: 74, value: 0, raw: '0' } }
VariableDeclarator
69
74
Node { type: 'Identifier', start: 69, end: 70, name: 'i' }
Identifier
69
70
i
Node { type: 'Literal', start: 73, end: 74, value: 0, raw: '0' }
Literal
73
74
0
0
var
Node {
  type: 'BinaryExpression',
  start: 76,
  end: 83,
  left: Node { type: 'Identifier', start: 76, end: 77, name: 'i' },
  operator: '<',
  right: Node { type: 'Literal', start: 80, end: 83, value: 100, raw: '100' } }
BinaryExpression
76
83
Node { type: 'Identifier', start: 76, end: 77, name: 'i' }
Identifier
76
77
i
<
Node { type: 'Literal', start: 80, end: 83, value: 100, raw: '100' }
Literal
80
83
100
100
Node {
  type: 'UpdateExpression',
  start: 85,
  end: 88,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 87, end: 88, name: 'i' } }
UpdateExpression
85
88
++
true
Node { type: 'Identifier', start: 87, end: 88, name: 'i' }
Identifier
87
88
i
Node {
  type: 'BlockStatement',
  start: 90,
  end: 261,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 96,
       end: 148,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 153,
       end: 259,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
90
261
[ Node {
    type: 'VariableDeclaration',
    start: 96,
    end: 148,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 153,
    end: 259,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 157,
       end: 178,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 188, end: 259, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 96,
  end: 148,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 100,
       end: 147,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
96
148
[ Node {
    type: 'VariableDeclarator',
    start: 100,
    end: 147,
    id: Node { type: 'Identifier', start: 100, end: 106, name: 'result' },
    init: 
     Node {
       type: 'CallExpression',
       start: 109,
       end: 147,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 100,
  end: 147,
  id: Node { type: 'Identifier', start: 100, end: 106, name: 'result' },
  init: 
   Node {
     type: 'CallExpression',
     start: 109,
     end: 147,
     callee: Node { type: 'Identifier', start: 109, end: 112, name: 'foo' },
     arguments: [ [Node] ] } }
VariableDeclarator
100
147
Node { type: 'Identifier', start: 100, end: 106, name: 'result' }
Identifier
100
106
result
Node {
  type: 'CallExpression',
  start: 109,
  end: 147,
  callee: Node { type: 'Identifier', start: 109, end: 112, name: 'foo' },
  arguments: 
   [ Node {
       type: 'ConditionalExpression',
       start: 113,
       end: 146,
       test: [Node],
       consequent: [Node],
       alternate: [Node] } ] }
CallExpression
109
147
Node { type: 'Identifier', start: 109, end: 112, name: 'foo' }
Identifier
109
112
foo
[ Node {
    type: 'ConditionalExpression',
    start: 113,
    end: 146,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 114,
       end: 119,
       left: [Node],
       operator: '&',
       right: [Node] },
    consequent: 
     Node {
       type: 'ObjectExpression',
       start: 123,
       end: 133,
       properties: [Array] },
    alternate: 
     Node {
       type: 'ObjectExpression',
       start: 136,
       end: 146,
       properties: [Array] } } ]
Node {
  type: 'ConditionalExpression',
  start: 113,
  end: 146,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 114,
     end: 119,
     left: Node { type: 'Identifier', start: 114, end: 115, name: 'i' },
     operator: '&',
     right: Node { type: 'Literal', start: 118, end: 119, value: 1, raw: '1' } },
  consequent: 
   Node {
     type: 'ObjectExpression',
     start: 123,
     end: 133,
     properties: [ [Node], [Node] ] },
  alternate: 
   Node {
     type: 'ObjectExpression',
     start: 136,
     end: 146,
     properties: [ [Node], [Node] ] } }
ConditionalExpression
113
146
Node {
  type: 'BinaryExpression',
  start: 114,
  end: 119,
  left: Node { type: 'Identifier', start: 114, end: 115, name: 'i' },
  operator: '&',
  right: Node { type: 'Literal', start: 118, end: 119, value: 1, raw: '1' } }
BinaryExpression
114
119
Node { type: 'Identifier', start: 114, end: 115, name: 'i' }
Identifier
114
115
i
&
Node { type: 'Literal', start: 118, end: 119, value: 1, raw: '1' }
Literal
118
119
1
1
Node {
  type: 'ObjectExpression',
  start: 123,
  end: 133,
  properties: 
   [ Node {
       type: 'Property',
       start: 124,
       end: 127,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 129,
       end: 132,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
123
133
[ Node {
    type: 'Property',
    start: 124,
    end: 127,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 124, end: 125, name: 'f' },
    value: Node { type: 'Literal', start: 126, end: 127, value: 1, raw: '1' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 129,
    end: 132,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 129, end: 130, name: 'g' },
    value: Node { type: 'Literal', start: 131, end: 132, value: 2, raw: '2' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 124,
  end: 127,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 124, end: 125, name: 'f' },
  value: Node { type: 'Literal', start: 126, end: 127, value: 1, raw: '1' },
  kind: 'init' }
Property
124
127
false
false
false
Node { type: 'Identifier', start: 124, end: 125, name: 'f' }
Identifier
124
125
f
Node { type: 'Literal', start: 126, end: 127, value: 1, raw: '1' }
Literal
126
127
1
1
init
Node {
  type: 'Property',
  start: 129,
  end: 132,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 129, end: 130, name: 'g' },
  value: Node { type: 'Literal', start: 131, end: 132, value: 2, raw: '2' },
  kind: 'init' }
Property
129
132
false
false
false
Node { type: 'Identifier', start: 129, end: 130, name: 'g' }
Identifier
129
130
g
Node { type: 'Literal', start: 131, end: 132, value: 2, raw: '2' }
Literal
131
132
2
2
init
Node {
  type: 'ObjectExpression',
  start: 136,
  end: 146,
  properties: 
   [ Node {
       type: 'Property',
       start: 137,
       end: 140,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 142,
       end: 145,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
136
146
[ Node {
    type: 'Property',
    start: 137,
    end: 140,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 137, end: 138, name: 'g' },
    value: Node { type: 'Literal', start: 139, end: 140, value: 1, raw: '1' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 142,
    end: 145,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 142, end: 143, name: 'f' },
    value: Node { type: 'Literal', start: 144, end: 145, value: 2, raw: '2' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 137,
  end: 140,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 137, end: 138, name: 'g' },
  value: Node { type: 'Literal', start: 139, end: 140, value: 1, raw: '1' },
  kind: 'init' }
Property
137
140
false
false
false
Node { type: 'Identifier', start: 137, end: 138, name: 'g' }
Identifier
137
138
g
Node { type: 'Literal', start: 139, end: 140, value: 1, raw: '1' }
Literal
139
140
1
1
init
Node {
  type: 'Property',
  start: 142,
  end: 145,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 142, end: 143, name: 'f' },
  value: Node { type: 'Literal', start: 144, end: 145, value: 2, raw: '2' },
  kind: 'init' }
Property
142
145
false
false
false
Node { type: 'Identifier', start: 142, end: 143, name: 'f' }
Identifier
142
143
f
Node { type: 'Literal', start: 144, end: 145, value: 2, raw: '2' }
Literal
144
145
2
2
init
var
Node {
  type: 'IfStatement',
  start: 153,
  end: 259,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 157,
     end: 178,
     left: Node { type: 'Identifier', start: 157, end: 163, name: 'result' },
     operator: '!=',
     right: 
      Node {
        type: 'BinaryExpression',
        start: 167,
        end: 178,
        left: [Node],
        operator: '-',
        right: [Node] } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 188,
     end: 259,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 194,
        end: 258,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
153
259
Node {
  type: 'BinaryExpression',
  start: 157,
  end: 178,
  left: Node { type: 'Identifier', start: 157, end: 163, name: 'result' },
  operator: '!=',
  right: 
   Node {
     type: 'BinaryExpression',
     start: 167,
     end: 178,
     left: Node { type: 'Literal', start: 167, end: 168, value: 2, raw: '2' },
     operator: '-',
     right: 
      Node {
        type: 'BinaryExpression',
        start: 172,
        end: 177,
        left: [Node],
        operator: '&',
        right: [Node] } } }
BinaryExpression
157
178
Node { type: 'Identifier', start: 157, end: 163, name: 'result' }
Identifier
157
163
result
!=
Node {
  type: 'BinaryExpression',
  start: 167,
  end: 178,
  left: Node { type: 'Literal', start: 167, end: 168, value: 2, raw: '2' },
  operator: '-',
  right: 
   Node {
     type: 'BinaryExpression',
     start: 172,
     end: 177,
     left: Node { type: 'Identifier', start: 172, end: 173, name: 'i' },
     operator: '&',
     right: Node { type: 'Literal', start: 176, end: 177, value: 1, raw: '1' } } }
BinaryExpression
167
178
Node { type: 'Literal', start: 167, end: 168, value: 2, raw: '2' }
Literal
167
168
2
2
-
Node {
  type: 'BinaryExpression',
  start: 172,
  end: 177,
  left: Node { type: 'Identifier', start: 172, end: 173, name: 'i' },
  operator: '&',
  right: Node { type: 'Literal', start: 176, end: 177, value: 1, raw: '1' } }
BinaryExpression
172
177
Node { type: 'Identifier', start: 172, end: 173, name: 'i' }
Identifier
172
173
i
&
Node { type: 'Literal', start: 176, end: 177, value: 1, raw: '1' }
Literal
176
177
1
1
Node {
  type: 'ThrowStatement',
  start: 188,
  end: 259,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 194,
     end: 258,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 194,
        end: 249,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Identifier', start: 252, end: 258, name: 'result' } } }
ThrowStatement
188
259
Node {
  type: 'BinaryExpression',
  start: 194,
  end: 258,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 194,
     end: 249,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 194,
        end: 242,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Literal', start: 245, end: 249, value: ': ', raw: '": "' } },
  operator: '+',
  right: Node { type: 'Identifier', start: 252, end: 258, name: 'result' } }
BinaryExpression
194
258
Node {
  type: 'BinaryExpression',
  start: 194,
  end: 249,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 194,
     end: 242,
     left: 
      Node {
        type: 'Literal',
        start: 194,
        end: 238,
        value: 'Error: bad result in warm-up loop for i = ',
        raw: '"Error: bad result in warm-up loop for i = "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 241, end: 242, name: 'i' } },
  operator: '+',
  right: Node { type: 'Literal', start: 245, end: 249, value: ': ', raw: '": "' } }
BinaryExpression
194
249
Node {
  type: 'BinaryExpression',
  start: 194,
  end: 242,
  left: 
   Node {
     type: 'Literal',
     start: 194,
     end: 238,
     value: 'Error: bad result in warm-up loop for i = ',
     raw: '"Error: bad result in warm-up loop for i = "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 241, end: 242, name: 'i' } }
BinaryExpression
194
242
Node {
  type: 'Literal',
  start: 194,
  end: 238,
  value: 'Error: bad result in warm-up loop for i = ',
  raw: '"Error: bad result in warm-up loop for i = "' }
Literal
194
238
Error: bad result in warm-up loop for i = 
"Error: bad result in warm-up loop for i = "
+
Node { type: 'Identifier', start: 241, end: 242, name: 'i' }
Identifier
241
242
i
+
Node { type: 'Literal', start: 245, end: 249, value: ': ', raw: '": "' }
Literal
245
249
: 
": "
+
Node { type: 'Identifier', start: 252, end: 258, name: 'result' }
Identifier
252
258
result
null
[+] Exception: fold-multi-get-by-offset-to-get-by-offset-with-watchpoint.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 819,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 35,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 37,
       end: 72,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 74,
       end: 268,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 270,
       end: 284,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 286,
       end: 817,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
819
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 35,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 16, end: 35, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 37,
    end: 72,
    id: Node { type: 'Identifier', start: 46, end: 49, name: 'bar' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 53, end: 72, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 74,
    end: 268,
    id: Node { type: 'Identifier', start: 83, end: 86, name: 'baz' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 96, end: 268, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 270,
    end: 284,
    expression: 
     Node {
       type: 'CallExpression',
       start: 270,
       end: 283,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 286,
    end: 817,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 291,
       end: 300,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 302,
       end: 312,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 314,
       end: 317,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 319, end: 817, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 35,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 13, end: 14, name: 'o' } ],
  body: Node { type: 'BlockStatement', start: 16, end: 35, body: [ [Node] ] } }
FunctionDeclaration
0
35
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'o' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'o' }
Identifier
13
14
o
Node {
  type: 'BlockStatement',
  start: 16,
  end: 35,
  body: 
   [ Node { type: 'ReturnStatement', start: 22, end: 33, argument: [Node] } ] }
BlockStatement
16
35
[ Node {
    type: 'ReturnStatement',
    start: 22,
    end: 33,
    argument: 
     Node {
       type: 'MemberExpression',
       start: 29,
       end: 32,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'ReturnStatement',
  start: 22,
  end: 33,
  argument: 
   Node {
     type: 'MemberExpression',
     start: 29,
     end: 32,
     object: Node { type: 'Identifier', start: 29, end: 30, name: 'o' },
     property: Node { type: 'Identifier', start: 31, end: 32, name: 'f' },
     computed: false } }
ReturnStatement
22
33
Node {
  type: 'MemberExpression',
  start: 29,
  end: 32,
  object: Node { type: 'Identifier', start: 29, end: 30, name: 'o' },
  property: Node { type: 'Identifier', start: 31, end: 32, name: 'f' },
  computed: false }
MemberExpression
29
32
Node { type: 'Identifier', start: 29, end: 30, name: 'o' }
Identifier
29
30
o
Node { type: 'Identifier', start: 31, end: 32, name: 'f' }
Identifier
31
32
f
false
Node {
  type: 'FunctionDeclaration',
  start: 37,
  end: 72,
  id: Node { type: 'Identifier', start: 46, end: 49, name: 'bar' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 50, end: 51, name: 'o' } ],
  body: Node { type: 'BlockStatement', start: 53, end: 72, body: [ [Node] ] } }
FunctionDeclaration
37
72
Node { type: 'Identifier', start: 46, end: 49, name: 'bar' }
Identifier
46
49
bar
false
false
false
[ Node { type: 'Identifier', start: 50, end: 51, name: 'o' } ]
Node { type: 'Identifier', start: 50, end: 51, name: 'o' }
Identifier
50
51
o
Node {
  type: 'BlockStatement',
  start: 53,
  end: 72,
  body: 
   [ Node { type: 'ReturnStatement', start: 59, end: 70, argument: [Node] } ] }
BlockStatement
53
72
[ Node {
    type: 'ReturnStatement',
    start: 59,
    end: 70,
    argument: 
     Node {
       type: 'MemberExpression',
       start: 66,
       end: 69,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'ReturnStatement',
  start: 59,
  end: 70,
  argument: 
   Node {
     type: 'MemberExpression',
     start: 66,
     end: 69,
     object: Node { type: 'Identifier', start: 66, end: 67, name: 'o' },
     property: Node { type: 'Identifier', start: 68, end: 69, name: 'g' },
     computed: false } }
ReturnStatement
59
70
Node {
  type: 'MemberExpression',
  start: 66,
  end: 69,
  object: Node { type: 'Identifier', start: 66, end: 67, name: 'o' },
  property: Node { type: 'Identifier', start: 68, end: 69, name: 'g' },
  computed: false }
MemberExpression
66
69
Node { type: 'Identifier', start: 66, end: 67, name: 'o' }
Identifier
66
67
o
Node { type: 'Identifier', start: 68, end: 69, name: 'g' }
Identifier
68
69
g
false
Node {
  type: 'FunctionDeclaration',
  start: 74,
  end: 268,
  id: Node { type: 'Identifier', start: 83, end: 86, name: 'baz' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 87, end: 88, name: 'o' },
     Node { type: 'Identifier', start: 90, end: 91, name: 'p' },
     Node { type: 'Identifier', start: 93, end: 94, name: 'q' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 96,
     end: 268,
     body: [ [Node], [Node], [Node], [Node], [Node] ] } }
FunctionDeclaration
74
268
Node { type: 'Identifier', start: 83, end: 86, name: 'baz' }
Identifier
83
86
baz
false
false
false
[ Node { type: 'Identifier', start: 87, end: 88, name: 'o' },
  Node { type: 'Identifier', start: 90, end: 91, name: 'p' },
  Node { type: 'Identifier', start: 93, end: 94, name: 'q' } ]
Node { type: 'Identifier', start: 87, end: 88, name: 'o' }
Identifier
87
88
o
Node { type: 'Identifier', start: 90, end: 91, name: 'p' }
Identifier
90
91
p
Node { type: 'Identifier', start: 93, end: 94, name: 'q' }
Identifier
93
94
q
Node {
  type: 'BlockStatement',
  start: 96,
  end: 268,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 102,
       end: 117,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 122,
       end: 203,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 208,
       end: 225,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 230,
       end: 247,
       expression: [Node] },
     Node {
       type: 'ReturnStatement',
       start: 252,
       end: 266,
       argument: [Node] } ] }
BlockStatement
96
268
[ Node {
    type: 'VariableDeclaration',
    start: 102,
    end: 117,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 122,
    end: 203,
    test: 
     Node {
       type: 'CallExpression',
       start: 126,
       end: 139,
       callee: [Node],
       arguments: [] },
    consequent: Node { type: 'BlockStatement', start: 141, end: 203, body: [Array] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 208,
    end: 225,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 208,
       end: 224,
       operator: '+=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 230,
    end: 247,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 230,
       end: 246,
       operator: '+=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ReturnStatement',
    start: 252,
    end: 266,
    argument: Node { type: 'Identifier', start: 259, end: 265, name: 'result' } } ]
Node {
  type: 'VariableDeclaration',
  start: 102,
  end: 117,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 106,
       end: 116,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
102
117
[ Node {
    type: 'VariableDeclarator',
    start: 106,
    end: 116,
    id: Node { type: 'Identifier', start: 106, end: 112, name: 'result' },
    init: Node { type: 'Literal', start: 115, end: 116, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 106,
  end: 116,
  id: Node { type: 'Identifier', start: 106, end: 112, name: 'result' },
  init: Node { type: 'Literal', start: 115, end: 116, value: 0, raw: '0' } }
VariableDeclarator
106
116
Node { type: 'Identifier', start: 106, end: 112, name: 'result' }
Identifier
106
112
result
Node { type: 'Literal', start: 115, end: 116, value: 0, raw: '0' }
Literal
115
116
0
0
var
Node {
  type: 'IfStatement',
  start: 122,
  end: 203,
  test: 
   Node {
     type: 'CallExpression',
     start: 126,
     end: 139,
     callee: Node { type: 'Identifier', start: 126, end: 137, name: 'isFinalTier' },
     arguments: [] },
  consequent: 
   Node {
     type: 'BlockStatement',
     start: 141,
     end: 203,
     body: [ [Node], [Node], [Node] ] },
  alternate: null }
IfStatement
122
203
Node {
  type: 'CallExpression',
  start: 126,
  end: 139,
  callee: Node { type: 'Identifier', start: 126, end: 137, name: 'isFinalTier' },
  arguments: [] }
CallExpression
126
139
Node { type: 'Identifier', start: 126, end: 137, name: 'isFinalTier' }
Identifier
126
137
isFinalTier
[]
Node {
  type: 'BlockStatement',
  start: 141,
  end: 203,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 151,
       end: 157,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 166,
       end: 172,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 181,
       end: 197,
       expression: [Node] } ] }
BlockStatement
141
203
[ Node {
    type: 'ExpressionStatement',
    start: 151,
    end: 157,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 151,
       end: 156,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 166,
    end: 172,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 166,
       end: 171,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 181,
    end: 197,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 181,
       end: 196,
       operator: '+=',
       left: [Node],
       right: [Node] } } ]
Node {
  type: 'ExpressionStatement',
  start: 151,
  end: 157,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 151,
     end: 156,
     operator: '=',
     left: Node { type: 'Identifier', start: 151, end: 152, name: 'p' },
     right: Node { type: 'Identifier', start: 155, end: 156, name: 'o' } } }
ExpressionStatement
151
157
Node {
  type: 'AssignmentExpression',
  start: 151,
  end: 156,
  operator: '=',
  left: Node { type: 'Identifier', start: 151, end: 152, name: 'p' },
  right: Node { type: 'Identifier', start: 155, end: 156, name: 'o' } }
AssignmentExpression
151
156
=
Node { type: 'Identifier', start: 151, end: 152, name: 'p' }
Identifier
151
152
p
Node { type: 'Identifier', start: 155, end: 156, name: 'o' }
Identifier
155
156
o
Node {
  type: 'ExpressionStatement',
  start: 166,
  end: 172,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 166,
     end: 171,
     operator: '=',
     left: Node { type: 'Identifier', start: 166, end: 167, name: 'q' },
     right: Node { type: 'Identifier', start: 170, end: 171, name: 'o' } } }
ExpressionStatement
166
172
Node {
  type: 'AssignmentExpression',
  start: 166,
  end: 171,
  operator: '=',
  left: Node { type: 'Identifier', start: 166, end: 167, name: 'q' },
  right: Node { type: 'Identifier', start: 170, end: 171, name: 'o' } }
AssignmentExpression
166
171
=
Node { type: 'Identifier', start: 166, end: 167, name: 'q' }
Identifier
166
167
q
Node { type: 'Identifier', start: 170, end: 171, name: 'o' }
Identifier
170
171
o
Node {
  type: 'ExpressionStatement',
  start: 181,
  end: 197,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 181,
     end: 196,
     operator: '+=',
     left: Node { type: 'Identifier', start: 181, end: 187, name: 'result' },
     right: 
      Node {
        type: 'Literal',
        start: 191,
        end: 196,
        value: 10000,
        raw: '10000' } } }
ExpressionStatement
181
197
Node {
  type: 'AssignmentExpression',
  start: 181,
  end: 196,
  operator: '+=',
  left: Node { type: 'Identifier', start: 181, end: 187, name: 'result' },
  right: 
   Node {
     type: 'Literal',
     start: 191,
     end: 196,
     value: 10000,
     raw: '10000' } }
AssignmentExpression
181
196
+=
Node { type: 'Identifier', start: 181, end: 187, name: 'result' }
Identifier
181
187
result
Node {
  type: 'Literal',
  start: 191,
  end: 196,
  value: 10000,
  raw: '10000' }
Literal
191
196
10000
10000
null
[+] Exception: fold-multi-get-by-offset-to-get-by-offset-without-folding-the-structure-check-new.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 960,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 35,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 37,
       end: 71,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 73,
       end: 112,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 114,
       end: 153,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 155,
       end: 331,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 337,
       end: 557,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 563,
       end: 958,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
960
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 35,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 16, end: 35, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 37,
    end: 71,
    id: Node { type: 'Identifier', start: 46, end: 48, name: 'fu' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 52, end: 71, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 73,
    end: 112,
    id: Node { type: 'Identifier', start: 82, end: 85, name: 'bar' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 92, end: 112, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 114,
    end: 153,
    id: Node { type: 'Identifier', start: 123, end: 126, name: 'baz' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 133, end: 153, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 155,
    end: 331,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 160,
       end: 169,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 171,
       end: 178,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 180,
       end: 183,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 185, end: 331, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 337,
    end: 557,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 342,
       end: 351,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 353,
       end: 360,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 362,
       end: 365,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 367, end: 557, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 563,
    end: 958,
    expression: 
     Node {
       type: 'CallExpression',
       start: 563,
       end: 957,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 35,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 13, end: 14, name: 'o' } ],
  body: Node { type: 'BlockStatement', start: 16, end: 35, body: [ [Node] ] } }
FunctionDeclaration
0
35
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'o' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'o' }
Identifier
13
14
o
Node {
  type: 'BlockStatement',
  start: 16,
  end: 35,
  body: 
   [ Node { type: 'ReturnStatement', start: 22, end: 33, argument: [Node] } ] }
BlockStatement
16
35
[ Node {
    type: 'ReturnStatement',
    start: 22,
    end: 33,
    argument: 
     Node {
       type: 'MemberExpression',
       start: 29,
       end: 32,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'ReturnStatement',
  start: 22,
  end: 33,
  argument: 
   Node {
     type: 'MemberExpression',
     start: 29,
     end: 32,
     object: Node { type: 'Identifier', start: 29, end: 30, name: 'o' },
     property: Node { type: 'Identifier', start: 31, end: 32, name: 'f' },
     computed: false } }
ReturnStatement
22
33
Node {
  type: 'MemberExpression',
  start: 29,
  end: 32,
  object: Node { type: 'Identifier', start: 29, end: 30, name: 'o' },
  property: Node { type: 'Identifier', start: 31, end: 32, name: 'f' },
  computed: false }
MemberExpression
29
32
Node { type: 'Identifier', start: 29, end: 30, name: 'o' }
Identifier
29
30
o
Node { type: 'Identifier', start: 31, end: 32, name: 'f' }
Identifier
31
32
f
false
Node {
  type: 'FunctionDeclaration',
  start: 37,
  end: 71,
  id: Node { type: 'Identifier', start: 46, end: 48, name: 'fu' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 49, end: 50, name: 'o' } ],
  body: Node { type: 'BlockStatement', start: 52, end: 71, body: [ [Node] ] } }
FunctionDeclaration
37
71
Node { type: 'Identifier', start: 46, end: 48, name: 'fu' }
Identifier
46
48
fu
false
false
false
[ Node { type: 'Identifier', start: 49, end: 50, name: 'o' } ]
Node { type: 'Identifier', start: 49, end: 50, name: 'o' }
Identifier
49
50
o
Node {
  type: 'BlockStatement',
  start: 52,
  end: 71,
  body: 
   [ Node { type: 'ReturnStatement', start: 58, end: 69, argument: [Node] } ] }
BlockStatement
52
71
[ Node {
    type: 'ReturnStatement',
    start: 58,
    end: 69,
    argument: 
     Node {
       type: 'MemberExpression',
       start: 65,
       end: 68,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'ReturnStatement',
  start: 58,
  end: 69,
  argument: 
   Node {
     type: 'MemberExpression',
     start: 65,
     end: 68,
     object: Node { type: 'Identifier', start: 65, end: 66, name: 'o' },
     property: Node { type: 'Identifier', start: 67, end: 68, name: 'e' },
     computed: false } }
ReturnStatement
58
69
Node {
  type: 'MemberExpression',
  start: 65,
  end: 68,
  object: Node { type: 'Identifier', start: 65, end: 66, name: 'o' },
  property: Node { type: 'Identifier', start: 67, end: 68, name: 'e' },
  computed: false }
MemberExpression
65
68
Node { type: 'Identifier', start: 65, end: 66, name: 'o' }
Identifier
65
66
o
Node { type: 'Identifier', start: 67, end: 68, name: 'e' }
Identifier
67
68
e
false
Node {
  type: 'FunctionDeclaration',
  start: 73,
  end: 112,
  id: Node { type: 'Identifier', start: 82, end: 85, name: 'bar' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 86, end: 87, name: 'f' },
     Node { type: 'Identifier', start: 89, end: 90, name: 'o' } ],
  body: Node { type: 'BlockStatement', start: 92, end: 112, body: [ [Node] ] } }
FunctionDeclaration
73
112
Node { type: 'Identifier', start: 82, end: 85, name: 'bar' }
Identifier
82
85
bar
false
false
false
[ Node { type: 'Identifier', start: 86, end: 87, name: 'f' },
  Node { type: 'Identifier', start: 89, end: 90, name: 'o' } ]
Node { type: 'Identifier', start: 86, end: 87, name: 'f' }
Identifier
86
87
f
Node { type: 'Identifier', start: 89, end: 90, name: 'o' }
Identifier
89
90
o
Node {
  type: 'BlockStatement',
  start: 92,
  end: 112,
  body: 
   [ Node { type: 'ReturnStatement', start: 98, end: 110, argument: [Node] } ] }
BlockStatement
92
112
[ Node {
    type: 'ReturnStatement',
    start: 98,
    end: 110,
    argument: 
     Node {
       type: 'CallExpression',
       start: 105,
       end: 109,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'ReturnStatement',
  start: 98,
  end: 110,
  argument: 
   Node {
     type: 'CallExpression',
     start: 105,
     end: 109,
     callee: Node { type: 'Identifier', start: 105, end: 106, name: 'f' },
     arguments: [ [Node] ] } }
ReturnStatement
98
110
Node {
  type: 'CallExpression',
  start: 105,
  end: 109,
  callee: Node { type: 'Identifier', start: 105, end: 106, name: 'f' },
  arguments: 
   [ Node { type: 'Identifier', start: 107, end: 108, name: 'o' } ] }
CallExpression
105
109
Node { type: 'Identifier', start: 105, end: 106, name: 'f' }
Identifier
105
106
f
[ Node { type: 'Identifier', start: 107, end: 108, name: 'o' } ]
Node { type: 'Identifier', start: 107, end: 108, name: 'o' }
Identifier
107
108
o
Node {
  type: 'FunctionDeclaration',
  start: 114,
  end: 153,
  id: Node { type: 'Identifier', start: 123, end: 126, name: 'baz' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 127, end: 128, name: 'f' },
     Node { type: 'Identifier', start: 130, end: 131, name: 'o' } ],
  body: Node { type: 'BlockStatement', start: 133, end: 153, body: [ [Node] ] } }
FunctionDeclaration
114
153
Node { type: 'Identifier', start: 123, end: 126, name: 'baz' }
Identifier
123
126
baz
false
false
false
[ Node { type: 'Identifier', start: 127, end: 128, name: 'f' },
  Node { type: 'Identifier', start: 130, end: 131, name: 'o' } ]
Node { type: 'Identifier', start: 127, end: 128, name: 'f' }
Identifier
127
128
f
Node { type: 'Identifier', start: 130, end: 131, name: 'o' }
Identifier
130
131
o
Node {
  type: 'BlockStatement',
  start: 133,
  end: 153,
  body: 
   [ Node {
       type: 'ReturnStatement',
       start: 139,
       end: 151,
       argument: [Node] } ] }
BlockStatement
133
153
[ Node {
    type: 'ReturnStatement',
    start: 139,
    end: 151,
    argument: 
     Node {
       type: 'CallExpression',
       start: 146,
       end: 150,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'ReturnStatement',
  start: 139,
  end: 151,
  argument: 
   Node {
     type: 'CallExpression',
     start: 146,
     end: 150,
     callee: Node { type: 'Identifier', start: 146, end: 147, name: 'f' },
     arguments: [ [Node] ] } }
ReturnStatement
139
151
Node {
  type: 'CallExpression',
  start: 146,
  end: 150,
  callee: Node { type: 'Identifier', start: 146, end: 147, name: 'f' },
  arguments: 
   [ Node { type: 'Identifier', start: 148, end: 149, name: 'o' } ] }
CallExpression
146
150
Node { type: 'Identifier', start: 146, end: 147, name: 'f' }
Identifier
146
147
f
[ Node { type: 'Identifier', start: 148, end: 149, name: 'o' } ]
Node { type: 'Identifier', start: 148, end: 149, name: 'o' }
Identifier
148
149
o
Node {
  type: 'ForStatement',
  start: 155,
  end: 331,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 160,
     end: 169,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 171,
     end: 178,
     left: Node { type: 'Identifier', start: 171, end: 172, name: 'i' },
     operator: '<',
     right: Node { type: 'Literal', start: 175, end: 178, value: 100, raw: '100' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 180,
     end: 183,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 182, end: 183, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 185,
     end: 331,
     body: [ [Node], [Node], [Node], [Node], [Node], [Node] ] } }
ForStatement
155
331
Node {
  type: 'VariableDeclaration',
  start: 160,
  end: 169,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 164,
       end: 169,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
160
169
[ Node {
    type: 'VariableDeclarator',
    start: 164,
    end: 169,
    id: Node { type: 'Identifier', start: 164, end: 165, name: 'i' },
    init: Node { type: 'Literal', start: 168, end: 169, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 164,
  end: 169,
  id: Node { type: 'Identifier', start: 164, end: 165, name: 'i' },
  init: Node { type: 'Literal', start: 168, end: 169, value: 0, raw: '0' } }
VariableDeclarator
164
169
Node { type: 'Identifier', start: 164, end: 165, name: 'i' }
Identifier
164
165
i
Node { type: 'Literal', start: 168, end: 169, value: 0, raw: '0' }
Literal
168
169
0
0
var
Node {
  type: 'BinaryExpression',
  start: 171,
  end: 178,
  left: Node { type: 'Identifier', start: 171, end: 172, name: 'i' },
  operator: '<',
  right: Node { type: 'Literal', start: 175, end: 178, value: 100, raw: '100' } }
BinaryExpression
171
178
Node { type: 'Identifier', start: 171, end: 172, name: 'i' }
Identifier
171
172
i
<
Node { type: 'Literal', start: 175, end: 178, value: 100, raw: '100' }
Literal
175
178
100
100
Node {
  type: 'UpdateExpression',
  start: 180,
  end: 183,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 182, end: 183, name: 'i' } }
UpdateExpression
180
183
++
true
Node { type: 'Identifier', start: 182, end: 183, name: 'i' }
Identifier
182
183
i
Node {
  type: 'BlockStatement',
  start: 185,
  end: 331,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 191,
       end: 207,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 212,
       end: 228,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 233,
       end: 254,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 259,
       end: 274,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 279,
       end: 299,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 304,
       end: 329,
       expression: [Node] } ] }
BlockStatement
185
331
[ Node {
    type: 'ExpressionStatement',
    start: 191,
    end: 207,
    expression: 
     Node {
       type: 'CallExpression',
       start: 191,
       end: 206,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 212,
    end: 228,
    expression: 
     Node {
       type: 'CallExpression',
       start: 212,
       end: 227,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 233,
    end: 254,
    expression: 
     Node {
       type: 'CallExpression',
       start: 233,
       end: 253,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 259,
    end: 274,
    expression: 
     Node {
       type: 'CallExpression',
       start: 259,
       end: 273,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 279,
    end: 299,
    expression: 
     Node {
       type: 'CallExpression',
       start: 279,
       end: 298,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 304,
    end: 329,
    expression: 
     Node {
       type: 'CallExpression',
       start: 304,
       end: 328,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'ExpressionStatement',
  start: 191,
  end: 207,
  expression: 
   Node {
     type: 'CallExpression',
     start: 191,
     end: 206,
     callee: Node { type: 'Identifier', start: 191, end: 194, name: 'foo' },
     arguments: [ [Node] ] } }
ExpressionStatement
191
207
Node {
  type: 'CallExpression',
  start: 191,
  end: 206,
  callee: Node { type: 'Identifier', start: 191, end: 194, name: 'foo' },
  arguments: 
   [ Node {
       type: 'ObjectExpression',
       start: 195,
       end: 205,
       properties: [Array] } ] }
CallExpression
191
206
Node { type: 'Identifier', start: 191, end: 194, name: 'foo' }
Identifier
191
194
foo
[ Node {
    type: 'ObjectExpression',
    start: 195,
    end: 205,
    properties: [ [Node], [Node] ] } ]
Node {
  type: 'ObjectExpression',
  start: 195,
  end: 205,
  properties: 
   [ Node {
       type: 'Property',
       start: 196,
       end: 199,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 201,
       end: 204,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
195
205
[ Node {
    type: 'Property',
    start: 196,
    end: 199,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 196, end: 197, name: 'f' },
    value: Node { type: 'Literal', start: 198, end: 199, value: 1, raw: '1' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 201,
    end: 204,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 201, end: 202, name: 'e' },
    value: Node { type: 'Literal', start: 203, end: 204, value: 2, raw: '2' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 196,
  end: 199,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 196, end: 197, name: 'f' },
  value: Node { type: 'Literal', start: 198, end: 199, value: 1, raw: '1' },
  kind: 'init' }
Property
196
199
false
false
false
Node { type: 'Identifier', start: 196, end: 197, name: 'f' }
Identifier
196
197
f
Node { type: 'Literal', start: 198, end: 199, value: 1, raw: '1' }
Literal
198
199
1
1
init
Node {
  type: 'Property',
  start: 201,
  end: 204,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 201, end: 202, name: 'e' },
  value: Node { type: 'Literal', start: 203, end: 204, value: 2, raw: '2' },
  kind: 'init' }
Property
201
204
false
false
false
Node { type: 'Identifier', start: 201, end: 202, name: 'e' }
Identifier
201
202
e
Node { type: 'Literal', start: 203, end: 204, value: 2, raw: '2' }
Literal
203
204
2
2
init
Node {
  type: 'ExpressionStatement',
  start: 212,
  end: 228,
  expression: 
   Node {
     type: 'CallExpression',
     start: 212,
     end: 227,
     callee: Node { type: 'Identifier', start: 212, end: 215, name: 'foo' },
     arguments: [ [Node] ] } }
ExpressionStatement
212
228
Node {
  type: 'CallExpression',
  start: 212,
  end: 227,
  callee: Node { type: 'Identifier', start: 212, end: 215, name: 'foo' },
  arguments: 
   [ Node {
       type: 'ObjectExpression',
       start: 216,
       end: 226,
       properties: [Array] } ] }
CallExpression
212
227
Node { type: 'Identifier', start: 212, end: 215, name: 'foo' }
Identifier
212
215
foo
[ Node {
    type: 'ObjectExpression',
    start: 216,
    end: 226,
    properties: [ [Node], [Node] ] } ]
Node {
  type: 'ObjectExpression',
  start: 216,
  end: 226,
  properties: 
   [ Node {
       type: 'Property',
       start: 217,
       end: 220,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 222,
       end: 225,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
216
226
[ Node {
    type: 'Property',
    start: 217,
    end: 220,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 217, end: 218, name: 'e' },
    value: Node { type: 'Literal', start: 219, end: 220, value: 1, raw: '1' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 222,
    end: 225,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 222, end: 223, name: 'f' },
    value: Node { type: 'Literal', start: 224, end: 225, value: 2, raw: '2' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 217,
  end: 220,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 217, end: 218, name: 'e' },
  value: Node { type: 'Literal', start: 219, end: 220, value: 1, raw: '1' },
  kind: 'init' }
Property
217
220
false
false
false
Node { type: 'Identifier', start: 217, end: 218, name: 'e' }
Identifier
217
218
e
Node { type: 'Literal', start: 219, end: 220, value: 1, raw: '1' }
Literal
219
220
1
1
init
Node {
  type: 'Property',
  start: 222,
  end: 225,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 222, end: 223, name: 'f' },
  value: Node { type: 'Literal', start: 224, end: 225, value: 2, raw: '2' },
  kind: 'init' }
Property
222
225
false
false
false
Node { type: 'Identifier', start: 222, end: 223, name: 'f' }
Identifier
222
223
f
Node { type: 'Literal', start: 224, end: 225, value: 2, raw: '2' }
Literal
224
225
2
2
init
Node {
  type: 'ExpressionStatement',
  start: 233,
  end: 254,
  expression: 
   Node {
     type: 'CallExpression',
     start: 233,
     end: 253,
     callee: Node { type: 'Identifier', start: 233, end: 236, name: 'foo' },
     arguments: [ [Node] ] } }
ExpressionStatement
233
254
Node {
  type: 'CallExpression',
  start: 233,
  end: 253,
  callee: Node { type: 'Identifier', start: 233, end: 236, name: 'foo' },
  arguments: 
   [ Node {
       type: 'ObjectExpression',
       start: 237,
       end: 252,
       properties: [Array] } ] }
CallExpression
233
253
Node { type: 'Identifier', start: 233, end: 236, name: 'foo' }
Identifier
233
236
foo
[ Node {
    type: 'ObjectExpression',
    start: 237,
    end: 252,
    properties: [ [Node], [Node], [Node] ] } ]
Node {
  type: 'ObjectExpression',
  start: 237,
  end: 252,
  properties: 
   [ Node {
       type: 'Property',
       start: 238,
       end: 241,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 243,
       end: 246,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 248,
       end: 251,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
237
252
[ Node {
    type: 'Property',
    start: 238,
    end: 241,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 238, end: 239, name: 'd' },
    value: Node { type: 'Literal', start: 240, end: 241, value: 1, raw: '1' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 243,
    end: 246,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 243, end: 244, name: 'e' },
    value: Node { type: 'Literal', start: 245, end: 246, value: 2, raw: '2' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 248,
    end: 251,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 248, end: 249, name: 'f' },
    value: Node { type: 'Literal', start: 250, end: 251, value: 3, raw: '3' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 238,
  end: 241,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 238, end: 239, name: 'd' },
  value: Node { type: 'Literal', start: 240, end: 241, value: 1, raw: '1' },
  kind: 'init' }
Property
238
241
false
false
false
Node { type: 'Identifier', start: 238, end: 239, name: 'd' }
Identifier
238
239
d
Node { type: 'Literal', start: 240, end: 241, value: 1, raw: '1' }
Literal
240
241
1
1
init
Node {
  type: 'Property',
  start: 243,
  end: 246,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 243, end: 244, name: 'e' },
  value: Node { type: 'Literal', start: 245, end: 246, value: 2, raw: '2' },
  kind: 'init' }
Property
243
246
false
false
false
Node { type: 'Identifier', start: 243, end: 244, name: 'e' }
Identifier
243
244
e
Node { type: 'Literal', start: 245, end: 246, value: 2, raw: '2' }
Literal
245
246
2
2
init
Node {
  type: 'Property',
  start: 248,
  end: 251,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 248, end: 249, name: 'f' },
  value: Node { type: 'Literal', start: 250, end: 251, value: 3, raw: '3' },
  kind: 'init' }
Property
248
251
false
false
false
Node { type: 'Identifier', start: 248, end: 249, name: 'f' }
Identifier
248
249
f
Node { type: 'Literal', start: 250, end: 251, value: 3, raw: '3' }
Literal
250
251
3
3
init
Node {
  type: 'ExpressionStatement',
  start: 259,
  end: 274,
  expression: 
   Node {
     type: 'CallExpression',
     start: 259,
     end: 273,
     callee: Node { type: 'Identifier', start: 259, end: 261, name: 'fu' },
     arguments: [ [Node] ] } }
ExpressionStatement
259
274
Node {
  type: 'CallExpression',
  start: 259,
  end: 273,
  callee: Node { type: 'Identifier', start: 259, end: 261, name: 'fu' },
  arguments: 
   [ Node {
       type: 'ObjectExpression',
       start: 262,
       end: 272,
       properties: [Array] } ] }
CallExpression
259
273
Node { type: 'Identifier', start: 259, end: 261, name: 'fu' }
Identifier
259
261
fu
[ Node {
    type: 'ObjectExpression',
    start: 262,
    end: 272,
    properties: [ [Node], [Node] ] } ]
Node {
  type: 'ObjectExpression',
  start: 262,
  end: 272,
  properties: 
   [ Node {
       type: 'Property',
       start: 263,
       end: 266,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 268,
       end: 271,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
262
272
[ Node {
    type: 'Property',
    start: 263,
    end: 266,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 263, end: 264, name: 'f' },
    value: Node { type: 'Literal', start: 265, end: 266, value: 1, raw: '1' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 268,
    end: 271,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 268, end: 269, name: 'e' },
    value: Node { type: 'Literal', start: 270, end: 271, value: 2, raw: '2' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 263,
  end: 266,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 263, end: 264, name: 'f' },
  value: Node { type: 'Literal', start: 265, end: 266, value: 1, raw: '1' },
  kind: 'init' }
Property
263
266
false
false
false
Node { type: 'Identifier', start: 263, end: 264, name: 'f' }
Identifier
263
264
f
Node { type: 'Literal', start: 265, end: 266, value: 1, raw: '1' }
Literal
265
266
1
1
init
Node {
  type: 'Property',
  start: 268,
  end: 271,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 268, end: 269, name: 'e' },
  value: Node { type: 'Literal', start: 270, end: 271, value: 2, raw: '2' },
  kind: 'init' }
Property
268
271
false
false
false
Node { type: 'Identifier', start: 268, end: 269, name: 'e' }
Identifier
268
269
e
Node { type: 'Literal', start: 270, end: 271, value: 2, raw: '2' }
Literal
270
271
2
2
init
Node {
  type: 'ExpressionStatement',
  start: 279,
  end: 299,
  expression: 
   Node {
     type: 'CallExpression',
     start: 279,
     end: 298,
     callee: Node { type: 'Identifier', start: 279, end: 281, name: 'fu' },
     arguments: [ [Node] ] } }
ExpressionStatement
279
299
Node {
  type: 'CallExpression',
  start: 279,
  end: 298,
  callee: Node { type: 'Identifier', start: 279, end: 281, name: 'fu' },
  arguments: 
   [ Node {
       type: 'ObjectExpression',
       start: 282,
       end: 297,
       properties: [Array] } ] }
CallExpression
279
298
Node { type: 'Identifier', start: 279, end: 281, name: 'fu' }
Identifier
279
281
fu
[ Node {
    type: 'ObjectExpression',
    start: 282,
    end: 297,
    properties: [ [Node], [Node], [Node] ] } ]
Node {
  type: 'ObjectExpression',
  start: 282,
  end: 297,
  properties: 
   [ Node {
       type: 'Property',
       start: 283,
       end: 286,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 288,
       end: 291,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 293,
       end: 296,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
282
297
[ Node {
    type: 'Property',
    start: 283,
    end: 286,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 283, end: 284, name: 'e' },
    value: Node { type: 'Literal', start: 285, end: 286, value: 1, raw: '1' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 288,
    end: 291,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 288, end: 289, name: 'f' },
    value: Node { type: 'Literal', start: 290, end: 291, value: 2, raw: '2' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 293,
    end: 296,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 293, end: 294, name: 'g' },
    value: Node { type: 'Literal', start: 295, end: 296, value: 3, raw: '3' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 283,
  end: 286,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 283, end: 284, name: 'e' },
  value: Node { type: 'Literal', start: 285, end: 286, value: 1, raw: '1' },
  kind: 'init' }
Property
283
286
false
false
false
Node { type: 'Identifier', start: 283, end: 284, name: 'e' }
Identifier
283
284
e
Node { type: 'Literal', start: 285, end: 286, value: 1, raw: '1' }
Literal
285
286
1
1
init
Node {
  type: 'Property',
  start: 288,
  end: 291,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 288, end: 289, name: 'f' },
  value: Node { type: 'Literal', start: 290, end: 291, value: 2, raw: '2' },
  kind: 'init' }
Property
288
291
false
false
false
Node { type: 'Identifier', start: 288, end: 289, name: 'f' }
Identifier
288
289
f
Node { type: 'Literal', start: 290, end: 291, value: 2, raw: '2' }
Literal
290
291
2
2
init
Node {
  type: 'Property',
  start: 293,
  end: 296,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 293, end: 294, name: 'g' },
  value: Node { type: 'Literal', start: 295, end: 296, value: 3, raw: '3' },
  kind: 'init' }
Property
293
296
false
false
false
Node { type: 'Identifier', start: 293, end: 294, name: 'g' }
Identifier
293
294
g
Node { type: 'Literal', start: 295, end: 296, value: 3, raw: '3' }
Literal
295
296
3
3
init
Node {
  type: 'ExpressionStatement',
  start: 304,
  end: 329,
  expression: 
   Node {
     type: 'CallExpression',
     start: 304,
     end: 328,
     callee: Node { type: 'Identifier', start: 304, end: 306, name: 'fu' },
     arguments: [ [Node] ] } }
ExpressionStatement
304
329
Node {
  type: 'CallExpression',
  start: 304,
  end: 328,
  callee: Node { type: 'Identifier', start: 304, end: 306, name: 'fu' },
  arguments: 
   [ Node {
       type: 'ObjectExpression',
       start: 307,
       end: 327,
       properties: [Array] } ] }
CallExpression
304
328
Node { type: 'Identifier', start: 304, end: 306, name: 'fu' }
Identifier
304
306
fu
[ Node {
    type: 'ObjectExpression',
    start: 307,
    end: 327,
    properties: [ [Node], [Node], [Node], [Node] ] } ]
Node {
  type: 'ObjectExpression',
  start: 307,
  end: 327,
  properties: 
   [ Node {
       type: 'Property',
       start: 308,
       end: 311,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 313,
       end: 316,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 318,
       end: 321,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 323,
       end: 326,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
307
327
[ Node {
    type: 'Property',
    start: 308,
    end: 311,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 308, end: 309, name: 'd' },
    value: Node { type: 'Literal', start: 310, end: 311, value: 1, raw: '1' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 313,
    end: 316,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 313, end: 314, name: 'e' },
    value: Node { type: 'Literal', start: 315, end: 316, value: 2, raw: '2' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 318,
    end: 321,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 318, end: 319, name: 'f' },
    value: Node { type: 'Literal', start: 320, end: 321, value: 3, raw: '3' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 323,
    end: 326,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 323, end: 324, name: 'g' },
    value: Node { type: 'Literal', start: 325, end: 326, value: 4, raw: '4' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 308,
  end: 311,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 308, end: 309, name: 'd' },
  value: Node { type: 'Literal', start: 310, end: 311, value: 1, raw: '1' },
  kind: 'init' }
Property
308
311
false
false
false
Node { type: 'Identifier', start: 308, end: 309, name: 'd' }
Identifier
308
309
d
Node { type: 'Literal', start: 310, end: 311, value: 1, raw: '1' }
Literal
310
311
1
1
init
Node {
  type: 'Property',
  start: 313,
  end: 316,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 313, end: 314, name: 'e' },
  value: Node { type: 'Literal', start: 315, end: 316, value: 2, raw: '2' },
  kind: 'init' }
Property
313
316
false
false
false
Node { type: 'Identifier', start: 313, end: 314, name: 'e' }
Identifier
313
314
e
Node { type: 'Literal', start: 315, end: 316, value: 2, raw: '2' }
Literal
315
316
2
2
init
Node {
  type: 'Property',
  start: 318,
  end: 321,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 318, end: 319, name: 'f' },
  value: Node { type: 'Literal', start: 320, end: 321, value: 3, raw: '3' },
  kind: 'init' }
Property
318
321
false
false
false
Node { type: 'Identifier', start: 318, end: 319, name: 'f' }
Identifier
318
319
f
Node { type: 'Literal', start: 320, end: 321, value: 3, raw: '3' }
Literal
320
321
3
3
init
Node {
  type: 'Property',
  start: 323,
  end: 326,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 323, end: 324, name: 'g' },
  value: Node { type: 'Literal', start: 325, end: 326, value: 4, raw: '4' },
  kind: 'init' }
Property
323
326
false
false
false
Node { type: 'Identifier', start: 323, end: 324, name: 'g' }
Identifier
323
324
g
Node { type: 'Literal', start: 325, end: 326, value: 4, raw: '4' }
Literal
325
326
4
4
init
Node {
  type: 'ForStatement',
  start: 337,
  end: 557,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 342,
     end: 351,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 353,
     end: 360,
     left: Node { type: 'Identifier', start: 353, end: 354, name: 'i' },
     operator: '<',
     right: Node { type: 'Literal', start: 357, end: 360, value: 100, raw: '100' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 362,
     end: 365,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 364, end: 365, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 367,
     end: 557,
     body: [ [Node], [Node], [Node], [Node], [Node], [Node] ] } }
ForStatement
337
557
Node {
  type: 'VariableDeclaration',
  start: 342,
  end: 351,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 346,
       end: 351,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
342
351
[ Node {
    type: 'VariableDeclarator',
    start: 346,
    end: 351,
    id: Node { type: 'Identifier', start: 346, end: 347, name: 'i' },
    init: Node { type: 'Literal', start: 350, end: 351, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 346,
  end: 351,
  id: Node { type: 'Identifier', start: 346, end: 347, name: 'i' },
  init: Node { type: 'Literal', start: 350, end: 351, value: 0, raw: '0' } }
VariableDeclarator
346
351
Node { type: 'Identifier', start: 346, end: 347, name: 'i' }
Identifier
346
347
i
Node { type: 'Literal', start: 350, end: 351, value: 0, raw: '0' }
Literal
350
351
0
0
var
Node {
  type: 'BinaryExpression',
  start: 353,
  end: 360,
  left: Node { type: 'Identifier', start: 353, end: 354, name: 'i' },
  operator: '<',
  right: Node { type: 'Literal', start: 357, end: 360, value: 100, raw: '100' } }
BinaryExpression
353
360
Node { type: 'Identifier', start: 353, end: 354, name: 'i' }
Identifier
353
354
i
<
Node { type: 'Literal', start: 357, end: 360, value: 100, raw: '100' }
Literal
357
360
100
100
Node {
  type: 'UpdateExpression',
  start: 362,
  end: 365,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 364, end: 365, name: 'i' } }
UpdateExpression
362
365
++
true
Node { type: 'Identifier', start: 364, end: 365, name: 'i' }
Identifier
364
365
i
Node {
  type: 'BlockStatement',
  start: 367,
  end: 557,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 373,
       end: 389,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 394,
       end: 420,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 425,
       end: 462,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 467,
       end: 482,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 487,
       end: 513,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 518,
       end: 555,
       expression: [Node] } ] }
BlockStatement
367
557
[ Node {
    type: 'ExpressionStatement',
    start: 373,
    end: 389,
    expression: 
     Node {
       type: 'CallExpression',
       start: 373,
       end: 388,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 394,
    end: 420,
    expression: 
     Node {
       type: 'CallExpression',
       start: 394,
       end: 419,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 425,
    end: 462,
    expression: 
     Node {
       type: 'CallExpression',
       start: 425,
       end: 461,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 467,
    end: 482,
    expression: 
     Node {
       type: 'CallExpression',
       start: 467,
       end: 481,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 487,
    end: 513,
    expression: 
     Node {
       type: 'CallExpression',
       start: 487,
       end: 512,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 518,
    end: 555,
    expression: 
     Node {
       type: 'CallExpression',
       start: 518,
       end: 554,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'ExpressionStatement',
  start: 373,
  end: 389,
  expression: 
   Node {
     type: 'CallExpression',
     start: 373,
     end: 388,
     callee: Node { type: 'Identifier', start: 373, end: 376, name: 'bar' },
     arguments: [ [Node], [Node] ] } }
ExpressionStatement
373
389
Node {
  type: 'CallExpression',
  start: 373,
  end: 388,
  callee: Node { type: 'Identifier', start: 373, end: 376, name: 'bar' },
  arguments: 
   [ Node { type: 'Identifier', start: 377, end: 380, name: 'foo' },
     Node {
       type: 'ObjectExpression',
       start: 382,
       end: 387,
       properties: [Array] } ] }
CallExpression
373
388
Node { type: 'Identifier', start: 373, end: 376, name: 'bar' }
Identifier
373
376
bar
[ Node { type: 'Identifier', start: 377, end: 380, name: 'foo' },
  Node {
    type: 'ObjectExpression',
    start: 382,
    end: 387,
    properties: [ [Node] ] } ]
Node { type: 'Identifier', start: 377, end: 380, name: 'foo' }
Identifier
377
380
foo
Node {
  type: 'ObjectExpression',
  start: 382,
  end: 387,
  properties: 
   [ Node {
       type: 'Property',
       start: 383,
       end: 386,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
382
387
[ Node {
    type: 'Property',
    start: 383,
    end: 386,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 383, end: 384, name: 'f' },
    value: Node { type: 'Literal', start: 385, end: 386, value: 1, raw: '1' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 383,
  end: 386,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 383, end: 384, name: 'f' },
  value: Node { type: 'Literal', start: 385, end: 386, value: 1, raw: '1' },
  kind: 'init' }
Property
383
386
false
false
false
Node { type: 'Identifier', start: 383, end: 384, name: 'f' }
Identifier
383
384
f
Node { type: 'Literal', start: 385, end: 386, value: 1, raw: '1' }
Literal
385
386
1
1
init
Node {
  type: 'ExpressionStatement',
  start: 394,
  end: 420,
  expression: 
   Node {
     type: 'CallExpression',
     start: 394,
     end: 419,
     callee: Node { type: 'Identifier', start: 394, end: 397, name: 'bar' },
     arguments: [ [Node], [Node] ] } }
ExpressionStatement
394
420
Node {
  type: 'CallExpression',
  start: 394,
  end: 419,
  callee: Node { type: 'Identifier', start: 394, end: 397, name: 'bar' },
  arguments: 
   [ Node {
       type: 'FunctionExpression',
       start: 398,
       end: 412,
       id: null,
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node { type: 'Literal', start: 414, end: 418, value: null, raw: 'null' } ] }
CallExpression
394
419
Node { type: 'Identifier', start: 394, end: 397, name: 'bar' }
Identifier
394
397
bar
[ Node {
    type: 'FunctionExpression',
    start: 398,
    end: 412,
    id: null,
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 409, end: 412, body: [] } },
  Node { type: 'Literal', start: 414, end: 418, value: null, raw: 'null' } ]
Node {
  type: 'FunctionExpression',
  start: 398,
  end: 412,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 409, end: 412, body: [] } }
FunctionExpression
398
412
null
[+] Exception: fold-multi-get-by-offset-to-get-by-offset-without-folding-the-structure-check.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 608,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 23,
       end: 58,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 60,
       end: 261,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 263,
       end: 307,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 309,
       end: 323,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 325,
       end: 488,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'IfStatement',
       start: 490,
       end: 607,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
608
[ Node {
    type: 'FunctionDeclaration',
    start: 23,
    end: 58,
    id: Node { type: 'Identifier', start: 32, end: 35, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 39, end: 58, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 60,
    end: 261,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 65,
       end: 74,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 76,
       end: 83,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 85,
       end: 88,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 90, end: 261, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 263,
    end: 307,
    id: Node { type: 'Identifier', start: 272, end: 275, name: 'bar' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 279, end: 307, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 309,
    end: 323,
    expression: 
     Node {
       type: 'CallExpression',
       start: 309,
       end: 322,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 325,
    end: 488,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 330,
       end: 339,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 341,
       end: 351,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 353,
       end: 356,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 358, end: 488, body: [Array] } },
  Node {
    type: 'IfStatement',
    start: 490,
    end: 607,
    test: 
     Node {
       type: 'CallExpression',
       start: 494,
       end: 523,
       callee: [Node],
       arguments: [Array] },
    consequent: Node { type: 'ThrowStatement', start: 529, end: 607, argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 23,
  end: 58,
  id: Node { type: 'Identifier', start: 32, end: 35, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 36, end: 37, name: 'o' } ],
  body: Node { type: 'BlockStatement', start: 39, end: 58, body: [ [Node] ] } }
FunctionDeclaration
23
58
Node { type: 'Identifier', start: 32, end: 35, name: 'foo' }
Identifier
32
35
foo
false
false
false
[ Node { type: 'Identifier', start: 36, end: 37, name: 'o' } ]
Node { type: 'Identifier', start: 36, end: 37, name: 'o' }
Identifier
36
37
o
Node {
  type: 'BlockStatement',
  start: 39,
  end: 58,
  body: 
   [ Node { type: 'ReturnStatement', start: 45, end: 56, argument: [Node] } ] }
BlockStatement
39
58
[ Node {
    type: 'ReturnStatement',
    start: 45,
    end: 56,
    argument: 
     Node {
       type: 'MemberExpression',
       start: 52,
       end: 55,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'ReturnStatement',
  start: 45,
  end: 56,
  argument: 
   Node {
     type: 'MemberExpression',
     start: 52,
     end: 55,
     object: Node { type: 'Identifier', start: 52, end: 53, name: 'o' },
     property: Node { type: 'Identifier', start: 54, end: 55, name: 'f' },
     computed: false } }
ReturnStatement
45
56
Node {
  type: 'MemberExpression',
  start: 52,
  end: 55,
  object: Node { type: 'Identifier', start: 52, end: 53, name: 'o' },
  property: Node { type: 'Identifier', start: 54, end: 55, name: 'f' },
  computed: false }
MemberExpression
52
55
Node { type: 'Identifier', start: 52, end: 53, name: 'o' }
Identifier
52
53
o
Node { type: 'Identifier', start: 54, end: 55, name: 'f' }
Identifier
54
55
f
false
Node {
  type: 'ForStatement',
  start: 60,
  end: 261,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 65,
     end: 74,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 76,
     end: 83,
     left: Node { type: 'Identifier', start: 76, end: 77, name: 'i' },
     operator: '<',
     right: Node { type: 'Literal', start: 80, end: 83, value: 100, raw: '100' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 85,
     end: 88,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 87, end: 88, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 90,
     end: 261,
     body: [ [Node], [Node] ] } }
ForStatement
60
261
Node {
  type: 'VariableDeclaration',
  start: 65,
  end: 74,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 69,
       end: 74,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
65
74
[ Node {
    type: 'VariableDeclarator',
    start: 69,
    end: 74,
    id: Node { type: 'Identifier', start: 69, end: 70, name: 'i' },
    init: Node { type: 'Literal', start: 73, end: 74, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 69,
  end: 74,
  id: Node { type: 'Identifier', start: 69, end: 70, name: 'i' },
  init: Node { type: 'Literal', start: 73, end: 74, value: 0, raw: '0' } }
VariableDeclarator
69
74
Node { type: 'Identifier', start: 69, end: 70, name: 'i' }
Identifier
69
70
i
Node { type: 'Literal', start: 73, end: 74, value: 0, raw: '0' }
Literal
73
74
0
0
var
Node {
  type: 'BinaryExpression',
  start: 76,
  end: 83,
  left: Node { type: 'Identifier', start: 76, end: 77, name: 'i' },
  operator: '<',
  right: Node { type: 'Literal', start: 80, end: 83, value: 100, raw: '100' } }
BinaryExpression
76
83
Node { type: 'Identifier', start: 76, end: 77, name: 'i' }
Identifier
76
77
i
<
Node { type: 'Literal', start: 80, end: 83, value: 100, raw: '100' }
Literal
80
83
100
100
Node {
  type: 'UpdateExpression',
  start: 85,
  end: 88,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 87, end: 88, name: 'i' } }
UpdateExpression
85
88
++
true
Node { type: 'Identifier', start: 87, end: 88, name: 'i' }
Identifier
87
88
i
Node {
  type: 'BlockStatement',
  start: 90,
  end: 261,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 96,
       end: 148,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 153,
       end: 259,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
90
261
[ Node {
    type: 'VariableDeclaration',
    start: 96,
    end: 148,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 153,
    end: 259,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 157,
       end: 178,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 188, end: 259, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 96,
  end: 148,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 100,
       end: 147,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
96
148
[ Node {
    type: 'VariableDeclarator',
    start: 100,
    end: 147,
    id: Node { type: 'Identifier', start: 100, end: 106, name: 'result' },
    init: 
     Node {
       type: 'CallExpression',
       start: 109,
       end: 147,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 100,
  end: 147,
  id: Node { type: 'Identifier', start: 100, end: 106, name: 'result' },
  init: 
   Node {
     type: 'CallExpression',
     start: 109,
     end: 147,
     callee: Node { type: 'Identifier', start: 109, end: 112, name: 'foo' },
     arguments: [ [Node] ] } }
VariableDeclarator
100
147
Node { type: 'Identifier', start: 100, end: 106, name: 'result' }
Identifier
100
106
result
Node {
  type: 'CallExpression',
  start: 109,
  end: 147,
  callee: Node { type: 'Identifier', start: 109, end: 112, name: 'foo' },
  arguments: 
   [ Node {
       type: 'ConditionalExpression',
       start: 113,
       end: 146,
       test: [Node],
       consequent: [Node],
       alternate: [Node] } ] }
CallExpression
109
147
Node { type: 'Identifier', start: 109, end: 112, name: 'foo' }
Identifier
109
112
foo
[ Node {
    type: 'ConditionalExpression',
    start: 113,
    end: 146,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 114,
       end: 119,
       left: [Node],
       operator: '&',
       right: [Node] },
    consequent: 
     Node {
       type: 'ObjectExpression',
       start: 123,
       end: 133,
       properties: [Array] },
    alternate: 
     Node {
       type: 'ObjectExpression',
       start: 136,
       end: 146,
       properties: [Array] } } ]
Node {
  type: 'ConditionalExpression',
  start: 113,
  end: 146,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 114,
     end: 119,
     left: Node { type: 'Identifier', start: 114, end: 115, name: 'i' },
     operator: '&',
     right: Node { type: 'Literal', start: 118, end: 119, value: 1, raw: '1' } },
  consequent: 
   Node {
     type: 'ObjectExpression',
     start: 123,
     end: 133,
     properties: [ [Node], [Node] ] },
  alternate: 
   Node {
     type: 'ObjectExpression',
     start: 136,
     end: 146,
     properties: [ [Node], [Node] ] } }
ConditionalExpression
113
146
Node {
  type: 'BinaryExpression',
  start: 114,
  end: 119,
  left: Node { type: 'Identifier', start: 114, end: 115, name: 'i' },
  operator: '&',
  right: Node { type: 'Literal', start: 118, end: 119, value: 1, raw: '1' } }
BinaryExpression
114
119
Node { type: 'Identifier', start: 114, end: 115, name: 'i' }
Identifier
114
115
i
&
Node { type: 'Literal', start: 118, end: 119, value: 1, raw: '1' }
Literal
118
119
1
1
Node {
  type: 'ObjectExpression',
  start: 123,
  end: 133,
  properties: 
   [ Node {
       type: 'Property',
       start: 124,
       end: 127,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 129,
       end: 132,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
123
133
[ Node {
    type: 'Property',
    start: 124,
    end: 127,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 124, end: 125, name: 'f' },
    value: Node { type: 'Literal', start: 126, end: 127, value: 1, raw: '1' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 129,
    end: 132,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 129, end: 130, name: 'g' },
    value: Node { type: 'Literal', start: 131, end: 132, value: 2, raw: '2' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 124,
  end: 127,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 124, end: 125, name: 'f' },
  value: Node { type: 'Literal', start: 126, end: 127, value: 1, raw: '1' },
  kind: 'init' }
Property
124
127
false
false
false
Node { type: 'Identifier', start: 124, end: 125, name: 'f' }
Identifier
124
125
f
Node { type: 'Literal', start: 126, end: 127, value: 1, raw: '1' }
Literal
126
127
1
1
init
Node {
  type: 'Property',
  start: 129,
  end: 132,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 129, end: 130, name: 'g' },
  value: Node { type: 'Literal', start: 131, end: 132, value: 2, raw: '2' },
  kind: 'init' }
Property
129
132
false
false
false
Node { type: 'Identifier', start: 129, end: 130, name: 'g' }
Identifier
129
130
g
Node { type: 'Literal', start: 131, end: 132, value: 2, raw: '2' }
Literal
131
132
2
2
init
Node {
  type: 'ObjectExpression',
  start: 136,
  end: 146,
  properties: 
   [ Node {
       type: 'Property',
       start: 137,
       end: 140,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 142,
       end: 145,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
136
146
[ Node {
    type: 'Property',
    start: 137,
    end: 140,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 137, end: 138, name: 'g' },
    value: Node { type: 'Literal', start: 139, end: 140, value: 1, raw: '1' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 142,
    end: 145,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 142, end: 143, name: 'f' },
    value: Node { type: 'Literal', start: 144, end: 145, value: 2, raw: '2' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 137,
  end: 140,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 137, end: 138, name: 'g' },
  value: Node { type: 'Literal', start: 139, end: 140, value: 1, raw: '1' },
  kind: 'init' }
Property
137
140
false
false
false
Node { type: 'Identifier', start: 137, end: 138, name: 'g' }
Identifier
137
138
g
Node { type: 'Literal', start: 139, end: 140, value: 1, raw: '1' }
Literal
139
140
1
1
init
Node {
  type: 'Property',
  start: 142,
  end: 145,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 142, end: 143, name: 'f' },
  value: Node { type: 'Literal', start: 144, end: 145, value: 2, raw: '2' },
  kind: 'init' }
Property
142
145
false
false
false
Node { type: 'Identifier', start: 142, end: 143, name: 'f' }
Identifier
142
143
f
Node { type: 'Literal', start: 144, end: 145, value: 2, raw: '2' }
Literal
144
145
2
2
init
var
Node {
  type: 'IfStatement',
  start: 153,
  end: 259,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 157,
     end: 178,
     left: Node { type: 'Identifier', start: 157, end: 163, name: 'result' },
     operator: '!=',
     right: 
      Node {
        type: 'BinaryExpression',
        start: 167,
        end: 178,
        left: [Node],
        operator: '-',
        right: [Node] } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 188,
     end: 259,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 194,
        end: 258,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
153
259
Node {
  type: 'BinaryExpression',
  start: 157,
  end: 178,
  left: Node { type: 'Identifier', start: 157, end: 163, name: 'result' },
  operator: '!=',
  right: 
   Node {
     type: 'BinaryExpression',
     start: 167,
     end: 178,
     left: Node { type: 'Literal', start: 167, end: 168, value: 2, raw: '2' },
     operator: '-',
     right: 
      Node {
        type: 'BinaryExpression',
        start: 172,
        end: 177,
        left: [Node],
        operator: '&',
        right: [Node] } } }
BinaryExpression
157
178
Node { type: 'Identifier', start: 157, end: 163, name: 'result' }
Identifier
157
163
result
!=
Node {
  type: 'BinaryExpression',
  start: 167,
  end: 178,
  left: Node { type: 'Literal', start: 167, end: 168, value: 2, raw: '2' },
  operator: '-',
  right: 
   Node {
     type: 'BinaryExpression',
     start: 172,
     end: 177,
     left: Node { type: 'Identifier', start: 172, end: 173, name: 'i' },
     operator: '&',
     right: Node { type: 'Literal', start: 176, end: 177, value: 1, raw: '1' } } }
BinaryExpression
167
178
Node { type: 'Literal', start: 167, end: 168, value: 2, raw: '2' }
Literal
167
168
2
2
-
Node {
  type: 'BinaryExpression',
  start: 172,
  end: 177,
  left: Node { type: 'Identifier', start: 172, end: 173, name: 'i' },
  operator: '&',
  right: Node { type: 'Literal', start: 176, end: 177, value: 1, raw: '1' } }
BinaryExpression
172
177
Node { type: 'Identifier', start: 172, end: 173, name: 'i' }
Identifier
172
173
i
&
Node { type: 'Literal', start: 176, end: 177, value: 1, raw: '1' }
Literal
176
177
1
1
Node {
  type: 'ThrowStatement',
  start: 188,
  end: 259,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 194,
     end: 258,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 194,
        end: 249,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Identifier', start: 252, end: 258, name: 'result' } } }
ThrowStatement
188
259
Node {
  type: 'BinaryExpression',
  start: 194,
  end: 258,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 194,
     end: 249,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 194,
        end: 242,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Literal', start: 245, end: 249, value: ': ', raw: '": "' } },
  operator: '+',
  right: Node { type: 'Identifier', start: 252, end: 258, name: 'result' } }
BinaryExpression
194
258
Node {
  type: 'BinaryExpression',
  start: 194,
  end: 249,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 194,
     end: 242,
     left: 
      Node {
        type: 'Literal',
        start: 194,
        end: 238,
        value: 'Error: bad result in warm-up loop for i = ',
        raw: '"Error: bad result in warm-up loop for i = "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 241, end: 242, name: 'i' } },
  operator: '+',
  right: Node { type: 'Literal', start: 245, end: 249, value: ': ', raw: '": "' } }
BinaryExpression
194
249
Node {
  type: 'BinaryExpression',
  start: 194,
  end: 242,
  left: 
   Node {
     type: 'Literal',
     start: 194,
     end: 238,
     value: 'Error: bad result in warm-up loop for i = ',
     raw: '"Error: bad result in warm-up loop for i = "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 241, end: 242, name: 'i' } }
BinaryExpression
194
242
Node {
  type: 'Literal',
  start: 194,
  end: 238,
  value: 'Error: bad result in warm-up loop for i = ',
  raw: '"Error: bad result in warm-up loop for i = "' }
Literal
194
238
Error: bad result in warm-up loop for i = 
"Error: bad result in warm-up loop for i = "
+
Node { type: 'Identifier', start: 241, end: 242, name: 'i' }
Identifier
241
242
i
+
Node { type: 'Literal', start: 245, end: 249, value: ': ', raw: '": "' }
Literal
245
249
: 
": "
+
Node { type: 'Identifier', start: 252, end: 258, name: 'result' }
Identifier
252
258
result
null
[+] Exception: fold-multi-get-by-offset-to-get-by-offset.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1091,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 32,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 34,
       end: 65,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 67,
       end: 99,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 101,
       end: 133,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 135,
       end: 311,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 317,
       end: 537,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 543,
       end: 1089,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
1091
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 32,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 16, end: 32, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 34,
    end: 65,
    id: Node { type: 'Identifier', start: 43, end: 45, name: 'fu' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 49, end: 65, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 67,
    end: 99,
    id: Node { type: 'Identifier', start: 76, end: 79, name: 'bar' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 86, end: 99, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 101,
    end: 133,
    id: Node { type: 'Identifier', start: 110, end: 113, name: 'baz' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 120, end: 133, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 135,
    end: 311,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 140,
       end: 149,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 151,
       end: 158,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 160,
       end: 163,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 165, end: 311, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 317,
    end: 537,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 322,
       end: 331,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 333,
       end: 340,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 342,
       end: 345,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 347, end: 537, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 543,
    end: 1089,
    expression: 
     Node {
       type: 'CallExpression',
       start: 543,
       end: 1088,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 32,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 13, end: 14, name: 'o' } ],
  body: Node { type: 'BlockStatement', start: 16, end: 32, body: [ [Node] ] } }
FunctionDeclaration
0
32
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'o' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'o' }
Identifier
13
14
o
Node {
  type: 'BlockStatement',
  start: 16,
  end: 32,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 22,
       end: 30,
       expression: [Node] } ] }
BlockStatement
16
32
[ Node {
    type: 'ExpressionStatement',
    start: 22,
    end: 30,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 22,
       end: 29,
       operator: '=',
       left: [Node],
       right: [Node] } } ]
Node {
  type: 'ExpressionStatement',
  start: 22,
  end: 30,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 22,
     end: 29,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 22,
        end: 25,
        object: [Node],
        property: [Node],
        computed: false },
     right: Node { type: 'Literal', start: 28, end: 29, value: 1, raw: '1' } } }
ExpressionStatement
22
30
Node {
  type: 'AssignmentExpression',
  start: 22,
  end: 29,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 22,
     end: 25,
     object: Node { type: 'Identifier', start: 22, end: 23, name: 'o' },
     property: Node { type: 'Identifier', start: 24, end: 25, name: 'f' },
     computed: false },
  right: Node { type: 'Literal', start: 28, end: 29, value: 1, raw: '1' } }
AssignmentExpression
22
29
=
Node {
  type: 'MemberExpression',
  start: 22,
  end: 25,
  object: Node { type: 'Identifier', start: 22, end: 23, name: 'o' },
  property: Node { type: 'Identifier', start: 24, end: 25, name: 'f' },
  computed: false }
MemberExpression
22
25
Node { type: 'Identifier', start: 22, end: 23, name: 'o' }
Identifier
22
23
o
Node { type: 'Identifier', start: 24, end: 25, name: 'f' }
Identifier
24
25
f
false
Node { type: 'Literal', start: 28, end: 29, value: 1, raw: '1' }
Literal
28
29
1
1
Node {
  type: 'FunctionDeclaration',
  start: 34,
  end: 65,
  id: Node { type: 'Identifier', start: 43, end: 45, name: 'fu' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 46, end: 47, name: 'o' } ],
  body: Node { type: 'BlockStatement', start: 49, end: 65, body: [ [Node] ] } }
FunctionDeclaration
34
65
Node { type: 'Identifier', start: 43, end: 45, name: 'fu' }
Identifier
43
45
fu
false
false
false
[ Node { type: 'Identifier', start: 46, end: 47, name: 'o' } ]
Node { type: 'Identifier', start: 46, end: 47, name: 'o' }
Identifier
46
47
o
Node {
  type: 'BlockStatement',
  start: 49,
  end: 65,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 55,
       end: 63,
       expression: [Node] } ] }
BlockStatement
49
65
[ Node {
    type: 'ExpressionStatement',
    start: 55,
    end: 63,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 55,
       end: 62,
       operator: '=',
       left: [Node],
       right: [Node] } } ]
Node {
  type: 'ExpressionStatement',
  start: 55,
  end: 63,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 55,
     end: 62,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 55,
        end: 58,
        object: [Node],
        property: [Node],
        computed: false },
     right: Node { type: 'Literal', start: 61, end: 62, value: 2, raw: '2' } } }
ExpressionStatement
55
63
Node {
  type: 'AssignmentExpression',
  start: 55,
  end: 62,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 55,
     end: 58,
     object: Node { type: 'Identifier', start: 55, end: 56, name: 'o' },
     property: Node { type: 'Identifier', start: 57, end: 58, name: 'e' },
     computed: false },
  right: Node { type: 'Literal', start: 61, end: 62, value: 2, raw: '2' } }
AssignmentExpression
55
62
=
Node {
  type: 'MemberExpression',
  start: 55,
  end: 58,
  object: Node { type: 'Identifier', start: 55, end: 56, name: 'o' },
  property: Node { type: 'Identifier', start: 57, end: 58, name: 'e' },
  computed: false }
MemberExpression
55
58
Node { type: 'Identifier', start: 55, end: 56, name: 'o' }
Identifier
55
56
o
Node { type: 'Identifier', start: 57, end: 58, name: 'e' }
Identifier
57
58
e
false
Node { type: 'Literal', start: 61, end: 62, value: 2, raw: '2' }
Literal
61
62
2
2
Node {
  type: 'FunctionDeclaration',
  start: 67,
  end: 99,
  id: Node { type: 'Identifier', start: 76, end: 79, name: 'bar' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 80, end: 81, name: 'f' },
     Node { type: 'Identifier', start: 83, end: 84, name: 'o' } ],
  body: Node { type: 'BlockStatement', start: 86, end: 99, body: [ [Node] ] } }
FunctionDeclaration
67
99
Node { type: 'Identifier', start: 76, end: 79, name: 'bar' }
Identifier
76
79
bar
false
false
false
[ Node { type: 'Identifier', start: 80, end: 81, name: 'f' },
  Node { type: 'Identifier', start: 83, end: 84, name: 'o' } ]
Node { type: 'Identifier', start: 80, end: 81, name: 'f' }
Identifier
80
81
f
Node { type: 'Identifier', start: 83, end: 84, name: 'o' }
Identifier
83
84
o
Node {
  type: 'BlockStatement',
  start: 86,
  end: 99,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 92,
       end: 97,
       expression: [Node] } ] }
BlockStatement
86
99
[ Node {
    type: 'ExpressionStatement',
    start: 92,
    end: 97,
    expression: 
     Node {
       type: 'CallExpression',
       start: 92,
       end: 96,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'ExpressionStatement',
  start: 92,
  end: 97,
  expression: 
   Node {
     type: 'CallExpression',
     start: 92,
     end: 96,
     callee: Node { type: 'Identifier', start: 92, end: 93, name: 'f' },
     arguments: [ [Node] ] } }
ExpressionStatement
92
97
Node {
  type: 'CallExpression',
  start: 92,
  end: 96,
  callee: Node { type: 'Identifier', start: 92, end: 93, name: 'f' },
  arguments: [ Node { type: 'Identifier', start: 94, end: 95, name: 'o' } ] }
CallExpression
92
96
Node { type: 'Identifier', start: 92, end: 93, name: 'f' }
Identifier
92
93
f
[ Node { type: 'Identifier', start: 94, end: 95, name: 'o' } ]
Node { type: 'Identifier', start: 94, end: 95, name: 'o' }
Identifier
94
95
o
Node {
  type: 'FunctionDeclaration',
  start: 101,
  end: 133,
  id: Node { type: 'Identifier', start: 110, end: 113, name: 'baz' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 114, end: 115, name: 'f' },
     Node { type: 'Identifier', start: 117, end: 118, name: 'o' } ],
  body: Node { type: 'BlockStatement', start: 120, end: 133, body: [ [Node] ] } }
FunctionDeclaration
101
133
Node { type: 'Identifier', start: 110, end: 113, name: 'baz' }
Identifier
110
113
baz
false
false
false
[ Node { type: 'Identifier', start: 114, end: 115, name: 'f' },
  Node { type: 'Identifier', start: 117, end: 118, name: 'o' } ]
Node { type: 'Identifier', start: 114, end: 115, name: 'f' }
Identifier
114
115
f
Node { type: 'Identifier', start: 117, end: 118, name: 'o' }
Identifier
117
118
o
Node {
  type: 'BlockStatement',
  start: 120,
  end: 133,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 126,
       end: 131,
       expression: [Node] } ] }
BlockStatement
120
133
[ Node {
    type: 'ExpressionStatement',
    start: 126,
    end: 131,
    expression: 
     Node {
       type: 'CallExpression',
       start: 126,
       end: 130,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'ExpressionStatement',
  start: 126,
  end: 131,
  expression: 
   Node {
     type: 'CallExpression',
     start: 126,
     end: 130,
     callee: Node { type: 'Identifier', start: 126, end: 127, name: 'f' },
     arguments: [ [Node] ] } }
ExpressionStatement
126
131
Node {
  type: 'CallExpression',
  start: 126,
  end: 130,
  callee: Node { type: 'Identifier', start: 126, end: 127, name: 'f' },
  arguments: 
   [ Node { type: 'Identifier', start: 128, end: 129, name: 'o' } ] }
CallExpression
126
130
Node { type: 'Identifier', start: 126, end: 127, name: 'f' }
Identifier
126
127
f
[ Node { type: 'Identifier', start: 128, end: 129, name: 'o' } ]
Node { type: 'Identifier', start: 128, end: 129, name: 'o' }
Identifier
128
129
o
Node {
  type: 'ForStatement',
  start: 135,
  end: 311,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 140,
     end: 149,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 151,
     end: 158,
     left: Node { type: 'Identifier', start: 151, end: 152, name: 'i' },
     operator: '<',
     right: Node { type: 'Literal', start: 155, end: 158, value: 100, raw: '100' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 160,
     end: 163,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 162, end: 163, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 165,
     end: 311,
     body: [ [Node], [Node], [Node], [Node], [Node], [Node] ] } }
ForStatement
135
311
Node {
  type: 'VariableDeclaration',
  start: 140,
  end: 149,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 144,
       end: 149,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
140
149
[ Node {
    type: 'VariableDeclarator',
    start: 144,
    end: 149,
    id: Node { type: 'Identifier', start: 144, end: 145, name: 'i' },
    init: Node { type: 'Literal', start: 148, end: 149, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 144,
  end: 149,
  id: Node { type: 'Identifier', start: 144, end: 145, name: 'i' },
  init: Node { type: 'Literal', start: 148, end: 149, value: 0, raw: '0' } }
VariableDeclarator
144
149
Node { type: 'Identifier', start: 144, end: 145, name: 'i' }
Identifier
144
145
i
Node { type: 'Literal', start: 148, end: 149, value: 0, raw: '0' }
Literal
148
149
0
0
var
Node {
  type: 'BinaryExpression',
  start: 151,
  end: 158,
  left: Node { type: 'Identifier', start: 151, end: 152, name: 'i' },
  operator: '<',
  right: Node { type: 'Literal', start: 155, end: 158, value: 100, raw: '100' } }
BinaryExpression
151
158
Node { type: 'Identifier', start: 151, end: 152, name: 'i' }
Identifier
151
152
i
<
Node { type: 'Literal', start: 155, end: 158, value: 100, raw: '100' }
Literal
155
158
100
100
Node {
  type: 'UpdateExpression',
  start: 160,
  end: 163,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 162, end: 163, name: 'i' } }
UpdateExpression
160
163
++
true
Node { type: 'Identifier', start: 162, end: 163, name: 'i' }
Identifier
162
163
i
Node {
  type: 'BlockStatement',
  start: 165,
  end: 311,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 171,
       end: 187,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 192,
       end: 208,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 213,
       end: 234,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 239,
       end: 254,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 259,
       end: 279,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 284,
       end: 309,
       expression: [Node] } ] }
BlockStatement
165
311
[ Node {
    type: 'ExpressionStatement',
    start: 171,
    end: 187,
    expression: 
     Node {
       type: 'CallExpression',
       start: 171,
       end: 186,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 192,
    end: 208,
    expression: 
     Node {
       type: 'CallExpression',
       start: 192,
       end: 207,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 213,
    end: 234,
    expression: 
     Node {
       type: 'CallExpression',
       start: 213,
       end: 233,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 239,
    end: 254,
    expression: 
     Node {
       type: 'CallExpression',
       start: 239,
       end: 253,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 259,
    end: 279,
    expression: 
     Node {
       type: 'CallExpression',
       start: 259,
       end: 278,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 284,
    end: 309,
    expression: 
     Node {
       type: 'CallExpression',
       start: 284,
       end: 308,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'ExpressionStatement',
  start: 171,
  end: 187,
  expression: 
   Node {
     type: 'CallExpression',
     start: 171,
     end: 186,
     callee: Node { type: 'Identifier', start: 171, end: 174, name: 'foo' },
     arguments: [ [Node] ] } }
ExpressionStatement
171
187
Node {
  type: 'CallExpression',
  start: 171,
  end: 186,
  callee: Node { type: 'Identifier', start: 171, end: 174, name: 'foo' },
  arguments: 
   [ Node {
       type: 'ObjectExpression',
       start: 175,
       end: 185,
       properties: [Array] } ] }
CallExpression
171
186
Node { type: 'Identifier', start: 171, end: 174, name: 'foo' }
Identifier
171
174
foo
[ Node {
    type: 'ObjectExpression',
    start: 175,
    end: 185,
    properties: [ [Node], [Node] ] } ]
Node {
  type: 'ObjectExpression',
  start: 175,
  end: 185,
  properties: 
   [ Node {
       type: 'Property',
       start: 176,
       end: 179,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 181,
       end: 184,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
175
185
[ Node {
    type: 'Property',
    start: 176,
    end: 179,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 176, end: 177, name: 'f' },
    value: Node { type: 'Literal', start: 178, end: 179, value: 1, raw: '1' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 181,
    end: 184,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 181, end: 182, name: 'e' },
    value: Node { type: 'Literal', start: 183, end: 184, value: 2, raw: '2' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 176,
  end: 179,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 176, end: 177, name: 'f' },
  value: Node { type: 'Literal', start: 178, end: 179, value: 1, raw: '1' },
  kind: 'init' }
Property
176
179
false
false
false
Node { type: 'Identifier', start: 176, end: 177, name: 'f' }
Identifier
176
177
f
Node { type: 'Literal', start: 178, end: 179, value: 1, raw: '1' }
Literal
178
179
1
1
init
Node {
  type: 'Property',
  start: 181,
  end: 184,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 181, end: 182, name: 'e' },
  value: Node { type: 'Literal', start: 183, end: 184, value: 2, raw: '2' },
  kind: 'init' }
Property
181
184
false
false
false
Node { type: 'Identifier', start: 181, end: 182, name: 'e' }
Identifier
181
182
e
Node { type: 'Literal', start: 183, end: 184, value: 2, raw: '2' }
Literal
183
184
2
2
init
Node {
  type: 'ExpressionStatement',
  start: 192,
  end: 208,
  expression: 
   Node {
     type: 'CallExpression',
     start: 192,
     end: 207,
     callee: Node { type: 'Identifier', start: 192, end: 195, name: 'foo' },
     arguments: [ [Node] ] } }
ExpressionStatement
192
208
Node {
  type: 'CallExpression',
  start: 192,
  end: 207,
  callee: Node { type: 'Identifier', start: 192, end: 195, name: 'foo' },
  arguments: 
   [ Node {
       type: 'ObjectExpression',
       start: 196,
       end: 206,
       properties: [Array] } ] }
CallExpression
192
207
Node { type: 'Identifier', start: 192, end: 195, name: 'foo' }
Identifier
192
195
foo
[ Node {
    type: 'ObjectExpression',
    start: 196,
    end: 206,
    properties: [ [Node], [Node] ] } ]
Node {
  type: 'ObjectExpression',
  start: 196,
  end: 206,
  properties: 
   [ Node {
       type: 'Property',
       start: 197,
       end: 200,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 202,
       end: 205,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
196
206
[ Node {
    type: 'Property',
    start: 197,
    end: 200,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 197, end: 198, name: 'e' },
    value: Node { type: 'Literal', start: 199, end: 200, value: 1, raw: '1' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 202,
    end: 205,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 202, end: 203, name: 'f' },
    value: Node { type: 'Literal', start: 204, end: 205, value: 2, raw: '2' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 197,
  end: 200,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 197, end: 198, name: 'e' },
  value: Node { type: 'Literal', start: 199, end: 200, value: 1, raw: '1' },
  kind: 'init' }
Property
197
200
false
false
false
Node { type: 'Identifier', start: 197, end: 198, name: 'e' }
Identifier
197
198
e
Node { type: 'Literal', start: 199, end: 200, value: 1, raw: '1' }
Literal
199
200
1
1
init
Node {
  type: 'Property',
  start: 202,
  end: 205,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 202, end: 203, name: 'f' },
  value: Node { type: 'Literal', start: 204, end: 205, value: 2, raw: '2' },
  kind: 'init' }
Property
202
205
false
false
false
Node { type: 'Identifier', start: 202, end: 203, name: 'f' }
Identifier
202
203
f
Node { type: 'Literal', start: 204, end: 205, value: 2, raw: '2' }
Literal
204
205
2
2
init
Node {
  type: 'ExpressionStatement',
  start: 213,
  end: 234,
  expression: 
   Node {
     type: 'CallExpression',
     start: 213,
     end: 233,
     callee: Node { type: 'Identifier', start: 213, end: 216, name: 'foo' },
     arguments: [ [Node] ] } }
ExpressionStatement
213
234
Node {
  type: 'CallExpression',
  start: 213,
  end: 233,
  callee: Node { type: 'Identifier', start: 213, end: 216, name: 'foo' },
  arguments: 
   [ Node {
       type: 'ObjectExpression',
       start: 217,
       end: 232,
       properties: [Array] } ] }
CallExpression
213
233
Node { type: 'Identifier', start: 213, end: 216, name: 'foo' }
Identifier
213
216
foo
[ Node {
    type: 'ObjectExpression',
    start: 217,
    end: 232,
    properties: [ [Node], [Node], [Node] ] } ]
Node {
  type: 'ObjectExpression',
  start: 217,
  end: 232,
  properties: 
   [ Node {
       type: 'Property',
       start: 218,
       end: 221,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 223,
       end: 226,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 228,
       end: 231,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
217
232
[ Node {
    type: 'Property',
    start: 218,
    end: 221,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 218, end: 219, name: 'd' },
    value: Node { type: 'Literal', start: 220, end: 221, value: 1, raw: '1' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 223,
    end: 226,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 223, end: 224, name: 'e' },
    value: Node { type: 'Literal', start: 225, end: 226, value: 2, raw: '2' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 228,
    end: 231,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 228, end: 229, name: 'f' },
    value: Node { type: 'Literal', start: 230, end: 231, value: 3, raw: '3' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 218,
  end: 221,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 218, end: 219, name: 'd' },
  value: Node { type: 'Literal', start: 220, end: 221, value: 1, raw: '1' },
  kind: 'init' }
Property
218
221
false
false
false
Node { type: 'Identifier', start: 218, end: 219, name: 'd' }
Identifier
218
219
d
Node { type: 'Literal', start: 220, end: 221, value: 1, raw: '1' }
Literal
220
221
1
1
init
Node {
  type: 'Property',
  start: 223,
  end: 226,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 223, end: 224, name: 'e' },
  value: Node { type: 'Literal', start: 225, end: 226, value: 2, raw: '2' },
  kind: 'init' }
Property
223
226
false
false
false
Node { type: 'Identifier', start: 223, end: 224, name: 'e' }
Identifier
223
224
e
Node { type: 'Literal', start: 225, end: 226, value: 2, raw: '2' }
Literal
225
226
2
2
init
Node {
  type: 'Property',
  start: 228,
  end: 231,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 228, end: 229, name: 'f' },
  value: Node { type: 'Literal', start: 230, end: 231, value: 3, raw: '3' },
  kind: 'init' }
Property
228
231
false
false
false
Node { type: 'Identifier', start: 228, end: 229, name: 'f' }
Identifier
228
229
f
Node { type: 'Literal', start: 230, end: 231, value: 3, raw: '3' }
Literal
230
231
3
3
init
Node {
  type: 'ExpressionStatement',
  start: 239,
  end: 254,
  expression: 
   Node {
     type: 'CallExpression',
     start: 239,
     end: 253,
     callee: Node { type: 'Identifier', start: 239, end: 241, name: 'fu' },
     arguments: [ [Node] ] } }
ExpressionStatement
239
254
Node {
  type: 'CallExpression',
  start: 239,
  end: 253,
  callee: Node { type: 'Identifier', start: 239, end: 241, name: 'fu' },
  arguments: 
   [ Node {
       type: 'ObjectExpression',
       start: 242,
       end: 252,
       properties: [Array] } ] }
CallExpression
239
253
Node { type: 'Identifier', start: 239, end: 241, name: 'fu' }
Identifier
239
241
fu
[ Node {
    type: 'ObjectExpression',
    start: 242,
    end: 252,
    properties: [ [Node], [Node] ] } ]
Node {
  type: 'ObjectExpression',
  start: 242,
  end: 252,
  properties: 
   [ Node {
       type: 'Property',
       start: 243,
       end: 246,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 248,
       end: 251,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
242
252
[ Node {
    type: 'Property',
    start: 243,
    end: 246,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 243, end: 244, name: 'f' },
    value: Node { type: 'Literal', start: 245, end: 246, value: 1, raw: '1' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 248,
    end: 251,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 248, end: 249, name: 'e' },
    value: Node { type: 'Literal', start: 250, end: 251, value: 2, raw: '2' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 243,
  end: 246,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 243, end: 244, name: 'f' },
  value: Node { type: 'Literal', start: 245, end: 246, value: 1, raw: '1' },
  kind: 'init' }
Property
243
246
false
false
false
Node { type: 'Identifier', start: 243, end: 244, name: 'f' }
Identifier
243
244
f
Node { type: 'Literal', start: 245, end: 246, value: 1, raw: '1' }
Literal
245
246
1
1
init
Node {
  type: 'Property',
  start: 248,
  end: 251,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 248, end: 249, name: 'e' },
  value: Node { type: 'Literal', start: 250, end: 251, value: 2, raw: '2' },
  kind: 'init' }
Property
248
251
false
false
false
Node { type: 'Identifier', start: 248, end: 249, name: 'e' }
Identifier
248
249
e
Node { type: 'Literal', start: 250, end: 251, value: 2, raw: '2' }
Literal
250
251
2
2
init
Node {
  type: 'ExpressionStatement',
  start: 259,
  end: 279,
  expression: 
   Node {
     type: 'CallExpression',
     start: 259,
     end: 278,
     callee: Node { type: 'Identifier', start: 259, end: 261, name: 'fu' },
     arguments: [ [Node] ] } }
ExpressionStatement
259
279
Node {
  type: 'CallExpression',
  start: 259,
  end: 278,
  callee: Node { type: 'Identifier', start: 259, end: 261, name: 'fu' },
  arguments: 
   [ Node {
       type: 'ObjectExpression',
       start: 262,
       end: 277,
       properties: [Array] } ] }
CallExpression
259
278
Node { type: 'Identifier', start: 259, end: 261, name: 'fu' }
Identifier
259
261
fu
[ Node {
    type: 'ObjectExpression',
    start: 262,
    end: 277,
    properties: [ [Node], [Node], [Node] ] } ]
Node {
  type: 'ObjectExpression',
  start: 262,
  end: 277,
  properties: 
   [ Node {
       type: 'Property',
       start: 263,
       end: 266,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 268,
       end: 271,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 273,
       end: 276,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
262
277
[ Node {
    type: 'Property',
    start: 263,
    end: 266,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 263, end: 264, name: 'e' },
    value: Node { type: 'Literal', start: 265, end: 266, value: 1, raw: '1' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 268,
    end: 271,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 268, end: 269, name: 'f' },
    value: Node { type: 'Literal', start: 270, end: 271, value: 2, raw: '2' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 273,
    end: 276,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 273, end: 274, name: 'g' },
    value: Node { type: 'Literal', start: 275, end: 276, value: 3, raw: '3' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 263,
  end: 266,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 263, end: 264, name: 'e' },
  value: Node { type: 'Literal', start: 265, end: 266, value: 1, raw: '1' },
  kind: 'init' }
Property
263
266
false
false
false
Node { type: 'Identifier', start: 263, end: 264, name: 'e' }
Identifier
263
264
e
Node { type: 'Literal', start: 265, end: 266, value: 1, raw: '1' }
Literal
265
266
1
1
init
Node {
  type: 'Property',
  start: 268,
  end: 271,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 268, end: 269, name: 'f' },
  value: Node { type: 'Literal', start: 270, end: 271, value: 2, raw: '2' },
  kind: 'init' }
Property
268
271
false
false
false
Node { type: 'Identifier', start: 268, end: 269, name: 'f' }
Identifier
268
269
f
Node { type: 'Literal', start: 270, end: 271, value: 2, raw: '2' }
Literal
270
271
2
2
init
Node {
  type: 'Property',
  start: 273,
  end: 276,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 273, end: 274, name: 'g' },
  value: Node { type: 'Literal', start: 275, end: 276, value: 3, raw: '3' },
  kind: 'init' }
Property
273
276
false
false
false
Node { type: 'Identifier', start: 273, end: 274, name: 'g' }
Identifier
273
274
g
Node { type: 'Literal', start: 275, end: 276, value: 3, raw: '3' }
Literal
275
276
3
3
init
Node {
  type: 'ExpressionStatement',
  start: 284,
  end: 309,
  expression: 
   Node {
     type: 'CallExpression',
     start: 284,
     end: 308,
     callee: Node { type: 'Identifier', start: 284, end: 286, name: 'fu' },
     arguments: [ [Node] ] } }
ExpressionStatement
284
309
Node {
  type: 'CallExpression',
  start: 284,
  end: 308,
  callee: Node { type: 'Identifier', start: 284, end: 286, name: 'fu' },
  arguments: 
   [ Node {
       type: 'ObjectExpression',
       start: 287,
       end: 307,
       properties: [Array] } ] }
CallExpression
284
308
Node { type: 'Identifier', start: 284, end: 286, name: 'fu' }
Identifier
284
286
fu
[ Node {
    type: 'ObjectExpression',
    start: 287,
    end: 307,
    properties: [ [Node], [Node], [Node], [Node] ] } ]
Node {
  type: 'ObjectExpression',
  start: 287,
  end: 307,
  properties: 
   [ Node {
       type: 'Property',
       start: 288,
       end: 291,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 293,
       end: 296,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 298,
       end: 301,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 303,
       end: 306,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
287
307
[ Node {
    type: 'Property',
    start: 288,
    end: 291,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 288, end: 289, name: 'd' },
    value: Node { type: 'Literal', start: 290, end: 291, value: 1, raw: '1' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 293,
    end: 296,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 293, end: 294, name: 'e' },
    value: Node { type: 'Literal', start: 295, end: 296, value: 2, raw: '2' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 298,
    end: 301,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 298, end: 299, name: 'f' },
    value: Node { type: 'Literal', start: 300, end: 301, value: 3, raw: '3' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 303,
    end: 306,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 303, end: 304, name: 'g' },
    value: Node { type: 'Literal', start: 305, end: 306, value: 4, raw: '4' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 288,
  end: 291,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 288, end: 289, name: 'd' },
  value: Node { type: 'Literal', start: 290, end: 291, value: 1, raw: '1' },
  kind: 'init' }
Property
288
291
false
false
false
Node { type: 'Identifier', start: 288, end: 289, name: 'd' }
Identifier
288
289
d
Node { type: 'Literal', start: 290, end: 291, value: 1, raw: '1' }
Literal
290
291
1
1
init
Node {
  type: 'Property',
  start: 293,
  end: 296,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 293, end: 294, name: 'e' },
  value: Node { type: 'Literal', start: 295, end: 296, value: 2, raw: '2' },
  kind: 'init' }
Property
293
296
false
false
false
Node { type: 'Identifier', start: 293, end: 294, name: 'e' }
Identifier
293
294
e
Node { type: 'Literal', start: 295, end: 296, value: 2, raw: '2' }
Literal
295
296
2
2
init
Node {
  type: 'Property',
  start: 298,
  end: 301,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 298, end: 299, name: 'f' },
  value: Node { type: 'Literal', start: 300, end: 301, value: 3, raw: '3' },
  kind: 'init' }
Property
298
301
false
false
false
Node { type: 'Identifier', start: 298, end: 299, name: 'f' }
Identifier
298
299
f
Node { type: 'Literal', start: 300, end: 301, value: 3, raw: '3' }
Literal
300
301
3
3
init
Node {
  type: 'Property',
  start: 303,
  end: 306,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 303, end: 304, name: 'g' },
  value: Node { type: 'Literal', start: 305, end: 306, value: 4, raw: '4' },
  kind: 'init' }
Property
303
306
false
false
false
Node { type: 'Identifier', start: 303, end: 304, name: 'g' }
Identifier
303
304
g
Node { type: 'Literal', start: 305, end: 306, value: 4, raw: '4' }
Literal
305
306
4
4
init
Node {
  type: 'ForStatement',
  start: 317,
  end: 537,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 322,
     end: 331,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 333,
     end: 340,
     left: Node { type: 'Identifier', start: 333, end: 334, name: 'i' },
     operator: '<',
     right: Node { type: 'Literal', start: 337, end: 340, value: 100, raw: '100' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 342,
     end: 345,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 344, end: 345, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 347,
     end: 537,
     body: [ [Node], [Node], [Node], [Node], [Node], [Node] ] } }
ForStatement
317
537
Node {
  type: 'VariableDeclaration',
  start: 322,
  end: 331,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 326,
       end: 331,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
322
331
[ Node {
    type: 'VariableDeclarator',
    start: 326,
    end: 331,
    id: Node { type: 'Identifier', start: 326, end: 327, name: 'i' },
    init: Node { type: 'Literal', start: 330, end: 331, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 326,
  end: 331,
  id: Node { type: 'Identifier', start: 326, end: 327, name: 'i' },
  init: Node { type: 'Literal', start: 330, end: 331, value: 0, raw: '0' } }
VariableDeclarator
326
331
Node { type: 'Identifier', start: 326, end: 327, name: 'i' }
Identifier
326
327
i
Node { type: 'Literal', start: 330, end: 331, value: 0, raw: '0' }
Literal
330
331
0
0
var
Node {
  type: 'BinaryExpression',
  start: 333,
  end: 340,
  left: Node { type: 'Identifier', start: 333, end: 334, name: 'i' },
  operator: '<',
  right: Node { type: 'Literal', start: 337, end: 340, value: 100, raw: '100' } }
BinaryExpression
333
340
Node { type: 'Identifier', start: 333, end: 334, name: 'i' }
Identifier
333
334
i
<
Node { type: 'Literal', start: 337, end: 340, value: 100, raw: '100' }
Literal
337
340
100
100
Node {
  type: 'UpdateExpression',
  start: 342,
  end: 345,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 344, end: 345, name: 'i' } }
UpdateExpression
342
345
++
true
Node { type: 'Identifier', start: 344, end: 345, name: 'i' }
Identifier
344
345
i
Node {
  type: 'BlockStatement',
  start: 347,
  end: 537,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 353,
       end: 369,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 374,
       end: 400,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 405,
       end: 442,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 447,
       end: 462,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 467,
       end: 493,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 498,
       end: 535,
       expression: [Node] } ] }
BlockStatement
347
537
[ Node {
    type: 'ExpressionStatement',
    start: 353,
    end: 369,
    expression: 
     Node {
       type: 'CallExpression',
       start: 353,
       end: 368,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 374,
    end: 400,
    expression: 
     Node {
       type: 'CallExpression',
       start: 374,
       end: 399,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 405,
    end: 442,
    expression: 
     Node {
       type: 'CallExpression',
       start: 405,
       end: 441,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 447,
    end: 462,
    expression: 
     Node {
       type: 'CallExpression',
       start: 447,
       end: 461,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 467,
    end: 493,
    expression: 
     Node {
       type: 'CallExpression',
       start: 467,
       end: 492,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 498,
    end: 535,
    expression: 
     Node {
       type: 'CallExpression',
       start: 498,
       end: 534,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'ExpressionStatement',
  start: 353,
  end: 369,
  expression: 
   Node {
     type: 'CallExpression',
     start: 353,
     end: 368,
     callee: Node { type: 'Identifier', start: 353, end: 356, name: 'bar' },
     arguments: [ [Node], [Node] ] } }
ExpressionStatement
353
369
Node {
  type: 'CallExpression',
  start: 353,
  end: 368,
  callee: Node { type: 'Identifier', start: 353, end: 356, name: 'bar' },
  arguments: 
   [ Node { type: 'Identifier', start: 357, end: 360, name: 'foo' },
     Node {
       type: 'ObjectExpression',
       start: 362,
       end: 367,
       properties: [Array] } ] }
CallExpression
353
368
Node { type: 'Identifier', start: 353, end: 356, name: 'bar' }
Identifier
353
356
bar
[ Node { type: 'Identifier', start: 357, end: 360, name: 'foo' },
  Node {
    type: 'ObjectExpression',
    start: 362,
    end: 367,
    properties: [ [Node] ] } ]
Node { type: 'Identifier', start: 357, end: 360, name: 'foo' }
Identifier
357
360
foo
Node {
  type: 'ObjectExpression',
  start: 362,
  end: 367,
  properties: 
   [ Node {
       type: 'Property',
       start: 363,
       end: 366,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
362
367
[ Node {
    type: 'Property',
    start: 363,
    end: 366,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 363, end: 364, name: 'f' },
    value: Node { type: 'Literal', start: 365, end: 366, value: 1, raw: '1' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 363,
  end: 366,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 363, end: 364, name: 'f' },
  value: Node { type: 'Literal', start: 365, end: 366, value: 1, raw: '1' },
  kind: 'init' }
Property
363
366
false
false
false
Node { type: 'Identifier', start: 363, end: 364, name: 'f' }
Identifier
363
364
f
Node { type: 'Literal', start: 365, end: 366, value: 1, raw: '1' }
Literal
365
366
1
1
init
Node {
  type: 'ExpressionStatement',
  start: 374,
  end: 400,
  expression: 
   Node {
     type: 'CallExpression',
     start: 374,
     end: 399,
     callee: Node { type: 'Identifier', start: 374, end: 377, name: 'bar' },
     arguments: [ [Node], [Node] ] } }
ExpressionStatement
374
400
Node {
  type: 'CallExpression',
  start: 374,
  end: 399,
  callee: Node { type: 'Identifier', start: 374, end: 377, name: 'bar' },
  arguments: 
   [ Node {
       type: 'FunctionExpression',
       start: 378,
       end: 392,
       id: null,
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node { type: 'Literal', start: 394, end: 398, value: null, raw: 'null' } ] }
CallExpression
374
399
Node { type: 'Identifier', start: 374, end: 377, name: 'bar' }
Identifier
374
377
bar
[ Node {
    type: 'FunctionExpression',
    start: 378,
    end: 392,
    id: null,
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 389, end: 392, body: [] } },
  Node { type: 'Literal', start: 394, end: 398, value: null, raw: 'null' } ]
Node {
  type: 'FunctionExpression',
  start: 378,
  end: 392,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 389, end: 392, body: [] } }
FunctionExpression
378
392
null
[+] Exception: fold-multi-put-by-offset-to-put-by-offset-without-folding-the-structure-check.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 755,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 45,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 47,
       end: 89,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 91,
       end: 109,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 111,
       end: 441,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 443,
       end: 515,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 517,
       end: 531,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 533,
       end: 753,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
755
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 45,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 16, end: 45, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 47,
    end: 89,
    id: Node { type: 'Identifier', start: 56, end: 63, name: 'callFoo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 67, end: 89, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 91,
    end: 109,
    expression: 
     Node {
       type: 'CallExpression',
       start: 91,
       end: 108,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 111,
    end: 441,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 116,
       end: 125,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 127,
       end: 136,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 138,
       end: 141,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 143, end: 441, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 443,
    end: 515,
    id: Node { type: 'Identifier', start: 452, end: 455, name: 'bar' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 459, end: 515, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 517,
    end: 531,
    expression: 
     Node {
       type: 'CallExpression',
       start: 517,
       end: 530,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 533,
    end: 753,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 538,
       end: 547,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 549,
       end: 559,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 561,
       end: 564,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 566, end: 753, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 45,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 13, end: 14, name: 'o' } ],
  body: Node { type: 'BlockStatement', start: 16, end: 45, body: [ [Node] ] } }
FunctionDeclaration
0
45
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'o' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'o' }
Identifier
13
14
o
Node {
  type: 'BlockStatement',
  start: 16,
  end: 45,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 22,
       end: 43,
       expression: [Node] } ] }
BlockStatement
16
45
[ Node {
    type: 'ExpressionStatement',
    start: 22,
    end: 43,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 22,
       end: 42,
       operator: '=',
       left: [Node],
       right: [Node] } } ]
Node {
  type: 'ExpressionStatement',
  start: 22,
  end: 43,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 22,
     end: 42,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 22,
        end: 25,
        object: [Node],
        property: [Node],
        computed: false },
     right: 
      Node {
        type: 'BinaryExpression',
        start: 28,
        end: 42,
        left: [Node],
        operator: '+',
        right: [Node] } } }
ExpressionStatement
22
43
Node {
  type: 'AssignmentExpression',
  start: 22,
  end: 42,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 22,
     end: 25,
     object: Node { type: 'Identifier', start: 22, end: 23, name: 'o' },
     property: Node { type: 'Identifier', start: 24, end: 25, name: 'f' },
     computed: false },
  right: 
   Node {
     type: 'BinaryExpression',
     start: 28,
     end: 42,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 29,
        end: 36,
        left: [Node],
        operator: '|',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Literal', start: 40, end: 42, value: 42, raw: '42' } } }
AssignmentExpression
22
42
=
Node {
  type: 'MemberExpression',
  start: 22,
  end: 25,
  object: Node { type: 'Identifier', start: 22, end: 23, name: 'o' },
  property: Node { type: 'Identifier', start: 24, end: 25, name: 'f' },
  computed: false }
MemberExpression
22
25
Node { type: 'Identifier', start: 22, end: 23, name: 'o' }
Identifier
22
23
o
Node { type: 'Identifier', start: 24, end: 25, name: 'f' }
Identifier
24
25
f
false
Node {
  type: 'BinaryExpression',
  start: 28,
  end: 42,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 29,
     end: 36,
     left: 
      Node {
        type: 'MemberExpression',
        start: 29,
        end: 32,
        object: [Node],
        property: [Node],
        computed: false },
     operator: '|',
     right: Node { type: 'Literal', start: 35, end: 36, value: 0, raw: '0' } },
  operator: '+',
  right: Node { type: 'Literal', start: 40, end: 42, value: 42, raw: '42' } }
BinaryExpression
28
42
Node {
  type: 'BinaryExpression',
  start: 29,
  end: 36,
  left: 
   Node {
     type: 'MemberExpression',
     start: 29,
     end: 32,
     object: Node { type: 'Identifier', start: 29, end: 30, name: 'o' },
     property: Node { type: 'Identifier', start: 31, end: 32, name: 'f' },
     computed: false },
  operator: '|',
  right: Node { type: 'Literal', start: 35, end: 36, value: 0, raw: '0' } }
BinaryExpression
29
36
Node {
  type: 'MemberExpression',
  start: 29,
  end: 32,
  object: Node { type: 'Identifier', start: 29, end: 30, name: 'o' },
  property: Node { type: 'Identifier', start: 31, end: 32, name: 'f' },
  computed: false }
MemberExpression
29
32
Node { type: 'Identifier', start: 29, end: 30, name: 'o' }
Identifier
29
30
o
Node { type: 'Identifier', start: 31, end: 32, name: 'f' }
Identifier
31
32
f
false
|
Node { type: 'Literal', start: 35, end: 36, value: 0, raw: '0' }
Literal
35
36
0
0
+
Node { type: 'Literal', start: 40, end: 42, value: 42, raw: '42' }
Literal
40
42
42
42
Node {
  type: 'FunctionDeclaration',
  start: 47,
  end: 89,
  id: Node { type: 'Identifier', start: 56, end: 63, name: 'callFoo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 64, end: 65, name: 'o' } ],
  body: Node { type: 'BlockStatement', start: 67, end: 89, body: [ [Node] ] } }
FunctionDeclaration
47
89
Node { type: 'Identifier', start: 56, end: 63, name: 'callFoo' }
Identifier
56
63
callFoo
false
false
false
[ Node { type: 'Identifier', start: 64, end: 65, name: 'o' } ]
Node { type: 'Identifier', start: 64, end: 65, name: 'o' }
Identifier
64
65
o
Node {
  type: 'BlockStatement',
  start: 67,
  end: 89,
  body: 
   [ Node { type: 'ReturnStatement', start: 73, end: 87, argument: [Node] } ] }
BlockStatement
67
89
[ Node {
    type: 'ReturnStatement',
    start: 73,
    end: 87,
    argument: 
     Node {
       type: 'CallExpression',
       start: 80,
       end: 86,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'ReturnStatement',
  start: 73,
  end: 87,
  argument: 
   Node {
     type: 'CallExpression',
     start: 80,
     end: 86,
     callee: Node { type: 'Identifier', start: 80, end: 83, name: 'foo' },
     arguments: [ [Node] ] } }
ReturnStatement
73
87
Node {
  type: 'CallExpression',
  start: 80,
  end: 86,
  callee: Node { type: 'Identifier', start: 80, end: 83, name: 'foo' },
  arguments: [ Node { type: 'Identifier', start: 84, end: 85, name: 'o' } ] }
CallExpression
80
86
Node { type: 'Identifier', start: 80, end: 83, name: 'foo' }
Identifier
80
83
foo
[ Node { type: 'Identifier', start: 84, end: 85, name: 'o' } ]
Node { type: 'Identifier', start: 84, end: 85, name: 'o' }
Identifier
84
85
o
Node {
  type: 'ExpressionStatement',
  start: 91,
  end: 109,
  expression: 
   Node {
     type: 'CallExpression',
     start: 91,
     end: 108,
     callee: Node { type: 'Identifier', start: 91, end: 99, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
91
109
Node {
  type: 'CallExpression',
  start: 91,
  end: 108,
  callee: Node { type: 'Identifier', start: 91, end: 99, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 100, end: 107, name: 'callFoo' } ] }
CallExpression
91
108
Node { type: 'Identifier', start: 91, end: 99, name: 'noInline' }
Identifier
91
99
noInline
[ Node { type: 'Identifier', start: 100, end: 107, name: 'callFoo' } ]
Node { type: 'Identifier', start: 100, end: 107, name: 'callFoo' }
Identifier
100
107
callFoo
Node {
  type: 'ForStatement',
  start: 111,
  end: 441,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 116,
     end: 125,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 127,
     end: 136,
     left: Node { type: 'Identifier', start: 127, end: 128, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 131,
        end: 136,
        value: 10000,
        raw: '10000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 138,
     end: 141,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 140, end: 141, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 143,
     end: 441,
     body: [ [Node], [Node], [Node], [Node] ] } }
ForStatement
111
441
Node {
  type: 'VariableDeclaration',
  start: 116,
  end: 125,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 120,
       end: 125,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
116
125
[ Node {
    type: 'VariableDeclarator',
    start: 120,
    end: 125,
    id: Node { type: 'Identifier', start: 120, end: 121, name: 'i' },
    init: Node { type: 'Literal', start: 124, end: 125, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 120,
  end: 125,
  id: Node { type: 'Identifier', start: 120, end: 121, name: 'i' },
  init: Node { type: 'Literal', start: 124, end: 125, value: 0, raw: '0' } }
VariableDeclarator
120
125
Node { type: 'Identifier', start: 120, end: 121, name: 'i' }
Identifier
120
121
i
Node { type: 'Literal', start: 124, end: 125, value: 0, raw: '0' }
Literal
124
125
0
0
var
Node {
  type: 'BinaryExpression',
  start: 127,
  end: 136,
  left: Node { type: 'Identifier', start: 127, end: 128, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 131,
     end: 136,
     value: 10000,
     raw: '10000' } }
BinaryExpression
127
136
Node { type: 'Identifier', start: 127, end: 128, name: 'i' }
Identifier
127
128
i
<
Node {
  type: 'Literal',
  start: 131,
  end: 136,
  value: 10000,
  raw: '10000' }
Literal
131
136
10000
10000
Node {
  type: 'UpdateExpression',
  start: 138,
  end: 141,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 140, end: 141, name: 'i' } }
UpdateExpression
138
141
++
true
Node { type: 'Identifier', start: 140, end: 141, name: 'i' }
Identifier
140
141
i
Node {
  type: 'BlockStatement',
  start: 143,
  end: 441,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 149,
       end: 160,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 165,
       end: 318,
       test: [Node],
       consequent: [Node],
       alternate: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 323,
       end: 339,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 344,
       end: 439,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
143
441
[ Node {
    type: 'VariableDeclaration',
    start: 149,
    end: 160,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 165,
    end: 318,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 169,
       end: 181,
       left: [Node],
       operator: '==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ExpressionStatement',
       start: 191,
       end: 206,
       expression: [Node] },
    alternate: 
     Node {
       type: 'IfStatement',
       start: 216,
       end: 318,
       test: [Node],
       consequent: [Node],
       alternate: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 323,
    end: 339,
    expression: 
     Node {
       type: 'CallExpression',
       start: 323,
       end: 338,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'IfStatement',
    start: 344,
    end: 439,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 348,
       end: 372,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 382, end: 439, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 149,
  end: 160,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 153,
       end: 159,
       id: [Node],
       init: null } ],
  kind: 'var' }
VariableDeclaration
149
160
[ Node {
    type: 'VariableDeclarator',
    start: 153,
    end: 159,
    id: Node { type: 'Identifier', start: 153, end: 159, name: 'object' },
    init: null } ]
Node {
  type: 'VariableDeclarator',
  start: 153,
  end: 159,
  id: Node { type: 'Identifier', start: 153, end: 159, name: 'object' },
  init: null }
VariableDeclarator
153
159
Node { type: 'Identifier', start: 153, end: 159, name: 'object' }
Identifier
153
159
object
null
[+] Exception: fold-multi-put-by-offset-to-put-by-offset.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 365,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 77,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 79,
       end: 93,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 95,
       end: 106,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 107,
       end: 144,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 146,
       end: 179,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node { type: 'EmptyStatement', start: 179, end: 180 },
     Node {
       type: 'ExpressionStatement',
       start: 182,
       end: 198,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 199,
       end: 259,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 261,
       end: 281,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 282,
       end: 304,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 305,
       end: 363,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
365
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 77,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 16, end: 77, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 79,
    end: 93,
    expression: 
     Node {
       type: 'CallExpression',
       start: 79,
       end: 92,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 95,
    end: 106,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 107,
    end: 144,
    id: Node { type: 'Identifier', start: 116, end: 119, name: 'bar' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 122, end: 144, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 146,
    end: 179,
    id: Node { type: 'Identifier', start: 155, end: 158, name: 'baz' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 161, end: 179, body: [Array] } },
  Node { type: 'EmptyStatement', start: 179, end: 180 },
  Node {
    type: 'ExpressionStatement',
    start: 182,
    end: 198,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 182,
       end: 197,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ForStatement',
    start: 199,
    end: 259,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 204,
       end: 213,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 215,
       end: 223,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 225,
       end: 228,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 234,
       end: 259,
       expression: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 261,
    end: 281,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 261,
       end: 280,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'VariableDeclaration',
    start: 282,
    end: 304,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 305,
    end: 363,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 309,
       end: 320,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 326, end: 363, argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 77,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 13, end: 14, name: 'f' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 16,
     end: 77,
     body: [ [Node], [Node] ] } }
FunctionDeclaration
0
77
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'f' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'f' }
Identifier
13
14
f
Node {
  type: 'BlockStatement',
  start: 16,
  end: 77,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 22,
       end: 57,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node { type: 'ReturnStatement', start: 62, end: 75, argument: [Node] } ] }
BlockStatement
16
77
[ Node {
    type: 'IfStatement',
    start: 22,
    end: 57,
    test: 
     Node {
       type: 'CallExpression',
       start: 26,
       end: 39,
       callee: [Node],
       arguments: [] },
    consequent: 
     Node {
       type: 'ExpressionStatement',
       start: 49,
       end: 57,
       expression: [Node] },
    alternate: null },
  Node {
    type: 'ReturnStatement',
    start: 62,
    end: 75,
    argument: 
     Node {
       type: 'MemberExpression',
       start: 69,
       end: 74,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'IfStatement',
  start: 22,
  end: 57,
  test: 
   Node {
     type: 'CallExpression',
     start: 26,
     end: 39,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 26,
        end: 37,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [] },
  consequent: 
   Node {
     type: 'ExpressionStatement',
     start: 49,
     end: 57,
     expression: 
      Node {
        type: 'AssignmentExpression',
        start: 49,
        end: 56,
        operator: '=',
        left: [Node],
        right: [Node] } },
  alternate: null }
IfStatement
22
57
Node {
  type: 'CallExpression',
  start: 26,
  end: 39,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 26,
     end: 37,
     object: Node { type: 'Identifier', start: 26, end: 29, name: '$vm' },
     property: Node { type: 'Identifier', start: 30, end: 37, name: 'dfgTrue' },
     computed: false },
  arguments: [] }
CallExpression
26
39
Node {
  type: 'MemberExpression',
  start: 26,
  end: 37,
  object: Node { type: 'Identifier', start: 26, end: 29, name: '$vm' },
  property: Node { type: 'Identifier', start: 30, end: 37, name: 'dfgTrue' },
  computed: false }
MemberExpression
26
37
Node { type: 'Identifier', start: 26, end: 29, name: '$vm' }
Identifier
26
29
$vm
Node { type: 'Identifier', start: 30, end: 37, name: 'dfgTrue' }
Identifier
30
37
dfgTrue
false
[]
Node {
  type: 'ExpressionStatement',
  start: 49,
  end: 57,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 49,
     end: 56,
     operator: '=',
     left: Node { type: 'Identifier', start: 49, end: 50, name: 'f' },
     right: Node { type: 'Identifier', start: 53, end: 56, name: 'bar' } } }
ExpressionStatement
49
57
Node {
  type: 'AssignmentExpression',
  start: 49,
  end: 56,
  operator: '=',
  left: Node { type: 'Identifier', start: 49, end: 50, name: 'f' },
  right: Node { type: 'Identifier', start: 53, end: 56, name: 'bar' } }
AssignmentExpression
49
56
=
Node { type: 'Identifier', start: 49, end: 50, name: 'f' }
Identifier
49
50
f
Node { type: 'Identifier', start: 53, end: 56, name: 'bar' }
Identifier
53
56
bar
null
[+] Exception: fold-profiled-call-to-call.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 345,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 147,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 149,
       end: 163,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 165,
       end: 343,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
345
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 147,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 147, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 149,
    end: 163,
    expression: 
     Node {
       type: 'CallExpression',
       start: 149,
       end: 162,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 165,
    end: 343,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 170,
       end: 179,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 181,
       end: 191,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 193,
       end: 196,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 198, end: 343, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 147,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'a' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 19,
     end: 147,
     body: [ [Node], [Node], [Node], [Node] ] } }
FunctionDeclaration
0
147
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'a' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'a' }
Identifier
13
14
a
Node { type: 'Identifier', start: 16, end: 17, name: 'b' }
Identifier
16
17
b
Node {
  type: 'BlockStatement',
  start: 19,
  end: 147,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 25,
       end: 64,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'VariableDeclaration',
       start: 69,
       end: 83,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 88,
       end: 125,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ReturnStatement',
       start: 130,
       end: 145,
       argument: [Node] } ] }
BlockStatement
19
147
[ Node {
    type: 'IfStatement',
    start: 25,
    end: 64,
    test: 
     Node {
       type: 'CallExpression',
       start: 29,
       end: 42,
       callee: [Node],
       arguments: [] },
    consequent: 
     Node {
       type: 'ExpressionStatement',
       start: 52,
       end: 64,
       expression: [Node] },
    alternate: null },
  Node {
    type: 'VariableDeclaration',
    start: 69,
    end: 83,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 88,
    end: 125,
    test: 
     Node {
       type: 'CallExpression',
       start: 92,
       end: 105,
       callee: [Node],
       arguments: [] },
    consequent: 
     Node {
       type: 'ExpressionStatement',
       start: 115,
       end: 125,
       expression: [Node] },
    alternate: null },
  Node {
    type: 'ReturnStatement',
    start: 130,
    end: 145,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 137,
       end: 144,
       left: [Node],
       operator: '+',
       right: [Node] } } ]
Node {
  type: 'IfStatement',
  start: 25,
  end: 64,
  test: 
   Node {
     type: 'CallExpression',
     start: 29,
     end: 42,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 29,
        end: 40,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [] },
  consequent: 
   Node {
     type: 'ExpressionStatement',
     start: 52,
     end: 64,
     expression: 
      Node {
        type: 'AssignmentExpression',
        start: 52,
        end: 63,
        operator: '=',
        left: [Node],
        right: [Node] } },
  alternate: null }
IfStatement
25
64
Node {
  type: 'CallExpression',
  start: 29,
  end: 42,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 29,
     end: 40,
     object: Node { type: 'Identifier', start: 29, end: 32, name: '$vm' },
     property: Node { type: 'Identifier', start: 33, end: 40, name: 'dfgTrue' },
     computed: false },
  arguments: [] }
CallExpression
29
42
Node {
  type: 'MemberExpression',
  start: 29,
  end: 40,
  object: Node { type: 'Identifier', start: 29, end: 32, name: '$vm' },
  property: Node { type: 'Identifier', start: 33, end: 40, name: 'dfgTrue' },
  computed: false }
MemberExpression
29
40
Node { type: 'Identifier', start: 29, end: 32, name: '$vm' }
Identifier
29
32
$vm
Node { type: 'Identifier', start: 33, end: 40, name: 'dfgTrue' }
Identifier
33
40
dfgTrue
false
[]
Node {
  type: 'ExpressionStatement',
  start: 52,
  end: 64,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 52,
     end: 63,
     operator: '=',
     left: Node { type: 'Identifier', start: 52, end: 53, name: 'a' },
     right: 
      Node {
        type: 'AssignmentExpression',
        start: 56,
        end: 63,
        operator: '=',
        left: [Node],
        right: [Node] } } }
ExpressionStatement
52
64
Node {
  type: 'AssignmentExpression',
  start: 52,
  end: 63,
  operator: '=',
  left: Node { type: 'Identifier', start: 52, end: 53, name: 'a' },
  right: 
   Node {
     type: 'AssignmentExpression',
     start: 56,
     end: 63,
     operator: '=',
     left: Node { type: 'Identifier', start: 56, end: 57, name: 'b' },
     right: Node { type: 'Literal', start: 60, end: 63, value: 5.4, raw: '5.4' } } }
AssignmentExpression
52
63
=
Node { type: 'Identifier', start: 52, end: 53, name: 'a' }
Identifier
52
53
a
Node {
  type: 'AssignmentExpression',
  start: 56,
  end: 63,
  operator: '=',
  left: Node { type: 'Identifier', start: 56, end: 57, name: 'b' },
  right: Node { type: 'Literal', start: 60, end: 63, value: 5.4, raw: '5.4' } }
AssignmentExpression
56
63
=
Node { type: 'Identifier', start: 56, end: 57, name: 'b' }
Identifier
56
57
b
Node { type: 'Literal', start: 60, end: 63, value: 5.4, raw: '5.4' }
Literal
60
63
5.4
5.4
null
[+] Exception: fold-to-double-constant-then-exit.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 391,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 153,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 155,
       end: 169,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 171,
       end: 389,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
391
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 153,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 153, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 155,
    end: 169,
    expression: 
     Node {
       type: 'CallExpression',
       start: 155,
       end: 168,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 171,
    end: 389,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 176,
       end: 185,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 187,
       end: 197,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 199,
       end: 202,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 204, end: 389, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 153,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'a' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 19,
     end: 153,
     body: [ [Node], [Node], [Node], [Node] ] } }
FunctionDeclaration
0
153
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'a' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'a' }
Identifier
13
14
a
Node { type: 'Identifier', start: 16, end: 17, name: 'b' }
Identifier
16
17
b
Node {
  type: 'BlockStatement',
  start: 19,
  end: 153,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 25,
       end: 71,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'VariableDeclaration',
       start: 76,
       end: 90,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 95,
       end: 132,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ReturnStatement',
       start: 137,
       end: 151,
       argument: [Node] } ] }
BlockStatement
19
153
[ Node {
    type: 'IfStatement',
    start: 25,
    end: 71,
    test: 
     Node {
       type: 'CallExpression',
       start: 29,
       end: 42,
       callee: [Node],
       arguments: [] },
    consequent: 
     Node {
       type: 'ExpressionStatement',
       start: 52,
       end: 71,
       expression: [Node] },
    alternate: null },
  Node {
    type: 'VariableDeclaration',
    start: 76,
    end: 90,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 95,
    end: 132,
    test: 
     Node {
       type: 'CallExpression',
       start: 99,
       end: 112,
       callee: [Node],
       arguments: [] },
    consequent: 
     Node {
       type: 'ExpressionStatement',
       start: 122,
       end: 132,
       expression: [Node] },
    alternate: null },
  Node {
    type: 'ReturnStatement',
    start: 137,
    end: 151,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 144,
       end: 150,
       left: [Node],
       operator: '+',
       right: [Node] } } ]
Node {
  type: 'IfStatement',
  start: 25,
  end: 71,
  test: 
   Node {
     type: 'CallExpression',
     start: 29,
     end: 42,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 29,
        end: 40,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [] },
  consequent: 
   Node {
     type: 'ExpressionStatement',
     start: 52,
     end: 71,
     expression: 
      Node {
        type: 'AssignmentExpression',
        start: 52,
        end: 70,
        operator: '=',
        left: [Node],
        right: [Node] } },
  alternate: null }
IfStatement
25
71
Node {
  type: 'CallExpression',
  start: 29,
  end: 42,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 29,
     end: 40,
     object: Node { type: 'Identifier', start: 29, end: 32, name: '$vm' },
     property: Node { type: 'Identifier', start: 33, end: 40, name: 'dfgTrue' },
     computed: false },
  arguments: [] }
CallExpression
29
42
Node {
  type: 'MemberExpression',
  start: 29,
  end: 40,
  object: Node { type: 'Identifier', start: 29, end: 32, name: '$vm' },
  property: Node { type: 'Identifier', start: 33, end: 40, name: 'dfgTrue' },
  computed: false }
MemberExpression
29
40
Node { type: 'Identifier', start: 29, end: 32, name: '$vm' }
Identifier
29
32
$vm
Node { type: 'Identifier', start: 33, end: 40, name: 'dfgTrue' }
Identifier
33
40
dfgTrue
false
[]
Node {
  type: 'ExpressionStatement',
  start: 52,
  end: 71,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 52,
     end: 70,
     operator: '=',
     left: Node { type: 'Identifier', start: 52, end: 53, name: 'a' },
     right: 
      Node {
        type: 'AssignmentExpression',
        start: 56,
        end: 70,
        operator: '=',
        left: [Node],
        right: [Node] } } }
ExpressionStatement
52
71
Node {
  type: 'AssignmentExpression',
  start: 52,
  end: 70,
  operator: '=',
  left: Node { type: 'Identifier', start: 52, end: 53, name: 'a' },
  right: 
   Node {
     type: 'AssignmentExpression',
     start: 56,
     end: 70,
     operator: '=',
     left: Node { type: 'Identifier', start: 56, end: 57, name: 'b' },
     right: 
      Node {
        type: 'Literal',
        start: 60,
        end: 70,
        value: 2000000000,
        raw: '2000000000' } } }
AssignmentExpression
52
70
=
Node { type: 'Identifier', start: 52, end: 53, name: 'a' }
Identifier
52
53
a
Node {
  type: 'AssignmentExpression',
  start: 56,
  end: 70,
  operator: '=',
  left: Node { type: 'Identifier', start: 56, end: 57, name: 'b' },
  right: 
   Node {
     type: 'Literal',
     start: 60,
     end: 70,
     value: 2000000000,
     raw: '2000000000' } }
AssignmentExpression
56
70
=
Node { type: 'Identifier', start: 56, end: 57, name: 'b' }
Identifier
56
57
b
Node {
  type: 'Literal',
  start: 60,
  end: 70,
  value: 2000000000,
  raw: '2000000000' }
Literal
60
70
2000000000
2000000000
null
[+] Exception: fold-to-int52-constant-then-exit.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 310,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 88,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 90,
       end: 104,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 106,
       end: 308,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
310
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 88,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 16, end: 88, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 90,
    end: 104,
    expression: 
     Node {
       type: 'CallExpression',
       start: 90,
       end: 103,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 106,
    end: 308,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 111,
       end: 120,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 122,
       end: 132,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 134,
       end: 137,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 139, end: 308, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 88,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 13, end: 14, name: 'x' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 16,
     end: 88,
     body: [ [Node], [Node] ] } }
FunctionDeclaration
0
88
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'x' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'x' }
Identifier
13
14
x
Node {
  type: 'BlockStatement',
  start: 16,
  end: 88,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 22,
       end: 61,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node { type: 'ReturnStatement', start: 66, end: 86, argument: [Node] } ] }
BlockStatement
16
88
[ Node {
    type: 'IfStatement',
    start: 22,
    end: 61,
    test: 
     Node {
       type: 'CallExpression',
       start: 26,
       end: 39,
       callee: [Node],
       arguments: [] },
    consequent: 
     Node {
       type: 'ExpressionStatement',
       start: 49,
       end: 61,
       expression: [Node] },
    alternate: null },
  Node {
    type: 'ReturnStatement',
    start: 66,
    end: 86,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 73,
       end: 85,
       left: [Node],
       operator: '+',
       right: [Node] } } ]
Node {
  type: 'IfStatement',
  start: 22,
  end: 61,
  test: 
   Node {
     type: 'CallExpression',
     start: 26,
     end: 39,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 26,
        end: 37,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [] },
  consequent: 
   Node {
     type: 'ExpressionStatement',
     start: 49,
     end: 61,
     expression: 
      Node {
        type: 'AssignmentExpression',
        start: 49,
        end: 60,
        operator: '=',
        left: [Node],
        right: [Node] } },
  alternate: null }
IfStatement
22
61
Node {
  type: 'CallExpression',
  start: 26,
  end: 39,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 26,
     end: 37,
     object: Node { type: 'Identifier', start: 26, end: 29, name: '$vm' },
     property: Node { type: 'Identifier', start: 30, end: 37, name: 'dfgTrue' },
     computed: false },
  arguments: [] }
CallExpression
26
39
Node {
  type: 'MemberExpression',
  start: 26,
  end: 37,
  object: Node { type: 'Identifier', start: 26, end: 29, name: '$vm' },
  property: Node { type: 'Identifier', start: 30, end: 37, name: 'dfgTrue' },
  computed: false }
MemberExpression
26
37
Node { type: 'Identifier', start: 26, end: 29, name: '$vm' }
Identifier
26
29
$vm
Node { type: 'Identifier', start: 30, end: 37, name: 'dfgTrue' }
Identifier
30
37
dfgTrue
false
[]
Node {
  type: 'ExpressionStatement',
  start: 49,
  end: 61,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 49,
     end: 60,
     operator: '=',
     left: Node { type: 'Identifier', start: 49, end: 50, name: 'x' },
     right: 
      Node {
        type: 'Literal',
        start: 53,
        end: 60,
        value: 'hello',
        raw: '"hello"' } } }
ExpressionStatement
49
61
Node {
  type: 'AssignmentExpression',
  start: 49,
  end: 60,
  operator: '=',
  left: Node { type: 'Identifier', start: 49, end: 50, name: 'x' },
  right: 
   Node {
     type: 'Literal',
     start: 53,
     end: 60,
     value: 'hello',
     raw: '"hello"' } }
AssignmentExpression
49
60
=
Node { type: 'Identifier', start: 49, end: 50, name: 'x' }
Identifier
49
50
x
Node {
  type: 'Literal',
  start: 53,
  end: 60,
  value: 'hello',
  raw: '"hello"' }
Literal
53
60
hello
"hello"
null
[+] Exception: fold-to-primitive-in-cfa.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 357,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 103,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 105,
       end: 119,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 121,
       end: 355,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
357
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 103,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 103, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 105,
    end: 119,
    expression: 
     Node {
       type: 'CallExpression',
       start: 105,
       end: 118,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 121,
    end: 355,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 126,
       end: 135,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 137,
       end: 147,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 149,
       end: 152,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 154, end: 355, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 103,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'x' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'p' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 19,
     end: 103,
     body: [ [Node], [Node] ] } }
FunctionDeclaration
0
103
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'x' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'p' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'x' }
Identifier
13
14
x
Node { type: 'Identifier', start: 16, end: 17, name: 'p' }
Identifier
16
17
p
Node {
  type: 'BlockStatement',
  start: 19,
  end: 103,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 25,
       end: 76,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node { type: 'ReturnStatement', start: 81, end: 101, argument: [Node] } ] }
BlockStatement
19
103
[ Node {
    type: 'IfStatement',
    start: 25,
    end: 76,
    test: 
     Node {
       type: 'CallExpression',
       start: 29,
       end: 42,
       callee: [Node],
       arguments: [] },
    consequent: 
     Node {
       type: 'ExpressionStatement',
       start: 52,
       end: 76,
       expression: [Node] },
    alternate: null },
  Node {
    type: 'ReturnStatement',
    start: 81,
    end: 101,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 88,
       end: 100,
       left: [Node],
       operator: '+',
       right: [Node] } } ]
Node {
  type: 'IfStatement',
  start: 25,
  end: 76,
  test: 
   Node {
     type: 'CallExpression',
     start: 29,
     end: 42,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 29,
        end: 40,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [] },
  consequent: 
   Node {
     type: 'ExpressionStatement',
     start: 52,
     end: 76,
     expression: 
      Node {
        type: 'AssignmentExpression',
        start: 52,
        end: 75,
        operator: '=',
        left: [Node],
        right: [Node] } },
  alternate: null }
IfStatement
25
76
Node {
  type: 'CallExpression',
  start: 29,
  end: 42,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 29,
     end: 40,
     object: Node { type: 'Identifier', start: 29, end: 32, name: '$vm' },
     property: Node { type: 'Identifier', start: 33, end: 40, name: 'dfgTrue' },
     computed: false },
  arguments: [] }
CallExpression
29
42
Node {
  type: 'MemberExpression',
  start: 29,
  end: 40,
  object: Node { type: 'Identifier', start: 29, end: 32, name: '$vm' },
  property: Node { type: 'Identifier', start: 33, end: 40, name: 'dfgTrue' },
  computed: false }
MemberExpression
29
40
Node { type: 'Identifier', start: 29, end: 32, name: '$vm' }
Identifier
29
32
$vm
Node { type: 'Identifier', start: 33, end: 40, name: 'dfgTrue' }
Identifier
33
40
dfgTrue
false
[]
Node {
  type: 'ExpressionStatement',
  start: 52,
  end: 76,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 52,
     end: 75,
     operator: '=',
     left: Node { type: 'Identifier', start: 52, end: 53, name: 'x' },
     right: 
      Node {
        type: 'ConditionalExpression',
        start: 56,
        end: 75,
        test: [Node],
        consequent: [Node],
        alternate: [Node] } } }
ExpressionStatement
52
76
Node {
  type: 'AssignmentExpression',
  start: 52,
  end: 75,
  operator: '=',
  left: Node { type: 'Identifier', start: 52, end: 53, name: 'x' },
  right: 
   Node {
     type: 'ConditionalExpression',
     start: 56,
     end: 75,
     test: Node { type: 'Identifier', start: 56, end: 57, name: 'p' },
     consequent: 
      Node {
        type: 'Literal',
        start: 60,
        end: 67,
        value: 'hello',
        raw: '"hello"' },
     alternate: Node { type: 'Literal', start: 70, end: 75, value: 'bar', raw: '"bar"' } } }
AssignmentExpression
52
75
=
Node { type: 'Identifier', start: 52, end: 53, name: 'x' }
Identifier
52
53
x
Node {
  type: 'ConditionalExpression',
  start: 56,
  end: 75,
  test: Node { type: 'Identifier', start: 56, end: 57, name: 'p' },
  consequent: 
   Node {
     type: 'Literal',
     start: 60,
     end: 67,
     value: 'hello',
     raw: '"hello"' },
  alternate: Node { type: 'Literal', start: 70, end: 75, value: 'bar', raw: '"bar"' } }
ConditionalExpression
56
75
Node { type: 'Identifier', start: 56, end: 57, name: 'p' }
Identifier
56
57
p
Node {
  type: 'Literal',
  start: 60,
  end: 67,
  value: 'hello',
  raw: '"hello"' }
Literal
60
67
hello
"hello"
Node { type: 'Literal', start: 70, end: 75, value: 'bar', raw: '"bar"' }
Literal
70
75
bar
"bar"
null
[+] Exception: fold-to-primitive-to-identity-in-cfa.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 842,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 0,
       end: 51,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 53,
       end: 123,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 124,
       end: 202,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 203,
       end: 286,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'FunctionDeclaration',
       start: 288,
       end: 615,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 617,
       end: 667,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 669,
       end: 699,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 701,
       end: 722,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'TryStatement',
       start: 723,
       end: 792,
       block: [Node],
       handler: [Node],
       finalizer: null },
     Node {
       type: 'IfStatement',
       start: 794,
       end: 841,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
842
[ Node {
    type: 'VariableDeclaration',
    start: 0,
    end: 51,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 53,
    end: 123,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 57,
       end: 70,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 76, end: 123, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 124,
    end: 202,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 128,
       end: 145,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 151, end: 202, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 203,
    end: 286,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 207,
       end: 224,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 230, end: 286, argument: [Node] },
    alternate: null },
  Node {
    type: 'FunctionDeclaration',
    start: 288,
    end: 615,
    id: Node { type: 'Identifier', start: 297, end: 300, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 307, end: 615, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 617,
    end: 667,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 622,
       end: 631,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 633,
       end: 644,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 646,
       end: 649,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 655,
       end: 667,
       expression: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 669,
    end: 699,
    expression: 
     Node {
       type: 'CallExpression',
       start: 669,
       end: 698,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 701,
    end: 722,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'TryStatement',
    start: 723,
    end: 792,
    block: Node { type: 'BlockStatement', start: 727, end: 757, body: [Array] },
    handler: 
     Node {
       type: 'CatchClause',
       start: 758,
       end: 792,
       param: [Node],
       body: [Node] },
    finalizer: null },
  Node {
    type: 'IfStatement',
    start: 794,
    end: 841,
    test: 
     Node {
       type: 'UnaryExpression',
       start: 798,
       end: 807,
       operator: '!',
       prefix: true,
       argument: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 813, end: 841, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 0,
  end: 51,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 4,
       end: 50,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
0
51
[ Node {
    type: 'VariableDeclarator',
    start: 4,
    end: 50,
    id: Node { type: 'Identifier', start: 4, end: 5, name: 'a' },
    init: 
     Node {
       type: 'NewExpression',
       start: 8,
       end: 50,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 4,
  end: 50,
  id: Node { type: 'Identifier', start: 4, end: 5, name: 'a' },
  init: 
   Node {
     type: 'NewExpression',
     start: 8,
     end: 50,
     callee: Node { type: 'Identifier', start: 12, end: 22, name: 'Int32Array' },
     arguments: [ [Node], [Node], [Node] ] } }
VariableDeclarator
4
50
Node { type: 'Identifier', start: 4, end: 5, name: 'a' }
Identifier
4
5
a
Node {
  type: 'NewExpression',
  start: 8,
  end: 50,
  callee: Node { type: 'Identifier', start: 12, end: 22, name: 'Int32Array' },
  arguments: 
   [ Node {
       type: 'NewExpression',
       start: 23,
       end: 43,
       callee: [Node],
       arguments: [Array] },
     Node { type: 'Literal', start: 45, end: 46, value: 4, raw: '4' },
     Node { type: 'Literal', start: 48, end: 49, value: 1, raw: '1' } ] }
NewExpression
8
50
Node { type: 'Identifier', start: 12, end: 22, name: 'Int32Array' }
Identifier
12
22
Int32Array
[ Node {
    type: 'NewExpression',
    start: 23,
    end: 43,
    callee: Node { type: 'Identifier', start: 27, end: 38, name: 'ArrayBuffer' },
    arguments: [ [Node] ] },
  Node { type: 'Literal', start: 45, end: 46, value: 4, raw: '4' },
  Node { type: 'Literal', start: 48, end: 49, value: 1, raw: '1' } ]
Node {
  type: 'NewExpression',
  start: 23,
  end: 43,
  callee: Node { type: 'Identifier', start: 27, end: 38, name: 'ArrayBuffer' },
  arguments: 
   [ Node { type: 'Literal', start: 39, end: 42, value: 100, raw: '100' } ] }
NewExpression
23
43
Node { type: 'Identifier', start: 27, end: 38, name: 'ArrayBuffer' }
Identifier
27
38
ArrayBuffer
[ Node { type: 'Literal', start: 39, end: 42, value: 100, raw: '100' } ]
Node { type: 'Literal', start: 39, end: 42, value: 100, raw: '100' }
Literal
39
42
100
100
Node { type: 'Literal', start: 45, end: 46, value: 4, raw: '4' }
Literal
45
46
4
4
Node { type: 'Literal', start: 48, end: 49, value: 1, raw: '1' }
Literal
48
49
1
1
var
Node {
  type: 'IfStatement',
  start: 53,
  end: 123,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 57,
     end: 70,
     left: 
      Node {
        type: 'MemberExpression',
        start: 57,
        end: 65,
        object: [Node],
        property: [Node],
        computed: false },
     operator: '!=',
     right: Node { type: 'Literal', start: 69, end: 70, value: 1, raw: '1' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 76,
     end: 123,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 82,
        end: 122,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
53
123
Node {
  type: 'BinaryExpression',
  start: 57,
  end: 70,
  left: 
   Node {
     type: 'MemberExpression',
     start: 57,
     end: 65,
     object: Node { type: 'Identifier', start: 57, end: 58, name: 'a' },
     property: Node { type: 'Identifier', start: 59, end: 65, name: 'length' },
     computed: false },
  operator: '!=',
  right: Node { type: 'Literal', start: 69, end: 70, value: 1, raw: '1' } }
BinaryExpression
57
70
Node {
  type: 'MemberExpression',
  start: 57,
  end: 65,
  object: Node { type: 'Identifier', start: 57, end: 58, name: 'a' },
  property: Node { type: 'Identifier', start: 59, end: 65, name: 'length' },
  computed: false }
MemberExpression
57
65
Node { type: 'Identifier', start: 57, end: 58, name: 'a' }
Identifier
57
58
a
Node { type: 'Identifier', start: 59, end: 65, name: 'length' }
Identifier
59
65
length
false
!=
Node { type: 'Literal', start: 69, end: 70, value: 1, raw: '1' }
Literal
69
70
1
1
Node {
  type: 'ThrowStatement',
  start: 76,
  end: 123,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 82,
     end: 122,
     left: 
      Node {
        type: 'Literal',
        start: 82,
        end: 111,
        value: 'Error: bad length (start): ',
        raw: '"Error: bad length (start): "' },
     operator: '+',
     right: 
      Node {
        type: 'MemberExpression',
        start: 114,
        end: 122,
        object: [Node],
        property: [Node],
        computed: false } } }
ThrowStatement
76
123
Node {
  type: 'BinaryExpression',
  start: 82,
  end: 122,
  left: 
   Node {
     type: 'Literal',
     start: 82,
     end: 111,
     value: 'Error: bad length (start): ',
     raw: '"Error: bad length (start): "' },
  operator: '+',
  right: 
   Node {
     type: 'MemberExpression',
     start: 114,
     end: 122,
     object: Node { type: 'Identifier', start: 114, end: 115, name: 'a' },
     property: Node { type: 'Identifier', start: 116, end: 122, name: 'length' },
     computed: false } }
BinaryExpression
82
122
Node {
  type: 'Literal',
  start: 82,
  end: 111,
  value: 'Error: bad length (start): ',
  raw: '"Error: bad length (start): "' }
Literal
82
111
Error: bad length (start): 
"Error: bad length (start): "
+
Node {
  type: 'MemberExpression',
  start: 114,
  end: 122,
  object: Node { type: 'Identifier', start: 114, end: 115, name: 'a' },
  property: Node { type: 'Identifier', start: 116, end: 122, name: 'length' },
  computed: false }
MemberExpression
114
122
Node { type: 'Identifier', start: 114, end: 115, name: 'a' }
Identifier
114
115
a
Node { type: 'Identifier', start: 116, end: 122, name: 'length' }
Identifier
116
122
length
false
null
[+] Exception: fold-typed-array-properties.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 3660,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 1333,
       end: 1503,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 1505,
       end: 2528,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 2531,
       end: 2549,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 2550,
       end: 2686,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 2688,
       end: 2738,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 2739,
       end: 2797,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 2798,
       end: 2853,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 2854,
       end: 2915,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 2917,
       end: 2942,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 2944,
       end: 3514,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ForInStatement',
       start: 3516,
       end: 3570,
       left: [Node],
       right: [Node],
       body: [Node] },
     Node {
       type: 'IfStatement',
       start: 3572,
       end: 3659,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
3660
[ Node {
    type: 'VariableDeclaration',
    start: 1333,
    end: 1503,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 1505,
    end: 2528,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 2531,
    end: 2549,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 2550,
    end: 2686,
    expression: 
     Node {
       type: 'CallExpression',
       start: 2550,
       end: 2685,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 2688,
    end: 2738,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 2688,
       end: 2737,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 2739,
    end: 2797,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 2739,
       end: 2796,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 2798,
    end: 2853,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 2798,
       end: 2852,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 2854,
    end: 2915,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 2854,
       end: 2914,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'VariableDeclaration',
    start: 2917,
    end: 2942,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 2944,
    end: 3514,
    id: Node { type: 'Identifier', start: 2953, end: 2957, name: 'test' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 2970, end: 3514, body: [Array] } },
  Node {
    type: 'ForInStatement',
    start: 3516,
    end: 3570,
    left: Node { type: 'Identifier', start: 3521, end: 3525, name: 'name' },
    right: Node { type: 'Identifier', start: 3529, end: 3537, name: 'testData' },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 3543,
       end: 3570,
       expression: [Node] } },
  Node {
    type: 'IfStatement',
    start: 3572,
    end: 3659,
    test: 
     Node {
       type: 'Identifier',
       start: 3576,
       end: 3592,
       name: 'numberOfFailures' },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 3598,
       end: 3659,
       argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 1333,
  end: 1503,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 1337,
       end: 1502,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
1333
1503
[ Node {
    type: 'VariableDeclarator',
    start: 1337,
    end: 1502,
    id: 
     Node {
       type: 'Identifier',
       start: 1337,
       end: 1354,
       name: 'funcArgAndBodyStr' },
    init: 
     Node {
       type: 'BinaryExpression',
       start: 1357,
       end: 1502,
       left: [Node],
       operator: '+',
       right: [Node] } } ]
Node {
  type: 'VariableDeclarator',
  start: 1337,
  end: 1502,
  id: 
   Node {
     type: 'Identifier',
     start: 1337,
     end: 1354,
     name: 'funcArgAndBodyStr' },
  init: 
   Node {
     type: 'BinaryExpression',
     start: 1357,
     end: 1502,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 1357,
        end: 1496,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Literal', start: 1499, end: 1502, value: '}', raw: '"}"' } } }
VariableDeclarator
1337
1502
Node {
  type: 'Identifier',
  start: 1337,
  end: 1354,
  name: 'funcArgAndBodyStr' }
Identifier
1337
1354
funcArgAndBodyStr
Node {
  type: 'BinaryExpression',
  start: 1357,
  end: 1502,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 1357,
     end: 1496,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 1357,
        end: 1489,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: 
      Node {
        type: 'Literal',
        start: 1492,
        end: 1496,
        value: '\n',
        raw: '"\\n"' } },
  operator: '+',
  right: Node { type: 'Literal', start: 1499, end: 1502, value: '}', raw: '"}"' } }
BinaryExpression
1357
1502
Node {
  type: 'BinaryExpression',
  start: 1357,
  end: 1496,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 1357,
     end: 1489,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 1357,
        end: 1469,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: 
      Node {
        type: 'Literal',
        start: 1472,
        end: 1489,
        value: '    return sum;',
        raw: '"    return sum;"' } },
  operator: '+',
  right: 
   Node {
     type: 'Literal',
     start: 1492,
     end: 1496,
     value: '\n',
     raw: '"\\n"' } }
BinaryExpression
1357
1496
Node {
  type: 'BinaryExpression',
  start: 1357,
  end: 1489,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 1357,
     end: 1469,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 1357,
        end: 1462,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: 
      Node {
        type: 'Literal',
        start: 1465,
        end: 1469,
        value: '\n',
        raw: '"\\n"' } },
  operator: '+',
  right: 
   Node {
     type: 'Literal',
     start: 1472,
     end: 1489,
     value: '    return sum;',
     raw: '"    return sum;"' } }
BinaryExpression
1357
1489
Node {
  type: 'BinaryExpression',
  start: 1357,
  end: 1469,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 1357,
     end: 1462,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 1357,
        end: 1435,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: 
      Node {
        type: 'Literal',
        start: 1438,
        end: 1462,
        value: '        sum += arr[i];',
        raw: '"        sum += arr[i];"' } },
  operator: '+',
  right: 
   Node {
     type: 'Literal',
     start: 1465,
     end: 1469,
     value: '\n',
     raw: '"\\n"' } }
BinaryExpression
1357
1469
Node {
  type: 'BinaryExpression',
  start: 1357,
  end: 1462,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 1357,
     end: 1435,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 1357,
        end: 1428,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: 
      Node {
        type: 'Literal',
        start: 1431,
        end: 1435,
        value: '\n',
        raw: '"\\n"' } },
  operator: '+',
  right: 
   Node {
     type: 'Literal',
     start: 1438,
     end: 1462,
     value: '        sum += arr[i];',
     raw: '"        sum += arr[i];"' } }
BinaryExpression
1357
1462
Node {
  type: 'BinaryExpression',
  start: 1357,
  end: 1435,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 1357,
     end: 1428,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 1357,
        end: 1401,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: 
      Node {
        type: 'Literal',
        start: 1404,
        end: 1428,
        value: '    for (var i in arr)',
        raw: '"    for (var i in arr)"' } },
  operator: '+',
  right: 
   Node {
     type: 'Literal',
     start: 1431,
     end: 1435,
     value: '\n',
     raw: '"\\n"' } }
BinaryExpression
1357
1435
Node {
  type: 'BinaryExpression',
  start: 1357,
  end: 1428,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 1357,
     end: 1401,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 1357,
        end: 1394,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: 
      Node {
        type: 'Literal',
        start: 1397,
        end: 1401,
        value: '\n',
        raw: '"\\n"' } },
  operator: '+',
  right: 
   Node {
     type: 'Literal',
     start: 1404,
     end: 1428,
     value: '    for (var i in arr)',
     raw: '"    for (var i in arr)"' } }
BinaryExpression
1357
1428
Node {
  type: 'BinaryExpression',
  start: 1357,
  end: 1401,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 1357,
     end: 1394,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 1357,
        end: 1373,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: 
      Node {
        type: 'Literal',
        start: 1376,
        end: 1394,
        value: '    var sum = 0;',
        raw: '"    var sum = 0;"' } },
  operator: '+',
  right: 
   Node {
     type: 'Literal',
     start: 1397,
     end: 1401,
     value: '\n',
     raw: '"\\n"' } }
BinaryExpression
1357
1401
Node {
  type: 'BinaryExpression',
  start: 1357,
  end: 1394,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 1357,
     end: 1373,
     left: 
      Node {
        type: 'Literal',
        start: 1357,
        end: 1366,
        value: '(arr) {',
        raw: '"(arr) {"' },
     operator: '+',
     right: 
      Node {
        type: 'Literal',
        start: 1369,
        end: 1373,
        value: '\n',
        raw: '"\\n"' } },
  operator: '+',
  right: 
   Node {
     type: 'Literal',
     start: 1376,
     end: 1394,
     value: '    var sum = 0;',
     raw: '"    var sum = 0;"' } }
BinaryExpression
1357
1394
Node {
  type: 'BinaryExpression',
  start: 1357,
  end: 1373,
  left: 
   Node {
     type: 'Literal',
     start: 1357,
     end: 1366,
     value: '(arr) {',
     raw: '"(arr) {"' },
  operator: '+',
  right: 
   Node {
     type: 'Literal',
     start: 1369,
     end: 1373,
     value: '\n',
     raw: '"\\n"' } }
BinaryExpression
1357
1373
Node {
  type: 'Literal',
  start: 1357,
  end: 1366,
  value: '(arr) {',
  raw: '"(arr) {"' }
Literal
1357
1366
(arr) {
"(arr) {"
+
Node {
  type: 'Literal',
  start: 1369,
  end: 1373,
  value: '\n',
  raw: '"\\n"' }
Literal
1369
1373


"\n"
+
Node {
  type: 'Literal',
  start: 1376,
  end: 1394,
  value: '    var sum = 0;',
  raw: '"    var sum = 0;"' }
Literal
1376
1394
    var sum = 0;
"    var sum = 0;"
+
Node {
  type: 'Literal',
  start: 1397,
  end: 1401,
  value: '\n',
  raw: '"\\n"' }
Literal
1397
1401


"\n"
+
Node {
  type: 'Literal',
  start: 1404,
  end: 1428,
  value: '    for (var i in arr)',
  raw: '"    for (var i in arr)"' }
Literal
1404
1428
    for (var i in arr)
"    for (var i in arr)"
+
Node {
  type: 'Literal',
  start: 1431,
  end: 1435,
  value: '\n',
  raw: '"\\n"' }
Literal
1431
1435


"\n"
+
Node {
  type: 'Literal',
  start: 1438,
  end: 1462,
  value: '        sum += arr[i];',
  raw: '"        sum += arr[i];"' }
Literal
1438
1462
        sum += arr[i];
"        sum += arr[i];"
+
Node {
  type: 'Literal',
  start: 1465,
  end: 1469,
  value: '\n',
  raw: '"\\n"' }
Literal
1465
1469


"\n"
+
Node {
  type: 'Literal',
  start: 1472,
  end: 1489,
  value: '    return sum;',
  raw: '"    return sum;"' }
Literal
1472
1489
    return sum;
"    return sum;"
+
Node {
  type: 'Literal',
  start: 1492,
  end: 1496,
  value: '\n',
  raw: '"\\n"' }
Literal
1492
1496


"\n"
+
Node { type: 'Literal', start: 1499, end: 1502, value: '}', raw: '"}"' }
Literal
1499
1502
}
"}"
var
Node {
  type: 'VariableDeclaration',
  start: 1505,
  end: 2528,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 1509,
       end: 2527,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
1505
2528
[ Node {
    type: 'VariableDeclarator',
    start: 1509,
    end: 2527,
    id: Node { type: 'Identifier', start: 1509, end: 1517, name: 'testData' },
    init: 
     Node {
       type: 'ObjectExpression',
       start: 1520,
       end: 2527,
       properties: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 1509,
  end: 2527,
  id: Node { type: 'Identifier', start: 1509, end: 1517, name: 'testData' },
  init: 
   Node {
     type: 'ObjectExpression',
     start: 1520,
     end: 2527,
     properties: 
      [ [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node] ] } }
VariableDeclarator
1509
2527
Node { type: 'Identifier', start: 1509, end: 1517, name: 'testData' }
Identifier
1509
1517
testData
Node {
  type: 'ObjectExpression',
  start: 1520,
  end: 2527,
  properties: 
   [ Node {
       type: 'Property',
       start: 1526,
       end: 1566,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 1572,
       end: 1617,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 1623,
       end: 1684,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 1690,
       end: 1751,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 1757,
       end: 1824,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 1871,
       end: 1943,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 1991,
       end: 2034,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 2040,
       end: 2100,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 2106,
       end: 2182,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 2188,
       end: 2265,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 2271,
       end: 2353,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 2398,
       end: 2485,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
1520
2527
[ Node {
    type: 'Property',
    start: 1526,
    end: 1566,
    method: false,
    shorthand: false,
    computed: false,
    key: 
     Node {
       type: 'Literal',
       start: 1526,
       end: 1546,
       value: 'ArrayWithUndecided',
       raw: '"ArrayWithUndecided"' },
    value: 
     Node {
       type: 'ObjectExpression',
       start: 1548,
       end: 1566,
       properties: [Array] },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 1572,
    end: 1617,
    method: false,
    shorthand: false,
    computed: false,
    key: 
     Node {
       type: 'Literal',
       start: 1572,
       end: 1588,
       value: 'ArrayWithInt32',
       raw: '"ArrayWithInt32"' },
    value: 
     Node {
       type: 'ObjectExpression',
       start: 1590,
       end: 1617,
       properties: [Array] },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 1623,
    end: 1684,
    method: false,
    shorthand: false,
    computed: false,
    key: 
     Node {
       type: 'Literal',
       start: 1623,
       end: 1644,
       value: 'ArrayWithContiguous',
       raw: '"ArrayWithContiguous"' },
    value: 
     Node {
       type: 'ObjectExpression',
       start: 1646,
       end: 1684,
       properties: [Array] },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 1690,
    end: 1751,
    method: false,
    shorthand: false,
    computed: false,
    key: 
     Node {
       type: 'Literal',
       start: 1690,
       end: 1707,
       value: 'ArrayWithDouble',
       raw: '"ArrayWithDouble"' },
    value: 
     Node {
       type: 'ObjectExpression',
       start: 1709,
       end: 1751,
       properties: [Array] },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 1757,
    end: 1824,
    method: false,
    shorthand: false,
    computed: false,
    key: 
     Node {
       type: 'Literal',
       start: 1757,
       end: 1780,
       value: 'ArrayWithArrayStorage',
       raw: '"ArrayWithArrayStorage"' },
    value: 
     Node {
       type: 'ObjectExpression',
       start: 1782,
       end: 1824,
       properties: [Array] },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 1871,
    end: 1943,
    method: false,
    shorthand: false,
    computed: false,
    key: 
     Node {
       type: 'Literal',
       start: 1871,
       end: 1901,
       value: 'ArrayWithSlowPutArrayStorage',
       raw: '"ArrayWithSlowPutArrayStorage"' },
    value: 
     Node {
       type: 'ObjectExpression',
       start: 1903,
       end: 1943,
       properties: [Array] },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 1991,
    end: 2034,
    method: false,
    shorthand: false,
    computed: false,
    key: 
     Node {
       type: 'Literal',
       start: 1991,
       end: 2014,
       value: 'NonArrayWithUndecided',
       raw: '"NonArrayWithUndecided"' },
    value: 
     Node {
       type: 'ObjectExpression',
       start: 2016,
       end: 2034,
       properties: [Array] },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 2040,
    end: 2100,
    method: false,
    shorthand: false,
    computed: false,
    key: 
     Node {
       type: 'Literal',
       start: 2040,
       end: 2059,
       value: 'NonArrayWithInt32',
       raw: '"NonArrayWithInt32"' },
    value: 
     Node {
       type: 'ObjectExpression',
       start: 2061,
       end: 2100,
       properties: [Array] },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 2106,
    end: 2182,
    method: false,
    shorthand: false,
    computed: false,
    key: 
     Node {
       type: 'Literal',
       start: 2106,
       end: 2130,
       value: 'NonArrayWithContiguous',
       raw: '"NonArrayWithContiguous"' },
    value: 
     Node {
       type: 'ObjectExpression',
       start: 2132,
       end: 2182,
       properties: [Array] },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 2188,
    end: 2265,
    method: false,
    shorthand: false,
    computed: false,
    key: 
     Node {
       type: 'Literal',
       start: 2188,
       end: 2208,
       value: 'NonArrayWithDouble',
       raw: '"NonArrayWithDouble"' },
    value: 
     Node {
       type: 'ObjectExpression',
       start: 2210,
       end: 2265,
       properties: [Array] },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 2271,
    end: 2353,
    method: false,
    shorthand: false,
    computed: false,
    key: 
     Node {
       type: 'Literal',
       start: 2271,
       end: 2297,
       value: 'NonArrayWithArrayStorage',
       raw: '"NonArrayWithArrayStorage"' },
    value: 
     Node {
       type: 'ObjectExpression',
       start: 2299,
       end: 2353,
       properties: [Array] },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 2398,
    end: 2485,
    method: false,
    shorthand: false,
    computed: false,
    key: 
     Node {
       type: 'Literal',
       start: 2398,
       end: 2431,
       value: 'NonArrayWithSlowPutArrayStorage',
       raw: '"NonArrayWithSlowPutArrayStorage"' },
    value: 
     Node {
       type: 'ObjectExpression',
       start: 2433,
       end: 2485,
       properties: [Array] },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 1526,
  end: 1566,
  method: false,
  shorthand: false,
  computed: false,
  key: 
   Node {
     type: 'Literal',
     start: 1526,
     end: 1546,
     value: 'ArrayWithUndecided',
     raw: '"ArrayWithUndecided"' },
  value: 
   Node {
     type: 'ObjectExpression',
     start: 1548,
     end: 1566,
     properties: [ [Node], [Node] ] },
  kind: 'init' }
Property
1526
1566
false
false
false
Node {
  type: 'Literal',
  start: 1526,
  end: 1546,
  value: 'ArrayWithUndecided',
  raw: '"ArrayWithUndecided"' }
Literal
1526
1546
ArrayWithUndecided
"ArrayWithUndecided"
Node {
  type: 'ObjectExpression',
  start: 1548,
  end: 1566,
  properties: 
   [ Node {
       type: 'Property',
       start: 1550,
       end: 1556,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 1558,
       end: 1564,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
1548
1566
[ Node {
    type: 'Property',
    start: 1550,
    end: 1556,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 1550, end: 1552, name: 'in' },
    value: Node { type: 'ArrayExpression', start: 1554, end: 1556, elements: [] },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 1558,
    end: 1564,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 1558, end: 1561, name: 'out' },
    value: Node { type: 'Literal', start: 1563, end: 1564, value: 0, raw: '0' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 1550,
  end: 1556,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 1550, end: 1552, name: 'in' },
  value: Node { type: 'ArrayExpression', start: 1554, end: 1556, elements: [] },
  kind: 'init' }
Property
1550
1556
false
false
false
Node { type: 'Identifier', start: 1550, end: 1552, name: 'in' }
Identifier
1550
1552
in
Node { type: 'ArrayExpression', start: 1554, end: 1556, elements: [] }
ArrayExpression
1554
1556
[]
init
Node {
  type: 'Property',
  start: 1558,
  end: 1564,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 1558, end: 1561, name: 'out' },
  value: Node { type: 'Literal', start: 1563, end: 1564, value: 0, raw: '0' },
  kind: 'init' }
Property
1558
1564
false
false
false
Node { type: 'Identifier', start: 1558, end: 1561, name: 'out' }
Identifier
1558
1561
out
Node { type: 'Literal', start: 1563, end: 1564, value: 0, raw: '0' }
Literal
1563
1564
0
0
init
init
Node {
  type: 'Property',
  start: 1572,
  end: 1617,
  method: false,
  shorthand: false,
  computed: false,
  key: 
   Node {
     type: 'Literal',
     start: 1572,
     end: 1588,
     value: 'ArrayWithInt32',
     raw: '"ArrayWithInt32"' },
  value: 
   Node {
     type: 'ObjectExpression',
     start: 1590,
     end: 1617,
     properties: [ [Node], [Node] ] },
  kind: 'init' }
Property
1572
1617
false
false
false
Node {
  type: 'Literal',
  start: 1572,
  end: 1588,
  value: 'ArrayWithInt32',
  raw: '"ArrayWithInt32"' }
Literal
1572
1588
ArrayWithInt32
"ArrayWithInt32"
Node {
  type: 'ObjectExpression',
  start: 1590,
  end: 1617,
  properties: 
   [ Node {
       type: 'Property',
       start: 1592,
       end: 1607,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 1609,
       end: 1615,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
1590
1617
[ Node {
    type: 'Property',
    start: 1592,
    end: 1607,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 1592, end: 1594, name: 'in' },
    value: 
     Node {
       type: 'ArrayExpression',
       start: 1596,
       end: 1607,
       elements: [Array] },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 1609,
    end: 1615,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 1609, end: 1612, name: 'out' },
    value: Node { type: 'Literal', start: 1614, end: 1615, value: 6, raw: '6' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 1592,
  end: 1607,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 1592, end: 1594, name: 'in' },
  value: 
   Node {
     type: 'ArrayExpression',
     start: 1596,
     end: 1607,
     elements: [ [Node], [Node], [Node] ] },
  kind: 'init' }
Property
1592
1607
false
false
false
Node { type: 'Identifier', start: 1592, end: 1594, name: 'in' }
Identifier
1592
1594
in
Node {
  type: 'ArrayExpression',
  start: 1596,
  end: 1607,
  elements: 
   [ Node { type: 'Literal', start: 1598, end: 1599, value: 1, raw: '1' },
     Node { type: 'Literal', start: 1601, end: 1602, value: 2, raw: '2' },
     Node { type: 'Literal', start: 1604, end: 1605, value: 3, raw: '3' } ] }
ArrayExpression
1596
1607
[ Node { type: 'Literal', start: 1598, end: 1599, value: 1, raw: '1' },
  Node { type: 'Literal', start: 1601, end: 1602, value: 2, raw: '2' },
  Node { type: 'Literal', start: 1604, end: 1605, value: 3, raw: '3' } ]
Node { type: 'Literal', start: 1598, end: 1599, value: 1, raw: '1' }
Literal
1598
1599
1
1
Node { type: 'Literal', start: 1601, end: 1602, value: 2, raw: '2' }
Literal
1601
1602
2
2
Node { type: 'Literal', start: 1604, end: 1605, value: 3, raw: '3' }
Literal
1604
1605
3
3
init
Node {
  type: 'Property',
  start: 1609,
  end: 1615,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 1609, end: 1612, name: 'out' },
  value: Node { type: 'Literal', start: 1614, end: 1615, value: 6, raw: '6' },
  kind: 'init' }
Property
1609
1615
false
false
false
Node { type: 'Identifier', start: 1609, end: 1612, name: 'out' }
Identifier
1609
1612
out
Node { type: 'Literal', start: 1614, end: 1615, value: 6, raw: '6' }
Literal
1614
1615
6
6
init
init
Node {
  type: 'Property',
  start: 1623,
  end: 1684,
  method: false,
  shorthand: false,
  computed: false,
  key: 
   Node {
     type: 'Literal',
     start: 1623,
     end: 1644,
     value: 'ArrayWithContiguous',
     raw: '"ArrayWithContiguous"' },
  value: 
   Node {
     type: 'ObjectExpression',
     start: 1646,
     end: 1684,
     properties: [ [Node], [Node] ] },
  kind: 'init' }
Property
1623
1684
false
false
false
Node {
  type: 'Literal',
  start: 1623,
  end: 1644,
  value: 'ArrayWithContiguous',
  raw: '"ArrayWithContiguous"' }
Literal
1623
1644
ArrayWithContiguous
"ArrayWithContiguous"
Node {
  type: 'ObjectExpression',
  start: 1646,
  end: 1684,
  properties: 
   [ Node {
       type: 'Property',
       start: 1648,
       end: 1669,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 1671,
       end: 1682,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
1646
1684
[ Node {
    type: 'Property',
    start: 1648,
    end: 1669,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 1648, end: 1650, name: 'in' },
    value: 
     Node {
       type: 'ArrayExpression',
       start: 1652,
       end: 1669,
       elements: [Array] },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 1671,
    end: 1682,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 1671, end: 1674, name: 'out' },
    value: 
     Node {
       type: 'Literal',
       start: 1676,
       end: 1682,
       value: '0abc',
       raw: '"0abc"' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 1648,
  end: 1669,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 1648, end: 1650, name: 'in' },
  value: 
   Node {
     type: 'ArrayExpression',
     start: 1652,
     end: 1669,
     elements: [ [Node], [Node], [Node] ] },
  kind: 'init' }
Property
1648
1669
false
false
false
Node { type: 'Identifier', start: 1648, end: 1650, name: 'in' }
Identifier
1648
1650
in
Node {
  type: 'ArrayExpression',
  start: 1652,
  end: 1669,
  elements: 
   [ Node { type: 'Literal', start: 1654, end: 1657, value: 'a', raw: '"a"' },
     Node { type: 'Literal', start: 1659, end: 1662, value: 'b', raw: '"b"' },
     Node { type: 'Literal', start: 1664, end: 1667, value: 'c', raw: '"c"' } ] }
ArrayExpression
1652
1669
[ Node { type: 'Literal', start: 1654, end: 1657, value: 'a', raw: '"a"' },
  Node { type: 'Literal', start: 1659, end: 1662, value: 'b', raw: '"b"' },
  Node { type: 'Literal', start: 1664, end: 1667, value: 'c', raw: '"c"' } ]
Node { type: 'Literal', start: 1654, end: 1657, value: 'a', raw: '"a"' }
Literal
1654
1657
a
"a"
Node { type: 'Literal', start: 1659, end: 1662, value: 'b', raw: '"b"' }
Literal
1659
1662
b
"b"
Node { type: 'Literal', start: 1664, end: 1667, value: 'c', raw: '"c"' }
Literal
1664
1667
c
"c"
init
Node {
  type: 'Property',
  start: 1671,
  end: 1682,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 1671, end: 1674, name: 'out' },
  value: 
   Node {
     type: 'Literal',
     start: 1676,
     end: 1682,
     value: '0abc',
     raw: '"0abc"' },
  kind: 'init' }
Property
1671
1682
false
false
false
Node { type: 'Identifier', start: 1671, end: 1674, name: 'out' }
Identifier
1671
1674
out
Node {
  type: 'Literal',
  start: 1676,
  end: 1682,
  value: '0abc',
  raw: '"0abc"' }
Literal
1676
1682
0abc
"0abc"
init
init
Node {
  type: 'Property',
  start: 1690,
  end: 1751,
  method: false,
  shorthand: false,
  computed: false,
  key: 
   Node {
     type: 'Literal',
     start: 1690,
     end: 1707,
     value: 'ArrayWithDouble',
     raw: '"ArrayWithDouble"' },
  value: 
   Node {
     type: 'ObjectExpression',
     start: 1709,
     end: 1751,
     properties: [ [Node], [Node] ] },
  kind: 'init' }
Property
1690
1751
false
false
false
Node {
  type: 'Literal',
  start: 1690,
  end: 1707,
  value: 'ArrayWithDouble',
  raw: '"ArrayWithDouble"' }
Literal
1690
1707
ArrayWithDouble
"ArrayWithDouble"
Node {
  type: 'ObjectExpression',
  start: 1709,
  end: 1751,
  properties: 
   [ Node {
       type: 'Property',
       start: 1711,
       end: 1737,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 1739,
       end: 1749,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
1709
1751
[ Node {
    type: 'Property',
    start: 1711,
    end: 1737,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 1711, end: 1713, name: 'in' },
    value: 
     Node {
       type: 'ArrayExpression',
       start: 1715,
       end: 1737,
       elements: [Array] },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 1739,
    end: 1749,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 1739, end: 1742, name: 'out' },
    value: 
     Node {
       type: 'Literal',
       start: 1744,
       end: 1749,
       value: 60.75,
       raw: '60.75' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 1711,
  end: 1737,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 1711, end: 1713, name: 'in' },
  value: 
   Node {
     type: 'ArrayExpression',
     start: 1715,
     end: 1737,
     elements: [ [Node], [Node], [Node] ] },
  kind: 'init' }
Property
1711
1737
false
false
false
Node { type: 'Identifier', start: 1711, end: 1713, name: 'in' }
Identifier
1711
1713
in
Node {
  type: 'ArrayExpression',
  start: 1715,
  end: 1737,
  elements: 
   [ Node {
       type: 'Literal',
       start: 1716,
       end: 1721,
       value: 10.25,
       raw: '10.25' },
     Node {
       type: 'Literal',
       start: 1723,
       end: 1728,
       value: 20.25,
       raw: '20.25' },
     Node {
       type: 'Literal',
       start: 1730,
       end: 1735,
       value: 30.25,
       raw: '30.25' } ] }
ArrayExpression
1715
1737
[ Node {
    type: 'Literal',
    start: 1716,
    end: 1721,
    value: 10.25,
    raw: '10.25' },
  Node {
    type: 'Literal',
    start: 1723,
    end: 1728,
    value: 20.25,
    raw: '20.25' },
  Node {
    type: 'Literal',
    start: 1730,
    end: 1735,
    value: 30.25,
    raw: '30.25' } ]
Node {
  type: 'Literal',
  start: 1716,
  end: 1721,
  value: 10.25,
  raw: '10.25' }
Literal
1716
1721
10.25
10.25
Node {
  type: 'Literal',
  start: 1723,
  end: 1728,
  value: 20.25,
  raw: '20.25' }
Literal
1723
1728
20.25
20.25
Node {
  type: 'Literal',
  start: 1730,
  end: 1735,
  value: 30.25,
  raw: '30.25' }
Literal
1730
1735
30.25
30.25
init
Node {
  type: 'Property',
  start: 1739,
  end: 1749,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 1739, end: 1742, name: 'out' },
  value: 
   Node {
     type: 'Literal',
     start: 1744,
     end: 1749,
     value: 60.75,
     raw: '60.75' },
  kind: 'init' }
Property
1739
1749
false
false
false
Node { type: 'Identifier', start: 1739, end: 1742, name: 'out' }
Identifier
1739
1742
out
Node {
  type: 'Literal',
  start: 1744,
  end: 1749,
  value: 60.75,
  raw: '60.75' }
Literal
1744
1749
60.75
60.75
init
init
Node {
  type: 'Property',
  start: 1757,
  end: 1824,
  method: false,
  shorthand: false,
  computed: false,
  key: 
   Node {
     type: 'Literal',
     start: 1757,
     end: 1780,
     value: 'ArrayWithArrayStorage',
     raw: '"ArrayWithArrayStorage"' },
  value: 
   Node {
     type: 'ObjectExpression',
     start: 1782,
     end: 1824,
     properties: [ [Node], [Node] ] },
  kind: 'init' }
Property
1757
1824
false
false
false
Node {
  type: 'Literal',
  start: 1757,
  end: 1780,
  value: 'ArrayWithArrayStorage',
  raw: '"ArrayWithArrayStorage"' }
Literal
1757
1780
ArrayWithArrayStorage
"ArrayWithArrayStorage"
Node {
  type: 'ObjectExpression',
  start: 1782,
  end: 1824,
  properties: 
   [ Node {
       type: 'Property',
       start: 1784,
       end: 1805,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 1807,
       end: 1822,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
1782
1824
[ Node {
    type: 'Property',
    start: 1784,
    end: 1805,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 1784, end: 1786, name: 'in' },
    value: 
     Node {
       type: 'ArrayExpression',
       start: 1788,
       end: 1805,
       elements: [Array] },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 1807,
    end: 1822,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 1807, end: 1810, name: 'out' },
    value: 
     Node {
       type: 'Literal',
       start: 1812,
       end: 1822,
       value: '0abc1000',
       raw: '"0abc1000"' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 1784,
  end: 1805,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 1784, end: 1786, name: 'in' },
  value: 
   Node {
     type: 'ArrayExpression',
     start: 1788,
     end: 1805,
     elements: [ [Node], [Node], [Node] ] },
  kind: 'init' }
Property
1784
1805
false
false
false
Node { type: 'Identifier', start: 1784, end: 1786, name: 'in' }
Identifier
1784
1786
in
Node {
  type: 'ArrayExpression',
  start: 1788,
  end: 1805,
  elements: 
   [ Node { type: 'Literal', start: 1790, end: 1793, value: 'a', raw: '"a"' },
     Node { type: 'Literal', start: 1795, end: 1798, value: 'b', raw: '"b"' },
     Node { type: 'Literal', start: 1800, end: 1803, value: 'c', raw: '"c"' } ] }
ArrayExpression
1788
1805
[ Node { type: 'Literal', start: 1790, end: 1793, value: 'a', raw: '"a"' },
  Node { type: 'Literal', start: 1795, end: 1798, value: 'b', raw: '"b"' },
  Node { type: 'Literal', start: 1800, end: 1803, value: 'c', raw: '"c"' } ]
Node { type: 'Literal', start: 1790, end: 1793, value: 'a', raw: '"a"' }
Literal
1790
1793
a
"a"
Node { type: 'Literal', start: 1795, end: 1798, value: 'b', raw: '"b"' }
Literal
1795
1798
b
"b"
Node { type: 'Literal', start: 1800, end: 1803, value: 'c', raw: '"c"' }
Literal
1800
1803
c
"c"
init
Node {
  type: 'Property',
  start: 1807,
  end: 1822,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 1807, end: 1810, name: 'out' },
  value: 
   Node {
     type: 'Literal',
     start: 1812,
     end: 1822,
     value: '0abc1000',
     raw: '"0abc1000"' },
  kind: 'init' }
Property
1807
1822
false
false
false
Node { type: 'Identifier', start: 1807, end: 1810, name: 'out' }
Identifier
1807
1810
out
Node {
  type: 'Literal',
  start: 1812,
  end: 1822,
  value: '0abc1000',
  raw: '"0abc1000"' }
Literal
1812
1822
0abc1000
"0abc1000"
init
init
Node {
  type: 'Property',
  start: 1871,
  end: 1943,
  method: false,
  shorthand: false,
  computed: false,
  key: 
   Node {
     type: 'Literal',
     start: 1871,
     end: 1901,
     value: 'ArrayWithSlowPutArrayStorage',
     raw: '"ArrayWithSlowPutArrayStorage"' },
  value: 
   Node {
     type: 'ObjectExpression',
     start: 1903,
     end: 1943,
     properties: [ [Node], [Node] ] },
  kind: 'init' }
Property
1871
1943
false
false
false
Node {
  type: 'Literal',
  start: 1871,
  end: 1901,
  value: 'ArrayWithSlowPutArrayStorage',
  raw: '"ArrayWithSlowPutArrayStorage"' }
Literal
1871
1901
ArrayWithSlowPutArrayStorage
"ArrayWithSlowPutArrayStorage"
Node {
  type: 'ObjectExpression',
  start: 1903,
  end: 1943,
  properties: 
   [ Node {
       type: 'Property',
       start: 1905,
       end: 1926,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 1928,
       end: 1941,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
1903
1943
[ Node {
    type: 'Property',
    start: 1905,
    end: 1926,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 1905, end: 1907, name: 'in' },
    value: 
     Node {
       type: 'ArrayExpression',
       start: 1909,
       end: 1926,
       elements: [Array] },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 1928,
    end: 1941,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 1928, end: 1931, name: 'out' },
    value: 
     Node {
       type: 'Literal',
       start: 1933,
       end: 1941,
       value: '0abc10',
       raw: '"0abc10"' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 1905,
  end: 1926,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 1905, end: 1907, name: 'in' },
  value: 
   Node {
     type: 'ArrayExpression',
     start: 1909,
     end: 1926,
     elements: [ [Node], [Node], [Node] ] },
  kind: 'init' }
Property
1905
1926
false
false
false
Node { type: 'Identifier', start: 1905, end: 1907, name: 'in' }
Identifier
1905
1907
in
Node {
  type: 'ArrayExpression',
  start: 1909,
  end: 1926,
  elements: 
   [ Node { type: 'Literal', start: 1911, end: 1914, value: 'a', raw: '"a"' },
     Node { type: 'Literal', start: 1916, end: 1919, value: 'b', raw: '"b"' },
     Node { type: 'Literal', start: 1921, end: 1924, value: 'c', raw: '"c"' } ] }
ArrayExpression
1909
1926
[ Node { type: 'Literal', start: 1911, end: 1914, value: 'a', raw: '"a"' },
  Node { type: 'Literal', start: 1916, end: 1919, value: 'b', raw: '"b"' },
  Node { type: 'Literal', start: 1921, end: 1924, value: 'c', raw: '"c"' } ]
Node { type: 'Literal', start: 1911, end: 1914, value: 'a', raw: '"a"' }
Literal
1911
1914
a
"a"
Node { type: 'Literal', start: 1916, end: 1919, value: 'b', raw: '"b"' }
Literal
1916
1919
b
"b"
Node { type: 'Literal', start: 1921, end: 1924, value: 'c', raw: '"c"' }
Literal
1921
1924
c
"c"
init
Node {
  type: 'Property',
  start: 1928,
  end: 1941,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 1928, end: 1931, name: 'out' },
  value: 
   Node {
     type: 'Literal',
     start: 1933,
     end: 1941,
     value: '0abc10',
     raw: '"0abc10"' },
  kind: 'init' }
Property
1928
1941
false
false
false
Node { type: 'Identifier', start: 1928, end: 1931, name: 'out' }
Identifier
1928
1931
out
Node {
  type: 'Literal',
  start: 1933,
  end: 1941,
  value: '0abc10',
  raw: '"0abc10"' }
Literal
1933
1941
0abc10
"0abc10"
init
init
Node {
  type: 'Property',
  start: 1991,
  end: 2034,
  method: false,
  shorthand: false,
  computed: false,
  key: 
   Node {
     type: 'Literal',
     start: 1991,
     end: 2014,
     value: 'NonArrayWithUndecided',
     raw: '"NonArrayWithUndecided"' },
  value: 
   Node {
     type: 'ObjectExpression',
     start: 2016,
     end: 2034,
     properties: [ [Node], [Node] ] },
  kind: 'init' }
Property
1991
2034
false
false
false
Node {
  type: 'Literal',
  start: 1991,
  end: 2014,
  value: 'NonArrayWithUndecided',
  raw: '"NonArrayWithUndecided"' }
Literal
1991
2014
NonArrayWithUndecided
"NonArrayWithUndecided"
Node {
  type: 'ObjectExpression',
  start: 2016,
  end: 2034,
  properties: 
   [ Node {
       type: 'Property',
       start: 2018,
       end: 2024,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 2026,
       end: 2032,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
2016
2034
[ Node {
    type: 'Property',
    start: 2018,
    end: 2024,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 2018, end: 2020, name: 'in' },
    value: 
     Node {
       type: 'ObjectExpression',
       start: 2022,
       end: 2024,
       properties: [] },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 2026,
    end: 2032,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 2026, end: 2029, name: 'out' },
    value: Node { type: 'Literal', start: 2031, end: 2032, value: 0, raw: '0' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 2018,
  end: 2024,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 2018, end: 2020, name: 'in' },
  value: 
   Node {
     type: 'ObjectExpression',
     start: 2022,
     end: 2024,
     properties: [] },
  kind: 'init' }
Property
2018
2024
false
false
false
Node { type: 'Identifier', start: 2018, end: 2020, name: 'in' }
Identifier
2018
2020
in
Node {
  type: 'ObjectExpression',
  start: 2022,
  end: 2024,
  properties: [] }
ObjectExpression
2022
2024
[]
init
Node {
  type: 'Property',
  start: 2026,
  end: 2032,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 2026, end: 2029, name: 'out' },
  value: Node { type: 'Literal', start: 2031, end: 2032, value: 0, raw: '0' },
  kind: 'init' }
Property
2026
2032
false
false
false
Node { type: 'Identifier', start: 2026, end: 2029, name: 'out' }
Identifier
2026
2029
out
Node { type: 'Literal', start: 2031, end: 2032, value: 0, raw: '0' }
Literal
2031
2032
0
0
init
init
Node {
  type: 'Property',
  start: 2040,
  end: 2100,
  method: false,
  shorthand: false,
  computed: false,
  key: 
   Node {
     type: 'Literal',
     start: 2040,
     end: 2059,
     value: 'NonArrayWithInt32',
     raw: '"NonArrayWithInt32"' },
  value: 
   Node {
     type: 'ObjectExpression',
     start: 2061,
     end: 2100,
     properties: [ [Node], [Node] ] },
  kind: 'init' }
Property
2040
2100
false
false
false
Node {
  type: 'Literal',
  start: 2040,
  end: 2059,
  value: 'NonArrayWithInt32',
  raw: '"NonArrayWithInt32"' }
Literal
2040
2059
NonArrayWithInt32
"NonArrayWithInt32"
Node {
  type: 'ObjectExpression',
  start: 2061,
  end: 2100,
  properties: 
   [ Node {
       type: 'Property',
       start: 2063,
       end: 2090,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 2092,
       end: 2098,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
2061
2100
[ Node {
    type: 'Property',
    start: 2063,
    end: 2090,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 2063, end: 2065, name: 'in' },
    value: 
     Node {
       type: 'ObjectExpression',
       start: 2067,
       end: 2090,
       properties: [Array] },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 2092,
    end: 2098,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 2092, end: 2095, name: 'out' },
    value: Node { type: 'Literal', start: 2097, end: 2098, value: 6, raw: '6' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 2063,
  end: 2090,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 2063, end: 2065, name: 'in' },
  value: 
   Node {
     type: 'ObjectExpression',
     start: 2067,
     end: 2090,
     properties: [ [Node], [Node], [Node] ] },
  kind: 'init' }
Property
2063
2090
false
false
false
Node { type: 'Identifier', start: 2063, end: 2065, name: 'in' }
Identifier
2063
2065
in
Node {
  type: 'ObjectExpression',
  start: 2067,
  end: 2090,
  properties: 
   [ Node {
       type: 'Property',
       start: 2069,
       end: 2074,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 2076,
       end: 2081,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 2083,
       end: 2088,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
2067
2090
[ Node {
    type: 'Property',
    start: 2069,
    end: 2074,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Literal', start: 2069, end: 2072, value: '0', raw: '"0"' },
    value: Node { type: 'Literal', start: 2073, end: 2074, value: 1, raw: '1' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 2076,
    end: 2081,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Literal', start: 2076, end: 2079, value: '1', raw: '"1"' },
    value: Node { type: 'Literal', start: 2080, end: 2081, value: 2, raw: '2' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 2083,
    end: 2088,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Literal', start: 2083, end: 2086, value: '2', raw: '"2"' },
    value: Node { type: 'Literal', start: 2087, end: 2088, value: 3, raw: '3' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 2069,
  end: 2074,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Literal', start: 2069, end: 2072, value: '0', raw: '"0"' },
  value: Node { type: 'Literal', start: 2073, end: 2074, value: 1, raw: '1' },
  kind: 'init' }
Property
2069
2074
false
false
false
Node { type: 'Literal', start: 2069, end: 2072, value: '0', raw: '"0"' }
Literal
2069
2072
0
"0"
Node { type: 'Literal', start: 2073, end: 2074, value: 1, raw: '1' }
Literal
2073
2074
1
1
init
Node {
  type: 'Property',
  start: 2076,
  end: 2081,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Literal', start: 2076, end: 2079, value: '1', raw: '"1"' },
  value: Node { type: 'Literal', start: 2080, end: 2081, value: 2, raw: '2' },
  kind: 'init' }
Property
2076
2081
false
false
false
Node { type: 'Literal', start: 2076, end: 2079, value: '1', raw: '"1"' }
Literal
2076
2079
1
"1"
Node { type: 'Literal', start: 2080, end: 2081, value: 2, raw: '2' }
Literal
2080
2081
2
2
init
Node {
  type: 'Property',
  start: 2083,
  end: 2088,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Literal', start: 2083, end: 2086, value: '2', raw: '"2"' },
  value: Node { type: 'Literal', start: 2087, end: 2088, value: 3, raw: '3' },
  kind: 'init' }
Property
2083
2088
false
false
false
Node { type: 'Literal', start: 2083, end: 2086, value: '2', raw: '"2"' }
Literal
2083
2086
2
"2"
Node { type: 'Literal', start: 2087, end: 2088, value: 3, raw: '3' }
Literal
2087
2088
3
3
init
init
Node {
  type: 'Property',
  start: 2092,
  end: 2098,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 2092, end: 2095, name: 'out' },
  value: Node { type: 'Literal', start: 2097, end: 2098, value: 6, raw: '6' },
  kind: 'init' }
Property
2092
2098
false
false
false
Node { type: 'Identifier', start: 2092, end: 2095, name: 'out' }
Identifier
2092
2095
out
Node { type: 'Literal', start: 2097, end: 2098, value: 6, raw: '6' }
Literal
2097
2098
6
6
init
init
Node {
  type: 'Property',
  start: 2106,
  end: 2182,
  method: false,
  shorthand: false,
  computed: false,
  key: 
   Node {
     type: 'Literal',
     start: 2106,
     end: 2130,
     value: 'NonArrayWithContiguous',
     raw: '"NonArrayWithContiguous"' },
  value: 
   Node {
     type: 'ObjectExpression',
     start: 2132,
     end: 2182,
     properties: [ [Node], [Node] ] },
  kind: 'init' }
Property
2106
2182
false
false
false
Node {
  type: 'Literal',
  start: 2106,
  end: 2130,
  value: 'NonArrayWithContiguous',
  raw: '"NonArrayWithContiguous"' }
Literal
2106
2130
NonArrayWithContiguous
"NonArrayWithContiguous"
Node {
  type: 'ObjectExpression',
  start: 2132,
  end: 2182,
  properties: 
   [ Node {
       type: 'Property',
       start: 2134,
       end: 2167,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 2169,
       end: 2180,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
2132
2182
[ Node {
    type: 'Property',
    start: 2134,
    end: 2167,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 2134, end: 2136, name: 'in' },
    value: 
     Node {
       type: 'ObjectExpression',
       start: 2138,
       end: 2167,
       properties: [Array] },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 2169,
    end: 2180,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 2169, end: 2172, name: 'out' },
    value: 
     Node {
       type: 'Literal',
       start: 2174,
       end: 2180,
       value: '0abc',
       raw: '"0abc"' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 2134,
  end: 2167,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 2134, end: 2136, name: 'in' },
  value: 
   Node {
     type: 'ObjectExpression',
     start: 2138,
     end: 2167,
     properties: [ [Node], [Node], [Node] ] },
  kind: 'init' }
Property
2134
2167
false
false
false
Node { type: 'Identifier', start: 2134, end: 2136, name: 'in' }
Identifier
2134
2136
in
Node {
  type: 'ObjectExpression',
  start: 2138,
  end: 2167,
  properties: 
   [ Node {
       type: 'Property',
       start: 2140,
       end: 2147,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 2149,
       end: 2156,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 2158,
       end: 2165,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
2138
2167
[ Node {
    type: 'Property',
    start: 2140,
    end: 2147,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Literal', start: 2140, end: 2143, value: '0', raw: '"0"' },
    value: Node { type: 'Literal', start: 2144, end: 2147, value: 'a', raw: '"a"' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 2149,
    end: 2156,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Literal', start: 2149, end: 2152, value: '1', raw: '"1"' },
    value: Node { type: 'Literal', start: 2153, end: 2156, value: 'b', raw: '"b"' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 2158,
    end: 2165,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Literal', start: 2158, end: 2161, value: '2', raw: '"2"' },
    value: Node { type: 'Literal', start: 2162, end: 2165, value: 'c', raw: '"c"' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 2140,
  end: 2147,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Literal', start: 2140, end: 2143, value: '0', raw: '"0"' },
  value: Node { type: 'Literal', start: 2144, end: 2147, value: 'a', raw: '"a"' },
  kind: 'init' }
Property
2140
2147
false
false
false
Node { type: 'Literal', start: 2140, end: 2143, value: '0', raw: '"0"' }
Literal
2140
2143
0
"0"
Node { type: 'Literal', start: 2144, end: 2147, value: 'a', raw: '"a"' }
Literal
2144
2147
a
"a"
init
Node {
  type: 'Property',
  start: 2149,
  end: 2156,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Literal', start: 2149, end: 2152, value: '1', raw: '"1"' },
  value: Node { type: 'Literal', start: 2153, end: 2156, value: 'b', raw: '"b"' },
  kind: 'init' }
Property
2149
2156
false
false
false
Node { type: 'Literal', start: 2149, end: 2152, value: '1', raw: '"1"' }
Literal
2149
2152
1
"1"
Node { type: 'Literal', start: 2153, end: 2156, value: 'b', raw: '"b"' }
Literal
2153
2156
b
"b"
init
Node {
  type: 'Property',
  start: 2158,
  end: 2165,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Literal', start: 2158, end: 2161, value: '2', raw: '"2"' },
  value: Node { type: 'Literal', start: 2162, end: 2165, value: 'c', raw: '"c"' },
  kind: 'init' }
Property
2158
2165
false
false
false
Node { type: 'Literal', start: 2158, end: 2161, value: '2', raw: '"2"' }
Literal
2158
2161
2
"2"
Node { type: 'Literal', start: 2162, end: 2165, value: 'c', raw: '"c"' }
Literal
2162
2165
c
"c"
init
init
Node {
  type: 'Property',
  start: 2169,
  end: 2180,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 2169, end: 2172, name: 'out' },
  value: 
   Node {
     type: 'Literal',
     start: 2174,
     end: 2180,
     value: '0abc',
     raw: '"0abc"' },
  kind: 'init' }
Property
2169
2180
false
false
false
Node { type: 'Identifier', start: 2169, end: 2172, name: 'out' }
Identifier
2169
2172
out
Node {
  type: 'Literal',
  start: 2174,
  end: 2180,
  value: '0abc',
  raw: '"0abc"' }
Literal
2174
2180
0abc
"0abc"
init
init
Node {
  type: 'Property',
  start: 2188,
  end: 2265,
  method: false,
  shorthand: false,
  computed: false,
  key: 
   Node {
     type: 'Literal',
     start: 2188,
     end: 2208,
     value: 'NonArrayWithDouble',
     raw: '"NonArrayWithDouble"' },
  value: 
   Node {
     type: 'ObjectExpression',
     start: 2210,
     end: 2265,
     properties: [ [Node], [Node] ] },
  kind: 'init' }
Property
2188
2265
false
false
false
Node {
  type: 'Literal',
  start: 2188,
  end: 2208,
  value: 'NonArrayWithDouble',
  raw: '"NonArrayWithDouble"' }
Literal
2188
2208
NonArrayWithDouble
"NonArrayWithDouble"
Node {
  type: 'ObjectExpression',
  start: 2210,
  end: 2265,
  properties: 
   [ Node {
       type: 'Property',
       start: 2212,
       end: 2251,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 2253,
       end: 2263,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
2210
2265
[ Node {
    type: 'Property',
    start: 2212,
    end: 2251,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 2212, end: 2214, name: 'in' },
    value: 
     Node {
       type: 'ObjectExpression',
       start: 2216,
       end: 2251,
       properties: [Array] },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 2253,
    end: 2263,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 2253, end: 2256, name: 'out' },
    value: 
     Node {
       type: 'Literal',
       start: 2258,
       end: 2263,
       value: 60.75,
       raw: '60.75' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 2212,
  end: 2251,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 2212, end: 2214, name: 'in' },
  value: 
   Node {
     type: 'ObjectExpression',
     start: 2216,
     end: 2251,
     properties: [ [Node], [Node], [Node] ] },
  kind: 'init' }
Property
2212
2251
false
false
false
Node { type: 'Identifier', start: 2212, end: 2214, name: 'in' }
Identifier
2212
2214
in
Node {
  type: 'ObjectExpression',
  start: 2216,
  end: 2251,
  properties: 
   [ Node {
       type: 'Property',
       start: 2218,
       end: 2227,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 2229,
       end: 2238,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 2240,
       end: 2249,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
2216
2251
[ Node {
    type: 'Property',
    start: 2218,
    end: 2227,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Literal', start: 2218, end: 2221, value: '0', raw: '"0"' },
    value: 
     Node {
       type: 'Literal',
       start: 2222,
       end: 2227,
       value: 10.25,
       raw: '10.25' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 2229,
    end: 2238,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Literal', start: 2229, end: 2232, value: '1', raw: '"1"' },
    value: 
     Node {
       type: 'Literal',
       start: 2233,
       end: 2238,
       value: 20.25,
       raw: '20.25' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 2240,
    end: 2249,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Literal', start: 2240, end: 2243, value: '2', raw: '"2"' },
    value: 
     Node {
       type: 'Literal',
       start: 2244,
       end: 2249,
       value: 30.25,
       raw: '30.25' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 2218,
  end: 2227,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Literal', start: 2218, end: 2221, value: '0', raw: '"0"' },
  value: 
   Node {
     type: 'Literal',
     start: 2222,
     end: 2227,
     value: 10.25,
     raw: '10.25' },
  kind: 'init' }
Property
2218
2227
false
false
false
Node { type: 'Literal', start: 2218, end: 2221, value: '0', raw: '"0"' }
Literal
2218
2221
0
"0"
Node {
  type: 'Literal',
  start: 2222,
  end: 2227,
  value: 10.25,
  raw: '10.25' }
Literal
2222
2227
10.25
10.25
init
Node {
  type: 'Property',
  start: 2229,
  end: 2238,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Literal', start: 2229, end: 2232, value: '1', raw: '"1"' },
  value: 
   Node {
     type: 'Literal',
     start: 2233,
     end: 2238,
     value: 20.25,
     raw: '20.25' },
  kind: 'init' }
Property
2229
2238
false
false
false
Node { type: 'Literal', start: 2229, end: 2232, value: '1', raw: '"1"' }
Literal
2229
2232
1
"1"
Node {
  type: 'Literal',
  start: 2233,
  end: 2238,
  value: 20.25,
  raw: '20.25' }
Literal
2233
2238
20.25
20.25
init
Node {
  type: 'Property',
  start: 2240,
  end: 2249,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Literal', start: 2240, end: 2243, value: '2', raw: '"2"' },
  value: 
   Node {
     type: 'Literal',
     start: 2244,
     end: 2249,
     value: 30.25,
     raw: '30.25' },
  kind: 'init' }
Property
2240
2249
false
false
false
Node { type: 'Literal', start: 2240, end: 2243, value: '2', raw: '"2"' }
Literal
2240
2243
2
"2"
Node {
  type: 'Literal',
  start: 2244,
  end: 2249,
  value: 30.25,
  raw: '30.25' }
Literal
2244
2249
30.25
30.25
init
init
Node {
  type: 'Property',
  start: 2253,
  end: 2263,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 2253, end: 2256, name: 'out' },
  value: 
   Node {
     type: 'Literal',
     start: 2258,
     end: 2263,
     value: 60.75,
     raw: '60.75' },
  kind: 'init' }
Property
2253
2263
false
false
false
Node { type: 'Identifier', start: 2253, end: 2256, name: 'out' }
Identifier
2253
2256
out
Node {
  type: 'Literal',
  start: 2258,
  end: 2263,
  value: 60.75,
  raw: '60.75' }
Literal
2258
2263
60.75
60.75
init
init
Node {
  type: 'Property',
  start: 2271,
  end: 2353,
  method: false,
  shorthand: false,
  computed: false,
  key: 
   Node {
     type: 'Literal',
     start: 2271,
     end: 2297,
     value: 'NonArrayWithArrayStorage',
     raw: '"NonArrayWithArrayStorage"' },
  value: 
   Node {
     type: 'ObjectExpression',
     start: 2299,
     end: 2353,
     properties: [ [Node], [Node] ] },
  kind: 'init' }
Property
2271
2353
false
false
false
Node {
  type: 'Literal',
  start: 2271,
  end: 2297,
  value: 'NonArrayWithArrayStorage',
  raw: '"NonArrayWithArrayStorage"' }
Literal
2271
2297
NonArrayWithArrayStorage
"NonArrayWithArrayStorage"
Node {
  type: 'ObjectExpression',
  start: 2299,
  end: 2353,
  properties: 
   [ Node {
       type: 'Property',
       start: 2301,
       end: 2334,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 2336,
       end: 2351,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
2299
2353
[ Node {
    type: 'Property',
    start: 2301,
    end: 2334,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 2301, end: 2303, name: 'in' },
    value: 
     Node {
       type: 'ObjectExpression',
       start: 2305,
       end: 2334,
       properties: [Array] },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 2336,
    end: 2351,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 2336, end: 2339, name: 'out' },
    value: 
     Node {
       type: 'Literal',
       start: 2341,
       end: 2351,
       value: '0abc1000',
       raw: '"0abc1000"' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 2301,
  end: 2334,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 2301, end: 2303, name: 'in' },
  value: 
   Node {
     type: 'ObjectExpression',
     start: 2305,
     end: 2334,
     properties: [ [Node], [Node], [Node] ] },
  kind: 'init' }
Property
2301
2334
false
false
false
Node { type: 'Identifier', start: 2301, end: 2303, name: 'in' }
Identifier
2301
2303
in
Node {
  type: 'ObjectExpression',
  start: 2305,
  end: 2334,
  properties: 
   [ Node {
       type: 'Property',
       start: 2307,
       end: 2314,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 2316,
       end: 2323,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 2325,
       end: 2332,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
2305
2334
[ Node {
    type: 'Property',
    start: 2307,
    end: 2314,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Literal', start: 2307, end: 2310, value: '0', raw: '"0"' },
    value: Node { type: 'Literal', start: 2311, end: 2314, value: 'a', raw: '"a"' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 2316,
    end: 2323,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Literal', start: 2316, end: 2319, value: '1', raw: '"1"' },
    value: Node { type: 'Literal', start: 2320, end: 2323, value: 'b', raw: '"b"' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 2325,
    end: 2332,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Literal', start: 2325, end: 2328, value: '2', raw: '"2"' },
    value: Node { type: 'Literal', start: 2329, end: 2332, value: 'c', raw: '"c"' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 2307,
  end: 2314,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Literal', start: 2307, end: 2310, value: '0', raw: '"0"' },
  value: Node { type: 'Literal', start: 2311, end: 2314, value: 'a', raw: '"a"' },
  kind: 'init' }
Property
2307
2314
false
false
false
Node { type: 'Literal', start: 2307, end: 2310, value: '0', raw: '"0"' }
Literal
2307
2310
0
"0"
Node { type: 'Literal', start: 2311, end: 2314, value: 'a', raw: '"a"' }
Literal
2311
2314
a
"a"
init
Node {
  type: 'Property',
  start: 2316,
  end: 2323,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Literal', start: 2316, end: 2319, value: '1', raw: '"1"' },
  value: Node { type: 'Literal', start: 2320, end: 2323, value: 'b', raw: '"b"' },
  kind: 'init' }
Property
2316
2323
false
false
false
Node { type: 'Literal', start: 2316, end: 2319, value: '1', raw: '"1"' }
Literal
2316
2319
1
"1"
Node { type: 'Literal', start: 2320, end: 2323, value: 'b', raw: '"b"' }
Literal
2320
2323
b
"b"
init
Node {
  type: 'Property',
  start: 2325,
  end: 2332,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Literal', start: 2325, end: 2328, value: '2', raw: '"2"' },
  value: Node { type: 'Literal', start: 2329, end: 2332, value: 'c', raw: '"c"' },
  kind: 'init' }
Property
2325
2332
false
false
false
Node { type: 'Literal', start: 2325, end: 2328, value: '2', raw: '"2"' }
Literal
2325
2328
2
"2"
Node { type: 'Literal', start: 2329, end: 2332, value: 'c', raw: '"c"' }
Literal
2329
2332
c
"c"
init
init
Node {
  type: 'Property',
  start: 2336,
  end: 2351,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 2336, end: 2339, name: 'out' },
  value: 
   Node {
     type: 'Literal',
     start: 2341,
     end: 2351,
     value: '0abc1000',
     raw: '"0abc1000"' },
  kind: 'init' }
Property
2336
2351
false
false
false
Node { type: 'Identifier', start: 2336, end: 2339, name: 'out' }
Identifier
2336
2339
out
Node {
  type: 'Literal',
  start: 2341,
  end: 2351,
  value: '0abc1000',
  raw: '"0abc1000"' }
Literal
2341
2351
0abc1000
"0abc1000"
init
init
Node {
  type: 'Property',
  start: 2398,
  end: 2485,
  method: false,
  shorthand: false,
  computed: false,
  key: 
   Node {
     type: 'Literal',
     start: 2398,
     end: 2431,
     value: 'NonArrayWithSlowPutArrayStorage',
     raw: '"NonArrayWithSlowPutArrayStorage"' },
  value: 
   Node {
     type: 'ObjectExpression',
     start: 2433,
     end: 2485,
     properties: [ [Node], [Node] ] },
  kind: 'init' }
Property
2398
2485
false
false
false
Node {
  type: 'Literal',
  start: 2398,
  end: 2431,
  value: 'NonArrayWithSlowPutArrayStorage',
  raw: '"NonArrayWithSlowPutArrayStorage"' }
Literal
2398
2431
NonArrayWithSlowPutArrayStorage
"NonArrayWithSlowPutArrayStorage"
Node {
  type: 'ObjectExpression',
  start: 2433,
  end: 2485,
  properties: 
   [ Node {
       type: 'Property',
       start: 2435,
       end: 2468,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 2470,
       end: 2483,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
2433
2485
[ Node {
    type: 'Property',
    start: 2435,
    end: 2468,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 2435, end: 2437, name: 'in' },
    value: 
     Node {
       type: 'ObjectExpression',
       start: 2439,
       end: 2468,
       properties: [Array] },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 2470,
    end: 2483,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 2470, end: 2473, name: 'out' },
    value: 
     Node {
       type: 'Literal',
       start: 2475,
       end: 2483,
       value: '0abc10',
       raw: '"0abc10"' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 2435,
  end: 2468,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 2435, end: 2437, name: 'in' },
  value: 
   Node {
     type: 'ObjectExpression',
     start: 2439,
     end: 2468,
     properties: [ [Node], [Node], [Node] ] },
  kind: 'init' }
Property
2435
2468
false
false
false
Node { type: 'Identifier', start: 2435, end: 2437, name: 'in' }
Identifier
2435
2437
in
Node {
  type: 'ObjectExpression',
  start: 2439,
  end: 2468,
  properties: 
   [ Node {
       type: 'Property',
       start: 2441,
       end: 2448,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 2450,
       end: 2457,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 2459,
       end: 2466,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
2439
2468
[ Node {
    type: 'Property',
    start: 2441,
    end: 2448,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Literal', start: 2441, end: 2444, value: '0', raw: '"0"' },
    value: Node { type: 'Literal', start: 2445, end: 2448, value: 'a', raw: '"a"' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 2450,
    end: 2457,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Literal', start: 2450, end: 2453, value: '1', raw: '"1"' },
    value: Node { type: 'Literal', start: 2454, end: 2457, value: 'b', raw: '"b"' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 2459,
    end: 2466,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Literal', start: 2459, end: 2462, value: '2', raw: '"2"' },
    value: Node { type: 'Literal', start: 2463, end: 2466, value: 'c', raw: '"c"' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 2441,
  end: 2448,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Literal', start: 2441, end: 2444, value: '0', raw: '"0"' },
  value: Node { type: 'Literal', start: 2445, end: 2448, value: 'a', raw: '"a"' },
  kind: 'init' }
Property
2441
2448
false
false
false
Node { type: 'Literal', start: 2441, end: 2444, value: '0', raw: '"0"' }
Literal
2441
2444
0
"0"
Node { type: 'Literal', start: 2445, end: 2448, value: 'a', raw: '"a"' }
Literal
2445
2448
a
"a"
init
Node {
  type: 'Property',
  start: 2450,
  end: 2457,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Literal', start: 2450, end: 2453, value: '1', raw: '"1"' },
  value: Node { type: 'Literal', start: 2454, end: 2457, value: 'b', raw: '"b"' },
  kind: 'init' }
Property
2450
2457
false
false
false
Node { type: 'Literal', start: 2450, end: 2453, value: '1', raw: '"1"' }
Literal
2450
2453
1
"1"
Node { type: 'Literal', start: 2454, end: 2457, value: 'b', raw: '"b"' }
Literal
2454
2457
b
"b"
init
Node {
  type: 'Property',
  start: 2459,
  end: 2466,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Literal', start: 2459, end: 2462, value: '2', raw: '"2"' },
  value: Node { type: 'Literal', start: 2463, end: 2466, value: 'c', raw: '"c"' },
  kind: 'init' }
Property
2459
2466
false
false
false
Node { type: 'Literal', start: 2459, end: 2462, value: '2', raw: '"2"' }
Literal
2459
2462
2
"2"
Node { type: 'Literal', start: 2463, end: 2466, value: 'c', raw: '"c"' }
Literal
2463
2466
c
"c"
init
init
Node {
  type: 'Property',
  start: 2470,
  end: 2483,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 2470, end: 2473, name: 'out' },
  value: 
   Node {
     type: 'Literal',
     start: 2475,
     end: 2483,
     value: '0abc10',
     raw: '"0abc10"' },
  kind: 'init' }
Property
2470
2483
false
false
false
Node { type: 'Identifier', start: 2470, end: 2473, name: 'out' }
Identifier
2470
2473
out
Node {
  type: 'Literal',
  start: 2475,
  end: 2483,
  value: '0abc10',
  raw: '"0abc10"' }
Literal
2475
2483
0abc10
"0abc10"
init
init
var
Node {
  type: 'VariableDeclaration',
  start: 2531,
  end: 2549,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 2535,
       end: 2548,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
2531
2549
[ Node {
    type: 'VariableDeclarator',
    start: 2535,
    end: 2548,
    id: Node { type: 'Identifier', start: 2535, end: 2536, name: 'o' },
    init: 
     Node {
       type: 'ObjectExpression',
       start: 2539,
       end: 2548,
       properties: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 2535,
  end: 2548,
  id: Node { type: 'Identifier', start: 2535, end: 2536, name: 'o' },
  init: 
   Node {
     type: 'ObjectExpression',
     start: 2539,
     end: 2548,
     properties: [ [Node] ] } }
VariableDeclarator
2535
2548
Node { type: 'Identifier', start: 2535, end: 2536, name: 'o' }
Identifier
2535
2536
o
Node {
  type: 'ObjectExpression',
  start: 2539,
  end: 2548,
  properties: 
   [ Node {
       type: 'Property',
       start: 2541,
       end: 2546,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
2539
2548
[ Node {
    type: 'Property',
    start: 2541,
    end: 2546,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 2541, end: 2542, name: 'a' },
    value: Node { type: 'Literal', start: 2544, end: 2546, value: 10, raw: '10' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 2541,
  end: 2546,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 2541, end: 2542, name: 'a' },
  value: Node { type: 'Literal', start: 2544, end: 2546, value: 10, raw: '10' },
  kind: 'init' }
Property
2541
2546
false
false
false
Node { type: 'Identifier', start: 2541, end: 2542, name: 'a' }
Identifier
2541
2542
a
Node { type: 'Literal', start: 2544, end: 2546, value: 10, raw: '10' }
Literal
2544
2546
10
10
init
var
Node {
  type: 'ExpressionStatement',
  start: 2550,
  end: 2686,
  expression: 
   Node {
     type: 'CallExpression',
     start: 2550,
     end: 2685,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 2550,
        end: 2573,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [ [Node], [Node] ] } }
ExpressionStatement
2550
2686
Node {
  type: 'CallExpression',
  start: 2550,
  end: 2685,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 2550,
     end: 2573,
     object: Node { type: 'Identifier', start: 2550, end: 2556, name: 'Object' },
     property: 
      Node {
        type: 'Identifier',
        start: 2557,
        end: 2573,
        name: 'defineProperties' },
     computed: false },
  arguments: 
   [ Node { type: 'Identifier', start: 2574, end: 2575, name: 'o' },
     Node {
       type: 'ObjectExpression',
       start: 2577,
       end: 2684,
       properties: [Array] } ] }
CallExpression
2550
2685
Node {
  type: 'MemberExpression',
  start: 2550,
  end: 2573,
  object: Node { type: 'Identifier', start: 2550, end: 2556, name: 'Object' },
  property: 
   Node {
     type: 'Identifier',
     start: 2557,
     end: 2573,
     name: 'defineProperties' },
  computed: false }
MemberExpression
2550
2573
Node { type: 'Identifier', start: 2550, end: 2556, name: 'Object' }
Identifier
2550
2556
Object
Node {
  type: 'Identifier',
  start: 2557,
  end: 2573,
  name: 'defineProperties' }
Identifier
2557
2573
defineProperties
false
[ Node { type: 'Identifier', start: 2574, end: 2575, name: 'o' },
  Node {
    type: 'ObjectExpression',
    start: 2577,
    end: 2684,
    properties: [ [Node] ] } ]
Node { type: 'Identifier', start: 2574, end: 2575, name: 'o' }
Identifier
2574
2575
o
Node {
  type: 'ObjectExpression',
  start: 2577,
  end: 2684,
  properties: 
   [ Node {
       type: 'Property',
       start: 2583,
       end: 2681,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
2577
2684
[ Node {
    type: 'Property',
    start: 2583,
    end: 2681,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Literal', start: 2583, end: 2586, value: '0', raw: '"0"' },
    value: 
     Node {
       type: 'ObjectExpression',
       start: 2588,
       end: 2681,
       properties: [Array] },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 2583,
  end: 2681,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Literal', start: 2583, end: 2586, value: '0', raw: '"0"' },
  value: 
   Node {
     type: 'ObjectExpression',
     start: 2588,
     end: 2681,
     properties: [ [Node], [Node] ] },
  kind: 'init' }
Property
2583
2681
false
false
false
Node { type: 'Literal', start: 2583, end: 2586, value: '0', raw: '"0"' }
Literal
2583
2586
0
"0"
Node {
  type: 'ObjectExpression',
  start: 2588,
  end: 2681,
  properties: 
   [ Node {
       type: 'Property',
       start: 2598,
       end: 2632,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 2642,
       end: 2674,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
2588
2681
[ Node {
    type: 'Property',
    start: 2598,
    end: 2632,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 2598, end: 2601, name: 'get' },
    value: 
     Node {
       type: 'FunctionExpression',
       start: 2603,
       end: 2632,
       id: null,
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 2642,
    end: 2674,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 2642, end: 2645, name: 'set' },
    value: 
     Node {
       type: 'FunctionExpression',
       start: 2647,
       end: 2674,
       id: null,
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 2598,
  end: 2632,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 2598, end: 2601, name: 'get' },
  value: 
   Node {
     type: 'FunctionExpression',
     start: 2603,
     end: 2632,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [],
     body: Node { type: 'BlockStatement', start: 2614, end: 2632, body: [Array] } },
  kind: 'init' }
Property
2598
2632
false
false
false
Node { type: 'Identifier', start: 2598, end: 2601, name: 'get' }
Identifier
2598
2601
get
Node {
  type: 'FunctionExpression',
  start: 2603,
  end: 2632,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: 
   Node {
     type: 'BlockStatement',
     start: 2614,
     end: 2632,
     body: [ [Node] ] } }
FunctionExpression
2603
2632
null
[+] Exception: for-in-array-mode.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 356,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 191,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 193,
       end: 207,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 209,
       end: 355,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
356
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 191,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 17, end: 191, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 193,
    end: 207,
    expression: 
     Node {
       type: 'CallExpression',
       start: 193,
       end: 206,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 209,
    end: 355,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 214,
       end: 223,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 225,
       end: 234,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 236,
       end: 239,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 241, end: 355, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 191,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 13, end: 15, name: 'o_' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 17,
     end: 191,
     body: [ [Node], [Node], [Node], [Node] ] } }
FunctionDeclaration
0
191
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 15, name: 'o_' } ]
Node { type: 'Identifier', start: 13, end: 15, name: 'o_' }
Identifier
13
15
o_
Node {
  type: 'BlockStatement',
  start: 17,
  end: 191,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 23,
       end: 34,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 39,
       end: 54,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ForInStatement',
       start: 59,
       end: 170,
       left: [Node],
       right: [Node],
       body: [Node] },
     Node {
       type: 'ReturnStatement',
       start: 175,
       end: 189,
       argument: [Node] } ] }
BlockStatement
17
191
[ Node {
    type: 'VariableDeclaration',
    start: 23,
    end: 34,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 39,
    end: 54,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ForInStatement',
    start: 59,
    end: 170,
    left: 
     Node {
       type: 'VariableDeclaration',
       start: 64,
       end: 69,
       declarations: [Array],
       kind: 'var' },
    right: Node { type: 'Identifier', start: 73, end: 74, name: 'o' },
    body: Node { type: 'BlockStatement', start: 76, end: 170, body: [Array] } },
  Node {
    type: 'ReturnStatement',
    start: 175,
    end: 189,
    argument: Node { type: 'Identifier', start: 182, end: 188, name: 'result' } } ]
Node {
  type: 'VariableDeclaration',
  start: 23,
  end: 34,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 27,
       end: 33,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
23
34
[ Node {
    type: 'VariableDeclarator',
    start: 27,
    end: 33,
    id: Node { type: 'Identifier', start: 27, end: 28, name: 'o' },
    init: Node { type: 'Identifier', start: 31, end: 33, name: 'o_' } } ]
Node {
  type: 'VariableDeclarator',
  start: 27,
  end: 33,
  id: Node { type: 'Identifier', start: 27, end: 28, name: 'o' },
  init: Node { type: 'Identifier', start: 31, end: 33, name: 'o_' } }
VariableDeclarator
27
33
Node { type: 'Identifier', start: 27, end: 28, name: 'o' }
Identifier
27
28
o
Node { type: 'Identifier', start: 31, end: 33, name: 'o_' }
Identifier
31
33
o_
var
Node {
  type: 'VariableDeclaration',
  start: 39,
  end: 54,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 43,
       end: 53,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
39
54
[ Node {
    type: 'VariableDeclarator',
    start: 43,
    end: 53,
    id: Node { type: 'Identifier', start: 43, end: 49, name: 'result' },
    init: Node { type: 'Literal', start: 52, end: 53, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 43,
  end: 53,
  id: Node { type: 'Identifier', start: 43, end: 49, name: 'result' },
  init: Node { type: 'Literal', start: 52, end: 53, value: 0, raw: '0' } }
VariableDeclarator
43
53
Node { type: 'Identifier', start: 43, end: 49, name: 'result' }
Identifier
43
49
result
Node { type: 'Literal', start: 52, end: 53, value: 0, raw: '0' }
Literal
52
53
0
0
var
Node {
  type: 'ForInStatement',
  start: 59,
  end: 170,
  left: 
   Node {
     type: 'VariableDeclaration',
     start: 64,
     end: 69,
     declarations: [ [Node] ],
     kind: 'var' },
  right: Node { type: 'Identifier', start: 73, end: 74, name: 'o' },
  body: 
   Node {
     type: 'BlockStatement',
     start: 76,
     end: 170,
     body: [ [Node], [Node] ] } }
ForInStatement
59
170
Node {
  type: 'VariableDeclaration',
  start: 64,
  end: 69,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 68,
       end: 69,
       id: [Node],
       init: null } ],
  kind: 'var' }
VariableDeclaration
64
69
[ Node {
    type: 'VariableDeclarator',
    start: 68,
    end: 69,
    id: Node { type: 'Identifier', start: 68, end: 69, name: 's' },
    init: null } ]
Node {
  type: 'VariableDeclarator',
  start: 68,
  end: 69,
  id: Node { type: 'Identifier', start: 68, end: 69, name: 's' },
  init: null }
VariableDeclarator
68
69
Node { type: 'Identifier', start: 68, end: 69, name: 's' }
Identifier
68
69
s
null
[+] Exception: for-in-base-reassigned-later-and-change-structure.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 356,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 191,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 193,
       end: 207,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 209,
       end: 355,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
356
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 191,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 17, end: 191, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 193,
    end: 207,
    expression: 
     Node {
       type: 'CallExpression',
       start: 193,
       end: 206,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 209,
    end: 355,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 214,
       end: 223,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 225,
       end: 234,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 236,
       end: 239,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 241, end: 355, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 191,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 13, end: 15, name: 'o_' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 17,
     end: 191,
     body: [ [Node], [Node], [Node], [Node] ] } }
FunctionDeclaration
0
191
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 15, name: 'o_' } ]
Node { type: 'Identifier', start: 13, end: 15, name: 'o_' }
Identifier
13
15
o_
Node {
  type: 'BlockStatement',
  start: 17,
  end: 191,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 23,
       end: 34,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 39,
       end: 54,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ForInStatement',
       start: 59,
       end: 170,
       left: [Node],
       right: [Node],
       body: [Node] },
     Node {
       type: 'ReturnStatement',
       start: 175,
       end: 189,
       argument: [Node] } ] }
BlockStatement
17
191
[ Node {
    type: 'VariableDeclaration',
    start: 23,
    end: 34,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 39,
    end: 54,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ForInStatement',
    start: 59,
    end: 170,
    left: 
     Node {
       type: 'VariableDeclaration',
       start: 64,
       end: 69,
       declarations: [Array],
       kind: 'var' },
    right: Node { type: 'Identifier', start: 73, end: 74, name: 'o' },
    body: Node { type: 'BlockStatement', start: 76, end: 170, body: [Array] } },
  Node {
    type: 'ReturnStatement',
    start: 175,
    end: 189,
    argument: Node { type: 'Identifier', start: 182, end: 188, name: 'result' } } ]
Node {
  type: 'VariableDeclaration',
  start: 23,
  end: 34,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 27,
       end: 33,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
23
34
[ Node {
    type: 'VariableDeclarator',
    start: 27,
    end: 33,
    id: Node { type: 'Identifier', start: 27, end: 28, name: 'o' },
    init: Node { type: 'Identifier', start: 31, end: 33, name: 'o_' } } ]
Node {
  type: 'VariableDeclarator',
  start: 27,
  end: 33,
  id: Node { type: 'Identifier', start: 27, end: 28, name: 'o' },
  init: Node { type: 'Identifier', start: 31, end: 33, name: 'o_' } }
VariableDeclarator
27
33
Node { type: 'Identifier', start: 27, end: 28, name: 'o' }
Identifier
27
28
o
Node { type: 'Identifier', start: 31, end: 33, name: 'o_' }
Identifier
31
33
o_
var
Node {
  type: 'VariableDeclaration',
  start: 39,
  end: 54,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 43,
       end: 53,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
39
54
[ Node {
    type: 'VariableDeclarator',
    start: 43,
    end: 53,
    id: Node { type: 'Identifier', start: 43, end: 49, name: 'result' },
    init: Node { type: 'Literal', start: 52, end: 53, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 43,
  end: 53,
  id: Node { type: 'Identifier', start: 43, end: 49, name: 'result' },
  init: Node { type: 'Literal', start: 52, end: 53, value: 0, raw: '0' } }
VariableDeclarator
43
53
Node { type: 'Identifier', start: 43, end: 49, name: 'result' }
Identifier
43
49
result
Node { type: 'Literal', start: 52, end: 53, value: 0, raw: '0' }
Literal
52
53
0
0
var
Node {
  type: 'ForInStatement',
  start: 59,
  end: 170,
  left: 
   Node {
     type: 'VariableDeclaration',
     start: 64,
     end: 69,
     declarations: [ [Node] ],
     kind: 'var' },
  right: Node { type: 'Identifier', start: 73, end: 74, name: 'o' },
  body: 
   Node {
     type: 'BlockStatement',
     start: 76,
     end: 170,
     body: [ [Node], [Node] ] } }
ForInStatement
59
170
Node {
  type: 'VariableDeclaration',
  start: 64,
  end: 69,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 68,
       end: 69,
       id: [Node],
       init: null } ],
  kind: 'var' }
VariableDeclaration
64
69
[ Node {
    type: 'VariableDeclarator',
    start: 68,
    end: 69,
    id: Node { type: 'Identifier', start: 68, end: 69, name: 's' },
    init: null } ]
Node {
  type: 'VariableDeclarator',
  start: 68,
  end: 69,
  id: Node { type: 'Identifier', start: 68, end: 69, name: 's' },
  init: null }
VariableDeclarator
68
69
Node { type: 'Identifier', start: 68, end: 69, name: 's' }
Identifier
68
69
s
null
[+] Exception: for-in-base-reassigned-later.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 327,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 162,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 164,
       end: 178,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 180,
       end: 326,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
327
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 162,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 17, end: 162, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 164,
    end: 178,
    expression: 
     Node {
       type: 'CallExpression',
       start: 164,
       end: 177,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 180,
    end: 326,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 185,
       end: 194,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 196,
       end: 205,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 207,
       end: 210,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 212, end: 326, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 162,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 13, end: 15, name: 'o_' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 17,
     end: 162,
     body: [ [Node], [Node], [Node], [Node] ] } }
FunctionDeclaration
0
162
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 15, name: 'o_' } ]
Node { type: 'Identifier', start: 13, end: 15, name: 'o_' }
Identifier
13
15
o_
Node {
  type: 'BlockStatement',
  start: 17,
  end: 162,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 23,
       end: 34,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 39,
       end: 54,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ForInStatement',
       start: 59,
       end: 141,
       left: [Node],
       right: [Node],
       body: [Node] },
     Node {
       type: 'ReturnStatement',
       start: 146,
       end: 160,
       argument: [Node] } ] }
BlockStatement
17
162
[ Node {
    type: 'VariableDeclaration',
    start: 23,
    end: 34,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 39,
    end: 54,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ForInStatement',
    start: 59,
    end: 141,
    left: 
     Node {
       type: 'VariableDeclaration',
       start: 64,
       end: 69,
       declarations: [Array],
       kind: 'var' },
    right: Node { type: 'Identifier', start: 73, end: 74, name: 'o' },
    body: Node { type: 'BlockStatement', start: 76, end: 141, body: [Array] } },
  Node {
    type: 'ReturnStatement',
    start: 146,
    end: 160,
    argument: Node { type: 'Identifier', start: 153, end: 159, name: 'result' } } ]
Node {
  type: 'VariableDeclaration',
  start: 23,
  end: 34,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 27,
       end: 33,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
23
34
[ Node {
    type: 'VariableDeclarator',
    start: 27,
    end: 33,
    id: Node { type: 'Identifier', start: 27, end: 28, name: 'o' },
    init: Node { type: 'Identifier', start: 31, end: 33, name: 'o_' } } ]
Node {
  type: 'VariableDeclarator',
  start: 27,
  end: 33,
  id: Node { type: 'Identifier', start: 27, end: 28, name: 'o' },
  init: Node { type: 'Identifier', start: 31, end: 33, name: 'o_' } }
VariableDeclarator
27
33
Node { type: 'Identifier', start: 27, end: 28, name: 'o' }
Identifier
27
28
o
Node { type: 'Identifier', start: 31, end: 33, name: 'o_' }
Identifier
31
33
o_
var
Node {
  type: 'VariableDeclaration',
  start: 39,
  end: 54,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 43,
       end: 53,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
39
54
[ Node {
    type: 'VariableDeclarator',
    start: 43,
    end: 53,
    id: Node { type: 'Identifier', start: 43, end: 49, name: 'result' },
    init: Node { type: 'Literal', start: 52, end: 53, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 43,
  end: 53,
  id: Node { type: 'Identifier', start: 43, end: 49, name: 'result' },
  init: Node { type: 'Literal', start: 52, end: 53, value: 0, raw: '0' } }
VariableDeclarator
43
53
Node { type: 'Identifier', start: 43, end: 49, name: 'result' }
Identifier
43
49
result
Node { type: 'Literal', start: 52, end: 53, value: 0, raw: '0' }
Literal
52
53
0
0
var
Node {
  type: 'ForInStatement',
  start: 59,
  end: 141,
  left: 
   Node {
     type: 'VariableDeclaration',
     start: 64,
     end: 69,
     declarations: [ [Node] ],
     kind: 'var' },
  right: Node { type: 'Identifier', start: 73, end: 74, name: 'o' },
  body: 
   Node {
     type: 'BlockStatement',
     start: 76,
     end: 141,
     body: [ [Node], [Node] ] } }
ForInStatement
59
141
Node {
  type: 'VariableDeclaration',
  start: 64,
  end: 69,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 68,
       end: 69,
       id: [Node],
       init: null } ],
  kind: 'var' }
VariableDeclaration
64
69
[ Node {
    type: 'VariableDeclarator',
    start: 68,
    end: 69,
    id: Node { type: 'Identifier', start: 68, end: 69, name: 's' },
    init: null } ]
Node {
  type: 'VariableDeclarator',
  start: 68,
  end: 69,
  id: Node { type: 'Identifier', start: 68, end: 69, name: 's' },
  init: null }
VariableDeclarator
68
69
Node { type: 'Identifier', start: 68, end: 69, name: 's' }
Identifier
68
69
s
null
[+] Exception: for-in-base-reassigned.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 523,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 0,
       end: 522,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
523
[ Node {
    type: 'ExpressionStatement',
    start: 0,
    end: 522,
    expression: 
     Node {
       type: 'CallExpression',
       start: 0,
       end: 521,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'ExpressionStatement',
  start: 0,
  end: 522,
  expression: 
   Node {
     type: 'CallExpression',
     start: 0,
     end: 521,
     callee: 
      Node {
        type: 'FunctionExpression',
        start: 1,
        end: 518,
        id: null,
        generator: false,
        expression: false,
        async: false,
        params: [],
        body: [Node] },
     arguments: [] } }
ExpressionStatement
0
522
Node {
  type: 'CallExpression',
  start: 0,
  end: 521,
  callee: 
   Node {
     type: 'FunctionExpression',
     start: 1,
     end: 518,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [],
     body: Node { type: 'BlockStatement', start: 12, end: 518, body: [Array] } },
  arguments: [] }
CallExpression
0
521
Node {
  type: 'FunctionExpression',
  start: 1,
  end: 518,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: 
   Node {
     type: 'BlockStatement',
     start: 12,
     end: 518,
     body: [ [Node], [Node], [Node], [Node] ] } }
FunctionExpression
1
518
null
[+] Exception: for-in-capture-string-loop-var.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1689,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 0,
       end: 472,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 473,
       end: 1020,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1021,
       end: 1688,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
1689
[ Node {
    type: 'ExpressionStatement',
    start: 0,
    end: 472,
    expression: 
     Node {
       type: 'CallExpression',
       start: 0,
       end: 471,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 473,
    end: 1020,
    expression: 
     Node {
       type: 'CallExpression',
       start: 473,
       end: 1019,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 1021,
    end: 1688,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1021,
       end: 1687,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'ExpressionStatement',
  start: 0,
  end: 472,
  expression: 
   Node {
     type: 'CallExpression',
     start: 0,
     end: 471,
     callee: 
      Node {
        type: 'FunctionExpression',
        start: 1,
        end: 468,
        id: null,
        generator: false,
        expression: false,
        async: false,
        params: [],
        body: [Node] },
     arguments: [] } }
ExpressionStatement
0
472
Node {
  type: 'CallExpression',
  start: 0,
  end: 471,
  callee: 
   Node {
     type: 'FunctionExpression',
     start: 1,
     end: 468,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [],
     body: Node { type: 'BlockStatement', start: 12, end: 468, body: [Array] } },
  arguments: [] }
CallExpression
0
471
Node {
  type: 'FunctionExpression',
  start: 1,
  end: 468,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: 
   Node {
     type: 'BlockStatement',
     start: 12,
     end: 468,
     body: [ [Node], [Node], [Node], [Node] ] } }
FunctionExpression
1
468
null
[+] Exception: for-in-delete-during-iteration.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1560,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 66,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 68,
       end: 153,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 155,
       end: 334,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 336,
       end: 513,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 515,
       end: 695,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 697,
       end: 868,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 870,
       end: 1038,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1040,
       end: 1220,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1222,
       end: 1392,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1394,
       end: 1559,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
1560
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 66,
    id: Node { type: 'Identifier', start: 9, end: 15, name: 'assert' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 66, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 68,
    end: 153,
    id: Node { type: 'Identifier', start: 77, end: 81, name: 'test' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 85, end: 153, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 155,
    end: 334,
    expression: 
     Node {
       type: 'CallExpression',
       start: 155,
       end: 333,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 336,
    end: 513,
    expression: 
     Node {
       type: 'CallExpression',
       start: 336,
       end: 512,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 515,
    end: 695,
    expression: 
     Node {
       type: 'CallExpression',
       start: 515,
       end: 694,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 697,
    end: 868,
    expression: 
     Node {
       type: 'CallExpression',
       start: 697,
       end: 867,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 870,
    end: 1038,
    expression: 
     Node {
       type: 'CallExpression',
       start: 870,
       end: 1037,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1040,
    end: 1220,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1040,
       end: 1219,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1222,
    end: 1392,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1222,
       end: 1391,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1394,
    end: 1559,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1394,
       end: 1558,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 66,
  id: Node { type: 'Identifier', start: 9, end: 15, name: 'assert' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ],
  body: Node { type: 'BlockStatement', start: 19, end: 66, body: [ [Node] ] } }
FunctionDeclaration
0
66
Node { type: 'Identifier', start: 9, end: 15, name: 'assert' }
Identifier
9
15
assert
false
false
false
[ Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ]
Node { type: 'Identifier', start: 16, end: 17, name: 'b' }
Identifier
16
17
b
Node {
  type: 'BlockStatement',
  start: 19,
  end: 66,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 25,
       end: 64,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
19
66
[ Node {
    type: 'IfStatement',
    start: 25,
    end: 64,
    test: 
     Node {
       type: 'UnaryExpression',
       start: 29,
       end: 31,
       operator: '!',
       prefix: true,
       argument: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 41, end: 64, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 25,
  end: 64,
  test: 
   Node {
     type: 'UnaryExpression',
     start: 29,
     end: 31,
     operator: '!',
     prefix: true,
     argument: Node { type: 'Identifier', start: 30, end: 31, name: 'b' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 41,
     end: 64,
     argument: 
      Node {
        type: 'NewExpression',
        start: 47,
        end: 63,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
25
64
Node {
  type: 'UnaryExpression',
  start: 29,
  end: 31,
  operator: '!',
  prefix: true,
  argument: Node { type: 'Identifier', start: 30, end: 31, name: 'b' } }
UnaryExpression
29
31
!
true
Node { type: 'Identifier', start: 30, end: 31, name: 'b' }
Identifier
30
31
b
Node {
  type: 'ThrowStatement',
  start: 41,
  end: 64,
  argument: 
   Node {
     type: 'NewExpression',
     start: 47,
     end: 63,
     callee: Node { type: 'Identifier', start: 51, end: 56, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
41
64
Node {
  type: 'NewExpression',
  start: 47,
  end: 63,
  callee: Node { type: 'Identifier', start: 51, end: 56, name: 'Error' },
  arguments: 
   [ Node { type: 'Literal', start: 57, end: 62, value: 'Bad', raw: '"Bad"' } ] }
NewExpression
47
63
Node { type: 'Identifier', start: 51, end: 56, name: 'Error' }
Identifier
51
56
Error
[ Node { type: 'Literal', start: 57, end: 62, value: 'Bad', raw: '"Bad"' } ]
Node { type: 'Literal', start: 57, end: 62, value: 'Bad', raw: '"Bad"' }
Literal
57
62
Bad
"Bad"
null
[+] Exception: for-in-invalidate-context-weird-assignments.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 3265,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 76,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 77,
       end: 94,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 96,
       end: 181,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 183,
       end: 422,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 424,
       end: 695,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 697,
       end: 974,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 976,
       end: 1263,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1265,
       end: 1922,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1924,
       end: 2588,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 2590,
       end: 3264,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
3265
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 76,
    id: Node { type: 'Identifier', start: 9, end: 15, name: 'assert' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 76, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 77,
    end: 94,
    expression: 
     Node {
       type: 'CallExpression',
       start: 77,
       end: 93,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 96,
    end: 181,
    id: Node { type: 'Identifier', start: 105, end: 109, name: 'test' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 113, end: 181, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 183,
    end: 422,
    expression: 
     Node {
       type: 'CallExpression',
       start: 183,
       end: 421,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 424,
    end: 695,
    expression: 
     Node {
       type: 'CallExpression',
       start: 424,
       end: 694,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 697,
    end: 974,
    expression: 
     Node {
       type: 'CallExpression',
       start: 697,
       end: 973,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 976,
    end: 1263,
    expression: 
     Node {
       type: 'CallExpression',
       start: 976,
       end: 1262,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1265,
    end: 1922,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1265,
       end: 1921,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1924,
    end: 2588,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1924,
       end: 2587,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 2590,
    end: 3264,
    expression: 
     Node {
       type: 'CallExpression',
       start: 2590,
       end: 3263,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 76,
  id: Node { type: 'Identifier', start: 9, end: 15, name: 'assert' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ],
  body: Node { type: 'BlockStatement', start: 19, end: 76, body: [ [Node] ] } }
FunctionDeclaration
0
76
Node { type: 'Identifier', start: 9, end: 15, name: 'assert' }
Identifier
9
15
assert
false
false
false
[ Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ]
Node { type: 'Identifier', start: 16, end: 17, name: 'b' }
Identifier
16
17
b
Node {
  type: 'BlockStatement',
  start: 19,
  end: 76,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 25,
       end: 74,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
19
76
[ Node {
    type: 'IfStatement',
    start: 25,
    end: 74,
    test: 
     Node {
       type: 'UnaryExpression',
       start: 29,
       end: 31,
       operator: '!',
       prefix: true,
       argument: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 41, end: 74, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 25,
  end: 74,
  test: 
   Node {
     type: 'UnaryExpression',
     start: 29,
     end: 31,
     operator: '!',
     prefix: true,
     argument: Node { type: 'Identifier', start: 30, end: 31, name: 'b' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 41,
     end: 74,
     argument: 
      Node {
        type: 'NewExpression',
        start: 47,
        end: 73,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
25
74
Node {
  type: 'UnaryExpression',
  start: 29,
  end: 31,
  operator: '!',
  prefix: true,
  argument: Node { type: 'Identifier', start: 30, end: 31, name: 'b' } }
UnaryExpression
29
31
!
true
Node { type: 'Identifier', start: 30, end: 31, name: 'b' }
Identifier
30
31
b
Node {
  type: 'ThrowStatement',
  start: 41,
  end: 74,
  argument: 
   Node {
     type: 'NewExpression',
     start: 47,
     end: 73,
     callee: Node { type: 'Identifier', start: 51, end: 56, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
41
74
Node {
  type: 'NewExpression',
  start: 47,
  end: 73,
  callee: Node { type: 'Identifier', start: 51, end: 56, name: 'Error' },
  arguments: 
   [ Node {
       type: 'Literal',
       start: 57,
       end: 72,
       value: 'Bad assertion',
       raw: '"Bad assertion"' } ] }
NewExpression
47
73
Node { type: 'Identifier', start: 51, end: 56, name: 'Error' }
Identifier
51
56
Error
[ Node {
    type: 'Literal',
    start: 57,
    end: 72,
    value: 'Bad assertion',
    raw: '"Bad assertion"' } ]
Node {
  type: 'Literal',
  start: 57,
  end: 72,
  value: 'Bad assertion',
  raw: '"Bad assertion"' }
Literal
57
72
Bad assertion
"Bad assertion"
null
[+] Exception: for-in-invalidation-for-any-write.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 553,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 0,
       end: 552,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
553
[ Node {
    type: 'ExpressionStatement',
    start: 0,
    end: 552,
    expression: 
     Node {
       type: 'CallExpression',
       start: 0,
       end: 551,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'ExpressionStatement',
  start: 0,
  end: 552,
  expression: 
   Node {
     type: 'CallExpression',
     start: 0,
     end: 551,
     callee: 
      Node {
        type: 'FunctionExpression',
        start: 1,
        end: 548,
        id: null,
        generator: false,
        expression: false,
        async: false,
        params: [],
        body: [Node] },
     arguments: [] } }
ExpressionStatement
0
552
Node {
  type: 'CallExpression',
  start: 0,
  end: 551,
  callee: 
   Node {
     type: 'FunctionExpression',
     start: 1,
     end: 548,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [],
     body: Node { type: 'BlockStatement', start: 12, end: 548, body: [Array] } },
  arguments: [] }
CallExpression
0
551
Node {
  type: 'FunctionExpression',
  start: 1,
  end: 548,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: 
   Node {
     type: 'BlockStatement',
     start: 12,
     end: 548,
     body: [ [Node], [Node], [Node], [Node] ] } }
FunctionExpression
1
548
null
[+] Exception: for-in-modify-int-loop-var.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 438,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 0,
       end: 437,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
438
[ Node {
    type: 'ExpressionStatement',
    start: 0,
    end: 437,
    expression: 
     Node {
       type: 'CallExpression',
       start: 0,
       end: 436,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'ExpressionStatement',
  start: 0,
  end: 437,
  expression: 
   Node {
     type: 'CallExpression',
     start: 0,
     end: 436,
     callee: 
      Node {
        type: 'FunctionExpression',
        start: 1,
        end: 433,
        id: null,
        generator: false,
        expression: false,
        async: false,
        params: [],
        body: [Node] },
     arguments: [] } }
ExpressionStatement
0
437
Node {
  type: 'CallExpression',
  start: 0,
  end: 436,
  callee: 
   Node {
     type: 'FunctionExpression',
     start: 1,
     end: 433,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [],
     body: Node { type: 'BlockStatement', start: 12, end: 433, body: [Array] } },
  arguments: [] }
CallExpression
0
436
Node {
  type: 'FunctionExpression',
  start: 1,
  end: 433,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: 
   Node {
     type: 'BlockStatement',
     start: 12,
     end: 433,
     body: [ [Node], [Node], [Node], [Node] ] } }
FunctionExpression
1
433
null
[+] Exception: for-in-modify-string-loop-var.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 2705,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 122,
       end: 168,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 170,
       end: 497,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 510,
       end: 594,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 595,
       end: 683,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 684,
       end: 772,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 773,
       end: 863,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 864,
       end: 957,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 959,
       end: 1061,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1062,
       end: 1193,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1194,
       end: 1333,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1346,
       end: 1430,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1431,
       end: 1519,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1520,
       end: 1608,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1609,
       end: 1699,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1700,
       end: 1793,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1795,
       end: 1897,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1898,
       end: 2029,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 2030,
       end: 2169,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 2171,
       end: 2284,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 2285,
       end: 2404,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 2405,
       end: 2524,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 2525,
       end: 2642,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
2705
[ Node {
    type: 'ExpressionStatement',
    start: 122,
    end: 168,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 122,
       end: 168,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 170,
    end: 497,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 170,
       end: 497,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 510,
    end: 594,
    expression: 
     Node {
       type: 'CallExpression',
       start: 510,
       end: 593,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 595,
    end: 683,
    expression: 
     Node {
       type: 'CallExpression',
       start: 595,
       end: 682,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 684,
    end: 772,
    expression: 
     Node {
       type: 'CallExpression',
       start: 684,
       end: 771,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 773,
    end: 863,
    expression: 
     Node {
       type: 'CallExpression',
       start: 773,
       end: 862,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 864,
    end: 957,
    expression: 
     Node {
       type: 'CallExpression',
       start: 864,
       end: 956,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 959,
    end: 1061,
    expression: 
     Node {
       type: 'CallExpression',
       start: 959,
       end: 1060,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1062,
    end: 1193,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1062,
       end: 1192,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1194,
    end: 1333,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1194,
       end: 1332,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1346,
    end: 1430,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1346,
       end: 1429,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1431,
    end: 1519,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1431,
       end: 1518,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1520,
    end: 1608,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1520,
       end: 1607,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1609,
    end: 1699,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1609,
       end: 1698,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1700,
    end: 1793,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1700,
       end: 1792,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1795,
    end: 1897,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1795,
       end: 1896,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1898,
    end: 2029,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1898,
       end: 2028,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 2030,
    end: 2169,
    expression: 
     Node {
       type: 'CallExpression',
       start: 2030,
       end: 2168,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 2171,
    end: 2284,
    expression: 
     Node {
       type: 'CallExpression',
       start: 2171,
       end: 2283,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 2285,
    end: 2404,
    expression: 
     Node {
       type: 'CallExpression',
       start: 2285,
       end: 2403,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 2405,
    end: 2524,
    expression: 
     Node {
       type: 'CallExpression',
       start: 2405,
       end: 2523,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 2525,
    end: 2642,
    expression: 
     Node {
       type: 'CallExpression',
       start: 2525,
       end: 2641,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'ExpressionStatement',
  start: 122,
  end: 168,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 122,
     end: 168,
     operator: '=',
     left: 
      Node {
        type: 'Identifier',
        start: 122,
        end: 136,
        name: 'expect_nothrow' },
     right: 
      Node {
        type: 'FunctionExpression',
        start: 139,
        end: 168,
        id: null,
        generator: false,
        expression: false,
        async: false,
        params: [Array],
        body: [Node] } } }
ExpressionStatement
122
168
Node {
  type: 'AssignmentExpression',
  start: 122,
  end: 168,
  operator: '=',
  left: 
   Node {
     type: 'Identifier',
     start: 122,
     end: 136,
     name: 'expect_nothrow' },
  right: 
   Node {
     type: 'FunctionExpression',
     start: 139,
     end: 168,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [ [Node], [Node] ],
     body: Node { type: 'BlockStatement', start: 156, end: 168, body: [Array] } } }
AssignmentExpression
122
168
=
Node {
  type: 'Identifier',
  start: 122,
  end: 136,
  name: 'expect_nothrow' }
Identifier
122
136
expect_nothrow
Node {
  type: 'FunctionExpression',
  start: 139,
  end: 168,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 148, end: 151, name: 'why' },
     Node { type: 'Identifier', start: 153, end: 154, name: 'f' } ],
  body: Node { type: 'BlockStatement', start: 156, end: 168, body: [ [Node] ] } }
FunctionExpression
139
168
null
[+] Exception: for-in-of-const.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 236,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 16,
       end: 140,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 142,
       end: 167,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 168,
       end: 235,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
236
[ Node {
    type: 'FunctionDeclaration',
    start: 16,
    end: 140,
    id: Node { type: 'Identifier', start: 25, end: 28, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 32, end: 140, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 142,
    end: 167,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 168,
    end: 235,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 172,
       end: 192,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 198, end: 235, argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 16,
  end: 140,
  id: Node { type: 'Identifier', start: 25, end: 28, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 29, end: 30, name: 'o' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 32,
     end: 140,
     body: [ [Node], [Node], [Node] ] } }
FunctionDeclaration
16
140
Node { type: 'Identifier', start: 25, end: 28, name: 'foo' }
Identifier
25
28
foo
false
false
false
[ Node { type: 'Identifier', start: 29, end: 30, name: 'o' } ]
Node { type: 'Identifier', start: 29, end: 30, name: 'o' }
Identifier
29
30
o
Node {
  type: 'BlockStatement',
  start: 32,
  end: 140,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 38,
       end: 53,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ForInStatement',
       start: 58,
       end: 119,
       left: [Node],
       right: [Node],
       body: [Node] },
     Node {
       type: 'ReturnStatement',
       start: 124,
       end: 138,
       argument: [Node] } ] }
BlockStatement
32
140
[ Node {
    type: 'VariableDeclaration',
    start: 38,
    end: 53,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ForInStatement',
    start: 58,
    end: 119,
    left: 
     Node {
       type: 'VariableDeclaration',
       start: 63,
       end: 68,
       declarations: [Array],
       kind: 'var' },
    right: Node { type: 'Identifier', start: 72, end: 73, name: 'o' },
    body: Node { type: 'BlockStatement', start: 75, end: 119, body: [Array] } },
  Node {
    type: 'ReturnStatement',
    start: 124,
    end: 138,
    argument: Node { type: 'Identifier', start: 131, end: 137, name: 'result' } } ]
Node {
  type: 'VariableDeclaration',
  start: 38,
  end: 53,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 42,
       end: 52,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
38
53
[ Node {
    type: 'VariableDeclarator',
    start: 42,
    end: 52,
    id: Node { type: 'Identifier', start: 42, end: 48, name: 'result' },
    init: Node { type: 'Literal', start: 51, end: 52, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 42,
  end: 52,
  id: Node { type: 'Identifier', start: 42, end: 48, name: 'result' },
  init: Node { type: 'Literal', start: 51, end: 52, value: 0, raw: '0' } }
VariableDeclarator
42
52
Node { type: 'Identifier', start: 42, end: 48, name: 'result' }
Identifier
42
48
result
Node { type: 'Literal', start: 51, end: 52, value: 0, raw: '0' }
Literal
51
52
0
0
var
Node {
  type: 'ForInStatement',
  start: 58,
  end: 119,
  left: 
   Node {
     type: 'VariableDeclaration',
     start: 63,
     end: 68,
     declarations: [ [Node] ],
     kind: 'var' },
  right: Node { type: 'Identifier', start: 72, end: 73, name: 'o' },
  body: 
   Node {
     type: 'BlockStatement',
     start: 75,
     end: 119,
     body: [ [Node], [Node] ] } }
ForInStatement
58
119
Node {
  type: 'VariableDeclaration',
  start: 63,
  end: 68,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 67,
       end: 68,
       id: [Node],
       init: null } ],
  kind: 'var' }
VariableDeclaration
63
68
[ Node {
    type: 'VariableDeclarator',
    start: 67,
    end: 68,
    id: Node { type: 'Identifier', start: 67, end: 68, name: 's' },
    init: null } ]
Node {
  type: 'VariableDeclarator',
  start: 67,
  end: 68,
  id: Node { type: 'Identifier', start: 67, end: 68, name: 's' },
  init: null }
VariableDeclarator
67
68
Node { type: 'Identifier', start: 67, end: 68, name: 's' }
Identifier
67
68
s
null
[+] Exception: for-in-postfix-ignored-index.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 269,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 16,
       end: 173,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 175,
       end: 200,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 201,
       end: 268,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
269
[ Node {
    type: 'FunctionDeclaration',
    start: 16,
    end: 173,
    id: Node { type: 'Identifier', start: 25, end: 28, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 32, end: 173, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 175,
    end: 200,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 201,
    end: 268,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 205,
       end: 225,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 231, end: 268, argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 16,
  end: 173,
  id: Node { type: 'Identifier', start: 25, end: 28, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 29, end: 30, name: 'o' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 32,
     end: 173,
     body: [ [Node], [Node], [Node] ] } }
FunctionDeclaration
16
173
Node { type: 'Identifier', start: 25, end: 28, name: 'foo' }
Identifier
25
28
foo
false
false
false
[ Node { type: 'Identifier', start: 29, end: 30, name: 'o' } ]
Node { type: 'Identifier', start: 29, end: 30, name: 'o' }
Identifier
29
30
o
Node {
  type: 'BlockStatement',
  start: 32,
  end: 173,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 38,
       end: 53,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ForInStatement',
       start: 58,
       end: 152,
       left: [Node],
       right: [Node],
       body: [Node] },
     Node {
       type: 'ReturnStatement',
       start: 157,
       end: 171,
       argument: [Node] } ] }
BlockStatement
32
173
[ Node {
    type: 'VariableDeclaration',
    start: 38,
    end: 53,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ForInStatement',
    start: 58,
    end: 152,
    left: 
     Node {
       type: 'VariableDeclaration',
       start: 63,
       end: 68,
       declarations: [Array],
       kind: 'var' },
    right: Node { type: 'Identifier', start: 72, end: 73, name: 'o' },
    body: Node { type: 'BlockStatement', start: 75, end: 152, body: [Array] } },
  Node {
    type: 'ReturnStatement',
    start: 157,
    end: 171,
    argument: Node { type: 'Identifier', start: 164, end: 170, name: 'result' } } ]
Node {
  type: 'VariableDeclaration',
  start: 38,
  end: 53,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 42,
       end: 52,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
38
53
[ Node {
    type: 'VariableDeclarator',
    start: 42,
    end: 52,
    id: Node { type: 'Identifier', start: 42, end: 48, name: 'result' },
    init: Node { type: 'Literal', start: 51, end: 52, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 42,
  end: 52,
  id: Node { type: 'Identifier', start: 42, end: 48, name: 'result' },
  init: Node { type: 'Literal', start: 51, end: 52, value: 0, raw: '0' } }
VariableDeclarator
42
52
Node { type: 'Identifier', start: 42, end: 48, name: 'result' }
Identifier
42
48
result
Node { type: 'Literal', start: 51, end: 52, value: 0, raw: '0' }
Literal
51
52
0
0
var
Node {
  type: 'ForInStatement',
  start: 58,
  end: 152,
  left: 
   Node {
     type: 'VariableDeclaration',
     start: 63,
     end: 68,
     declarations: [ [Node] ],
     kind: 'var' },
  right: Node { type: 'Identifier', start: 72, end: 73, name: 'o' },
  body: 
   Node {
     type: 'BlockStatement',
     start: 75,
     end: 152,
     body: [ [Node], [Node], [Node] ] } }
ForInStatement
58
152
Node {
  type: 'VariableDeclaration',
  start: 63,
  end: 68,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 67,
       end: 68,
       id: [Node],
       init: null } ],
  kind: 'var' }
VariableDeclaration
63
68
[ Node {
    type: 'VariableDeclarator',
    start: 67,
    end: 68,
    id: Node { type: 'Identifier', start: 67, end: 68, name: 's' },
    init: null } ]
Node {
  type: 'VariableDeclarator',
  start: 67,
  end: 68,
  id: Node { type: 'Identifier', start: 67, end: 68, name: 's' },
  init: null }
VariableDeclarator
67
68
Node { type: 'Identifier', start: 67, end: 68, name: 's' }
Identifier
67
68
s
null
[+] Exception: for-in-postfix-index.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 217,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 16,
       end: 121,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 123,
       end: 148,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 149,
       end: 216,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
217
[ Node {
    type: 'FunctionDeclaration',
    start: 16,
    end: 121,
    id: Node { type: 'Identifier', start: 25, end: 28, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 32, end: 121, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 123,
    end: 148,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 149,
    end: 216,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 153,
       end: 173,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 179, end: 216, argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 16,
  end: 121,
  id: Node { type: 'Identifier', start: 25, end: 28, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 29, end: 30, name: 'o' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 32,
     end: 121,
     body: [ [Node], [Node], [Node] ] } }
FunctionDeclaration
16
121
Node { type: 'Identifier', start: 25, end: 28, name: 'foo' }
Identifier
25
28
foo
false
false
false
[ Node { type: 'Identifier', start: 29, end: 30, name: 'o' } ]
Node { type: 'Identifier', start: 29, end: 30, name: 'o' }
Identifier
29
30
o
Node {
  type: 'BlockStatement',
  start: 32,
  end: 121,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 38,
       end: 53,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ForInStatement',
       start: 58,
       end: 100,
       left: [Node],
       right: [Node],
       body: [Node] },
     Node {
       type: 'ReturnStatement',
       start: 105,
       end: 119,
       argument: [Node] } ] }
BlockStatement
32
121
[ Node {
    type: 'VariableDeclaration',
    start: 38,
    end: 53,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ForInStatement',
    start: 58,
    end: 100,
    left: 
     Node {
       type: 'VariableDeclaration',
       start: 63,
       end: 68,
       declarations: [Array],
       kind: 'var' },
    right: Node { type: 'Identifier', start: 72, end: 73, name: 'o' },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 83,
       end: 100,
       expression: [Node] } },
  Node {
    type: 'ReturnStatement',
    start: 105,
    end: 119,
    argument: Node { type: 'Identifier', start: 112, end: 118, name: 'result' } } ]
Node {
  type: 'VariableDeclaration',
  start: 38,
  end: 53,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 42,
       end: 52,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
38
53
[ Node {
    type: 'VariableDeclarator',
    start: 42,
    end: 52,
    id: Node { type: 'Identifier', start: 42, end: 48, name: 'result' },
    init: Node { type: 'Literal', start: 51, end: 52, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 42,
  end: 52,
  id: Node { type: 'Identifier', start: 42, end: 48, name: 'result' },
  init: Node { type: 'Literal', start: 51, end: 52, value: 0, raw: '0' } }
VariableDeclarator
42
52
Node { type: 'Identifier', start: 42, end: 48, name: 'result' }
Identifier
42
48
result
Node { type: 'Literal', start: 51, end: 52, value: 0, raw: '0' }
Literal
51
52
0
0
var
Node {
  type: 'ForInStatement',
  start: 58,
  end: 100,
  left: 
   Node {
     type: 'VariableDeclaration',
     start: 63,
     end: 68,
     declarations: [ [Node] ],
     kind: 'var' },
  right: Node { type: 'Identifier', start: 72, end: 73, name: 'o' },
  body: 
   Node {
     type: 'ExpressionStatement',
     start: 83,
     end: 100,
     expression: 
      Node {
        type: 'AssignmentExpression',
        start: 83,
        end: 99,
        operator: '+=',
        left: [Node],
        right: [Node] } } }
ForInStatement
58
100
Node {
  type: 'VariableDeclaration',
  start: 63,
  end: 68,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 67,
       end: 68,
       id: [Node],
       init: null } ],
  kind: 'var' }
VariableDeclaration
63
68
[ Node {
    type: 'VariableDeclarator',
    start: 67,
    end: 68,
    id: Node { type: 'Identifier', start: 67, end: 68, name: 's' },
    init: null } ]
Node {
  type: 'VariableDeclarator',
  start: 67,
  end: 68,
  id: Node { type: 'Identifier', start: 67, end: 68, name: 's' },
  init: null }
VariableDeclarator
67
68
Node { type: 'Identifier', start: 67, end: 68, name: 's' }
Identifier
67
68
s
null
[+] Exception: for-in-prefix-index.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1560,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 0,
       end: 13,
       expression: [Node],
       directive: 'use strict' },
     Node {
       type: 'FunctionDeclaration',
       start: 15,
       end: 74,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 77,
       end: 868,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 869,
       end: 877,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 879,
       end: 1550,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1551,
       end: 1559,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
1560
[ Node {
    type: 'ExpressionStatement',
    start: 0,
    end: 13,
    expression: 
     Node {
       type: 'Literal',
       start: 0,
       end: 12,
       value: 'use strict',
       raw: '"use strict"' },
    directive: 'use strict' },
  Node {
    type: 'FunctionDeclaration',
    start: 15,
    end: 74,
    id: Node { type: 'Identifier', start: 24, end: 30, name: 'assert' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 34, end: 74, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 77,
    end: 868,
    id: Node { type: 'Identifier', start: 86, end: 91, name: 'test1' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 94, end: 868, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 869,
    end: 877,
    expression: 
     Node {
       type: 'CallExpression',
       start: 869,
       end: 876,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'FunctionDeclaration',
    start: 879,
    end: 1550,
    id: Node { type: 'Identifier', start: 888, end: 893, name: 'test2' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 896, end: 1550, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1551,
    end: 1559,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1551,
       end: 1558,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'ExpressionStatement',
  start: 0,
  end: 13,
  expression: 
   Node {
     type: 'Literal',
     start: 0,
     end: 12,
     value: 'use strict',
     raw: '"use strict"' },
  directive: 'use strict' }
ExpressionStatement
0
13
Node {
  type: 'Literal',
  start: 0,
  end: 12,
  value: 'use strict',
  raw: '"use strict"' }
Literal
0
12
use strict
"use strict"
use strict
Node {
  type: 'FunctionDeclaration',
  start: 15,
  end: 74,
  id: Node { type: 'Identifier', start: 24, end: 30, name: 'assert' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 31, end: 32, name: 'b' } ],
  body: Node { type: 'BlockStatement', start: 34, end: 74, body: [ [Node] ] } }
FunctionDeclaration
15
74
Node { type: 'Identifier', start: 24, end: 30, name: 'assert' }
Identifier
24
30
assert
false
false
false
[ Node { type: 'Identifier', start: 31, end: 32, name: 'b' } ]
Node { type: 'Identifier', start: 31, end: 32, name: 'b' }
Identifier
31
32
b
Node {
  type: 'BlockStatement',
  start: 34,
  end: 74,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 40,
       end: 72,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
34
74
[ Node {
    type: 'IfStatement',
    start: 40,
    end: 72,
    test: 
     Node {
       type: 'UnaryExpression',
       start: 44,
       end: 46,
       operator: '!',
       prefix: true,
       argument: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 56, end: 72, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 40,
  end: 72,
  test: 
   Node {
     type: 'UnaryExpression',
     start: 44,
     end: 46,
     operator: '!',
     prefix: true,
     argument: Node { type: 'Identifier', start: 45, end: 46, name: 'b' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 56,
     end: 72,
     argument: 
      Node {
        type: 'NewExpression',
        start: 62,
        end: 71,
        callee: [Node],
        arguments: [] } },
  alternate: null }
IfStatement
40
72
Node {
  type: 'UnaryExpression',
  start: 44,
  end: 46,
  operator: '!',
  prefix: true,
  argument: Node { type: 'Identifier', start: 45, end: 46, name: 'b' } }
UnaryExpression
44
46
!
true
Node { type: 'Identifier', start: 45, end: 46, name: 'b' }
Identifier
45
46
b
Node {
  type: 'ThrowStatement',
  start: 56,
  end: 72,
  argument: 
   Node {
     type: 'NewExpression',
     start: 62,
     end: 71,
     callee: Node { type: 'Identifier', start: 66, end: 71, name: 'Error' },
     arguments: [] } }
ThrowStatement
56
72
Node {
  type: 'NewExpression',
  start: 62,
  end: 71,
  callee: Node { type: 'Identifier', start: 66, end: 71, name: 'Error' },
  arguments: [] }
NewExpression
62
71
Node { type: 'Identifier', start: 66, end: 71, name: 'Error' }
Identifier
66
71
Error
[]
null
[+] Exception: for-in-prototype-with-indexed-properties-should-prevent-caching.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1513,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 0,
       end: 478,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 479,
       end: 981,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 982,
       end: 1512,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
1513
[ Node {
    type: 'ExpressionStatement',
    start: 0,
    end: 478,
    expression: 
     Node {
       type: 'CallExpression',
       start: 0,
       end: 477,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 479,
    end: 981,
    expression: 
     Node {
       type: 'CallExpression',
       start: 479,
       end: 980,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 982,
    end: 1512,
    expression: 
     Node {
       type: 'CallExpression',
       start: 982,
       end: 1511,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'ExpressionStatement',
  start: 0,
  end: 478,
  expression: 
   Node {
     type: 'CallExpression',
     start: 0,
     end: 477,
     callee: 
      Node {
        type: 'FunctionExpression',
        start: 1,
        end: 474,
        id: null,
        generator: false,
        expression: false,
        async: false,
        params: [],
        body: [Node] },
     arguments: [] } }
ExpressionStatement
0
478
Node {
  type: 'CallExpression',
  start: 0,
  end: 477,
  callee: 
   Node {
     type: 'FunctionExpression',
     start: 1,
     end: 474,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [],
     body: Node { type: 'BlockStatement', start: 12, end: 474, body: [Array] } },
  arguments: [] }
CallExpression
0
477
Node {
  type: 'FunctionExpression',
  start: 1,
  end: 474,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: 
   Node {
     type: 'BlockStatement',
     start: 12,
     end: 474,
     body: [ [Node], [Node], [Node] ] } }
FunctionExpression
1
474
null
[+] Exception: for-in-prototype.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 627,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 0,
       end: 34,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 36,
       end: 45,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 47,
       end: 276,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 278,
       end: 427,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 429,
       end: 443,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 445,
       end: 626,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
627
[ Node {
    type: 'VariableDeclaration',
    start: 0,
    end: 34,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 36,
    end: 45,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 47,
    end: 276,
    id: Node { type: 'Identifier', start: 56, end: 65, name: 'deleteAll' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 68, end: 276, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 278,
    end: 427,
    id: Node { type: 'Identifier', start: 287, end: 290, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 295, end: 427, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 429,
    end: 443,
    expression: 
     Node {
       type: 'CallExpression',
       start: 429,
       end: 442,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 445,
    end: 626,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 450,
       end: 459,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 461,
       end: 470,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 472,
       end: 475,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 477, end: 626, body: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 0,
  end: 34,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 4,
       end: 33,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
0
34
[ Node {
    type: 'VariableDeclarator',
    start: 4,
    end: 33,
    id: Node { type: 'Identifier', start: 4, end: 15, name: 'createProxy' },
    init: 
     Node {
       type: 'MemberExpression',
       start: 18,
       end: 33,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'VariableDeclarator',
  start: 4,
  end: 33,
  id: Node { type: 'Identifier', start: 4, end: 15, name: 'createProxy' },
  init: 
   Node {
     type: 'MemberExpression',
     start: 18,
     end: 33,
     object: Node { type: 'Identifier', start: 18, end: 21, name: '$vm' },
     property: Node { type: 'Identifier', start: 22, end: 33, name: 'createProxy' },
     computed: false } }
VariableDeclarator
4
33
Node { type: 'Identifier', start: 4, end: 15, name: 'createProxy' }
Identifier
4
15
createProxy
Node {
  type: 'MemberExpression',
  start: 18,
  end: 33,
  object: Node { type: 'Identifier', start: 18, end: 21, name: '$vm' },
  property: Node { type: 'Identifier', start: 22, end: 33, name: 'createProxy' },
  computed: false }
MemberExpression
18
33
Node { type: 'Identifier', start: 18, end: 21, name: '$vm' }
Identifier
18
21
$vm
Node { type: 'Identifier', start: 22, end: 33, name: 'createProxy' }
Identifier
22
33
createProxy
false
var
Node {
  type: 'VariableDeclaration',
  start: 36,
  end: 45,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 40,
       end: 44,
       id: [Node],
       init: null } ],
  kind: 'var' }
VariableDeclaration
36
45
[ Node {
    type: 'VariableDeclarator',
    start: 40,
    end: 44,
    id: Node { type: 'Identifier', start: 40, end: 44, name: 'theO' },
    init: null } ]
Node {
  type: 'VariableDeclarator',
  start: 40,
  end: 44,
  id: Node { type: 'Identifier', start: 40, end: 44, name: 'theO' },
  init: null }
VariableDeclarator
40
44
Node { type: 'Identifier', start: 40, end: 44, name: 'theO' }
Identifier
40
44
theO
null
[+] Exception: for-in-proxy-target-changed-structure.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 354,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 0,
       end: 34,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 36,
       end: 164,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 166,
       end: 180,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 182,
       end: 353,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
354
[ Node {
    type: 'VariableDeclaration',
    start: 0,
    end: 34,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 36,
    end: 164,
    id: Node { type: 'Identifier', start: 45, end: 48, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 53, end: 164, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 166,
    end: 180,
    expression: 
     Node {
       type: 'CallExpression',
       start: 166,
       end: 179,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 182,
    end: 353,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 187,
       end: 196,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 198,
       end: 207,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 209,
       end: 212,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 214, end: 353, body: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 0,
  end: 34,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 4,
       end: 33,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
0
34
[ Node {
    type: 'VariableDeclarator',
    start: 4,
    end: 33,
    id: Node { type: 'Identifier', start: 4, end: 15, name: 'createProxy' },
    init: 
     Node {
       type: 'MemberExpression',
       start: 18,
       end: 33,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'VariableDeclarator',
  start: 4,
  end: 33,
  id: Node { type: 'Identifier', start: 4, end: 15, name: 'createProxy' },
  init: 
   Node {
     type: 'MemberExpression',
     start: 18,
     end: 33,
     object: Node { type: 'Identifier', start: 18, end: 21, name: '$vm' },
     property: Node { type: 'Identifier', start: 22, end: 33, name: 'createProxy' },
     computed: false } }
VariableDeclarator
4
33
Node { type: 'Identifier', start: 4, end: 15, name: 'createProxy' }
Identifier
4
15
createProxy
Node {
  type: 'MemberExpression',
  start: 18,
  end: 33,
  object: Node { type: 'Identifier', start: 18, end: 21, name: '$vm' },
  property: Node { type: 'Identifier', start: 22, end: 33, name: 'createProxy' },
  computed: false }
MemberExpression
18
33
Node { type: 'Identifier', start: 18, end: 21, name: '$vm' }
Identifier
18
21
$vm
Node { type: 'Identifier', start: 22, end: 33, name: 'createProxy' }
Identifier
22
33
createProxy
false
var
Node {
  type: 'FunctionDeclaration',
  start: 36,
  end: 164,
  id: Node { type: 'Identifier', start: 45, end: 48, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 49, end: 51, name: 'o_' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 53,
     end: 164,
     body: [ [Node], [Node], [Node], [Node] ] } }
FunctionDeclaration
36
164
Node { type: 'Identifier', start: 45, end: 48, name: 'foo' }
Identifier
45
48
foo
false
false
false
[ Node { type: 'Identifier', start: 49, end: 51, name: 'o_' } ]
Node { type: 'Identifier', start: 49, end: 51, name: 'o_' }
Identifier
49
51
o_
Node {
  type: 'BlockStatement',
  start: 53,
  end: 164,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 59,
       end: 70,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 75,
       end: 90,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ForInStatement',
       start: 95,
       end: 143,
       left: [Node],
       right: [Node],
       body: [Node] },
     Node {
       type: 'ReturnStatement',
       start: 148,
       end: 162,
       argument: [Node] } ] }
BlockStatement
53
164
[ Node {
    type: 'VariableDeclaration',
    start: 59,
    end: 70,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 75,
    end: 90,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ForInStatement',
    start: 95,
    end: 143,
    left: 
     Node {
       type: 'VariableDeclaration',
       start: 100,
       end: 105,
       declarations: [Array],
       kind: 'var' },
    right: Node { type: 'Identifier', start: 109, end: 110, name: 'o' },
    body: Node { type: 'BlockStatement', start: 112, end: 143, body: [Array] } },
  Node {
    type: 'ReturnStatement',
    start: 148,
    end: 162,
    argument: Node { type: 'Identifier', start: 155, end: 161, name: 'result' } } ]
Node {
  type: 'VariableDeclaration',
  start: 59,
  end: 70,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 63,
       end: 69,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
59
70
[ Node {
    type: 'VariableDeclarator',
    start: 63,
    end: 69,
    id: Node { type: 'Identifier', start: 63, end: 64, name: 'o' },
    init: Node { type: 'Identifier', start: 67, end: 69, name: 'o_' } } ]
Node {
  type: 'VariableDeclarator',
  start: 63,
  end: 69,
  id: Node { type: 'Identifier', start: 63, end: 64, name: 'o' },
  init: Node { type: 'Identifier', start: 67, end: 69, name: 'o_' } }
VariableDeclarator
63
69
Node { type: 'Identifier', start: 63, end: 64, name: 'o' }
Identifier
63
64
o
Node { type: 'Identifier', start: 67, end: 69, name: 'o_' }
Identifier
67
69
o_
var
Node {
  type: 'VariableDeclaration',
  start: 75,
  end: 90,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 79,
       end: 89,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
75
90
[ Node {
    type: 'VariableDeclarator',
    start: 79,
    end: 89,
    id: Node { type: 'Identifier', start: 79, end: 85, name: 'result' },
    init: Node { type: 'Literal', start: 88, end: 89, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 79,
  end: 89,
  id: Node { type: 'Identifier', start: 79, end: 85, name: 'result' },
  init: Node { type: 'Literal', start: 88, end: 89, value: 0, raw: '0' } }
VariableDeclarator
79
89
Node { type: 'Identifier', start: 79, end: 85, name: 'result' }
Identifier
79
85
result
Node { type: 'Literal', start: 88, end: 89, value: 0, raw: '0' }
Literal
88
89
0
0
var
Node {
  type: 'ForInStatement',
  start: 95,
  end: 143,
  left: 
   Node {
     type: 'VariableDeclaration',
     start: 100,
     end: 105,
     declarations: [ [Node] ],
     kind: 'var' },
  right: Node { type: 'Identifier', start: 109, end: 110, name: 'o' },
  body: Node { type: 'BlockStatement', start: 112, end: 143, body: [ [Node] ] } }
ForInStatement
95
143
Node {
  type: 'VariableDeclaration',
  start: 100,
  end: 105,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 104,
       end: 105,
       id: [Node],
       init: null } ],
  kind: 'var' }
VariableDeclaration
100
105
[ Node {
    type: 'VariableDeclarator',
    start: 104,
    end: 105,
    id: Node { type: 'Identifier', start: 104, end: 105, name: 's' },
    init: null } ]
Node {
  type: 'VariableDeclarator',
  start: 104,
  end: 105,
  id: Node { type: 'Identifier', start: 104, end: 105, name: 's' },
  init: null }
VariableDeclarator
104
105
Node { type: 'Identifier', start: 104, end: 105, name: 's' }
Identifier
104
105
s
null
[+] Exception: for-in-proxy.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 593,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 0,
       end: 592,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
593
[ Node {
    type: 'ExpressionStatement',
    start: 0,
    end: 592,
    expression: 
     Node {
       type: 'CallExpression',
       start: 0,
       end: 591,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'ExpressionStatement',
  start: 0,
  end: 592,
  expression: 
   Node {
     type: 'CallExpression',
     start: 0,
     end: 591,
     callee: 
      Node {
        type: 'FunctionExpression',
        start: 1,
        end: 588,
        id: null,
        generator: false,
        expression: false,
        async: false,
        params: [],
        body: [Node] },
     arguments: [] } }
ExpressionStatement
0
592
Node {
  type: 'CallExpression',
  start: 0,
  end: 591,
  callee: 
   Node {
     type: 'FunctionExpression',
     start: 1,
     end: 588,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [],
     body: Node { type: 'BlockStatement', start: 12, end: 588, body: [Array] } },
  arguments: [] }
CallExpression
0
591
Node {
  type: 'FunctionExpression',
  start: 1,
  end: 588,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: 
   Node {
     type: 'BlockStatement',
     start: 12,
     end: 588,
     body: [ [Node], [Node], [Node], [Node] ] } }
FunctionExpression
1
588
null
[+] Exception: for-in-shadow-prototype-property.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1150,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 35,
       end: 55,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 57,
       end: 70,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 71,
       end: 85,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 86,
       end: 100,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 102,
       end: 338,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 340,
       end: 356,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 358,
       end: 435,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 437,
       end: 645,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 647,
       end: 889,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 891,
       end: 1115,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1117,
       end: 1134,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1135,
       end: 1149,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
1150
[ Node {
    type: 'VariableDeclaration',
    start: 35,
    end: 55,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 57,
    end: 70,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 71,
    end: 85,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 86,
    end: 100,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 102,
    end: 338,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 340,
    end: 356,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 340,
       end: 355,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'FunctionDeclaration',
    start: 358,
    end: 435,
    id: Node { type: 'Identifier', start: 367, end: 372, name: 'reset' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 375, end: 435, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 437,
    end: 645,
    id: Node { type: 'Identifier', start: 446, end: 453, name: 'runTest' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 460, end: 645, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 647,
    end: 889,
    id: 
     Node {
       type: 'Identifier',
       start: 656,
       end: 670,
       name: 'testWithoutFTL' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 673, end: 889, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 891,
    end: 1115,
    id: Node { type: 'Identifier', start: 900, end: 911, name: 'testWithFTL' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 914, end: 1115, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1117,
    end: 1134,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1117,
       end: 1133,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 1135,
    end: 1149,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1135,
       end: 1148,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'VariableDeclaration',
  start: 35,
  end: 55,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 39,
       end: 54,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
35
55
[ Node {
    type: 'VariableDeclarator',
    start: 39,
    end: 54,
    id: Node { type: 'Identifier', start: 39, end: 40, name: 'p' },
    init: 
     Node {
       type: 'ObjectExpression',
       start: 43,
       end: 54,
       properties: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 39,
  end: 54,
  id: Node { type: 'Identifier', start: 39, end: 40, name: 'p' },
  init: 
   Node {
     type: 'ObjectExpression',
     start: 43,
     end: 54,
     properties: [ [Node] ] } }
VariableDeclarator
39
54
Node { type: 'Identifier', start: 39, end: 40, name: 'p' }
Identifier
39
40
p
Node {
  type: 'ObjectExpression',
  start: 43,
  end: 54,
  properties: 
   [ Node {
       type: 'Property',
       start: 45,
       end: 52,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
43
54
[ Node {
    type: 'Property',
    start: 45,
    end: 52,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Literal', start: 45, end: 48, value: 'a', raw: '"a"' },
    value: Node { type: 'ObjectExpression', start: 50, end: 52, properties: [] },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 45,
  end: 52,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Literal', start: 45, end: 48, value: 'a', raw: '"a"' },
  value: Node { type: 'ObjectExpression', start: 50, end: 52, properties: [] },
  kind: 'init' }
Property
45
52
false
false
false
Node { type: 'Literal', start: 45, end: 48, value: 'a', raw: '"a"' }
Literal
45
48
a
"a"
Node { type: 'ObjectExpression', start: 50, end: 52, properties: [] }
ObjectExpression
50
52
[]
init
var
Node {
  type: 'VariableDeclaration',
  start: 57,
  end: 70,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 61,
       end: 69,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
57
70
[ Node {
    type: 'VariableDeclarator',
    start: 61,
    end: 69,
    id: Node { type: 'Identifier', start: 61, end: 65, name: 'flag' },
    init: Node { type: 'Literal', start: 68, end: 69, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 61,
  end: 69,
  id: Node { type: 'Identifier', start: 61, end: 65, name: 'flag' },
  init: Node { type: 'Literal', start: 68, end: 69, value: 0, raw: '0' } }
VariableDeclarator
61
69
Node { type: 'Identifier', start: 61, end: 65, name: 'flag' }
Identifier
61
65
flag
Node { type: 'Literal', start: 68, end: 69, value: 0, raw: '0' }
Literal
68
69
0
0
var
Node {
  type: 'VariableDeclaration',
  start: 71,
  end: 85,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 75,
       end: 84,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
71
85
[ Node {
    type: 'VariableDeclarator',
    start: 75,
    end: 84,
    id: Node { type: 'Identifier', start: 75, end: 79, name: 'data' },
    init: Node { type: 'ArrayExpression', start: 82, end: 84, elements: [] } } ]
Node {
  type: 'VariableDeclarator',
  start: 75,
  end: 84,
  id: Node { type: 'Identifier', start: 75, end: 79, name: 'data' },
  init: Node { type: 'ArrayExpression', start: 82, end: 84, elements: [] } }
VariableDeclarator
75
84
Node { type: 'Identifier', start: 75, end: 79, name: 'data' }
Identifier
75
79
data
Node { type: 'ArrayExpression', start: 82, end: 84, elements: [] }
ArrayExpression
82
84
[]
var
Node {
  type: 'VariableDeclaration',
  start: 86,
  end: 100,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 90,
       end: 99,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
86
100
[ Node {
    type: 'VariableDeclarator',
    start: 90,
    end: 99,
    id: Node { type: 'Identifier', start: 90, end: 94, name: 'copy' },
    init: Node { type: 'ArrayExpression', start: 97, end: 99, elements: [] } } ]
Node {
  type: 'VariableDeclarator',
  start: 90,
  end: 99,
  id: Node { type: 'Identifier', start: 90, end: 94, name: 'copy' },
  init: Node { type: 'ArrayExpression', start: 97, end: 99, elements: [] } }
VariableDeclarator
90
99
Node { type: 'Identifier', start: 90, end: 94, name: 'copy' }
Identifier
90
94
copy
Node { type: 'ArrayExpression', start: 97, end: 99, elements: [] }
ArrayExpression
97
99
[]
var
Node {
  type: 'VariableDeclaration',
  start: 102,
  end: 338,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 106,
       end: 337,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
102
338
[ Node {
    type: 'VariableDeclarator',
    start: 106,
    end: 337,
    id: Node { type: 'Identifier', start: 106, end: 107, name: 'z' },
    init: 
     Node {
       type: 'NewExpression',
       start: 110,
       end: 337,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 106,
  end: 337,
  id: Node { type: 'Identifier', start: 106, end: 107, name: 'z' },
  init: 
   Node {
     type: 'NewExpression',
     start: 110,
     end: 337,
     callee: Node { type: 'Identifier', start: 114, end: 119, name: 'Proxy' },
     arguments: [ [Node], [Node] ] } }
VariableDeclarator
106
337
Node { type: 'Identifier', start: 106, end: 107, name: 'z' }
Identifier
106
107
z
Node {
  type: 'NewExpression',
  start: 110,
  end: 337,
  callee: Node { type: 'Identifier', start: 114, end: 119, name: 'Proxy' },
  arguments: 
   [ Node { type: 'ObjectExpression', start: 120, end: 122, properties: [] },
     Node {
       type: 'ObjectExpression',
       start: 124,
       end: 336,
       properties: [Array] } ] }
NewExpression
110
337
Node { type: 'Identifier', start: 114, end: 119, name: 'Proxy' }
Identifier
114
119
Proxy
[ Node { type: 'ObjectExpression', start: 120, end: 122, properties: [] },
  Node {
    type: 'ObjectExpression',
    start: 124,
    end: 336,
    properties: [ [Node] ] } ]
Node { type: 'ObjectExpression', start: 120, end: 122, properties: [] }
ObjectExpression
120
122
[]
Node {
  type: 'ObjectExpression',
  start: 124,
  end: 336,
  properties: 
   [ Node {
       type: 'Property',
       start: 130,
       end: 334,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
124
336
[ Node {
    type: 'Property',
    start: 130,
    end: 334,
    method: false,
    shorthand: false,
    computed: false,
    key: 
     Node {
       type: 'Identifier',
       start: 130,
       end: 144,
       name: 'getPrototypeOf' },
    value: 
     Node {
       type: 'FunctionExpression',
       start: 146,
       end: 334,
       id: null,
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 130,
  end: 334,
  method: false,
  shorthand: false,
  computed: false,
  key: 
   Node {
     type: 'Identifier',
     start: 130,
     end: 144,
     name: 'getPrototypeOf' },
  value: 
   Node {
     type: 'FunctionExpression',
     start: 146,
     end: 334,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [],
     body: Node { type: 'BlockStatement', start: 157, end: 334, body: [Array] } },
  kind: 'init' }
Property
130
334
false
false
false
Node {
  type: 'Identifier',
  start: 130,
  end: 144,
  name: 'getPrototypeOf' }
Identifier
130
144
getPrototypeOf
Node {
  type: 'FunctionExpression',
  start: 146,
  end: 334,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: 
   Node {
     type: 'BlockStatement',
     start: 157,
     end: 334,
     body: [ [Node], [Node], [Node] ] } }
FunctionExpression
146
334
null
[+] Exception: for-in-side-effects.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 386,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 0,
       end: 385,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
386
[ Node {
    type: 'ExpressionStatement',
    start: 0,
    end: 385,
    expression: 
     Node {
       type: 'CallExpression',
       start: 0,
       end: 384,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'ExpressionStatement',
  start: 0,
  end: 385,
  expression: 
   Node {
     type: 'CallExpression',
     start: 0,
     end: 384,
     callee: 
      Node {
        type: 'FunctionExpression',
        start: 1,
        end: 381,
        id: null,
        generator: false,
        expression: false,
        async: false,
        params: [],
        body: [Node] },
     arguments: [] } }
ExpressionStatement
0
385
Node {
  type: 'CallExpression',
  start: 0,
  end: 384,
  callee: 
   Node {
     type: 'FunctionExpression',
     start: 1,
     end: 381,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [],
     body: Node { type: 'BlockStatement', start: 12, end: 381, body: [Array] } },
  arguments: [] }
CallExpression
0
384
Node {
  type: 'FunctionExpression',
  start: 1,
  end: 381,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: 
   Node {
     type: 'BlockStatement',
     start: 12,
     end: 381,
     body: [ [Node], [Node], [Node], [Node], [Node] ] } }
FunctionExpression
1
381
null
[+] Exception: for-in-string.js:TypeError: Cannot read property 'hasOwnProperty' of null
[+] Exception: for-in-tests.js:SyntaxError: Identifier 'p' has already been declared
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 441,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 0,
       end: 440,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
441
[ Node {
    type: 'ExpressionStatement',
    start: 0,
    end: 440,
    expression: 
     Node {
       type: 'CallExpression',
       start: 0,
       end: 439,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'ExpressionStatement',
  start: 0,
  end: 440,
  expression: 
   Node {
     type: 'CallExpression',
     start: 0,
     end: 439,
     callee: 
      Node {
        type: 'FunctionExpression',
        start: 1,
        end: 436,
        id: null,
        generator: false,
        expression: false,
        async: false,
        params: [],
        body: [Node] },
     arguments: [] } }
ExpressionStatement
0
440
Node {
  type: 'CallExpression',
  start: 0,
  end: 439,
  callee: 
   Node {
     type: 'FunctionExpression',
     start: 1,
     end: 436,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [],
     body: Node { type: 'BlockStatement', start: 12, end: 436, body: [Array] } },
  arguments: [] }
CallExpression
0
439
Node {
  type: 'FunctionExpression',
  start: 1,
  end: 436,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: 
   Node {
     type: 'BlockStatement',
     start: 12,
     end: 436,
     body: [ [Node], [Node], [Node], [Node] ] } }
FunctionExpression
1
436
null
[+] Exception: for-in-typed-array.js:TypeError: Cannot read property 'hasOwnProperty' of null
[+] Exception: for-let-comma.js:SyntaxError: Complex binding patterns require an initialization value
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 250,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 70,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 72,
       end: 86,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 88,
       end: 248,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
250
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 70,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 27, end: 70, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 72,
    end: 86,
    expression: 
     Node {
       type: 'CallExpression',
       start: 72,
       end: 85,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 88,
    end: 248,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 93,
       end: 102,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 104,
       end: 114,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 116,
       end: 119,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 121, end: 248, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 70,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'a' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'b' },
     Node { type: 'Identifier', start: 19, end: 25, name: 'string' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 27,
     end: 70,
     body: [ [Node], [Node] ] } }
FunctionDeclaration
0
70
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'a' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'b' },
  Node { type: 'Identifier', start: 19, end: 25, name: 'string' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'a' }
Identifier
13
14
a
Node { type: 'Identifier', start: 16, end: 17, name: 'b' }
Identifier
16
17
b
Node { type: 'Identifier', start: 19, end: 25, name: 'string' }
Identifier
19
25
string
Node {
  type: 'BlockStatement',
  start: 27,
  end: 70,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 33,
       end: 43,
       expression: [Node] },
     Node { type: 'ReturnStatement', start: 48, end: 68, argument: [Node] } ] }
BlockStatement
27
70
[ Node {
    type: 'ExpressionStatement',
    start: 33,
    end: 43,
    expression: 
     Node {
       type: 'CallExpression',
       start: 33,
       end: 42,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ReturnStatement',
    start: 48,
    end: 68,
    argument: 
     Node {
       type: 'CallExpression',
       start: 55,
       end: 67,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'ExpressionStatement',
  start: 33,
  end: 43,
  expression: 
   Node {
     type: 'CallExpression',
     start: 33,
     end: 42,
     callee: Node { type: 'Identifier', start: 33, end: 40, name: 'OSRExit' },
     arguments: [] } }
ExpressionStatement
33
43
Node {
  type: 'CallExpression',
  start: 33,
  end: 42,
  callee: Node { type: 'Identifier', start: 33, end: 40, name: 'OSRExit' },
  arguments: [] }
CallExpression
33
42
Node { type: 'Identifier', start: 33, end: 40, name: 'OSRExit' }
Identifier
33
40
OSRExit
[]
Node {
  type: 'ReturnStatement',
  start: 48,
  end: 68,
  argument: 
   Node {
     type: 'CallExpression',
     start: 55,
     end: 67,
     callee: Node { type: 'Identifier', start: 55, end: 59, name: 'eval' },
     arguments: [ [Node] ] } }
ReturnStatement
48
68
Node {
  type: 'CallExpression',
  start: 55,
  end: 67,
  callee: Node { type: 'Identifier', start: 55, end: 59, name: 'eval' },
  arguments: 
   [ Node { type: 'Identifier', start: 60, end: 66, name: 'string' } ] }
CallExpression
55
67
Node { type: 'Identifier', start: 55, end: 59, name: 'eval' }
Identifier
55
59
eval
[ Node { type: 'Identifier', start: 60, end: 66, name: 'string' } ]
Node { type: 'Identifier', start: 60, end: 66, name: 'string' }
Identifier
60
66
string
Node {
  type: 'ExpressionStatement',
  start: 72,
  end: 86,
  expression: 
   Node {
     type: 'CallExpression',
     start: 72,
     end: 85,
     callee: Node { type: 'Identifier', start: 72, end: 80, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
72
86
Node {
  type: 'CallExpression',
  start: 72,
  end: 85,
  callee: Node { type: 'Identifier', start: 72, end: 80, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 81, end: 84, name: 'foo' } ] }
CallExpression
72
85
Node { type: 'Identifier', start: 72, end: 80, name: 'noInline' }
Identifier
72
80
noInline
[ Node { type: 'Identifier', start: 81, end: 84, name: 'foo' } ]
Node { type: 'Identifier', start: 81, end: 84, name: 'foo' }
Identifier
81
84
foo
Node {
  type: 'ForStatement',
  start: 88,
  end: 248,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 93,
     end: 102,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 104,
     end: 114,
     left: Node { type: 'Identifier', start: 104, end: 105, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 108,
        end: 114,
        value: 100000,
        raw: '100000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 116,
     end: 119,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 118, end: 119, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 121,
     end: 248,
     body: [ [Node], [Node] ] } }
ForStatement
88
248
Node {
  type: 'VariableDeclaration',
  start: 93,
  end: 102,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 97,
       end: 102,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
93
102
[ Node {
    type: 'VariableDeclarator',
    start: 97,
    end: 102,
    id: Node { type: 'Identifier', start: 97, end: 98, name: 'i' },
    init: Node { type: 'Literal', start: 101, end: 102, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 97,
  end: 102,
  id: Node { type: 'Identifier', start: 97, end: 98, name: 'i' },
  init: Node { type: 'Literal', start: 101, end: 102, value: 0, raw: '0' } }
VariableDeclarator
97
102
Node { type: 'Identifier', start: 97, end: 98, name: 'i' }
Identifier
97
98
i
Node { type: 'Literal', start: 101, end: 102, value: 0, raw: '0' }
Literal
101
102
0
0
var
Node {
  type: 'BinaryExpression',
  start: 104,
  end: 114,
  left: Node { type: 'Identifier', start: 104, end: 105, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 108,
     end: 114,
     value: 100000,
     raw: '100000' } }
BinaryExpression
104
114
Node { type: 'Identifier', start: 104, end: 105, name: 'i' }
Identifier
104
105
i
<
Node {
  type: 'Literal',
  start: 108,
  end: 114,
  value: 100000,
  raw: '100000' }
Literal
108
114
100000
100000
Node {
  type: 'UpdateExpression',
  start: 116,
  end: 119,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 118, end: 119, name: 'i' } }
UpdateExpression
116
119
++
true
Node { type: 'Identifier', start: 118, end: 119, name: 'i' }
Identifier
118
119
i
Node {
  type: 'BlockStatement',
  start: 121,
  end: 248,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 127,
       end: 163,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 168,
       end: 246,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
121
248
[ Node {
    type: 'VariableDeclaration',
    start: 127,
    end: 163,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 168,
    end: 246,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 172,
       end: 191,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 201, end: 246, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 127,
  end: 163,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 131,
       end: 162,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
127
163
[ Node {
    type: 'VariableDeclarator',
    start: 131,
    end: 162,
    id: Node { type: 'Identifier', start: 131, end: 137, name: 'result' },
    init: 
     Node {
       type: 'CallExpression',
       start: 140,
       end: 162,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 131,
  end: 162,
  id: Node { type: 'Identifier', start: 131, end: 137, name: 'result' },
  init: 
   Node {
     type: 'CallExpression',
     start: 140,
     end: 162,
     callee: Node { type: 'Identifier', start: 140, end: 143, name: 'foo' },
     arguments: [ [Node], [Node], [Node] ] } }
VariableDeclarator
131
162
Node { type: 'Identifier', start: 131, end: 137, name: 'result' }
Identifier
131
137
result
Node {
  type: 'CallExpression',
  start: 140,
  end: 162,
  callee: Node { type: 'Identifier', start: 140, end: 143, name: 'foo' },
  arguments: 
   [ Node { type: 'Literal', start: 144, end: 145, value: 1, raw: '1' },
     Node { type: 'Literal', start: 147, end: 148, value: 2, raw: '2' },
     Node {
       type: 'Literal',
       start: 150,
       end: 161,
       value: 'a + b + 1',
       raw: '"a + b + 1"' } ] }
CallExpression
140
162
Node { type: 'Identifier', start: 140, end: 143, name: 'foo' }
Identifier
140
143
foo
[ Node { type: 'Literal', start: 144, end: 145, value: 1, raw: '1' },
  Node { type: 'Literal', start: 147, end: 148, value: 2, raw: '2' },
  Node {
    type: 'Literal',
    start: 150,
    end: 161,
    value: 'a + b + 1',
    raw: '"a + b + 1"' } ]
Node { type: 'Literal', start: 144, end: 145, value: 1, raw: '1' }
Literal
144
145
1
1
Node { type: 'Literal', start: 147, end: 148, value: 2, raw: '2' }
Literal
147
148
2
2
Node {
  type: 'Literal',
  start: 150,
  end: 161,
  value: 'a + b + 1',
  raw: '"a + b + 1"' }
Literal
150
161
a + b + 1
"a + b + 1"
var
Node {
  type: 'IfStatement',
  start: 168,
  end: 246,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 172,
     end: 191,
     left: Node { type: 'Identifier', start: 172, end: 178, name: 'result' },
     operator: '!=',
     right: 
      Node {
        type: 'BinaryExpression',
        start: 182,
        end: 191,
        left: [Node],
        operator: '+',
        right: [Node] } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 201,
     end: 246,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 207,
        end: 245,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
168
246
Node {
  type: 'BinaryExpression',
  start: 172,
  end: 191,
  left: Node { type: 'Identifier', start: 172, end: 178, name: 'result' },
  operator: '!=',
  right: 
   Node {
     type: 'BinaryExpression',
     start: 182,
     end: 191,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 182,
        end: 187,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Literal', start: 190, end: 191, value: 1, raw: '1' } } }
BinaryExpression
172
191
Node { type: 'Identifier', start: 172, end: 178, name: 'result' }
Identifier
172
178
result
!=
Node {
  type: 'BinaryExpression',
  start: 182,
  end: 191,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 182,
     end: 187,
     left: Node { type: 'Literal', start: 182, end: 183, value: 1, raw: '1' },
     operator: '+',
     right: Node { type: 'Literal', start: 186, end: 187, value: 2, raw: '2' } },
  operator: '+',
  right: Node { type: 'Literal', start: 190, end: 191, value: 1, raw: '1' } }
BinaryExpression
182
191
Node {
  type: 'BinaryExpression',
  start: 182,
  end: 187,
  left: Node { type: 'Literal', start: 182, end: 183, value: 1, raw: '1' },
  operator: '+',
  right: Node { type: 'Literal', start: 186, end: 187, value: 2, raw: '2' } }
BinaryExpression
182
187
Node { type: 'Literal', start: 182, end: 183, value: 1, raw: '1' }
Literal
182
183
1
1
+
Node { type: 'Literal', start: 186, end: 187, value: 2, raw: '2' }
Literal
186
187
2
2
+
Node { type: 'Literal', start: 190, end: 191, value: 1, raw: '1' }
Literal
190
191
1
1
Node {
  type: 'ThrowStatement',
  start: 201,
  end: 246,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 207,
     end: 245,
     left: 
      Node {
        type: 'Literal',
        start: 207,
        end: 236,
        value: 'Error: bad result in loop: ',
        raw: '"Error: bad result in loop: "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 239, end: 245, name: 'result' } } }
ThrowStatement
201
246
Node {
  type: 'BinaryExpression',
  start: 207,
  end: 245,
  left: 
   Node {
     type: 'Literal',
     start: 207,
     end: 236,
     value: 'Error: bad result in loop: ',
     raw: '"Error: bad result in loop: "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 239, end: 245, name: 'result' } }
BinaryExpression
207
245
Node {
  type: 'Literal',
  start: 207,
  end: 236,
  value: 'Error: bad result in loop: ',
  raw: '"Error: bad result in loop: "' }
Literal
207
236
Error: bad result in loop: 
"Error: bad result in loop: "
+
Node { type: 'Identifier', start: 239, end: 245, name: 'result' }
Identifier
239
245
result
null
[+] Exception: force-exit-then-eval-dfg.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 428,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 0,
       end: 16,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 17,
       end: 30,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 32,
       end: 139,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 141,
       end: 155,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 157,
       end: 306,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 308,
       end: 320,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 321,
       end: 353,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 354,
       end: 427,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
428
[ Node {
    type: 'VariableDeclaration',
    start: 0,
    end: 16,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 17,
    end: 30,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 17,
       end: 29,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'FunctionDeclaration',
    start: 32,
    end: 139,
    id: Node { type: 'Identifier', start: 41, end: 44, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 59, end: 139, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 141,
    end: 155,
    expression: 
     Node {
       type: 'CallExpression',
       start: 141,
       end: 154,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 157,
    end: 306,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 162,
       end: 171,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 173,
       end: 183,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 185,
       end: 188,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 190, end: 306, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 308,
    end: 320,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 308,
       end: 319,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'VariableDeclaration',
    start: 321,
    end: 353,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 354,
    end: 427,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 358,
       end: 377,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 383, end: 427, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 0,
  end: 16,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 4,
       end: 15,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
0
16
[ Node {
    type: 'VariableDeclarator',
    start: 4,
    end: 15,
    id: Node { type: 'Identifier', start: 4, end: 8, name: 'flag' },
    init: Node { type: 'Literal', start: 11, end: 15, value: true, raw: 'true' } } ]
Node {
  type: 'VariableDeclarator',
  start: 4,
  end: 15,
  id: Node { type: 'Identifier', start: 4, end: 8, name: 'flag' },
  init: Node { type: 'Literal', start: 11, end: 15, value: true, raw: 'true' } }
VariableDeclarator
4
15
Node { type: 'Identifier', start: 4, end: 8, name: 'flag' }
Identifier
4
8
flag
Node { type: 'Literal', start: 11, end: 15, value: true, raw: 'true' }
Literal
11
15
true
true
var
Node {
  type: 'ExpressionStatement',
  start: 17,
  end: 30,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 17,
     end: 29,
     operator: '=',
     left: Node { type: 'Identifier', start: 17, end: 21, name: 'flag' },
     right: Node { type: 'Literal', start: 24, end: 29, value: false, raw: 'false' } } }
ExpressionStatement
17
30
Node {
  type: 'AssignmentExpression',
  start: 17,
  end: 29,
  operator: '=',
  left: Node { type: 'Identifier', start: 17, end: 21, name: 'flag' },
  right: Node { type: 'Literal', start: 24, end: 29, value: false, raw: 'false' } }
AssignmentExpression
17
29
=
Node { type: 'Identifier', start: 17, end: 21, name: 'flag' }
Identifier
17
21
flag
Node { type: 'Literal', start: 24, end: 29, value: false, raw: 'false' }
Literal
24
29
false
false
Node {
  type: 'FunctionDeclaration',
  start: 32,
  end: 139,
  id: Node { type: 'Identifier', start: 41, end: 44, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 45, end: 46, name: 'a' },
     Node { type: 'Identifier', start: 48, end: 49, name: 'b' },
     Node { type: 'Identifier', start: 51, end: 57, name: 'string' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 59,
     end: 139,
     body: [ [Node], [Node], [Node] ] } }
FunctionDeclaration
32
139
Node { type: 'Identifier', start: 41, end: 44, name: 'foo' }
Identifier
41
44
foo
false
false
false
[ Node { type: 'Identifier', start: 45, end: 46, name: 'a' },
  Node { type: 'Identifier', start: 48, end: 49, name: 'b' },
  Node { type: 'Identifier', start: 51, end: 57, name: 'string' } ]
Node { type: 'Identifier', start: 45, end: 46, name: 'a' }
Identifier
45
46
a
Node { type: 'Identifier', start: 48, end: 49, name: 'b' }
Identifier
48
49
b
Node { type: 'Identifier', start: 51, end: 57, name: 'string' }
Identifier
51
57
string
Node {
  type: 'BlockStatement',
  start: 59,
  end: 139,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 65,
       end: 79,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 84,
       end: 122,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ReturnStatement',
       start: 127,
       end: 137,
       argument: [Node] } ] }
BlockStatement
59
139
[ Node {
    type: 'VariableDeclaration',
    start: 65,
    end: 79,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 84,
    end: 122,
    test: Node { type: 'Identifier', start: 88, end: 92, name: 'flag' },
    consequent: 
     Node {
       type: 'ReturnStatement',
       start: 102,
       end: 122,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'ReturnStatement',
    start: 127,
    end: 137,
    argument: Node { type: 'Literal', start: 134, end: 136, value: 42, raw: '42' } } ]
Node {
  type: 'VariableDeclaration',
  start: 65,
  end: 79,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 69,
       end: 78,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
65
79
[ Node {
    type: 'VariableDeclarator',
    start: 69,
    end: 78,
    id: Node { type: 'Identifier', start: 69, end: 70, name: 'x' },
    init: 
     Node {
       type: 'BinaryExpression',
       start: 73,
       end: 78,
       left: [Node],
       operator: '+',
       right: [Node] } } ]
Node {
  type: 'VariableDeclarator',
  start: 69,
  end: 78,
  id: Node { type: 'Identifier', start: 69, end: 70, name: 'x' },
  init: 
   Node {
     type: 'BinaryExpression',
     start: 73,
     end: 78,
     left: Node { type: 'Identifier', start: 73, end: 74, name: 'a' },
     operator: '+',
     right: Node { type: 'Identifier', start: 77, end: 78, name: 'b' } } }
VariableDeclarator
69
78
Node { type: 'Identifier', start: 69, end: 70, name: 'x' }
Identifier
69
70
x
Node {
  type: 'BinaryExpression',
  start: 73,
  end: 78,
  left: Node { type: 'Identifier', start: 73, end: 74, name: 'a' },
  operator: '+',
  right: Node { type: 'Identifier', start: 77, end: 78, name: 'b' } }
BinaryExpression
73
78
Node { type: 'Identifier', start: 73, end: 74, name: 'a' }
Identifier
73
74
a
+
Node { type: 'Identifier', start: 77, end: 78, name: 'b' }
Identifier
77
78
b
var
Node {
  type: 'IfStatement',
  start: 84,
  end: 122,
  test: Node { type: 'Identifier', start: 88, end: 92, name: 'flag' },
  consequent: 
   Node {
     type: 'ReturnStatement',
     start: 102,
     end: 122,
     argument: 
      Node {
        type: 'CallExpression',
        start: 109,
        end: 121,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
84
122
Node { type: 'Identifier', start: 88, end: 92, name: 'flag' }
Identifier
88
92
flag
Node {
  type: 'ReturnStatement',
  start: 102,
  end: 122,
  argument: 
   Node {
     type: 'CallExpression',
     start: 109,
     end: 121,
     callee: Node { type: 'Identifier', start: 109, end: 113, name: 'eval' },
     arguments: [ [Node] ] } }
ReturnStatement
102
122
Node {
  type: 'CallExpression',
  start: 109,
  end: 121,
  callee: Node { type: 'Identifier', start: 109, end: 113, name: 'eval' },
  arguments: 
   [ Node { type: 'Identifier', start: 114, end: 120, name: 'string' } ] }
CallExpression
109
121
Node { type: 'Identifier', start: 109, end: 113, name: 'eval' }
Identifier
109
113
eval
[ Node { type: 'Identifier', start: 114, end: 120, name: 'string' } ]
Node { type: 'Identifier', start: 114, end: 120, name: 'string' }
Identifier
114
120
string
null
[+] Exception: force-exit-then-eval.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 667,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 0,
       end: 13,
       expression: [Node],
       directive: 'use strict' },
     Node {
       type: 'FunctionDeclaration',
       start: 15,
       end: 103,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 104,
       end: 121,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 123,
       end: 657,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 659,
       end: 666,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
667
[ Node {
    type: 'ExpressionStatement',
    start: 0,
    end: 13,
    expression: 
     Node {
       type: 'Literal',
       start: 0,
       end: 12,
       value: 'use strict',
       raw: '"use strict"' },
    directive: 'use strict' },
  Node {
    type: 'FunctionDeclaration',
    start: 15,
    end: 103,
    id: Node { type: 'Identifier', start: 24, end: 30, name: 'assert' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 40, end: 103, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 104,
    end: 121,
    expression: 
     Node {
       type: 'CallExpression',
       start: 104,
       end: 120,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 123,
    end: 657,
    id: Node { type: 'Identifier', start: 132, end: 136, name: 'test' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 139, end: 657, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 659,
    end: 666,
    expression: 
     Node {
       type: 'CallExpression',
       start: 659,
       end: 665,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'ExpressionStatement',
  start: 0,
  end: 13,
  expression: 
   Node {
     type: 'Literal',
     start: 0,
     end: 12,
     value: 'use strict',
     raw: '"use strict"' },
  directive: 'use strict' }
ExpressionStatement
0
13
Node {
  type: 'Literal',
  start: 0,
  end: 12,
  value: 'use strict',
  raw: '"use strict"' }
Literal
0
12
use strict
"use strict"
use strict
Node {
  type: 'FunctionDeclaration',
  start: 15,
  end: 103,
  id: Node { type: 'Identifier', start: 24, end: 30, name: 'assert' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 31, end: 32, name: 'b' },
     Node {
       type: 'AssignmentPattern',
       start: 34,
       end: 38,
       left: [Node],
       right: [Node] } ],
  body: Node { type: 'BlockStatement', start: 40, end: 103, body: [ [Node] ] } }
FunctionDeclaration
15
103
Node { type: 'Identifier', start: 24, end: 30, name: 'assert' }
Identifier
24
30
assert
false
false
false
[ Node { type: 'Identifier', start: 31, end: 32, name: 'b' },
  Node {
    type: 'AssignmentPattern',
    start: 34,
    end: 38,
    left: Node { type: 'Identifier', start: 34, end: 35, name: 'm' },
    right: Node { type: 'Literal', start: 36, end: 38, value: '', raw: '""' } } ]
Node { type: 'Identifier', start: 31, end: 32, name: 'b' }
Identifier
31
32
b
Node {
  type: 'AssignmentPattern',
  start: 34,
  end: 38,
  left: Node { type: 'Identifier', start: 34, end: 35, name: 'm' },
  right: Node { type: 'Literal', start: 36, end: 38, value: '', raw: '""' } }
AssignmentPattern
34
38
Node { type: 'Identifier', start: 34, end: 35, name: 'm' }
Identifier
34
35
m
Node { type: 'Literal', start: 36, end: 38, value: '', raw: '""' }
Literal
36
38

""
Node {
  type: 'BlockStatement',
  start: 40,
  end: 103,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 46,
       end: 101,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
40
103
[ Node {
    type: 'IfStatement',
    start: 46,
    end: 101,
    test: 
     Node {
       type: 'UnaryExpression',
       start: 50,
       end: 52,
       operator: '!',
       prefix: true,
       argument: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 62, end: 101, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 46,
  end: 101,
  test: 
   Node {
     type: 'UnaryExpression',
     start: 50,
     end: 52,
     operator: '!',
     prefix: true,
     argument: Node { type: 'Identifier', start: 51, end: 52, name: 'b' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 62,
     end: 101,
     argument: 
      Node {
        type: 'NewExpression',
        start: 68,
        end: 100,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
46
101
Node {
  type: 'UnaryExpression',
  start: 50,
  end: 52,
  operator: '!',
  prefix: true,
  argument: Node { type: 'Identifier', start: 51, end: 52, name: 'b' } }
UnaryExpression
50
52
!
true
Node { type: 'Identifier', start: 51, end: 52, name: 'b' }
Identifier
51
52
b
Node {
  type: 'ThrowStatement',
  start: 62,
  end: 101,
  argument: 
   Node {
     type: 'NewExpression',
     start: 68,
     end: 100,
     callee: Node { type: 'Identifier', start: 72, end: 77, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
62
101
Node {
  type: 'NewExpression',
  start: 68,
  end: 100,
  callee: Node { type: 'Identifier', start: 72, end: 77, name: 'Error' },
  arguments: 
   [ Node {
       type: 'BinaryExpression',
       start: 78,
       end: 99,
       left: [Node],
       operator: '+',
       right: [Node] } ] }
NewExpression
68
100
Node { type: 'Identifier', start: 72, end: 77, name: 'Error' }
Identifier
72
77
Error
[ Node {
    type: 'BinaryExpression',
    start: 78,
    end: 99,
    left: 
     Node {
       type: 'Literal',
       start: 78,
       end: 95,
       value: 'Bad assertion: ',
       raw: '"Bad assertion: "' },
    operator: '+',
    right: Node { type: 'Identifier', start: 98, end: 99, name: 'm' } } ]
Node {
  type: 'BinaryExpression',
  start: 78,
  end: 99,
  left: 
   Node {
     type: 'Literal',
     start: 78,
     end: 95,
     value: 'Bad assertion: ',
     raw: '"Bad assertion: "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 98, end: 99, name: 'm' } }
BinaryExpression
78
99
Node {
  type: 'Literal',
  start: 78,
  end: 95,
  value: 'Bad assertion: ',
  raw: '"Bad assertion: "' }
Literal
78
95
Bad assertion: 
"Bad assertion: "
+
Node { type: 'Identifier', start: 98, end: 99, name: 'm' }
Identifier
98
99
m
null
[+] Exception: forward-varargs-double-new-array-buffer.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 336,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 40,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 42,
       end: 89,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 91,
       end: 182,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 184,
       end: 198,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 200,
       end: 334,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
336
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 40,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 15, end: 40, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 42,
    end: 89,
    id: Node { type: 'Identifier', start: 51, end: 54, name: 'baz' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 64, end: 89, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 91,
    end: 182,
    id: Node { type: 'Identifier', start: 100, end: 103, name: 'bar' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 113, end: 182, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 184,
    end: 198,
    expression: 
     Node {
       type: 'CallExpression',
       start: 184,
       end: 197,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 200,
    end: 334,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 205,
       end: 214,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 216,
       end: 225,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 227,
       end: 230,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 232, end: 334, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 40,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 15, end: 40, body: [ [Node] ] } }
FunctionDeclaration
0
40
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[]
Node {
  type: 'BlockStatement',
  start: 15,
  end: 40,
  body: 
   [ Node { type: 'ReturnStatement', start: 21, end: 38, argument: [Node] } ] }
BlockStatement
15
40
[ Node {
    type: 'ReturnStatement',
    start: 21,
    end: 38,
    argument: Node { type: 'Identifier', start: 28, end: 37, name: 'arguments' } } ]
Node {
  type: 'ReturnStatement',
  start: 21,
  end: 38,
  argument: Node { type: 'Identifier', start: 28, end: 37, name: 'arguments' } }
ReturnStatement
21
38
Node { type: 'Identifier', start: 28, end: 37, name: 'arguments' }
Identifier
28
37
arguments
Node {
  type: 'FunctionDeclaration',
  start: 42,
  end: 89,
  id: Node { type: 'Identifier', start: 51, end: 54, name: 'baz' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 55, end: 56, name: 'a' },
     Node { type: 'Identifier', start: 58, end: 59, name: 'b' },
     Node { type: 'Identifier', start: 61, end: 62, name: 'c' } ],
  body: Node { type: 'BlockStatement', start: 64, end: 89, body: [ [Node] ] } }
FunctionDeclaration
42
89
Node { type: 'Identifier', start: 51, end: 54, name: 'baz' }
Identifier
51
54
baz
false
false
false
[ Node { type: 'Identifier', start: 55, end: 56, name: 'a' },
  Node { type: 'Identifier', start: 58, end: 59, name: 'b' },
  Node { type: 'Identifier', start: 61, end: 62, name: 'c' } ]
Node { type: 'Identifier', start: 55, end: 56, name: 'a' }
Identifier
55
56
a
Node { type: 'Identifier', start: 58, end: 59, name: 'b' }
Identifier
58
59
b
Node { type: 'Identifier', start: 61, end: 62, name: 'c' }
Identifier
61
62
c
Node {
  type: 'BlockStatement',
  start: 64,
  end: 89,
  body: 
   [ Node { type: 'ReturnStatement', start: 70, end: 87, argument: [Node] } ] }
BlockStatement
64
89
[ Node {
    type: 'ReturnStatement',
    start: 70,
    end: 87,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 77,
       end: 86,
       left: [Node],
       operator: '+',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 70,
  end: 87,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 77,
     end: 86,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 77,
        end: 82,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Identifier', start: 85, end: 86, name: 'c' } } }
ReturnStatement
70
87
Node {
  type: 'BinaryExpression',
  start: 77,
  end: 86,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 77,
     end: 82,
     left: Node { type: 'Identifier', start: 77, end: 78, name: 'a' },
     operator: '+',
     right: Node { type: 'Identifier', start: 81, end: 82, name: 'b' } },
  operator: '+',
  right: Node { type: 'Identifier', start: 85, end: 86, name: 'c' } }
BinaryExpression
77
86
Node {
  type: 'BinaryExpression',
  start: 77,
  end: 82,
  left: Node { type: 'Identifier', start: 77, end: 78, name: 'a' },
  operator: '+',
  right: Node { type: 'Identifier', start: 81, end: 82, name: 'b' } }
BinaryExpression
77
82
Node { type: 'Identifier', start: 77, end: 78, name: 'a' }
Identifier
77
78
a
+
Node { type: 'Identifier', start: 81, end: 82, name: 'b' }
Identifier
81
82
b
+
Node { type: 'Identifier', start: 85, end: 86, name: 'c' }
Identifier
85
86
c
Node {
  type: 'FunctionDeclaration',
  start: 91,
  end: 182,
  id: Node { type: 'Identifier', start: 100, end: 103, name: 'bar' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 104, end: 105, name: 'a' },
     Node { type: 'Identifier', start: 107, end: 108, name: 'b' },
     Node { type: 'Identifier', start: 110, end: 111, name: 'c' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 113,
     end: 182,
     body: [ [Node], [Node] ] } }
FunctionDeclaration
91
182
Node { type: 'Identifier', start: 100, end: 103, name: 'bar' }
Identifier
100
103
bar
false
false
false
[ Node { type: 'Identifier', start: 104, end: 105, name: 'a' },
  Node { type: 'Identifier', start: 107, end: 108, name: 'b' },
  Node { type: 'Identifier', start: 110, end: 111, name: 'c' } ]
Node { type: 'Identifier', start: 104, end: 105, name: 'a' }
Identifier
104
105
a
Node { type: 'Identifier', start: 107, end: 108, name: 'b' }
Identifier
107
108
b
Node { type: 'Identifier', start: 110, end: 111, name: 'c' }
Identifier
110
111
c
Node {
  type: 'BlockStatement',
  start: 113,
  end: 182,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 119,
       end: 144,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ReturnStatement',
       start: 149,
       end: 180,
       argument: [Node] } ] }
BlockStatement
113
182
[ Node {
    type: 'VariableDeclaration',
    start: 119,
    end: 144,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ReturnStatement',
    start: 149,
    end: 180,
    argument: 
     Node {
       type: 'CallExpression',
       start: 156,
       end: 179,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 119,
  end: 144,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 123,
       end: 143,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
119
144
[ Node {
    type: 'VariableDeclarator',
    start: 123,
    end: 143,
    id: Node { type: 'Identifier', start: 123, end: 127, name: 'args' },
    init: 
     Node {
       type: 'CallExpression',
       start: 130,
       end: 143,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 123,
  end: 143,
  id: Node { type: 'Identifier', start: 123, end: 127, name: 'args' },
  init: 
   Node {
     type: 'CallExpression',
     start: 130,
     end: 143,
     callee: Node { type: 'Identifier', start: 130, end: 133, name: 'foo' },
     arguments: [ [Node], [Node], [Node] ] } }
VariableDeclarator
123
143
Node { type: 'Identifier', start: 123, end: 127, name: 'args' }
Identifier
123
127
args
Node {
  type: 'CallExpression',
  start: 130,
  end: 143,
  callee: Node { type: 'Identifier', start: 130, end: 133, name: 'foo' },
  arguments: 
   [ Node { type: 'Identifier', start: 134, end: 135, name: 'b' },
     Node { type: 'Identifier', start: 137, end: 138, name: 'c' },
     Node { type: 'Literal', start: 140, end: 142, value: 42, raw: '42' } ] }
CallExpression
130
143
Node { type: 'Identifier', start: 130, end: 133, name: 'foo' }
Identifier
130
133
foo
[ Node { type: 'Identifier', start: 134, end: 135, name: 'b' },
  Node { type: 'Identifier', start: 137, end: 138, name: 'c' },
  Node { type: 'Literal', start: 140, end: 142, value: 42, raw: '42' } ]
Node { type: 'Identifier', start: 134, end: 135, name: 'b' }
Identifier
134
135
b
Node { type: 'Identifier', start: 137, end: 138, name: 'c' }
Identifier
137
138
c
Node { type: 'Literal', start: 140, end: 142, value: 42, raw: '42' }
Literal
140
142
42
42
var
Node {
  type: 'ReturnStatement',
  start: 149,
  end: 180,
  argument: 
   Node {
     type: 'CallExpression',
     start: 156,
     end: 179,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 156,
        end: 165,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [ [Node], [Node] ] } }
ReturnStatement
149
180
Node {
  type: 'CallExpression',
  start: 156,
  end: 179,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 156,
     end: 165,
     object: Node { type: 'Identifier', start: 156, end: 159, name: 'baz' },
     property: Node { type: 'Identifier', start: 160, end: 165, name: 'apply' },
     computed: false },
  arguments: 
   [ Node {
       type: 'UnaryExpression',
       start: 166,
       end: 172,
       operator: 'void',
       prefix: true,
       argument: [Node] },
     Node { type: 'Identifier', start: 174, end: 178, name: 'args' } ] }
CallExpression
156
179
Node {
  type: 'MemberExpression',
  start: 156,
  end: 165,
  object: Node { type: 'Identifier', start: 156, end: 159, name: 'baz' },
  property: Node { type: 'Identifier', start: 160, end: 165, name: 'apply' },
  computed: false }
MemberExpression
156
165
Node { type: 'Identifier', start: 156, end: 159, name: 'baz' }
Identifier
156
159
baz
Node { type: 'Identifier', start: 160, end: 165, name: 'apply' }
Identifier
160
165
apply
false
[ Node {
    type: 'UnaryExpression',
    start: 166,
    end: 172,
    operator: 'void',
    prefix: true,
    argument: Node { type: 'Literal', start: 171, end: 172, value: 0, raw: '0' } },
  Node { type: 'Identifier', start: 174, end: 178, name: 'args' } ]
Node {
  type: 'UnaryExpression',
  start: 166,
  end: 172,
  operator: 'void',
  prefix: true,
  argument: Node { type: 'Literal', start: 171, end: 172, value: 0, raw: '0' } }
UnaryExpression
166
172
void
true
Node { type: 'Literal', start: 171, end: 172, value: 0, raw: '0' }
Literal
171
172
0
0
Node { type: 'Identifier', start: 174, end: 178, name: 'args' }
Identifier
174
178
args
Node {
  type: 'ExpressionStatement',
  start: 184,
  end: 198,
  expression: 
   Node {
     type: 'CallExpression',
     start: 184,
     end: 197,
     callee: Node { type: 'Identifier', start: 184, end: 192, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
184
198
Node {
  type: 'CallExpression',
  start: 184,
  end: 197,
  callee: Node { type: 'Identifier', start: 184, end: 192, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 193, end: 196, name: 'bar' } ] }
CallExpression
184
197
Node { type: 'Identifier', start: 184, end: 192, name: 'noInline' }
Identifier
184
192
noInline
[ Node { type: 'Identifier', start: 193, end: 196, name: 'bar' } ]
Node { type: 'Identifier', start: 193, end: 196, name: 'bar' }
Identifier
193
196
bar
Node {
  type: 'ForStatement',
  start: 200,
  end: 334,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 205,
     end: 214,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 216,
     end: 225,
     left: Node { type: 'Identifier', start: 216, end: 217, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 220,
        end: 225,
        value: 10000,
        raw: '10000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 227,
     end: 230,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 229, end: 230, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 232,
     end: 334,
     body: [ [Node], [Node] ] } }
ForStatement
200
334
Node {
  type: 'VariableDeclaration',
  start: 205,
  end: 214,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 209,
       end: 214,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
205
214
[ Node {
    type: 'VariableDeclarator',
    start: 209,
    end: 214,
    id: Node { type: 'Identifier', start: 209, end: 210, name: 'i' },
    init: Node { type: 'Literal', start: 213, end: 214, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 209,
  end: 214,
  id: Node { type: 'Identifier', start: 209, end: 210, name: 'i' },
  init: Node { type: 'Literal', start: 213, end: 214, value: 0, raw: '0' } }
VariableDeclarator
209
214
Node { type: 'Identifier', start: 209, end: 210, name: 'i' }
Identifier
209
210
i
Node { type: 'Literal', start: 213, end: 214, value: 0, raw: '0' }
Literal
213
214
0
0
var
Node {
  type: 'BinaryExpression',
  start: 216,
  end: 225,
  left: Node { type: 'Identifier', start: 216, end: 217, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 220,
     end: 225,
     value: 10000,
     raw: '10000' } }
BinaryExpression
216
225
Node { type: 'Identifier', start: 216, end: 217, name: 'i' }
Identifier
216
217
i
<
Node {
  type: 'Literal',
  start: 220,
  end: 225,
  value: 10000,
  raw: '10000' }
Literal
220
225
10000
10000
Node {
  type: 'UpdateExpression',
  start: 227,
  end: 230,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 229, end: 230, name: 'i' } }
UpdateExpression
227
230
++
true
Node { type: 'Identifier', start: 229, end: 230, name: 'i' }
Identifier
229
230
i
Node {
  type: 'BlockStatement',
  start: 232,
  end: 334,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 238,
       end: 264,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 269,
       end: 332,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
232
334
[ Node {
    type: 'VariableDeclaration',
    start: 238,
    end: 264,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 269,
    end: 332,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 273,
       end: 285,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 295, end: 332, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 238,
  end: 264,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 242,
       end: 263,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
238
264
[ Node {
    type: 'VariableDeclarator',
    start: 242,
    end: 263,
    id: Node { type: 'Identifier', start: 242, end: 248, name: 'result' },
    init: 
     Node {
       type: 'CallExpression',
       start: 251,
       end: 263,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 242,
  end: 263,
  id: Node { type: 'Identifier', start: 242, end: 248, name: 'result' },
  init: 
   Node {
     type: 'CallExpression',
     start: 251,
     end: 263,
     callee: Node { type: 'Identifier', start: 251, end: 254, name: 'bar' },
     arguments: [ [Node], [Node], [Node] ] } }
VariableDeclarator
242
263
Node { type: 'Identifier', start: 242, end: 248, name: 'result' }
Identifier
242
248
result
Node {
  type: 'CallExpression',
  start: 251,
  end: 263,
  callee: Node { type: 'Identifier', start: 251, end: 254, name: 'bar' },
  arguments: 
   [ Node { type: 'Literal', start: 255, end: 256, value: 1, raw: '1' },
     Node { type: 'Literal', start: 258, end: 259, value: 2, raw: '2' },
     Node { type: 'Literal', start: 261, end: 262, value: 3, raw: '3' } ] }
CallExpression
251
263
Node { type: 'Identifier', start: 251, end: 254, name: 'bar' }
Identifier
251
254
bar
[ Node { type: 'Literal', start: 255, end: 256, value: 1, raw: '1' },
  Node { type: 'Literal', start: 258, end: 259, value: 2, raw: '2' },
  Node { type: 'Literal', start: 261, end: 262, value: 3, raw: '3' } ]
Node { type: 'Literal', start: 255, end: 256, value: 1, raw: '1' }
Literal
255
256
1
1
Node { type: 'Literal', start: 258, end: 259, value: 2, raw: '2' }
Literal
258
259
2
2
Node { type: 'Literal', start: 261, end: 262, value: 3, raw: '3' }
Literal
261
262
3
3
var
Node {
  type: 'IfStatement',
  start: 269,
  end: 332,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 273,
     end: 285,
     left: Node { type: 'Identifier', start: 273, end: 279, name: 'result' },
     operator: '!=',
     right: Node { type: 'Literal', start: 283, end: 285, value: 47, raw: '47' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 295,
     end: 332,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 301,
        end: 331,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
269
332
Node {
  type: 'BinaryExpression',
  start: 273,
  end: 285,
  left: Node { type: 'Identifier', start: 273, end: 279, name: 'result' },
  operator: '!=',
  right: Node { type: 'Literal', start: 283, end: 285, value: 47, raw: '47' } }
BinaryExpression
273
285
Node { type: 'Identifier', start: 273, end: 279, name: 'result' }
Identifier
273
279
result
!=
Node { type: 'Literal', start: 283, end: 285, value: 47, raw: '47' }
Literal
283
285
47
47
Node {
  type: 'ThrowStatement',
  start: 295,
  end: 332,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 301,
     end: 331,
     left: 
      Node {
        type: 'Literal',
        start: 301,
        end: 322,
        value: 'Error: bad result: ',
        raw: '"Error: bad result: "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 325, end: 331, name: 'result' } } }
ThrowStatement
295
332
Node {
  type: 'BinaryExpression',
  start: 301,
  end: 331,
  left: 
   Node {
     type: 'Literal',
     start: 301,
     end: 322,
     value: 'Error: bad result: ',
     raw: '"Error: bad result: "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 325, end: 331, name: 'result' } }
BinaryExpression
301
331
Node {
  type: 'Literal',
  start: 301,
  end: 322,
  value: 'Error: bad result: ',
  raw: '"Error: bad result: "' }
Literal
301
322
Error: bad result: 
"Error: bad result: "
+
Node { type: 'Identifier', start: 325, end: 331, name: 'result' }
Identifier
325
331
result
null
[+] Exception: forward-varargs-for-inlined-escaped-arguments.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1295,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 117,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 119,
       end: 468,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 470,
       end: 882,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 884,
       end: 1294,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
1295
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 117,
    id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 36, end: 117, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 119,
    end: 468,
    id: Node { type: 'Identifier', start: 128, end: 139, name: 'shouldThrow' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 160, end: 468, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 470,
    end: 882,
    expression: 
     Node {
       type: 'CallExpression',
       start: 471,
       end: 880,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'ExpressionStatement',
    start: 884,
    end: 1294,
    expression: 
     Node {
       type: 'CallExpression',
       start: 885,
       end: 1292,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 117,
  id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
     Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ],
  body: Node { type: 'BlockStatement', start: 36, end: 117, body: [ [Node] ] } }
FunctionDeclaration
0
117
Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' }
Identifier
9
17
shouldBe
false
false
false
[ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
  Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ]
Node { type: 'Identifier', start: 18, end: 24, name: 'actual' }
Identifier
18
24
actual
Node { type: 'Identifier', start: 26, end: 34, name: 'expected' }
Identifier
26
34
expected
Node {
  type: 'BlockStatement',
  start: 36,
  end: 117,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 42,
       end: 115,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
36
117
[ Node {
    type: 'IfStatement',
    start: 42,
    end: 115,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 46,
       end: 65,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 75, end: 115, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 42,
  end: 115,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 46,
     end: 65,
     left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
     operator: '!==',
     right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 75,
     end: 115,
     argument: 
      Node {
        type: 'NewExpression',
        start: 81,
        end: 114,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
42
115
Node {
  type: 'BinaryExpression',
  start: 46,
  end: 65,
  left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
  operator: '!==',
  right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } }
BinaryExpression
46
65
Node { type: 'Identifier', start: 46, end: 52, name: 'actual' }
Identifier
46
52
actual
!==
Node { type: 'Identifier', start: 57, end: 65, name: 'expected' }
Identifier
57
65
expected
Node {
  type: 'ThrowStatement',
  start: 75,
  end: 115,
  argument: 
   Node {
     type: 'NewExpression',
     start: 81,
     end: 114,
     callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
75
115
Node {
  type: 'NewExpression',
  start: 81,
  end: 114,
  callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
  arguments: 
   [ Node {
       type: 'BinaryExpression',
       start: 91,
       end: 113,
       left: [Node],
       operator: '+',
       right: [Node] } ] }
NewExpression
81
114
Node { type: 'Identifier', start: 85, end: 90, name: 'Error' }
Identifier
85
90
Error
[ Node {
    type: 'BinaryExpression',
    start: 91,
    end: 113,
    left: 
     Node {
       type: 'Literal',
       start: 91,
       end: 104,
       value: 'bad value: ',
       raw: '\'bad value: \'' },
    operator: '+',
    right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } } ]
Node {
  type: 'BinaryExpression',
  start: 91,
  end: 113,
  left: 
   Node {
     type: 'Literal',
     start: 91,
     end: 104,
     value: 'bad value: ',
     raw: '\'bad value: \'' },
  operator: '+',
  right: Node { type: 'Identifier', start: 107, end: 113, name: 'actual' } }
BinaryExpression
91
113
Node {
  type: 'Literal',
  start: 91,
  end: 104,
  value: 'bad value: ',
  raw: '\'bad value: \'' }
Literal
91
104
bad value: 
'bad value: '
+
Node { type: 'Identifier', start: 107, end: 113, name: 'actual' }
Identifier
107
113
actual
null
[+] Exception: freeze-and-seal-should-prevent-extensions.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 186,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 16,
       end: 29,
       expression: [Node],
       directive: 'use strict' },
     Node {
       type: 'VariableDeclaration',
       start: 31,
       end: 37,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'VariableDeclaration',
       start: 39,
       end: 101,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'ExpressionStatement',
       start: 103,
       end: 120,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 122,
       end: 133,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 135,
       end: 184,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
186
[ Node {
    type: 'ExpressionStatement',
    start: 16,
    end: 29,
    expression: 
     Node {
       type: 'Literal',
       start: 16,
       end: 28,
       value: 'use strict',
       raw: '"use strict"' },
    directive: 'use strict' },
  Node {
    type: 'VariableDeclaration',
    start: 31,
    end: 37,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'VariableDeclaration',
    start: 39,
    end: 101,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'ExpressionStatement',
    start: 103,
    end: 120,
    expression: 
     Node {
       type: 'CallExpression',
       start: 103,
       end: 119,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 122,
    end: 133,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 122,
       end: 132,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'IfStatement',
    start: 135,
    end: 184,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 139,
       end: 146,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 152, end: 184, argument: [Node] },
    alternate: null } ]
Node {
  type: 'ExpressionStatement',
  start: 16,
  end: 29,
  expression: 
   Node {
     type: 'Literal',
     start: 16,
     end: 28,
     value: 'use strict',
     raw: '"use strict"' },
  directive: 'use strict' }
ExpressionStatement
16
29
Node {
  type: 'Literal',
  start: 16,
  end: 28,
  value: 'use strict',
  raw: '"use strict"' }
Literal
16
28
use strict
"use strict"
use strict
Node {
  type: 'VariableDeclaration',
  start: 31,
  end: 37,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 35,
       end: 36,
       id: [Node],
       init: null } ],
  kind: 'let' }
VariableDeclaration
31
37
[ Node {
    type: 'VariableDeclarator',
    start: 35,
    end: 36,
    id: Node { type: 'Identifier', start: 35, end: 36, name: 'x' },
    init: null } ]
Node {
  type: 'VariableDeclarator',
  start: 35,
  end: 36,
  id: Node { type: 'Identifier', start: 35, end: 36, name: 'x' },
  init: null }
VariableDeclarator
35
36
Node { type: 'Identifier', start: 35, end: 36, name: 'x' }
Identifier
35
36
x
null
[+] Exception: freeze-setter.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 683,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 0,
       end: 41,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'TryStatement',
       start: 43,
       end: 77,
       block: [Node],
       handler: [Node],
       finalizer: null },
     Node {
       type: 'IfStatement',
       start: 79,
       end: 150,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 152,
       end: 167,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 169,
       end: 239,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 241,
       end: 259,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 261,
       end: 334,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 337,
       end: 372,
       expression: [Node] },
     Node {
       type: 'TryStatement',
       start: 374,
       end: 408,
       block: [Node],
       handler: [Node],
       finalizer: null },
     Node {
       type: 'ExpressionStatement',
       start: 409,
       end: 424,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 427,
       end: 498,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 500,
       end: 515,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 517,
       end: 587,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 589,
       end: 607,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 609,
       end: 682,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
683
[ Node {
    type: 'VariableDeclaration',
    start: 0,
    end: 41,
    declarations: [ [Node], [Node] ],
    kind: 'var' },
  Node {
    type: 'TryStatement',
    start: 43,
    end: 77,
    block: Node { type: 'BlockStatement', start: 47, end: 63, body: [Array] },
    handler: 
     Node {
       type: 'CatchClause',
       start: 64,
       end: 77,
       param: [Node],
       body: [Node] },
    finalizer: null },
  Node {
    type: 'IfStatement',
    start: 79,
    end: 150,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 82,
       end: 103,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 109, end: 150, argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 152,
    end: 167,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 152,
       end: 166,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'IfStatement',
    start: 169,
    end: 239,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 172,
       end: 188,
       left: [Node],
       operator: '===',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 194, end: 239, argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 241,
    end: 259,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 241,
       end: 258,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'IfStatement',
    start: 261,
    end: 334,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 264,
       end: 283,
       left: [Node],
       operator: '===',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 289, end: 334, argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 337,
    end: 372,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 337,
       end: 371,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'TryStatement',
    start: 374,
    end: 408,
    block: Node { type: 'BlockStatement', start: 378, end: 394, body: [Array] },
    handler: 
     Node {
       type: 'CatchClause',
       start: 395,
       end: 408,
       param: [Node],
       body: [Node] },
    finalizer: null },
  Node {
    type: 'ExpressionStatement',
    start: 409,
    end: 424,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 409,
       end: 423,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'IfStatement',
    start: 427,
    end: 498,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 430,
       end: 451,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 457, end: 498, argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 500,
    end: 515,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 500,
       end: 514,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'IfStatement',
    start: 517,
    end: 587,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 520,
       end: 536,
       left: [Node],
       operator: '===',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 542, end: 587, argument: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 589,
    end: 607,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 589,
       end: 606,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'IfStatement',
    start: 609,
    end: 682,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 612,
       end: 631,
       left: [Node],
       operator: '===',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 637, end: 682, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 0,
  end: 41,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 4,
       end: 25,
       id: [Node],
       init: [Node] },
     Node {
       type: 'VariableDeclarator',
       start: 31,
       end: 40,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
0
41
[ Node {
    type: 'VariableDeclarator',
    start: 4,
    end: 25,
    id: Node { type: 'Identifier', start: 4, end: 5, name: 'o' },
    init: 
     Node {
       type: 'CallExpression',
       start: 8,
       end: 25,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclarator',
    start: 31,
    end: 40,
    id: Node { type: 'Identifier', start: 31, end: 35, name: 'leak' },
    init: Node { type: 'ObjectExpression', start: 38, end: 40, properties: [] } } ]
Node {
  type: 'VariableDeclarator',
  start: 4,
  end: 25,
  id: Node { type: 'Identifier', start: 4, end: 5, name: 'o' },
  init: 
   Node {
     type: 'CallExpression',
     start: 8,
     end: 25,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 8,
        end: 21,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [ [Node] ] } }
VariableDeclarator
4
25
Node { type: 'Identifier', start: 4, end: 5, name: 'o' }
Identifier
4
5
o
Node {
  type: 'CallExpression',
  start: 8,
  end: 25,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 8,
     end: 21,
     object: Node { type: 'Identifier', start: 8, end: 14, name: 'Object' },
     property: Node { type: 'Identifier', start: 15, end: 21, name: 'freeze' },
     computed: false },
  arguments: 
   [ Node { type: 'ArrayExpression', start: 22, end: 24, elements: [] } ] }
CallExpression
8
25
Node {
  type: 'MemberExpression',
  start: 8,
  end: 21,
  object: Node { type: 'Identifier', start: 8, end: 14, name: 'Object' },
  property: Node { type: 'Identifier', start: 15, end: 21, name: 'freeze' },
  computed: false }
MemberExpression
8
21
Node { type: 'Identifier', start: 8, end: 14, name: 'Object' }
Identifier
8
14
Object
Node { type: 'Identifier', start: 15, end: 21, name: 'freeze' }
Identifier
15
21
freeze
false
[ Node { type: 'ArrayExpression', start: 22, end: 24, elements: [] } ]
Node { type: 'ArrayExpression', start: 22, end: 24, elements: [] }
ArrayExpression
22
24
[]
Node {
  type: 'VariableDeclarator',
  start: 31,
  end: 40,
  id: Node { type: 'Identifier', start: 31, end: 35, name: 'leak' },
  init: Node { type: 'ObjectExpression', start: 38, end: 40, properties: [] } }
VariableDeclarator
31
40
Node { type: 'Identifier', start: 31, end: 35, name: 'leak' }
Identifier
31
35
leak
Node { type: 'ObjectExpression', start: 38, end: 40, properties: [] }
ObjectExpression
38
40
[]
var
Node {
  type: 'TryStatement',
  start: 43,
  end: 77,
  block: Node { type: 'BlockStatement', start: 47, end: 63, body: [ [Node] ] },
  handler: 
   Node {
     type: 'CatchClause',
     start: 64,
     end: 77,
     param: Node { type: 'Identifier', start: 71, end: 73, name: 'ex' },
     body: Node { type: 'BlockStatement', start: 75, end: 77, body: [] } },
  finalizer: null }
TryStatement
43
77
Node {
  type: 'BlockStatement',
  start: 47,
  end: 63,
  body: 
   [ Node { type: 'ThrowStatement', start: 52, end: 60, argument: [Node] } ] }
BlockStatement
47
63
[ Node {
    type: 'ThrowStatement',
    start: 52,
    end: 60,
    argument: Node { type: 'Identifier', start: 58, end: 59, name: 'o' } } ]
Node {
  type: 'ThrowStatement',
  start: 52,
  end: 60,
  argument: Node { type: 'Identifier', start: 58, end: 59, name: 'o' } }
ThrowStatement
52
60
Node { type: 'Identifier', start: 58, end: 59, name: 'o' }
Identifier
58
59
o
Node {
  type: 'CatchClause',
  start: 64,
  end: 77,
  param: Node { type: 'Identifier', start: 71, end: 73, name: 'ex' },
  body: Node { type: 'BlockStatement', start: 75, end: 77, body: [] } }
CatchClause
64
77
Node { type: 'Identifier', start: 71, end: 73, name: 'ex' }
Identifier
71
73
ex
Node { type: 'BlockStatement', start: 75, end: 77, body: [] }
BlockStatement
75
77
[]
null
[+] Exception: freeze_leek.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 207,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 34,
       end: 77,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 79,
       end: 93,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 95,
       end: 105,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ForStatement',
       start: 106,
       end: 154,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'IfStatement',
       start: 156,
       end: 206,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
207
[ Node {
    type: 'FunctionDeclaration',
    start: 34,
    end: 77,
    id: Node { type: 'Identifier', start: 43, end: 46, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 50, end: 77, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 79,
    end: 93,
    expression: 
     Node {
       type: 'CallExpression',
       start: 79,
       end: 92,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 95,
    end: 105,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ForStatement',
    start: 106,
    end: 154,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 111,
       end: 120,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 122,
       end: 132,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 134,
       end: 137,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 143,
       end: 154,
       expression: [Node] } },
  Node {
    type: 'IfStatement',
    start: 156,
    end: 206,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 160,
       end: 184,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'BlockStatement', start: 185, end: 206, body: [Array] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 34,
  end: 77,
  id: Node { type: 'Identifier', start: 43, end: 46, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 47, end: 48, name: 'x' } ],
  body: Node { type: 'BlockStatement', start: 50, end: 77, body: [ [Node] ] } }
FunctionDeclaration
34
77
Node { type: 'Identifier', start: 43, end: 46, name: 'foo' }
Identifier
43
46
foo
false
false
false
[ Node { type: 'Identifier', start: 47, end: 48, name: 'x' } ]
Node { type: 'Identifier', start: 47, end: 48, name: 'x' }
Identifier
47
48
x
Node {
  type: 'BlockStatement',
  start: 50,
  end: 77,
  body: 
   [ Node { type: 'ReturnStatement', start: 56, end: 75, argument: [Node] } ] }
BlockStatement
50
77
[ Node {
    type: 'ReturnStatement',
    start: 56,
    end: 75,
    argument: 
     Node {
       type: 'CallExpression',
       start: 63,
       end: 74,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'ReturnStatement',
  start: 56,
  end: 75,
  argument: 
   Node {
     type: 'CallExpression',
     start: 63,
     end: 74,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 63,
        end: 71,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [ [Node] ] } }
ReturnStatement
56
75
Node {
  type: 'CallExpression',
  start: 63,
  end: 74,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 63,
     end: 71,
     object: Node { type: 'Identifier', start: 63, end: 67, name: 'Math' },
     property: Node { type: 'Identifier', start: 68, end: 71, name: 'cos' },
     computed: false },
  arguments: [ Node { type: 'Identifier', start: 72, end: 73, name: 'x' } ] }
CallExpression
63
74
Node {
  type: 'MemberExpression',
  start: 63,
  end: 71,
  object: Node { type: 'Identifier', start: 63, end: 67, name: 'Math' },
  property: Node { type: 'Identifier', start: 68, end: 71, name: 'cos' },
  computed: false }
MemberExpression
63
71
Node { type: 'Identifier', start: 63, end: 67, name: 'Math' }
Identifier
63
67
Math
Node { type: 'Identifier', start: 68, end: 71, name: 'cos' }
Identifier
68
71
cos
false
[ Node { type: 'Identifier', start: 72, end: 73, name: 'x' } ]
Node { type: 'Identifier', start: 72, end: 73, name: 'x' }
Identifier
72
73
x
Node {
  type: 'ExpressionStatement',
  start: 79,
  end: 93,
  expression: 
   Node {
     type: 'CallExpression',
     start: 79,
     end: 92,
     callee: Node { type: 'Identifier', start: 79, end: 87, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
79
93
Node {
  type: 'CallExpression',
  start: 79,
  end: 92,
  callee: Node { type: 'Identifier', start: 79, end: 87, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 88, end: 91, name: 'foo' } ] }
CallExpression
79
92
Node { type: 'Identifier', start: 79, end: 87, name: 'noInline' }
Identifier
79
87
noInline
[ Node { type: 'Identifier', start: 88, end: 91, name: 'foo' } ]
Node { type: 'Identifier', start: 88, end: 91, name: 'foo' }
Identifier
88
91
foo
Node {
  type: 'VariableDeclaration',
  start: 95,
  end: 105,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 99,
       end: 104,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
95
105
[ Node {
    type: 'VariableDeclarator',
    start: 99,
    end: 104,
    id: Node { type: 'Identifier', start: 99, end: 100, name: 'j' },
    init: Node { type: 'Literal', start: 103, end: 104, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 99,
  end: 104,
  id: Node { type: 'Identifier', start: 99, end: 100, name: 'j' },
  init: Node { type: 'Literal', start: 103, end: 104, value: 0, raw: '0' } }
VariableDeclarator
99
104
Node { type: 'Identifier', start: 99, end: 100, name: 'j' }
Identifier
99
100
j
Node { type: 'Literal', start: 103, end: 104, value: 0, raw: '0' }
Literal
103
104
0
0
var
Node {
  type: 'ForStatement',
  start: 106,
  end: 154,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 111,
     end: 120,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 122,
     end: 132,
     left: Node { type: 'Identifier', start: 122, end: 123, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 126,
        end: 132,
        value: 100000,
        raw: '100000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 134,
     end: 137,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 136, end: 137, name: 'i' } },
  body: 
   Node {
     type: 'ExpressionStatement',
     start: 143,
     end: 154,
     expression: 
      Node {
        type: 'AssignmentExpression',
        start: 143,
        end: 153,
        operator: '=',
        left: [Node],
        right: [Node] } } }
ForStatement
106
154
Node {
  type: 'VariableDeclaration',
  start: 111,
  end: 120,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 115,
       end: 120,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
111
120
[ Node {
    type: 'VariableDeclarator',
    start: 115,
    end: 120,
    id: Node { type: 'Identifier', start: 115, end: 116, name: 'i' },
    init: Node { type: 'Literal', start: 119, end: 120, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 115,
  end: 120,
  id: Node { type: 'Identifier', start: 115, end: 116, name: 'i' },
  init: Node { type: 'Literal', start: 119, end: 120, value: 0, raw: '0' } }
VariableDeclarator
115
120
Node { type: 'Identifier', start: 115, end: 116, name: 'i' }
Identifier
115
116
i
Node { type: 'Literal', start: 119, end: 120, value: 0, raw: '0' }
Literal
119
120
0
0
var
Node {
  type: 'BinaryExpression',
  start: 122,
  end: 132,
  left: Node { type: 'Identifier', start: 122, end: 123, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 126,
     end: 132,
     value: 100000,
     raw: '100000' } }
BinaryExpression
122
132
Node { type: 'Identifier', start: 122, end: 123, name: 'i' }
Identifier
122
123
i
<
Node {
  type: 'Literal',
  start: 126,
  end: 132,
  value: 100000,
  raw: '100000' }
Literal
126
132
100000
100000
Node {
  type: 'UpdateExpression',
  start: 134,
  end: 137,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 136, end: 137, name: 'i' } }
UpdateExpression
134
137
++
true
Node { type: 'Identifier', start: 136, end: 137, name: 'i' }
Identifier
136
137
i
Node {
  type: 'ExpressionStatement',
  start: 143,
  end: 154,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 143,
     end: 153,
     operator: '=',
     left: Node { type: 'Identifier', start: 143, end: 144, name: 'j' },
     right: 
      Node {
        type: 'CallExpression',
        start: 147,
        end: 153,
        callee: [Node],
        arguments: [Array] } } }
ExpressionStatement
143
154
Node {
  type: 'AssignmentExpression',
  start: 143,
  end: 153,
  operator: '=',
  left: Node { type: 'Identifier', start: 143, end: 144, name: 'j' },
  right: 
   Node {
     type: 'CallExpression',
     start: 147,
     end: 153,
     callee: Node { type: 'Identifier', start: 147, end: 150, name: 'foo' },
     arguments: [ [Node] ] } }
AssignmentExpression
143
153
=
Node { type: 'Identifier', start: 143, end: 144, name: 'j' }
Identifier
143
144
j
Node {
  type: 'CallExpression',
  start: 147,
  end: 153,
  callee: Node { type: 'Identifier', start: 147, end: 150, name: 'foo' },
  arguments: 
   [ Node { type: 'Identifier', start: 151, end: 152, name: 'i' } ] }
CallExpression
147
153
Node { type: 'Identifier', start: 147, end: 150, name: 'foo' }
Identifier
147
150
foo
[ Node { type: 'Identifier', start: 151, end: 152, name: 'i' } ]
Node { type: 'Identifier', start: 151, end: 152, name: 'i' }
Identifier
151
152
i
Node {
  type: 'IfStatement',
  start: 156,
  end: 206,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 160,
     end: 184,
     left: 
      Node {
        type: 'UnaryExpression',
        start: 160,
        end: 179,
        operator: '-',
        prefix: true,
        argument: [Node] },
     operator: '!=',
     right: Node { type: 'Identifier', start: 183, end: 184, name: 'j' } },
  consequent: Node { type: 'BlockStatement', start: 185, end: 206, body: [ [Node] ] },
  alternate: null }
IfStatement
156
206
Node {
  type: 'BinaryExpression',
  start: 160,
  end: 184,
  left: 
   Node {
     type: 'UnaryExpression',
     start: 160,
     end: 179,
     operator: '-',
     prefix: true,
     argument: 
      Node {
        type: 'Literal',
        start: 161,
        end: 179,
        value: 0.5098753724179009,
        raw: '0.5098753724179009' } },
  operator: '!=',
  right: Node { type: 'Identifier', start: 183, end: 184, name: 'j' } }
BinaryExpression
160
184
Node {
  type: 'UnaryExpression',
  start: 160,
  end: 179,
  operator: '-',
  prefix: true,
  argument: 
   Node {
     type: 'Literal',
     start: 161,
     end: 179,
     value: 0.5098753724179009,
     raw: '0.5098753724179009' } }
UnaryExpression
160
179
-
true
Node {
  type: 'Literal',
  start: 161,
  end: 179,
  value: 0.5098753724179009,
  raw: '0.5098753724179009' }
Literal
161
179
0.5098753724179009
0.5098753724179009
!=
Node { type: 'Identifier', start: 183, end: 184, name: 'j' }
Identifier
183
184
j
Node {
  type: 'BlockStatement',
  start: 185,
  end: 206,
  body: 
   [ Node { type: 'ThrowStatement', start: 191, end: 204, argument: [Node] } ] }
BlockStatement
185
206
[ Node {
    type: 'ThrowStatement',
    start: 191,
    end: 204,
    argument: 
     Node {
       type: 'Literal',
       start: 197,
       end: 204,
       value: 'Error',
       raw: '"Error"' } } ]
Node {
  type: 'ThrowStatement',
  start: 191,
  end: 204,
  argument: 
   Node {
     type: 'Literal',
     start: 197,
     end: 204,
     value: 'Error',
     raw: '"Error"' } }
ThrowStatement
191
204
Node {
  type: 'Literal',
  start: 197,
  end: 204,
  value: 'Error',
  raw: '"Error"' }
Literal
197
204
Error
"Error"
null
[+] Exception: ftl-arithcos.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 171,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 43,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 45,
       end: 59,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 61,
       end: 71,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ForStatement',
       start: 72,
       end: 120,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'IfStatement',
       start: 122,
       end: 170,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
171
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 43,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 16, end: 43, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 45,
    end: 59,
    expression: 
     Node {
       type: 'CallExpression',
       start: 45,
       end: 58,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 61,
    end: 71,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ForStatement',
    start: 72,
    end: 120,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 77,
       end: 86,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 88,
       end: 98,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 100,
       end: 103,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 109,
       end: 120,
       expression: [Node] } },
  Node {
    type: 'IfStatement',
    start: 122,
    end: 170,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 126,
       end: 148,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'BlockStatement', start: 149, end: 170, body: [Array] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 43,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 13, end: 14, name: 'x' } ],
  body: Node { type: 'BlockStatement', start: 16, end: 43, body: [ [Node] ] } }
FunctionDeclaration
0
43
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'x' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'x' }
Identifier
13
14
x
Node {
  type: 'BlockStatement',
  start: 16,
  end: 43,
  body: 
   [ Node { type: 'ReturnStatement', start: 22, end: 41, argument: [Node] } ] }
BlockStatement
16
43
[ Node {
    type: 'ReturnStatement',
    start: 22,
    end: 41,
    argument: 
     Node {
       type: 'CallExpression',
       start: 29,
       end: 40,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'ReturnStatement',
  start: 22,
  end: 41,
  argument: 
   Node {
     type: 'CallExpression',
     start: 29,
     end: 40,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 29,
        end: 37,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [ [Node] ] } }
ReturnStatement
22
41
Node {
  type: 'CallExpression',
  start: 29,
  end: 40,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 29,
     end: 37,
     object: Node { type: 'Identifier', start: 29, end: 33, name: 'Math' },
     property: Node { type: 'Identifier', start: 34, end: 37, name: 'sin' },
     computed: false },
  arguments: [ Node { type: 'Identifier', start: 38, end: 39, name: 'x' } ] }
CallExpression
29
40
Node {
  type: 'MemberExpression',
  start: 29,
  end: 37,
  object: Node { type: 'Identifier', start: 29, end: 33, name: 'Math' },
  property: Node { type: 'Identifier', start: 34, end: 37, name: 'sin' },
  computed: false }
MemberExpression
29
37
Node { type: 'Identifier', start: 29, end: 33, name: 'Math' }
Identifier
29
33
Math
Node { type: 'Identifier', start: 34, end: 37, name: 'sin' }
Identifier
34
37
sin
false
[ Node { type: 'Identifier', start: 38, end: 39, name: 'x' } ]
Node { type: 'Identifier', start: 38, end: 39, name: 'x' }
Identifier
38
39
x
Node {
  type: 'ExpressionStatement',
  start: 45,
  end: 59,
  expression: 
   Node {
     type: 'CallExpression',
     start: 45,
     end: 58,
     callee: Node { type: 'Identifier', start: 45, end: 53, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
45
59
Node {
  type: 'CallExpression',
  start: 45,
  end: 58,
  callee: Node { type: 'Identifier', start: 45, end: 53, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 54, end: 57, name: 'foo' } ] }
CallExpression
45
58
Node { type: 'Identifier', start: 45, end: 53, name: 'noInline' }
Identifier
45
53
noInline
[ Node { type: 'Identifier', start: 54, end: 57, name: 'foo' } ]
Node { type: 'Identifier', start: 54, end: 57, name: 'foo' }
Identifier
54
57
foo
Node {
  type: 'VariableDeclaration',
  start: 61,
  end: 71,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 65,
       end: 70,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
61
71
[ Node {
    type: 'VariableDeclarator',
    start: 65,
    end: 70,
    id: Node { type: 'Identifier', start: 65, end: 66, name: 'j' },
    init: Node { type: 'Literal', start: 69, end: 70, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 65,
  end: 70,
  id: Node { type: 'Identifier', start: 65, end: 66, name: 'j' },
  init: Node { type: 'Literal', start: 69, end: 70, value: 0, raw: '0' } }
VariableDeclarator
65
70
Node { type: 'Identifier', start: 65, end: 66, name: 'j' }
Identifier
65
66
j
Node { type: 'Literal', start: 69, end: 70, value: 0, raw: '0' }
Literal
69
70
0
0
var
Node {
  type: 'ForStatement',
  start: 72,
  end: 120,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 77,
     end: 86,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 88,
     end: 98,
     left: Node { type: 'Identifier', start: 88, end: 89, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 92,
        end: 98,
        value: 100000,
        raw: '100000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 100,
     end: 103,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 102, end: 103, name: 'i' } },
  body: 
   Node {
     type: 'ExpressionStatement',
     start: 109,
     end: 120,
     expression: 
      Node {
        type: 'AssignmentExpression',
        start: 109,
        end: 119,
        operator: '=',
        left: [Node],
        right: [Node] } } }
ForStatement
72
120
Node {
  type: 'VariableDeclaration',
  start: 77,
  end: 86,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 81,
       end: 86,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
77
86
[ Node {
    type: 'VariableDeclarator',
    start: 81,
    end: 86,
    id: Node { type: 'Identifier', start: 81, end: 82, name: 'i' },
    init: Node { type: 'Literal', start: 85, end: 86, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 81,
  end: 86,
  id: Node { type: 'Identifier', start: 81, end: 82, name: 'i' },
  init: Node { type: 'Literal', start: 85, end: 86, value: 0, raw: '0' } }
VariableDeclarator
81
86
Node { type: 'Identifier', start: 81, end: 82, name: 'i' }
Identifier
81
82
i
Node { type: 'Literal', start: 85, end: 86, value: 0, raw: '0' }
Literal
85
86
0
0
var
Node {
  type: 'BinaryExpression',
  start: 88,
  end: 98,
  left: Node { type: 'Identifier', start: 88, end: 89, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 92,
     end: 98,
     value: 100000,
     raw: '100000' } }
BinaryExpression
88
98
Node { type: 'Identifier', start: 88, end: 89, name: 'i' }
Identifier
88
89
i
<
Node {
  type: 'Literal',
  start: 92,
  end: 98,
  value: 100000,
  raw: '100000' }
Literal
92
98
100000
100000
Node {
  type: 'UpdateExpression',
  start: 100,
  end: 103,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 102, end: 103, name: 'i' } }
UpdateExpression
100
103
++
true
Node { type: 'Identifier', start: 102, end: 103, name: 'i' }
Identifier
102
103
i
Node {
  type: 'ExpressionStatement',
  start: 109,
  end: 120,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 109,
     end: 119,
     operator: '=',
     left: Node { type: 'Identifier', start: 109, end: 110, name: 'j' },
     right: 
      Node {
        type: 'CallExpression',
        start: 113,
        end: 119,
        callee: [Node],
        arguments: [Array] } } }
ExpressionStatement
109
120
Node {
  type: 'AssignmentExpression',
  start: 109,
  end: 119,
  operator: '=',
  left: Node { type: 'Identifier', start: 109, end: 110, name: 'j' },
  right: 
   Node {
     type: 'CallExpression',
     start: 113,
     end: 119,
     callee: Node { type: 'Identifier', start: 113, end: 116, name: 'foo' },
     arguments: [ [Node] ] } }
AssignmentExpression
109
119
=
Node { type: 'Identifier', start: 109, end: 110, name: 'j' }
Identifier
109
110
j
Node {
  type: 'CallExpression',
  start: 113,
  end: 119,
  callee: Node { type: 'Identifier', start: 113, end: 116, name: 'foo' },
  arguments: 
   [ Node { type: 'Identifier', start: 117, end: 118, name: 'i' } ] }
CallExpression
113
119
Node { type: 'Identifier', start: 113, end: 116, name: 'foo' }
Identifier
113
116
foo
[ Node { type: 'Identifier', start: 117, end: 118, name: 'i' } ]
Node { type: 'Identifier', start: 117, end: 118, name: 'i' }
Identifier
117
118
i
Node {
  type: 'IfStatement',
  start: 122,
  end: 170,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 126,
     end: 148,
     left: 
      Node {
        type: 'Literal',
        start: 126,
        end: 143,
        value: 0.860248280789742,
        raw: '0.860248280789742' },
     operator: '!=',
     right: Node { type: 'Identifier', start: 147, end: 148, name: 'j' } },
  consequent: Node { type: 'BlockStatement', start: 149, end: 170, body: [ [Node] ] },
  alternate: null }
IfStatement
122
170
Node {
  type: 'BinaryExpression',
  start: 126,
  end: 148,
  left: 
   Node {
     type: 'Literal',
     start: 126,
     end: 143,
     value: 0.860248280789742,
     raw: '0.860248280789742' },
  operator: '!=',
  right: Node { type: 'Identifier', start: 147, end: 148, name: 'j' } }
BinaryExpression
126
148
Node {
  type: 'Literal',
  start: 126,
  end: 143,
  value: 0.860248280789742,
  raw: '0.860248280789742' }
Literal
126
143
0.860248280789742
0.860248280789742
!=
Node { type: 'Identifier', start: 147, end: 148, name: 'j' }
Identifier
147
148
j
Node {
  type: 'BlockStatement',
  start: 149,
  end: 170,
  body: 
   [ Node { type: 'ThrowStatement', start: 155, end: 168, argument: [Node] } ] }
BlockStatement
149
170
[ Node {
    type: 'ThrowStatement',
    start: 155,
    end: 168,
    argument: 
     Node {
       type: 'Literal',
       start: 161,
       end: 168,
       value: 'Error',
       raw: '"Error"' } } ]
Node {
  type: 'ThrowStatement',
  start: 155,
  end: 168,
  argument: 
   Node {
     type: 'Literal',
     start: 161,
     end: 168,
     value: 'Error',
     raw: '"Error"' } }
ThrowStatement
155
168
Node {
  type: 'Literal',
  start: 161,
  end: 168,
  value: 'Error',
  raw: '"Error"' }
Literal
161
168
Error
"Error"
null
[+] Exception: ftl-arithsin.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 172,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 44,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 46,
       end: 60,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 62,
       end: 72,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ForStatement',
       start: 73,
       end: 121,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'IfStatement',
       start: 123,
       end: 171,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
172
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 44,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 16, end: 44, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 46,
    end: 60,
    expression: 
     Node {
       type: 'CallExpression',
       start: 46,
       end: 59,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 62,
    end: 72,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ForStatement',
    start: 73,
    end: 121,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 78,
       end: 87,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 89,
       end: 99,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 101,
       end: 104,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 110,
       end: 121,
       expression: [Node] } },
  Node {
    type: 'IfStatement',
    start: 123,
    end: 171,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 128,
       end: 149,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'BlockStatement', start: 150, end: 171, body: [Array] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 44,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 13, end: 14, name: 'x' } ],
  body: Node { type: 'BlockStatement', start: 16, end: 44, body: [ [Node] ] } }
FunctionDeclaration
0
44
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'x' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'x' }
Identifier
13
14
x
Node {
  type: 'BlockStatement',
  start: 16,
  end: 44,
  body: 
   [ Node { type: 'ReturnStatement', start: 22, end: 42, argument: [Node] } ] }
BlockStatement
16
44
[ Node {
    type: 'ReturnStatement',
    start: 22,
    end: 42,
    argument: 
     Node {
       type: 'CallExpression',
       start: 29,
       end: 41,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'ReturnStatement',
  start: 22,
  end: 42,
  argument: 
   Node {
     type: 'CallExpression',
     start: 29,
     end: 41,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 29,
        end: 38,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [ [Node] ] } }
ReturnStatement
22
42
Node {
  type: 'CallExpression',
  start: 29,
  end: 41,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 29,
     end: 38,
     object: Node { type: 'Identifier', start: 29, end: 33, name: 'Math' },
     property: Node { type: 'Identifier', start: 34, end: 38, name: 'sqrt' },
     computed: false },
  arguments: [ Node { type: 'Identifier', start: 39, end: 40, name: 'x' } ] }
CallExpression
29
41
Node {
  type: 'MemberExpression',
  start: 29,
  end: 38,
  object: Node { type: 'Identifier', start: 29, end: 33, name: 'Math' },
  property: Node { type: 'Identifier', start: 34, end: 38, name: 'sqrt' },
  computed: false }
MemberExpression
29
38
Node { type: 'Identifier', start: 29, end: 33, name: 'Math' }
Identifier
29
33
Math
Node { type: 'Identifier', start: 34, end: 38, name: 'sqrt' }
Identifier
34
38
sqrt
false
[ Node { type: 'Identifier', start: 39, end: 40, name: 'x' } ]
Node { type: 'Identifier', start: 39, end: 40, name: 'x' }
Identifier
39
40
x
Node {
  type: 'ExpressionStatement',
  start: 46,
  end: 60,
  expression: 
   Node {
     type: 'CallExpression',
     start: 46,
     end: 59,
     callee: Node { type: 'Identifier', start: 46, end: 54, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
46
60
Node {
  type: 'CallExpression',
  start: 46,
  end: 59,
  callee: Node { type: 'Identifier', start: 46, end: 54, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 55, end: 58, name: 'foo' } ] }
CallExpression
46
59
Node { type: 'Identifier', start: 46, end: 54, name: 'noInline' }
Identifier
46
54
noInline
[ Node { type: 'Identifier', start: 55, end: 58, name: 'foo' } ]
Node { type: 'Identifier', start: 55, end: 58, name: 'foo' }
Identifier
55
58
foo
Node {
  type: 'VariableDeclaration',
  start: 62,
  end: 72,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 66,
       end: 71,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
62
72
[ Node {
    type: 'VariableDeclarator',
    start: 66,
    end: 71,
    id: Node { type: 'Identifier', start: 66, end: 67, name: 'j' },
    init: Node { type: 'Literal', start: 70, end: 71, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 66,
  end: 71,
  id: Node { type: 'Identifier', start: 66, end: 67, name: 'j' },
  init: Node { type: 'Literal', start: 70, end: 71, value: 0, raw: '0' } }
VariableDeclarator
66
71
Node { type: 'Identifier', start: 66, end: 67, name: 'j' }
Identifier
66
67
j
Node { type: 'Literal', start: 70, end: 71, value: 0, raw: '0' }
Literal
70
71
0
0
var
Node {
  type: 'ForStatement',
  start: 73,
  end: 121,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 78,
     end: 87,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 89,
     end: 99,
     left: Node { type: 'Identifier', start: 89, end: 90, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 93,
        end: 99,
        value: 100000,
        raw: '100000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 101,
     end: 104,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 103, end: 104, name: 'i' } },
  body: 
   Node {
     type: 'ExpressionStatement',
     start: 110,
     end: 121,
     expression: 
      Node {
        type: 'AssignmentExpression',
        start: 110,
        end: 120,
        operator: '=',
        left: [Node],
        right: [Node] } } }
ForStatement
73
121
Node {
  type: 'VariableDeclaration',
  start: 78,
  end: 87,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 82,
       end: 87,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
78
87
[ Node {
    type: 'VariableDeclarator',
    start: 82,
    end: 87,
    id: Node { type: 'Identifier', start: 82, end: 83, name: 'i' },
    init: Node { type: 'Literal', start: 86, end: 87, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 82,
  end: 87,
  id: Node { type: 'Identifier', start: 82, end: 83, name: 'i' },
  init: Node { type: 'Literal', start: 86, end: 87, value: 0, raw: '0' } }
VariableDeclarator
82
87
Node { type: 'Identifier', start: 82, end: 83, name: 'i' }
Identifier
82
83
i
Node { type: 'Literal', start: 86, end: 87, value: 0, raw: '0' }
Literal
86
87
0
0
var
Node {
  type: 'BinaryExpression',
  start: 89,
  end: 99,
  left: Node { type: 'Identifier', start: 89, end: 90, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 93,
     end: 99,
     value: 100000,
     raw: '100000' } }
BinaryExpression
89
99
Node { type: 'Identifier', start: 89, end: 90, name: 'i' }
Identifier
89
90
i
<
Node {
  type: 'Literal',
  start: 93,
  end: 99,
  value: 100000,
  raw: '100000' }
Literal
93
99
100000
100000
Node {
  type: 'UpdateExpression',
  start: 101,
  end: 104,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 103, end: 104, name: 'i' } }
UpdateExpression
101
104
++
true
Node { type: 'Identifier', start: 103, end: 104, name: 'i' }
Identifier
103
104
i
Node {
  type: 'ExpressionStatement',
  start: 110,
  end: 121,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 110,
     end: 120,
     operator: '=',
     left: Node { type: 'Identifier', start: 110, end: 111, name: 'j' },
     right: 
      Node {
        type: 'CallExpression',
        start: 114,
        end: 120,
        callee: [Node],
        arguments: [Array] } } }
ExpressionStatement
110
121
Node {
  type: 'AssignmentExpression',
  start: 110,
  end: 120,
  operator: '=',
  left: Node { type: 'Identifier', start: 110, end: 111, name: 'j' },
  right: 
   Node {
     type: 'CallExpression',
     start: 114,
     end: 120,
     callee: Node { type: 'Identifier', start: 114, end: 117, name: 'foo' },
     arguments: [ [Node] ] } }
AssignmentExpression
110
120
=
Node { type: 'Identifier', start: 110, end: 111, name: 'j' }
Identifier
110
111
j
Node {
  type: 'CallExpression',
  start: 114,
  end: 120,
  callee: Node { type: 'Identifier', start: 114, end: 117, name: 'foo' },
  arguments: 
   [ Node { type: 'Identifier', start: 118, end: 119, name: 'i' } ] }
CallExpression
114
120
Node { type: 'Identifier', start: 114, end: 117, name: 'foo' }
Identifier
114
117
foo
[ Node { type: 'Identifier', start: 118, end: 119, name: 'i' } ]
Node { type: 'Identifier', start: 118, end: 119, name: 'i' }
Identifier
118
119
i
Node {
  type: 'IfStatement',
  start: 123,
  end: 171,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 128,
     end: 149,
     left: 
      Node {
        type: 'Literal',
        start: 128,
        end: 144,
        value: 316.226184874055,
        raw: '316.226184874055' },
     operator: '!=',
     right: Node { type: 'Identifier', start: 148, end: 149, name: 'j' } },
  consequent: Node { type: 'BlockStatement', start: 150, end: 171, body: [ [Node] ] },
  alternate: null }
IfStatement
123
171
Node {
  type: 'BinaryExpression',
  start: 128,
  end: 149,
  left: 
   Node {
     type: 'Literal',
     start: 128,
     end: 144,
     value: 316.226184874055,
     raw: '316.226184874055' },
  operator: '!=',
  right: Node { type: 'Identifier', start: 148, end: 149, name: 'j' } }
BinaryExpression
128
149
Node {
  type: 'Literal',
  start: 128,
  end: 144,
  value: 316.226184874055,
  raw: '316.226184874055' }
Literal
128
144
316.226184874055
316.226184874055
!=
Node { type: 'Identifier', start: 148, end: 149, name: 'j' }
Identifier
148
149
j
Node {
  type: 'BlockStatement',
  start: 150,
  end: 171,
  body: 
   [ Node { type: 'ThrowStatement', start: 156, end: 169, argument: [Node] } ] }
BlockStatement
150
171
[ Node {
    type: 'ThrowStatement',
    start: 156,
    end: 169,
    argument: 
     Node {
       type: 'Literal',
       start: 162,
       end: 169,
       value: 'Error',
       raw: '"Error"' } } ]
Node {
  type: 'ThrowStatement',
  start: 156,
  end: 169,
  argument: 
   Node {
     type: 'Literal',
     start: 162,
     end: 169,
     value: 'Error',
     raw: '"Error"' } }
ThrowStatement
156
169
Node {
  type: 'Literal',
  start: 162,
  end: 169,
  value: 'Error',
  raw: '"Error"' }
Literal
162
169
Error
"Error"
null
[+] Exception: ftl-arithsqrt.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 201,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 43,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 45,
       end: 59,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 61,
       end: 92,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 93,
       end: 103,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ForStatement',
       start: 104,
       end: 152,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'IfStatement',
       start: 154,
       end: 200,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
201
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 43,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 16, end: 43, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 45,
    end: 59,
    expression: 
     Node {
       type: 'CallExpression',
       start: 45,
       end: 58,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 61,
    end: 92,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 93,
    end: 103,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ForStatement',
    start: 104,
    end: 152,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 109,
       end: 118,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 120,
       end: 130,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 132,
       end: 135,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 141,
       end: 152,
       expression: [Node] } },
  Node {
    type: 'IfStatement',
    start: 154,
    end: 200,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 158,
       end: 171,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'BlockStatement', start: 172, end: 200, body: [Array] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 43,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 13, end: 14, name: 'x' } ],
  body: Node { type: 'BlockStatement', start: 16, end: 43, body: [ [Node] ] } }
FunctionDeclaration
0
43
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'x' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'x' }
Identifier
13
14
x
Node {
  type: 'BlockStatement',
  start: 16,
  end: 43,
  body: 
   [ Node { type: 'ReturnStatement', start: 22, end: 41, argument: [Node] } ] }
BlockStatement
16
43
[ Node {
    type: 'ReturnStatement',
    start: 22,
    end: 41,
    argument: 
     Node {
       type: 'CallExpression',
       start: 29,
       end: 40,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'ReturnStatement',
  start: 22,
  end: 41,
  argument: 
   Node {
     type: 'CallExpression',
     start: 29,
     end: 40,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 29,
        end: 37,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [ [Node] ] } }
ReturnStatement
22
41
Node {
  type: 'CallExpression',
  start: 29,
  end: 40,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 29,
     end: 37,
     object: Node { type: 'Identifier', start: 29, end: 33, name: 'Math' },
     property: Node { type: 'Identifier', start: 34, end: 37, name: 'tan' },
     computed: false },
  arguments: [ Node { type: 'Identifier', start: 38, end: 39, name: 'x' } ] }
CallExpression
29
40
Node {
  type: 'MemberExpression',
  start: 29,
  end: 37,
  object: Node { type: 'Identifier', start: 29, end: 33, name: 'Math' },
  property: Node { type: 'Identifier', start: 34, end: 37, name: 'tan' },
  computed: false }
MemberExpression
29
37
Node { type: 'Identifier', start: 29, end: 33, name: 'Math' }
Identifier
29
33
Math
Node { type: 'Identifier', start: 34, end: 37, name: 'tan' }
Identifier
34
37
tan
false
[ Node { type: 'Identifier', start: 38, end: 39, name: 'x' } ]
Node { type: 'Identifier', start: 38, end: 39, name: 'x' }
Identifier
38
39
x
Node {
  type: 'ExpressionStatement',
  start: 45,
  end: 59,
  expression: 
   Node {
     type: 'CallExpression',
     start: 45,
     end: 58,
     callee: Node { type: 'Identifier', start: 45, end: 53, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
45
59
Node {
  type: 'CallExpression',
  start: 45,
  end: 58,
  callee: Node { type: 'Identifier', start: 45, end: 53, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 54, end: 57, name: 'foo' } ] }
CallExpression
45
58
Node { type: 'Identifier', start: 45, end: 53, name: 'noInline' }
Identifier
45
53
noInline
[ Node { type: 'Identifier', start: 54, end: 57, name: 'foo' } ]
Node { type: 'Identifier', start: 54, end: 57, name: 'foo' }
Identifier
54
57
foo
Node {
  type: 'VariableDeclaration',
  start: 61,
  end: 92,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 65,
       end: 91,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
61
92
[ Node {
    type: 'VariableDeclarator',
    start: 65,
    end: 91,
    id: Node { type: 'Identifier', start: 65, end: 73, name: 'expected' },
    init: 
     Node {
       type: 'CallExpression',
       start: 76,
       end: 91,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 65,
  end: 91,
  id: Node { type: 'Identifier', start: 65, end: 73, name: 'expected' },
  init: 
   Node {
     type: 'CallExpression',
     start: 76,
     end: 91,
     callee: Node { type: 'Identifier', start: 76, end: 79, name: 'foo' },
     arguments: [ [Node] ] } }
VariableDeclarator
65
91
Node { type: 'Identifier', start: 65, end: 73, name: 'expected' }
Identifier
65
73
expected
Node {
  type: 'CallExpression',
  start: 76,
  end: 91,
  callee: Node { type: 'Identifier', start: 76, end: 79, name: 'foo' },
  arguments: 
   [ Node {
       type: 'BinaryExpression',
       start: 80,
       end: 90,
       left: [Node],
       operator: '-',
       right: [Node] } ] }
CallExpression
76
91
Node { type: 'Identifier', start: 76, end: 79, name: 'foo' }
Identifier
76
79
foo
[ Node {
    type: 'BinaryExpression',
    start: 80,
    end: 90,
    left: 
     Node {
       type: 'Literal',
       start: 80,
       end: 86,
       value: 100000,
       raw: '100000' },
    operator: '-',
    right: Node { type: 'Literal', start: 89, end: 90, value: 1, raw: '1' } } ]
Node {
  type: 'BinaryExpression',
  start: 80,
  end: 90,
  left: 
   Node {
     type: 'Literal',
     start: 80,
     end: 86,
     value: 100000,
     raw: '100000' },
  operator: '-',
  right: Node { type: 'Literal', start: 89, end: 90, value: 1, raw: '1' } }
BinaryExpression
80
90
Node {
  type: 'Literal',
  start: 80,
  end: 86,
  value: 100000,
  raw: '100000' }
Literal
80
86
100000
100000
-
Node { type: 'Literal', start: 89, end: 90, value: 1, raw: '1' }
Literal
89
90
1
1
var
Node {
  type: 'VariableDeclaration',
  start: 93,
  end: 103,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 97,
       end: 102,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
93
103
[ Node {
    type: 'VariableDeclarator',
    start: 97,
    end: 102,
    id: Node { type: 'Identifier', start: 97, end: 98, name: 'j' },
    init: Node { type: 'Literal', start: 101, end: 102, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 97,
  end: 102,
  id: Node { type: 'Identifier', start: 97, end: 98, name: 'j' },
  init: Node { type: 'Literal', start: 101, end: 102, value: 0, raw: '0' } }
VariableDeclarator
97
102
Node { type: 'Identifier', start: 97, end: 98, name: 'j' }
Identifier
97
98
j
Node { type: 'Literal', start: 101, end: 102, value: 0, raw: '0' }
Literal
101
102
0
0
var
Node {
  type: 'ForStatement',
  start: 104,
  end: 152,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 109,
     end: 118,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 120,
     end: 130,
     left: Node { type: 'Identifier', start: 120, end: 121, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 124,
        end: 130,
        value: 100000,
        raw: '100000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 132,
     end: 135,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 134, end: 135, name: 'i' } },
  body: 
   Node {
     type: 'ExpressionStatement',
     start: 141,
     end: 152,
     expression: 
      Node {
        type: 'AssignmentExpression',
        start: 141,
        end: 151,
        operator: '=',
        left: [Node],
        right: [Node] } } }
ForStatement
104
152
Node {
  type: 'VariableDeclaration',
  start: 109,
  end: 118,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 113,
       end: 118,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
109
118
[ Node {
    type: 'VariableDeclarator',
    start: 113,
    end: 118,
    id: Node { type: 'Identifier', start: 113, end: 114, name: 'i' },
    init: Node { type: 'Literal', start: 117, end: 118, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 113,
  end: 118,
  id: Node { type: 'Identifier', start: 113, end: 114, name: 'i' },
  init: Node { type: 'Literal', start: 117, end: 118, value: 0, raw: '0' } }
VariableDeclarator
113
118
Node { type: 'Identifier', start: 113, end: 114, name: 'i' }
Identifier
113
114
i
Node { type: 'Literal', start: 117, end: 118, value: 0, raw: '0' }
Literal
117
118
0
0
var
Node {
  type: 'BinaryExpression',
  start: 120,
  end: 130,
  left: Node { type: 'Identifier', start: 120, end: 121, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 124,
     end: 130,
     value: 100000,
     raw: '100000' } }
BinaryExpression
120
130
Node { type: 'Identifier', start: 120, end: 121, name: 'i' }
Identifier
120
121
i
<
Node {
  type: 'Literal',
  start: 124,
  end: 130,
  value: 100000,
  raw: '100000' }
Literal
124
130
100000
100000
Node {
  type: 'UpdateExpression',
  start: 132,
  end: 135,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 134, end: 135, name: 'i' } }
UpdateExpression
132
135
++
true
Node { type: 'Identifier', start: 134, end: 135, name: 'i' }
Identifier
134
135
i
Node {
  type: 'ExpressionStatement',
  start: 141,
  end: 152,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 141,
     end: 151,
     operator: '=',
     left: Node { type: 'Identifier', start: 141, end: 142, name: 'j' },
     right: 
      Node {
        type: 'CallExpression',
        start: 145,
        end: 151,
        callee: [Node],
        arguments: [Array] } } }
ExpressionStatement
141
152
Node {
  type: 'AssignmentExpression',
  start: 141,
  end: 151,
  operator: '=',
  left: Node { type: 'Identifier', start: 141, end: 142, name: 'j' },
  right: 
   Node {
     type: 'CallExpression',
     start: 145,
     end: 151,
     callee: Node { type: 'Identifier', start: 145, end: 148, name: 'foo' },
     arguments: [ [Node] ] } }
AssignmentExpression
141
151
=
Node { type: 'Identifier', start: 141, end: 142, name: 'j' }
Identifier
141
142
j
Node {
  type: 'CallExpression',
  start: 145,
  end: 151,
  callee: Node { type: 'Identifier', start: 145, end: 148, name: 'foo' },
  arguments: 
   [ Node { type: 'Identifier', start: 149, end: 150, name: 'i' } ] }
CallExpression
145
151
Node { type: 'Identifier', start: 145, end: 148, name: 'foo' }
Identifier
145
148
foo
[ Node { type: 'Identifier', start: 149, end: 150, name: 'i' } ]
Node { type: 'Identifier', start: 149, end: 150, name: 'i' }
Identifier
149
150
i
Node {
  type: 'IfStatement',
  start: 154,
  end: 200,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 158,
     end: 171,
     left: Node { type: 'Identifier', start: 158, end: 166, name: 'expected' },
     operator: '!=',
     right: Node { type: 'Identifier', start: 170, end: 171, name: 'j' } },
  consequent: Node { type: 'BlockStatement', start: 172, end: 200, body: [ [Node] ] },
  alternate: null }
IfStatement
154
200
Node {
  type: 'BinaryExpression',
  start: 158,
  end: 171,
  left: Node { type: 'Identifier', start: 158, end: 166, name: 'expected' },
  operator: '!=',
  right: Node { type: 'Identifier', start: 170, end: 171, name: 'j' } }
BinaryExpression
158
171
Node { type: 'Identifier', start: 158, end: 166, name: 'expected' }
Identifier
158
166
expected
!=
Node { type: 'Identifier', start: 170, end: 171, name: 'j' }
Identifier
170
171
j
Node {
  type: 'BlockStatement',
  start: 172,
  end: 200,
  body: 
   [ Node { type: 'ThrowStatement', start: 178, end: 198, argument: [Node] } ] }
BlockStatement
172
200
[ Node {
    type: 'ThrowStatement',
    start: 178,
    end: 198,
    argument: 
     Node {
       type: 'TemplateLiteral',
       start: 184,
       end: 197,
       expressions: [Array],
       quasis: [Array] } } ]
Node {
  type: 'ThrowStatement',
  start: 178,
  end: 198,
  argument: 
   Node {
     type: 'TemplateLiteral',
     start: 184,
     end: 197,
     expressions: [ [Node] ],
     quasis: [ [Node], [Node] ] } }
ThrowStatement
178
198
Node {
  type: 'TemplateLiteral',
  start: 184,
  end: 197,
  expressions: 
   [ Node { type: 'Identifier', start: 194, end: 195, name: 'j' } ],
  quasis: 
   [ Node {
       type: 'TemplateElement',
       start: 185,
       end: 192,
       value: [Object],
       tail: false },
     Node {
       type: 'TemplateElement',
       start: 196,
       end: 196,
       value: [Object],
       tail: true } ] }
TemplateLiteral
184
197
[ Node { type: 'Identifier', start: 194, end: 195, name: 'j' } ]
Node { type: 'Identifier', start: 194, end: 195, name: 'j' }
Identifier
194
195
j
[ Node {
    type: 'TemplateElement',
    start: 185,
    end: 192,
    value: { raw: 'Error: ', cooked: 'Error: ' },
    tail: false },
  Node {
    type: 'TemplateElement',
    start: 196,
    end: 196,
    value: { raw: '', cooked: '' },
    tail: true } ]
Node {
  type: 'TemplateElement',
  start: 185,
  end: 192,
  value: { raw: 'Error: ', cooked: 'Error: ' },
  tail: false }
TemplateElement
185
192
{ raw: 'Error: ', cooked: 'Error: ' }
Error: 
Error: 
false
Node {
  type: 'TemplateElement',
  start: 196,
  end: 196,
  value: { raw: '', cooked: '' },
  tail: true }
TemplateElement
196
196
{ raw: '', cooked: '' }


true
null
[+] Exception: ftl-arithtan.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 396,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 0,
       end: 15,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 17,
       end: 137,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 139,
       end: 153,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 155,
       end: 187,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 189,
       end: 203,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 205,
       end: 249,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 251,
       end: 265,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 267,
       end: 395,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
396
[ Node {
    type: 'VariableDeclaration',
    start: 0,
    end: 15,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 17,
    end: 137,
    id: Node { type: 'Identifier', start: 26, end: 29, name: 'bar' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 32, end: 137, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 139,
    end: 153,
    expression: 
     Node {
       type: 'CallExpression',
       start: 139,
       end: 152,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 155,
    end: 187,
    id: Node { type: 'Identifier', start: 164, end: 167, name: 'baz' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 170, end: 187, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 189,
    end: 203,
    expression: 
     Node {
       type: 'CallExpression',
       start: 189,
       end: 202,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 205,
    end: 249,
    id: Node { type: 'Identifier', start: 214, end: 217, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 220, end: 249, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 251,
    end: 265,
    expression: 
     Node {
       type: 'CallExpression',
       start: 251,
       end: 264,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 267,
    end: 395,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 272,
       end: 281,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 283,
       end: 293,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 295,
       end: 298,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 300, end: 395, body: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 0,
  end: 15,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 4,
       end: 14,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
0
15
[ Node {
    type: 'VariableDeclarator',
    start: 4,
    end: 14,
    id: Node { type: 'Identifier', start: 4, end: 10, name: 'toggle' },
    init: Node { type: 'Literal', start: 13, end: 14, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 4,
  end: 14,
  id: Node { type: 'Identifier', start: 4, end: 10, name: 'toggle' },
  init: Node { type: 'Literal', start: 13, end: 14, value: 0, raw: '0' } }
VariableDeclarator
4
14
Node { type: 'Identifier', start: 4, end: 10, name: 'toggle' }
Identifier
4
10
toggle
Node { type: 'Literal', start: 13, end: 14, value: 0, raw: '0' }
Literal
13
14
0
0
var
Node {
  type: 'FunctionDeclaration',
  start: 17,
  end: 137,
  id: Node { type: 'Identifier', start: 26, end: 29, name: 'bar' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 32, end: 137, body: [ [Node] ] } }
FunctionDeclaration
17
137
Node { type: 'Identifier', start: 26, end: 29, name: 'bar' }
Identifier
26
29
bar
false
false
false
[]
Node {
  type: 'BlockStatement',
  start: 32,
  end: 137,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 38,
       end: 135,
       test: [Node],
       consequent: [Node],
       alternate: [Node] } ] }
BlockStatement
32
137
[ Node {
    type: 'IfStatement',
    start: 38,
    end: 135,
    test: 
     Node {
       type: 'AssignmentExpression',
       start: 42,
       end: 53,
       operator: '^=',
       left: [Node],
       right: [Node] },
    consequent: Node { type: 'ReturnStatement', start: 63, end: 73, argument: [Node] },
    alternate: Node { type: 'ReturnStatement', start: 91, end: 135, argument: [Node] } } ]
Node {
  type: 'IfStatement',
  start: 38,
  end: 135,
  test: 
   Node {
     type: 'AssignmentExpression',
     start: 42,
     end: 53,
     operator: '^=',
     left: Node { type: 'Identifier', start: 42, end: 48, name: 'toggle' },
     right: Node { type: 'Literal', start: 52, end: 53, value: 1, raw: '1' } },
  consequent: 
   Node {
     type: 'ReturnStatement',
     start: 63,
     end: 73,
     argument: Node { type: 'Literal', start: 70, end: 72, value: 42, raw: '42' } },
  alternate: 
   Node {
     type: 'ReturnStatement',
     start: 91,
     end: 135,
     argument: 
      Node {
        type: 'ObjectExpression',
        start: 98,
        end: 134,
        properties: [Array] } } }
IfStatement
38
135
Node {
  type: 'AssignmentExpression',
  start: 42,
  end: 53,
  operator: '^=',
  left: Node { type: 'Identifier', start: 42, end: 48, name: 'toggle' },
  right: Node { type: 'Literal', start: 52, end: 53, value: 1, raw: '1' } }
AssignmentExpression
42
53
^=
Node { type: 'Identifier', start: 42, end: 48, name: 'toggle' }
Identifier
42
48
toggle
Node { type: 'Literal', start: 52, end: 53, value: 1, raw: '1' }
Literal
52
53
1
1
Node {
  type: 'ReturnStatement',
  start: 63,
  end: 73,
  argument: Node { type: 'Literal', start: 70, end: 72, value: 42, raw: '42' } }
ReturnStatement
63
73
Node { type: 'Literal', start: 70, end: 72, value: 42, raw: '42' }
Literal
70
72
42
42
Node {
  type: 'ReturnStatement',
  start: 91,
  end: 135,
  argument: 
   Node {
     type: 'ObjectExpression',
     start: 98,
     end: 134,
     properties: [ [Node] ] } }
ReturnStatement
91
135
Node {
  type: 'ObjectExpression',
  start: 98,
  end: 134,
  properties: 
   [ Node {
       type: 'Property',
       start: 99,
       end: 133,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
98
134
[ Node {
    type: 'Property',
    start: 99,
    end: 133,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 99, end: 106, name: 'valueOf' },
    value: 
     Node {
       type: 'FunctionExpression',
       start: 108,
       end: 133,
       id: null,
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 99,
  end: 133,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 99, end: 106, name: 'valueOf' },
  value: 
   Node {
     type: 'FunctionExpression',
     start: 108,
     end: 133,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [],
     body: Node { type: 'BlockStatement', start: 119, end: 133, body: [Array] } },
  kind: 'init' }
Property
99
133
false
false
false
Node { type: 'Identifier', start: 99, end: 106, name: 'valueOf' }
Identifier
99
106
valueOf
Node {
  type: 'FunctionExpression',
  start: 108,
  end: 133,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 119, end: 133, body: [ [Node] ] } }
FunctionExpression
108
133
null
[+] Exception: ftl-bit-xor-right-result-interference.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1756,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 341,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 343,
       end: 357,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 359,
       end: 393,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 395,
       end: 409,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 429,
       end: 1119,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 1148,
       end: 1183,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 1184,
       end: 1277,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1278,
       end: 1382,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1383,
       end: 1478,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1479,
       end: 1570,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1571,
       end: 1662,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1663,
       end: 1754,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
1756
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 341,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 341, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 343,
    end: 357,
    expression: 
     Node {
       type: 'CallExpression',
       start: 343,
       end: 356,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 359,
    end: 393,
    id: Node { type: 'Identifier', start: 368, end: 371, name: 'bar' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 374, end: 393, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 395,
    end: 409,
    expression: 
     Node {
       type: 'CallExpression',
       start: 395,
       end: 408,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 429,
    end: 1119,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 434,
       end: 443,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 445,
       end: 455,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 457,
       end: 460,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 462, end: 1119, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 1148,
    end: 1183,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 1184,
    end: 1277,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1188,
       end: 1218,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1224,
       end: 1277,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1278,
    end: 1382,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1282,
       end: 1308,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1314,
       end: 1382,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1383,
    end: 1478,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1387,
       end: 1415,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1421,
       end: 1478,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1479,
    end: 1570,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1483,
       end: 1507,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1513,
       end: 1570,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1571,
    end: 1662,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1575,
       end: 1599,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1605,
       end: 1662,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1663,
    end: 1754,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1667,
       end: 1691,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1697,
       end: 1754,
       argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 341,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'f' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'p' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 19,
     end: 341,
     body: [ [Node], [Node], [Node], [Node], [Node] ] } }
FunctionDeclaration
0
341
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'f' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'p' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'f' }
Identifier
13
14
f
Node { type: 'Identifier', start: 16, end: 17, name: 'p' }
Identifier
16
17
p
Node {
  type: 'BlockStatement',
  start: 19,
  end: 341,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 25,
       end: 37,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 42,
       end: 59,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 64,
       end: 77,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'TryStatement',
       start: 82,
       end: 279,
       block: [Node],
       handler: [Node],
       finalizer: null },
     Node {
       type: 'ReturnStatement',
       start: 284,
       end: 339,
       argument: [Node] } ] }
BlockStatement
19
341
[ Node {
    type: 'VariableDeclaration',
    start: 25,
    end: 37,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 42,
    end: 59,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 64,
    end: 77,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'TryStatement',
    start: 82,
    end: 279,
    block: Node { type: 'BlockStatement', start: 86, end: 194, body: [Array] },
    handler: 
     Node {
       type: 'CatchClause',
       start: 195,
       end: 279,
       param: [Node],
       body: [Node] },
    finalizer: null },
  Node {
    type: 'ReturnStatement',
    start: 284,
    end: 339,
    argument: 
     Node {
       type: 'ObjectExpression',
       start: 291,
       end: 338,
       properties: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 25,
  end: 37,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 29,
       end: 36,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
25
37
[ Node {
    type: 'VariableDeclarator',
    start: 29,
    end: 36,
    id: Node { type: 'Identifier', start: 29, end: 30, name: 'x' },
    init: Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' } } ]
Node {
  type: 'VariableDeclarator',
  start: 29,
  end: 36,
  id: Node { type: 'Identifier', start: 29, end: 30, name: 'x' },
  init: Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' } }
VariableDeclarator
29
36
Node { type: 'Identifier', start: 29, end: 30, name: 'x' }
Identifier
29
30
x
Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' }
Literal
33
36
100
100
var
Node {
  type: 'VariableDeclaration',
  start: 42,
  end: 59,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 46,
       end: 58,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
42
59
[ Node {
    type: 'VariableDeclarator',
    start: 46,
    end: 58,
    id: Node { type: 'Identifier', start: 46, end: 52, name: 'result' },
    init: Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' } } ]
Node {
  type: 'VariableDeclarator',
  start: 46,
  end: 58,
  id: Node { type: 'Identifier', start: 46, end: 52, name: 'result' },
  init: Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' } }
VariableDeclarator
46
58
Node { type: 'Identifier', start: 46, end: 52, name: 'result' }
Identifier
46
52
result
Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' }
Literal
55
58
101
101
var
Node {
  type: 'VariableDeclaration',
  start: 64,
  end: 77,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 68,
       end: 76,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
64
77
[ Node {
    type: 'VariableDeclarator',
    start: 68,
    end: 76,
    id: Node { type: 'Identifier', start: 68, end: 70, name: 'pf' },
    init: 
     Node {
       type: 'MemberExpression',
       start: 73,
       end: 76,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'VariableDeclarator',
  start: 68,
  end: 76,
  id: Node { type: 'Identifier', start: 68, end: 70, name: 'pf' },
  init: 
   Node {
     type: 'MemberExpression',
     start: 73,
     end: 76,
     object: Node { type: 'Identifier', start: 73, end: 74, name: 'p' },
     property: Node { type: 'Identifier', start: 75, end: 76, name: 'g' },
     computed: false } }
VariableDeclarator
68
76
Node { type: 'Identifier', start: 68, end: 70, name: 'pf' }
Identifier
68
70
pf
Node {
  type: 'MemberExpression',
  start: 73,
  end: 76,
  object: Node { type: 'Identifier', start: 73, end: 74, name: 'p' },
  property: Node { type: 'Identifier', start: 75, end: 76, name: 'g' },
  computed: false }
MemberExpression
73
76
Node { type: 'Identifier', start: 73, end: 74, name: 'p' }
Identifier
73
74
p
Node { type: 'Identifier', start: 75, end: 76, name: 'g' }
Identifier
75
76
g
false
var
Node {
  type: 'TryStatement',
  start: 82,
  end: 279,
  block: 
   Node {
     type: 'BlockStatement',
     start: 86,
     end: 194,
     body: [ [Node], [Node], [Node], [Node], [Node], [Node] ] },
  handler: 
   Node {
     type: 'CatchClause',
     start: 195,
     end: 279,
     param: Node { type: 'Identifier', start: 202, end: 203, name: 'e' },
     body: Node { type: 'BlockStatement', start: 205, end: 279, body: [Array] } },
  finalizer: null }
TryStatement
82
279
Node {
  type: 'BlockStatement',
  start: 86,
  end: 194,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 96,
       end: 104,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 113,
       end: 118,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 127,
       end: 140,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 149,
       end: 157,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 166,
       end: 171,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 180,
       end: 188,
       expression: [Node] } ] }
BlockStatement
86
194
[ Node {
    type: 'ExpressionStatement',
    start: 96,
    end: 104,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 96,
       end: 103,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 113,
    end: 118,
    expression: 
     Node {
       type: 'UpdateExpression',
       start: 113,
       end: 117,
       operator: '++',
       prefix: false,
       argument: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 127,
    end: 140,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 127,
       end: 139,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 149,
    end: 157,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 149,
       end: 156,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 166,
    end: 171,
    expression: 
     Node {
       type: 'UpdateExpression',
       start: 166,
       end: 170,
       operator: '++',
       prefix: false,
       argument: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 180,
    end: 188,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 180,
       end: 187,
       operator: '=',
       left: [Node],
       right: [Node] } } ]
Node {
  type: 'ExpressionStatement',
  start: 96,
  end: 104,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 96,
     end: 103,
     operator: '=',
     left: Node { type: 'Identifier', start: 96, end: 97, name: 'x' },
     right: Node { type: 'Literal', start: 100, end: 103, value: 102, raw: '102' } } }
ExpressionStatement
96
104
Node {
  type: 'AssignmentExpression',
  start: 96,
  end: 103,
  operator: '=',
  left: Node { type: 'Identifier', start: 96, end: 97, name: 'x' },
  right: Node { type: 'Literal', start: 100, end: 103, value: 102, raw: '102' } }
AssignmentExpression
96
103
=
Node { type: 'Identifier', start: 96, end: 97, name: 'x' }
Identifier
96
97
x
Node { type: 'Literal', start: 100, end: 103, value: 102, raw: '102' }
Literal
100
103
102
102
Node {
  type: 'ExpressionStatement',
  start: 113,
  end: 118,
  expression: 
   Node {
     type: 'UpdateExpression',
     start: 113,
     end: 117,
     operator: '++',
     prefix: false,
     argument: Node { type: 'Identifier', start: 113, end: 115, name: 'pf' } } }
ExpressionStatement
113
118
Node {
  type: 'UpdateExpression',
  start: 113,
  end: 117,
  operator: '++',
  prefix: false,
  argument: Node { type: 'Identifier', start: 113, end: 115, name: 'pf' } }
UpdateExpression
113
117
++
false
Node { type: 'Identifier', start: 113, end: 115, name: 'pf' }
Identifier
113
115
pf
Node {
  type: 'ExpressionStatement',
  start: 127,
  end: 140,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 127,
     end: 139,
     operator: '=',
     left: Node { type: 'Identifier', start: 127, end: 133, name: 'result' },
     right: 
      Node {
        type: 'CallExpression',
        start: 136,
        end: 139,
        callee: [Node],
        arguments: [] } } }
ExpressionStatement
127
140
Node {
  type: 'AssignmentExpression',
  start: 127,
  end: 139,
  operator: '=',
  left: Node { type: 'Identifier', start: 127, end: 133, name: 'result' },
  right: 
   Node {
     type: 'CallExpression',
     start: 136,
     end: 139,
     callee: Node { type: 'Identifier', start: 136, end: 137, name: 'f' },
     arguments: [] } }
AssignmentExpression
127
139
=
Node { type: 'Identifier', start: 127, end: 133, name: 'result' }
Identifier
127
133
result
Node {
  type: 'CallExpression',
  start: 136,
  end: 139,
  callee: Node { type: 'Identifier', start: 136, end: 137, name: 'f' },
  arguments: [] }
CallExpression
136
139
Node { type: 'Identifier', start: 136, end: 137, name: 'f' }
Identifier
136
137
f
[]
Node {
  type: 'ExpressionStatement',
  start: 149,
  end: 157,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 149,
     end: 156,
     operator: '=',
     left: Node { type: 'Identifier', start: 149, end: 150, name: 'f' },
     right: Node { type: 'Literal', start: 153, end: 156, value: 104, raw: '104' } } }
ExpressionStatement
149
157
Node {
  type: 'AssignmentExpression',
  start: 149,
  end: 156,
  operator: '=',
  left: Node { type: 'Identifier', start: 149, end: 150, name: 'f' },
  right: Node { type: 'Literal', start: 153, end: 156, value: 104, raw: '104' } }
AssignmentExpression
149
156
=
Node { type: 'Identifier', start: 149, end: 150, name: 'f' }
Identifier
149
150
f
Node { type: 'Literal', start: 153, end: 156, value: 104, raw: '104' }
Literal
153
156
104
104
Node {
  type: 'ExpressionStatement',
  start: 166,
  end: 171,
  expression: 
   Node {
     type: 'UpdateExpression',
     start: 166,
     end: 170,
     operator: '++',
     prefix: false,
     argument: Node { type: 'Identifier', start: 166, end: 168, name: 'pf' } } }
ExpressionStatement
166
171
Node {
  type: 'UpdateExpression',
  start: 166,
  end: 170,
  operator: '++',
  prefix: false,
  argument: Node { type: 'Identifier', start: 166, end: 168, name: 'pf' } }
UpdateExpression
166
170
++
false
Node { type: 'Identifier', start: 166, end: 168, name: 'pf' }
Identifier
166
168
pf
Node {
  type: 'ExpressionStatement',
  start: 180,
  end: 188,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 180,
     end: 187,
     operator: '=',
     left: Node { type: 'Identifier', start: 180, end: 181, name: 'x' },
     right: Node { type: 'Literal', start: 184, end: 187, value: 106, raw: '106' } } }
ExpressionStatement
180
188
Node {
  type: 'AssignmentExpression',
  start: 180,
  end: 187,
  operator: '=',
  left: Node { type: 'Identifier', start: 180, end: 181, name: 'x' },
  right: Node { type: 'Literal', start: 184, end: 187, value: 106, raw: '106' } }
AssignmentExpression
180
187
=
Node { type: 'Identifier', start: 180, end: 181, name: 'x' }
Identifier
180
181
x
Node { type: 'Literal', start: 184, end: 187, value: 106, raw: '106' }
Literal
184
187
106
106
Node {
  type: 'CatchClause',
  start: 195,
  end: 279,
  param: Node { type: 'Identifier', start: 202, end: 203, name: 'e' },
  body: Node { type: 'BlockStatement', start: 205, end: 279, body: [ [Node] ] } }
CatchClause
195
279
Node { type: 'Identifier', start: 202, end: 203, name: 'e' }
Identifier
202
203
e
Node {
  type: 'BlockStatement',
  start: 205,
  end: 279,
  body: 
   [ Node {
       type: 'ReturnStatement',
       start: 215,
       end: 273,
       argument: [Node] } ] }
BlockStatement
205
279
[ Node {
    type: 'ReturnStatement',
    start: 215,
    end: 273,
    argument: 
     Node {
       type: 'ObjectExpression',
       start: 222,
       end: 272,
       properties: [Array] } } ]
Node {
  type: 'ReturnStatement',
  start: 215,
  end: 273,
  argument: 
   Node {
     type: 'ObjectExpression',
     start: 222,
     end: 272,
     properties: [ [Node], [Node] ] } }
ReturnStatement
215
273
Node {
  type: 'ObjectExpression',
  start: 222,
  end: 272,
  properties: 
   [ Node {
       type: 'Property',
       start: 223,
       end: 243,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 245,
       end: 271,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
222
272
[ Node {
    type: 'Property',
    start: 223,
    end: 243,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 223, end: 230, name: 'outcome' },
    value: 
     Node {
       type: 'Literal',
       start: 232,
       end: 243,
       value: 'exception',
       raw: '"exception"' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 245,
    end: 271,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 245, end: 251, name: 'values' },
    value: 
     Node {
       type: 'ArrayExpression',
       start: 253,
       end: 271,
       elements: [Array] },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 223,
  end: 243,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 223, end: 230, name: 'outcome' },
  value: 
   Node {
     type: 'Literal',
     start: 232,
     end: 243,
     value: 'exception',
     raw: '"exception"' },
  kind: 'init' }
Property
223
243
false
false
false
Node { type: 'Identifier', start: 223, end: 230, name: 'outcome' }
Identifier
223
230
outcome
Node {
  type: 'Literal',
  start: 232,
  end: 243,
  value: 'exception',
  raw: '"exception"' }
Literal
232
243
exception
"exception"
init
Node {
  type: 'Property',
  start: 245,
  end: 271,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 245, end: 251, name: 'values' },
  value: 
   Node {
     type: 'ArrayExpression',
     start: 253,
     end: 271,
     elements: [ [Node], [Node], [Node], [Node] ] },
  kind: 'init' }
Property
245
271
false
false
false
Node { type: 'Identifier', start: 245, end: 251, name: 'values' }
Identifier
245
251
values
Node {
  type: 'ArrayExpression',
  start: 253,
  end: 271,
  elements: 
   [ Node { type: 'Identifier', start: 254, end: 255, name: 'f' },
     Node { type: 'Identifier', start: 257, end: 259, name: 'pf' },
     Node { type: 'Identifier', start: 261, end: 262, name: 'x' },
     Node { type: 'Identifier', start: 264, end: 270, name: 'result' } ] }
ArrayExpression
253
271
[ Node { type: 'Identifier', start: 254, end: 255, name: 'f' },
  Node { type: 'Identifier', start: 257, end: 259, name: 'pf' },
  Node { type: 'Identifier', start: 261, end: 262, name: 'x' },
  Node { type: 'Identifier', start: 264, end: 270, name: 'result' } ]
Node { type: 'Identifier', start: 254, end: 255, name: 'f' }
Identifier
254
255
f
Node { type: 'Identifier', start: 257, end: 259, name: 'pf' }
Identifier
257
259
pf
Node { type: 'Identifier', start: 261, end: 262, name: 'x' }
Identifier
261
262
x
Node { type: 'Identifier', start: 264, end: 270, name: 'result' }
Identifier
264
270
result
init
null
[+] Exception: ftl-call-bad-callee-exception-interesting-live-state.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1790,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 341,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 343,
       end: 357,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 359,
       end: 393,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 395,
       end: 409,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 429,
       end: 1119,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1148,
       end: 1189,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 1190,
       end: 1221,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 1222,
       end: 1315,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1316,
       end: 1420,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1421,
       end: 1512,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1513,
       end: 1604,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1605,
       end: 1696,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1697,
       end: 1788,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
1790
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 341,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 341, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 343,
    end: 357,
    expression: 
     Node {
       type: 'CallExpression',
       start: 343,
       end: 356,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 359,
    end: 393,
    id: Node { type: 'Identifier', start: 368, end: 371, name: 'bar' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 374, end: 393, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 395,
    end: 409,
    expression: 
     Node {
       type: 'CallExpression',
       start: 395,
       end: 408,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 429,
    end: 1119,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 434,
       end: 443,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 445,
       end: 455,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 457,
       end: 460,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 462, end: 1119, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1148,
    end: 1189,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 1148,
       end: 1189,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'VariableDeclaration',
    start: 1190,
    end: 1221,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 1222,
    end: 1315,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1226,
       end: 1256,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1262,
       end: 1315,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1316,
    end: 1420,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1320,
       end: 1346,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1352,
       end: 1420,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1421,
    end: 1512,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1425,
       end: 1449,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1455,
       end: 1512,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1513,
    end: 1604,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1517,
       end: 1541,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1547,
       end: 1604,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1605,
    end: 1696,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1609,
       end: 1633,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1639,
       end: 1696,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1697,
    end: 1788,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1701,
       end: 1725,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1731,
       end: 1788,
       argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 341,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'f' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'p' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 19,
     end: 341,
     body: [ [Node], [Node], [Node], [Node], [Node] ] } }
FunctionDeclaration
0
341
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'f' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'p' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'f' }
Identifier
13
14
f
Node { type: 'Identifier', start: 16, end: 17, name: 'p' }
Identifier
16
17
p
Node {
  type: 'BlockStatement',
  start: 19,
  end: 341,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 25,
       end: 37,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 42,
       end: 59,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 64,
       end: 77,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'TryStatement',
       start: 82,
       end: 279,
       block: [Node],
       handler: [Node],
       finalizer: null },
     Node {
       type: 'ReturnStatement',
       start: 284,
       end: 339,
       argument: [Node] } ] }
BlockStatement
19
341
[ Node {
    type: 'VariableDeclaration',
    start: 25,
    end: 37,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 42,
    end: 59,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 64,
    end: 77,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'TryStatement',
    start: 82,
    end: 279,
    block: Node { type: 'BlockStatement', start: 86, end: 194, body: [Array] },
    handler: 
     Node {
       type: 'CatchClause',
       start: 195,
       end: 279,
       param: [Node],
       body: [Node] },
    finalizer: null },
  Node {
    type: 'ReturnStatement',
    start: 284,
    end: 339,
    argument: 
     Node {
       type: 'ObjectExpression',
       start: 291,
       end: 338,
       properties: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 25,
  end: 37,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 29,
       end: 36,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
25
37
[ Node {
    type: 'VariableDeclarator',
    start: 29,
    end: 36,
    id: Node { type: 'Identifier', start: 29, end: 30, name: 'x' },
    init: Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' } } ]
Node {
  type: 'VariableDeclarator',
  start: 29,
  end: 36,
  id: Node { type: 'Identifier', start: 29, end: 30, name: 'x' },
  init: Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' } }
VariableDeclarator
29
36
Node { type: 'Identifier', start: 29, end: 30, name: 'x' }
Identifier
29
30
x
Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' }
Literal
33
36
100
100
var
Node {
  type: 'VariableDeclaration',
  start: 42,
  end: 59,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 46,
       end: 58,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
42
59
[ Node {
    type: 'VariableDeclarator',
    start: 46,
    end: 58,
    id: Node { type: 'Identifier', start: 46, end: 52, name: 'result' },
    init: Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' } } ]
Node {
  type: 'VariableDeclarator',
  start: 46,
  end: 58,
  id: Node { type: 'Identifier', start: 46, end: 52, name: 'result' },
  init: Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' } }
VariableDeclarator
46
58
Node { type: 'Identifier', start: 46, end: 52, name: 'result' }
Identifier
46
52
result
Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' }
Literal
55
58
101
101
var
Node {
  type: 'VariableDeclaration',
  start: 64,
  end: 77,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 68,
       end: 76,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
64
77
[ Node {
    type: 'VariableDeclarator',
    start: 68,
    end: 76,
    id: Node { type: 'Identifier', start: 68, end: 70, name: 'pf' },
    init: 
     Node {
       type: 'MemberExpression',
       start: 73,
       end: 76,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'VariableDeclarator',
  start: 68,
  end: 76,
  id: Node { type: 'Identifier', start: 68, end: 70, name: 'pf' },
  init: 
   Node {
     type: 'MemberExpression',
     start: 73,
     end: 76,
     object: Node { type: 'Identifier', start: 73, end: 74, name: 'p' },
     property: Node { type: 'Identifier', start: 75, end: 76, name: 'g' },
     computed: false } }
VariableDeclarator
68
76
Node { type: 'Identifier', start: 68, end: 70, name: 'pf' }
Identifier
68
70
pf
Node {
  type: 'MemberExpression',
  start: 73,
  end: 76,
  object: Node { type: 'Identifier', start: 73, end: 74, name: 'p' },
  property: Node { type: 'Identifier', start: 75, end: 76, name: 'g' },
  computed: false }
MemberExpression
73
76
Node { type: 'Identifier', start: 73, end: 74, name: 'p' }
Identifier
73
74
p
Node { type: 'Identifier', start: 75, end: 76, name: 'g' }
Identifier
75
76
g
false
var
Node {
  type: 'TryStatement',
  start: 82,
  end: 279,
  block: 
   Node {
     type: 'BlockStatement',
     start: 86,
     end: 194,
     body: [ [Node], [Node], [Node], [Node], [Node], [Node] ] },
  handler: 
   Node {
     type: 'CatchClause',
     start: 195,
     end: 279,
     param: Node { type: 'Identifier', start: 202, end: 203, name: 'e' },
     body: Node { type: 'BlockStatement', start: 205, end: 279, body: [Array] } },
  finalizer: null }
TryStatement
82
279
Node {
  type: 'BlockStatement',
  start: 86,
  end: 194,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 96,
       end: 104,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 113,
       end: 118,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 127,
       end: 140,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 149,
       end: 157,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 166,
       end: 171,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 180,
       end: 188,
       expression: [Node] } ] }
BlockStatement
86
194
[ Node {
    type: 'ExpressionStatement',
    start: 96,
    end: 104,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 96,
       end: 103,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 113,
    end: 118,
    expression: 
     Node {
       type: 'UpdateExpression',
       start: 113,
       end: 117,
       operator: '++',
       prefix: false,
       argument: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 127,
    end: 140,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 127,
       end: 139,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 149,
    end: 157,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 149,
       end: 156,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 166,
    end: 171,
    expression: 
     Node {
       type: 'UpdateExpression',
       start: 166,
       end: 170,
       operator: '++',
       prefix: false,
       argument: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 180,
    end: 188,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 180,
       end: 187,
       operator: '=',
       left: [Node],
       right: [Node] } } ]
Node {
  type: 'ExpressionStatement',
  start: 96,
  end: 104,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 96,
     end: 103,
     operator: '=',
     left: Node { type: 'Identifier', start: 96, end: 97, name: 'x' },
     right: Node { type: 'Literal', start: 100, end: 103, value: 102, raw: '102' } } }
ExpressionStatement
96
104
Node {
  type: 'AssignmentExpression',
  start: 96,
  end: 103,
  operator: '=',
  left: Node { type: 'Identifier', start: 96, end: 97, name: 'x' },
  right: Node { type: 'Literal', start: 100, end: 103, value: 102, raw: '102' } }
AssignmentExpression
96
103
=
Node { type: 'Identifier', start: 96, end: 97, name: 'x' }
Identifier
96
97
x
Node { type: 'Literal', start: 100, end: 103, value: 102, raw: '102' }
Literal
100
103
102
102
Node {
  type: 'ExpressionStatement',
  start: 113,
  end: 118,
  expression: 
   Node {
     type: 'UpdateExpression',
     start: 113,
     end: 117,
     operator: '++',
     prefix: false,
     argument: Node { type: 'Identifier', start: 113, end: 115, name: 'pf' } } }
ExpressionStatement
113
118
Node {
  type: 'UpdateExpression',
  start: 113,
  end: 117,
  operator: '++',
  prefix: false,
  argument: Node { type: 'Identifier', start: 113, end: 115, name: 'pf' } }
UpdateExpression
113
117
++
false
Node { type: 'Identifier', start: 113, end: 115, name: 'pf' }
Identifier
113
115
pf
Node {
  type: 'ExpressionStatement',
  start: 127,
  end: 140,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 127,
     end: 139,
     operator: '=',
     left: Node { type: 'Identifier', start: 127, end: 133, name: 'result' },
     right: 
      Node {
        type: 'CallExpression',
        start: 136,
        end: 139,
        callee: [Node],
        arguments: [] } } }
ExpressionStatement
127
140
Node {
  type: 'AssignmentExpression',
  start: 127,
  end: 139,
  operator: '=',
  left: Node { type: 'Identifier', start: 127, end: 133, name: 'result' },
  right: 
   Node {
     type: 'CallExpression',
     start: 136,
     end: 139,
     callee: Node { type: 'Identifier', start: 136, end: 137, name: 'f' },
     arguments: [] } }
AssignmentExpression
127
139
=
Node { type: 'Identifier', start: 127, end: 133, name: 'result' }
Identifier
127
133
result
Node {
  type: 'CallExpression',
  start: 136,
  end: 139,
  callee: Node { type: 'Identifier', start: 136, end: 137, name: 'f' },
  arguments: [] }
CallExpression
136
139
Node { type: 'Identifier', start: 136, end: 137, name: 'f' }
Identifier
136
137
f
[]
Node {
  type: 'ExpressionStatement',
  start: 149,
  end: 157,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 149,
     end: 156,
     operator: '=',
     left: Node { type: 'Identifier', start: 149, end: 150, name: 'f' },
     right: Node { type: 'Literal', start: 153, end: 156, value: 104, raw: '104' } } }
ExpressionStatement
149
157
Node {
  type: 'AssignmentExpression',
  start: 149,
  end: 156,
  operator: '=',
  left: Node { type: 'Identifier', start: 149, end: 150, name: 'f' },
  right: Node { type: 'Literal', start: 153, end: 156, value: 104, raw: '104' } }
AssignmentExpression
149
156
=
Node { type: 'Identifier', start: 149, end: 150, name: 'f' }
Identifier
149
150
f
Node { type: 'Literal', start: 153, end: 156, value: 104, raw: '104' }
Literal
153
156
104
104
Node {
  type: 'ExpressionStatement',
  start: 166,
  end: 171,
  expression: 
   Node {
     type: 'UpdateExpression',
     start: 166,
     end: 170,
     operator: '++',
     prefix: false,
     argument: Node { type: 'Identifier', start: 166, end: 168, name: 'pf' } } }
ExpressionStatement
166
171
Node {
  type: 'UpdateExpression',
  start: 166,
  end: 170,
  operator: '++',
  prefix: false,
  argument: Node { type: 'Identifier', start: 166, end: 168, name: 'pf' } }
UpdateExpression
166
170
++
false
Node { type: 'Identifier', start: 166, end: 168, name: 'pf' }
Identifier
166
168
pf
Node {
  type: 'ExpressionStatement',
  start: 180,
  end: 188,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 180,
     end: 187,
     operator: '=',
     left: Node { type: 'Identifier', start: 180, end: 181, name: 'x' },
     right: Node { type: 'Literal', start: 184, end: 187, value: 106, raw: '106' } } }
ExpressionStatement
180
188
Node {
  type: 'AssignmentExpression',
  start: 180,
  end: 187,
  operator: '=',
  left: Node { type: 'Identifier', start: 180, end: 181, name: 'x' },
  right: Node { type: 'Literal', start: 184, end: 187, value: 106, raw: '106' } }
AssignmentExpression
180
187
=
Node { type: 'Identifier', start: 180, end: 181, name: 'x' }
Identifier
180
181
x
Node { type: 'Literal', start: 184, end: 187, value: 106, raw: '106' }
Literal
184
187
106
106
Node {
  type: 'CatchClause',
  start: 195,
  end: 279,
  param: Node { type: 'Identifier', start: 202, end: 203, name: 'e' },
  body: Node { type: 'BlockStatement', start: 205, end: 279, body: [ [Node] ] } }
CatchClause
195
279
Node { type: 'Identifier', start: 202, end: 203, name: 'e' }
Identifier
202
203
e
Node {
  type: 'BlockStatement',
  start: 205,
  end: 279,
  body: 
   [ Node {
       type: 'ReturnStatement',
       start: 215,
       end: 273,
       argument: [Node] } ] }
BlockStatement
205
279
[ Node {
    type: 'ReturnStatement',
    start: 215,
    end: 273,
    argument: 
     Node {
       type: 'ObjectExpression',
       start: 222,
       end: 272,
       properties: [Array] } } ]
Node {
  type: 'ReturnStatement',
  start: 215,
  end: 273,
  argument: 
   Node {
     type: 'ObjectExpression',
     start: 222,
     end: 272,
     properties: [ [Node], [Node] ] } }
ReturnStatement
215
273
Node {
  type: 'ObjectExpression',
  start: 222,
  end: 272,
  properties: 
   [ Node {
       type: 'Property',
       start: 223,
       end: 243,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 245,
       end: 271,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
222
272
[ Node {
    type: 'Property',
    start: 223,
    end: 243,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 223, end: 230, name: 'outcome' },
    value: 
     Node {
       type: 'Literal',
       start: 232,
       end: 243,
       value: 'exception',
       raw: '"exception"' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 245,
    end: 271,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 245, end: 251, name: 'values' },
    value: 
     Node {
       type: 'ArrayExpression',
       start: 253,
       end: 271,
       elements: [Array] },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 223,
  end: 243,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 223, end: 230, name: 'outcome' },
  value: 
   Node {
     type: 'Literal',
     start: 232,
     end: 243,
     value: 'exception',
     raw: '"exception"' },
  kind: 'init' }
Property
223
243
false
false
false
Node { type: 'Identifier', start: 223, end: 230, name: 'outcome' }
Identifier
223
230
outcome
Node {
  type: 'Literal',
  start: 232,
  end: 243,
  value: 'exception',
  raw: '"exception"' }
Literal
232
243
exception
"exception"
init
Node {
  type: 'Property',
  start: 245,
  end: 271,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 245, end: 251, name: 'values' },
  value: 
   Node {
     type: 'ArrayExpression',
     start: 253,
     end: 271,
     elements: [ [Node], [Node], [Node], [Node] ] },
  kind: 'init' }
Property
245
271
false
false
false
Node { type: 'Identifier', start: 245, end: 251, name: 'values' }
Identifier
245
251
values
Node {
  type: 'ArrayExpression',
  start: 253,
  end: 271,
  elements: 
   [ Node { type: 'Identifier', start: 254, end: 255, name: 'f' },
     Node { type: 'Identifier', start: 257, end: 259, name: 'pf' },
     Node { type: 'Identifier', start: 261, end: 262, name: 'x' },
     Node { type: 'Identifier', start: 264, end: 270, name: 'result' } ] }
ArrayExpression
253
271
[ Node { type: 'Identifier', start: 254, end: 255, name: 'f' },
  Node { type: 'Identifier', start: 257, end: 259, name: 'pf' },
  Node { type: 'Identifier', start: 261, end: 262, name: 'x' },
  Node { type: 'Identifier', start: 264, end: 270, name: 'result' } ]
Node { type: 'Identifier', start: 254, end: 255, name: 'f' }
Identifier
254
255
f
Node { type: 'Identifier', start: 257, end: 259, name: 'pf' }
Identifier
257
259
pf
Node { type: 'Identifier', start: 261, end: 262, name: 'x' }
Identifier
261
262
x
Node { type: 'Identifier', start: 264, end: 270, name: 'result' }
Identifier
264
270
result
init
null
[+] Exception: ftl-call-exception-interesting-live-state.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1327,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 203,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 205,
       end: 219,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 221,
       end: 255,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 257,
       end: 271,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 291,
       end: 972,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 1001,
       end: 1012,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'TryStatement',
       start: 1013,
       end: 1232,
       block: [Node],
       handler: [Node],
       finalizer: null },
     Node {
       type: 'IfStatement',
       start: 1233,
       end: 1326,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
1327
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 203,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 203, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 205,
    end: 219,
    expression: 
     Node {
       type: 'CallExpression',
       start: 205,
       end: 218,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 221,
    end: 255,
    id: Node { type: 'Identifier', start: 230, end: 233, name: 'bar' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 236, end: 255, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 257,
    end: 271,
    expression: 
     Node {
       type: 'CallExpression',
       start: 257,
       end: 270,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 291,
    end: 972,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 296,
       end: 305,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 307,
       end: 317,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 319,
       end: 322,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 324, end: 972, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 1001,
    end: 1012,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'TryStatement',
    start: 1013,
    end: 1232,
    block: Node { type: 'BlockStatement', start: 1017, end: 1106, body: [Array] },
    handler: 
     Node {
       type: 'CatchClause',
       start: 1107,
       end: 1232,
       param: [Node],
       body: [Node] },
    finalizer: null },
  Node {
    type: 'IfStatement',
    start: 1233,
    end: 1326,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1237,
       end: 1267,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1273,
       end: 1326,
       argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 203,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'f' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'p' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 19,
     end: 203,
     body: 
      [ [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node] ] } }
FunctionDeclaration
0
203
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'f' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'p' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'f' }
Identifier
13
14
f
Node { type: 'Identifier', start: 16, end: 17, name: 'p' }
Identifier
16
17
p
Node {
  type: 'BlockStatement',
  start: 19,
  end: 203,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 25,
       end: 37,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 42,
       end: 59,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 64,
       end: 72,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 77,
       end: 85,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 90,
       end: 103,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 108,
       end: 116,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 121,
       end: 129,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 134,
       end: 142,
       expression: [Node] },
     Node {
       type: 'ReturnStatement',
       start: 147,
       end: 201,
       argument: [Node] } ] }
BlockStatement
19
203
[ Node {
    type: 'VariableDeclaration',
    start: 25,
    end: 37,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 42,
    end: 59,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 64,
    end: 72,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 64,
       end: 71,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 77,
    end: 85,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 77,
       end: 84,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 90,
    end: 103,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 90,
       end: 102,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 108,
    end: 116,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 108,
       end: 115,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 121,
    end: 129,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 121,
       end: 128,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 134,
    end: 142,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 134,
       end: 141,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ReturnStatement',
    start: 147,
    end: 201,
    argument: 
     Node {
       type: 'ObjectExpression',
       start: 154,
       end: 200,
       properties: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 25,
  end: 37,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 29,
       end: 36,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
25
37
[ Node {
    type: 'VariableDeclarator',
    start: 29,
    end: 36,
    id: Node { type: 'Identifier', start: 29, end: 30, name: 'x' },
    init: Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' } } ]
Node {
  type: 'VariableDeclarator',
  start: 29,
  end: 36,
  id: Node { type: 'Identifier', start: 29, end: 30, name: 'x' },
  init: Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' } }
VariableDeclarator
29
36
Node { type: 'Identifier', start: 29, end: 30, name: 'x' }
Identifier
29
30
x
Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' }
Literal
33
36
100
100
var
Node {
  type: 'VariableDeclaration',
  start: 42,
  end: 59,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 46,
       end: 58,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
42
59
[ Node {
    type: 'VariableDeclarator',
    start: 46,
    end: 58,
    id: Node { type: 'Identifier', start: 46, end: 52, name: 'result' },
    init: Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' } } ]
Node {
  type: 'VariableDeclarator',
  start: 46,
  end: 58,
  id: Node { type: 'Identifier', start: 46, end: 52, name: 'result' },
  init: Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' } }
VariableDeclarator
46
58
Node { type: 'Identifier', start: 46, end: 52, name: 'result' }
Identifier
46
52
result
Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' }
Literal
55
58
101
101
var
Node {
  type: 'ExpressionStatement',
  start: 64,
  end: 72,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 64,
     end: 71,
     operator: '=',
     left: Node { type: 'Identifier', start: 64, end: 65, name: 'x' },
     right: Node { type: 'Literal', start: 68, end: 71, value: 102, raw: '102' } } }
ExpressionStatement
64
72
Node {
  type: 'AssignmentExpression',
  start: 64,
  end: 71,
  operator: '=',
  left: Node { type: 'Identifier', start: 64, end: 65, name: 'x' },
  right: Node { type: 'Literal', start: 68, end: 71, value: 102, raw: '102' } }
AssignmentExpression
64
71
=
Node { type: 'Identifier', start: 64, end: 65, name: 'x' }
Identifier
64
65
x
Node { type: 'Literal', start: 68, end: 71, value: 102, raw: '102' }
Literal
68
71
102
102
Node {
  type: 'ExpressionStatement',
  start: 77,
  end: 85,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 77,
     end: 84,
     operator: '=',
     left: Node { type: 'Identifier', start: 77, end: 78, name: 'p' },
     right: Node { type: 'Literal', start: 81, end: 84, value: 103, raw: '103' } } }
ExpressionStatement
77
85
Node {
  type: 'AssignmentExpression',
  start: 77,
  end: 84,
  operator: '=',
  left: Node { type: 'Identifier', start: 77, end: 78, name: 'p' },
  right: Node { type: 'Literal', start: 81, end: 84, value: 103, raw: '103' } }
AssignmentExpression
77
84
=
Node { type: 'Identifier', start: 77, end: 78, name: 'p' }
Identifier
77
78
p
Node { type: 'Literal', start: 81, end: 84, value: 103, raw: '103' }
Literal
81
84
103
103
Node {
  type: 'ExpressionStatement',
  start: 90,
  end: 103,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 90,
     end: 102,
     operator: '=',
     left: Node { type: 'Identifier', start: 90, end: 96, name: 'result' },
     right: 
      Node {
        type: 'CallExpression',
        start: 99,
        end: 102,
        callee: [Node],
        arguments: [] } } }
ExpressionStatement
90
103
Node {
  type: 'AssignmentExpression',
  start: 90,
  end: 102,
  operator: '=',
  left: Node { type: 'Identifier', start: 90, end: 96, name: 'result' },
  right: 
   Node {
     type: 'CallExpression',
     start: 99,
     end: 102,
     callee: Node { type: 'Identifier', start: 99, end: 100, name: 'f' },
     arguments: [] } }
AssignmentExpression
90
102
=
Node { type: 'Identifier', start: 90, end: 96, name: 'result' }
Identifier
90
96
result
Node {
  type: 'CallExpression',
  start: 99,
  end: 102,
  callee: Node { type: 'Identifier', start: 99, end: 100, name: 'f' },
  arguments: [] }
CallExpression
99
102
Node { type: 'Identifier', start: 99, end: 100, name: 'f' }
Identifier
99
100
f
[]
Node {
  type: 'ExpressionStatement',
  start: 108,
  end: 116,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 108,
     end: 115,
     operator: '=',
     left: Node { type: 'Identifier', start: 108, end: 109, name: 'f' },
     right: Node { type: 'Literal', start: 112, end: 115, value: 104, raw: '104' } } }
ExpressionStatement
108
116
Node {
  type: 'AssignmentExpression',
  start: 108,
  end: 115,
  operator: '=',
  left: Node { type: 'Identifier', start: 108, end: 109, name: 'f' },
  right: Node { type: 'Literal', start: 112, end: 115, value: 104, raw: '104' } }
AssignmentExpression
108
115
=
Node { type: 'Identifier', start: 108, end: 109, name: 'f' }
Identifier
108
109
f
Node { type: 'Literal', start: 112, end: 115, value: 104, raw: '104' }
Literal
112
115
104
104
Node {
  type: 'ExpressionStatement',
  start: 121,
  end: 129,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 121,
     end: 128,
     operator: '=',
     left: Node { type: 'Identifier', start: 121, end: 122, name: 'p' },
     right: Node { type: 'Literal', start: 125, end: 128, value: 105, raw: '105' } } }
ExpressionStatement
121
129
Node {
  type: 'AssignmentExpression',
  start: 121,
  end: 128,
  operator: '=',
  left: Node { type: 'Identifier', start: 121, end: 122, name: 'p' },
  right: Node { type: 'Literal', start: 125, end: 128, value: 105, raw: '105' } }
AssignmentExpression
121
128
=
Node { type: 'Identifier', start: 121, end: 122, name: 'p' }
Identifier
121
122
p
Node { type: 'Literal', start: 125, end: 128, value: 105, raw: '105' }
Literal
125
128
105
105
Node {
  type: 'ExpressionStatement',
  start: 134,
  end: 142,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 134,
     end: 141,
     operator: '=',
     left: Node { type: 'Identifier', start: 134, end: 135, name: 'x' },
     right: Node { type: 'Literal', start: 138, end: 141, value: 106, raw: '106' } } }
ExpressionStatement
134
142
Node {
  type: 'AssignmentExpression',
  start: 134,
  end: 141,
  operator: '=',
  left: Node { type: 'Identifier', start: 134, end: 135, name: 'x' },
  right: Node { type: 'Literal', start: 138, end: 141, value: 106, raw: '106' } }
AssignmentExpression
134
141
=
Node { type: 'Identifier', start: 134, end: 135, name: 'x' }
Identifier
134
135
x
Node { type: 'Literal', start: 138, end: 141, value: 106, raw: '106' }
Literal
138
141
106
106
Node {
  type: 'ReturnStatement',
  start: 147,
  end: 201,
  argument: 
   Node {
     type: 'ObjectExpression',
     start: 154,
     end: 200,
     properties: [ [Node], [Node] ] } }
ReturnStatement
147
201
Node {
  type: 'ObjectExpression',
  start: 154,
  end: 200,
  properties: 
   [ Node {
       type: 'Property',
       start: 155,
       end: 172,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 174,
       end: 199,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
154
200
[ Node {
    type: 'Property',
    start: 155,
    end: 172,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 155, end: 162, name: 'outcome' },
    value: 
     Node {
       type: 'Literal',
       start: 164,
       end: 172,
       value: 'return',
       raw: '"return"' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 174,
    end: 199,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 174, end: 180, name: 'values' },
    value: 
     Node {
       type: 'ArrayExpression',
       start: 182,
       end: 199,
       elements: [Array] },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 155,
  end: 172,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 155, end: 162, name: 'outcome' },
  value: 
   Node {
     type: 'Literal',
     start: 164,
     end: 172,
     value: 'return',
     raw: '"return"' },
  kind: 'init' }
Property
155
172
false
false
false
Node { type: 'Identifier', start: 155, end: 162, name: 'outcome' }
Identifier
155
162
outcome
Node {
  type: 'Literal',
  start: 164,
  end: 172,
  value: 'return',
  raw: '"return"' }
Literal
164
172
return
"return"
init
Node {
  type: 'Property',
  start: 174,
  end: 199,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 174, end: 180, name: 'values' },
  value: 
   Node {
     type: 'ArrayExpression',
     start: 182,
     end: 199,
     elements: [ [Node], [Node], [Node], [Node] ] },
  kind: 'init' }
Property
174
199
false
false
false
Node { type: 'Identifier', start: 174, end: 180, name: 'values' }
Identifier
174
180
values
Node {
  type: 'ArrayExpression',
  start: 182,
  end: 199,
  elements: 
   [ Node { type: 'Identifier', start: 183, end: 184, name: 'f' },
     Node { type: 'Identifier', start: 186, end: 187, name: 'p' },
     Node { type: 'Identifier', start: 189, end: 190, name: 'x' },
     Node { type: 'Identifier', start: 192, end: 198, name: 'result' } ] }
ArrayExpression
182
199
[ Node { type: 'Identifier', start: 183, end: 184, name: 'f' },
  Node { type: 'Identifier', start: 186, end: 187, name: 'p' },
  Node { type: 'Identifier', start: 189, end: 190, name: 'x' },
  Node { type: 'Identifier', start: 192, end: 198, name: 'result' } ]
Node { type: 'Identifier', start: 183, end: 184, name: 'f' }
Identifier
183
184
f
Node { type: 'Identifier', start: 186, end: 187, name: 'p' }
Identifier
186
187
p
Node { type: 'Identifier', start: 189, end: 190, name: 'x' }
Identifier
189
190
x
Node { type: 'Identifier', start: 192, end: 198, name: 'result' }
Identifier
192
198
result
init
Node {
  type: 'ExpressionStatement',
  start: 205,
  end: 219,
  expression: 
   Node {
     type: 'CallExpression',
     start: 205,
     end: 218,
     callee: Node { type: 'Identifier', start: 205, end: 213, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
205
219
Node {
  type: 'CallExpression',
  start: 205,
  end: 218,
  callee: Node { type: 'Identifier', start: 205, end: 213, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 214, end: 217, name: 'foo' } ] }
CallExpression
205
218
Node { type: 'Identifier', start: 205, end: 213, name: 'noInline' }
Identifier
205
213
noInline
[ Node { type: 'Identifier', start: 214, end: 217, name: 'foo' } ]
Node { type: 'Identifier', start: 214, end: 217, name: 'foo' }
Identifier
214
217
foo
Node {
  type: 'FunctionDeclaration',
  start: 221,
  end: 255,
  id: Node { type: 'Identifier', start: 230, end: 233, name: 'bar' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 236, end: 255, body: [ [Node] ] } }
FunctionDeclaration
221
255
Node { type: 'Identifier', start: 230, end: 233, name: 'bar' }
Identifier
230
233
bar
false
false
false
[]
Node {
  type: 'BlockStatement',
  start: 236,
  end: 255,
  body: 
   [ Node {
       type: 'ReturnStatement',
       start: 242,
       end: 253,
       argument: [Node] } ] }
BlockStatement
236
255
[ Node {
    type: 'ReturnStatement',
    start: 242,
    end: 253,
    argument: Node { type: 'Literal', start: 249, end: 252, value: 107, raw: '107' } } ]
Node {
  type: 'ReturnStatement',
  start: 242,
  end: 253,
  argument: Node { type: 'Literal', start: 249, end: 252, value: 107, raw: '107' } }
ReturnStatement
242
253
Node { type: 'Literal', start: 249, end: 252, value: 107, raw: '107' }
Literal
249
252
107
107
Node {
  type: 'ExpressionStatement',
  start: 257,
  end: 271,
  expression: 
   Node {
     type: 'CallExpression',
     start: 257,
     end: 270,
     callee: Node { type: 'Identifier', start: 257, end: 265, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
257
271
Node {
  type: 'CallExpression',
  start: 257,
  end: 270,
  callee: Node { type: 'Identifier', start: 257, end: 265, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 266, end: 269, name: 'bar' } ] }
CallExpression
257
270
Node { type: 'Identifier', start: 257, end: 265, name: 'noInline' }
Identifier
257
265
noInline
[ Node { type: 'Identifier', start: 266, end: 269, name: 'bar' } ]
Node { type: 'Identifier', start: 266, end: 269, name: 'bar' }
Identifier
266
269
bar
Node {
  type: 'ForStatement',
  start: 291,
  end: 972,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 296,
     end: 305,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 307,
     end: 317,
     left: Node { type: 'Identifier', start: 307, end: 308, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 311,
        end: 317,
        value: 100000,
        raw: '100000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 319,
     end: 322,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 321, end: 322, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 324,
     end: 972,
     body: [ [Node], [Node], [Node], [Node], [Node], [Node], [Node] ] } }
ForStatement
291
972
Node {
  type: 'VariableDeclaration',
  start: 296,
  end: 305,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 300,
       end: 305,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
296
305
[ Node {
    type: 'VariableDeclarator',
    start: 300,
    end: 305,
    id: Node { type: 'Identifier', start: 300, end: 301, name: 'i' },
    init: Node { type: 'Literal', start: 304, end: 305, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 300,
  end: 305,
  id: Node { type: 'Identifier', start: 300, end: 301, name: 'i' },
  init: Node { type: 'Literal', start: 304, end: 305, value: 0, raw: '0' } }
VariableDeclarator
300
305
Node { type: 'Identifier', start: 300, end: 301, name: 'i' }
Identifier
300
301
i
Node { type: 'Literal', start: 304, end: 305, value: 0, raw: '0' }
Literal
304
305
0
0
var
Node {
  type: 'BinaryExpression',
  start: 307,
  end: 317,
  left: Node { type: 'Identifier', start: 307, end: 308, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 311,
     end: 317,
     value: 100000,
     raw: '100000' } }
BinaryExpression
307
317
Node { type: 'Identifier', start: 307, end: 308, name: 'i' }
Identifier
307
308
i
<
Node {
  type: 'Literal',
  start: 311,
  end: 317,
  value: 100000,
  raw: '100000' }
Literal
311
317
100000
100000
Node {
  type: 'UpdateExpression',
  start: 319,
  end: 322,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 321, end: 322, name: 'i' } }
UpdateExpression
319
322
++
true
Node { type: 'Identifier', start: 321, end: 322, name: 'i' }
Identifier
321
322
i
Node {
  type: 'BlockStatement',
  start: 324,
  end: 972,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 330,
       end: 352,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 357,
       end: 452,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 457,
       end: 566,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 571,
       end: 667,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 672,
       end: 768,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 773,
       end: 869,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 874,
       end: 970,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
324
972
[ Node {
    type: 'VariableDeclaration',
    start: 330,
    end: 352,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 357,
    end: 452,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 361,
       end: 388,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 398, end: 452, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 457,
    end: 566,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 461,
       end: 487,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 497, end: 566, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 571,
    end: 667,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 575,
       end: 599,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 609, end: 667, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 672,
    end: 768,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 676,
       end: 700,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 710, end: 768, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 773,
    end: 869,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 777,
       end: 801,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 811, end: 869, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 874,
    end: 970,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 878,
       end: 902,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 912, end: 970, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 330,
  end: 352,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 334,
       end: 351,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
330
352
[ Node {
    type: 'VariableDeclarator',
    start: 334,
    end: 351,
    id: Node { type: 'Identifier', start: 334, end: 340, name: 'result' },
    init: 
     Node {
       type: 'CallExpression',
       start: 343,
       end: 351,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 334,
  end: 351,
  id: Node { type: 'Identifier', start: 334, end: 340, name: 'result' },
  init: 
   Node {
     type: 'CallExpression',
     start: 343,
     end: 351,
     callee: Node { type: 'Identifier', start: 343, end: 346, name: 'foo' },
     arguments: [ [Node] ] } }
VariableDeclarator
334
351
Node { type: 'Identifier', start: 334, end: 340, name: 'result' }
Identifier
334
340
result
Node {
  type: 'CallExpression',
  start: 343,
  end: 351,
  callee: Node { type: 'Identifier', start: 343, end: 346, name: 'foo' },
  arguments: 
   [ Node { type: 'Identifier', start: 347, end: 350, name: 'bar' } ] }
CallExpression
343
351
Node { type: 'Identifier', start: 343, end: 346, name: 'foo' }
Identifier
343
346
foo
[ Node { type: 'Identifier', start: 347, end: 350, name: 'bar' } ]
Node { type: 'Identifier', start: 347, end: 350, name: 'bar' }
Identifier
347
350
bar
var
Node {
  type: 'IfStatement',
  start: 357,
  end: 452,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 361,
     end: 388,
     left: 
      Node {
        type: 'MemberExpression',
        start: 361,
        end: 375,
        object: [Node],
        property: [Node],
        computed: false },
     operator: '!==',
     right: 
      Node {
        type: 'Literal',
        start: 380,
        end: 388,
        value: 'return',
        raw: '"return"' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 398,
     end: 452,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 404,
        end: 451,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
357
452
Node {
  type: 'BinaryExpression',
  start: 361,
  end: 388,
  left: 
   Node {
     type: 'MemberExpression',
     start: 361,
     end: 375,
     object: Node { type: 'Identifier', start: 361, end: 367, name: 'result' },
     property: Node { type: 'Identifier', start: 368, end: 375, name: 'outcome' },
     computed: false },
  operator: '!==',
  right: 
   Node {
     type: 'Literal',
     start: 380,
     end: 388,
     value: 'return',
     raw: '"return"' } }
BinaryExpression
361
388
Node {
  type: 'MemberExpression',
  start: 361,
  end: 375,
  object: Node { type: 'Identifier', start: 361, end: 367, name: 'result' },
  property: Node { type: 'Identifier', start: 368, end: 375, name: 'outcome' },
  computed: false }
MemberExpression
361
375
Node { type: 'Identifier', start: 361, end: 367, name: 'result' }
Identifier
361
367
result
Node { type: 'Identifier', start: 368, end: 375, name: 'outcome' }
Identifier
368
375
outcome
false
!==
Node {
  type: 'Literal',
  start: 380,
  end: 388,
  value: 'return',
  raw: '"return"' }
Literal
380
388
return
"return"
Node {
  type: 'ThrowStatement',
  start: 398,
  end: 452,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 404,
     end: 451,
     left: 
      Node {
        type: 'Literal',
        start: 404,
        end: 434,
        value: 'Error in loop: bad outcome: ',
        raw: '"Error in loop: bad outcome: "' },
     operator: '+',
     right: 
      Node {
        type: 'MemberExpression',
        start: 437,
        end: 451,
        object: [Node],
        property: [Node],
        computed: false } } }
ThrowStatement
398
452
Node {
  type: 'BinaryExpression',
  start: 404,
  end: 451,
  left: 
   Node {
     type: 'Literal',
     start: 404,
     end: 434,
     value: 'Error in loop: bad outcome: ',
     raw: '"Error in loop: bad outcome: "' },
  operator: '+',
  right: 
   Node {
     type: 'MemberExpression',
     start: 437,
     end: 451,
     object: Node { type: 'Identifier', start: 437, end: 443, name: 'result' },
     property: Node { type: 'Identifier', start: 444, end: 451, name: 'outcome' },
     computed: false } }
BinaryExpression
404
451
Node {
  type: 'Literal',
  start: 404,
  end: 434,
  value: 'Error in loop: bad outcome: ',
  raw: '"Error in loop: bad outcome: "' }
Literal
404
434
Error in loop: bad outcome: 
"Error in loop: bad outcome: "
+
Node {
  type: 'MemberExpression',
  start: 437,
  end: 451,
  object: Node { type: 'Identifier', start: 437, end: 443, name: 'result' },
  property: Node { type: 'Identifier', start: 444, end: 451, name: 'outcome' },
  computed: false }
MemberExpression
437
451
Node { type: 'Identifier', start: 437, end: 443, name: 'result' }
Identifier
437
443
result
Node { type: 'Identifier', start: 444, end: 451, name: 'outcome' }
Identifier
444
451
outcome
false
null
[+] Exception: ftl-call-exception-no-catch.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1830,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 349,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 351,
       end: 365,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 367,
       end: 414,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 416,
       end: 430,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 450,
       end: 1150,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1179,
       end: 1220,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 1221,
       end: 1261,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 1262,
       end: 1355,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1356,
       end: 1460,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1461,
       end: 1552,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1553,
       end: 1644,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1645,
       end: 1736,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1737,
       end: 1828,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
1830
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 349,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 25, end: 349, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 351,
    end: 365,
    expression: 
     Node {
       type: 'CallExpression',
       start: 351,
       end: 364,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 367,
    end: 414,
    id: Node { type: 'Identifier', start: 376, end: 379, name: 'bar' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 389, end: 414, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 416,
    end: 430,
    expression: 
     Node {
       type: 'CallExpression',
       start: 416,
       end: 429,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 450,
    end: 1150,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 455,
       end: 464,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 466,
       end: 476,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 478,
       end: 481,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 483, end: 1150, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1179,
    end: 1220,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 1179,
       end: 1220,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'VariableDeclaration',
    start: 1221,
    end: 1261,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 1262,
    end: 1355,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1266,
       end: 1296,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1302,
       end: 1355,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1356,
    end: 1460,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1360,
       end: 1386,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1392,
       end: 1460,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1461,
    end: 1552,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1465,
       end: 1489,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1495,
       end: 1552,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1553,
    end: 1644,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1557,
       end: 1581,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1587,
       end: 1644,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1645,
    end: 1736,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1649,
       end: 1673,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1679,
       end: 1736,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1737,
    end: 1828,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1741,
       end: 1765,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1771,
       end: 1828,
       argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 349,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'f' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'p' },
     Node { type: 'Identifier', start: 19, end: 23, name: 'args' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 25,
     end: 349,
     body: [ [Node], [Node], [Node], [Node] ] } }
FunctionDeclaration
0
349
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'f' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'p' },
  Node { type: 'Identifier', start: 19, end: 23, name: 'args' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'f' }
Identifier
13
14
f
Node { type: 'Identifier', start: 16, end: 17, name: 'p' }
Identifier
16
17
p
Node { type: 'Identifier', start: 19, end: 23, name: 'args' }
Identifier
19
23
args
Node {
  type: 'BlockStatement',
  start: 25,
  end: 349,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 31,
       end: 43,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 48,
       end: 65,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'TryStatement',
       start: 70,
       end: 288,
       block: [Node],
       handler: [Node],
       finalizer: null },
     Node {
       type: 'ReturnStatement',
       start: 293,
       end: 347,
       argument: [Node] } ] }
BlockStatement
25
349
[ Node {
    type: 'VariableDeclaration',
    start: 31,
    end: 43,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 48,
    end: 65,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'TryStatement',
    start: 70,
    end: 288,
    block: Node { type: 'BlockStatement', start: 74, end: 204, body: [Array] },
    handler: 
     Node {
       type: 'CatchClause',
       start: 205,
       end: 288,
       param: [Node],
       body: [Node] },
    finalizer: null },
  Node {
    type: 'ReturnStatement',
    start: 293,
    end: 347,
    argument: 
     Node {
       type: 'ObjectExpression',
       start: 300,
       end: 346,
       properties: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 31,
  end: 43,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 35,
       end: 42,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
31
43
[ Node {
    type: 'VariableDeclarator',
    start: 35,
    end: 42,
    id: Node { type: 'Identifier', start: 35, end: 36, name: 'x' },
    init: Node { type: 'Literal', start: 39, end: 42, value: 100, raw: '100' } } ]
Node {
  type: 'VariableDeclarator',
  start: 35,
  end: 42,
  id: Node { type: 'Identifier', start: 35, end: 36, name: 'x' },
  init: Node { type: 'Literal', start: 39, end: 42, value: 100, raw: '100' } }
VariableDeclarator
35
42
Node { type: 'Identifier', start: 35, end: 36, name: 'x' }
Identifier
35
36
x
Node { type: 'Literal', start: 39, end: 42, value: 100, raw: '100' }
Literal
39
42
100
100
var
Node {
  type: 'VariableDeclaration',
  start: 48,
  end: 65,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 52,
       end: 64,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
48
65
[ Node {
    type: 'VariableDeclarator',
    start: 52,
    end: 64,
    id: Node { type: 'Identifier', start: 52, end: 58, name: 'result' },
    init: Node { type: 'Literal', start: 61, end: 64, value: 101, raw: '101' } } ]
Node {
  type: 'VariableDeclarator',
  start: 52,
  end: 64,
  id: Node { type: 'Identifier', start: 52, end: 58, name: 'result' },
  init: Node { type: 'Literal', start: 61, end: 64, value: 101, raw: '101' } }
VariableDeclarator
52
64
Node { type: 'Identifier', start: 52, end: 58, name: 'result' }
Identifier
52
58
result
Node { type: 'Literal', start: 61, end: 64, value: 101, raw: '101' }
Literal
61
64
101
101
var
Node {
  type: 'TryStatement',
  start: 70,
  end: 288,
  block: 
   Node {
     type: 'BlockStatement',
     start: 74,
     end: 204,
     body: [ [Node], [Node], [Node], [Node], [Node], [Node] ] },
  handler: 
   Node {
     type: 'CatchClause',
     start: 205,
     end: 288,
     param: Node { type: 'Identifier', start: 212, end: 213, name: 'e' },
     body: Node { type: 'BlockStatement', start: 215, end: 288, body: [Array] } },
  finalizer: null }
TryStatement
70
288
Node {
  type: 'BlockStatement',
  start: 74,
  end: 204,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 84,
       end: 92,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 101,
       end: 109,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 118,
       end: 147,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 156,
       end: 164,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 173,
       end: 181,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 190,
       end: 198,
       expression: [Node] } ] }
BlockStatement
74
204
[ Node {
    type: 'ExpressionStatement',
    start: 84,
    end: 92,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 84,
       end: 91,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 101,
    end: 109,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 101,
       end: 108,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 118,
    end: 147,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 118,
       end: 146,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 156,
    end: 164,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 156,
       end: 163,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 173,
    end: 181,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 173,
       end: 180,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 190,
    end: 198,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 190,
       end: 197,
       operator: '=',
       left: [Node],
       right: [Node] } } ]
Node {
  type: 'ExpressionStatement',
  start: 84,
  end: 92,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 84,
     end: 91,
     operator: '=',
     left: Node { type: 'Identifier', start: 84, end: 85, name: 'x' },
     right: Node { type: 'Literal', start: 88, end: 91, value: 102, raw: '102' } } }
ExpressionStatement
84
92
Node {
  type: 'AssignmentExpression',
  start: 84,
  end: 91,
  operator: '=',
  left: Node { type: 'Identifier', start: 84, end: 85, name: 'x' },
  right: Node { type: 'Literal', start: 88, end: 91, value: 102, raw: '102' } }
AssignmentExpression
84
91
=
Node { type: 'Identifier', start: 84, end: 85, name: 'x' }
Identifier
84
85
x
Node { type: 'Literal', start: 88, end: 91, value: 102, raw: '102' }
Literal
88
91
102
102
Node {
  type: 'ExpressionStatement',
  start: 101,
  end: 109,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 101,
     end: 108,
     operator: '=',
     left: Node { type: 'Identifier', start: 101, end: 102, name: 'p' },
     right: Node { type: 'Literal', start: 105, end: 108, value: 103, raw: '103' } } }
ExpressionStatement
101
109
Node {
  type: 'AssignmentExpression',
  start: 101,
  end: 108,
  operator: '=',
  left: Node { type: 'Identifier', start: 101, end: 102, name: 'p' },
  right: Node { type: 'Literal', start: 105, end: 108, value: 103, raw: '103' } }
AssignmentExpression
101
108
=
Node { type: 'Identifier', start: 101, end: 102, name: 'p' }
Identifier
101
102
p
Node { type: 'Literal', start: 105, end: 108, value: 103, raw: '103' }
Literal
105
108
103
103
Node {
  type: 'ExpressionStatement',
  start: 118,
  end: 147,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 118,
     end: 146,
     operator: '=',
     left: Node { type: 'Identifier', start: 118, end: 124, name: 'result' },
     right: 
      Node {
        type: 'CallExpression',
        start: 127,
        end: 146,
        callee: [Node],
        arguments: [Array] } } }
ExpressionStatement
118
147
Node {
  type: 'AssignmentExpression',
  start: 118,
  end: 146,
  operator: '=',
  left: Node { type: 'Identifier', start: 118, end: 124, name: 'result' },
  right: 
   Node {
     type: 'CallExpression',
     start: 127,
     end: 146,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 127,
        end: 134,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [ [Node], [Node] ] } }
AssignmentExpression
118
146
=
Node { type: 'Identifier', start: 118, end: 124, name: 'result' }
Identifier
118
124
result
Node {
  type: 'CallExpression',
  start: 127,
  end: 146,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 127,
     end: 134,
     object: Node { type: 'Identifier', start: 127, end: 128, name: 'f' },
     property: Node { type: 'Identifier', start: 129, end: 134, name: 'apply' },
     computed: false },
  arguments: 
   [ Node { type: 'ThisExpression', start: 135, end: 139 },
     Node { type: 'Identifier', start: 141, end: 145, name: 'args' } ] }
CallExpression
127
146
Node {
  type: 'MemberExpression',
  start: 127,
  end: 134,
  object: Node { type: 'Identifier', start: 127, end: 128, name: 'f' },
  property: Node { type: 'Identifier', start: 129, end: 134, name: 'apply' },
  computed: false }
MemberExpression
127
134
Node { type: 'Identifier', start: 127, end: 128, name: 'f' }
Identifier
127
128
f
Node { type: 'Identifier', start: 129, end: 134, name: 'apply' }
Identifier
129
134
apply
false
[ Node { type: 'ThisExpression', start: 135, end: 139 },
  Node { type: 'Identifier', start: 141, end: 145, name: 'args' } ]
Node { type: 'ThisExpression', start: 135, end: 139 }
ThisExpression
135
139
Node { type: 'Identifier', start: 141, end: 145, name: 'args' }
Identifier
141
145
args
Node {
  type: 'ExpressionStatement',
  start: 156,
  end: 164,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 156,
     end: 163,
     operator: '=',
     left: Node { type: 'Identifier', start: 156, end: 157, name: 'f' },
     right: Node { type: 'Literal', start: 160, end: 163, value: 104, raw: '104' } } }
ExpressionStatement
156
164
Node {
  type: 'AssignmentExpression',
  start: 156,
  end: 163,
  operator: '=',
  left: Node { type: 'Identifier', start: 156, end: 157, name: 'f' },
  right: Node { type: 'Literal', start: 160, end: 163, value: 104, raw: '104' } }
AssignmentExpression
156
163
=
Node { type: 'Identifier', start: 156, end: 157, name: 'f' }
Identifier
156
157
f
Node { type: 'Literal', start: 160, end: 163, value: 104, raw: '104' }
Literal
160
163
104
104
Node {
  type: 'ExpressionStatement',
  start: 173,
  end: 181,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 173,
     end: 180,
     operator: '=',
     left: Node { type: 'Identifier', start: 173, end: 174, name: 'p' },
     right: Node { type: 'Literal', start: 177, end: 180, value: 105, raw: '105' } } }
ExpressionStatement
173
181
Node {
  type: 'AssignmentExpression',
  start: 173,
  end: 180,
  operator: '=',
  left: Node { type: 'Identifier', start: 173, end: 174, name: 'p' },
  right: Node { type: 'Literal', start: 177, end: 180, value: 105, raw: '105' } }
AssignmentExpression
173
180
=
Node { type: 'Identifier', start: 173, end: 174, name: 'p' }
Identifier
173
174
p
Node { type: 'Literal', start: 177, end: 180, value: 105, raw: '105' }
Literal
177
180
105
105
Node {
  type: 'ExpressionStatement',
  start: 190,
  end: 198,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 190,
     end: 197,
     operator: '=',
     left: Node { type: 'Identifier', start: 190, end: 191, name: 'x' },
     right: Node { type: 'Literal', start: 194, end: 197, value: 106, raw: '106' } } }
ExpressionStatement
190
198
Node {
  type: 'AssignmentExpression',
  start: 190,
  end: 197,
  operator: '=',
  left: Node { type: 'Identifier', start: 190, end: 191, name: 'x' },
  right: Node { type: 'Literal', start: 194, end: 197, value: 106, raw: '106' } }
AssignmentExpression
190
197
=
Node { type: 'Identifier', start: 190, end: 191, name: 'x' }
Identifier
190
191
x
Node { type: 'Literal', start: 194, end: 197, value: 106, raw: '106' }
Literal
194
197
106
106
Node {
  type: 'CatchClause',
  start: 205,
  end: 288,
  param: Node { type: 'Identifier', start: 212, end: 213, name: 'e' },
  body: Node { type: 'BlockStatement', start: 215, end: 288, body: [ [Node] ] } }
CatchClause
205
288
Node { type: 'Identifier', start: 212, end: 213, name: 'e' }
Identifier
212
213
e
Node {
  type: 'BlockStatement',
  start: 215,
  end: 288,
  body: 
   [ Node {
       type: 'ReturnStatement',
       start: 225,
       end: 282,
       argument: [Node] } ] }
BlockStatement
215
288
[ Node {
    type: 'ReturnStatement',
    start: 225,
    end: 282,
    argument: 
     Node {
       type: 'ObjectExpression',
       start: 232,
       end: 281,
       properties: [Array] } } ]
Node {
  type: 'ReturnStatement',
  start: 225,
  end: 282,
  argument: 
   Node {
     type: 'ObjectExpression',
     start: 232,
     end: 281,
     properties: [ [Node], [Node] ] } }
ReturnStatement
225
282
Node {
  type: 'ObjectExpression',
  start: 232,
  end: 281,
  properties: 
   [ Node {
       type: 'Property',
       start: 233,
       end: 253,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 255,
       end: 280,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
232
281
[ Node {
    type: 'Property',
    start: 233,
    end: 253,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 233, end: 240, name: 'outcome' },
    value: 
     Node {
       type: 'Literal',
       start: 242,
       end: 253,
       value: 'exception',
       raw: '"exception"' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 255,
    end: 280,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 255, end: 261, name: 'values' },
    value: 
     Node {
       type: 'ArrayExpression',
       start: 263,
       end: 280,
       elements: [Array] },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 233,
  end: 253,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 233, end: 240, name: 'outcome' },
  value: 
   Node {
     type: 'Literal',
     start: 242,
     end: 253,
     value: 'exception',
     raw: '"exception"' },
  kind: 'init' }
Property
233
253
false
false
false
Node { type: 'Identifier', start: 233, end: 240, name: 'outcome' }
Identifier
233
240
outcome
Node {
  type: 'Literal',
  start: 242,
  end: 253,
  value: 'exception',
  raw: '"exception"' }
Literal
242
253
exception
"exception"
init
Node {
  type: 'Property',
  start: 255,
  end: 280,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 255, end: 261, name: 'values' },
  value: 
   Node {
     type: 'ArrayExpression',
     start: 263,
     end: 280,
     elements: [ [Node], [Node], [Node], [Node] ] },
  kind: 'init' }
Property
255
280
false
false
false
Node { type: 'Identifier', start: 255, end: 261, name: 'values' }
Identifier
255
261
values
Node {
  type: 'ArrayExpression',
  start: 263,
  end: 280,
  elements: 
   [ Node { type: 'Identifier', start: 264, end: 265, name: 'f' },
     Node { type: 'Identifier', start: 267, end: 268, name: 'p' },
     Node { type: 'Identifier', start: 270, end: 271, name: 'x' },
     Node { type: 'Identifier', start: 273, end: 279, name: 'result' } ] }
ArrayExpression
263
280
[ Node { type: 'Identifier', start: 264, end: 265, name: 'f' },
  Node { type: 'Identifier', start: 267, end: 268, name: 'p' },
  Node { type: 'Identifier', start: 270, end: 271, name: 'x' },
  Node { type: 'Identifier', start: 273, end: 279, name: 'result' } ]
Node { type: 'Identifier', start: 264, end: 265, name: 'f' }
Identifier
264
265
f
Node { type: 'Identifier', start: 267, end: 268, name: 'p' }
Identifier
267
268
p
Node { type: 'Identifier', start: 270, end: 271, name: 'x' }
Identifier
270
271
x
Node { type: 'Identifier', start: 273, end: 279, name: 'result' }
Identifier
273
279
result
init
null
[+] Exception: ftl-call-exception.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1894,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 94,
       end: 457,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 459,
       end: 473,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 475,
       end: 522,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 524,
       end: 538,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 558,
       end: 1261,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 1290,
       end: 1325,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 1326,
       end: 1419,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1420,
       end: 1524,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1525,
       end: 1616,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1617,
       end: 1708,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1709,
       end: 1800,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1801,
       end: 1892,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
1894
[ Node {
    type: 'FunctionDeclaration',
    start: 94,
    end: 457,
    id: Node { type: 'Identifier', start: 103, end: 106, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 119, end: 457, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 459,
    end: 473,
    expression: 
     Node {
       type: 'CallExpression',
       start: 459,
       end: 472,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 475,
    end: 522,
    id: Node { type: 'Identifier', start: 484, end: 487, name: 'bar' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 497, end: 522, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 524,
    end: 538,
    expression: 
     Node {
       type: 'CallExpression',
       start: 524,
       end: 537,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 558,
    end: 1261,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 563,
       end: 572,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 574,
       end: 584,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 586,
       end: 589,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 591, end: 1261, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 1290,
    end: 1325,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 1326,
    end: 1419,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1330,
       end: 1360,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1366,
       end: 1419,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1420,
    end: 1524,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1424,
       end: 1450,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1456,
       end: 1524,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1525,
    end: 1616,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1529,
       end: 1553,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1559,
       end: 1616,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1617,
    end: 1708,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1621,
       end: 1645,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1651,
       end: 1708,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1709,
    end: 1800,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1713,
       end: 1737,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1743,
       end: 1800,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1801,
    end: 1892,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1805,
       end: 1829,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1835,
       end: 1892,
       argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 94,
  end: 457,
  id: Node { type: 'Identifier', start: 103, end: 106, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 107, end: 108, name: 'f' },
     Node { type: 'Identifier', start: 110, end: 111, name: 'p' },
     Node { type: 'Identifier', start: 113, end: 117, name: 'args' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 119,
     end: 457,
     body: [ [Node], [Node], [Node], [Node], [Node] ] } }
FunctionDeclaration
94
457
Node { type: 'Identifier', start: 103, end: 106, name: 'foo' }
Identifier
103
106
foo
false
false
false
[ Node { type: 'Identifier', start: 107, end: 108, name: 'f' },
  Node { type: 'Identifier', start: 110, end: 111, name: 'p' },
  Node { type: 'Identifier', start: 113, end: 117, name: 'args' } ]
Node { type: 'Identifier', start: 107, end: 108, name: 'f' }
Identifier
107
108
f
Node { type: 'Identifier', start: 110, end: 111, name: 'p' }
Identifier
110
111
p
Node { type: 'Identifier', start: 113, end: 117, name: 'args' }
Identifier
113
117
args
Node {
  type: 'BlockStatement',
  start: 119,
  end: 457,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 125,
       end: 137,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 142,
       end: 159,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 164,
       end: 177,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'TryStatement',
       start: 182,
       end: 395,
       block: [Node],
       handler: [Node],
       finalizer: null },
     Node {
       type: 'ReturnStatement',
       start: 400,
       end: 455,
       argument: [Node] } ] }
BlockStatement
119
457
[ Node {
    type: 'VariableDeclaration',
    start: 125,
    end: 137,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 142,
    end: 159,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 164,
    end: 177,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'TryStatement',
    start: 182,
    end: 395,
    block: Node { type: 'BlockStatement', start: 186, end: 310, body: [Array] },
    handler: 
     Node {
       type: 'CatchClause',
       start: 311,
       end: 395,
       param: [Node],
       body: [Node] },
    finalizer: null },
  Node {
    type: 'ReturnStatement',
    start: 400,
    end: 455,
    argument: 
     Node {
       type: 'ObjectExpression',
       start: 407,
       end: 454,
       properties: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 125,
  end: 137,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 129,
       end: 136,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
125
137
[ Node {
    type: 'VariableDeclarator',
    start: 129,
    end: 136,
    id: Node { type: 'Identifier', start: 129, end: 130, name: 'x' },
    init: Node { type: 'Literal', start: 133, end: 136, value: 100, raw: '100' } } ]
Node {
  type: 'VariableDeclarator',
  start: 129,
  end: 136,
  id: Node { type: 'Identifier', start: 129, end: 130, name: 'x' },
  init: Node { type: 'Literal', start: 133, end: 136, value: 100, raw: '100' } }
VariableDeclarator
129
136
Node { type: 'Identifier', start: 129, end: 130, name: 'x' }
Identifier
129
130
x
Node { type: 'Literal', start: 133, end: 136, value: 100, raw: '100' }
Literal
133
136
100
100
var
Node {
  type: 'VariableDeclaration',
  start: 142,
  end: 159,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 146,
       end: 158,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
142
159
[ Node {
    type: 'VariableDeclarator',
    start: 146,
    end: 158,
    id: Node { type: 'Identifier', start: 146, end: 152, name: 'result' },
    init: Node { type: 'Literal', start: 155, end: 158, value: 101, raw: '101' } } ]
Node {
  type: 'VariableDeclarator',
  start: 146,
  end: 158,
  id: Node { type: 'Identifier', start: 146, end: 152, name: 'result' },
  init: Node { type: 'Literal', start: 155, end: 158, value: 101, raw: '101' } }
VariableDeclarator
146
158
Node { type: 'Identifier', start: 146, end: 152, name: 'result' }
Identifier
146
152
result
Node { type: 'Literal', start: 155, end: 158, value: 101, raw: '101' }
Literal
155
158
101
101
var
Node {
  type: 'VariableDeclaration',
  start: 164,
  end: 177,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 168,
       end: 176,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
164
177
[ Node {
    type: 'VariableDeclarator',
    start: 168,
    end: 176,
    id: Node { type: 'Identifier', start: 168, end: 170, name: 'pf' },
    init: 
     Node {
       type: 'MemberExpression',
       start: 173,
       end: 176,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'VariableDeclarator',
  start: 168,
  end: 176,
  id: Node { type: 'Identifier', start: 168, end: 170, name: 'pf' },
  init: 
   Node {
     type: 'MemberExpression',
     start: 173,
     end: 176,
     object: Node { type: 'Identifier', start: 173, end: 174, name: 'p' },
     property: Node { type: 'Identifier', start: 175, end: 176, name: 'g' },
     computed: false } }
VariableDeclarator
168
176
Node { type: 'Identifier', start: 168, end: 170, name: 'pf' }
Identifier
168
170
pf
Node {
  type: 'MemberExpression',
  start: 173,
  end: 176,
  object: Node { type: 'Identifier', start: 173, end: 174, name: 'p' },
  property: Node { type: 'Identifier', start: 175, end: 176, name: 'g' },
  computed: false }
MemberExpression
173
176
Node { type: 'Identifier', start: 173, end: 174, name: 'p' }
Identifier
173
174
p
Node { type: 'Identifier', start: 175, end: 176, name: 'g' }
Identifier
175
176
g
false
var
Node {
  type: 'TryStatement',
  start: 182,
  end: 395,
  block: 
   Node {
     type: 'BlockStatement',
     start: 186,
     end: 310,
     body: [ [Node], [Node], [Node], [Node], [Node], [Node] ] },
  handler: 
   Node {
     type: 'CatchClause',
     start: 311,
     end: 395,
     param: Node { type: 'Identifier', start: 318, end: 319, name: 'e' },
     body: Node { type: 'BlockStatement', start: 321, end: 395, body: [Array] } },
  finalizer: null }
TryStatement
182
395
Node {
  type: 'BlockStatement',
  start: 186,
  end: 310,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 196,
       end: 204,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 213,
       end: 218,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 227,
       end: 256,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 265,
       end: 273,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 282,
       end: 287,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 296,
       end: 304,
       expression: [Node] } ] }
BlockStatement
186
310
[ Node {
    type: 'ExpressionStatement',
    start: 196,
    end: 204,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 196,
       end: 203,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 213,
    end: 218,
    expression: 
     Node {
       type: 'UpdateExpression',
       start: 213,
       end: 217,
       operator: '++',
       prefix: false,
       argument: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 227,
    end: 256,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 227,
       end: 255,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 265,
    end: 273,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 265,
       end: 272,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 282,
    end: 287,
    expression: 
     Node {
       type: 'UpdateExpression',
       start: 282,
       end: 286,
       operator: '++',
       prefix: false,
       argument: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 296,
    end: 304,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 296,
       end: 303,
       operator: '=',
       left: [Node],
       right: [Node] } } ]
Node {
  type: 'ExpressionStatement',
  start: 196,
  end: 204,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 196,
     end: 203,
     operator: '=',
     left: Node { type: 'Identifier', start: 196, end: 197, name: 'x' },
     right: Node { type: 'Literal', start: 200, end: 203, value: 102, raw: '102' } } }
ExpressionStatement
196
204
Node {
  type: 'AssignmentExpression',
  start: 196,
  end: 203,
  operator: '=',
  left: Node { type: 'Identifier', start: 196, end: 197, name: 'x' },
  right: Node { type: 'Literal', start: 200, end: 203, value: 102, raw: '102' } }
AssignmentExpression
196
203
=
Node { type: 'Identifier', start: 196, end: 197, name: 'x' }
Identifier
196
197
x
Node { type: 'Literal', start: 200, end: 203, value: 102, raw: '102' }
Literal
200
203
102
102
Node {
  type: 'ExpressionStatement',
  start: 213,
  end: 218,
  expression: 
   Node {
     type: 'UpdateExpression',
     start: 213,
     end: 217,
     operator: '++',
     prefix: false,
     argument: Node { type: 'Identifier', start: 213, end: 215, name: 'pf' } } }
ExpressionStatement
213
218
Node {
  type: 'UpdateExpression',
  start: 213,
  end: 217,
  operator: '++',
  prefix: false,
  argument: Node { type: 'Identifier', start: 213, end: 215, name: 'pf' } }
UpdateExpression
213
217
++
false
Node { type: 'Identifier', start: 213, end: 215, name: 'pf' }
Identifier
213
215
pf
Node {
  type: 'ExpressionStatement',
  start: 227,
  end: 256,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 227,
     end: 255,
     operator: '=',
     left: Node { type: 'Identifier', start: 227, end: 233, name: 'result' },
     right: 
      Node {
        type: 'CallExpression',
        start: 236,
        end: 255,
        callee: [Node],
        arguments: [Array] } } }
ExpressionStatement
227
256
Node {
  type: 'AssignmentExpression',
  start: 227,
  end: 255,
  operator: '=',
  left: Node { type: 'Identifier', start: 227, end: 233, name: 'result' },
  right: 
   Node {
     type: 'CallExpression',
     start: 236,
     end: 255,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 236,
        end: 243,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [ [Node], [Node] ] } }
AssignmentExpression
227
255
=
Node { type: 'Identifier', start: 227, end: 233, name: 'result' }
Identifier
227
233
result
Node {
  type: 'CallExpression',
  start: 236,
  end: 255,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 236,
     end: 243,
     object: Node { type: 'Identifier', start: 236, end: 237, name: 'f' },
     property: Node { type: 'Identifier', start: 238, end: 243, name: 'apply' },
     computed: false },
  arguments: 
   [ Node { type: 'ThisExpression', start: 244, end: 248 },
     Node { type: 'Identifier', start: 250, end: 254, name: 'args' } ] }
CallExpression
236
255
Node {
  type: 'MemberExpression',
  start: 236,
  end: 243,
  object: Node { type: 'Identifier', start: 236, end: 237, name: 'f' },
  property: Node { type: 'Identifier', start: 238, end: 243, name: 'apply' },
  computed: false }
MemberExpression
236
243
Node { type: 'Identifier', start: 236, end: 237, name: 'f' }
Identifier
236
237
f
Node { type: 'Identifier', start: 238, end: 243, name: 'apply' }
Identifier
238
243
apply
false
[ Node { type: 'ThisExpression', start: 244, end: 248 },
  Node { type: 'Identifier', start: 250, end: 254, name: 'args' } ]
Node { type: 'ThisExpression', start: 244, end: 248 }
ThisExpression
244
248
Node { type: 'Identifier', start: 250, end: 254, name: 'args' }
Identifier
250
254
args
Node {
  type: 'ExpressionStatement',
  start: 265,
  end: 273,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 265,
     end: 272,
     operator: '=',
     left: Node { type: 'Identifier', start: 265, end: 266, name: 'f' },
     right: Node { type: 'Literal', start: 269, end: 272, value: 104, raw: '104' } } }
ExpressionStatement
265
273
Node {
  type: 'AssignmentExpression',
  start: 265,
  end: 272,
  operator: '=',
  left: Node { type: 'Identifier', start: 265, end: 266, name: 'f' },
  right: Node { type: 'Literal', start: 269, end: 272, value: 104, raw: '104' } }
AssignmentExpression
265
272
=
Node { type: 'Identifier', start: 265, end: 266, name: 'f' }
Identifier
265
266
f
Node { type: 'Literal', start: 269, end: 272, value: 104, raw: '104' }
Literal
269
272
104
104
Node {
  type: 'ExpressionStatement',
  start: 282,
  end: 287,
  expression: 
   Node {
     type: 'UpdateExpression',
     start: 282,
     end: 286,
     operator: '++',
     prefix: false,
     argument: Node { type: 'Identifier', start: 282, end: 284, name: 'pf' } } }
ExpressionStatement
282
287
Node {
  type: 'UpdateExpression',
  start: 282,
  end: 286,
  operator: '++',
  prefix: false,
  argument: Node { type: 'Identifier', start: 282, end: 284, name: 'pf' } }
UpdateExpression
282
286
++
false
Node { type: 'Identifier', start: 282, end: 284, name: 'pf' }
Identifier
282
284
pf
Node {
  type: 'ExpressionStatement',
  start: 296,
  end: 304,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 296,
     end: 303,
     operator: '=',
     left: Node { type: 'Identifier', start: 296, end: 297, name: 'x' },
     right: Node { type: 'Literal', start: 300, end: 303, value: 106, raw: '106' } } }
ExpressionStatement
296
304
Node {
  type: 'AssignmentExpression',
  start: 296,
  end: 303,
  operator: '=',
  left: Node { type: 'Identifier', start: 296, end: 297, name: 'x' },
  right: Node { type: 'Literal', start: 300, end: 303, value: 106, raw: '106' } }
AssignmentExpression
296
303
=
Node { type: 'Identifier', start: 296, end: 297, name: 'x' }
Identifier
296
297
x
Node { type: 'Literal', start: 300, end: 303, value: 106, raw: '106' }
Literal
300
303
106
106
Node {
  type: 'CatchClause',
  start: 311,
  end: 395,
  param: Node { type: 'Identifier', start: 318, end: 319, name: 'e' },
  body: Node { type: 'BlockStatement', start: 321, end: 395, body: [ [Node] ] } }
CatchClause
311
395
Node { type: 'Identifier', start: 318, end: 319, name: 'e' }
Identifier
318
319
e
Node {
  type: 'BlockStatement',
  start: 321,
  end: 395,
  body: 
   [ Node {
       type: 'ReturnStatement',
       start: 331,
       end: 389,
       argument: [Node] } ] }
BlockStatement
321
395
[ Node {
    type: 'ReturnStatement',
    start: 331,
    end: 389,
    argument: 
     Node {
       type: 'ObjectExpression',
       start: 338,
       end: 388,
       properties: [Array] } } ]
Node {
  type: 'ReturnStatement',
  start: 331,
  end: 389,
  argument: 
   Node {
     type: 'ObjectExpression',
     start: 338,
     end: 388,
     properties: [ [Node], [Node] ] } }
ReturnStatement
331
389
Node {
  type: 'ObjectExpression',
  start: 338,
  end: 388,
  properties: 
   [ Node {
       type: 'Property',
       start: 339,
       end: 359,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 361,
       end: 387,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
338
388
[ Node {
    type: 'Property',
    start: 339,
    end: 359,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 339, end: 346, name: 'outcome' },
    value: 
     Node {
       type: 'Literal',
       start: 348,
       end: 359,
       value: 'exception',
       raw: '"exception"' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 361,
    end: 387,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 361, end: 367, name: 'values' },
    value: 
     Node {
       type: 'ArrayExpression',
       start: 369,
       end: 387,
       elements: [Array] },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 339,
  end: 359,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 339, end: 346, name: 'outcome' },
  value: 
   Node {
     type: 'Literal',
     start: 348,
     end: 359,
     value: 'exception',
     raw: '"exception"' },
  kind: 'init' }
Property
339
359
false
false
false
Node { type: 'Identifier', start: 339, end: 346, name: 'outcome' }
Identifier
339
346
outcome
Node {
  type: 'Literal',
  start: 348,
  end: 359,
  value: 'exception',
  raw: '"exception"' }
Literal
348
359
exception
"exception"
init
Node {
  type: 'Property',
  start: 361,
  end: 387,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 361, end: 367, name: 'values' },
  value: 
   Node {
     type: 'ArrayExpression',
     start: 369,
     end: 387,
     elements: [ [Node], [Node], [Node], [Node] ] },
  kind: 'init' }
Property
361
387
false
false
false
Node { type: 'Identifier', start: 361, end: 367, name: 'values' }
Identifier
361
367
values
Node {
  type: 'ArrayExpression',
  start: 369,
  end: 387,
  elements: 
   [ Node { type: 'Identifier', start: 370, end: 371, name: 'f' },
     Node { type: 'Identifier', start: 373, end: 375, name: 'pf' },
     Node { type: 'Identifier', start: 377, end: 378, name: 'x' },
     Node { type: 'Identifier', start: 380, end: 386, name: 'result' } ] }
ArrayExpression
369
387
[ Node { type: 'Identifier', start: 370, end: 371, name: 'f' },
  Node { type: 'Identifier', start: 373, end: 375, name: 'pf' },
  Node { type: 'Identifier', start: 377, end: 378, name: 'x' },
  Node { type: 'Identifier', start: 380, end: 386, name: 'result' } ]
Node { type: 'Identifier', start: 370, end: 371, name: 'f' }
Identifier
370
371
f
Node { type: 'Identifier', start: 373, end: 375, name: 'pf' }
Identifier
373
375
pf
Node { type: 'Identifier', start: 377, end: 378, name: 'x' }
Identifier
377
378
x
Node { type: 'Identifier', start: 380, end: 386, name: 'result' }
Identifier
380
386
result
init
null
[+] Exception: ftl-call-varargs-bad-args-exception-interesting-live-state.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1817,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 363,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 365,
       end: 379,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 381,
       end: 428,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 430,
       end: 444,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 464,
       end: 1167,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 1196,
       end: 1244,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 1245,
       end: 1338,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1339,
       end: 1443,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1444,
       end: 1539,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1540,
       end: 1631,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1632,
       end: 1723,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1724,
       end: 1815,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
1817
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 363,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 25, end: 363, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 365,
    end: 379,
    expression: 
     Node {
       type: 'CallExpression',
       start: 365,
       end: 378,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 381,
    end: 428,
    id: Node { type: 'Identifier', start: 390, end: 393, name: 'bar' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 403, end: 428, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 430,
    end: 444,
    expression: 
     Node {
       type: 'CallExpression',
       start: 430,
       end: 443,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 464,
    end: 1167,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 469,
       end: 478,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 480,
       end: 490,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 492,
       end: 495,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 497, end: 1167, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 1196,
    end: 1244,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 1245,
    end: 1338,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1249,
       end: 1279,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1285,
       end: 1338,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1339,
    end: 1443,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1343,
       end: 1369,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1375,
       end: 1443,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1444,
    end: 1539,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1448,
       end: 1476,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1482,
       end: 1539,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1540,
    end: 1631,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1544,
       end: 1568,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1574,
       end: 1631,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1632,
    end: 1723,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1636,
       end: 1660,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1666,
       end: 1723,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1724,
    end: 1815,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1728,
       end: 1752,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1758,
       end: 1815,
       argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 363,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'f' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'p' },
     Node { type: 'Identifier', start: 19, end: 23, name: 'args' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 25,
     end: 363,
     body: [ [Node], [Node], [Node], [Node], [Node] ] } }
FunctionDeclaration
0
363
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'f' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'p' },
  Node { type: 'Identifier', start: 19, end: 23, name: 'args' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'f' }
Identifier
13
14
f
Node { type: 'Identifier', start: 16, end: 17, name: 'p' }
Identifier
16
17
p
Node { type: 'Identifier', start: 19, end: 23, name: 'args' }
Identifier
19
23
args
Node {
  type: 'BlockStatement',
  start: 25,
  end: 363,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 31,
       end: 43,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 48,
       end: 65,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 70,
       end: 83,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'TryStatement',
       start: 88,
       end: 301,
       block: [Node],
       handler: [Node],
       finalizer: null },
     Node {
       type: 'ReturnStatement',
       start: 306,
       end: 361,
       argument: [Node] } ] }
BlockStatement
25
363
[ Node {
    type: 'VariableDeclaration',
    start: 31,
    end: 43,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 48,
    end: 65,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 70,
    end: 83,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'TryStatement',
    start: 88,
    end: 301,
    block: Node { type: 'BlockStatement', start: 92, end: 216, body: [Array] },
    handler: 
     Node {
       type: 'CatchClause',
       start: 217,
       end: 301,
       param: [Node],
       body: [Node] },
    finalizer: null },
  Node {
    type: 'ReturnStatement',
    start: 306,
    end: 361,
    argument: 
     Node {
       type: 'ObjectExpression',
       start: 313,
       end: 360,
       properties: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 31,
  end: 43,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 35,
       end: 42,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
31
43
[ Node {
    type: 'VariableDeclarator',
    start: 35,
    end: 42,
    id: Node { type: 'Identifier', start: 35, end: 36, name: 'x' },
    init: Node { type: 'Literal', start: 39, end: 42, value: 100, raw: '100' } } ]
Node {
  type: 'VariableDeclarator',
  start: 35,
  end: 42,
  id: Node { type: 'Identifier', start: 35, end: 36, name: 'x' },
  init: Node { type: 'Literal', start: 39, end: 42, value: 100, raw: '100' } }
VariableDeclarator
35
42
Node { type: 'Identifier', start: 35, end: 36, name: 'x' }
Identifier
35
36
x
Node { type: 'Literal', start: 39, end: 42, value: 100, raw: '100' }
Literal
39
42
100
100
var
Node {
  type: 'VariableDeclaration',
  start: 48,
  end: 65,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 52,
       end: 64,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
48
65
[ Node {
    type: 'VariableDeclarator',
    start: 52,
    end: 64,
    id: Node { type: 'Identifier', start: 52, end: 58, name: 'result' },
    init: Node { type: 'Literal', start: 61, end: 64, value: 101, raw: '101' } } ]
Node {
  type: 'VariableDeclarator',
  start: 52,
  end: 64,
  id: Node { type: 'Identifier', start: 52, end: 58, name: 'result' },
  init: Node { type: 'Literal', start: 61, end: 64, value: 101, raw: '101' } }
VariableDeclarator
52
64
Node { type: 'Identifier', start: 52, end: 58, name: 'result' }
Identifier
52
58
result
Node { type: 'Literal', start: 61, end: 64, value: 101, raw: '101' }
Literal
61
64
101
101
var
Node {
  type: 'VariableDeclaration',
  start: 70,
  end: 83,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 74,
       end: 82,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
70
83
[ Node {
    type: 'VariableDeclarator',
    start: 74,
    end: 82,
    id: Node { type: 'Identifier', start: 74, end: 76, name: 'pf' },
    init: 
     Node {
       type: 'MemberExpression',
       start: 79,
       end: 82,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'VariableDeclarator',
  start: 74,
  end: 82,
  id: Node { type: 'Identifier', start: 74, end: 76, name: 'pf' },
  init: 
   Node {
     type: 'MemberExpression',
     start: 79,
     end: 82,
     object: Node { type: 'Identifier', start: 79, end: 80, name: 'p' },
     property: Node { type: 'Identifier', start: 81, end: 82, name: 'g' },
     computed: false } }
VariableDeclarator
74
82
Node { type: 'Identifier', start: 74, end: 76, name: 'pf' }
Identifier
74
76
pf
Node {
  type: 'MemberExpression',
  start: 79,
  end: 82,
  object: Node { type: 'Identifier', start: 79, end: 80, name: 'p' },
  property: Node { type: 'Identifier', start: 81, end: 82, name: 'g' },
  computed: false }
MemberExpression
79
82
Node { type: 'Identifier', start: 79, end: 80, name: 'p' }
Identifier
79
80
p
Node { type: 'Identifier', start: 81, end: 82, name: 'g' }
Identifier
81
82
g
false
var
Node {
  type: 'TryStatement',
  start: 88,
  end: 301,
  block: 
   Node {
     type: 'BlockStatement',
     start: 92,
     end: 216,
     body: [ [Node], [Node], [Node], [Node], [Node], [Node] ] },
  handler: 
   Node {
     type: 'CatchClause',
     start: 217,
     end: 301,
     param: Node { type: 'Identifier', start: 224, end: 225, name: 'e' },
     body: Node { type: 'BlockStatement', start: 227, end: 301, body: [Array] } },
  finalizer: null }
TryStatement
88
301
Node {
  type: 'BlockStatement',
  start: 92,
  end: 216,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 102,
       end: 110,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 119,
       end: 124,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 133,
       end: 162,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 171,
       end: 179,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 188,
       end: 193,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 202,
       end: 210,
       expression: [Node] } ] }
BlockStatement
92
216
[ Node {
    type: 'ExpressionStatement',
    start: 102,
    end: 110,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 102,
       end: 109,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 119,
    end: 124,
    expression: 
     Node {
       type: 'UpdateExpression',
       start: 119,
       end: 123,
       operator: '++',
       prefix: false,
       argument: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 133,
    end: 162,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 133,
       end: 161,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 171,
    end: 179,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 171,
       end: 178,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 188,
    end: 193,
    expression: 
     Node {
       type: 'UpdateExpression',
       start: 188,
       end: 192,
       operator: '++',
       prefix: false,
       argument: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 202,
    end: 210,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 202,
       end: 209,
       operator: '=',
       left: [Node],
       right: [Node] } } ]
Node {
  type: 'ExpressionStatement',
  start: 102,
  end: 110,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 102,
     end: 109,
     operator: '=',
     left: Node { type: 'Identifier', start: 102, end: 103, name: 'x' },
     right: Node { type: 'Literal', start: 106, end: 109, value: 102, raw: '102' } } }
ExpressionStatement
102
110
Node {
  type: 'AssignmentExpression',
  start: 102,
  end: 109,
  operator: '=',
  left: Node { type: 'Identifier', start: 102, end: 103, name: 'x' },
  right: Node { type: 'Literal', start: 106, end: 109, value: 102, raw: '102' } }
AssignmentExpression
102
109
=
Node { type: 'Identifier', start: 102, end: 103, name: 'x' }
Identifier
102
103
x
Node { type: 'Literal', start: 106, end: 109, value: 102, raw: '102' }
Literal
106
109
102
102
Node {
  type: 'ExpressionStatement',
  start: 119,
  end: 124,
  expression: 
   Node {
     type: 'UpdateExpression',
     start: 119,
     end: 123,
     operator: '++',
     prefix: false,
     argument: Node { type: 'Identifier', start: 119, end: 121, name: 'pf' } } }
ExpressionStatement
119
124
Node {
  type: 'UpdateExpression',
  start: 119,
  end: 123,
  operator: '++',
  prefix: false,
  argument: Node { type: 'Identifier', start: 119, end: 121, name: 'pf' } }
UpdateExpression
119
123
++
false
Node { type: 'Identifier', start: 119, end: 121, name: 'pf' }
Identifier
119
121
pf
Node {
  type: 'ExpressionStatement',
  start: 133,
  end: 162,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 133,
     end: 161,
     operator: '=',
     left: Node { type: 'Identifier', start: 133, end: 139, name: 'result' },
     right: 
      Node {
        type: 'CallExpression',
        start: 142,
        end: 161,
        callee: [Node],
        arguments: [Array] } } }
ExpressionStatement
133
162
Node {
  type: 'AssignmentExpression',
  start: 133,
  end: 161,
  operator: '=',
  left: Node { type: 'Identifier', start: 133, end: 139, name: 'result' },
  right: 
   Node {
     type: 'CallExpression',
     start: 142,
     end: 161,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 142,
        end: 149,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [ [Node], [Node] ] } }
AssignmentExpression
133
161
=
Node { type: 'Identifier', start: 133, end: 139, name: 'result' }
Identifier
133
139
result
Node {
  type: 'CallExpression',
  start: 142,
  end: 161,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 142,
     end: 149,
     object: Node { type: 'Identifier', start: 142, end: 143, name: 'f' },
     property: Node { type: 'Identifier', start: 144, end: 149, name: 'apply' },
     computed: false },
  arguments: 
   [ Node { type: 'ThisExpression', start: 150, end: 154 },
     Node { type: 'Identifier', start: 156, end: 160, name: 'args' } ] }
CallExpression
142
161
Node {
  type: 'MemberExpression',
  start: 142,
  end: 149,
  object: Node { type: 'Identifier', start: 142, end: 143, name: 'f' },
  property: Node { type: 'Identifier', start: 144, end: 149, name: 'apply' },
  computed: false }
MemberExpression
142
149
Node { type: 'Identifier', start: 142, end: 143, name: 'f' }
Identifier
142
143
f
Node { type: 'Identifier', start: 144, end: 149, name: 'apply' }
Identifier
144
149
apply
false
[ Node { type: 'ThisExpression', start: 150, end: 154 },
  Node { type: 'Identifier', start: 156, end: 160, name: 'args' } ]
Node { type: 'ThisExpression', start: 150, end: 154 }
ThisExpression
150
154
Node { type: 'Identifier', start: 156, end: 160, name: 'args' }
Identifier
156
160
args
Node {
  type: 'ExpressionStatement',
  start: 171,
  end: 179,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 171,
     end: 178,
     operator: '=',
     left: Node { type: 'Identifier', start: 171, end: 172, name: 'f' },
     right: Node { type: 'Literal', start: 175, end: 178, value: 104, raw: '104' } } }
ExpressionStatement
171
179
Node {
  type: 'AssignmentExpression',
  start: 171,
  end: 178,
  operator: '=',
  left: Node { type: 'Identifier', start: 171, end: 172, name: 'f' },
  right: Node { type: 'Literal', start: 175, end: 178, value: 104, raw: '104' } }
AssignmentExpression
171
178
=
Node { type: 'Identifier', start: 171, end: 172, name: 'f' }
Identifier
171
172
f
Node { type: 'Literal', start: 175, end: 178, value: 104, raw: '104' }
Literal
175
178
104
104
Node {
  type: 'ExpressionStatement',
  start: 188,
  end: 193,
  expression: 
   Node {
     type: 'UpdateExpression',
     start: 188,
     end: 192,
     operator: '++',
     prefix: false,
     argument: Node { type: 'Identifier', start: 188, end: 190, name: 'pf' } } }
ExpressionStatement
188
193
Node {
  type: 'UpdateExpression',
  start: 188,
  end: 192,
  operator: '++',
  prefix: false,
  argument: Node { type: 'Identifier', start: 188, end: 190, name: 'pf' } }
UpdateExpression
188
192
++
false
Node { type: 'Identifier', start: 188, end: 190, name: 'pf' }
Identifier
188
190
pf
Node {
  type: 'ExpressionStatement',
  start: 202,
  end: 210,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 202,
     end: 209,
     operator: '=',
     left: Node { type: 'Identifier', start: 202, end: 203, name: 'x' },
     right: Node { type: 'Literal', start: 206, end: 209, value: 106, raw: '106' } } }
ExpressionStatement
202
210
Node {
  type: 'AssignmentExpression',
  start: 202,
  end: 209,
  operator: '=',
  left: Node { type: 'Identifier', start: 202, end: 203, name: 'x' },
  right: Node { type: 'Literal', start: 206, end: 209, value: 106, raw: '106' } }
AssignmentExpression
202
209
=
Node { type: 'Identifier', start: 202, end: 203, name: 'x' }
Identifier
202
203
x
Node { type: 'Literal', start: 206, end: 209, value: 106, raw: '106' }
Literal
206
209
106
106
Node {
  type: 'CatchClause',
  start: 217,
  end: 301,
  param: Node { type: 'Identifier', start: 224, end: 225, name: 'e' },
  body: Node { type: 'BlockStatement', start: 227, end: 301, body: [ [Node] ] } }
CatchClause
217
301
Node { type: 'Identifier', start: 224, end: 225, name: 'e' }
Identifier
224
225
e
Node {
  type: 'BlockStatement',
  start: 227,
  end: 301,
  body: 
   [ Node {
       type: 'ReturnStatement',
       start: 237,
       end: 295,
       argument: [Node] } ] }
BlockStatement
227
301
[ Node {
    type: 'ReturnStatement',
    start: 237,
    end: 295,
    argument: 
     Node {
       type: 'ObjectExpression',
       start: 244,
       end: 294,
       properties: [Array] } } ]
Node {
  type: 'ReturnStatement',
  start: 237,
  end: 295,
  argument: 
   Node {
     type: 'ObjectExpression',
     start: 244,
     end: 294,
     properties: [ [Node], [Node] ] } }
ReturnStatement
237
295
Node {
  type: 'ObjectExpression',
  start: 244,
  end: 294,
  properties: 
   [ Node {
       type: 'Property',
       start: 245,
       end: 265,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 267,
       end: 293,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
244
294
[ Node {
    type: 'Property',
    start: 245,
    end: 265,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 245, end: 252, name: 'outcome' },
    value: 
     Node {
       type: 'Literal',
       start: 254,
       end: 265,
       value: 'exception',
       raw: '"exception"' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 267,
    end: 293,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 267, end: 273, name: 'values' },
    value: 
     Node {
       type: 'ArrayExpression',
       start: 275,
       end: 293,
       elements: [Array] },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 245,
  end: 265,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 245, end: 252, name: 'outcome' },
  value: 
   Node {
     type: 'Literal',
     start: 254,
     end: 265,
     value: 'exception',
     raw: '"exception"' },
  kind: 'init' }
Property
245
265
false
false
false
Node { type: 'Identifier', start: 245, end: 252, name: 'outcome' }
Identifier
245
252
outcome
Node {
  type: 'Literal',
  start: 254,
  end: 265,
  value: 'exception',
  raw: '"exception"' }
Literal
254
265
exception
"exception"
init
Node {
  type: 'Property',
  start: 267,
  end: 293,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 267, end: 273, name: 'values' },
  value: 
   Node {
     type: 'ArrayExpression',
     start: 275,
     end: 293,
     elements: [ [Node], [Node], [Node], [Node] ] },
  kind: 'init' }
Property
267
293
false
false
false
Node { type: 'Identifier', start: 267, end: 273, name: 'values' }
Identifier
267
273
values
Node {
  type: 'ArrayExpression',
  start: 275,
  end: 293,
  elements: 
   [ Node { type: 'Identifier', start: 276, end: 277, name: 'f' },
     Node { type: 'Identifier', start: 279, end: 281, name: 'pf' },
     Node { type: 'Identifier', start: 283, end: 284, name: 'x' },
     Node { type: 'Identifier', start: 286, end: 292, name: 'result' } ] }
ArrayExpression
275
293
[ Node { type: 'Identifier', start: 276, end: 277, name: 'f' },
  Node { type: 'Identifier', start: 279, end: 281, name: 'pf' },
  Node { type: 'Identifier', start: 283, end: 284, name: 'x' },
  Node { type: 'Identifier', start: 286, end: 292, name: 'result' } ]
Node { type: 'Identifier', start: 276, end: 277, name: 'f' }
Identifier
276
277
f
Node { type: 'Identifier', start: 279, end: 281, name: 'pf' }
Identifier
279
281
pf
Node { type: 'Identifier', start: 283, end: 284, name: 'x' }
Identifier
283
284
x
Node { type: 'Identifier', start: 286, end: 292, name: 'result' }
Identifier
286
292
result
init
null
[+] Exception: ftl-call-varargs-bad-callee-exception-interesting-live-state.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1851,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 363,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 365,
       end: 379,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 381,
       end: 428,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 430,
       end: 444,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 464,
       end: 1167,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1196,
       end: 1237,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 1238,
       end: 1282,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 1283,
       end: 1376,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1377,
       end: 1481,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1482,
       end: 1573,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1574,
       end: 1665,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1666,
       end: 1757,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1758,
       end: 1849,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
1851
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 363,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 25, end: 363, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 365,
    end: 379,
    expression: 
     Node {
       type: 'CallExpression',
       start: 365,
       end: 378,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 381,
    end: 428,
    id: Node { type: 'Identifier', start: 390, end: 393, name: 'bar' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 403, end: 428, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 430,
    end: 444,
    expression: 
     Node {
       type: 'CallExpression',
       start: 430,
       end: 443,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 464,
    end: 1167,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 469,
       end: 478,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 480,
       end: 490,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 492,
       end: 495,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 497, end: 1167, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1196,
    end: 1237,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 1196,
       end: 1237,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'VariableDeclaration',
    start: 1238,
    end: 1282,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 1283,
    end: 1376,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1287,
       end: 1317,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1323,
       end: 1376,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1377,
    end: 1481,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1381,
       end: 1407,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1413,
       end: 1481,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1482,
    end: 1573,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1486,
       end: 1510,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1516,
       end: 1573,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1574,
    end: 1665,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1578,
       end: 1602,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1608,
       end: 1665,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1666,
    end: 1757,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1670,
       end: 1694,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1700,
       end: 1757,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1758,
    end: 1849,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1762,
       end: 1786,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1792,
       end: 1849,
       argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 363,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'f' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'p' },
     Node { type: 'Identifier', start: 19, end: 23, name: 'args' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 25,
     end: 363,
     body: [ [Node], [Node], [Node], [Node], [Node] ] } }
FunctionDeclaration
0
363
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'f' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'p' },
  Node { type: 'Identifier', start: 19, end: 23, name: 'args' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'f' }
Identifier
13
14
f
Node { type: 'Identifier', start: 16, end: 17, name: 'p' }
Identifier
16
17
p
Node { type: 'Identifier', start: 19, end: 23, name: 'args' }
Identifier
19
23
args
Node {
  type: 'BlockStatement',
  start: 25,
  end: 363,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 31,
       end: 43,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 48,
       end: 65,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 70,
       end: 83,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'TryStatement',
       start: 88,
       end: 301,
       block: [Node],
       handler: [Node],
       finalizer: null },
     Node {
       type: 'ReturnStatement',
       start: 306,
       end: 361,
       argument: [Node] } ] }
BlockStatement
25
363
[ Node {
    type: 'VariableDeclaration',
    start: 31,
    end: 43,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 48,
    end: 65,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 70,
    end: 83,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'TryStatement',
    start: 88,
    end: 301,
    block: Node { type: 'BlockStatement', start: 92, end: 216, body: [Array] },
    handler: 
     Node {
       type: 'CatchClause',
       start: 217,
       end: 301,
       param: [Node],
       body: [Node] },
    finalizer: null },
  Node {
    type: 'ReturnStatement',
    start: 306,
    end: 361,
    argument: 
     Node {
       type: 'ObjectExpression',
       start: 313,
       end: 360,
       properties: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 31,
  end: 43,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 35,
       end: 42,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
31
43
[ Node {
    type: 'VariableDeclarator',
    start: 35,
    end: 42,
    id: Node { type: 'Identifier', start: 35, end: 36, name: 'x' },
    init: Node { type: 'Literal', start: 39, end: 42, value: 100, raw: '100' } } ]
Node {
  type: 'VariableDeclarator',
  start: 35,
  end: 42,
  id: Node { type: 'Identifier', start: 35, end: 36, name: 'x' },
  init: Node { type: 'Literal', start: 39, end: 42, value: 100, raw: '100' } }
VariableDeclarator
35
42
Node { type: 'Identifier', start: 35, end: 36, name: 'x' }
Identifier
35
36
x
Node { type: 'Literal', start: 39, end: 42, value: 100, raw: '100' }
Literal
39
42
100
100
var
Node {
  type: 'VariableDeclaration',
  start: 48,
  end: 65,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 52,
       end: 64,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
48
65
[ Node {
    type: 'VariableDeclarator',
    start: 52,
    end: 64,
    id: Node { type: 'Identifier', start: 52, end: 58, name: 'result' },
    init: Node { type: 'Literal', start: 61, end: 64, value: 101, raw: '101' } } ]
Node {
  type: 'VariableDeclarator',
  start: 52,
  end: 64,
  id: Node { type: 'Identifier', start: 52, end: 58, name: 'result' },
  init: Node { type: 'Literal', start: 61, end: 64, value: 101, raw: '101' } }
VariableDeclarator
52
64
Node { type: 'Identifier', start: 52, end: 58, name: 'result' }
Identifier
52
58
result
Node { type: 'Literal', start: 61, end: 64, value: 101, raw: '101' }
Literal
61
64
101
101
var
Node {
  type: 'VariableDeclaration',
  start: 70,
  end: 83,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 74,
       end: 82,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
70
83
[ Node {
    type: 'VariableDeclarator',
    start: 74,
    end: 82,
    id: Node { type: 'Identifier', start: 74, end: 76, name: 'pf' },
    init: 
     Node {
       type: 'MemberExpression',
       start: 79,
       end: 82,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'VariableDeclarator',
  start: 74,
  end: 82,
  id: Node { type: 'Identifier', start: 74, end: 76, name: 'pf' },
  init: 
   Node {
     type: 'MemberExpression',
     start: 79,
     end: 82,
     object: Node { type: 'Identifier', start: 79, end: 80, name: 'p' },
     property: Node { type: 'Identifier', start: 81, end: 82, name: 'g' },
     computed: false } }
VariableDeclarator
74
82
Node { type: 'Identifier', start: 74, end: 76, name: 'pf' }
Identifier
74
76
pf
Node {
  type: 'MemberExpression',
  start: 79,
  end: 82,
  object: Node { type: 'Identifier', start: 79, end: 80, name: 'p' },
  property: Node { type: 'Identifier', start: 81, end: 82, name: 'g' },
  computed: false }
MemberExpression
79
82
Node { type: 'Identifier', start: 79, end: 80, name: 'p' }
Identifier
79
80
p
Node { type: 'Identifier', start: 81, end: 82, name: 'g' }
Identifier
81
82
g
false
var
Node {
  type: 'TryStatement',
  start: 88,
  end: 301,
  block: 
   Node {
     type: 'BlockStatement',
     start: 92,
     end: 216,
     body: [ [Node], [Node], [Node], [Node], [Node], [Node] ] },
  handler: 
   Node {
     type: 'CatchClause',
     start: 217,
     end: 301,
     param: Node { type: 'Identifier', start: 224, end: 225, name: 'e' },
     body: Node { type: 'BlockStatement', start: 227, end: 301, body: [Array] } },
  finalizer: null }
TryStatement
88
301
Node {
  type: 'BlockStatement',
  start: 92,
  end: 216,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 102,
       end: 110,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 119,
       end: 124,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 133,
       end: 162,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 171,
       end: 179,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 188,
       end: 193,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 202,
       end: 210,
       expression: [Node] } ] }
BlockStatement
92
216
[ Node {
    type: 'ExpressionStatement',
    start: 102,
    end: 110,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 102,
       end: 109,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 119,
    end: 124,
    expression: 
     Node {
       type: 'UpdateExpression',
       start: 119,
       end: 123,
       operator: '++',
       prefix: false,
       argument: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 133,
    end: 162,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 133,
       end: 161,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 171,
    end: 179,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 171,
       end: 178,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 188,
    end: 193,
    expression: 
     Node {
       type: 'UpdateExpression',
       start: 188,
       end: 192,
       operator: '++',
       prefix: false,
       argument: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 202,
    end: 210,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 202,
       end: 209,
       operator: '=',
       left: [Node],
       right: [Node] } } ]
Node {
  type: 'ExpressionStatement',
  start: 102,
  end: 110,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 102,
     end: 109,
     operator: '=',
     left: Node { type: 'Identifier', start: 102, end: 103, name: 'x' },
     right: Node { type: 'Literal', start: 106, end: 109, value: 102, raw: '102' } } }
ExpressionStatement
102
110
Node {
  type: 'AssignmentExpression',
  start: 102,
  end: 109,
  operator: '=',
  left: Node { type: 'Identifier', start: 102, end: 103, name: 'x' },
  right: Node { type: 'Literal', start: 106, end: 109, value: 102, raw: '102' } }
AssignmentExpression
102
109
=
Node { type: 'Identifier', start: 102, end: 103, name: 'x' }
Identifier
102
103
x
Node { type: 'Literal', start: 106, end: 109, value: 102, raw: '102' }
Literal
106
109
102
102
Node {
  type: 'ExpressionStatement',
  start: 119,
  end: 124,
  expression: 
   Node {
     type: 'UpdateExpression',
     start: 119,
     end: 123,
     operator: '++',
     prefix: false,
     argument: Node { type: 'Identifier', start: 119, end: 121, name: 'pf' } } }
ExpressionStatement
119
124
Node {
  type: 'UpdateExpression',
  start: 119,
  end: 123,
  operator: '++',
  prefix: false,
  argument: Node { type: 'Identifier', start: 119, end: 121, name: 'pf' } }
UpdateExpression
119
123
++
false
Node { type: 'Identifier', start: 119, end: 121, name: 'pf' }
Identifier
119
121
pf
Node {
  type: 'ExpressionStatement',
  start: 133,
  end: 162,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 133,
     end: 161,
     operator: '=',
     left: Node { type: 'Identifier', start: 133, end: 139, name: 'result' },
     right: 
      Node {
        type: 'CallExpression',
        start: 142,
        end: 161,
        callee: [Node],
        arguments: [Array] } } }
ExpressionStatement
133
162
Node {
  type: 'AssignmentExpression',
  start: 133,
  end: 161,
  operator: '=',
  left: Node { type: 'Identifier', start: 133, end: 139, name: 'result' },
  right: 
   Node {
     type: 'CallExpression',
     start: 142,
     end: 161,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 142,
        end: 149,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [ [Node], [Node] ] } }
AssignmentExpression
133
161
=
Node { type: 'Identifier', start: 133, end: 139, name: 'result' }
Identifier
133
139
result
Node {
  type: 'CallExpression',
  start: 142,
  end: 161,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 142,
     end: 149,
     object: Node { type: 'Identifier', start: 142, end: 143, name: 'f' },
     property: Node { type: 'Identifier', start: 144, end: 149, name: 'apply' },
     computed: false },
  arguments: 
   [ Node { type: 'ThisExpression', start: 150, end: 154 },
     Node { type: 'Identifier', start: 156, end: 160, name: 'args' } ] }
CallExpression
142
161
Node {
  type: 'MemberExpression',
  start: 142,
  end: 149,
  object: Node { type: 'Identifier', start: 142, end: 143, name: 'f' },
  property: Node { type: 'Identifier', start: 144, end: 149, name: 'apply' },
  computed: false }
MemberExpression
142
149
Node { type: 'Identifier', start: 142, end: 143, name: 'f' }
Identifier
142
143
f
Node { type: 'Identifier', start: 144, end: 149, name: 'apply' }
Identifier
144
149
apply
false
[ Node { type: 'ThisExpression', start: 150, end: 154 },
  Node { type: 'Identifier', start: 156, end: 160, name: 'args' } ]
Node { type: 'ThisExpression', start: 150, end: 154 }
ThisExpression
150
154
Node { type: 'Identifier', start: 156, end: 160, name: 'args' }
Identifier
156
160
args
Node {
  type: 'ExpressionStatement',
  start: 171,
  end: 179,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 171,
     end: 178,
     operator: '=',
     left: Node { type: 'Identifier', start: 171, end: 172, name: 'f' },
     right: Node { type: 'Literal', start: 175, end: 178, value: 104, raw: '104' } } }
ExpressionStatement
171
179
Node {
  type: 'AssignmentExpression',
  start: 171,
  end: 178,
  operator: '=',
  left: Node { type: 'Identifier', start: 171, end: 172, name: 'f' },
  right: Node { type: 'Literal', start: 175, end: 178, value: 104, raw: '104' } }
AssignmentExpression
171
178
=
Node { type: 'Identifier', start: 171, end: 172, name: 'f' }
Identifier
171
172
f
Node { type: 'Literal', start: 175, end: 178, value: 104, raw: '104' }
Literal
175
178
104
104
Node {
  type: 'ExpressionStatement',
  start: 188,
  end: 193,
  expression: 
   Node {
     type: 'UpdateExpression',
     start: 188,
     end: 192,
     operator: '++',
     prefix: false,
     argument: Node { type: 'Identifier', start: 188, end: 190, name: 'pf' } } }
ExpressionStatement
188
193
Node {
  type: 'UpdateExpression',
  start: 188,
  end: 192,
  operator: '++',
  prefix: false,
  argument: Node { type: 'Identifier', start: 188, end: 190, name: 'pf' } }
UpdateExpression
188
192
++
false
Node { type: 'Identifier', start: 188, end: 190, name: 'pf' }
Identifier
188
190
pf
Node {
  type: 'ExpressionStatement',
  start: 202,
  end: 210,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 202,
     end: 209,
     operator: '=',
     left: Node { type: 'Identifier', start: 202, end: 203, name: 'x' },
     right: Node { type: 'Literal', start: 206, end: 209, value: 106, raw: '106' } } }
ExpressionStatement
202
210
Node {
  type: 'AssignmentExpression',
  start: 202,
  end: 209,
  operator: '=',
  left: Node { type: 'Identifier', start: 202, end: 203, name: 'x' },
  right: Node { type: 'Literal', start: 206, end: 209, value: 106, raw: '106' } }
AssignmentExpression
202
209
=
Node { type: 'Identifier', start: 202, end: 203, name: 'x' }
Identifier
202
203
x
Node { type: 'Literal', start: 206, end: 209, value: 106, raw: '106' }
Literal
206
209
106
106
Node {
  type: 'CatchClause',
  start: 217,
  end: 301,
  param: Node { type: 'Identifier', start: 224, end: 225, name: 'e' },
  body: Node { type: 'BlockStatement', start: 227, end: 301, body: [ [Node] ] } }
CatchClause
217
301
Node { type: 'Identifier', start: 224, end: 225, name: 'e' }
Identifier
224
225
e
Node {
  type: 'BlockStatement',
  start: 227,
  end: 301,
  body: 
   [ Node {
       type: 'ReturnStatement',
       start: 237,
       end: 295,
       argument: [Node] } ] }
BlockStatement
227
301
[ Node {
    type: 'ReturnStatement',
    start: 237,
    end: 295,
    argument: 
     Node {
       type: 'ObjectExpression',
       start: 244,
       end: 294,
       properties: [Array] } } ]
Node {
  type: 'ReturnStatement',
  start: 237,
  end: 295,
  argument: 
   Node {
     type: 'ObjectExpression',
     start: 244,
     end: 294,
     properties: [ [Node], [Node] ] } }
ReturnStatement
237
295
Node {
  type: 'ObjectExpression',
  start: 244,
  end: 294,
  properties: 
   [ Node {
       type: 'Property',
       start: 245,
       end: 265,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 267,
       end: 293,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
244
294
[ Node {
    type: 'Property',
    start: 245,
    end: 265,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 245, end: 252, name: 'outcome' },
    value: 
     Node {
       type: 'Literal',
       start: 254,
       end: 265,
       value: 'exception',
       raw: '"exception"' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 267,
    end: 293,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 267, end: 273, name: 'values' },
    value: 
     Node {
       type: 'ArrayExpression',
       start: 275,
       end: 293,
       elements: [Array] },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 245,
  end: 265,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 245, end: 252, name: 'outcome' },
  value: 
   Node {
     type: 'Literal',
     start: 254,
     end: 265,
     value: 'exception',
     raw: '"exception"' },
  kind: 'init' }
Property
245
265
false
false
false
Node { type: 'Identifier', start: 245, end: 252, name: 'outcome' }
Identifier
245
252
outcome
Node {
  type: 'Literal',
  start: 254,
  end: 265,
  value: 'exception',
  raw: '"exception"' }
Literal
254
265
exception
"exception"
init
Node {
  type: 'Property',
  start: 267,
  end: 293,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 267, end: 273, name: 'values' },
  value: 
   Node {
     type: 'ArrayExpression',
     start: 275,
     end: 293,
     elements: [ [Node], [Node], [Node], [Node] ] },
  kind: 'init' }
Property
267
293
false
false
false
Node { type: 'Identifier', start: 267, end: 273, name: 'values' }
Identifier
267
273
values
Node {
  type: 'ArrayExpression',
  start: 275,
  end: 293,
  elements: 
   [ Node { type: 'Identifier', start: 276, end: 277, name: 'f' },
     Node { type: 'Identifier', start: 279, end: 281, name: 'pf' },
     Node { type: 'Identifier', start: 283, end: 284, name: 'x' },
     Node { type: 'Identifier', start: 286, end: 292, name: 'result' } ] }
ArrayExpression
275
293
[ Node { type: 'Identifier', start: 276, end: 277, name: 'f' },
  Node { type: 'Identifier', start: 279, end: 281, name: 'pf' },
  Node { type: 'Identifier', start: 283, end: 284, name: 'x' },
  Node { type: 'Identifier', start: 286, end: 292, name: 'result' } ]
Node { type: 'Identifier', start: 276, end: 277, name: 'f' }
Identifier
276
277
f
Node { type: 'Identifier', start: 279, end: 281, name: 'pf' }
Identifier
279
281
pf
Node { type: 'Identifier', start: 283, end: 284, name: 'x' }
Identifier
283
284
x
Node { type: 'Identifier', start: 286, end: 292, name: 'result' }
Identifier
286
292
result
init
null
[+] Exception: ftl-call-varargs-exception-interesting-live-state.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1394,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 225,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 227,
       end: 241,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 243,
       end: 290,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 292,
       end: 306,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 326,
       end: 1026,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 1055,
       end: 1066,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'TryStatement',
       start: 1067,
       end: 1299,
       block: [Node],
       handler: [Node],
       finalizer: null },
     Node {
       type: 'IfStatement',
       start: 1300,
       end: 1393,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
1394
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 225,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 25, end: 225, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 227,
    end: 241,
    expression: 
     Node {
       type: 'CallExpression',
       start: 227,
       end: 240,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 243,
    end: 290,
    id: Node { type: 'Identifier', start: 252, end: 255, name: 'bar' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 265, end: 290, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 292,
    end: 306,
    expression: 
     Node {
       type: 'CallExpression',
       start: 292,
       end: 305,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 326,
    end: 1026,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 331,
       end: 340,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 342,
       end: 352,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 354,
       end: 357,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 359, end: 1026, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 1055,
    end: 1066,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'TryStatement',
    start: 1067,
    end: 1299,
    block: Node { type: 'BlockStatement', start: 1071, end: 1173, body: [Array] },
    handler: 
     Node {
       type: 'CatchClause',
       start: 1174,
       end: 1299,
       param: [Node],
       body: [Node] },
    finalizer: null },
  Node {
    type: 'IfStatement',
    start: 1300,
    end: 1393,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1304,
       end: 1334,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1340,
       end: 1393,
       argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 225,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'f' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'p' },
     Node { type: 'Identifier', start: 19, end: 23, name: 'args' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 25,
     end: 225,
     body: 
      [ [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node] ] } }
FunctionDeclaration
0
225
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'f' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'p' },
  Node { type: 'Identifier', start: 19, end: 23, name: 'args' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'f' }
Identifier
13
14
f
Node { type: 'Identifier', start: 16, end: 17, name: 'p' }
Identifier
16
17
p
Node { type: 'Identifier', start: 19, end: 23, name: 'args' }
Identifier
19
23
args
Node {
  type: 'BlockStatement',
  start: 25,
  end: 225,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 31,
       end: 43,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 48,
       end: 65,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 70,
       end: 78,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 83,
       end: 91,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 96,
       end: 125,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 130,
       end: 138,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 143,
       end: 151,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 156,
       end: 164,
       expression: [Node] },
     Node {
       type: 'ReturnStatement',
       start: 169,
       end: 223,
       argument: [Node] } ] }
BlockStatement
25
225
[ Node {
    type: 'VariableDeclaration',
    start: 31,
    end: 43,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 48,
    end: 65,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 70,
    end: 78,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 70,
       end: 77,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 83,
    end: 91,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 83,
       end: 90,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 96,
    end: 125,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 96,
       end: 124,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 130,
    end: 138,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 130,
       end: 137,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 143,
    end: 151,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 143,
       end: 150,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 156,
    end: 164,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 156,
       end: 163,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ReturnStatement',
    start: 169,
    end: 223,
    argument: 
     Node {
       type: 'ObjectExpression',
       start: 176,
       end: 222,
       properties: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 31,
  end: 43,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 35,
       end: 42,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
31
43
[ Node {
    type: 'VariableDeclarator',
    start: 35,
    end: 42,
    id: Node { type: 'Identifier', start: 35, end: 36, name: 'x' },
    init: Node { type: 'Literal', start: 39, end: 42, value: 100, raw: '100' } } ]
Node {
  type: 'VariableDeclarator',
  start: 35,
  end: 42,
  id: Node { type: 'Identifier', start: 35, end: 36, name: 'x' },
  init: Node { type: 'Literal', start: 39, end: 42, value: 100, raw: '100' } }
VariableDeclarator
35
42
Node { type: 'Identifier', start: 35, end: 36, name: 'x' }
Identifier
35
36
x
Node { type: 'Literal', start: 39, end: 42, value: 100, raw: '100' }
Literal
39
42
100
100
var
Node {
  type: 'VariableDeclaration',
  start: 48,
  end: 65,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 52,
       end: 64,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
48
65
[ Node {
    type: 'VariableDeclarator',
    start: 52,
    end: 64,
    id: Node { type: 'Identifier', start: 52, end: 58, name: 'result' },
    init: Node { type: 'Literal', start: 61, end: 64, value: 101, raw: '101' } } ]
Node {
  type: 'VariableDeclarator',
  start: 52,
  end: 64,
  id: Node { type: 'Identifier', start: 52, end: 58, name: 'result' },
  init: Node { type: 'Literal', start: 61, end: 64, value: 101, raw: '101' } }
VariableDeclarator
52
64
Node { type: 'Identifier', start: 52, end: 58, name: 'result' }
Identifier
52
58
result
Node { type: 'Literal', start: 61, end: 64, value: 101, raw: '101' }
Literal
61
64
101
101
var
Node {
  type: 'ExpressionStatement',
  start: 70,
  end: 78,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 70,
     end: 77,
     operator: '=',
     left: Node { type: 'Identifier', start: 70, end: 71, name: 'x' },
     right: Node { type: 'Literal', start: 74, end: 77, value: 102, raw: '102' } } }
ExpressionStatement
70
78
Node {
  type: 'AssignmentExpression',
  start: 70,
  end: 77,
  operator: '=',
  left: Node { type: 'Identifier', start: 70, end: 71, name: 'x' },
  right: Node { type: 'Literal', start: 74, end: 77, value: 102, raw: '102' } }
AssignmentExpression
70
77
=
Node { type: 'Identifier', start: 70, end: 71, name: 'x' }
Identifier
70
71
x
Node { type: 'Literal', start: 74, end: 77, value: 102, raw: '102' }
Literal
74
77
102
102
Node {
  type: 'ExpressionStatement',
  start: 83,
  end: 91,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 83,
     end: 90,
     operator: '=',
     left: Node { type: 'Identifier', start: 83, end: 84, name: 'p' },
     right: Node { type: 'Literal', start: 87, end: 90, value: 103, raw: '103' } } }
ExpressionStatement
83
91
Node {
  type: 'AssignmentExpression',
  start: 83,
  end: 90,
  operator: '=',
  left: Node { type: 'Identifier', start: 83, end: 84, name: 'p' },
  right: Node { type: 'Literal', start: 87, end: 90, value: 103, raw: '103' } }
AssignmentExpression
83
90
=
Node { type: 'Identifier', start: 83, end: 84, name: 'p' }
Identifier
83
84
p
Node { type: 'Literal', start: 87, end: 90, value: 103, raw: '103' }
Literal
87
90
103
103
Node {
  type: 'ExpressionStatement',
  start: 96,
  end: 125,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 96,
     end: 124,
     operator: '=',
     left: Node { type: 'Identifier', start: 96, end: 102, name: 'result' },
     right: 
      Node {
        type: 'CallExpression',
        start: 105,
        end: 124,
        callee: [Node],
        arguments: [Array] } } }
ExpressionStatement
96
125
Node {
  type: 'AssignmentExpression',
  start: 96,
  end: 124,
  operator: '=',
  left: Node { type: 'Identifier', start: 96, end: 102, name: 'result' },
  right: 
   Node {
     type: 'CallExpression',
     start: 105,
     end: 124,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 105,
        end: 112,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [ [Node], [Node] ] } }
AssignmentExpression
96
124
=
Node { type: 'Identifier', start: 96, end: 102, name: 'result' }
Identifier
96
102
result
Node {
  type: 'CallExpression',
  start: 105,
  end: 124,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 105,
     end: 112,
     object: Node { type: 'Identifier', start: 105, end: 106, name: 'f' },
     property: Node { type: 'Identifier', start: 107, end: 112, name: 'apply' },
     computed: false },
  arguments: 
   [ Node { type: 'ThisExpression', start: 113, end: 117 },
     Node { type: 'Identifier', start: 119, end: 123, name: 'args' } ] }
CallExpression
105
124
Node {
  type: 'MemberExpression',
  start: 105,
  end: 112,
  object: Node { type: 'Identifier', start: 105, end: 106, name: 'f' },
  property: Node { type: 'Identifier', start: 107, end: 112, name: 'apply' },
  computed: false }
MemberExpression
105
112
Node { type: 'Identifier', start: 105, end: 106, name: 'f' }
Identifier
105
106
f
Node { type: 'Identifier', start: 107, end: 112, name: 'apply' }
Identifier
107
112
apply
false
[ Node { type: 'ThisExpression', start: 113, end: 117 },
  Node { type: 'Identifier', start: 119, end: 123, name: 'args' } ]
Node { type: 'ThisExpression', start: 113, end: 117 }
ThisExpression
113
117
Node { type: 'Identifier', start: 119, end: 123, name: 'args' }
Identifier
119
123
args
Node {
  type: 'ExpressionStatement',
  start: 130,
  end: 138,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 130,
     end: 137,
     operator: '=',
     left: Node { type: 'Identifier', start: 130, end: 131, name: 'f' },
     right: Node { type: 'Literal', start: 134, end: 137, value: 104, raw: '104' } } }
ExpressionStatement
130
138
Node {
  type: 'AssignmentExpression',
  start: 130,
  end: 137,
  operator: '=',
  left: Node { type: 'Identifier', start: 130, end: 131, name: 'f' },
  right: Node { type: 'Literal', start: 134, end: 137, value: 104, raw: '104' } }
AssignmentExpression
130
137
=
Node { type: 'Identifier', start: 130, end: 131, name: 'f' }
Identifier
130
131
f
Node { type: 'Literal', start: 134, end: 137, value: 104, raw: '104' }
Literal
134
137
104
104
Node {
  type: 'ExpressionStatement',
  start: 143,
  end: 151,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 143,
     end: 150,
     operator: '=',
     left: Node { type: 'Identifier', start: 143, end: 144, name: 'p' },
     right: Node { type: 'Literal', start: 147, end: 150, value: 105, raw: '105' } } }
ExpressionStatement
143
151
Node {
  type: 'AssignmentExpression',
  start: 143,
  end: 150,
  operator: '=',
  left: Node { type: 'Identifier', start: 143, end: 144, name: 'p' },
  right: Node { type: 'Literal', start: 147, end: 150, value: 105, raw: '105' } }
AssignmentExpression
143
150
=
Node { type: 'Identifier', start: 143, end: 144, name: 'p' }
Identifier
143
144
p
Node { type: 'Literal', start: 147, end: 150, value: 105, raw: '105' }
Literal
147
150
105
105
Node {
  type: 'ExpressionStatement',
  start: 156,
  end: 164,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 156,
     end: 163,
     operator: '=',
     left: Node { type: 'Identifier', start: 156, end: 157, name: 'x' },
     right: Node { type: 'Literal', start: 160, end: 163, value: 106, raw: '106' } } }
ExpressionStatement
156
164
Node {
  type: 'AssignmentExpression',
  start: 156,
  end: 163,
  operator: '=',
  left: Node { type: 'Identifier', start: 156, end: 157, name: 'x' },
  right: Node { type: 'Literal', start: 160, end: 163, value: 106, raw: '106' } }
AssignmentExpression
156
163
=
Node { type: 'Identifier', start: 156, end: 157, name: 'x' }
Identifier
156
157
x
Node { type: 'Literal', start: 160, end: 163, value: 106, raw: '106' }
Literal
160
163
106
106
Node {
  type: 'ReturnStatement',
  start: 169,
  end: 223,
  argument: 
   Node {
     type: 'ObjectExpression',
     start: 176,
     end: 222,
     properties: [ [Node], [Node] ] } }
ReturnStatement
169
223
Node {
  type: 'ObjectExpression',
  start: 176,
  end: 222,
  properties: 
   [ Node {
       type: 'Property',
       start: 177,
       end: 194,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 196,
       end: 221,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
176
222
[ Node {
    type: 'Property',
    start: 177,
    end: 194,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 177, end: 184, name: 'outcome' },
    value: 
     Node {
       type: 'Literal',
       start: 186,
       end: 194,
       value: 'return',
       raw: '"return"' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 196,
    end: 221,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 196, end: 202, name: 'values' },
    value: 
     Node {
       type: 'ArrayExpression',
       start: 204,
       end: 221,
       elements: [Array] },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 177,
  end: 194,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 177, end: 184, name: 'outcome' },
  value: 
   Node {
     type: 'Literal',
     start: 186,
     end: 194,
     value: 'return',
     raw: '"return"' },
  kind: 'init' }
Property
177
194
false
false
false
Node { type: 'Identifier', start: 177, end: 184, name: 'outcome' }
Identifier
177
184
outcome
Node {
  type: 'Literal',
  start: 186,
  end: 194,
  value: 'return',
  raw: '"return"' }
Literal
186
194
return
"return"
init
Node {
  type: 'Property',
  start: 196,
  end: 221,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 196, end: 202, name: 'values' },
  value: 
   Node {
     type: 'ArrayExpression',
     start: 204,
     end: 221,
     elements: [ [Node], [Node], [Node], [Node] ] },
  kind: 'init' }
Property
196
221
false
false
false
Node { type: 'Identifier', start: 196, end: 202, name: 'values' }
Identifier
196
202
values
Node {
  type: 'ArrayExpression',
  start: 204,
  end: 221,
  elements: 
   [ Node { type: 'Identifier', start: 205, end: 206, name: 'f' },
     Node { type: 'Identifier', start: 208, end: 209, name: 'p' },
     Node { type: 'Identifier', start: 211, end: 212, name: 'x' },
     Node { type: 'Identifier', start: 214, end: 220, name: 'result' } ] }
ArrayExpression
204
221
[ Node { type: 'Identifier', start: 205, end: 206, name: 'f' },
  Node { type: 'Identifier', start: 208, end: 209, name: 'p' },
  Node { type: 'Identifier', start: 211, end: 212, name: 'x' },
  Node { type: 'Identifier', start: 214, end: 220, name: 'result' } ]
Node { type: 'Identifier', start: 205, end: 206, name: 'f' }
Identifier
205
206
f
Node { type: 'Identifier', start: 208, end: 209, name: 'p' }
Identifier
208
209
p
Node { type: 'Identifier', start: 211, end: 212, name: 'x' }
Identifier
211
212
x
Node { type: 'Identifier', start: 214, end: 220, name: 'result' }
Identifier
214
220
result
init
Node {
  type: 'ExpressionStatement',
  start: 227,
  end: 241,
  expression: 
   Node {
     type: 'CallExpression',
     start: 227,
     end: 240,
     callee: Node { type: 'Identifier', start: 227, end: 235, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
227
241
Node {
  type: 'CallExpression',
  start: 227,
  end: 240,
  callee: Node { type: 'Identifier', start: 227, end: 235, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 236, end: 239, name: 'foo' } ] }
CallExpression
227
240
Node { type: 'Identifier', start: 227, end: 235, name: 'noInline' }
Identifier
227
235
noInline
[ Node { type: 'Identifier', start: 236, end: 239, name: 'foo' } ]
Node { type: 'Identifier', start: 236, end: 239, name: 'foo' }
Identifier
236
239
foo
Node {
  type: 'FunctionDeclaration',
  start: 243,
  end: 290,
  id: Node { type: 'Identifier', start: 252, end: 255, name: 'bar' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 256, end: 257, name: 'a' },
     Node { type: 'Identifier', start: 259, end: 260, name: 'b' },
     Node { type: 'Identifier', start: 262, end: 263, name: 'c' } ],
  body: Node { type: 'BlockStatement', start: 265, end: 290, body: [ [Node] ] } }
FunctionDeclaration
243
290
Node { type: 'Identifier', start: 252, end: 255, name: 'bar' }
Identifier
252
255
bar
false
false
false
[ Node { type: 'Identifier', start: 256, end: 257, name: 'a' },
  Node { type: 'Identifier', start: 259, end: 260, name: 'b' },
  Node { type: 'Identifier', start: 262, end: 263, name: 'c' } ]
Node { type: 'Identifier', start: 256, end: 257, name: 'a' }
Identifier
256
257
a
Node { type: 'Identifier', start: 259, end: 260, name: 'b' }
Identifier
259
260
b
Node { type: 'Identifier', start: 262, end: 263, name: 'c' }
Identifier
262
263
c
Node {
  type: 'BlockStatement',
  start: 265,
  end: 290,
  body: 
   [ Node {
       type: 'ReturnStatement',
       start: 271,
       end: 288,
       argument: [Node] } ] }
BlockStatement
265
290
[ Node {
    type: 'ReturnStatement',
    start: 271,
    end: 288,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 278,
       end: 287,
       left: [Node],
       operator: '+',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 271,
  end: 288,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 278,
     end: 287,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 278,
        end: 283,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Identifier', start: 286, end: 287, name: 'c' } } }
ReturnStatement
271
288
Node {
  type: 'BinaryExpression',
  start: 278,
  end: 287,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 278,
     end: 283,
     left: Node { type: 'Identifier', start: 278, end: 279, name: 'a' },
     operator: '+',
     right: Node { type: 'Identifier', start: 282, end: 283, name: 'b' } },
  operator: '+',
  right: Node { type: 'Identifier', start: 286, end: 287, name: 'c' } }
BinaryExpression
278
287
Node {
  type: 'BinaryExpression',
  start: 278,
  end: 283,
  left: Node { type: 'Identifier', start: 278, end: 279, name: 'a' },
  operator: '+',
  right: Node { type: 'Identifier', start: 282, end: 283, name: 'b' } }
BinaryExpression
278
283
Node { type: 'Identifier', start: 278, end: 279, name: 'a' }
Identifier
278
279
a
+
Node { type: 'Identifier', start: 282, end: 283, name: 'b' }
Identifier
282
283
b
+
Node { type: 'Identifier', start: 286, end: 287, name: 'c' }
Identifier
286
287
c
Node {
  type: 'ExpressionStatement',
  start: 292,
  end: 306,
  expression: 
   Node {
     type: 'CallExpression',
     start: 292,
     end: 305,
     callee: Node { type: 'Identifier', start: 292, end: 300, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
292
306
Node {
  type: 'CallExpression',
  start: 292,
  end: 305,
  callee: Node { type: 'Identifier', start: 292, end: 300, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 301, end: 304, name: 'bar' } ] }
CallExpression
292
305
Node { type: 'Identifier', start: 292, end: 300, name: 'noInline' }
Identifier
292
300
noInline
[ Node { type: 'Identifier', start: 301, end: 304, name: 'bar' } ]
Node { type: 'Identifier', start: 301, end: 304, name: 'bar' }
Identifier
301
304
bar
Node {
  type: 'ForStatement',
  start: 326,
  end: 1026,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 331,
     end: 340,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 342,
     end: 352,
     left: Node { type: 'Identifier', start: 342, end: 343, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 346,
        end: 352,
        value: 100000,
        raw: '100000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 354,
     end: 357,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 356, end: 357, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 359,
     end: 1026,
     body: [ [Node], [Node], [Node], [Node], [Node], [Node], [Node] ] } }
ForStatement
326
1026
Node {
  type: 'VariableDeclaration',
  start: 331,
  end: 340,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 335,
       end: 340,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
331
340
[ Node {
    type: 'VariableDeclarator',
    start: 335,
    end: 340,
    id: Node { type: 'Identifier', start: 335, end: 336, name: 'i' },
    init: Node { type: 'Literal', start: 339, end: 340, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 335,
  end: 340,
  id: Node { type: 'Identifier', start: 335, end: 336, name: 'i' },
  init: Node { type: 'Literal', start: 339, end: 340, value: 0, raw: '0' } }
VariableDeclarator
335
340
Node { type: 'Identifier', start: 335, end: 336, name: 'i' }
Identifier
335
336
i
Node { type: 'Literal', start: 339, end: 340, value: 0, raw: '0' }
Literal
339
340
0
0
var
Node {
  type: 'BinaryExpression',
  start: 342,
  end: 352,
  left: Node { type: 'Identifier', start: 342, end: 343, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 346,
     end: 352,
     value: 100000,
     raw: '100000' } }
BinaryExpression
342
352
Node { type: 'Identifier', start: 342, end: 343, name: 'i' }
Identifier
342
343
i
<
Node {
  type: 'Literal',
  start: 346,
  end: 352,
  value: 100000,
  raw: '100000' }
Literal
346
352
100000
100000
Node {
  type: 'UpdateExpression',
  start: 354,
  end: 357,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 356, end: 357, name: 'i' } }
UpdateExpression
354
357
++
true
Node { type: 'Identifier', start: 356, end: 357, name: 'i' }
Identifier
356
357
i
Node {
  type: 'BlockStatement',
  start: 359,
  end: 1026,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 365,
       end: 406,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 411,
       end: 506,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 511,
       end: 620,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 625,
       end: 721,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 726,
       end: 822,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 827,
       end: 923,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 928,
       end: 1024,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
359
1026
[ Node {
    type: 'VariableDeclaration',
    start: 365,
    end: 406,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 411,
    end: 506,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 415,
       end: 442,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 452, end: 506, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 511,
    end: 620,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 515,
       end: 541,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 551, end: 620, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 625,
    end: 721,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 629,
       end: 653,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 663, end: 721, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 726,
    end: 822,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 730,
       end: 754,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 764, end: 822, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 827,
    end: 923,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 831,
       end: 855,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 865, end: 923, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 928,
    end: 1024,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 932,
       end: 956,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 966,
       end: 1024,
       argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 365,
  end: 406,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 369,
       end: 405,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
365
406
[ Node {
    type: 'VariableDeclarator',
    start: 369,
    end: 405,
    id: Node { type: 'Identifier', start: 369, end: 375, name: 'result' },
    init: 
     Node {
       type: 'CallExpression',
       start: 378,
       end: 405,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 369,
  end: 405,
  id: Node { type: 'Identifier', start: 369, end: 375, name: 'result' },
  init: 
   Node {
     type: 'CallExpression',
     start: 378,
     end: 405,
     callee: Node { type: 'Identifier', start: 378, end: 381, name: 'foo' },
     arguments: [ [Node], [Node], [Node] ] } }
VariableDeclarator
369
405
Node { type: 'Identifier', start: 369, end: 375, name: 'result' }
Identifier
369
375
result
Node {
  type: 'CallExpression',
  start: 378,
  end: 405,
  callee: Node { type: 'Identifier', start: 378, end: 381, name: 'foo' },
  arguments: 
   [ Node { type: 'Identifier', start: 382, end: 385, name: 'bar' },
     Node { type: 'Literal', start: 387, end: 391, value: null, raw: 'null' },
     Node {
       type: 'ArrayExpression',
       start: 393,
       end: 404,
       elements: [Array] } ] }
CallExpression
378
405
Node { type: 'Identifier', start: 378, end: 381, name: 'foo' }
Identifier
378
381
foo
[ Node { type: 'Identifier', start: 382, end: 385, name: 'bar' },
  Node { type: 'Literal', start: 387, end: 391, value: null, raw: 'null' },
  Node {
    type: 'ArrayExpression',
    start: 393,
    end: 404,
    elements: [ [Node], [Node], [Node] ] } ]
Node { type: 'Identifier', start: 382, end: 385, name: 'bar' }
Identifier
382
385
bar
Node { type: 'Literal', start: 387, end: 391, value: null, raw: 'null' }
Literal
387
391
null
[+] Exception: ftl-call-varargs-exception-no-catch.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1763,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 327,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 329,
       end: 343,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 345,
       end: 379,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 381,
       end: 395,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 415,
       end: 1096,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1125,
       end: 1166,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 1167,
       end: 1194,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 1195,
       end: 1288,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1289,
       end: 1393,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1394,
       end: 1485,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1486,
       end: 1577,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1578,
       end: 1669,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1670,
       end: 1761,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
1763
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 327,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 327, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 329,
    end: 343,
    expression: 
     Node {
       type: 'CallExpression',
       start: 329,
       end: 342,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 345,
    end: 379,
    id: Node { type: 'Identifier', start: 354, end: 357, name: 'bar' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 360, end: 379, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 381,
    end: 395,
    expression: 
     Node {
       type: 'CallExpression',
       start: 381,
       end: 394,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 415,
    end: 1096,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 420,
       end: 429,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 431,
       end: 441,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 443,
       end: 446,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 448, end: 1096, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1125,
    end: 1166,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 1125,
       end: 1166,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'VariableDeclaration',
    start: 1167,
    end: 1194,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 1195,
    end: 1288,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1199,
       end: 1229,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1235,
       end: 1288,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1289,
    end: 1393,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1293,
       end: 1319,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1325,
       end: 1393,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1394,
    end: 1485,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1398,
       end: 1422,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1428,
       end: 1485,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1486,
    end: 1577,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1490,
       end: 1514,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1520,
       end: 1577,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1578,
    end: 1669,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1582,
       end: 1606,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1612,
       end: 1669,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1670,
    end: 1761,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1674,
       end: 1698,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1704,
       end: 1761,
       argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 327,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'f' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'p' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 19,
     end: 327,
     body: [ [Node], [Node], [Node], [Node] ] } }
FunctionDeclaration
0
327
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'f' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'p' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'f' }
Identifier
13
14
f
Node { type: 'Identifier', start: 16, end: 17, name: 'p' }
Identifier
16
17
p
Node {
  type: 'BlockStatement',
  start: 19,
  end: 327,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 25,
       end: 37,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 42,
       end: 59,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'TryStatement',
       start: 64,
       end: 266,
       block: [Node],
       handler: [Node],
       finalizer: null },
     Node {
       type: 'ReturnStatement',
       start: 271,
       end: 325,
       argument: [Node] } ] }
BlockStatement
19
327
[ Node {
    type: 'VariableDeclaration',
    start: 25,
    end: 37,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 42,
    end: 59,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'TryStatement',
    start: 64,
    end: 266,
    block: Node { type: 'BlockStatement', start: 68, end: 182, body: [Array] },
    handler: 
     Node {
       type: 'CatchClause',
       start: 183,
       end: 266,
       param: [Node],
       body: [Node] },
    finalizer: null },
  Node {
    type: 'ReturnStatement',
    start: 271,
    end: 325,
    argument: 
     Node {
       type: 'ObjectExpression',
       start: 278,
       end: 324,
       properties: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 25,
  end: 37,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 29,
       end: 36,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
25
37
[ Node {
    type: 'VariableDeclarator',
    start: 29,
    end: 36,
    id: Node { type: 'Identifier', start: 29, end: 30, name: 'x' },
    init: Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' } } ]
Node {
  type: 'VariableDeclarator',
  start: 29,
  end: 36,
  id: Node { type: 'Identifier', start: 29, end: 30, name: 'x' },
  init: Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' } }
VariableDeclarator
29
36
Node { type: 'Identifier', start: 29, end: 30, name: 'x' }
Identifier
29
30
x
Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' }
Literal
33
36
100
100
var
Node {
  type: 'VariableDeclaration',
  start: 42,
  end: 59,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 46,
       end: 58,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
42
59
[ Node {
    type: 'VariableDeclarator',
    start: 46,
    end: 58,
    id: Node { type: 'Identifier', start: 46, end: 52, name: 'result' },
    init: Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' } } ]
Node {
  type: 'VariableDeclarator',
  start: 46,
  end: 58,
  id: Node { type: 'Identifier', start: 46, end: 52, name: 'result' },
  init: Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' } }
VariableDeclarator
46
58
Node { type: 'Identifier', start: 46, end: 52, name: 'result' }
Identifier
46
52
result
Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' }
Literal
55
58
101
101
var
Node {
  type: 'TryStatement',
  start: 64,
  end: 266,
  block: 
   Node {
     type: 'BlockStatement',
     start: 68,
     end: 182,
     body: [ [Node], [Node], [Node], [Node], [Node], [Node] ] },
  handler: 
   Node {
     type: 'CatchClause',
     start: 183,
     end: 266,
     param: Node { type: 'Identifier', start: 190, end: 191, name: 'e' },
     body: Node { type: 'BlockStatement', start: 193, end: 266, body: [Array] } },
  finalizer: null }
TryStatement
64
266
Node {
  type: 'BlockStatement',
  start: 68,
  end: 182,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 78,
       end: 86,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 95,
       end: 103,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 112,
       end: 125,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 134,
       end: 142,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 151,
       end: 159,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 168,
       end: 176,
       expression: [Node] } ] }
BlockStatement
68
182
[ Node {
    type: 'ExpressionStatement',
    start: 78,
    end: 86,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 78,
       end: 85,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 95,
    end: 103,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 95,
       end: 102,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 112,
    end: 125,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 112,
       end: 124,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 134,
    end: 142,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 134,
       end: 141,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 151,
    end: 159,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 151,
       end: 158,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 168,
    end: 176,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 168,
       end: 175,
       operator: '=',
       left: [Node],
       right: [Node] } } ]
Node {
  type: 'ExpressionStatement',
  start: 78,
  end: 86,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 78,
     end: 85,
     operator: '=',
     left: Node { type: 'Identifier', start: 78, end: 79, name: 'x' },
     right: Node { type: 'Literal', start: 82, end: 85, value: 102, raw: '102' } } }
ExpressionStatement
78
86
Node {
  type: 'AssignmentExpression',
  start: 78,
  end: 85,
  operator: '=',
  left: Node { type: 'Identifier', start: 78, end: 79, name: 'x' },
  right: Node { type: 'Literal', start: 82, end: 85, value: 102, raw: '102' } }
AssignmentExpression
78
85
=
Node { type: 'Identifier', start: 78, end: 79, name: 'x' }
Identifier
78
79
x
Node { type: 'Literal', start: 82, end: 85, value: 102, raw: '102' }
Literal
82
85
102
102
Node {
  type: 'ExpressionStatement',
  start: 95,
  end: 103,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 95,
     end: 102,
     operator: '=',
     left: Node { type: 'Identifier', start: 95, end: 96, name: 'p' },
     right: Node { type: 'Literal', start: 99, end: 102, value: 103, raw: '103' } } }
ExpressionStatement
95
103
Node {
  type: 'AssignmentExpression',
  start: 95,
  end: 102,
  operator: '=',
  left: Node { type: 'Identifier', start: 95, end: 96, name: 'p' },
  right: Node { type: 'Literal', start: 99, end: 102, value: 103, raw: '103' } }
AssignmentExpression
95
102
=
Node { type: 'Identifier', start: 95, end: 96, name: 'p' }
Identifier
95
96
p
Node { type: 'Literal', start: 99, end: 102, value: 103, raw: '103' }
Literal
99
102
103
103
Node {
  type: 'ExpressionStatement',
  start: 112,
  end: 125,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 112,
     end: 124,
     operator: '=',
     left: Node { type: 'Identifier', start: 112, end: 118, name: 'result' },
     right: 
      Node {
        type: 'CallExpression',
        start: 121,
        end: 124,
        callee: [Node],
        arguments: [] } } }
ExpressionStatement
112
125
Node {
  type: 'AssignmentExpression',
  start: 112,
  end: 124,
  operator: '=',
  left: Node { type: 'Identifier', start: 112, end: 118, name: 'result' },
  right: 
   Node {
     type: 'CallExpression',
     start: 121,
     end: 124,
     callee: Node { type: 'Identifier', start: 121, end: 122, name: 'f' },
     arguments: [] } }
AssignmentExpression
112
124
=
Node { type: 'Identifier', start: 112, end: 118, name: 'result' }
Identifier
112
118
result
Node {
  type: 'CallExpression',
  start: 121,
  end: 124,
  callee: Node { type: 'Identifier', start: 121, end: 122, name: 'f' },
  arguments: [] }
CallExpression
121
124
Node { type: 'Identifier', start: 121, end: 122, name: 'f' }
Identifier
121
122
f
[]
Node {
  type: 'ExpressionStatement',
  start: 134,
  end: 142,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 134,
     end: 141,
     operator: '=',
     left: Node { type: 'Identifier', start: 134, end: 135, name: 'f' },
     right: Node { type: 'Literal', start: 138, end: 141, value: 104, raw: '104' } } }
ExpressionStatement
134
142
Node {
  type: 'AssignmentExpression',
  start: 134,
  end: 141,
  operator: '=',
  left: Node { type: 'Identifier', start: 134, end: 135, name: 'f' },
  right: Node { type: 'Literal', start: 138, end: 141, value: 104, raw: '104' } }
AssignmentExpression
134
141
=
Node { type: 'Identifier', start: 134, end: 135, name: 'f' }
Identifier
134
135
f
Node { type: 'Literal', start: 138, end: 141, value: 104, raw: '104' }
Literal
138
141
104
104
Node {
  type: 'ExpressionStatement',
  start: 151,
  end: 159,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 151,
     end: 158,
     operator: '=',
     left: Node { type: 'Identifier', start: 151, end: 152, name: 'p' },
     right: Node { type: 'Literal', start: 155, end: 158, value: 105, raw: '105' } } }
ExpressionStatement
151
159
Node {
  type: 'AssignmentExpression',
  start: 151,
  end: 158,
  operator: '=',
  left: Node { type: 'Identifier', start: 151, end: 152, name: 'p' },
  right: Node { type: 'Literal', start: 155, end: 158, value: 105, raw: '105' } }
AssignmentExpression
151
158
=
Node { type: 'Identifier', start: 151, end: 152, name: 'p' }
Identifier
151
152
p
Node { type: 'Literal', start: 155, end: 158, value: 105, raw: '105' }
Literal
155
158
105
105
Node {
  type: 'ExpressionStatement',
  start: 168,
  end: 176,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 168,
     end: 175,
     operator: '=',
     left: Node { type: 'Identifier', start: 168, end: 169, name: 'x' },
     right: Node { type: 'Literal', start: 172, end: 175, value: 106, raw: '106' } } }
ExpressionStatement
168
176
Node {
  type: 'AssignmentExpression',
  start: 168,
  end: 175,
  operator: '=',
  left: Node { type: 'Identifier', start: 168, end: 169, name: 'x' },
  right: Node { type: 'Literal', start: 172, end: 175, value: 106, raw: '106' } }
AssignmentExpression
168
175
=
Node { type: 'Identifier', start: 168, end: 169, name: 'x' }
Identifier
168
169
x
Node { type: 'Literal', start: 172, end: 175, value: 106, raw: '106' }
Literal
172
175
106
106
Node {
  type: 'CatchClause',
  start: 183,
  end: 266,
  param: Node { type: 'Identifier', start: 190, end: 191, name: 'e' },
  body: Node { type: 'BlockStatement', start: 193, end: 266, body: [ [Node] ] } }
CatchClause
183
266
Node { type: 'Identifier', start: 190, end: 191, name: 'e' }
Identifier
190
191
e
Node {
  type: 'BlockStatement',
  start: 193,
  end: 266,
  body: 
   [ Node {
       type: 'ReturnStatement',
       start: 203,
       end: 260,
       argument: [Node] } ] }
BlockStatement
193
266
[ Node {
    type: 'ReturnStatement',
    start: 203,
    end: 260,
    argument: 
     Node {
       type: 'ObjectExpression',
       start: 210,
       end: 259,
       properties: [Array] } } ]
Node {
  type: 'ReturnStatement',
  start: 203,
  end: 260,
  argument: 
   Node {
     type: 'ObjectExpression',
     start: 210,
     end: 259,
     properties: [ [Node], [Node] ] } }
ReturnStatement
203
260
Node {
  type: 'ObjectExpression',
  start: 210,
  end: 259,
  properties: 
   [ Node {
       type: 'Property',
       start: 211,
       end: 231,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 233,
       end: 258,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
210
259
[ Node {
    type: 'Property',
    start: 211,
    end: 231,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 211, end: 218, name: 'outcome' },
    value: 
     Node {
       type: 'Literal',
       start: 220,
       end: 231,
       value: 'exception',
       raw: '"exception"' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 233,
    end: 258,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 233, end: 239, name: 'values' },
    value: 
     Node {
       type: 'ArrayExpression',
       start: 241,
       end: 258,
       elements: [Array] },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 211,
  end: 231,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 211, end: 218, name: 'outcome' },
  value: 
   Node {
     type: 'Literal',
     start: 220,
     end: 231,
     value: 'exception',
     raw: '"exception"' },
  kind: 'init' }
Property
211
231
false
false
false
Node { type: 'Identifier', start: 211, end: 218, name: 'outcome' }
Identifier
211
218
outcome
Node {
  type: 'Literal',
  start: 220,
  end: 231,
  value: 'exception',
  raw: '"exception"' }
Literal
220
231
exception
"exception"
init
Node {
  type: 'Property',
  start: 233,
  end: 258,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 233, end: 239, name: 'values' },
  value: 
   Node {
     type: 'ArrayExpression',
     start: 241,
     end: 258,
     elements: [ [Node], [Node], [Node], [Node] ] },
  kind: 'init' }
Property
233
258
false
false
false
Node { type: 'Identifier', start: 233, end: 239, name: 'values' }
Identifier
233
239
values
Node {
  type: 'ArrayExpression',
  start: 241,
  end: 258,
  elements: 
   [ Node { type: 'Identifier', start: 242, end: 243, name: 'f' },
     Node { type: 'Identifier', start: 245, end: 246, name: 'p' },
     Node { type: 'Identifier', start: 248, end: 249, name: 'x' },
     Node { type: 'Identifier', start: 251, end: 257, name: 'result' } ] }
ArrayExpression
241
258
[ Node { type: 'Identifier', start: 242, end: 243, name: 'f' },
  Node { type: 'Identifier', start: 245, end: 246, name: 'p' },
  Node { type: 'Identifier', start: 248, end: 249, name: 'x' },
  Node { type: 'Identifier', start: 251, end: 257, name: 'result' } ]
Node { type: 'Identifier', start: 242, end: 243, name: 'f' }
Identifier
242
243
f
Node { type: 'Identifier', start: 245, end: 246, name: 'p' }
Identifier
245
246
p
Node { type: 'Identifier', start: 248, end: 249, name: 'x' }
Identifier
248
249
x
Node { type: 'Identifier', start: 251, end: 257, name: 'result' }
Identifier
251
257
result
init
null
[+] Exception: ftl-call-varargs-exception.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 230,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 55,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 57,
       end: 71,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 73,
       end: 79,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ForStatement',
       start: 80,
       end: 189,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'IfStatement',
       start: 191,
       end: 229,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
230
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 55,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 17, end: 55, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 57,
    end: 71,
    expression: 
     Node {
       type: 'CallExpression',
       start: 57,
       end: 70,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 73,
    end: 79,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ForStatement',
    start: 80,
    end: 189,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 85,
       end: 94,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 96,
       end: 107,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 109,
       end: 112,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 114, end: 189, body: [Array] } },
  Node {
    type: 'IfStatement',
    start: 191,
    end: 229,
    test: 
     Node {
       type: 'UnaryExpression',
       start: 195,
       end: 197,
       operator: '!',
       prefix: true,
       argument: [Node] },
    consequent: Node { type: 'BlockStatement', start: 199, end: 229, body: [Array] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 55,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'l' },
     Node { type: 'Identifier', start: 15, end: 16, name: 'x' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 17,
     end: 55,
     body: [ [Node], [Node] ] } }
FunctionDeclaration
0
55
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'l' },
  Node { type: 'Identifier', start: 15, end: 16, name: 'x' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'l' }
Identifier
13
14
l
Node { type: 'Identifier', start: 15, end: 16, name: 'x' }
Identifier
15
16
x
Node {
  type: 'BlockStatement',
  start: 17,
  end: 55,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 23,
       end: 38,
       declarations: [Array],
       kind: 'var' },
     Node { type: 'ReturnStatement', start: 44, end: 53, argument: [Node] } ] }
BlockStatement
17
55
[ Node {
    type: 'VariableDeclaration',
    start: 23,
    end: 38,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ReturnStatement',
    start: 44,
    end: 53,
    argument: Node { type: 'Identifier', start: 51, end: 52, name: 't' } } ]
Node {
  type: 'VariableDeclaration',
  start: 23,
  end: 38,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 27,
       end: 37,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
23
38
[ Node {
    type: 'VariableDeclarator',
    start: 27,
    end: 37,
    id: Node { type: 'Identifier', start: 27, end: 28, name: 't' },
    init: 
     Node {
       type: 'BinaryExpression',
       start: 31,
       end: 37,
       left: [Node],
       operator: 'in',
       right: [Node] } } ]
Node {
  type: 'VariableDeclarator',
  start: 27,
  end: 37,
  id: Node { type: 'Identifier', start: 27, end: 28, name: 't' },
  init: 
   Node {
     type: 'BinaryExpression',
     start: 31,
     end: 37,
     left: Node { type: 'Identifier', start: 31, end: 32, name: 'l' },
     operator: 'in',
     right: Node { type: 'Identifier', start: 36, end: 37, name: 'x' } } }
VariableDeclarator
27
37
Node { type: 'Identifier', start: 27, end: 28, name: 't' }
Identifier
27
28
t
Node {
  type: 'BinaryExpression',
  start: 31,
  end: 37,
  left: Node { type: 'Identifier', start: 31, end: 32, name: 'l' },
  operator: 'in',
  right: Node { type: 'Identifier', start: 36, end: 37, name: 'x' } }
BinaryExpression
31
37
Node { type: 'Identifier', start: 31, end: 32, name: 'l' }
Identifier
31
32
l
in
Node { type: 'Identifier', start: 36, end: 37, name: 'x' }
Identifier
36
37
x
var
Node {
  type: 'ReturnStatement',
  start: 44,
  end: 53,
  argument: Node { type: 'Identifier', start: 51, end: 52, name: 't' } }
ReturnStatement
44
53
Node { type: 'Identifier', start: 51, end: 52, name: 't' }
Identifier
51
52
t
Node {
  type: 'ExpressionStatement',
  start: 57,
  end: 71,
  expression: 
   Node {
     type: 'CallExpression',
     start: 57,
     end: 70,
     callee: Node { type: 'Identifier', start: 57, end: 65, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
57
71
Node {
  type: 'CallExpression',
  start: 57,
  end: 70,
  callee: Node { type: 'Identifier', start: 57, end: 65, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 66, end: 69, name: 'foo' } ] }
CallExpression
57
70
Node { type: 'Identifier', start: 57, end: 65, name: 'noInline' }
Identifier
57
65
noInline
[ Node { type: 'Identifier', start: 66, end: 69, name: 'foo' } ]
Node { type: 'Identifier', start: 66, end: 69, name: 'foo' }
Identifier
66
69
foo
Node {
  type: 'VariableDeclaration',
  start: 73,
  end: 79,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 77,
       end: 78,
       id: [Node],
       init: null } ],
  kind: 'var' }
VariableDeclaration
73
79
[ Node {
    type: 'VariableDeclarator',
    start: 77,
    end: 78,
    id: Node { type: 'Identifier', start: 77, end: 78, name: 'r' },
    init: null } ]
Node {
  type: 'VariableDeclarator',
  start: 77,
  end: 78,
  id: Node { type: 'Identifier', start: 77, end: 78, name: 'r' },
  init: null }
VariableDeclarator
77
78
Node { type: 'Identifier', start: 77, end: 78, name: 'r' }
Identifier
77
78
r
null
[+] Exception: ftl-checkin-variable.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 226,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 55,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 57,
       end: 71,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 73,
       end: 79,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ForStatement',
       start: 80,
       end: 185,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'IfStatement',
       start: 187,
       end: 225,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
226
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 55,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 15, end: 55, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 57,
    end: 71,
    expression: 
     Node {
       type: 'CallExpression',
       start: 57,
       end: 70,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 73,
    end: 79,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ForStatement',
    start: 80,
    end: 185,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 85,
       end: 94,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 96,
       end: 107,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 109,
       end: 112,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 114, end: 185, body: [Array] } },
  Node {
    type: 'IfStatement',
    start: 187,
    end: 225,
    test: 
     Node {
       type: 'UnaryExpression',
       start: 191,
       end: 193,
       operator: '!',
       prefix: true,
       argument: [Node] },
    consequent: Node { type: 'BlockStatement', start: 195, end: 225, body: [Array] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 55,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 13, end: 14, name: 'x' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 15,
     end: 55,
     body: [ [Node], [Node] ] } }
FunctionDeclaration
0
55
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'x' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'x' }
Identifier
13
14
x
Node {
  type: 'BlockStatement',
  start: 15,
  end: 55,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 21,
       end: 38,
       declarations: [Array],
       kind: 'var' },
     Node { type: 'ReturnStatement', start: 44, end: 53, argument: [Node] } ] }
BlockStatement
15
55
[ Node {
    type: 'VariableDeclaration',
    start: 21,
    end: 38,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ReturnStatement',
    start: 44,
    end: 53,
    argument: Node { type: 'Identifier', start: 51, end: 52, name: 't' } } ]
Node {
  type: 'VariableDeclaration',
  start: 21,
  end: 38,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 25,
       end: 37,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
21
38
[ Node {
    type: 'VariableDeclarator',
    start: 25,
    end: 37,
    id: Node { type: 'Identifier', start: 25, end: 26, name: 't' },
    init: 
     Node {
       type: 'BinaryExpression',
       start: 29,
       end: 37,
       left: [Node],
       operator: 'in',
       right: [Node] } } ]
Node {
  type: 'VariableDeclarator',
  start: 25,
  end: 37,
  id: Node { type: 'Identifier', start: 25, end: 26, name: 't' },
  init: 
   Node {
     type: 'BinaryExpression',
     start: 29,
     end: 37,
     left: Node { type: 'Literal', start: 29, end: 32, value: 's', raw: '"s"' },
     operator: 'in',
     right: Node { type: 'Identifier', start: 36, end: 37, name: 'x' } } }
VariableDeclarator
25
37
Node { type: 'Identifier', start: 25, end: 26, name: 't' }
Identifier
25
26
t
Node {
  type: 'BinaryExpression',
  start: 29,
  end: 37,
  left: Node { type: 'Literal', start: 29, end: 32, value: 's', raw: '"s"' },
  operator: 'in',
  right: Node { type: 'Identifier', start: 36, end: 37, name: 'x' } }
BinaryExpression
29
37
Node { type: 'Literal', start: 29, end: 32, value: 's', raw: '"s"' }
Literal
29
32
s
"s"
in
Node { type: 'Identifier', start: 36, end: 37, name: 'x' }
Identifier
36
37
x
var
Node {
  type: 'ReturnStatement',
  start: 44,
  end: 53,
  argument: Node { type: 'Identifier', start: 51, end: 52, name: 't' } }
ReturnStatement
44
53
Node { type: 'Identifier', start: 51, end: 52, name: 't' }
Identifier
51
52
t
Node {
  type: 'ExpressionStatement',
  start: 57,
  end: 71,
  expression: 
   Node {
     type: 'CallExpression',
     start: 57,
     end: 70,
     callee: Node { type: 'Identifier', start: 57, end: 65, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
57
71
Node {
  type: 'CallExpression',
  start: 57,
  end: 70,
  callee: Node { type: 'Identifier', start: 57, end: 65, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 66, end: 69, name: 'foo' } ] }
CallExpression
57
70
Node { type: 'Identifier', start: 57, end: 65, name: 'noInline' }
Identifier
57
65
noInline
[ Node { type: 'Identifier', start: 66, end: 69, name: 'foo' } ]
Node { type: 'Identifier', start: 66, end: 69, name: 'foo' }
Identifier
66
69
foo
Node {
  type: 'VariableDeclaration',
  start: 73,
  end: 79,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 77,
       end: 78,
       id: [Node],
       init: null } ],
  kind: 'var' }
VariableDeclaration
73
79
[ Node {
    type: 'VariableDeclarator',
    start: 77,
    end: 78,
    id: Node { type: 'Identifier', start: 77, end: 78, name: 'r' },
    init: null } ]
Node {
  type: 'VariableDeclarator',
  start: 77,
  end: 78,
  id: Node { type: 'Identifier', start: 77, end: 78, name: 'r' },
  init: null }
VariableDeclarator
77
78
Node { type: 'Identifier', start: 77, end: 78, name: 'r' }
Identifier
77
78
r
null
[+] Exception: ftl-checkin.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 367,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 86,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 88,
       end: 102,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 104,
       end: 132,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ForStatement',
       start: 134,
       end: 270,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 272,
       end: 298,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 299,
       end: 365,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
367
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 86,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 86, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 88,
    end: 102,
    expression: 
     Node {
       type: 'CallExpression',
       start: 88,
       end: 101,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 104,
    end: 132,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ForStatement',
    start: 134,
    end: 270,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 139,
       end: 148,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 150,
       end: 160,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 162,
       end: 165,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 167, end: 270, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 272,
    end: 298,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 299,
    end: 365,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 303,
       end: 315,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 321, end: 365, argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 86,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'p' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'o' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 19,
     end: 86,
     body: [ [Node], [Node], [Node] ] } }
FunctionDeclaration
0
86
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'p' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'o' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'p' }
Identifier
13
14
p
Node { type: 'Identifier', start: 16, end: 17, name: 'o' }
Identifier
16
17
o
Node {
  type: 'BlockStatement',
  start: 19,
  end: 86,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 25,
       end: 37,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 42,
       end: 68,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node { type: 'ReturnStatement', start: 73, end: 84, argument: [Node] } ] }
BlockStatement
19
86
[ Node {
    type: 'VariableDeclaration',
    start: 25,
    end: 37,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 42,
    end: 68,
    test: Node { type: 'Identifier', start: 46, end: 47, name: 'p' },
    consequent: Node { type: 'ReturnStatement', start: 57, end: 68, argument: [Node] },
    alternate: null },
  Node {
    type: 'ReturnStatement',
    start: 73,
    end: 84,
    argument: 
     Node {
       type: 'MemberExpression',
       start: 80,
       end: 83,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'VariableDeclaration',
  start: 25,
  end: 37,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 29,
       end: 36,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
25
37
[ Node {
    type: 'VariableDeclarator',
    start: 29,
    end: 36,
    id: Node { type: 'Identifier', start: 29, end: 30, name: 'q' },
    init: 
     Node {
       type: 'MemberExpression',
       start: 33,
       end: 36,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'VariableDeclarator',
  start: 29,
  end: 36,
  id: Node { type: 'Identifier', start: 29, end: 30, name: 'q' },
  init: 
   Node {
     type: 'MemberExpression',
     start: 33,
     end: 36,
     object: Node { type: 'Identifier', start: 33, end: 34, name: 'o' },
     property: Node { type: 'Identifier', start: 35, end: 36, name: 'q' },
     computed: false } }
VariableDeclarator
29
36
Node { type: 'Identifier', start: 29, end: 30, name: 'q' }
Identifier
29
30
q
Node {
  type: 'MemberExpression',
  start: 33,
  end: 36,
  object: Node { type: 'Identifier', start: 33, end: 34, name: 'o' },
  property: Node { type: 'Identifier', start: 35, end: 36, name: 'q' },
  computed: false }
MemberExpression
33
36
Node { type: 'Identifier', start: 33, end: 34, name: 'o' }
Identifier
33
34
o
Node { type: 'Identifier', start: 35, end: 36, name: 'q' }
Identifier
35
36
q
false
var
Node {
  type: 'IfStatement',
  start: 42,
  end: 68,
  test: Node { type: 'Identifier', start: 46, end: 47, name: 'p' },
  consequent: 
   Node {
     type: 'ReturnStatement',
     start: 57,
     end: 68,
     argument: 
      Node {
        type: 'MemberExpression',
        start: 64,
        end: 67,
        object: [Node],
        property: [Node],
        computed: false } },
  alternate: null }
IfStatement
42
68
Node { type: 'Identifier', start: 46, end: 47, name: 'p' }
Identifier
46
47
p
Node {
  type: 'ReturnStatement',
  start: 57,
  end: 68,
  argument: 
   Node {
     type: 'MemberExpression',
     start: 64,
     end: 67,
     object: Node { type: 'Identifier', start: 64, end: 65, name: 'q' },
     property: Node { type: 'Identifier', start: 66, end: 67, name: 'f' },
     computed: false } }
ReturnStatement
57
68
Node {
  type: 'MemberExpression',
  start: 64,
  end: 67,
  object: Node { type: 'Identifier', start: 64, end: 65, name: 'q' },
  property: Node { type: 'Identifier', start: 66, end: 67, name: 'f' },
  computed: false }
MemberExpression
64
67
Node { type: 'Identifier', start: 64, end: 65, name: 'q' }
Identifier
64
65
q
Node { type: 'Identifier', start: 66, end: 67, name: 'f' }
Identifier
66
67
f
false
null
[+] Exception: ftl-force-osr-exit.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 395,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 44,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 46,
       end: 60,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 62,
       end: 98,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 100,
       end: 169,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 171,
       end: 185,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 187,
       end: 393,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
395
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 44,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'baz' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 15, end: 44, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 46,
    end: 60,
    expression: 
     Node {
       type: 'CallExpression',
       start: 46,
       end: 59,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 62,
    end: 98,
    id: Node { type: 'Identifier', start: 71, end: 74, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 77, end: 98, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 100,
    end: 169,
    id: Node { type: 'Identifier', start: 109, end: 112, name: 'bar' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 119, end: 169, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 171,
    end: 185,
    expression: 
     Node {
       type: 'CallExpression',
       start: 171,
       end: 184,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 187,
    end: 393,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 192,
       end: 201,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 203,
       end: 212,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 214,
       end: 217,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 219, end: 393, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 44,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'baz' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 15, end: 44, body: [ [Node] ] } }
FunctionDeclaration
0
44
Node { type: 'Identifier', start: 9, end: 12, name: 'baz' }
Identifier
9
12
baz
false
false
false
[]
Node {
  type: 'BlockStatement',
  start: 15,
  end: 44,
  body: 
   [ Node { type: 'ReturnStatement', start: 21, end: 42, argument: [Node] } ] }
BlockStatement
15
44
[ Node {
    type: 'ReturnStatement',
    start: 21,
    end: 42,
    argument: 
     Node {
       type: 'MemberExpression',
       start: 28,
       end: 41,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'ReturnStatement',
  start: 21,
  end: 42,
  argument: 
   Node {
     type: 'MemberExpression',
     start: 28,
     end: 41,
     object: Node { type: 'Identifier', start: 28, end: 31, name: 'foo' },
     property: Node { type: 'Identifier', start: 32, end: 41, name: 'arguments' },
     computed: false } }
ReturnStatement
21
42
Node {
  type: 'MemberExpression',
  start: 28,
  end: 41,
  object: Node { type: 'Identifier', start: 28, end: 31, name: 'foo' },
  property: Node { type: 'Identifier', start: 32, end: 41, name: 'arguments' },
  computed: false }
MemberExpression
28
41
Node { type: 'Identifier', start: 28, end: 31, name: 'foo' }
Identifier
28
31
foo
Node { type: 'Identifier', start: 32, end: 41, name: 'arguments' }
Identifier
32
41
arguments
false
Node {
  type: 'ExpressionStatement',
  start: 46,
  end: 60,
  expression: 
   Node {
     type: 'CallExpression',
     start: 46,
     end: 59,
     callee: Node { type: 'Identifier', start: 46, end: 54, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
46
60
Node {
  type: 'CallExpression',
  start: 46,
  end: 59,
  callee: Node { type: 'Identifier', start: 46, end: 54, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 55, end: 58, name: 'baz' } ] }
CallExpression
46
59
Node { type: 'Identifier', start: 46, end: 54, name: 'noInline' }
Identifier
46
54
noInline
[ Node { type: 'Identifier', start: 55, end: 58, name: 'baz' } ]
Node { type: 'Identifier', start: 55, end: 58, name: 'baz' }
Identifier
55
58
baz
Node {
  type: 'FunctionDeclaration',
  start: 62,
  end: 98,
  id: Node { type: 'Identifier', start: 71, end: 74, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 77, end: 98, body: [ [Node] ] } }
FunctionDeclaration
62
98
Node { type: 'Identifier', start: 71, end: 74, name: 'foo' }
Identifier
71
74
foo
false
false
false
[]
Node {
  type: 'BlockStatement',
  start: 77,
  end: 98,
  body: 
   [ Node { type: 'ReturnStatement', start: 83, end: 96, argument: [Node] } ] }
BlockStatement
77
98
[ Node {
    type: 'ReturnStatement',
    start: 83,
    end: 96,
    argument: 
     Node {
       type: 'CallExpression',
       start: 90,
       end: 95,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'ReturnStatement',
  start: 83,
  end: 96,
  argument: 
   Node {
     type: 'CallExpression',
     start: 90,
     end: 95,
     callee: Node { type: 'Identifier', start: 90, end: 93, name: 'baz' },
     arguments: [] } }
ReturnStatement
83
96
Node {
  type: 'CallExpression',
  start: 90,
  end: 95,
  callee: Node { type: 'Identifier', start: 90, end: 93, name: 'baz' },
  arguments: [] }
CallExpression
90
95
Node { type: 'Identifier', start: 90, end: 93, name: 'baz' }
Identifier
90
93
baz
[]
Node {
  type: 'FunctionDeclaration',
  start: 100,
  end: 169,
  id: Node { type: 'Identifier', start: 109, end: 112, name: 'bar' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 113, end: 114, name: 'o' },
     Node { type: 'Identifier', start: 116, end: 117, name: 'i' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 119,
     end: 169,
     body: [ [Node], [Node] ] } }
FunctionDeclaration
100
169
Node { type: 'Identifier', start: 109, end: 112, name: 'bar' }
Identifier
109
112
bar
false
false
false
[ Node { type: 'Identifier', start: 113, end: 114, name: 'o' },
  Node { type: 'Identifier', start: 116, end: 117, name: 'i' } ]
Node { type: 'Identifier', start: 113, end: 114, name: 'o' }
Identifier
113
114
o
Node { type: 'Identifier', start: 116, end: 117, name: 'i' }
Identifier
116
117
i
Node {
  type: 'BlockStatement',
  start: 119,
  end: 169,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 125,
       end: 137,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ReturnStatement',
       start: 142,
       end: 167,
       argument: [Node] } ] }
BlockStatement
119
169
[ Node {
    type: 'VariableDeclaration',
    start: 125,
    end: 137,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ReturnStatement',
    start: 142,
    end: 167,
    argument: 
     Node {
       type: 'ArrayExpression',
       start: 149,
       end: 166,
       elements: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 125,
  end: 137,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 129,
       end: 136,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
125
137
[ Node {
    type: 'VariableDeclarator',
    start: 129,
    end: 136,
    id: Node { type: 'Identifier', start: 129, end: 130, name: 'x' },
    init: 
     Node {
       type: 'MemberExpression',
       start: 133,
       end: 136,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'VariableDeclarator',
  start: 129,
  end: 136,
  id: Node { type: 'Identifier', start: 129, end: 130, name: 'x' },
  init: 
   Node {
     type: 'MemberExpression',
     start: 133,
     end: 136,
     object: Node { type: 'Identifier', start: 133, end: 134, name: 'o' },
     property: Node { type: 'Identifier', start: 135, end: 136, name: 'f' },
     computed: false } }
VariableDeclarator
129
136
Node { type: 'Identifier', start: 129, end: 130, name: 'x' }
Identifier
129
130
x
Node {
  type: 'MemberExpression',
  start: 133,
  end: 136,
  object: Node { type: 'Identifier', start: 133, end: 134, name: 'o' },
  property: Node { type: 'Identifier', start: 135, end: 136, name: 'f' },
  computed: false }
MemberExpression
133
136
Node { type: 'Identifier', start: 133, end: 134, name: 'o' }
Identifier
133
134
o
Node { type: 'Identifier', start: 135, end: 136, name: 'f' }
Identifier
135
136
f
false
var
Node {
  type: 'ReturnStatement',
  start: 142,
  end: 167,
  argument: 
   Node {
     type: 'ArrayExpression',
     start: 149,
     end: 166,
     elements: [ [Node], [Node] ] } }
ReturnStatement
142
167
Node {
  type: 'ArrayExpression',
  start: 149,
  end: 166,
  elements: 
   [ Node {
       type: 'CallExpression',
       start: 150,
       end: 162,
       callee: [Node],
       arguments: [Array] },
     Node { type: 'Identifier', start: 164, end: 165, name: 'x' } ] }
ArrayExpression
149
166
[ Node {
    type: 'CallExpression',
    start: 150,
    end: 162,
    callee: Node { type: 'Identifier', start: 150, end: 153, name: 'foo' },
    arguments: [ [Node], [Node], [Node] ] },
  Node { type: 'Identifier', start: 164, end: 165, name: 'x' } ]
Node {
  type: 'CallExpression',
  start: 150,
  end: 162,
  callee: Node { type: 'Identifier', start: 150, end: 153, name: 'foo' },
  arguments: 
   [ Node { type: 'Literal', start: 154, end: 155, value: 1, raw: '1' },
     Node { type: 'Literal', start: 157, end: 158, value: 2, raw: '2' },
     Node { type: 'Literal', start: 160, end: 161, value: 3, raw: '3' } ] }
CallExpression
150
162
Node { type: 'Identifier', start: 150, end: 153, name: 'foo' }
Identifier
150
153
foo
[ Node { type: 'Literal', start: 154, end: 155, value: 1, raw: '1' },
  Node { type: 'Literal', start: 157, end: 158, value: 2, raw: '2' },
  Node { type: 'Literal', start: 160, end: 161, value: 3, raw: '3' } ]
Node { type: 'Literal', start: 154, end: 155, value: 1, raw: '1' }
Literal
154
155
1
1
Node { type: 'Literal', start: 157, end: 158, value: 2, raw: '2' }
Literal
157
158
2
2
Node { type: 'Literal', start: 160, end: 161, value: 3, raw: '3' }
Literal
160
161
3
3
Node { type: 'Identifier', start: 164, end: 165, name: 'x' }
Identifier
164
165
x
Node {
  type: 'ExpressionStatement',
  start: 171,
  end: 185,
  expression: 
   Node {
     type: 'CallExpression',
     start: 171,
     end: 184,
     callee: Node { type: 'Identifier', start: 171, end: 179, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
171
185
Node {
  type: 'CallExpression',
  start: 171,
  end: 184,
  callee: Node { type: 'Identifier', start: 171, end: 179, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 180, end: 183, name: 'bar' } ] }
CallExpression
171
184
Node { type: 'Identifier', start: 171, end: 179, name: 'noInline' }
Identifier
171
179
noInline
[ Node { type: 'Identifier', start: 180, end: 183, name: 'bar' } ]
Node { type: 'Identifier', start: 180, end: 183, name: 'bar' }
Identifier
180
183
bar
Node {
  type: 'ForStatement',
  start: 187,
  end: 393,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 192,
     end: 201,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 203,
     end: 212,
     left: Node { type: 'Identifier', start: 203, end: 204, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 207,
        end: 212,
        value: 10000,
        raw: '10000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 214,
     end: 217,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 216, end: 217, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 219,
     end: 393,
     body: [ [Node], [Node] ] } }
ForStatement
187
393
Node {
  type: 'VariableDeclaration',
  start: 192,
  end: 201,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 196,
       end: 201,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
192
201
[ Node {
    type: 'VariableDeclarator',
    start: 196,
    end: 201,
    id: Node { type: 'Identifier', start: 196, end: 197, name: 'i' },
    init: Node { type: 'Literal', start: 200, end: 201, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 196,
  end: 201,
  id: Node { type: 'Identifier', start: 196, end: 197, name: 'i' },
  init: Node { type: 'Literal', start: 200, end: 201, value: 0, raw: '0' } }
VariableDeclarator
196
201
Node { type: 'Identifier', start: 196, end: 197, name: 'i' }
Identifier
196
197
i
Node { type: 'Literal', start: 200, end: 201, value: 0, raw: '0' }
Literal
200
201
0
0
var
Node {
  type: 'BinaryExpression',
  start: 203,
  end: 212,
  left: Node { type: 'Identifier', start: 203, end: 204, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 207,
     end: 212,
     value: 10000,
     raw: '10000' } }
BinaryExpression
203
212
Node { type: 'Identifier', start: 203, end: 204, name: 'i' }
Identifier
203
204
i
<
Node {
  type: 'Literal',
  start: 207,
  end: 212,
  value: 10000,
  raw: '10000' }
Literal
207
212
10000
10000
Node {
  type: 'UpdateExpression',
  start: 214,
  end: 217,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 216, end: 217, name: 'i' } }
UpdateExpression
214
217
++
true
Node { type: 'Identifier', start: 216, end: 217, name: 'i' }
Identifier
216
217
i
Node {
  type: 'BlockStatement',
  start: 219,
  end: 393,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 225,
       end: 245,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 250,
       end: 391,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
219
393
[ Node {
    type: 'VariableDeclaration',
    start: 225,
    end: 245,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 250,
    end: 391,
    test: 
     Node {
       type: 'LogicalExpression',
       start: 254,
       end: 349,
       left: [Node],
       operator: '||',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 359, end: 391, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 225,
  end: 245,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 229,
       end: 244,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
225
245
[ Node {
    type: 'VariableDeclarator',
    start: 229,
    end: 244,
    id: Node { type: 'Identifier', start: 229, end: 230, name: 'a' },
    init: 
     Node {
       type: 'CallExpression',
       start: 233,
       end: 244,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 229,
  end: 244,
  id: Node { type: 'Identifier', start: 229, end: 230, name: 'a' },
  init: 
   Node {
     type: 'CallExpression',
     start: 233,
     end: 244,
     callee: Node { type: 'Identifier', start: 233, end: 236, name: 'bar' },
     arguments: [ [Node] ] } }
VariableDeclarator
229
244
Node { type: 'Identifier', start: 229, end: 230, name: 'a' }
Identifier
229
230
a
Node {
  type: 'CallExpression',
  start: 233,
  end: 244,
  callee: Node { type: 'Identifier', start: 233, end: 236, name: 'bar' },
  arguments: 
   [ Node {
       type: 'ObjectExpression',
       start: 237,
       end: 243,
       properties: [Array] } ] }
CallExpression
233
244
Node { type: 'Identifier', start: 233, end: 236, name: 'bar' }
Identifier
233
236
bar
[ Node {
    type: 'ObjectExpression',
    start: 237,
    end: 243,
    properties: [ [Node] ] } ]
Node {
  type: 'ObjectExpression',
  start: 237,
  end: 243,
  properties: 
   [ Node {
       type: 'Property',
       start: 238,
       end: 242,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
237
243
[ Node {
    type: 'Property',
    start: 238,
    end: 242,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 238, end: 239, name: 'f' },
    value: Node { type: 'Literal', start: 240, end: 242, value: 42, raw: '42' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 238,
  end: 242,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 238, end: 239, name: 'f' },
  value: Node { type: 'Literal', start: 240, end: 242, value: 42, raw: '42' },
  kind: 'init' }
Property
238
242
false
false
false
Node { type: 'Identifier', start: 238, end: 239, name: 'f' }
Identifier
238
239
f
Node { type: 'Literal', start: 240, end: 242, value: 42, raw: '42' }
Literal
240
242
42
42
init
var
Node {
  type: 'IfStatement',
  start: 250,
  end: 391,
  test: 
   Node {
     type: 'LogicalExpression',
     start: 254,
     end: 349,
     left: 
      Node {
        type: 'LogicalExpression',
        start: 254,
        end: 335,
        left: [Node],
        operator: '||',
        right: [Node] },
     operator: '||',
     right: 
      Node {
        type: 'BinaryExpression',
        start: 339,
        end: 349,
        left: [Node],
        operator: '!=',
        right: [Node] } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 359,
     end: 391,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 365,
        end: 390,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
250
391
Node {
  type: 'LogicalExpression',
  start: 254,
  end: 349,
  left: 
   Node {
     type: 'LogicalExpression',
     start: 254,
     end: 335,
     left: 
      Node {
        type: 'LogicalExpression',
        start: 254,
        end: 319,
        left: [Node],
        operator: '||',
        right: [Node] },
     operator: '||',
     right: 
      Node {
        type: 'BinaryExpression',
        start: 323,
        end: 335,
        left: [Node],
        operator: '!=',
        right: [Node] } },
  operator: '||',
  right: 
   Node {
     type: 'BinaryExpression',
     start: 339,
     end: 349,
     left: 
      Node {
        type: 'MemberExpression',
        start: 339,
        end: 343,
        object: [Node],
        property: [Node],
        computed: true },
     operator: '!=',
     right: Node { type: 'Literal', start: 347, end: 349, value: 42, raw: '42' } } }
LogicalExpression
254
349
Node {
  type: 'LogicalExpression',
  start: 254,
  end: 335,
  left: 
   Node {
     type: 'LogicalExpression',
     start: 254,
     end: 319,
     left: 
      Node {
        type: 'LogicalExpression',
        start: 254,
        end: 303,
        left: [Node],
        operator: '||',
        right: [Node] },
     operator: '||',
     right: 
      Node {
        type: 'BinaryExpression',
        start: 307,
        end: 319,
        left: [Node],
        operator: '!=',
        right: [Node] } },
  operator: '||',
  right: 
   Node {
     type: 'BinaryExpression',
     start: 323,
     end: 335,
     left: 
      Node {
        type: 'MemberExpression',
        start: 323,
        end: 330,
        object: [Node],
        property: [Node],
        computed: true },
     operator: '!=',
     right: Node { type: 'Literal', start: 334, end: 335, value: 3, raw: '3' } } }
LogicalExpression
254
335
Node {
  type: 'LogicalExpression',
  start: 254,
  end: 319,
  left: 
   Node {
     type: 'LogicalExpression',
     start: 254,
     end: 303,
     left: 
      Node {
        type: 'LogicalExpression',
        start: 254,
        end: 287,
        left: [Node],
        operator: '||',
        right: [Node] },
     operator: '||',
     right: 
      Node {
        type: 'BinaryExpression',
        start: 291,
        end: 303,
        left: [Node],
        operator: '!=',
        right: [Node] } },
  operator: '||',
  right: 
   Node {
     type: 'BinaryExpression',
     start: 307,
     end: 319,
     left: 
      Node {
        type: 'MemberExpression',
        start: 307,
        end: 314,
        object: [Node],
        property: [Node],
        computed: true },
     operator: '!=',
     right: Node { type: 'Literal', start: 318, end: 319, value: 2, raw: '2' } } }
LogicalExpression
254
319
Node {
  type: 'LogicalExpression',
  start: 254,
  end: 303,
  left: 
   Node {
     type: 'LogicalExpression',
     start: 254,
     end: 287,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 254,
        end: 267,
        left: [Node],
        operator: '!=',
        right: [Node] },
     operator: '||',
     right: 
      Node {
        type: 'BinaryExpression',
        start: 271,
        end: 287,
        left: [Node],
        operator: '!=',
        right: [Node] } },
  operator: '||',
  right: 
   Node {
     type: 'BinaryExpression',
     start: 291,
     end: 303,
     left: 
      Node {
        type: 'MemberExpression',
        start: 291,
        end: 298,
        object: [Node],
        property: [Node],
        computed: true },
     operator: '!=',
     right: Node { type: 'Literal', start: 302, end: 303, value: 1, raw: '1' } } }
LogicalExpression
254
303
Node {
  type: 'LogicalExpression',
  start: 254,
  end: 287,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 254,
     end: 267,
     left: 
      Node {
        type: 'MemberExpression',
        start: 254,
        end: 262,
        object: [Node],
        property: [Node],
        computed: false },
     operator: '!=',
     right: Node { type: 'Literal', start: 266, end: 267, value: 2, raw: '2' } },
  operator: '||',
  right: 
   Node {
     type: 'BinaryExpression',
     start: 271,
     end: 287,
     left: 
      Node {
        type: 'MemberExpression',
        start: 271,
        end: 282,
        object: [Node],
        property: [Node],
        computed: false },
     operator: '!=',
     right: Node { type: 'Literal', start: 286, end: 287, value: 3, raw: '3' } } }
LogicalExpression
254
287
Node {
  type: 'BinaryExpression',
  start: 254,
  end: 267,
  left: 
   Node {
     type: 'MemberExpression',
     start: 254,
     end: 262,
     object: Node { type: 'Identifier', start: 254, end: 255, name: 'a' },
     property: Node { type: 'Identifier', start: 256, end: 262, name: 'length' },
     computed: false },
  operator: '!=',
  right: Node { type: 'Literal', start: 266, end: 267, value: 2, raw: '2' } }
BinaryExpression
254
267
Node {
  type: 'MemberExpression',
  start: 254,
  end: 262,
  object: Node { type: 'Identifier', start: 254, end: 255, name: 'a' },
  property: Node { type: 'Identifier', start: 256, end: 262, name: 'length' },
  computed: false }
MemberExpression
254
262
Node { type: 'Identifier', start: 254, end: 255, name: 'a' }
Identifier
254
255
a
Node { type: 'Identifier', start: 256, end: 262, name: 'length' }
Identifier
256
262
length
false
!=
Node { type: 'Literal', start: 266, end: 267, value: 2, raw: '2' }
Literal
266
267
2
2
||
Node {
  type: 'BinaryExpression',
  start: 271,
  end: 287,
  left: 
   Node {
     type: 'MemberExpression',
     start: 271,
     end: 282,
     object: 
      Node {
        type: 'MemberExpression',
        start: 271,
        end: 275,
        object: [Node],
        property: [Node],
        computed: true },
     property: Node { type: 'Identifier', start: 276, end: 282, name: 'length' },
     computed: false },
  operator: '!=',
  right: Node { type: 'Literal', start: 286, end: 287, value: 3, raw: '3' } }
BinaryExpression
271
287
Node {
  type: 'MemberExpression',
  start: 271,
  end: 282,
  object: 
   Node {
     type: 'MemberExpression',
     start: 271,
     end: 275,
     object: Node { type: 'Identifier', start: 271, end: 272, name: 'a' },
     property: Node { type: 'Literal', start: 273, end: 274, value: 0, raw: '0' },
     computed: true },
  property: Node { type: 'Identifier', start: 276, end: 282, name: 'length' },
  computed: false }
MemberExpression
271
282
Node {
  type: 'MemberExpression',
  start: 271,
  end: 275,
  object: Node { type: 'Identifier', start: 271, end: 272, name: 'a' },
  property: Node { type: 'Literal', start: 273, end: 274, value: 0, raw: '0' },
  computed: true }
MemberExpression
271
275
Node { type: 'Identifier', start: 271, end: 272, name: 'a' }
Identifier
271
272
a
Node { type: 'Literal', start: 273, end: 274, value: 0, raw: '0' }
Literal
273
274
0
0
true
Node { type: 'Identifier', start: 276, end: 282, name: 'length' }
Identifier
276
282
length
false
!=
Node { type: 'Literal', start: 286, end: 287, value: 3, raw: '3' }
Literal
286
287
3
3
||
Node {
  type: 'BinaryExpression',
  start: 291,
  end: 303,
  left: 
   Node {
     type: 'MemberExpression',
     start: 291,
     end: 298,
     object: 
      Node {
        type: 'MemberExpression',
        start: 291,
        end: 295,
        object: [Node],
        property: [Node],
        computed: true },
     property: Node { type: 'Literal', start: 296, end: 297, value: 0, raw: '0' },
     computed: true },
  operator: '!=',
  right: Node { type: 'Literal', start: 302, end: 303, value: 1, raw: '1' } }
BinaryExpression
291
303
Node {
  type: 'MemberExpression',
  start: 291,
  end: 298,
  object: 
   Node {
     type: 'MemberExpression',
     start: 291,
     end: 295,
     object: Node { type: 'Identifier', start: 291, end: 292, name: 'a' },
     property: Node { type: 'Literal', start: 293, end: 294, value: 0, raw: '0' },
     computed: true },
  property: Node { type: 'Literal', start: 296, end: 297, value: 0, raw: '0' },
  computed: true }
MemberExpression
291
298
Node {
  type: 'MemberExpression',
  start: 291,
  end: 295,
  object: Node { type: 'Identifier', start: 291, end: 292, name: 'a' },
  property: Node { type: 'Literal', start: 293, end: 294, value: 0, raw: '0' },
  computed: true }
MemberExpression
291
295
Node { type: 'Identifier', start: 291, end: 292, name: 'a' }
Identifier
291
292
a
Node { type: 'Literal', start: 293, end: 294, value: 0, raw: '0' }
Literal
293
294
0
0
true
Node { type: 'Literal', start: 296, end: 297, value: 0, raw: '0' }
Literal
296
297
0
0
true
!=
Node { type: 'Literal', start: 302, end: 303, value: 1, raw: '1' }
Literal
302
303
1
1
||
Node {
  type: 'BinaryExpression',
  start: 307,
  end: 319,
  left: 
   Node {
     type: 'MemberExpression',
     start: 307,
     end: 314,
     object: 
      Node {
        type: 'MemberExpression',
        start: 307,
        end: 311,
        object: [Node],
        property: [Node],
        computed: true },
     property: Node { type: 'Literal', start: 312, end: 313, value: 1, raw: '1' },
     computed: true },
  operator: '!=',
  right: Node { type: 'Literal', start: 318, end: 319, value: 2, raw: '2' } }
BinaryExpression
307
319
Node {
  type: 'MemberExpression',
  start: 307,
  end: 314,
  object: 
   Node {
     type: 'MemberExpression',
     start: 307,
     end: 311,
     object: Node { type: 'Identifier', start: 307, end: 308, name: 'a' },
     property: Node { type: 'Literal', start: 309, end: 310, value: 0, raw: '0' },
     computed: true },
  property: Node { type: 'Literal', start: 312, end: 313, value: 1, raw: '1' },
  computed: true }
MemberExpression
307
314
Node {
  type: 'MemberExpression',
  start: 307,
  end: 311,
  object: Node { type: 'Identifier', start: 307, end: 308, name: 'a' },
  property: Node { type: 'Literal', start: 309, end: 310, value: 0, raw: '0' },
  computed: true }
MemberExpression
307
311
Node { type: 'Identifier', start: 307, end: 308, name: 'a' }
Identifier
307
308
a
Node { type: 'Literal', start: 309, end: 310, value: 0, raw: '0' }
Literal
309
310
0
0
true
Node { type: 'Literal', start: 312, end: 313, value: 1, raw: '1' }
Literal
312
313
1
1
true
!=
Node { type: 'Literal', start: 318, end: 319, value: 2, raw: '2' }
Literal
318
319
2
2
||
Node {
  type: 'BinaryExpression',
  start: 323,
  end: 335,
  left: 
   Node {
     type: 'MemberExpression',
     start: 323,
     end: 330,
     object: 
      Node {
        type: 'MemberExpression',
        start: 323,
        end: 327,
        object: [Node],
        property: [Node],
        computed: true },
     property: Node { type: 'Literal', start: 328, end: 329, value: 2, raw: '2' },
     computed: true },
  operator: '!=',
  right: Node { type: 'Literal', start: 334, end: 335, value: 3, raw: '3' } }
BinaryExpression
323
335
Node {
  type: 'MemberExpression',
  start: 323,
  end: 330,
  object: 
   Node {
     type: 'MemberExpression',
     start: 323,
     end: 327,
     object: Node { type: 'Identifier', start: 323, end: 324, name: 'a' },
     property: Node { type: 'Literal', start: 325, end: 326, value: 0, raw: '0' },
     computed: true },
  property: Node { type: 'Literal', start: 328, end: 329, value: 2, raw: '2' },
  computed: true }
MemberExpression
323
330
Node {
  type: 'MemberExpression',
  start: 323,
  end: 327,
  object: Node { type: 'Identifier', start: 323, end: 324, name: 'a' },
  property: Node { type: 'Literal', start: 325, end: 326, value: 0, raw: '0' },
  computed: true }
MemberExpression
323
327
Node { type: 'Identifier', start: 323, end: 324, name: 'a' }
Identifier
323
324
a
Node { type: 'Literal', start: 325, end: 326, value: 0, raw: '0' }
Literal
325
326
0
0
true
Node { type: 'Literal', start: 328, end: 329, value: 2, raw: '2' }
Literal
328
329
2
2
true
!=
Node { type: 'Literal', start: 334, end: 335, value: 3, raw: '3' }
Literal
334
335
3
3
||
Node {
  type: 'BinaryExpression',
  start: 339,
  end: 349,
  left: 
   Node {
     type: 'MemberExpression',
     start: 339,
     end: 343,
     object: Node { type: 'Identifier', start: 339, end: 340, name: 'a' },
     property: Node { type: 'Literal', start: 341, end: 342, value: 1, raw: '1' },
     computed: true },
  operator: '!=',
  right: Node { type: 'Literal', start: 347, end: 349, value: 42, raw: '42' } }
BinaryExpression
339
349
Node {
  type: 'MemberExpression',
  start: 339,
  end: 343,
  object: Node { type: 'Identifier', start: 339, end: 340, name: 'a' },
  property: Node { type: 'Literal', start: 341, end: 342, value: 1, raw: '1' },
  computed: true }
MemberExpression
339
343
Node { type: 'Identifier', start: 339, end: 340, name: 'a' }
Identifier
339
340
a
Node { type: 'Literal', start: 341, end: 342, value: 1, raw: '1' }
Literal
341
342
1
1
true
!=
Node { type: 'Literal', start: 347, end: 349, value: 42, raw: '42' }
Literal
347
349
42
42
Node {
  type: 'ThrowStatement',
  start: 359,
  end: 391,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 365,
     end: 390,
     left: 
      Node {
        type: 'Literal',
        start: 365,
        end: 386,
        value: 'Error: bad result: ',
        raw: '"Error: bad result: "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 389, end: 390, name: 'a' } } }
ThrowStatement
359
391
Node {
  type: 'BinaryExpression',
  start: 365,
  end: 390,
  left: 
   Node {
     type: 'Literal',
     start: 365,
     end: 386,
     value: 'Error: bad result: ',
     raw: '"Error: bad result: "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 389, end: 390, name: 'a' } }
BinaryExpression
365
390
Node {
  type: 'Literal',
  start: 365,
  end: 386,
  value: 'Error: bad result: ',
  raw: '"Error: bad result: "' }
Literal
365
386
Error: bad result: 
"Error: bad result: "
+
Node { type: 'Identifier', start: 389, end: 390, name: 'a' }
Identifier
389
390
a
null
[+] Exception: ftl-function-dot-arguments-with-callee-saves.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1949,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 341,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 343,
       end: 357,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 414,
       end: 1250,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 1279,
       end: 1290,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 1291,
       end: 1352,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 1353,
       end: 1382,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 1383,
       end: 1476,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1477,
       end: 1581,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1582,
       end: 1671,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1672,
       end: 1763,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1764,
       end: 1855,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1856,
       end: 1947,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
1949
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 341,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 341, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 343,
    end: 357,
    expression: 
     Node {
       type: 'CallExpression',
       start: 343,
       end: 356,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 414,
    end: 1250,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 419,
       end: 428,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 430,
       end: 440,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 442,
       end: 445,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 447, end: 1250, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 1279,
    end: 1290,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 1291,
    end: 1352,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1291,
       end: 1351,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 1353,
    end: 1382,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 1383,
    end: 1476,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1387,
       end: 1417,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1423,
       end: 1476,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1477,
    end: 1581,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1481,
       end: 1507,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1513,
       end: 1581,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1582,
    end: 1671,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1586,
       end: 1608,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1614,
       end: 1671,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1672,
    end: 1763,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1676,
       end: 1700,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1706,
       end: 1763,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1764,
    end: 1855,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1768,
       end: 1792,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1798,
       end: 1855,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1856,
    end: 1947,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1860,
       end: 1884,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1890,
       end: 1947,
       argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 341,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'o' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'p' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 19,
     end: 341,
     body: [ [Node], [Node], [Node], [Node], [Node] ] } }
FunctionDeclaration
0
341
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'o' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'p' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'o' }
Identifier
13
14
o
Node { type: 'Identifier', start: 16, end: 17, name: 'p' }
Identifier
16
17
p
Node {
  type: 'BlockStatement',
  start: 19,
  end: 341,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 25,
       end: 37,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 42,
       end: 59,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 64,
       end: 77,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'TryStatement',
       start: 82,
       end: 279,
       block: [Node],
       handler: [Node],
       finalizer: null },
     Node {
       type: 'ReturnStatement',
       start: 284,
       end: 339,
       argument: [Node] } ] }
BlockStatement
19
341
[ Node {
    type: 'VariableDeclaration',
    start: 25,
    end: 37,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 42,
    end: 59,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 64,
    end: 77,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'TryStatement',
    start: 82,
    end: 279,
    block: Node { type: 'BlockStatement', start: 86, end: 194, body: [Array] },
    handler: 
     Node {
       type: 'CatchClause',
       start: 195,
       end: 279,
       param: [Node],
       body: [Node] },
    finalizer: null },
  Node {
    type: 'ReturnStatement',
    start: 284,
    end: 339,
    argument: 
     Node {
       type: 'ObjectExpression',
       start: 291,
       end: 338,
       properties: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 25,
  end: 37,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 29,
       end: 36,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
25
37
[ Node {
    type: 'VariableDeclarator',
    start: 29,
    end: 36,
    id: Node { type: 'Identifier', start: 29, end: 30, name: 'x' },
    init: Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' } } ]
Node {
  type: 'VariableDeclarator',
  start: 29,
  end: 36,
  id: Node { type: 'Identifier', start: 29, end: 30, name: 'x' },
  init: Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' } }
VariableDeclarator
29
36
Node { type: 'Identifier', start: 29, end: 30, name: 'x' }
Identifier
29
30
x
Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' }
Literal
33
36
100
100
var
Node {
  type: 'VariableDeclaration',
  start: 42,
  end: 59,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 46,
       end: 58,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
42
59
[ Node {
    type: 'VariableDeclarator',
    start: 46,
    end: 58,
    id: Node { type: 'Identifier', start: 46, end: 52, name: 'result' },
    init: Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' } } ]
Node {
  type: 'VariableDeclarator',
  start: 46,
  end: 58,
  id: Node { type: 'Identifier', start: 46, end: 52, name: 'result' },
  init: Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' } }
VariableDeclarator
46
58
Node { type: 'Identifier', start: 46, end: 52, name: 'result' }
Identifier
46
52
result
Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' }
Literal
55
58
101
101
var
Node {
  type: 'VariableDeclaration',
  start: 64,
  end: 77,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 68,
       end: 76,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
64
77
[ Node {
    type: 'VariableDeclarator',
    start: 68,
    end: 76,
    id: Node { type: 'Identifier', start: 68, end: 70, name: 'pf' },
    init: 
     Node {
       type: 'MemberExpression',
       start: 73,
       end: 76,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'VariableDeclarator',
  start: 68,
  end: 76,
  id: Node { type: 'Identifier', start: 68, end: 70, name: 'pf' },
  init: 
   Node {
     type: 'MemberExpression',
     start: 73,
     end: 76,
     object: Node { type: 'Identifier', start: 73, end: 74, name: 'p' },
     property: Node { type: 'Identifier', start: 75, end: 76, name: 'g' },
     computed: false } }
VariableDeclarator
68
76
Node { type: 'Identifier', start: 68, end: 70, name: 'pf' }
Identifier
68
70
pf
Node {
  type: 'MemberExpression',
  start: 73,
  end: 76,
  object: Node { type: 'Identifier', start: 73, end: 74, name: 'p' },
  property: Node { type: 'Identifier', start: 75, end: 76, name: 'g' },
  computed: false }
MemberExpression
73
76
Node { type: 'Identifier', start: 73, end: 74, name: 'p' }
Identifier
73
74
p
Node { type: 'Identifier', start: 75, end: 76, name: 'g' }
Identifier
75
76
g
false
var
Node {
  type: 'TryStatement',
  start: 82,
  end: 279,
  block: 
   Node {
     type: 'BlockStatement',
     start: 86,
     end: 194,
     body: [ [Node], [Node], [Node], [Node], [Node], [Node] ] },
  handler: 
   Node {
     type: 'CatchClause',
     start: 195,
     end: 279,
     param: Node { type: 'Identifier', start: 202, end: 203, name: 'e' },
     body: Node { type: 'BlockStatement', start: 205, end: 279, body: [Array] } },
  finalizer: null }
TryStatement
82
279
Node {
  type: 'BlockStatement',
  start: 86,
  end: 194,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 96,
       end: 104,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 113,
       end: 118,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 127,
       end: 140,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 149,
       end: 157,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 166,
       end: 171,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 180,
       end: 188,
       expression: [Node] } ] }
BlockStatement
86
194
[ Node {
    type: 'ExpressionStatement',
    start: 96,
    end: 104,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 96,
       end: 103,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 113,
    end: 118,
    expression: 
     Node {
       type: 'UpdateExpression',
       start: 113,
       end: 117,
       operator: '++',
       prefix: false,
       argument: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 127,
    end: 140,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 127,
       end: 139,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 149,
    end: 157,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 149,
       end: 156,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 166,
    end: 171,
    expression: 
     Node {
       type: 'UpdateExpression',
       start: 166,
       end: 170,
       operator: '++',
       prefix: false,
       argument: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 180,
    end: 188,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 180,
       end: 187,
       operator: '=',
       left: [Node],
       right: [Node] } } ]
Node {
  type: 'ExpressionStatement',
  start: 96,
  end: 104,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 96,
     end: 103,
     operator: '=',
     left: Node { type: 'Identifier', start: 96, end: 97, name: 'x' },
     right: Node { type: 'Literal', start: 100, end: 103, value: 102, raw: '102' } } }
ExpressionStatement
96
104
Node {
  type: 'AssignmentExpression',
  start: 96,
  end: 103,
  operator: '=',
  left: Node { type: 'Identifier', start: 96, end: 97, name: 'x' },
  right: Node { type: 'Literal', start: 100, end: 103, value: 102, raw: '102' } }
AssignmentExpression
96
103
=
Node { type: 'Identifier', start: 96, end: 97, name: 'x' }
Identifier
96
97
x
Node { type: 'Literal', start: 100, end: 103, value: 102, raw: '102' }
Literal
100
103
102
102
Node {
  type: 'ExpressionStatement',
  start: 113,
  end: 118,
  expression: 
   Node {
     type: 'UpdateExpression',
     start: 113,
     end: 117,
     operator: '++',
     prefix: false,
     argument: Node { type: 'Identifier', start: 113, end: 115, name: 'pf' } } }
ExpressionStatement
113
118
Node {
  type: 'UpdateExpression',
  start: 113,
  end: 117,
  operator: '++',
  prefix: false,
  argument: Node { type: 'Identifier', start: 113, end: 115, name: 'pf' } }
UpdateExpression
113
117
++
false
Node { type: 'Identifier', start: 113, end: 115, name: 'pf' }
Identifier
113
115
pf
Node {
  type: 'ExpressionStatement',
  start: 127,
  end: 140,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 127,
     end: 139,
     operator: '=',
     left: Node { type: 'Identifier', start: 127, end: 133, name: 'result' },
     right: 
      Node {
        type: 'MemberExpression',
        start: 136,
        end: 139,
        object: [Node],
        property: [Node],
        computed: false } } }
ExpressionStatement
127
140
Node {
  type: 'AssignmentExpression',
  start: 127,
  end: 139,
  operator: '=',
  left: Node { type: 'Identifier', start: 127, end: 133, name: 'result' },
  right: 
   Node {
     type: 'MemberExpression',
     start: 136,
     end: 139,
     object: Node { type: 'Identifier', start: 136, end: 137, name: 'o' },
     property: Node { type: 'Identifier', start: 138, end: 139, name: 'f' },
     computed: false } }
AssignmentExpression
127
139
=
Node { type: 'Identifier', start: 127, end: 133, name: 'result' }
Identifier
127
133
result
Node {
  type: 'MemberExpression',
  start: 136,
  end: 139,
  object: Node { type: 'Identifier', start: 136, end: 137, name: 'o' },
  property: Node { type: 'Identifier', start: 138, end: 139, name: 'f' },
  computed: false }
MemberExpression
136
139
Node { type: 'Identifier', start: 136, end: 137, name: 'o' }
Identifier
136
137
o
Node { type: 'Identifier', start: 138, end: 139, name: 'f' }
Identifier
138
139
f
false
Node {
  type: 'ExpressionStatement',
  start: 149,
  end: 157,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 149,
     end: 156,
     operator: '=',
     left: Node { type: 'Identifier', start: 149, end: 150, name: 'o' },
     right: Node { type: 'Literal', start: 153, end: 156, value: 104, raw: '104' } } }
ExpressionStatement
149
157
Node {
  type: 'AssignmentExpression',
  start: 149,
  end: 156,
  operator: '=',
  left: Node { type: 'Identifier', start: 149, end: 150, name: 'o' },
  right: Node { type: 'Literal', start: 153, end: 156, value: 104, raw: '104' } }
AssignmentExpression
149
156
=
Node { type: 'Identifier', start: 149, end: 150, name: 'o' }
Identifier
149
150
o
Node { type: 'Literal', start: 153, end: 156, value: 104, raw: '104' }
Literal
153
156
104
104
Node {
  type: 'ExpressionStatement',
  start: 166,
  end: 171,
  expression: 
   Node {
     type: 'UpdateExpression',
     start: 166,
     end: 170,
     operator: '++',
     prefix: false,
     argument: Node { type: 'Identifier', start: 166, end: 168, name: 'pf' } } }
ExpressionStatement
166
171
Node {
  type: 'UpdateExpression',
  start: 166,
  end: 170,
  operator: '++',
  prefix: false,
  argument: Node { type: 'Identifier', start: 166, end: 168, name: 'pf' } }
UpdateExpression
166
170
++
false
Node { type: 'Identifier', start: 166, end: 168, name: 'pf' }
Identifier
166
168
pf
Node {
  type: 'ExpressionStatement',
  start: 180,
  end: 188,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 180,
     end: 187,
     operator: '=',
     left: Node { type: 'Identifier', start: 180, end: 181, name: 'x' },
     right: Node { type: 'Literal', start: 184, end: 187, value: 106, raw: '106' } } }
ExpressionStatement
180
188
Node {
  type: 'AssignmentExpression',
  start: 180,
  end: 187,
  operator: '=',
  left: Node { type: 'Identifier', start: 180, end: 181, name: 'x' },
  right: Node { type: 'Literal', start: 184, end: 187, value: 106, raw: '106' } }
AssignmentExpression
180
187
=
Node { type: 'Identifier', start: 180, end: 181, name: 'x' }
Identifier
180
181
x
Node { type: 'Literal', start: 184, end: 187, value: 106, raw: '106' }
Literal
184
187
106
106
Node {
  type: 'CatchClause',
  start: 195,
  end: 279,
  param: Node { type: 'Identifier', start: 202, end: 203, name: 'e' },
  body: Node { type: 'BlockStatement', start: 205, end: 279, body: [ [Node] ] } }
CatchClause
195
279
Node { type: 'Identifier', start: 202, end: 203, name: 'e' }
Identifier
202
203
e
Node {
  type: 'BlockStatement',
  start: 205,
  end: 279,
  body: 
   [ Node {
       type: 'ReturnStatement',
       start: 215,
       end: 273,
       argument: [Node] } ] }
BlockStatement
205
279
[ Node {
    type: 'ReturnStatement',
    start: 215,
    end: 273,
    argument: 
     Node {
       type: 'ObjectExpression',
       start: 222,
       end: 272,
       properties: [Array] } } ]
Node {
  type: 'ReturnStatement',
  start: 215,
  end: 273,
  argument: 
   Node {
     type: 'ObjectExpression',
     start: 222,
     end: 272,
     properties: [ [Node], [Node] ] } }
ReturnStatement
215
273
Node {
  type: 'ObjectExpression',
  start: 222,
  end: 272,
  properties: 
   [ Node {
       type: 'Property',
       start: 223,
       end: 243,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 245,
       end: 271,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
222
272
[ Node {
    type: 'Property',
    start: 223,
    end: 243,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 223, end: 230, name: 'outcome' },
    value: 
     Node {
       type: 'Literal',
       start: 232,
       end: 243,
       value: 'exception',
       raw: '"exception"' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 245,
    end: 271,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 245, end: 251, name: 'values' },
    value: 
     Node {
       type: 'ArrayExpression',
       start: 253,
       end: 271,
       elements: [Array] },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 223,
  end: 243,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 223, end: 230, name: 'outcome' },
  value: 
   Node {
     type: 'Literal',
     start: 232,
     end: 243,
     value: 'exception',
     raw: '"exception"' },
  kind: 'init' }
Property
223
243
false
false
false
Node { type: 'Identifier', start: 223, end: 230, name: 'outcome' }
Identifier
223
230
outcome
Node {
  type: 'Literal',
  start: 232,
  end: 243,
  value: 'exception',
  raw: '"exception"' }
Literal
232
243
exception
"exception"
init
Node {
  type: 'Property',
  start: 245,
  end: 271,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 245, end: 251, name: 'values' },
  value: 
   Node {
     type: 'ArrayExpression',
     start: 253,
     end: 271,
     elements: [ [Node], [Node], [Node], [Node] ] },
  kind: 'init' }
Property
245
271
false
false
false
Node { type: 'Identifier', start: 245, end: 251, name: 'values' }
Identifier
245
251
values
Node {
  type: 'ArrayExpression',
  start: 253,
  end: 271,
  elements: 
   [ Node { type: 'Identifier', start: 254, end: 255, name: 'o' },
     Node { type: 'Identifier', start: 257, end: 259, name: 'pf' },
     Node { type: 'Identifier', start: 261, end: 262, name: 'x' },
     Node { type: 'Identifier', start: 264, end: 270, name: 'result' } ] }
ArrayExpression
253
271
[ Node { type: 'Identifier', start: 254, end: 255, name: 'o' },
  Node { type: 'Identifier', start: 257, end: 259, name: 'pf' },
  Node { type: 'Identifier', start: 261, end: 262, name: 'x' },
  Node { type: 'Identifier', start: 264, end: 270, name: 'result' } ]
Node { type: 'Identifier', start: 254, end: 255, name: 'o' }
Identifier
254
255
o
Node { type: 'Identifier', start: 257, end: 259, name: 'pf' }
Identifier
257
259
pf
Node { type: 'Identifier', start: 261, end: 262, name: 'x' }
Identifier
261
262
x
Node { type: 'Identifier', start: 264, end: 270, name: 'result' }
Identifier
264
270
result
init
null
[+] Exception: ftl-get-by-id-getter-exception-interesting-live-state.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1489,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 203,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 205,
       end: 219,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 276,
       end: 1103,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 1132,
       end: 1143,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'TryStatement',
       start: 1144,
       end: 1393,
       block: [Node],
       handler: [Node],
       finalizer: null },
     Node {
       type: 'IfStatement',
       start: 1394,
       end: 1487,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
1489
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 203,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 203, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 205,
    end: 219,
    expression: 
     Node {
       type: 'CallExpression',
       start: 205,
       end: 218,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 276,
    end: 1103,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 281,
       end: 290,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 292,
       end: 302,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 304,
       end: 307,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 309, end: 1103, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 1132,
    end: 1143,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'TryStatement',
    start: 1144,
    end: 1393,
    block: Node { type: 'BlockStatement', start: 1148, end: 1267, body: [Array] },
    handler: 
     Node {
       type: 'CatchClause',
       start: 1268,
       end: 1393,
       param: [Node],
       body: [Node] },
    finalizer: null },
  Node {
    type: 'IfStatement',
    start: 1394,
    end: 1487,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1398,
       end: 1428,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1434,
       end: 1487,
       argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 203,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'o' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'p' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 19,
     end: 203,
     body: 
      [ [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node] ] } }
FunctionDeclaration
0
203
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'o' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'p' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'o' }
Identifier
13
14
o
Node { type: 'Identifier', start: 16, end: 17, name: 'p' }
Identifier
16
17
p
Node {
  type: 'BlockStatement',
  start: 19,
  end: 203,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 25,
       end: 37,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 42,
       end: 59,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 64,
       end: 72,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 77,
       end: 85,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 90,
       end: 103,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 108,
       end: 116,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 121,
       end: 129,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 134,
       end: 142,
       expression: [Node] },
     Node {
       type: 'ReturnStatement',
       start: 147,
       end: 201,
       argument: [Node] } ] }
BlockStatement
19
203
[ Node {
    type: 'VariableDeclaration',
    start: 25,
    end: 37,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 42,
    end: 59,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 64,
    end: 72,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 64,
       end: 71,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 77,
    end: 85,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 77,
       end: 84,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 90,
    end: 103,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 90,
       end: 102,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 108,
    end: 116,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 108,
       end: 115,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 121,
    end: 129,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 121,
       end: 128,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 134,
    end: 142,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 134,
       end: 141,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ReturnStatement',
    start: 147,
    end: 201,
    argument: 
     Node {
       type: 'ObjectExpression',
       start: 154,
       end: 200,
       properties: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 25,
  end: 37,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 29,
       end: 36,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
25
37
[ Node {
    type: 'VariableDeclarator',
    start: 29,
    end: 36,
    id: Node { type: 'Identifier', start: 29, end: 30, name: 'x' },
    init: Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' } } ]
Node {
  type: 'VariableDeclarator',
  start: 29,
  end: 36,
  id: Node { type: 'Identifier', start: 29, end: 30, name: 'x' },
  init: Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' } }
VariableDeclarator
29
36
Node { type: 'Identifier', start: 29, end: 30, name: 'x' }
Identifier
29
30
x
Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' }
Literal
33
36
100
100
var
Node {
  type: 'VariableDeclaration',
  start: 42,
  end: 59,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 46,
       end: 58,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
42
59
[ Node {
    type: 'VariableDeclarator',
    start: 46,
    end: 58,
    id: Node { type: 'Identifier', start: 46, end: 52, name: 'result' },
    init: Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' } } ]
Node {
  type: 'VariableDeclarator',
  start: 46,
  end: 58,
  id: Node { type: 'Identifier', start: 46, end: 52, name: 'result' },
  init: Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' } }
VariableDeclarator
46
58
Node { type: 'Identifier', start: 46, end: 52, name: 'result' }
Identifier
46
52
result
Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' }
Literal
55
58
101
101
var
Node {
  type: 'ExpressionStatement',
  start: 64,
  end: 72,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 64,
     end: 71,
     operator: '=',
     left: Node { type: 'Identifier', start: 64, end: 65, name: 'x' },
     right: Node { type: 'Literal', start: 68, end: 71, value: 102, raw: '102' } } }
ExpressionStatement
64
72
Node {
  type: 'AssignmentExpression',
  start: 64,
  end: 71,
  operator: '=',
  left: Node { type: 'Identifier', start: 64, end: 65, name: 'x' },
  right: Node { type: 'Literal', start: 68, end: 71, value: 102, raw: '102' } }
AssignmentExpression
64
71
=
Node { type: 'Identifier', start: 64, end: 65, name: 'x' }
Identifier
64
65
x
Node { type: 'Literal', start: 68, end: 71, value: 102, raw: '102' }
Literal
68
71
102
102
Node {
  type: 'ExpressionStatement',
  start: 77,
  end: 85,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 77,
     end: 84,
     operator: '=',
     left: Node { type: 'Identifier', start: 77, end: 78, name: 'p' },
     right: Node { type: 'Literal', start: 81, end: 84, value: 103, raw: '103' } } }
ExpressionStatement
77
85
Node {
  type: 'AssignmentExpression',
  start: 77,
  end: 84,
  operator: '=',
  left: Node { type: 'Identifier', start: 77, end: 78, name: 'p' },
  right: Node { type: 'Literal', start: 81, end: 84, value: 103, raw: '103' } }
AssignmentExpression
77
84
=
Node { type: 'Identifier', start: 77, end: 78, name: 'p' }
Identifier
77
78
p
Node { type: 'Literal', start: 81, end: 84, value: 103, raw: '103' }
Literal
81
84
103
103
Node {
  type: 'ExpressionStatement',
  start: 90,
  end: 103,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 90,
     end: 102,
     operator: '=',
     left: Node { type: 'Identifier', start: 90, end: 96, name: 'result' },
     right: 
      Node {
        type: 'MemberExpression',
        start: 99,
        end: 102,
        object: [Node],
        property: [Node],
        computed: false } } }
ExpressionStatement
90
103
Node {
  type: 'AssignmentExpression',
  start: 90,
  end: 102,
  operator: '=',
  left: Node { type: 'Identifier', start: 90, end: 96, name: 'result' },
  right: 
   Node {
     type: 'MemberExpression',
     start: 99,
     end: 102,
     object: Node { type: 'Identifier', start: 99, end: 100, name: 'o' },
     property: Node { type: 'Identifier', start: 101, end: 102, name: 'f' },
     computed: false } }
AssignmentExpression
90
102
=
Node { type: 'Identifier', start: 90, end: 96, name: 'result' }
Identifier
90
96
result
Node {
  type: 'MemberExpression',
  start: 99,
  end: 102,
  object: Node { type: 'Identifier', start: 99, end: 100, name: 'o' },
  property: Node { type: 'Identifier', start: 101, end: 102, name: 'f' },
  computed: false }
MemberExpression
99
102
Node { type: 'Identifier', start: 99, end: 100, name: 'o' }
Identifier
99
100
o
Node { type: 'Identifier', start: 101, end: 102, name: 'f' }
Identifier
101
102
f
false
Node {
  type: 'ExpressionStatement',
  start: 108,
  end: 116,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 108,
     end: 115,
     operator: '=',
     left: Node { type: 'Identifier', start: 108, end: 109, name: 'o' },
     right: Node { type: 'Literal', start: 112, end: 115, value: 104, raw: '104' } } }
ExpressionStatement
108
116
Node {
  type: 'AssignmentExpression',
  start: 108,
  end: 115,
  operator: '=',
  left: Node { type: 'Identifier', start: 108, end: 109, name: 'o' },
  right: Node { type: 'Literal', start: 112, end: 115, value: 104, raw: '104' } }
AssignmentExpression
108
115
=
Node { type: 'Identifier', start: 108, end: 109, name: 'o' }
Identifier
108
109
o
Node { type: 'Literal', start: 112, end: 115, value: 104, raw: '104' }
Literal
112
115
104
104
Node {
  type: 'ExpressionStatement',
  start: 121,
  end: 129,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 121,
     end: 128,
     operator: '=',
     left: Node { type: 'Identifier', start: 121, end: 122, name: 'p' },
     right: Node { type: 'Literal', start: 125, end: 128, value: 105, raw: '105' } } }
ExpressionStatement
121
129
Node {
  type: 'AssignmentExpression',
  start: 121,
  end: 128,
  operator: '=',
  left: Node { type: 'Identifier', start: 121, end: 122, name: 'p' },
  right: Node { type: 'Literal', start: 125, end: 128, value: 105, raw: '105' } }
AssignmentExpression
121
128
=
Node { type: 'Identifier', start: 121, end: 122, name: 'p' }
Identifier
121
122
p
Node { type: 'Literal', start: 125, end: 128, value: 105, raw: '105' }
Literal
125
128
105
105
Node {
  type: 'ExpressionStatement',
  start: 134,
  end: 142,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 134,
     end: 141,
     operator: '=',
     left: Node { type: 'Identifier', start: 134, end: 135, name: 'x' },
     right: Node { type: 'Literal', start: 138, end: 141, value: 106, raw: '106' } } }
ExpressionStatement
134
142
Node {
  type: 'AssignmentExpression',
  start: 134,
  end: 141,
  operator: '=',
  left: Node { type: 'Identifier', start: 134, end: 135, name: 'x' },
  right: Node { type: 'Literal', start: 138, end: 141, value: 106, raw: '106' } }
AssignmentExpression
134
141
=
Node { type: 'Identifier', start: 134, end: 135, name: 'x' }
Identifier
134
135
x
Node { type: 'Literal', start: 138, end: 141, value: 106, raw: '106' }
Literal
138
141
106
106
Node {
  type: 'ReturnStatement',
  start: 147,
  end: 201,
  argument: 
   Node {
     type: 'ObjectExpression',
     start: 154,
     end: 200,
     properties: [ [Node], [Node] ] } }
ReturnStatement
147
201
Node {
  type: 'ObjectExpression',
  start: 154,
  end: 200,
  properties: 
   [ Node {
       type: 'Property',
       start: 155,
       end: 172,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 174,
       end: 199,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
154
200
[ Node {
    type: 'Property',
    start: 155,
    end: 172,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 155, end: 162, name: 'outcome' },
    value: 
     Node {
       type: 'Literal',
       start: 164,
       end: 172,
       value: 'return',
       raw: '"return"' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 174,
    end: 199,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 174, end: 180, name: 'values' },
    value: 
     Node {
       type: 'ArrayExpression',
       start: 182,
       end: 199,
       elements: [Array] },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 155,
  end: 172,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 155, end: 162, name: 'outcome' },
  value: 
   Node {
     type: 'Literal',
     start: 164,
     end: 172,
     value: 'return',
     raw: '"return"' },
  kind: 'init' }
Property
155
172
false
false
false
Node { type: 'Identifier', start: 155, end: 162, name: 'outcome' }
Identifier
155
162
outcome
Node {
  type: 'Literal',
  start: 164,
  end: 172,
  value: 'return',
  raw: '"return"' }
Literal
164
172
return
"return"
init
Node {
  type: 'Property',
  start: 174,
  end: 199,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 174, end: 180, name: 'values' },
  value: 
   Node {
     type: 'ArrayExpression',
     start: 182,
     end: 199,
     elements: [ [Node], [Node], [Node], [Node] ] },
  kind: 'init' }
Property
174
199
false
false
false
Node { type: 'Identifier', start: 174, end: 180, name: 'values' }
Identifier
174
180
values
Node {
  type: 'ArrayExpression',
  start: 182,
  end: 199,
  elements: 
   [ Node { type: 'Identifier', start: 183, end: 184, name: 'o' },
     Node { type: 'Identifier', start: 186, end: 187, name: 'p' },
     Node { type: 'Identifier', start: 189, end: 190, name: 'x' },
     Node { type: 'Identifier', start: 192, end: 198, name: 'result' } ] }
ArrayExpression
182
199
[ Node { type: 'Identifier', start: 183, end: 184, name: 'o' },
  Node { type: 'Identifier', start: 186, end: 187, name: 'p' },
  Node { type: 'Identifier', start: 189, end: 190, name: 'x' },
  Node { type: 'Identifier', start: 192, end: 198, name: 'result' } ]
Node { type: 'Identifier', start: 183, end: 184, name: 'o' }
Identifier
183
184
o
Node { type: 'Identifier', start: 186, end: 187, name: 'p' }
Identifier
186
187
p
Node { type: 'Identifier', start: 189, end: 190, name: 'x' }
Identifier
189
190
x
Node { type: 'Identifier', start: 192, end: 198, name: 'result' }
Identifier
192
198
result
init
Node {
  type: 'ExpressionStatement',
  start: 205,
  end: 219,
  expression: 
   Node {
     type: 'CallExpression',
     start: 205,
     end: 218,
     callee: Node { type: 'Identifier', start: 205, end: 213, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
205
219
Node {
  type: 'CallExpression',
  start: 205,
  end: 218,
  callee: Node { type: 'Identifier', start: 205, end: 213, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 214, end: 217, name: 'foo' } ] }
CallExpression
205
218
Node { type: 'Identifier', start: 205, end: 213, name: 'noInline' }
Identifier
205
213
noInline
[ Node { type: 'Identifier', start: 214, end: 217, name: 'foo' } ]
Node { type: 'Identifier', start: 214, end: 217, name: 'foo' }
Identifier
214
217
foo
Node {
  type: 'ForStatement',
  start: 276,
  end: 1103,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 281,
     end: 290,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 292,
     end: 302,
     left: Node { type: 'Identifier', start: 292, end: 293, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 296,
        end: 302,
        value: 100000,
        raw: '100000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 304,
     end: 307,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 306, end: 307, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 309,
     end: 1103,
     body: 
      [ [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node] ] } }
ForStatement
276
1103
Node {
  type: 'VariableDeclaration',
  start: 281,
  end: 290,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 285,
       end: 290,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
281
290
[ Node {
    type: 'VariableDeclarator',
    start: 285,
    end: 290,
    id: Node { type: 'Identifier', start: 285, end: 286, name: 'i' },
    init: Node { type: 'Literal', start: 289, end: 290, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 285,
  end: 290,
  id: Node { type: 'Identifier', start: 285, end: 286, name: 'i' },
  init: Node { type: 'Literal', start: 289, end: 290, value: 0, raw: '0' } }
VariableDeclarator
285
290
Node { type: 'Identifier', start: 285, end: 286, name: 'i' }
Identifier
285
286
i
Node { type: 'Literal', start: 289, end: 290, value: 0, raw: '0' }
Literal
289
290
0
0
var
Node {
  type: 'BinaryExpression',
  start: 292,
  end: 302,
  left: Node { type: 'Identifier', start: 292, end: 293, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 296,
     end: 302,
     value: 100000,
     raw: '100000' } }
BinaryExpression
292
302
Node { type: 'Identifier', start: 292, end: 293, name: 'i' }
Identifier
292
293
i
<
Node {
  type: 'Literal',
  start: 296,
  end: 302,
  value: 100000,
  raw: '100000' }
Literal
296
302
100000
100000
Node {
  type: 'UpdateExpression',
  start: 304,
  end: 307,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 306, end: 307, name: 'i' } }
UpdateExpression
304
307
++
true
Node { type: 'Identifier', start: 306, end: 307, name: 'i' }
Identifier
306
307
i
Node {
  type: 'BlockStatement',
  start: 309,
  end: 1103,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 315,
       end: 326,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 331,
       end: 395,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 400,
       end: 434,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'VariableDeclaration',
       start: 463,
       end: 483,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 488,
       end: 583,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 588,
       end: 697,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 702,
       end: 798,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 803,
       end: 899,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 904,
       end: 1000,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1005,
       end: 1101,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
309
1103
[ Node {
    type: 'VariableDeclaration',
    start: 315,
    end: 326,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 331,
    end: 395,
    expression: 
     Node {
       type: 'CallExpression',
       start: 331,
       end: 394,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'IfStatement',
    start: 400,
    end: 434,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 404,
       end: 409,
       left: [Node],
       operator: '&',
       right: [Node] },
    consequent: 
     Node {
       type: 'ExpressionStatement',
       start: 419,
       end: 434,
       expression: [Node] },
    alternate: null },
  Node {
    type: 'VariableDeclaration',
    start: 463,
    end: 483,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 488,
    end: 583,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 492,
       end: 519,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 529, end: 583, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 588,
    end: 697,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 592,
       end: 618,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 628, end: 697, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 702,
    end: 798,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 706,
       end: 730,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 740, end: 798, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 803,
    end: 899,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 807,
       end: 831,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 841, end: 899, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 904,
    end: 1000,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 908,
       end: 932,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 942,
       end: 1000,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1005,
    end: 1101,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1009,
       end: 1033,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1043,
       end: 1101,
       argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 315,
  end: 326,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 319,
       end: 325,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
315
326
[ Node {
    type: 'VariableDeclarator',
    start: 319,
    end: 325,
    id: Node { type: 'Identifier', start: 319, end: 320, name: 'o' },
    init: Node { type: 'ObjectExpression', start: 323, end: 325, properties: [] } } ]
Node {
  type: 'VariableDeclarator',
  start: 319,
  end: 325,
  id: Node { type: 'Identifier', start: 319, end: 320, name: 'o' },
  init: Node { type: 'ObjectExpression', start: 323, end: 325, properties: [] } }
VariableDeclarator
319
325
Node { type: 'Identifier', start: 319, end: 320, name: 'o' }
Identifier
319
320
o
Node { type: 'ObjectExpression', start: 323, end: 325, properties: [] }
ObjectExpression
323
325
[]
var
Node {
  type: 'ExpressionStatement',
  start: 331,
  end: 395,
  expression: 
   Node {
     type: 'CallExpression',
     start: 331,
     end: 394,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 331,
        end: 349,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [ [Node], [Node] ] } }
ExpressionStatement
331
395
Node {
  type: 'CallExpression',
  start: 331,
  end: 394,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 331,
     end: 349,
     object: Node { type: 'Identifier', start: 331, end: 332, name: 'o' },
     property: 
      Node {
        type: 'Identifier',
        start: 333,
        end: 349,
        name: '__defineGetter__' },
     computed: false },
  arguments: 
   [ Node { type: 'Literal', start: 350, end: 353, value: 'f', raw: '"f"' },
     Node {
       type: 'FunctionExpression',
       start: 355,
       end: 393,
       id: null,
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] } ] }
CallExpression
331
394
Node {
  type: 'MemberExpression',
  start: 331,
  end: 349,
  object: Node { type: 'Identifier', start: 331, end: 332, name: 'o' },
  property: 
   Node {
     type: 'Identifier',
     start: 333,
     end: 349,
     name: '__defineGetter__' },
  computed: false }
MemberExpression
331
349
Node { type: 'Identifier', start: 331, end: 332, name: 'o' }
Identifier
331
332
o
Node {
  type: 'Identifier',
  start: 333,
  end: 349,
  name: '__defineGetter__' }
Identifier
333
349
__defineGetter__
false
[ Node { type: 'Literal', start: 350, end: 353, value: 'f', raw: '"f"' },
  Node {
    type: 'FunctionExpression',
    start: 355,
    end: 393,
    id: null,
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 366, end: 393, body: [Array] } } ]
Node { type: 'Literal', start: 350, end: 353, value: 'f', raw: '"f"' }
Literal
350
353
f
"f"
Node {
  type: 'FunctionExpression',
  start: 355,
  end: 393,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 366, end: 393, body: [ [Node] ] } }
FunctionExpression
355
393
null
[+] Exception: ftl-get-by-id-getter-exception-no-catch.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1922,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 327,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 329,
       end: 343,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 400,
       end: 1227,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 1256,
       end: 1267,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 1268,
       end: 1329,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 1330,
       end: 1355,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 1356,
       end: 1449,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1450,
       end: 1554,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1555,
       end: 1644,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1645,
       end: 1736,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1737,
       end: 1828,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1829,
       end: 1920,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
1922
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 327,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 327, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 329,
    end: 343,
    expression: 
     Node {
       type: 'CallExpression',
       start: 329,
       end: 342,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 400,
    end: 1227,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 405,
       end: 414,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 416,
       end: 426,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 428,
       end: 431,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 433, end: 1227, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 1256,
    end: 1267,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 1268,
    end: 1329,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1268,
       end: 1328,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 1330,
    end: 1355,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 1356,
    end: 1449,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1360,
       end: 1390,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1396,
       end: 1449,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1450,
    end: 1554,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1454,
       end: 1480,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1486,
       end: 1554,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1555,
    end: 1644,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1559,
       end: 1581,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1587,
       end: 1644,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1645,
    end: 1736,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1649,
       end: 1673,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1679,
       end: 1736,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1737,
    end: 1828,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1741,
       end: 1765,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1771,
       end: 1828,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1829,
    end: 1920,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1833,
       end: 1857,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1863,
       end: 1920,
       argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 327,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'o' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'p' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 19,
     end: 327,
     body: [ [Node], [Node], [Node], [Node] ] } }
FunctionDeclaration
0
327
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'o' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'p' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'o' }
Identifier
13
14
o
Node { type: 'Identifier', start: 16, end: 17, name: 'p' }
Identifier
16
17
p
Node {
  type: 'BlockStatement',
  start: 19,
  end: 327,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 25,
       end: 37,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 42,
       end: 59,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'TryStatement',
       start: 64,
       end: 266,
       block: [Node],
       handler: [Node],
       finalizer: null },
     Node {
       type: 'ReturnStatement',
       start: 271,
       end: 325,
       argument: [Node] } ] }
BlockStatement
19
327
[ Node {
    type: 'VariableDeclaration',
    start: 25,
    end: 37,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 42,
    end: 59,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'TryStatement',
    start: 64,
    end: 266,
    block: Node { type: 'BlockStatement', start: 68, end: 182, body: [Array] },
    handler: 
     Node {
       type: 'CatchClause',
       start: 183,
       end: 266,
       param: [Node],
       body: [Node] },
    finalizer: null },
  Node {
    type: 'ReturnStatement',
    start: 271,
    end: 325,
    argument: 
     Node {
       type: 'ObjectExpression',
       start: 278,
       end: 324,
       properties: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 25,
  end: 37,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 29,
       end: 36,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
25
37
[ Node {
    type: 'VariableDeclarator',
    start: 29,
    end: 36,
    id: Node { type: 'Identifier', start: 29, end: 30, name: 'x' },
    init: Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' } } ]
Node {
  type: 'VariableDeclarator',
  start: 29,
  end: 36,
  id: Node { type: 'Identifier', start: 29, end: 30, name: 'x' },
  init: Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' } }
VariableDeclarator
29
36
Node { type: 'Identifier', start: 29, end: 30, name: 'x' }
Identifier
29
30
x
Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' }
Literal
33
36
100
100
var
Node {
  type: 'VariableDeclaration',
  start: 42,
  end: 59,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 46,
       end: 58,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
42
59
[ Node {
    type: 'VariableDeclarator',
    start: 46,
    end: 58,
    id: Node { type: 'Identifier', start: 46, end: 52, name: 'result' },
    init: Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' } } ]
Node {
  type: 'VariableDeclarator',
  start: 46,
  end: 58,
  id: Node { type: 'Identifier', start: 46, end: 52, name: 'result' },
  init: Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' } }
VariableDeclarator
46
58
Node { type: 'Identifier', start: 46, end: 52, name: 'result' }
Identifier
46
52
result
Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' }
Literal
55
58
101
101
var
Node {
  type: 'TryStatement',
  start: 64,
  end: 266,
  block: 
   Node {
     type: 'BlockStatement',
     start: 68,
     end: 182,
     body: [ [Node], [Node], [Node], [Node], [Node], [Node] ] },
  handler: 
   Node {
     type: 'CatchClause',
     start: 183,
     end: 266,
     param: Node { type: 'Identifier', start: 190, end: 191, name: 'e' },
     body: Node { type: 'BlockStatement', start: 193, end: 266, body: [Array] } },
  finalizer: null }
TryStatement
64
266
Node {
  type: 'BlockStatement',
  start: 68,
  end: 182,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 78,
       end: 86,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 95,
       end: 103,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 112,
       end: 125,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 134,
       end: 142,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 151,
       end: 159,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 168,
       end: 176,
       expression: [Node] } ] }
BlockStatement
68
182
[ Node {
    type: 'ExpressionStatement',
    start: 78,
    end: 86,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 78,
       end: 85,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 95,
    end: 103,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 95,
       end: 102,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 112,
    end: 125,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 112,
       end: 124,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 134,
    end: 142,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 134,
       end: 141,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 151,
    end: 159,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 151,
       end: 158,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 168,
    end: 176,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 168,
       end: 175,
       operator: '=',
       left: [Node],
       right: [Node] } } ]
Node {
  type: 'ExpressionStatement',
  start: 78,
  end: 86,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 78,
     end: 85,
     operator: '=',
     left: Node { type: 'Identifier', start: 78, end: 79, name: 'x' },
     right: Node { type: 'Literal', start: 82, end: 85, value: 102, raw: '102' } } }
ExpressionStatement
78
86
Node {
  type: 'AssignmentExpression',
  start: 78,
  end: 85,
  operator: '=',
  left: Node { type: 'Identifier', start: 78, end: 79, name: 'x' },
  right: Node { type: 'Literal', start: 82, end: 85, value: 102, raw: '102' } }
AssignmentExpression
78
85
=
Node { type: 'Identifier', start: 78, end: 79, name: 'x' }
Identifier
78
79
x
Node { type: 'Literal', start: 82, end: 85, value: 102, raw: '102' }
Literal
82
85
102
102
Node {
  type: 'ExpressionStatement',
  start: 95,
  end: 103,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 95,
     end: 102,
     operator: '=',
     left: Node { type: 'Identifier', start: 95, end: 96, name: 'p' },
     right: Node { type: 'Literal', start: 99, end: 102, value: 103, raw: '103' } } }
ExpressionStatement
95
103
Node {
  type: 'AssignmentExpression',
  start: 95,
  end: 102,
  operator: '=',
  left: Node { type: 'Identifier', start: 95, end: 96, name: 'p' },
  right: Node { type: 'Literal', start: 99, end: 102, value: 103, raw: '103' } }
AssignmentExpression
95
102
=
Node { type: 'Identifier', start: 95, end: 96, name: 'p' }
Identifier
95
96
p
Node { type: 'Literal', start: 99, end: 102, value: 103, raw: '103' }
Literal
99
102
103
103
Node {
  type: 'ExpressionStatement',
  start: 112,
  end: 125,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 112,
     end: 124,
     operator: '=',
     left: Node { type: 'Identifier', start: 112, end: 118, name: 'result' },
     right: 
      Node {
        type: 'MemberExpression',
        start: 121,
        end: 124,
        object: [Node],
        property: [Node],
        computed: false } } }
ExpressionStatement
112
125
Node {
  type: 'AssignmentExpression',
  start: 112,
  end: 124,
  operator: '=',
  left: Node { type: 'Identifier', start: 112, end: 118, name: 'result' },
  right: 
   Node {
     type: 'MemberExpression',
     start: 121,
     end: 124,
     object: Node { type: 'Identifier', start: 121, end: 122, name: 'o' },
     property: Node { type: 'Identifier', start: 123, end: 124, name: 'f' },
     computed: false } }
AssignmentExpression
112
124
=
Node { type: 'Identifier', start: 112, end: 118, name: 'result' }
Identifier
112
118
result
Node {
  type: 'MemberExpression',
  start: 121,
  end: 124,
  object: Node { type: 'Identifier', start: 121, end: 122, name: 'o' },
  property: Node { type: 'Identifier', start: 123, end: 124, name: 'f' },
  computed: false }
MemberExpression
121
124
Node { type: 'Identifier', start: 121, end: 122, name: 'o' }
Identifier
121
122
o
Node { type: 'Identifier', start: 123, end: 124, name: 'f' }
Identifier
123
124
f
false
Node {
  type: 'ExpressionStatement',
  start: 134,
  end: 142,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 134,
     end: 141,
     operator: '=',
     left: Node { type: 'Identifier', start: 134, end: 135, name: 'o' },
     right: Node { type: 'Literal', start: 138, end: 141, value: 104, raw: '104' } } }
ExpressionStatement
134
142
Node {
  type: 'AssignmentExpression',
  start: 134,
  end: 141,
  operator: '=',
  left: Node { type: 'Identifier', start: 134, end: 135, name: 'o' },
  right: Node { type: 'Literal', start: 138, end: 141, value: 104, raw: '104' } }
AssignmentExpression
134
141
=
Node { type: 'Identifier', start: 134, end: 135, name: 'o' }
Identifier
134
135
o
Node { type: 'Literal', start: 138, end: 141, value: 104, raw: '104' }
Literal
138
141
104
104
Node {
  type: 'ExpressionStatement',
  start: 151,
  end: 159,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 151,
     end: 158,
     operator: '=',
     left: Node { type: 'Identifier', start: 151, end: 152, name: 'p' },
     right: Node { type: 'Literal', start: 155, end: 158, value: 105, raw: '105' } } }
ExpressionStatement
151
159
Node {
  type: 'AssignmentExpression',
  start: 151,
  end: 158,
  operator: '=',
  left: Node { type: 'Identifier', start: 151, end: 152, name: 'p' },
  right: Node { type: 'Literal', start: 155, end: 158, value: 105, raw: '105' } }
AssignmentExpression
151
158
=
Node { type: 'Identifier', start: 151, end: 152, name: 'p' }
Identifier
151
152
p
Node { type: 'Literal', start: 155, end: 158, value: 105, raw: '105' }
Literal
155
158
105
105
Node {
  type: 'ExpressionStatement',
  start: 168,
  end: 176,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 168,
     end: 175,
     operator: '=',
     left: Node { type: 'Identifier', start: 168, end: 169, name: 'x' },
     right: Node { type: 'Literal', start: 172, end: 175, value: 106, raw: '106' } } }
ExpressionStatement
168
176
Node {
  type: 'AssignmentExpression',
  start: 168,
  end: 175,
  operator: '=',
  left: Node { type: 'Identifier', start: 168, end: 169, name: 'x' },
  right: Node { type: 'Literal', start: 172, end: 175, value: 106, raw: '106' } }
AssignmentExpression
168
175
=
Node { type: 'Identifier', start: 168, end: 169, name: 'x' }
Identifier
168
169
x
Node { type: 'Literal', start: 172, end: 175, value: 106, raw: '106' }
Literal
172
175
106
106
Node {
  type: 'CatchClause',
  start: 183,
  end: 266,
  param: Node { type: 'Identifier', start: 190, end: 191, name: 'e' },
  body: Node { type: 'BlockStatement', start: 193, end: 266, body: [ [Node] ] } }
CatchClause
183
266
Node { type: 'Identifier', start: 190, end: 191, name: 'e' }
Identifier
190
191
e
Node {
  type: 'BlockStatement',
  start: 193,
  end: 266,
  body: 
   [ Node {
       type: 'ReturnStatement',
       start: 203,
       end: 260,
       argument: [Node] } ] }
BlockStatement
193
266
[ Node {
    type: 'ReturnStatement',
    start: 203,
    end: 260,
    argument: 
     Node {
       type: 'ObjectExpression',
       start: 210,
       end: 259,
       properties: [Array] } } ]
Node {
  type: 'ReturnStatement',
  start: 203,
  end: 260,
  argument: 
   Node {
     type: 'ObjectExpression',
     start: 210,
     end: 259,
     properties: [ [Node], [Node] ] } }
ReturnStatement
203
260
Node {
  type: 'ObjectExpression',
  start: 210,
  end: 259,
  properties: 
   [ Node {
       type: 'Property',
       start: 211,
       end: 231,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 233,
       end: 258,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
210
259
[ Node {
    type: 'Property',
    start: 211,
    end: 231,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 211, end: 218, name: 'outcome' },
    value: 
     Node {
       type: 'Literal',
       start: 220,
       end: 231,
       value: 'exception',
       raw: '"exception"' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 233,
    end: 258,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 233, end: 239, name: 'values' },
    value: 
     Node {
       type: 'ArrayExpression',
       start: 241,
       end: 258,
       elements: [Array] },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 211,
  end: 231,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 211, end: 218, name: 'outcome' },
  value: 
   Node {
     type: 'Literal',
     start: 220,
     end: 231,
     value: 'exception',
     raw: '"exception"' },
  kind: 'init' }
Property
211
231
false
false
false
Node { type: 'Identifier', start: 211, end: 218, name: 'outcome' }
Identifier
211
218
outcome
Node {
  type: 'Literal',
  start: 220,
  end: 231,
  value: 'exception',
  raw: '"exception"' }
Literal
220
231
exception
"exception"
init
Node {
  type: 'Property',
  start: 233,
  end: 258,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 233, end: 239, name: 'values' },
  value: 
   Node {
     type: 'ArrayExpression',
     start: 241,
     end: 258,
     elements: [ [Node], [Node], [Node], [Node] ] },
  kind: 'init' }
Property
233
258
false
false
false
Node { type: 'Identifier', start: 233, end: 239, name: 'values' }
Identifier
233
239
values
Node {
  type: 'ArrayExpression',
  start: 241,
  end: 258,
  elements: 
   [ Node { type: 'Identifier', start: 242, end: 243, name: 'o' },
     Node { type: 'Identifier', start: 245, end: 246, name: 'p' },
     Node { type: 'Identifier', start: 248, end: 249, name: 'x' },
     Node { type: 'Identifier', start: 251, end: 257, name: 'result' } ] }
ArrayExpression
241
258
[ Node { type: 'Identifier', start: 242, end: 243, name: 'o' },
  Node { type: 'Identifier', start: 245, end: 246, name: 'p' },
  Node { type: 'Identifier', start: 248, end: 249, name: 'x' },
  Node { type: 'Identifier', start: 251, end: 257, name: 'result' } ]
Node { type: 'Identifier', start: 242, end: 243, name: 'o' }
Identifier
242
243
o
Node { type: 'Identifier', start: 245, end: 246, name: 'p' }
Identifier
245
246
p
Node { type: 'Identifier', start: 248, end: 249, name: 'x' }
Identifier
248
249
x
Node { type: 'Identifier', start: 251, end: 257, name: 'result' }
Identifier
251
257
result
init
null
[+] Exception: ftl-get-by-id-getter-exception.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1861,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 341,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 343,
       end: 357,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 402,
       end: 1162,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 1191,
       end: 1202,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 1203,
       end: 1264,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 1265,
       end: 1294,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 1295,
       end: 1388,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1389,
       end: 1493,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1494,
       end: 1583,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1584,
       end: 1675,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1676,
       end: 1767,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1768,
       end: 1859,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
1861
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 341,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 341, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 343,
    end: 357,
    expression: 
     Node {
       type: 'CallExpression',
       start: 343,
       end: 356,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 402,
    end: 1162,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 407,
       end: 416,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 418,
       end: 428,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 430,
       end: 433,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 435, end: 1162, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 1191,
    end: 1202,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 1203,
    end: 1264,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1203,
       end: 1263,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 1265,
    end: 1294,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 1295,
    end: 1388,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1299,
       end: 1329,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1335,
       end: 1388,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1389,
    end: 1493,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1393,
       end: 1419,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1425,
       end: 1493,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1494,
    end: 1583,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1498,
       end: 1520,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1526,
       end: 1583,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1584,
    end: 1675,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1588,
       end: 1612,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1618,
       end: 1675,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1676,
    end: 1767,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1680,
       end: 1704,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1710,
       end: 1767,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1768,
    end: 1859,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1772,
       end: 1796,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1802,
       end: 1859,
       argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 341,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'o' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'p' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 19,
     end: 341,
     body: [ [Node], [Node], [Node], [Node], [Node] ] } }
FunctionDeclaration
0
341
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'o' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'p' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'o' }
Identifier
13
14
o
Node { type: 'Identifier', start: 16, end: 17, name: 'p' }
Identifier
16
17
p
Node {
  type: 'BlockStatement',
  start: 19,
  end: 341,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 25,
       end: 37,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 42,
       end: 59,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 64,
       end: 77,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'TryStatement',
       start: 82,
       end: 279,
       block: [Node],
       handler: [Node],
       finalizer: null },
     Node {
       type: 'ReturnStatement',
       start: 284,
       end: 339,
       argument: [Node] } ] }
BlockStatement
19
341
[ Node {
    type: 'VariableDeclaration',
    start: 25,
    end: 37,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 42,
    end: 59,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 64,
    end: 77,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'TryStatement',
    start: 82,
    end: 279,
    block: Node { type: 'BlockStatement', start: 86, end: 194, body: [Array] },
    handler: 
     Node {
       type: 'CatchClause',
       start: 195,
       end: 279,
       param: [Node],
       body: [Node] },
    finalizer: null },
  Node {
    type: 'ReturnStatement',
    start: 284,
    end: 339,
    argument: 
     Node {
       type: 'ObjectExpression',
       start: 291,
       end: 338,
       properties: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 25,
  end: 37,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 29,
       end: 36,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
25
37
[ Node {
    type: 'VariableDeclarator',
    start: 29,
    end: 36,
    id: Node { type: 'Identifier', start: 29, end: 30, name: 'x' },
    init: Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' } } ]
Node {
  type: 'VariableDeclarator',
  start: 29,
  end: 36,
  id: Node { type: 'Identifier', start: 29, end: 30, name: 'x' },
  init: Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' } }
VariableDeclarator
29
36
Node { type: 'Identifier', start: 29, end: 30, name: 'x' }
Identifier
29
30
x
Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' }
Literal
33
36
100
100
var
Node {
  type: 'VariableDeclaration',
  start: 42,
  end: 59,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 46,
       end: 58,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
42
59
[ Node {
    type: 'VariableDeclarator',
    start: 46,
    end: 58,
    id: Node { type: 'Identifier', start: 46, end: 52, name: 'result' },
    init: Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' } } ]
Node {
  type: 'VariableDeclarator',
  start: 46,
  end: 58,
  id: Node { type: 'Identifier', start: 46, end: 52, name: 'result' },
  init: Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' } }
VariableDeclarator
46
58
Node { type: 'Identifier', start: 46, end: 52, name: 'result' }
Identifier
46
52
result
Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' }
Literal
55
58
101
101
var
Node {
  type: 'VariableDeclaration',
  start: 64,
  end: 77,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 68,
       end: 76,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
64
77
[ Node {
    type: 'VariableDeclarator',
    start: 68,
    end: 76,
    id: Node { type: 'Identifier', start: 68, end: 70, name: 'pf' },
    init: 
     Node {
       type: 'MemberExpression',
       start: 73,
       end: 76,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'VariableDeclarator',
  start: 68,
  end: 76,
  id: Node { type: 'Identifier', start: 68, end: 70, name: 'pf' },
  init: 
   Node {
     type: 'MemberExpression',
     start: 73,
     end: 76,
     object: Node { type: 'Identifier', start: 73, end: 74, name: 'p' },
     property: Node { type: 'Identifier', start: 75, end: 76, name: 'g' },
     computed: false } }
VariableDeclarator
68
76
Node { type: 'Identifier', start: 68, end: 70, name: 'pf' }
Identifier
68
70
pf
Node {
  type: 'MemberExpression',
  start: 73,
  end: 76,
  object: Node { type: 'Identifier', start: 73, end: 74, name: 'p' },
  property: Node { type: 'Identifier', start: 75, end: 76, name: 'g' },
  computed: false }
MemberExpression
73
76
Node { type: 'Identifier', start: 73, end: 74, name: 'p' }
Identifier
73
74
p
Node { type: 'Identifier', start: 75, end: 76, name: 'g' }
Identifier
75
76
g
false
var
Node {
  type: 'TryStatement',
  start: 82,
  end: 279,
  block: 
   Node {
     type: 'BlockStatement',
     start: 86,
     end: 194,
     body: [ [Node], [Node], [Node], [Node], [Node], [Node] ] },
  handler: 
   Node {
     type: 'CatchClause',
     start: 195,
     end: 279,
     param: Node { type: 'Identifier', start: 202, end: 203, name: 'e' },
     body: Node { type: 'BlockStatement', start: 205, end: 279, body: [Array] } },
  finalizer: null }
TryStatement
82
279
Node {
  type: 'BlockStatement',
  start: 86,
  end: 194,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 96,
       end: 104,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 113,
       end: 118,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 127,
       end: 140,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 149,
       end: 157,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 166,
       end: 171,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 180,
       end: 188,
       expression: [Node] } ] }
BlockStatement
86
194
[ Node {
    type: 'ExpressionStatement',
    start: 96,
    end: 104,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 96,
       end: 103,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 113,
    end: 118,
    expression: 
     Node {
       type: 'UpdateExpression',
       start: 113,
       end: 117,
       operator: '++',
       prefix: false,
       argument: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 127,
    end: 140,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 127,
       end: 139,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 149,
    end: 157,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 149,
       end: 156,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 166,
    end: 171,
    expression: 
     Node {
       type: 'UpdateExpression',
       start: 166,
       end: 170,
       operator: '++',
       prefix: false,
       argument: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 180,
    end: 188,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 180,
       end: 187,
       operator: '=',
       left: [Node],
       right: [Node] } } ]
Node {
  type: 'ExpressionStatement',
  start: 96,
  end: 104,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 96,
     end: 103,
     operator: '=',
     left: Node { type: 'Identifier', start: 96, end: 97, name: 'x' },
     right: Node { type: 'Literal', start: 100, end: 103, value: 102, raw: '102' } } }
ExpressionStatement
96
104
Node {
  type: 'AssignmentExpression',
  start: 96,
  end: 103,
  operator: '=',
  left: Node { type: 'Identifier', start: 96, end: 97, name: 'x' },
  right: Node { type: 'Literal', start: 100, end: 103, value: 102, raw: '102' } }
AssignmentExpression
96
103
=
Node { type: 'Identifier', start: 96, end: 97, name: 'x' }
Identifier
96
97
x
Node { type: 'Literal', start: 100, end: 103, value: 102, raw: '102' }
Literal
100
103
102
102
Node {
  type: 'ExpressionStatement',
  start: 113,
  end: 118,
  expression: 
   Node {
     type: 'UpdateExpression',
     start: 113,
     end: 117,
     operator: '++',
     prefix: false,
     argument: Node { type: 'Identifier', start: 113, end: 115, name: 'pf' } } }
ExpressionStatement
113
118
Node {
  type: 'UpdateExpression',
  start: 113,
  end: 117,
  operator: '++',
  prefix: false,
  argument: Node { type: 'Identifier', start: 113, end: 115, name: 'pf' } }
UpdateExpression
113
117
++
false
Node { type: 'Identifier', start: 113, end: 115, name: 'pf' }
Identifier
113
115
pf
Node {
  type: 'ExpressionStatement',
  start: 127,
  end: 140,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 127,
     end: 139,
     operator: '=',
     left: Node { type: 'Identifier', start: 127, end: 133, name: 'result' },
     right: 
      Node {
        type: 'MemberExpression',
        start: 136,
        end: 139,
        object: [Node],
        property: [Node],
        computed: false } } }
ExpressionStatement
127
140
Node {
  type: 'AssignmentExpression',
  start: 127,
  end: 139,
  operator: '=',
  left: Node { type: 'Identifier', start: 127, end: 133, name: 'result' },
  right: 
   Node {
     type: 'MemberExpression',
     start: 136,
     end: 139,
     object: Node { type: 'Identifier', start: 136, end: 137, name: 'o' },
     property: Node { type: 'Identifier', start: 138, end: 139, name: 'f' },
     computed: false } }
AssignmentExpression
127
139
=
Node { type: 'Identifier', start: 127, end: 133, name: 'result' }
Identifier
127
133
result
Node {
  type: 'MemberExpression',
  start: 136,
  end: 139,
  object: Node { type: 'Identifier', start: 136, end: 137, name: 'o' },
  property: Node { type: 'Identifier', start: 138, end: 139, name: 'f' },
  computed: false }
MemberExpression
136
139
Node { type: 'Identifier', start: 136, end: 137, name: 'o' }
Identifier
136
137
o
Node { type: 'Identifier', start: 138, end: 139, name: 'f' }
Identifier
138
139
f
false
Node {
  type: 'ExpressionStatement',
  start: 149,
  end: 157,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 149,
     end: 156,
     operator: '=',
     left: Node { type: 'Identifier', start: 149, end: 150, name: 'o' },
     right: Node { type: 'Literal', start: 153, end: 156, value: 104, raw: '104' } } }
ExpressionStatement
149
157
Node {
  type: 'AssignmentExpression',
  start: 149,
  end: 156,
  operator: '=',
  left: Node { type: 'Identifier', start: 149, end: 150, name: 'o' },
  right: Node { type: 'Literal', start: 153, end: 156, value: 104, raw: '104' } }
AssignmentExpression
149
156
=
Node { type: 'Identifier', start: 149, end: 150, name: 'o' }
Identifier
149
150
o
Node { type: 'Literal', start: 153, end: 156, value: 104, raw: '104' }
Literal
153
156
104
104
Node {
  type: 'ExpressionStatement',
  start: 166,
  end: 171,
  expression: 
   Node {
     type: 'UpdateExpression',
     start: 166,
     end: 170,
     operator: '++',
     prefix: false,
     argument: Node { type: 'Identifier', start: 166, end: 168, name: 'pf' } } }
ExpressionStatement
166
171
Node {
  type: 'UpdateExpression',
  start: 166,
  end: 170,
  operator: '++',
  prefix: false,
  argument: Node { type: 'Identifier', start: 166, end: 168, name: 'pf' } }
UpdateExpression
166
170
++
false
Node { type: 'Identifier', start: 166, end: 168, name: 'pf' }
Identifier
166
168
pf
Node {
  type: 'ExpressionStatement',
  start: 180,
  end: 188,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 180,
     end: 187,
     operator: '=',
     left: Node { type: 'Identifier', start: 180, end: 181, name: 'x' },
     right: Node { type: 'Literal', start: 184, end: 187, value: 106, raw: '106' } } }
ExpressionStatement
180
188
Node {
  type: 'AssignmentExpression',
  start: 180,
  end: 187,
  operator: '=',
  left: Node { type: 'Identifier', start: 180, end: 181, name: 'x' },
  right: Node { type: 'Literal', start: 184, end: 187, value: 106, raw: '106' } }
AssignmentExpression
180
187
=
Node { type: 'Identifier', start: 180, end: 181, name: 'x' }
Identifier
180
181
x
Node { type: 'Literal', start: 184, end: 187, value: 106, raw: '106' }
Literal
184
187
106
106
Node {
  type: 'CatchClause',
  start: 195,
  end: 279,
  param: Node { type: 'Identifier', start: 202, end: 203, name: 'e' },
  body: Node { type: 'BlockStatement', start: 205, end: 279, body: [ [Node] ] } }
CatchClause
195
279
Node { type: 'Identifier', start: 202, end: 203, name: 'e' }
Identifier
202
203
e
Node {
  type: 'BlockStatement',
  start: 205,
  end: 279,
  body: 
   [ Node {
       type: 'ReturnStatement',
       start: 215,
       end: 273,
       argument: [Node] } ] }
BlockStatement
205
279
[ Node {
    type: 'ReturnStatement',
    start: 215,
    end: 273,
    argument: 
     Node {
       type: 'ObjectExpression',
       start: 222,
       end: 272,
       properties: [Array] } } ]
Node {
  type: 'ReturnStatement',
  start: 215,
  end: 273,
  argument: 
   Node {
     type: 'ObjectExpression',
     start: 222,
     end: 272,
     properties: [ [Node], [Node] ] } }
ReturnStatement
215
273
Node {
  type: 'ObjectExpression',
  start: 222,
  end: 272,
  properties: 
   [ Node {
       type: 'Property',
       start: 223,
       end: 243,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 245,
       end: 271,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
222
272
[ Node {
    type: 'Property',
    start: 223,
    end: 243,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 223, end: 230, name: 'outcome' },
    value: 
     Node {
       type: 'Literal',
       start: 232,
       end: 243,
       value: 'exception',
       raw: '"exception"' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 245,
    end: 271,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 245, end: 251, name: 'values' },
    value: 
     Node {
       type: 'ArrayExpression',
       start: 253,
       end: 271,
       elements: [Array] },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 223,
  end: 243,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 223, end: 230, name: 'outcome' },
  value: 
   Node {
     type: 'Literal',
     start: 232,
     end: 243,
     value: 'exception',
     raw: '"exception"' },
  kind: 'init' }
Property
223
243
false
false
false
Node { type: 'Identifier', start: 223, end: 230, name: 'outcome' }
Identifier
223
230
outcome
Node {
  type: 'Literal',
  start: 232,
  end: 243,
  value: 'exception',
  raw: '"exception"' }
Literal
232
243
exception
"exception"
init
Node {
  type: 'Property',
  start: 245,
  end: 271,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 245, end: 251, name: 'values' },
  value: 
   Node {
     type: 'ArrayExpression',
     start: 253,
     end: 271,
     elements: [ [Node], [Node], [Node], [Node] ] },
  kind: 'init' }
Property
245
271
false
false
false
Node { type: 'Identifier', start: 245, end: 251, name: 'values' }
Identifier
245
251
values
Node {
  type: 'ArrayExpression',
  start: 253,
  end: 271,
  elements: 
   [ Node { type: 'Identifier', start: 254, end: 255, name: 'o' },
     Node { type: 'Identifier', start: 257, end: 259, name: 'pf' },
     Node { type: 'Identifier', start: 261, end: 262, name: 'x' },
     Node { type: 'Identifier', start: 264, end: 270, name: 'result' } ] }
ArrayExpression
253
271
[ Node { type: 'Identifier', start: 254, end: 255, name: 'o' },
  Node { type: 'Identifier', start: 257, end: 259, name: 'pf' },
  Node { type: 'Identifier', start: 261, end: 262, name: 'x' },
  Node { type: 'Identifier', start: 264, end: 270, name: 'result' } ]
Node { type: 'Identifier', start: 254, end: 255, name: 'o' }
Identifier
254
255
o
Node { type: 'Identifier', start: 257, end: 259, name: 'pf' }
Identifier
257
259
pf
Node { type: 'Identifier', start: 261, end: 262, name: 'x' }
Identifier
261
262
x
Node { type: 'Identifier', start: 264, end: 270, name: 'result' }
Identifier
264
270
result
init
null
[+] Exception: ftl-get-by-id-slow-exception-interesting-live-state.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1400,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 203,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 205,
       end: 219,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 264,
       end: 1015,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 1044,
       end: 1055,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'TryStatement',
       start: 1056,
       end: 1305,
       block: [Node],
       handler: [Node],
       finalizer: null },
     Node {
       type: 'IfStatement',
       start: 1306,
       end: 1399,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
1400
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 203,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 203, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 205,
    end: 219,
    expression: 
     Node {
       type: 'CallExpression',
       start: 205,
       end: 218,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 264,
    end: 1015,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 269,
       end: 278,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 280,
       end: 290,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 292,
       end: 295,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 297, end: 1015, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 1044,
    end: 1055,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'TryStatement',
    start: 1056,
    end: 1305,
    block: Node { type: 'BlockStatement', start: 1060, end: 1179, body: [Array] },
    handler: 
     Node {
       type: 'CatchClause',
       start: 1180,
       end: 1305,
       param: [Node],
       body: [Node] },
    finalizer: null },
  Node {
    type: 'IfStatement',
    start: 1306,
    end: 1399,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1310,
       end: 1340,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1346,
       end: 1399,
       argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 203,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'o' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'p' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 19,
     end: 203,
     body: 
      [ [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node] ] } }
FunctionDeclaration
0
203
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'o' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'p' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'o' }
Identifier
13
14
o
Node { type: 'Identifier', start: 16, end: 17, name: 'p' }
Identifier
16
17
p
Node {
  type: 'BlockStatement',
  start: 19,
  end: 203,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 25,
       end: 37,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 42,
       end: 59,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 64,
       end: 72,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 77,
       end: 85,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 90,
       end: 103,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 108,
       end: 116,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 121,
       end: 129,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 134,
       end: 142,
       expression: [Node] },
     Node {
       type: 'ReturnStatement',
       start: 147,
       end: 201,
       argument: [Node] } ] }
BlockStatement
19
203
[ Node {
    type: 'VariableDeclaration',
    start: 25,
    end: 37,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 42,
    end: 59,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 64,
    end: 72,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 64,
       end: 71,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 77,
    end: 85,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 77,
       end: 84,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 90,
    end: 103,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 90,
       end: 102,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 108,
    end: 116,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 108,
       end: 115,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 121,
    end: 129,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 121,
       end: 128,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 134,
    end: 142,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 134,
       end: 141,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ReturnStatement',
    start: 147,
    end: 201,
    argument: 
     Node {
       type: 'ObjectExpression',
       start: 154,
       end: 200,
       properties: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 25,
  end: 37,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 29,
       end: 36,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
25
37
[ Node {
    type: 'VariableDeclarator',
    start: 29,
    end: 36,
    id: Node { type: 'Identifier', start: 29, end: 30, name: 'x' },
    init: Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' } } ]
Node {
  type: 'VariableDeclarator',
  start: 29,
  end: 36,
  id: Node { type: 'Identifier', start: 29, end: 30, name: 'x' },
  init: Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' } }
VariableDeclarator
29
36
Node { type: 'Identifier', start: 29, end: 30, name: 'x' }
Identifier
29
30
x
Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' }
Literal
33
36
100
100
var
Node {
  type: 'VariableDeclaration',
  start: 42,
  end: 59,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 46,
       end: 58,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
42
59
[ Node {
    type: 'VariableDeclarator',
    start: 46,
    end: 58,
    id: Node { type: 'Identifier', start: 46, end: 52, name: 'result' },
    init: Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' } } ]
Node {
  type: 'VariableDeclarator',
  start: 46,
  end: 58,
  id: Node { type: 'Identifier', start: 46, end: 52, name: 'result' },
  init: Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' } }
VariableDeclarator
46
58
Node { type: 'Identifier', start: 46, end: 52, name: 'result' }
Identifier
46
52
result
Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' }
Literal
55
58
101
101
var
Node {
  type: 'ExpressionStatement',
  start: 64,
  end: 72,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 64,
     end: 71,
     operator: '=',
     left: Node { type: 'Identifier', start: 64, end: 65, name: 'x' },
     right: Node { type: 'Literal', start: 68, end: 71, value: 102, raw: '102' } } }
ExpressionStatement
64
72
Node {
  type: 'AssignmentExpression',
  start: 64,
  end: 71,
  operator: '=',
  left: Node { type: 'Identifier', start: 64, end: 65, name: 'x' },
  right: Node { type: 'Literal', start: 68, end: 71, value: 102, raw: '102' } }
AssignmentExpression
64
71
=
Node { type: 'Identifier', start: 64, end: 65, name: 'x' }
Identifier
64
65
x
Node { type: 'Literal', start: 68, end: 71, value: 102, raw: '102' }
Literal
68
71
102
102
Node {
  type: 'ExpressionStatement',
  start: 77,
  end: 85,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 77,
     end: 84,
     operator: '=',
     left: Node { type: 'Identifier', start: 77, end: 78, name: 'p' },
     right: Node { type: 'Literal', start: 81, end: 84, value: 103, raw: '103' } } }
ExpressionStatement
77
85
Node {
  type: 'AssignmentExpression',
  start: 77,
  end: 84,
  operator: '=',
  left: Node { type: 'Identifier', start: 77, end: 78, name: 'p' },
  right: Node { type: 'Literal', start: 81, end: 84, value: 103, raw: '103' } }
AssignmentExpression
77
84
=
Node { type: 'Identifier', start: 77, end: 78, name: 'p' }
Identifier
77
78
p
Node { type: 'Literal', start: 81, end: 84, value: 103, raw: '103' }
Literal
81
84
103
103
Node {
  type: 'ExpressionStatement',
  start: 90,
  end: 103,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 90,
     end: 102,
     operator: '=',
     left: Node { type: 'Identifier', start: 90, end: 96, name: 'result' },
     right: 
      Node {
        type: 'MemberExpression',
        start: 99,
        end: 102,
        object: [Node],
        property: [Node],
        computed: false } } }
ExpressionStatement
90
103
Node {
  type: 'AssignmentExpression',
  start: 90,
  end: 102,
  operator: '=',
  left: Node { type: 'Identifier', start: 90, end: 96, name: 'result' },
  right: 
   Node {
     type: 'MemberExpression',
     start: 99,
     end: 102,
     object: Node { type: 'Identifier', start: 99, end: 100, name: 'o' },
     property: Node { type: 'Identifier', start: 101, end: 102, name: 'f' },
     computed: false } }
AssignmentExpression
90
102
=
Node { type: 'Identifier', start: 90, end: 96, name: 'result' }
Identifier
90
96
result
Node {
  type: 'MemberExpression',
  start: 99,
  end: 102,
  object: Node { type: 'Identifier', start: 99, end: 100, name: 'o' },
  property: Node { type: 'Identifier', start: 101, end: 102, name: 'f' },
  computed: false }
MemberExpression
99
102
Node { type: 'Identifier', start: 99, end: 100, name: 'o' }
Identifier
99
100
o
Node { type: 'Identifier', start: 101, end: 102, name: 'f' }
Identifier
101
102
f
false
Node {
  type: 'ExpressionStatement',
  start: 108,
  end: 116,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 108,
     end: 115,
     operator: '=',
     left: Node { type: 'Identifier', start: 108, end: 109, name: 'o' },
     right: Node { type: 'Literal', start: 112, end: 115, value: 104, raw: '104' } } }
ExpressionStatement
108
116
Node {
  type: 'AssignmentExpression',
  start: 108,
  end: 115,
  operator: '=',
  left: Node { type: 'Identifier', start: 108, end: 109, name: 'o' },
  right: Node { type: 'Literal', start: 112, end: 115, value: 104, raw: '104' } }
AssignmentExpression
108
115
=
Node { type: 'Identifier', start: 108, end: 109, name: 'o' }
Identifier
108
109
o
Node { type: 'Literal', start: 112, end: 115, value: 104, raw: '104' }
Literal
112
115
104
104
Node {
  type: 'ExpressionStatement',
  start: 121,
  end: 129,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 121,
     end: 128,
     operator: '=',
     left: Node { type: 'Identifier', start: 121, end: 122, name: 'p' },
     right: Node { type: 'Literal', start: 125, end: 128, value: 105, raw: '105' } } }
ExpressionStatement
121
129
Node {
  type: 'AssignmentExpression',
  start: 121,
  end: 128,
  operator: '=',
  left: Node { type: 'Identifier', start: 121, end: 122, name: 'p' },
  right: Node { type: 'Literal', start: 125, end: 128, value: 105, raw: '105' } }
AssignmentExpression
121
128
=
Node { type: 'Identifier', start: 121, end: 122, name: 'p' }
Identifier
121
122
p
Node { type: 'Literal', start: 125, end: 128, value: 105, raw: '105' }
Literal
125
128
105
105
Node {
  type: 'ExpressionStatement',
  start: 134,
  end: 142,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 134,
     end: 141,
     operator: '=',
     left: Node { type: 'Identifier', start: 134, end: 135, name: 'x' },
     right: Node { type: 'Literal', start: 138, end: 141, value: 106, raw: '106' } } }
ExpressionStatement
134
142
Node {
  type: 'AssignmentExpression',
  start: 134,
  end: 141,
  operator: '=',
  left: Node { type: 'Identifier', start: 134, end: 135, name: 'x' },
  right: Node { type: 'Literal', start: 138, end: 141, value: 106, raw: '106' } }
AssignmentExpression
134
141
=
Node { type: 'Identifier', start: 134, end: 135, name: 'x' }
Identifier
134
135
x
Node { type: 'Literal', start: 138, end: 141, value: 106, raw: '106' }
Literal
138
141
106
106
Node {
  type: 'ReturnStatement',
  start: 147,
  end: 201,
  argument: 
   Node {
     type: 'ObjectExpression',
     start: 154,
     end: 200,
     properties: [ [Node], [Node] ] } }
ReturnStatement
147
201
Node {
  type: 'ObjectExpression',
  start: 154,
  end: 200,
  properties: 
   [ Node {
       type: 'Property',
       start: 155,
       end: 172,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 174,
       end: 199,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
154
200
[ Node {
    type: 'Property',
    start: 155,
    end: 172,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 155, end: 162, name: 'outcome' },
    value: 
     Node {
       type: 'Literal',
       start: 164,
       end: 172,
       value: 'return',
       raw: '"return"' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 174,
    end: 199,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 174, end: 180, name: 'values' },
    value: 
     Node {
       type: 'ArrayExpression',
       start: 182,
       end: 199,
       elements: [Array] },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 155,
  end: 172,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 155, end: 162, name: 'outcome' },
  value: 
   Node {
     type: 'Literal',
     start: 164,
     end: 172,
     value: 'return',
     raw: '"return"' },
  kind: 'init' }
Property
155
172
false
false
false
Node { type: 'Identifier', start: 155, end: 162, name: 'outcome' }
Identifier
155
162
outcome
Node {
  type: 'Literal',
  start: 164,
  end: 172,
  value: 'return',
  raw: '"return"' }
Literal
164
172
return
"return"
init
Node {
  type: 'Property',
  start: 174,
  end: 199,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 174, end: 180, name: 'values' },
  value: 
   Node {
     type: 'ArrayExpression',
     start: 182,
     end: 199,
     elements: [ [Node], [Node], [Node], [Node] ] },
  kind: 'init' }
Property
174
199
false
false
false
Node { type: 'Identifier', start: 174, end: 180, name: 'values' }
Identifier
174
180
values
Node {
  type: 'ArrayExpression',
  start: 182,
  end: 199,
  elements: 
   [ Node { type: 'Identifier', start: 183, end: 184, name: 'o' },
     Node { type: 'Identifier', start: 186, end: 187, name: 'p' },
     Node { type: 'Identifier', start: 189, end: 190, name: 'x' },
     Node { type: 'Identifier', start: 192, end: 198, name: 'result' } ] }
ArrayExpression
182
199
[ Node { type: 'Identifier', start: 183, end: 184, name: 'o' },
  Node { type: 'Identifier', start: 186, end: 187, name: 'p' },
  Node { type: 'Identifier', start: 189, end: 190, name: 'x' },
  Node { type: 'Identifier', start: 192, end: 198, name: 'result' } ]
Node { type: 'Identifier', start: 183, end: 184, name: 'o' }
Identifier
183
184
o
Node { type: 'Identifier', start: 186, end: 187, name: 'p' }
Identifier
186
187
p
Node { type: 'Identifier', start: 189, end: 190, name: 'x' }
Identifier
189
190
x
Node { type: 'Identifier', start: 192, end: 198, name: 'result' }
Identifier
192
198
result
init
Node {
  type: 'ExpressionStatement',
  start: 205,
  end: 219,
  expression: 
   Node {
     type: 'CallExpression',
     start: 205,
     end: 218,
     callee: Node { type: 'Identifier', start: 205, end: 213, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
205
219
Node {
  type: 'CallExpression',
  start: 205,
  end: 218,
  callee: Node { type: 'Identifier', start: 205, end: 213, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 214, end: 217, name: 'foo' } ] }
CallExpression
205
218
Node { type: 'Identifier', start: 205, end: 213, name: 'noInline' }
Identifier
205
213
noInline
[ Node { type: 'Identifier', start: 214, end: 217, name: 'foo' } ]
Node { type: 'Identifier', start: 214, end: 217, name: 'foo' }
Identifier
214
217
foo
Node {
  type: 'ForStatement',
  start: 264,
  end: 1015,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 269,
     end: 278,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 280,
     end: 290,
     left: Node { type: 'Identifier', start: 280, end: 281, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 284,
        end: 290,
        value: 100000,
        raw: '100000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 292,
     end: 295,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 294, end: 295, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 297,
     end: 1015,
     body: 
      [ [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node] ] } }
ForStatement
264
1015
Node {
  type: 'VariableDeclaration',
  start: 269,
  end: 278,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 273,
       end: 278,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
269
278
[ Node {
    type: 'VariableDeclarator',
    start: 273,
    end: 278,
    id: Node { type: 'Identifier', start: 273, end: 274, name: 'i' },
    init: Node { type: 'Literal', start: 277, end: 278, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 273,
  end: 278,
  id: Node { type: 'Identifier', start: 273, end: 274, name: 'i' },
  init: Node { type: 'Literal', start: 277, end: 278, value: 0, raw: '0' } }
VariableDeclarator
273
278
Node { type: 'Identifier', start: 273, end: 274, name: 'i' }
Identifier
273
274
i
Node { type: 'Literal', start: 277, end: 278, value: 0, raw: '0' }
Literal
277
278
0
0
var
Node {
  type: 'BinaryExpression',
  start: 280,
  end: 290,
  left: Node { type: 'Identifier', start: 280, end: 281, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 284,
     end: 290,
     value: 100000,
     raw: '100000' } }
BinaryExpression
280
290
Node { type: 'Identifier', start: 280, end: 281, name: 'i' }
Identifier
280
281
i
<
Node {
  type: 'Literal',
  start: 284,
  end: 290,
  value: 100000,
  raw: '100000' }
Literal
284
290
100000
100000
Node {
  type: 'UpdateExpression',
  start: 292,
  end: 295,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 294, end: 295, name: 'i' } }
UpdateExpression
292
295
++
true
Node { type: 'Identifier', start: 294, end: 295, name: 'i' }
Identifier
294
295
i
Node {
  type: 'BlockStatement',
  start: 297,
  end: 1015,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 303,
       end: 309,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 314,
       end: 326,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 331,
       end: 346,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 375,
       end: 395,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 400,
       end: 495,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 500,
       end: 609,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 614,
       end: 710,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 715,
       end: 811,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 816,
       end: 912,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 917,
       end: 1013,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
297
1015
[ Node {
    type: 'VariableDeclaration',
    start: 303,
    end: 309,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 314,
    end: 326,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 314,
       end: 325,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 331,
    end: 346,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 331,
       end: 345,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'VariableDeclaration',
    start: 375,
    end: 395,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 400,
    end: 495,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 404,
       end: 431,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 441, end: 495, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 500,
    end: 609,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 504,
       end: 530,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 540, end: 609, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 614,
    end: 710,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 618,
       end: 642,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 652, end: 710, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 715,
    end: 811,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 719,
       end: 743,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 753, end: 811, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 816,
    end: 912,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 820,
       end: 844,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 854, end: 912, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 917,
    end: 1013,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 921,
       end: 945,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 955,
       end: 1013,
       argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 303,
  end: 309,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 307,
       end: 308,
       id: [Node],
       init: null } ],
  kind: 'var' }
VariableDeclaration
303
309
[ Node {
    type: 'VariableDeclarator',
    start: 307,
    end: 308,
    id: Node { type: 'Identifier', start: 307, end: 308, name: 'o' },
    init: null } ]
Node {
  type: 'VariableDeclarator',
  start: 307,
  end: 308,
  id: Node { type: 'Identifier', start: 307, end: 308, name: 'o' },
  init: null }
VariableDeclarator
307
308
Node { type: 'Identifier', start: 307, end: 308, name: 'o' }
Identifier
307
308
o
null
[+] Exception: ftl-get-by-id-slow-exception-no-catch.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1834,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 327,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 329,
       end: 343,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 388,
       end: 1139,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 1168,
       end: 1179,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 1180,
       end: 1241,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 1242,
       end: 1267,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 1268,
       end: 1361,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1362,
       end: 1466,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1467,
       end: 1556,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1557,
       end: 1648,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1649,
       end: 1740,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1741,
       end: 1832,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
1834
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 327,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 327, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 329,
    end: 343,
    expression: 
     Node {
       type: 'CallExpression',
       start: 329,
       end: 342,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 388,
    end: 1139,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 393,
       end: 402,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 404,
       end: 414,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 416,
       end: 419,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 421, end: 1139, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 1168,
    end: 1179,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 1180,
    end: 1241,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1180,
       end: 1240,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 1242,
    end: 1267,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 1268,
    end: 1361,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1272,
       end: 1302,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1308,
       end: 1361,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1362,
    end: 1466,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1366,
       end: 1392,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1398,
       end: 1466,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1467,
    end: 1556,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1471,
       end: 1493,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1499,
       end: 1556,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1557,
    end: 1648,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1561,
       end: 1585,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1591,
       end: 1648,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1649,
    end: 1740,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1653,
       end: 1677,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1683,
       end: 1740,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1741,
    end: 1832,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1745,
       end: 1769,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1775,
       end: 1832,
       argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 327,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'o' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'p' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 19,
     end: 327,
     body: [ [Node], [Node], [Node], [Node] ] } }
FunctionDeclaration
0
327
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'o' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'p' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'o' }
Identifier
13
14
o
Node { type: 'Identifier', start: 16, end: 17, name: 'p' }
Identifier
16
17
p
Node {
  type: 'BlockStatement',
  start: 19,
  end: 327,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 25,
       end: 37,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 42,
       end: 59,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'TryStatement',
       start: 64,
       end: 266,
       block: [Node],
       handler: [Node],
       finalizer: null },
     Node {
       type: 'ReturnStatement',
       start: 271,
       end: 325,
       argument: [Node] } ] }
BlockStatement
19
327
[ Node {
    type: 'VariableDeclaration',
    start: 25,
    end: 37,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 42,
    end: 59,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'TryStatement',
    start: 64,
    end: 266,
    block: Node { type: 'BlockStatement', start: 68, end: 182, body: [Array] },
    handler: 
     Node {
       type: 'CatchClause',
       start: 183,
       end: 266,
       param: [Node],
       body: [Node] },
    finalizer: null },
  Node {
    type: 'ReturnStatement',
    start: 271,
    end: 325,
    argument: 
     Node {
       type: 'ObjectExpression',
       start: 278,
       end: 324,
       properties: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 25,
  end: 37,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 29,
       end: 36,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
25
37
[ Node {
    type: 'VariableDeclarator',
    start: 29,
    end: 36,
    id: Node { type: 'Identifier', start: 29, end: 30, name: 'x' },
    init: Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' } } ]
Node {
  type: 'VariableDeclarator',
  start: 29,
  end: 36,
  id: Node { type: 'Identifier', start: 29, end: 30, name: 'x' },
  init: Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' } }
VariableDeclarator
29
36
Node { type: 'Identifier', start: 29, end: 30, name: 'x' }
Identifier
29
30
x
Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' }
Literal
33
36
100
100
var
Node {
  type: 'VariableDeclaration',
  start: 42,
  end: 59,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 46,
       end: 58,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
42
59
[ Node {
    type: 'VariableDeclarator',
    start: 46,
    end: 58,
    id: Node { type: 'Identifier', start: 46, end: 52, name: 'result' },
    init: Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' } } ]
Node {
  type: 'VariableDeclarator',
  start: 46,
  end: 58,
  id: Node { type: 'Identifier', start: 46, end: 52, name: 'result' },
  init: Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' } }
VariableDeclarator
46
58
Node { type: 'Identifier', start: 46, end: 52, name: 'result' }
Identifier
46
52
result
Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' }
Literal
55
58
101
101
var
Node {
  type: 'TryStatement',
  start: 64,
  end: 266,
  block: 
   Node {
     type: 'BlockStatement',
     start: 68,
     end: 182,
     body: [ [Node], [Node], [Node], [Node], [Node], [Node] ] },
  handler: 
   Node {
     type: 'CatchClause',
     start: 183,
     end: 266,
     param: Node { type: 'Identifier', start: 190, end: 191, name: 'e' },
     body: Node { type: 'BlockStatement', start: 193, end: 266, body: [Array] } },
  finalizer: null }
TryStatement
64
266
Node {
  type: 'BlockStatement',
  start: 68,
  end: 182,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 78,
       end: 86,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 95,
       end: 103,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 112,
       end: 125,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 134,
       end: 142,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 151,
       end: 159,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 168,
       end: 176,
       expression: [Node] } ] }
BlockStatement
68
182
[ Node {
    type: 'ExpressionStatement',
    start: 78,
    end: 86,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 78,
       end: 85,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 95,
    end: 103,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 95,
       end: 102,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 112,
    end: 125,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 112,
       end: 124,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 134,
    end: 142,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 134,
       end: 141,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 151,
    end: 159,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 151,
       end: 158,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 168,
    end: 176,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 168,
       end: 175,
       operator: '=',
       left: [Node],
       right: [Node] } } ]
Node {
  type: 'ExpressionStatement',
  start: 78,
  end: 86,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 78,
     end: 85,
     operator: '=',
     left: Node { type: 'Identifier', start: 78, end: 79, name: 'x' },
     right: Node { type: 'Literal', start: 82, end: 85, value: 102, raw: '102' } } }
ExpressionStatement
78
86
Node {
  type: 'AssignmentExpression',
  start: 78,
  end: 85,
  operator: '=',
  left: Node { type: 'Identifier', start: 78, end: 79, name: 'x' },
  right: Node { type: 'Literal', start: 82, end: 85, value: 102, raw: '102' } }
AssignmentExpression
78
85
=
Node { type: 'Identifier', start: 78, end: 79, name: 'x' }
Identifier
78
79
x
Node { type: 'Literal', start: 82, end: 85, value: 102, raw: '102' }
Literal
82
85
102
102
Node {
  type: 'ExpressionStatement',
  start: 95,
  end: 103,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 95,
     end: 102,
     operator: '=',
     left: Node { type: 'Identifier', start: 95, end: 96, name: 'p' },
     right: Node { type: 'Literal', start: 99, end: 102, value: 103, raw: '103' } } }
ExpressionStatement
95
103
Node {
  type: 'AssignmentExpression',
  start: 95,
  end: 102,
  operator: '=',
  left: Node { type: 'Identifier', start: 95, end: 96, name: 'p' },
  right: Node { type: 'Literal', start: 99, end: 102, value: 103, raw: '103' } }
AssignmentExpression
95
102
=
Node { type: 'Identifier', start: 95, end: 96, name: 'p' }
Identifier
95
96
p
Node { type: 'Literal', start: 99, end: 102, value: 103, raw: '103' }
Literal
99
102
103
103
Node {
  type: 'ExpressionStatement',
  start: 112,
  end: 125,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 112,
     end: 124,
     operator: '=',
     left: Node { type: 'Identifier', start: 112, end: 118, name: 'result' },
     right: 
      Node {
        type: 'MemberExpression',
        start: 121,
        end: 124,
        object: [Node],
        property: [Node],
        computed: false } } }
ExpressionStatement
112
125
Node {
  type: 'AssignmentExpression',
  start: 112,
  end: 124,
  operator: '=',
  left: Node { type: 'Identifier', start: 112, end: 118, name: 'result' },
  right: 
   Node {
     type: 'MemberExpression',
     start: 121,
     end: 124,
     object: Node { type: 'Identifier', start: 121, end: 122, name: 'o' },
     property: Node { type: 'Identifier', start: 123, end: 124, name: 'f' },
     computed: false } }
AssignmentExpression
112
124
=
Node { type: 'Identifier', start: 112, end: 118, name: 'result' }
Identifier
112
118
result
Node {
  type: 'MemberExpression',
  start: 121,
  end: 124,
  object: Node { type: 'Identifier', start: 121, end: 122, name: 'o' },
  property: Node { type: 'Identifier', start: 123, end: 124, name: 'f' },
  computed: false }
MemberExpression
121
124
Node { type: 'Identifier', start: 121, end: 122, name: 'o' }
Identifier
121
122
o
Node { type: 'Identifier', start: 123, end: 124, name: 'f' }
Identifier
123
124
f
false
Node {
  type: 'ExpressionStatement',
  start: 134,
  end: 142,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 134,
     end: 141,
     operator: '=',
     left: Node { type: 'Identifier', start: 134, end: 135, name: 'o' },
     right: Node { type: 'Literal', start: 138, end: 141, value: 104, raw: '104' } } }
ExpressionStatement
134
142
Node {
  type: 'AssignmentExpression',
  start: 134,
  end: 141,
  operator: '=',
  left: Node { type: 'Identifier', start: 134, end: 135, name: 'o' },
  right: Node { type: 'Literal', start: 138, end: 141, value: 104, raw: '104' } }
AssignmentExpression
134
141
=
Node { type: 'Identifier', start: 134, end: 135, name: 'o' }
Identifier
134
135
o
Node { type: 'Literal', start: 138, end: 141, value: 104, raw: '104' }
Literal
138
141
104
104
Node {
  type: 'ExpressionStatement',
  start: 151,
  end: 159,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 151,
     end: 158,
     operator: '=',
     left: Node { type: 'Identifier', start: 151, end: 152, name: 'p' },
     right: Node { type: 'Literal', start: 155, end: 158, value: 105, raw: '105' } } }
ExpressionStatement
151
159
Node {
  type: 'AssignmentExpression',
  start: 151,
  end: 158,
  operator: '=',
  left: Node { type: 'Identifier', start: 151, end: 152, name: 'p' },
  right: Node { type: 'Literal', start: 155, end: 158, value: 105, raw: '105' } }
AssignmentExpression
151
158
=
Node { type: 'Identifier', start: 151, end: 152, name: 'p' }
Identifier
151
152
p
Node { type: 'Literal', start: 155, end: 158, value: 105, raw: '105' }
Literal
155
158
105
105
Node {
  type: 'ExpressionStatement',
  start: 168,
  end: 176,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 168,
     end: 175,
     operator: '=',
     left: Node { type: 'Identifier', start: 168, end: 169, name: 'x' },
     right: Node { type: 'Literal', start: 172, end: 175, value: 106, raw: '106' } } }
ExpressionStatement
168
176
Node {
  type: 'AssignmentExpression',
  start: 168,
  end: 175,
  operator: '=',
  left: Node { type: 'Identifier', start: 168, end: 169, name: 'x' },
  right: Node { type: 'Literal', start: 172, end: 175, value: 106, raw: '106' } }
AssignmentExpression
168
175
=
Node { type: 'Identifier', start: 168, end: 169, name: 'x' }
Identifier
168
169
x
Node { type: 'Literal', start: 172, end: 175, value: 106, raw: '106' }
Literal
172
175
106
106
Node {
  type: 'CatchClause',
  start: 183,
  end: 266,
  param: Node { type: 'Identifier', start: 190, end: 191, name: 'e' },
  body: Node { type: 'BlockStatement', start: 193, end: 266, body: [ [Node] ] } }
CatchClause
183
266
Node { type: 'Identifier', start: 190, end: 191, name: 'e' }
Identifier
190
191
e
Node {
  type: 'BlockStatement',
  start: 193,
  end: 266,
  body: 
   [ Node {
       type: 'ReturnStatement',
       start: 203,
       end: 260,
       argument: [Node] } ] }
BlockStatement
193
266
[ Node {
    type: 'ReturnStatement',
    start: 203,
    end: 260,
    argument: 
     Node {
       type: 'ObjectExpression',
       start: 210,
       end: 259,
       properties: [Array] } } ]
Node {
  type: 'ReturnStatement',
  start: 203,
  end: 260,
  argument: 
   Node {
     type: 'ObjectExpression',
     start: 210,
     end: 259,
     properties: [ [Node], [Node] ] } }
ReturnStatement
203
260
Node {
  type: 'ObjectExpression',
  start: 210,
  end: 259,
  properties: 
   [ Node {
       type: 'Property',
       start: 211,
       end: 231,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 233,
       end: 258,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
210
259
[ Node {
    type: 'Property',
    start: 211,
    end: 231,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 211, end: 218, name: 'outcome' },
    value: 
     Node {
       type: 'Literal',
       start: 220,
       end: 231,
       value: 'exception',
       raw: '"exception"' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 233,
    end: 258,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 233, end: 239, name: 'values' },
    value: 
     Node {
       type: 'ArrayExpression',
       start: 241,
       end: 258,
       elements: [Array] },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 211,
  end: 231,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 211, end: 218, name: 'outcome' },
  value: 
   Node {
     type: 'Literal',
     start: 220,
     end: 231,
     value: 'exception',
     raw: '"exception"' },
  kind: 'init' }
Property
211
231
false
false
false
Node { type: 'Identifier', start: 211, end: 218, name: 'outcome' }
Identifier
211
218
outcome
Node {
  type: 'Literal',
  start: 220,
  end: 231,
  value: 'exception',
  raw: '"exception"' }
Literal
220
231
exception
"exception"
init
Node {
  type: 'Property',
  start: 233,
  end: 258,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 233, end: 239, name: 'values' },
  value: 
   Node {
     type: 'ArrayExpression',
     start: 241,
     end: 258,
     elements: [ [Node], [Node], [Node], [Node] ] },
  kind: 'init' }
Property
233
258
false
false
false
Node { type: 'Identifier', start: 233, end: 239, name: 'values' }
Identifier
233
239
values
Node {
  type: 'ArrayExpression',
  start: 241,
  end: 258,
  elements: 
   [ Node { type: 'Identifier', start: 242, end: 243, name: 'o' },
     Node { type: 'Identifier', start: 245, end: 246, name: 'p' },
     Node { type: 'Identifier', start: 248, end: 249, name: 'x' },
     Node { type: 'Identifier', start: 251, end: 257, name: 'result' } ] }
ArrayExpression
241
258
[ Node { type: 'Identifier', start: 242, end: 243, name: 'o' },
  Node { type: 'Identifier', start: 245, end: 246, name: 'p' },
  Node { type: 'Identifier', start: 248, end: 249, name: 'x' },
  Node { type: 'Identifier', start: 251, end: 257, name: 'result' } ]
Node { type: 'Identifier', start: 242, end: 243, name: 'o' }
Identifier
242
243
o
Node { type: 'Identifier', start: 245, end: 246, name: 'p' }
Identifier
245
246
p
Node { type: 'Identifier', start: 248, end: 249, name: 'x' }
Identifier
248
249
x
Node { type: 'Identifier', start: 251, end: 257, name: 'result' }
Identifier
251
257
result
init
null
[+] Exception: ftl-get-by-id-slow-exception.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 687,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 44,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 46,
       end: 133,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 135,
       end: 149,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 151,
       end: 346,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 348,
       end: 686,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
687
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 44,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 16, end: 44, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 46,
    end: 133,
    id: Node { type: 'Identifier', start: 55, end: 58, name: 'bar' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 62, end: 133, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 135,
    end: 149,
    expression: 
     Node {
       type: 'CallExpression',
       start: 135,
       end: 148,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 151,
    end: 346,
    id: Node { type: 'Identifier', start: 160, end: 168, name: 'arraycmp' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 175, end: 346, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 348,
    end: 686,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 353,
       end: 362,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 364,
       end: 373,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 375,
       end: 378,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 380, end: 686, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 44,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 13, end: 14, name: 'i' } ],
  body: Node { type: 'BlockStatement', start: 16, end: 44, body: [ [Node] ] } }
FunctionDeclaration
0
44
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'i' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'i' }
Identifier
13
14
i
Node {
  type: 'BlockStatement',
  start: 16,
  end: 44,
  body: 
   [ Node { type: 'ReturnStatement', start: 22, end: 42, argument: [Node] } ] }
BlockStatement
16
44
[ Node {
    type: 'ReturnStatement',
    start: 22,
    end: 42,
    argument: 
     Node {
       type: 'MemberExpression',
       start: 29,
       end: 41,
       object: [Node],
       property: [Node],
       computed: true } } ]
Node {
  type: 'ReturnStatement',
  start: 22,
  end: 42,
  argument: 
   Node {
     type: 'MemberExpression',
     start: 29,
     end: 41,
     object: Node { type: 'Identifier', start: 29, end: 38, name: 'arguments' },
     property: Node { type: 'Identifier', start: 39, end: 40, name: 'i' },
     computed: true } }
ReturnStatement
22
42
Node {
  type: 'MemberExpression',
  start: 29,
  end: 41,
  object: Node { type: 'Identifier', start: 29, end: 38, name: 'arguments' },
  property: Node { type: 'Identifier', start: 39, end: 40, name: 'i' },
  computed: true }
MemberExpression
29
41
Node { type: 'Identifier', start: 29, end: 38, name: 'arguments' }
Identifier
29
38
arguments
Node { type: 'Identifier', start: 39, end: 40, name: 'i' }
Identifier
39
40
i
true
Node {
  type: 'FunctionDeclaration',
  start: 46,
  end: 133,
  id: Node { type: 'Identifier', start: 55, end: 58, name: 'bar' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 59, end: 60, name: 'i' } ],
  body: Node { type: 'BlockStatement', start: 62, end: 133, body: [ [Node] ] } }
FunctionDeclaration
46
133
Node { type: 'Identifier', start: 55, end: 58, name: 'bar' }
Identifier
55
58
bar
false
false
false
[ Node { type: 'Identifier', start: 59, end: 60, name: 'i' } ]
Node { type: 'Identifier', start: 59, end: 60, name: 'i' }
Identifier
59
60
i
Node {
  type: 'BlockStatement',
  start: 62,
  end: 133,
  body: 
   [ Node { type: 'ReturnStatement', start: 68, end: 131, argument: [Node] } ] }
BlockStatement
62
133
[ Node {
    type: 'ReturnStatement',
    start: 68,
    end: 131,
    argument: 
     Node {
       type: 'ArrayExpression',
       start: 75,
       end: 130,
       elements: [Array] } } ]
Node {
  type: 'ReturnStatement',
  start: 68,
  end: 131,
  argument: 
   Node {
     type: 'ArrayExpression',
     start: 75,
     end: 130,
     elements: [ [Node], [Node], [Node] ] } }
ReturnStatement
68
131
Node {
  type: 'ArrayExpression',
  start: 75,
  end: 130,
  elements: 
   [ Node {
       type: 'MemberExpression',
       start: 76,
       end: 88,
       object: [Node],
       property: [Node],
       computed: true },
     Node {
       type: 'CallExpression',
       start: 90,
       end: 115,
       callee: [Node],
       arguments: [Array] },
     Node {
       type: 'MemberExpression',
       start: 117,
       end: 129,
       object: [Node],
       property: [Node],
       computed: true } ] }
ArrayExpression
75
130
[ Node {
    type: 'MemberExpression',
    start: 76,
    end: 88,
    object: Node { type: 'Identifier', start: 76, end: 85, name: 'arguments' },
    property: Node { type: 'Identifier', start: 86, end: 87, name: 'i' },
    computed: true },
  Node {
    type: 'CallExpression',
    start: 90,
    end: 115,
    callee: Node { type: 'Identifier', start: 90, end: 93, name: 'foo' },
    arguments: [ [Node], [Node], [Node], [Node] ] },
  Node {
    type: 'MemberExpression',
    start: 117,
    end: 129,
    object: Node { type: 'Identifier', start: 117, end: 126, name: 'arguments' },
    property: Node { type: 'Identifier', start: 127, end: 128, name: 'i' },
    computed: true } ]
Node {
  type: 'MemberExpression',
  start: 76,
  end: 88,
  object: Node { type: 'Identifier', start: 76, end: 85, name: 'arguments' },
  property: Node { type: 'Identifier', start: 86, end: 87, name: 'i' },
  computed: true }
MemberExpression
76
88
Node { type: 'Identifier', start: 76, end: 85, name: 'arguments' }
Identifier
76
85
arguments
Node { type: 'Identifier', start: 86, end: 87, name: 'i' }
Identifier
86
87
i
true
Node {
  type: 'CallExpression',
  start: 90,
  end: 115,
  callee: Node { type: 'Identifier', start: 90, end: 93, name: 'foo' },
  arguments: 
   [ Node { type: 'Identifier', start: 94, end: 95, name: 'i' },
     Node {
       type: 'Literal',
       start: 97,
       end: 102,
       value: 'one',
       raw: '"one"' },
     Node { type: 'Literal', start: 104, end: 105, value: 2, raw: '2' },
     Node {
       type: 'Literal',
       start: 107,
       end: 114,
       value: 'three',
       raw: '"three"' } ] }
CallExpression
90
115
Node { type: 'Identifier', start: 90, end: 93, name: 'foo' }
Identifier
90
93
foo
[ Node { type: 'Identifier', start: 94, end: 95, name: 'i' },
  Node {
    type: 'Literal',
    start: 97,
    end: 102,
    value: 'one',
    raw: '"one"' },
  Node { type: 'Literal', start: 104, end: 105, value: 2, raw: '2' },
  Node {
    type: 'Literal',
    start: 107,
    end: 114,
    value: 'three',
    raw: '"three"' } ]
Node { type: 'Identifier', start: 94, end: 95, name: 'i' }
Identifier
94
95
i
Node {
  type: 'Literal',
  start: 97,
  end: 102,
  value: 'one',
  raw: '"one"' }
Literal
97
102
one
"one"
Node { type: 'Literal', start: 104, end: 105, value: 2, raw: '2' }
Literal
104
105
2
2
Node {
  type: 'Literal',
  start: 107,
  end: 114,
  value: 'three',
  raw: '"three"' }
Literal
107
114
three
"three"
Node {
  type: 'MemberExpression',
  start: 117,
  end: 129,
  object: Node { type: 'Identifier', start: 117, end: 126, name: 'arguments' },
  property: Node { type: 'Identifier', start: 127, end: 128, name: 'i' },
  computed: true }
MemberExpression
117
129
Node { type: 'Identifier', start: 117, end: 126, name: 'arguments' }
Identifier
117
126
arguments
Node { type: 'Identifier', start: 127, end: 128, name: 'i' }
Identifier
127
128
i
true
Node {
  type: 'ExpressionStatement',
  start: 135,
  end: 149,
  expression: 
   Node {
     type: 'CallExpression',
     start: 135,
     end: 148,
     callee: Node { type: 'Identifier', start: 135, end: 143, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
135
149
Node {
  type: 'CallExpression',
  start: 135,
  end: 148,
  callee: Node { type: 'Identifier', start: 135, end: 143, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 144, end: 147, name: 'bar' } ] }
CallExpression
135
148
Node { type: 'Identifier', start: 135, end: 143, name: 'noInline' }
Identifier
135
143
noInline
[ Node { type: 'Identifier', start: 144, end: 147, name: 'bar' } ]
Node { type: 'Identifier', start: 144, end: 147, name: 'bar' }
Identifier
144
147
bar
Node {
  type: 'FunctionDeclaration',
  start: 151,
  end: 346,
  id: Node { type: 'Identifier', start: 160, end: 168, name: 'arraycmp' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 169, end: 170, name: 'a' },
     Node { type: 'Identifier', start: 172, end: 173, name: 'b' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 175,
     end: 346,
     body: [ [Node], [Node], [Node] ] } }
FunctionDeclaration
151
346
Node { type: 'Identifier', start: 160, end: 168, name: 'arraycmp' }
Identifier
160
168
arraycmp
false
false
false
[ Node { type: 'Identifier', start: 169, end: 170, name: 'a' },
  Node { type: 'Identifier', start: 172, end: 173, name: 'b' } ]
Node { type: 'Identifier', start: 169, end: 170, name: 'a' }
Identifier
169
170
a
Node { type: 'Identifier', start: 172, end: 173, name: 'b' }
Identifier
172
173
b
Node {
  type: 'BlockStatement',
  start: 175,
  end: 346,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 181,
       end: 228,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ForStatement',
       start: 233,
       end: 327,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ReturnStatement',
       start: 332,
       end: 344,
       argument: [Node] } ] }
BlockStatement
175
346
[ Node {
    type: 'IfStatement',
    start: 181,
    end: 228,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 185,
       end: 205,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: 
     Node {
       type: 'ReturnStatement',
       start: 215,
       end: 228,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'ForStatement',
    start: 233,
    end: 327,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 238,
       end: 247,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 249,
       end: 261,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 263,
       end: 266,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 268, end: 327, body: [Array] } },
  Node {
    type: 'ReturnStatement',
    start: 332,
    end: 344,
    argument: Node { type: 'Literal', start: 339, end: 343, value: true, raw: 'true' } } ]
Node {
  type: 'IfStatement',
  start: 181,
  end: 228,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 185,
     end: 205,
     left: 
      Node {
        type: 'MemberExpression',
        start: 185,
        end: 193,
        object: [Node],
        property: [Node],
        computed: false },
     operator: '!=',
     right: 
      Node {
        type: 'MemberExpression',
        start: 197,
        end: 205,
        object: [Node],
        property: [Node],
        computed: false } },
  consequent: 
   Node {
     type: 'ReturnStatement',
     start: 215,
     end: 228,
     argument: 
      Node {
        type: 'Literal',
        start: 222,
        end: 227,
        value: false,
        raw: 'false' } },
  alternate: null }
IfStatement
181
228
Node {
  type: 'BinaryExpression',
  start: 185,
  end: 205,
  left: 
   Node {
     type: 'MemberExpression',
     start: 185,
     end: 193,
     object: Node { type: 'Identifier', start: 185, end: 186, name: 'a' },
     property: Node { type: 'Identifier', start: 187, end: 193, name: 'length' },
     computed: false },
  operator: '!=',
  right: 
   Node {
     type: 'MemberExpression',
     start: 197,
     end: 205,
     object: Node { type: 'Identifier', start: 197, end: 198, name: 'b' },
     property: Node { type: 'Identifier', start: 199, end: 205, name: 'length' },
     computed: false } }
BinaryExpression
185
205
Node {
  type: 'MemberExpression',
  start: 185,
  end: 193,
  object: Node { type: 'Identifier', start: 185, end: 186, name: 'a' },
  property: Node { type: 'Identifier', start: 187, end: 193, name: 'length' },
  computed: false }
MemberExpression
185
193
Node { type: 'Identifier', start: 185, end: 186, name: 'a' }
Identifier
185
186
a
Node { type: 'Identifier', start: 187, end: 193, name: 'length' }
Identifier
187
193
length
false
!=
Node {
  type: 'MemberExpression',
  start: 197,
  end: 205,
  object: Node { type: 'Identifier', start: 197, end: 198, name: 'b' },
  property: Node { type: 'Identifier', start: 199, end: 205, name: 'length' },
  computed: false }
MemberExpression
197
205
Node { type: 'Identifier', start: 197, end: 198, name: 'b' }
Identifier
197
198
b
Node { type: 'Identifier', start: 199, end: 205, name: 'length' }
Identifier
199
205
length
false
Node {
  type: 'ReturnStatement',
  start: 215,
  end: 228,
  argument: 
   Node {
     type: 'Literal',
     start: 222,
     end: 227,
     value: false,
     raw: 'false' } }
ReturnStatement
215
228
Node {
  type: 'Literal',
  start: 222,
  end: 227,
  value: false,
  raw: 'false' }
Literal
222
227
false
false
null
[+] Exception: ftl-get-my-argument-by-val-inlined-and-not-inlined.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 352,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 44,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 46,
       end: 103,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 105,
       end: 119,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 121,
       end: 351,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
352
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 44,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 16, end: 44, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 46,
    end: 103,
    id: Node { type: 'Identifier', start: 55, end: 58, name: 'bar' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 62, end: 103, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 105,
    end: 119,
    expression: 
     Node {
       type: 'CallExpression',
       start: 105,
       end: 118,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 121,
    end: 351,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 126,
       end: 135,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 137,
       end: 146,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 148,
       end: 151,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 153, end: 351, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 44,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 13, end: 14, name: 'i' } ],
  body: Node { type: 'BlockStatement', start: 16, end: 44, body: [ [Node] ] } }
FunctionDeclaration
0
44
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'i' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'i' }
Identifier
13
14
i
Node {
  type: 'BlockStatement',
  start: 16,
  end: 44,
  body: 
   [ Node { type: 'ReturnStatement', start: 22, end: 42, argument: [Node] } ] }
BlockStatement
16
44
[ Node {
    type: 'ReturnStatement',
    start: 22,
    end: 42,
    argument: 
     Node {
       type: 'MemberExpression',
       start: 29,
       end: 41,
       object: [Node],
       property: [Node],
       computed: true } } ]
Node {
  type: 'ReturnStatement',
  start: 22,
  end: 42,
  argument: 
   Node {
     type: 'MemberExpression',
     start: 29,
     end: 41,
     object: Node { type: 'Identifier', start: 29, end: 38, name: 'arguments' },
     property: Node { type: 'Identifier', start: 39, end: 40, name: 'i' },
     computed: true } }
ReturnStatement
22
42
Node {
  type: 'MemberExpression',
  start: 29,
  end: 41,
  object: Node { type: 'Identifier', start: 29, end: 38, name: 'arguments' },
  property: Node { type: 'Identifier', start: 39, end: 40, name: 'i' },
  computed: true }
MemberExpression
29
41
Node { type: 'Identifier', start: 29, end: 38, name: 'arguments' }
Identifier
29
38
arguments
Node { type: 'Identifier', start: 39, end: 40, name: 'i' }
Identifier
39
40
i
true
Node {
  type: 'FunctionDeclaration',
  start: 46,
  end: 103,
  id: Node { type: 'Identifier', start: 55, end: 58, name: 'bar' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 59, end: 60, name: 'i' } ],
  body: Node { type: 'BlockStatement', start: 62, end: 103, body: [ [Node] ] } }
FunctionDeclaration
46
103
Node { type: 'Identifier', start: 55, end: 58, name: 'bar' }
Identifier
55
58
bar
false
false
false
[ Node { type: 'Identifier', start: 59, end: 60, name: 'i' } ]
Node { type: 'Identifier', start: 59, end: 60, name: 'i' }
Identifier
59
60
i
Node {
  type: 'BlockStatement',
  start: 62,
  end: 103,
  body: 
   [ Node { type: 'ReturnStatement', start: 68, end: 101, argument: [Node] } ] }
BlockStatement
62
103
[ Node {
    type: 'ReturnStatement',
    start: 68,
    end: 101,
    argument: 
     Node {
       type: 'CallExpression',
       start: 75,
       end: 100,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'ReturnStatement',
  start: 68,
  end: 101,
  argument: 
   Node {
     type: 'CallExpression',
     start: 75,
     end: 100,
     callee: Node { type: 'Identifier', start: 75, end: 78, name: 'foo' },
     arguments: [ [Node], [Node], [Node], [Node] ] } }
ReturnStatement
68
101
Node {
  type: 'CallExpression',
  start: 75,
  end: 100,
  callee: Node { type: 'Identifier', start: 75, end: 78, name: 'foo' },
  arguments: 
   [ Node { type: 'Identifier', start: 79, end: 80, name: 'i' },
     Node { type: 'Literal', start: 82, end: 87, value: 'one', raw: '"one"' },
     Node { type: 'Literal', start: 89, end: 90, value: 2, raw: '2' },
     Node {
       type: 'Literal',
       start: 92,
       end: 99,
       value: 'three',
       raw: '"three"' } ] }
CallExpression
75
100
Node { type: 'Identifier', start: 75, end: 78, name: 'foo' }
Identifier
75
78
foo
[ Node { type: 'Identifier', start: 79, end: 80, name: 'i' },
  Node { type: 'Literal', start: 82, end: 87, value: 'one', raw: '"one"' },
  Node { type: 'Literal', start: 89, end: 90, value: 2, raw: '2' },
  Node {
    type: 'Literal',
    start: 92,
    end: 99,
    value: 'three',
    raw: '"three"' } ]
Node { type: 'Identifier', start: 79, end: 80, name: 'i' }
Identifier
79
80
i
Node { type: 'Literal', start: 82, end: 87, value: 'one', raw: '"one"' }
Literal
82
87
one
"one"
Node { type: 'Literal', start: 89, end: 90, value: 2, raw: '2' }
Literal
89
90
2
2
Node {
  type: 'Literal',
  start: 92,
  end: 99,
  value: 'three',
  raw: '"three"' }
Literal
92
99
three
"three"
Node {
  type: 'ExpressionStatement',
  start: 105,
  end: 119,
  expression: 
   Node {
     type: 'CallExpression',
     start: 105,
     end: 118,
     callee: Node { type: 'Identifier', start: 105, end: 113, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
105
119
Node {
  type: 'CallExpression',
  start: 105,
  end: 118,
  callee: Node { type: 'Identifier', start: 105, end: 113, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 114, end: 117, name: 'bar' } ] }
CallExpression
105
118
Node { type: 'Identifier', start: 105, end: 113, name: 'noInline' }
Identifier
105
113
noInline
[ Node { type: 'Identifier', start: 114, end: 117, name: 'bar' } ]
Node { type: 'Identifier', start: 114, end: 117, name: 'bar' }
Identifier
114
117
bar
Node {
  type: 'ForStatement',
  start: 121,
  end: 351,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 126,
     end: 135,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 137,
     end: 146,
     left: Node { type: 'Identifier', start: 137, end: 138, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 141,
        end: 146,
        value: 10000,
        raw: '10000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 148,
     end: 151,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 150, end: 151, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 153,
     end: 351,
     body: [ [Node], [Node], [Node] ] } }
ForStatement
121
351
Node {
  type: 'VariableDeclaration',
  start: 126,
  end: 135,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 130,
       end: 135,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
126
135
[ Node {
    type: 'VariableDeclarator',
    start: 130,
    end: 135,
    id: Node { type: 'Identifier', start: 130, end: 131, name: 'i' },
    init: Node { type: 'Literal', start: 134, end: 135, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 130,
  end: 135,
  id: Node { type: 'Identifier', start: 130, end: 131, name: 'i' },
  init: Node { type: 'Literal', start: 134, end: 135, value: 0, raw: '0' } }
VariableDeclarator
130
135
Node { type: 'Identifier', start: 130, end: 131, name: 'i' }
Identifier
130
131
i
Node { type: 'Literal', start: 134, end: 135, value: 0, raw: '0' }
Literal
134
135
0
0
var
Node {
  type: 'BinaryExpression',
  start: 137,
  end: 146,
  left: Node { type: 'Identifier', start: 137, end: 138, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 141,
     end: 146,
     value: 10000,
     raw: '10000' } }
BinaryExpression
137
146
Node { type: 'Identifier', start: 137, end: 138, name: 'i' }
Identifier
137
138
i
<
Node {
  type: 'Literal',
  start: 141,
  end: 146,
  value: 10000,
  raw: '10000' }
Literal
141
146
10000
10000
Node {
  type: 'UpdateExpression',
  start: 148,
  end: 151,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 150, end: 151, name: 'i' } }
UpdateExpression
148
151
++
true
Node { type: 'Identifier', start: 150, end: 151, name: 'i' }
Identifier
150
151
i
Node {
  type: 'BlockStatement',
  start: 153,
  end: 351,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 159,
       end: 201,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 206,
       end: 250,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 255,
       end: 349,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
153
351
[ Node {
    type: 'VariableDeclaration',
    start: 159,
    end: 201,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 206,
    end: 250,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 255,
    end: 349,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 259,
       end: 284,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 294, end: 349, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 159,
  end: 201,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 163,
       end: 200,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
159
201
[ Node {
    type: 'VariableDeclarator',
    start: 163,
    end: 200,
    id: Node { type: 'Identifier', start: 163, end: 171, name: 'thingies' },
    init: 
     Node {
       type: 'ArrayExpression',
       start: 174,
       end: 200,
       elements: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 163,
  end: 200,
  id: Node { type: 'Identifier', start: 163, end: 171, name: 'thingies' },
  init: 
   Node {
     type: 'ArrayExpression',
     start: 174,
     end: 200,
     elements: [ [Node], [Node], [Node], [Node] ] } }
VariableDeclarator
163
200
Node { type: 'Identifier', start: 163, end: 171, name: 'thingies' }
Identifier
163
171
thingies
Node {
  type: 'ArrayExpression',
  start: 174,
  end: 200,
  elements: 
   [ Node {
       type: 'BinaryExpression',
       start: 175,
       end: 180,
       left: [Node],
       operator: '%',
       right: [Node] },
     Node {
       type: 'Literal',
       start: 182,
       end: 187,
       value: 'one',
       raw: '"one"' },
     Node { type: 'Literal', start: 189, end: 190, value: 2, raw: '2' },
     Node {
       type: 'Literal',
       start: 192,
       end: 199,
       value: 'three',
       raw: '"three"' } ] }
ArrayExpression
174
200
[ Node {
    type: 'BinaryExpression',
    start: 175,
    end: 180,
    left: Node { type: 'Identifier', start: 175, end: 176, name: 'i' },
    operator: '%',
    right: Node { type: 'Literal', start: 179, end: 180, value: 4, raw: '4' } },
  Node {
    type: 'Literal',
    start: 182,
    end: 187,
    value: 'one',
    raw: '"one"' },
  Node { type: 'Literal', start: 189, end: 190, value: 2, raw: '2' },
  Node {
    type: 'Literal',
    start: 192,
    end: 199,
    value: 'three',
    raw: '"three"' } ]
Node {
  type: 'BinaryExpression',
  start: 175,
  end: 180,
  left: Node { type: 'Identifier', start: 175, end: 176, name: 'i' },
  operator: '%',
  right: Node { type: 'Literal', start: 179, end: 180, value: 4, raw: '4' } }
BinaryExpression
175
180
Node { type: 'Identifier', start: 175, end: 176, name: 'i' }
Identifier
175
176
i
%
Node { type: 'Literal', start: 179, end: 180, value: 4, raw: '4' }
Literal
179
180
4
4
Node {
  type: 'Literal',
  start: 182,
  end: 187,
  value: 'one',
  raw: '"one"' }
Literal
182
187
one
"one"
Node { type: 'Literal', start: 189, end: 190, value: 2, raw: '2' }
Literal
189
190
2
2
Node {
  type: 'Literal',
  start: 192,
  end: 199,
  value: 'three',
  raw: '"three"' }
Literal
192
199
three
"three"
var
Node {
  type: 'VariableDeclaration',
  start: 206,
  end: 250,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 210,
       end: 249,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
206
250
[ Node {
    type: 'VariableDeclarator',
    start: 210,
    end: 249,
    id: Node { type: 'Identifier', start: 210, end: 216, name: 'result' },
    init: 
     Node {
       type: 'CallExpression',
       start: 219,
       end: 249,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 210,
  end: 249,
  id: Node { type: 'Identifier', start: 210, end: 216, name: 'result' },
  init: 
   Node {
     type: 'CallExpression',
     start: 219,
     end: 249,
     callee: Node { type: 'Identifier', start: 219, end: 222, name: 'bar' },
     arguments: [ [Node], [Node], [Node], [Node] ] } }
VariableDeclarator
210
249
Node { type: 'Identifier', start: 210, end: 216, name: 'result' }
Identifier
210
216
result
Node {
  type: 'CallExpression',
  start: 219,
  end: 249,
  callee: Node { type: 'Identifier', start: 219, end: 222, name: 'bar' },
  arguments: 
   [ Node {
       type: 'BinaryExpression',
       start: 223,
       end: 228,
       left: [Node],
       operator: '%',
       right: [Node] },
     Node {
       type: 'Literal',
       start: 230,
       end: 236,
       value: 'five',
       raw: '"five"' },
     Node { type: 'Literal', start: 238, end: 239, value: 6, raw: '6' },
     Node {
       type: 'Literal',
       start: 241,
       end: 248,
       value: 'seven',
       raw: '"seven"' } ] }
CallExpression
219
249
Node { type: 'Identifier', start: 219, end: 222, name: 'bar' }
Identifier
219
222
bar
[ Node {
    type: 'BinaryExpression',
    start: 223,
    end: 228,
    left: Node { type: 'Identifier', start: 223, end: 224, name: 'i' },
    operator: '%',
    right: Node { type: 'Literal', start: 227, end: 228, value: 4, raw: '4' } },
  Node {
    type: 'Literal',
    start: 230,
    end: 236,
    value: 'five',
    raw: '"five"' },
  Node { type: 'Literal', start: 238, end: 239, value: 6, raw: '6' },
  Node {
    type: 'Literal',
    start: 241,
    end: 248,
    value: 'seven',
    raw: '"seven"' } ]
Node {
  type: 'BinaryExpression',
  start: 223,
  end: 228,
  left: Node { type: 'Identifier', start: 223, end: 224, name: 'i' },
  operator: '%',
  right: Node { type: 'Literal', start: 227, end: 228, value: 4, raw: '4' } }
BinaryExpression
223
228
Node { type: 'Identifier', start: 223, end: 224, name: 'i' }
Identifier
223
224
i
%
Node { type: 'Literal', start: 227, end: 228, value: 4, raw: '4' }
Literal
227
228
4
4
Node {
  type: 'Literal',
  start: 230,
  end: 236,
  value: 'five',
  raw: '"five"' }
Literal
230
236
five
"five"
Node { type: 'Literal', start: 238, end: 239, value: 6, raw: '6' }
Literal
238
239
6
6
Node {
  type: 'Literal',
  start: 241,
  end: 248,
  value: 'seven',
  raw: '"seven"' }
Literal
241
248
seven
"seven"
var
Node {
  type: 'IfStatement',
  start: 255,
  end: 349,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 259,
     end: 284,
     left: Node { type: 'Identifier', start: 259, end: 265, name: 'result' },
     operator: '!=',
     right: 
      Node {
        type: 'MemberExpression',
        start: 269,
        end: 284,
        object: [Node],
        property: [Node],
        computed: true } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 294,
     end: 349,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 300,
        end: 348,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
255
349
Node {
  type: 'BinaryExpression',
  start: 259,
  end: 284,
  left: Node { type: 'Identifier', start: 259, end: 265, name: 'result' },
  operator: '!=',
  right: 
   Node {
     type: 'MemberExpression',
     start: 269,
     end: 284,
     object: Node { type: 'Identifier', start: 269, end: 277, name: 'thingies' },
     property: 
      Node {
        type: 'BinaryExpression',
        start: 278,
        end: 283,
        left: [Node],
        operator: '%',
        right: [Node] },
     computed: true } }
BinaryExpression
259
284
Node { type: 'Identifier', start: 259, end: 265, name: 'result' }
Identifier
259
265
result
!=
Node {
  type: 'MemberExpression',
  start: 269,
  end: 284,
  object: Node { type: 'Identifier', start: 269, end: 277, name: 'thingies' },
  property: 
   Node {
     type: 'BinaryExpression',
     start: 278,
     end: 283,
     left: Node { type: 'Identifier', start: 278, end: 279, name: 'i' },
     operator: '%',
     right: Node { type: 'Literal', start: 282, end: 283, value: 4, raw: '4' } },
  computed: true }
MemberExpression
269
284
Node { type: 'Identifier', start: 269, end: 277, name: 'thingies' }
Identifier
269
277
thingies
Node {
  type: 'BinaryExpression',
  start: 278,
  end: 283,
  left: Node { type: 'Identifier', start: 278, end: 279, name: 'i' },
  operator: '%',
  right: Node { type: 'Literal', start: 282, end: 283, value: 4, raw: '4' } }
BinaryExpression
278
283
Node { type: 'Identifier', start: 278, end: 279, name: 'i' }
Identifier
278
279
i
%
Node { type: 'Literal', start: 282, end: 283, value: 4, raw: '4' }
Literal
282
283
4
4
true
Node {
  type: 'ThrowStatement',
  start: 294,
  end: 349,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 300,
     end: 348,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 300,
        end: 339,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Identifier', start: 342, end: 348, name: 'result' } } }
ThrowStatement
294
349
Node {
  type: 'BinaryExpression',
  start: 300,
  end: 348,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 300,
     end: 339,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 300,
        end: 332,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Literal', start: 335, end: 339, value: ': ', raw: '": "' } },
  operator: '+',
  right: Node { type: 'Identifier', start: 342, end: 348, name: 'result' } }
BinaryExpression
300
348
Node {
  type: 'BinaryExpression',
  start: 300,
  end: 339,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 300,
     end: 332,
     left: 
      Node {
        type: 'Literal',
        start: 300,
        end: 328,
        value: 'Error: bad result for i = ',
        raw: '"Error: bad result for i = "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 331, end: 332, name: 'i' } },
  operator: '+',
  right: Node { type: 'Literal', start: 335, end: 339, value: ': ', raw: '": "' } }
BinaryExpression
300
339
Node {
  type: 'BinaryExpression',
  start: 300,
  end: 332,
  left: 
   Node {
     type: 'Literal',
     start: 300,
     end: 328,
     value: 'Error: bad result for i = ',
     raw: '"Error: bad result for i = "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 331, end: 332, name: 'i' } }
BinaryExpression
300
332
Node {
  type: 'Literal',
  start: 300,
  end: 328,
  value: 'Error: bad result for i = ',
  raw: '"Error: bad result for i = "' }
Literal
300
328
Error: bad result for i = 
"Error: bad result for i = "
+
Node { type: 'Identifier', start: 331, end: 332, name: 'i' }
Identifier
331
332
i
+
Node { type: 'Literal', start: 335, end: 339, value: ': ', raw: '": "' }
Literal
335
339
: 
": "
+
Node { type: 'Identifier', start: 342, end: 348, name: 'result' }
Identifier
342
348
result
null
[+] Exception: ftl-get-my-argument-by-val-inlined.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 292,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 44,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 46,
       end: 60,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 62,
       end: 291,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
292
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 44,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 16, end: 44, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 46,
    end: 60,
    expression: 
     Node {
       type: 'CallExpression',
       start: 46,
       end: 59,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 62,
    end: 291,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 67,
       end: 76,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 78,
       end: 87,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 89,
       end: 92,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 94, end: 291, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 44,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 13, end: 14, name: 'i' } ],
  body: Node { type: 'BlockStatement', start: 16, end: 44, body: [ [Node] ] } }
FunctionDeclaration
0
44
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'i' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'i' }
Identifier
13
14
i
Node {
  type: 'BlockStatement',
  start: 16,
  end: 44,
  body: 
   [ Node { type: 'ReturnStatement', start: 22, end: 42, argument: [Node] } ] }
BlockStatement
16
44
[ Node {
    type: 'ReturnStatement',
    start: 22,
    end: 42,
    argument: 
     Node {
       type: 'MemberExpression',
       start: 29,
       end: 41,
       object: [Node],
       property: [Node],
       computed: true } } ]
Node {
  type: 'ReturnStatement',
  start: 22,
  end: 42,
  argument: 
   Node {
     type: 'MemberExpression',
     start: 29,
     end: 41,
     object: Node { type: 'Identifier', start: 29, end: 38, name: 'arguments' },
     property: Node { type: 'Identifier', start: 39, end: 40, name: 'i' },
     computed: true } }
ReturnStatement
22
42
Node {
  type: 'MemberExpression',
  start: 29,
  end: 41,
  object: Node { type: 'Identifier', start: 29, end: 38, name: 'arguments' },
  property: Node { type: 'Identifier', start: 39, end: 40, name: 'i' },
  computed: true }
MemberExpression
29
41
Node { type: 'Identifier', start: 29, end: 38, name: 'arguments' }
Identifier
29
38
arguments
Node { type: 'Identifier', start: 39, end: 40, name: 'i' }
Identifier
39
40
i
true
Node {
  type: 'ExpressionStatement',
  start: 46,
  end: 60,
  expression: 
   Node {
     type: 'CallExpression',
     start: 46,
     end: 59,
     callee: Node { type: 'Identifier', start: 46, end: 54, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
46
60
Node {
  type: 'CallExpression',
  start: 46,
  end: 59,
  callee: Node { type: 'Identifier', start: 46, end: 54, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 55, end: 58, name: 'foo' } ] }
CallExpression
46
59
Node { type: 'Identifier', start: 46, end: 54, name: 'noInline' }
Identifier
46
54
noInline
[ Node { type: 'Identifier', start: 55, end: 58, name: 'foo' } ]
Node { type: 'Identifier', start: 55, end: 58, name: 'foo' }
Identifier
55
58
foo
Node {
  type: 'ForStatement',
  start: 62,
  end: 291,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 67,
     end: 76,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 78,
     end: 87,
     left: Node { type: 'Identifier', start: 78, end: 79, name: 'i' },
     operator: '<',
     right: Node { type: 'Literal', start: 82, end: 87, value: 10000, raw: '10000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 89,
     end: 92,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 91, end: 92, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 94,
     end: 291,
     body: [ [Node], [Node], [Node] ] } }
ForStatement
62
291
Node {
  type: 'VariableDeclaration',
  start: 67,
  end: 76,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 71,
       end: 76,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
67
76
[ Node {
    type: 'VariableDeclarator',
    start: 71,
    end: 76,
    id: Node { type: 'Identifier', start: 71, end: 72, name: 'i' },
    init: Node { type: 'Literal', start: 75, end: 76, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 71,
  end: 76,
  id: Node { type: 'Identifier', start: 71, end: 72, name: 'i' },
  init: Node { type: 'Literal', start: 75, end: 76, value: 0, raw: '0' } }
VariableDeclarator
71
76
Node { type: 'Identifier', start: 71, end: 72, name: 'i' }
Identifier
71
72
i
Node { type: 'Literal', start: 75, end: 76, value: 0, raw: '0' }
Literal
75
76
0
0
var
Node {
  type: 'BinaryExpression',
  start: 78,
  end: 87,
  left: Node { type: 'Identifier', start: 78, end: 79, name: 'i' },
  operator: '<',
  right: Node { type: 'Literal', start: 82, end: 87, value: 10000, raw: '10000' } }
BinaryExpression
78
87
Node { type: 'Identifier', start: 78, end: 79, name: 'i' }
Identifier
78
79
i
<
Node { type: 'Literal', start: 82, end: 87, value: 10000, raw: '10000' }
Literal
82
87
10000
10000
Node {
  type: 'UpdateExpression',
  start: 89,
  end: 92,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 91, end: 92, name: 'i' } }
UpdateExpression
89
92
++
true
Node { type: 'Identifier', start: 91, end: 92, name: 'i' }
Identifier
91
92
i
Node {
  type: 'BlockStatement',
  start: 94,
  end: 291,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 100,
       end: 142,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 147,
       end: 190,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 195,
       end: 289,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
94
291
[ Node {
    type: 'VariableDeclaration',
    start: 100,
    end: 142,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 147,
    end: 190,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 195,
    end: 289,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 199,
       end: 224,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 234, end: 289, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 100,
  end: 142,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 104,
       end: 141,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
100
142
[ Node {
    type: 'VariableDeclarator',
    start: 104,
    end: 141,
    id: Node { type: 'Identifier', start: 104, end: 112, name: 'thingies' },
    init: 
     Node {
       type: 'ArrayExpression',
       start: 115,
       end: 141,
       elements: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 104,
  end: 141,
  id: Node { type: 'Identifier', start: 104, end: 112, name: 'thingies' },
  init: 
   Node {
     type: 'ArrayExpression',
     start: 115,
     end: 141,
     elements: [ [Node], [Node], [Node], [Node] ] } }
VariableDeclarator
104
141
Node { type: 'Identifier', start: 104, end: 112, name: 'thingies' }
Identifier
104
112
thingies
Node {
  type: 'ArrayExpression',
  start: 115,
  end: 141,
  elements: 
   [ Node {
       type: 'BinaryExpression',
       start: 116,
       end: 121,
       left: [Node],
       operator: '%',
       right: [Node] },
     Node {
       type: 'Literal',
       start: 123,
       end: 128,
       value: 'one',
       raw: '"one"' },
     Node { type: 'Literal', start: 130, end: 131, value: 2, raw: '2' },
     Node {
       type: 'Literal',
       start: 133,
       end: 140,
       value: 'three',
       raw: '"three"' } ] }
ArrayExpression
115
141
[ Node {
    type: 'BinaryExpression',
    start: 116,
    end: 121,
    left: Node { type: 'Identifier', start: 116, end: 117, name: 'i' },
    operator: '%',
    right: Node { type: 'Literal', start: 120, end: 121, value: 4, raw: '4' } },
  Node {
    type: 'Literal',
    start: 123,
    end: 128,
    value: 'one',
    raw: '"one"' },
  Node { type: 'Literal', start: 130, end: 131, value: 2, raw: '2' },
  Node {
    type: 'Literal',
    start: 133,
    end: 140,
    value: 'three',
    raw: '"three"' } ]
Node {
  type: 'BinaryExpression',
  start: 116,
  end: 121,
  left: Node { type: 'Identifier', start: 116, end: 117, name: 'i' },
  operator: '%',
  right: Node { type: 'Literal', start: 120, end: 121, value: 4, raw: '4' } }
BinaryExpression
116
121
Node { type: 'Identifier', start: 116, end: 117, name: 'i' }
Identifier
116
117
i
%
Node { type: 'Literal', start: 120, end: 121, value: 4, raw: '4' }
Literal
120
121
4
4
Node {
  type: 'Literal',
  start: 123,
  end: 128,
  value: 'one',
  raw: '"one"' }
Literal
123
128
one
"one"
Node { type: 'Literal', start: 130, end: 131, value: 2, raw: '2' }
Literal
130
131
2
2
Node {
  type: 'Literal',
  start: 133,
  end: 140,
  value: 'three',
  raw: '"three"' }
Literal
133
140
three
"three"
var
Node {
  type: 'VariableDeclaration',
  start: 147,
  end: 190,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 151,
       end: 189,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
147
190
[ Node {
    type: 'VariableDeclarator',
    start: 151,
    end: 189,
    id: Node { type: 'Identifier', start: 151, end: 157, name: 'result' },
    init: 
     Node {
       type: 'CallExpression',
       start: 160,
       end: 189,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 151,
  end: 189,
  id: Node { type: 'Identifier', start: 151, end: 157, name: 'result' },
  init: 
   Node {
     type: 'CallExpression',
     start: 160,
     end: 189,
     callee: Node { type: 'Identifier', start: 160, end: 163, name: 'foo' },
     arguments: [ [Node], [Node], [Node], [Node] ] } }
VariableDeclarator
151
189
Node { type: 'Identifier', start: 151, end: 157, name: 'result' }
Identifier
151
157
result
Node {
  type: 'CallExpression',
  start: 160,
  end: 189,
  callee: Node { type: 'Identifier', start: 160, end: 163, name: 'foo' },
  arguments: 
   [ Node {
       type: 'BinaryExpression',
       start: 164,
       end: 169,
       left: [Node],
       operator: '%',
       right: [Node] },
     Node {
       type: 'Literal',
       start: 171,
       end: 176,
       value: 'one',
       raw: '"one"' },
     Node { type: 'Literal', start: 178, end: 179, value: 2, raw: '2' },
     Node {
       type: 'Literal',
       start: 181,
       end: 188,
       value: 'three',
       raw: '"three"' } ] }
CallExpression
160
189
Node { type: 'Identifier', start: 160, end: 163, name: 'foo' }
Identifier
160
163
foo
[ Node {
    type: 'BinaryExpression',
    start: 164,
    end: 169,
    left: Node { type: 'Identifier', start: 164, end: 165, name: 'i' },
    operator: '%',
    right: Node { type: 'Literal', start: 168, end: 169, value: 4, raw: '4' } },
  Node {
    type: 'Literal',
    start: 171,
    end: 176,
    value: 'one',
    raw: '"one"' },
  Node { type: 'Literal', start: 178, end: 179, value: 2, raw: '2' },
  Node {
    type: 'Literal',
    start: 181,
    end: 188,
    value: 'three',
    raw: '"three"' } ]
Node {
  type: 'BinaryExpression',
  start: 164,
  end: 169,
  left: Node { type: 'Identifier', start: 164, end: 165, name: 'i' },
  operator: '%',
  right: Node { type: 'Literal', start: 168, end: 169, value: 4, raw: '4' } }
BinaryExpression
164
169
Node { type: 'Identifier', start: 164, end: 165, name: 'i' }
Identifier
164
165
i
%
Node { type: 'Literal', start: 168, end: 169, value: 4, raw: '4' }
Literal
168
169
4
4
Node {
  type: 'Literal',
  start: 171,
  end: 176,
  value: 'one',
  raw: '"one"' }
Literal
171
176
one
"one"
Node { type: 'Literal', start: 178, end: 179, value: 2, raw: '2' }
Literal
178
179
2
2
Node {
  type: 'Literal',
  start: 181,
  end: 188,
  value: 'three',
  raw: '"three"' }
Literal
181
188
three
"three"
var
Node {
  type: 'IfStatement',
  start: 195,
  end: 289,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 199,
     end: 224,
     left: Node { type: 'Identifier', start: 199, end: 205, name: 'result' },
     operator: '!=',
     right: 
      Node {
        type: 'MemberExpression',
        start: 209,
        end: 224,
        object: [Node],
        property: [Node],
        computed: true } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 234,
     end: 289,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 240,
        end: 288,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
195
289
Node {
  type: 'BinaryExpression',
  start: 199,
  end: 224,
  left: Node { type: 'Identifier', start: 199, end: 205, name: 'result' },
  operator: '!=',
  right: 
   Node {
     type: 'MemberExpression',
     start: 209,
     end: 224,
     object: Node { type: 'Identifier', start: 209, end: 217, name: 'thingies' },
     property: 
      Node {
        type: 'BinaryExpression',
        start: 218,
        end: 223,
        left: [Node],
        operator: '%',
        right: [Node] },
     computed: true } }
BinaryExpression
199
224
Node { type: 'Identifier', start: 199, end: 205, name: 'result' }
Identifier
199
205
result
!=
Node {
  type: 'MemberExpression',
  start: 209,
  end: 224,
  object: Node { type: 'Identifier', start: 209, end: 217, name: 'thingies' },
  property: 
   Node {
     type: 'BinaryExpression',
     start: 218,
     end: 223,
     left: Node { type: 'Identifier', start: 218, end: 219, name: 'i' },
     operator: '%',
     right: Node { type: 'Literal', start: 222, end: 223, value: 4, raw: '4' } },
  computed: true }
MemberExpression
209
224
Node { type: 'Identifier', start: 209, end: 217, name: 'thingies' }
Identifier
209
217
thingies
Node {
  type: 'BinaryExpression',
  start: 218,
  end: 223,
  left: Node { type: 'Identifier', start: 218, end: 219, name: 'i' },
  operator: '%',
  right: Node { type: 'Literal', start: 222, end: 223, value: 4, raw: '4' } }
BinaryExpression
218
223
Node { type: 'Identifier', start: 218, end: 219, name: 'i' }
Identifier
218
219
i
%
Node { type: 'Literal', start: 222, end: 223, value: 4, raw: '4' }
Literal
222
223
4
4
true
Node {
  type: 'ThrowStatement',
  start: 234,
  end: 289,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 240,
     end: 288,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 240,
        end: 279,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Identifier', start: 282, end: 288, name: 'result' } } }
ThrowStatement
234
289
Node {
  type: 'BinaryExpression',
  start: 240,
  end: 288,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 240,
     end: 279,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 240,
        end: 272,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Literal', start: 275, end: 279, value: ': ', raw: '": "' } },
  operator: '+',
  right: Node { type: 'Identifier', start: 282, end: 288, name: 'result' } }
BinaryExpression
240
288
Node {
  type: 'BinaryExpression',
  start: 240,
  end: 279,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 240,
     end: 272,
     left: 
      Node {
        type: 'Literal',
        start: 240,
        end: 268,
        value: 'Error: bad result for i = ',
        raw: '"Error: bad result for i = "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 271, end: 272, name: 'i' } },
  operator: '+',
  right: Node { type: 'Literal', start: 275, end: 279, value: ': ', raw: '": "' } }
BinaryExpression
240
279
Node {
  type: 'BinaryExpression',
  start: 240,
  end: 272,
  left: 
   Node {
     type: 'Literal',
     start: 240,
     end: 268,
     value: 'Error: bad result for i = ',
     raw: '"Error: bad result for i = "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 271, end: 272, name: 'i' } }
BinaryExpression
240
272
Node {
  type: 'Literal',
  start: 240,
  end: 268,
  value: 'Error: bad result for i = ',
  raw: '"Error: bad result for i = "' }
Literal
240
268
Error: bad result for i = 
"Error: bad result for i = "
+
Node { type: 'Identifier', start: 271, end: 272, name: 'i' }
Identifier
271
272
i
+
Node { type: 'Literal', start: 275, end: 279, value: ': ', raw: '": "' }
Literal
275
279
: 
": "
+
Node { type: 'Identifier', start: 282, end: 288, name: 'result' }
Identifier
282
288
result
null
[+] Exception: ftl-get-my-argument-by-val.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 162,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 46,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 48,
       end: 160,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
162
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 46,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 14, end: 46, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 48,
    end: 160,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 53,
       end: 62,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 64,
       end: 74,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 76,
       end: 79,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 81, end: 160, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 46,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 14, end: 46, body: [ [Node] ] } }
FunctionDeclaration
0
46
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[]
Node {
  type: 'BlockStatement',
  start: 14,
  end: 46,
  body: 
   [ Node { type: 'ReturnStatement', start: 20, end: 44, argument: [Node] } ] }
BlockStatement
14
46
[ Node {
    type: 'ReturnStatement',
    start: 20,
    end: 44,
    argument: 
     Node {
       type: 'MemberExpression',
       start: 27,
       end: 43,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'ReturnStatement',
  start: 20,
  end: 44,
  argument: 
   Node {
     type: 'MemberExpression',
     start: 27,
     end: 43,
     object: Node { type: 'Identifier', start: 27, end: 36, name: 'arguments' },
     property: Node { type: 'Identifier', start: 37, end: 43, name: 'length' },
     computed: false } }
ReturnStatement
20
44
Node {
  type: 'MemberExpression',
  start: 27,
  end: 43,
  object: Node { type: 'Identifier', start: 27, end: 36, name: 'arguments' },
  property: Node { type: 'Identifier', start: 37, end: 43, name: 'length' },
  computed: false }
MemberExpression
27
43
Node { type: 'Identifier', start: 27, end: 36, name: 'arguments' }
Identifier
27
36
arguments
Node { type: 'Identifier', start: 37, end: 43, name: 'length' }
Identifier
37
43
length
false
Node {
  type: 'ForStatement',
  start: 48,
  end: 160,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 53,
     end: 62,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 64,
     end: 74,
     left: Node { type: 'Identifier', start: 64, end: 65, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 68,
        end: 74,
        value: 100000,
        raw: '100000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 76,
     end: 79,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 78, end: 79, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 81,
     end: 160,
     body: [ [Node], [Node] ] } }
ForStatement
48
160
Node {
  type: 'VariableDeclaration',
  start: 53,
  end: 62,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 57,
       end: 62,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
53
62
[ Node {
    type: 'VariableDeclarator',
    start: 57,
    end: 62,
    id: Node { type: 'Identifier', start: 57, end: 58, name: 'i' },
    init: Node { type: 'Literal', start: 61, end: 62, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 57,
  end: 62,
  id: Node { type: 'Identifier', start: 57, end: 58, name: 'i' },
  init: Node { type: 'Literal', start: 61, end: 62, value: 0, raw: '0' } }
VariableDeclarator
57
62
Node { type: 'Identifier', start: 57, end: 58, name: 'i' }
Identifier
57
58
i
Node { type: 'Literal', start: 61, end: 62, value: 0, raw: '0' }
Literal
61
62
0
0
var
Node {
  type: 'BinaryExpression',
  start: 64,
  end: 74,
  left: Node { type: 'Identifier', start: 64, end: 65, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 68,
     end: 74,
     value: 100000,
     raw: '100000' } }
BinaryExpression
64
74
Node { type: 'Identifier', start: 64, end: 65, name: 'i' }
Identifier
64
65
i
<
Node {
  type: 'Literal',
  start: 68,
  end: 74,
  value: 100000,
  raw: '100000' }
Literal
68
74
100000
100000
Node {
  type: 'UpdateExpression',
  start: 76,
  end: 79,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 78, end: 79, name: 'i' } }
UpdateExpression
76
79
++
true
Node { type: 'Identifier', start: 78, end: 79, name: 'i' }
Identifier
78
79
i
Node {
  type: 'BlockStatement',
  start: 81,
  end: 160,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 87,
       end: 123,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 128,
       end: 158,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
81
160
[ Node {
    type: 'VariableDeclaration',
    start: 87,
    end: 123,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 128,
    end: 158,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 132,
       end: 138,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 140, end: 158, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 87,
  end: 123,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 91,
       end: 122,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
87
123
[ Node {
    type: 'VariableDeclarator',
    start: 91,
    end: 122,
    id: Node { type: 'Identifier', start: 91, end: 92, name: 'r' },
    init: 
     Node {
       type: 'CallExpression',
       start: 95,
       end: 122,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 91,
  end: 122,
  id: Node { type: 'Identifier', start: 91, end: 92, name: 'r' },
  init: 
   Node {
     type: 'CallExpression',
     start: 95,
     end: 122,
     callee: Node { type: 'Identifier', start: 95, end: 98, name: 'foo' },
     arguments: [ [Node], [Node], [Node], [Node], [Node], [Node] ] } }
VariableDeclarator
91
122
Node { type: 'Identifier', start: 91, end: 92, name: 'r' }
Identifier
91
92
r
Node {
  type: 'CallExpression',
  start: 95,
  end: 122,
  callee: Node { type: 'Identifier', start: 95, end: 98, name: 'foo' },
  arguments: 
   [ Node { type: 'Literal', start: 99, end: 101, value: 11, raw: '11' },
     Node { type: 'Literal', start: 103, end: 105, value: 12, raw: '12' },
     Node { type: 'Literal', start: 107, end: 109, value: 13, raw: '13' },
     Node { type: 'Literal', start: 111, end: 113, value: 18, raw: '18' },
     Node { type: 'Literal', start: 115, end: 117, value: 19, raw: '19' },
     Node { type: 'Literal', start: 119, end: 121, value: 20, raw: '20' } ] }
CallExpression
95
122
Node { type: 'Identifier', start: 95, end: 98, name: 'foo' }
Identifier
95
98
foo
[ Node { type: 'Literal', start: 99, end: 101, value: 11, raw: '11' },
  Node { type: 'Literal', start: 103, end: 105, value: 12, raw: '12' },
  Node { type: 'Literal', start: 107, end: 109, value: 13, raw: '13' },
  Node { type: 'Literal', start: 111, end: 113, value: 18, raw: '18' },
  Node { type: 'Literal', start: 115, end: 117, value: 19, raw: '19' },
  Node { type: 'Literal', start: 119, end: 121, value: 20, raw: '20' } ]
Node { type: 'Literal', start: 99, end: 101, value: 11, raw: '11' }
Literal
99
101
11
11
Node { type: 'Literal', start: 103, end: 105, value: 12, raw: '12' }
Literal
103
105
12
12
Node { type: 'Literal', start: 107, end: 109, value: 13, raw: '13' }
Literal
107
109
13
13
Node { type: 'Literal', start: 111, end: 113, value: 18, raw: '18' }
Literal
111
113
18
18
Node { type: 'Literal', start: 115, end: 117, value: 19, raw: '19' }
Literal
115
117
19
19
Node { type: 'Literal', start: 119, end: 121, value: 20, raw: '20' }
Literal
119
121
20
20
var
Node {
  type: 'IfStatement',
  start: 128,
  end: 158,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 132,
     end: 138,
     left: Node { type: 'Identifier', start: 132, end: 133, name: 'r' },
     operator: '!=',
     right: Node { type: 'Literal', start: 137, end: 138, value: 6, raw: '6' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 140,
     end: 158,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 146,
        end: 157,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
128
158
Node {
  type: 'BinaryExpression',
  start: 132,
  end: 138,
  left: Node { type: 'Identifier', start: 132, end: 133, name: 'r' },
  operator: '!=',
  right: Node { type: 'Literal', start: 137, end: 138, value: 6, raw: '6' } }
BinaryExpression
132
138
Node { type: 'Identifier', start: 132, end: 133, name: 'r' }
Identifier
132
133
r
!=
Node { type: 'Literal', start: 137, end: 138, value: 6, raw: '6' }
Literal
137
138
6
6
Node {
  type: 'ThrowStatement',
  start: 140,
  end: 158,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 146,
     end: 157,
     left: 
      Node {
        type: 'Literal',
        start: 146,
        end: 155,
        value: 'Error: ',
        raw: '"Error: "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 156, end: 157, name: 'r' } } }
ThrowStatement
140
158
Node {
  type: 'BinaryExpression',
  start: 146,
  end: 157,
  left: 
   Node {
     type: 'Literal',
     start: 146,
     end: 155,
     value: 'Error: ',
     raw: '"Error: "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 156, end: 157, name: 'r' } }
BinaryExpression
146
157
Node {
  type: 'Literal',
  start: 146,
  end: 155,
  value: 'Error: ',
  raw: '"Error: "' }
Literal
146
155
Error: 
"Error: "
+
Node { type: 'Identifier', start: 156, end: 157, name: 'r' }
Identifier
156
157
r
null
[+] Exception: ftl-getmyargumentslength-inline.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 178,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 46,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 48,
       end: 62,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 64,
       end: 176,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
178
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 46,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 14, end: 46, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 48,
    end: 62,
    expression: 
     Node {
       type: 'CallExpression',
       start: 48,
       end: 61,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 64,
    end: 176,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 69,
       end: 78,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 80,
       end: 90,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 92,
       end: 95,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 97, end: 176, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 46,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 14, end: 46, body: [ [Node] ] } }
FunctionDeclaration
0
46
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[]
Node {
  type: 'BlockStatement',
  start: 14,
  end: 46,
  body: 
   [ Node { type: 'ReturnStatement', start: 20, end: 44, argument: [Node] } ] }
BlockStatement
14
46
[ Node {
    type: 'ReturnStatement',
    start: 20,
    end: 44,
    argument: 
     Node {
       type: 'MemberExpression',
       start: 27,
       end: 43,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'ReturnStatement',
  start: 20,
  end: 44,
  argument: 
   Node {
     type: 'MemberExpression',
     start: 27,
     end: 43,
     object: Node { type: 'Identifier', start: 27, end: 36, name: 'arguments' },
     property: Node { type: 'Identifier', start: 37, end: 43, name: 'length' },
     computed: false } }
ReturnStatement
20
44
Node {
  type: 'MemberExpression',
  start: 27,
  end: 43,
  object: Node { type: 'Identifier', start: 27, end: 36, name: 'arguments' },
  property: Node { type: 'Identifier', start: 37, end: 43, name: 'length' },
  computed: false }
MemberExpression
27
43
Node { type: 'Identifier', start: 27, end: 36, name: 'arguments' }
Identifier
27
36
arguments
Node { type: 'Identifier', start: 37, end: 43, name: 'length' }
Identifier
37
43
length
false
Node {
  type: 'ExpressionStatement',
  start: 48,
  end: 62,
  expression: 
   Node {
     type: 'CallExpression',
     start: 48,
     end: 61,
     callee: Node { type: 'Identifier', start: 48, end: 56, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
48
62
Node {
  type: 'CallExpression',
  start: 48,
  end: 61,
  callee: Node { type: 'Identifier', start: 48, end: 56, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 57, end: 60, name: 'foo' } ] }
CallExpression
48
61
Node { type: 'Identifier', start: 48, end: 56, name: 'noInline' }
Identifier
48
56
noInline
[ Node { type: 'Identifier', start: 57, end: 60, name: 'foo' } ]
Node { type: 'Identifier', start: 57, end: 60, name: 'foo' }
Identifier
57
60
foo
Node {
  type: 'ForStatement',
  start: 64,
  end: 176,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 69,
     end: 78,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 80,
     end: 90,
     left: Node { type: 'Identifier', start: 80, end: 81, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 84,
        end: 90,
        value: 100000,
        raw: '100000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 92,
     end: 95,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 94, end: 95, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 97,
     end: 176,
     body: [ [Node], [Node] ] } }
ForStatement
64
176
Node {
  type: 'VariableDeclaration',
  start: 69,
  end: 78,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 73,
       end: 78,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
69
78
[ Node {
    type: 'VariableDeclarator',
    start: 73,
    end: 78,
    id: Node { type: 'Identifier', start: 73, end: 74, name: 'i' },
    init: Node { type: 'Literal', start: 77, end: 78, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 73,
  end: 78,
  id: Node { type: 'Identifier', start: 73, end: 74, name: 'i' },
  init: Node { type: 'Literal', start: 77, end: 78, value: 0, raw: '0' } }
VariableDeclarator
73
78
Node { type: 'Identifier', start: 73, end: 74, name: 'i' }
Identifier
73
74
i
Node { type: 'Literal', start: 77, end: 78, value: 0, raw: '0' }
Literal
77
78
0
0
var
Node {
  type: 'BinaryExpression',
  start: 80,
  end: 90,
  left: Node { type: 'Identifier', start: 80, end: 81, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 84,
     end: 90,
     value: 100000,
     raw: '100000' } }
BinaryExpression
80
90
Node { type: 'Identifier', start: 80, end: 81, name: 'i' }
Identifier
80
81
i
<
Node {
  type: 'Literal',
  start: 84,
  end: 90,
  value: 100000,
  raw: '100000' }
Literal
84
90
100000
100000
Node {
  type: 'UpdateExpression',
  start: 92,
  end: 95,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 94, end: 95, name: 'i' } }
UpdateExpression
92
95
++
true
Node { type: 'Identifier', start: 94, end: 95, name: 'i' }
Identifier
94
95
i
Node {
  type: 'BlockStatement',
  start: 97,
  end: 176,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 103,
       end: 139,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 144,
       end: 174,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
97
176
[ Node {
    type: 'VariableDeclaration',
    start: 103,
    end: 139,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 144,
    end: 174,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 148,
       end: 154,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 156, end: 174, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 103,
  end: 139,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 107,
       end: 138,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
103
139
[ Node {
    type: 'VariableDeclarator',
    start: 107,
    end: 138,
    id: Node { type: 'Identifier', start: 107, end: 108, name: 'r' },
    init: 
     Node {
       type: 'CallExpression',
       start: 111,
       end: 138,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 107,
  end: 138,
  id: Node { type: 'Identifier', start: 107, end: 108, name: 'r' },
  init: 
   Node {
     type: 'CallExpression',
     start: 111,
     end: 138,
     callee: Node { type: 'Identifier', start: 111, end: 114, name: 'foo' },
     arguments: [ [Node], [Node], [Node], [Node], [Node], [Node] ] } }
VariableDeclarator
107
138
Node { type: 'Identifier', start: 107, end: 108, name: 'r' }
Identifier
107
108
r
Node {
  type: 'CallExpression',
  start: 111,
  end: 138,
  callee: Node { type: 'Identifier', start: 111, end: 114, name: 'foo' },
  arguments: 
   [ Node { type: 'Literal', start: 115, end: 117, value: 11, raw: '11' },
     Node { type: 'Literal', start: 119, end: 121, value: 12, raw: '12' },
     Node { type: 'Literal', start: 123, end: 125, value: 13, raw: '13' },
     Node { type: 'Literal', start: 127, end: 129, value: 18, raw: '18' },
     Node { type: 'Literal', start: 131, end: 133, value: 19, raw: '19' },
     Node { type: 'Literal', start: 135, end: 137, value: 20, raw: '20' } ] }
CallExpression
111
138
Node { type: 'Identifier', start: 111, end: 114, name: 'foo' }
Identifier
111
114
foo
[ Node { type: 'Literal', start: 115, end: 117, value: 11, raw: '11' },
  Node { type: 'Literal', start: 119, end: 121, value: 12, raw: '12' },
  Node { type: 'Literal', start: 123, end: 125, value: 13, raw: '13' },
  Node { type: 'Literal', start: 127, end: 129, value: 18, raw: '18' },
  Node { type: 'Literal', start: 131, end: 133, value: 19, raw: '19' },
  Node { type: 'Literal', start: 135, end: 137, value: 20, raw: '20' } ]
Node { type: 'Literal', start: 115, end: 117, value: 11, raw: '11' }
Literal
115
117
11
11
Node { type: 'Literal', start: 119, end: 121, value: 12, raw: '12' }
Literal
119
121
12
12
Node { type: 'Literal', start: 123, end: 125, value: 13, raw: '13' }
Literal
123
125
13
13
Node { type: 'Literal', start: 127, end: 129, value: 18, raw: '18' }
Literal
127
129
18
18
Node { type: 'Literal', start: 131, end: 133, value: 19, raw: '19' }
Literal
131
133
19
19
Node { type: 'Literal', start: 135, end: 137, value: 20, raw: '20' }
Literal
135
137
20
20
var
Node {
  type: 'IfStatement',
  start: 144,
  end: 174,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 148,
     end: 154,
     left: Node { type: 'Identifier', start: 148, end: 149, name: 'r' },
     operator: '!=',
     right: Node { type: 'Literal', start: 153, end: 154, value: 6, raw: '6' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 156,
     end: 174,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 162,
        end: 173,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
144
174
Node {
  type: 'BinaryExpression',
  start: 148,
  end: 154,
  left: Node { type: 'Identifier', start: 148, end: 149, name: 'r' },
  operator: '!=',
  right: Node { type: 'Literal', start: 153, end: 154, value: 6, raw: '6' } }
BinaryExpression
148
154
Node { type: 'Identifier', start: 148, end: 149, name: 'r' }
Identifier
148
149
r
!=
Node { type: 'Literal', start: 153, end: 154, value: 6, raw: '6' }
Literal
153
154
6
6
Node {
  type: 'ThrowStatement',
  start: 156,
  end: 174,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 162,
     end: 173,
     left: 
      Node {
        type: 'Literal',
        start: 162,
        end: 171,
        value: 'Error: ',
        raw: '"Error: "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 172, end: 173, name: 'r' } } }
ThrowStatement
156
174
Node {
  type: 'BinaryExpression',
  start: 162,
  end: 173,
  left: 
   Node {
     type: 'Literal',
     start: 162,
     end: 171,
     value: 'Error: ',
     raw: '"Error: "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 172, end: 173, name: 'r' } }
BinaryExpression
162
173
Node {
  type: 'Literal',
  start: 162,
  end: 171,
  value: 'Error: ',
  raw: '"Error: "' }
Literal
162
171
Error: 
"Error: "
+
Node { type: 'Identifier', start: 172, end: 173, name: 'r' }
Identifier
172
173
r
null
[+] Exception: ftl-getmyargumentslength.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 177,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 42,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 44,
       end: 58,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 60,
       end: 175,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
177
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 42,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 15, end: 42, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 44,
    end: 58,
    expression: 
     Node {
       type: 'CallExpression',
       start: 44,
       end: 57,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 60,
    end: 175,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 65,
       end: 74,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 76,
       end: 86,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 88,
       end: 91,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 93, end: 175, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 42,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 13, end: 14, name: 'x' } ],
  body: Node { type: 'BlockStatement', start: 15, end: 42, body: [ [Node] ] } }
FunctionDeclaration
0
42
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'x' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'x' }
Identifier
13
14
x
Node {
  type: 'BlockStatement',
  start: 15,
  end: 42,
  body: 
   [ Node { type: 'ReturnStatement', start: 21, end: 40, argument: [Node] } ] }
BlockStatement
15
42
[ Node {
    type: 'ReturnStatement',
    start: 21,
    end: 40,
    argument: 
     Node {
       type: 'MemberExpression',
       start: 28,
       end: 40,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'ReturnStatement',
  start: 21,
  end: 40,
  argument: 
   Node {
     type: 'MemberExpression',
     start: 28,
     end: 40,
     object: Node { type: 'Identifier', start: 28, end: 29, name: 'x' },
     property: Node { type: 'Identifier', start: 30, end: 40, name: 'byteOffset' },
     computed: false } }
ReturnStatement
21
40
Node {
  type: 'MemberExpression',
  start: 28,
  end: 40,
  object: Node { type: 'Identifier', start: 28, end: 29, name: 'x' },
  property: Node { type: 'Identifier', start: 30, end: 40, name: 'byteOffset' },
  computed: false }
MemberExpression
28
40
Node { type: 'Identifier', start: 28, end: 29, name: 'x' }
Identifier
28
29
x
Node { type: 'Identifier', start: 30, end: 40, name: 'byteOffset' }
Identifier
30
40
byteOffset
false
Node {
  type: 'ExpressionStatement',
  start: 44,
  end: 58,
  expression: 
   Node {
     type: 'CallExpression',
     start: 44,
     end: 57,
     callee: Node { type: 'Identifier', start: 44, end: 52, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
44
58
Node {
  type: 'CallExpression',
  start: 44,
  end: 57,
  callee: Node { type: 'Identifier', start: 44, end: 52, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 53, end: 56, name: 'foo' } ] }
CallExpression
44
57
Node { type: 'Identifier', start: 44, end: 52, name: 'noInline' }
Identifier
44
52
noInline
[ Node { type: 'Identifier', start: 53, end: 56, name: 'foo' } ]
Node { type: 'Identifier', start: 53, end: 56, name: 'foo' }
Identifier
53
56
foo
Node {
  type: 'ForStatement',
  start: 60,
  end: 175,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 65,
     end: 74,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 76,
     end: 86,
     left: Node { type: 'Identifier', start: 76, end: 77, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 80,
        end: 86,
        value: 100000,
        raw: '100000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 88,
     end: 91,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 90, end: 91, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 93,
     end: 175,
     body: [ [Node], [Node] ] } }
ForStatement
60
175
Node {
  type: 'VariableDeclaration',
  start: 65,
  end: 74,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 69,
       end: 74,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
65
74
[ Node {
    type: 'VariableDeclarator',
    start: 69,
    end: 74,
    id: Node { type: 'Identifier', start: 69, end: 70, name: 'i' },
    init: Node { type: 'Literal', start: 73, end: 74, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 69,
  end: 74,
  id: Node { type: 'Identifier', start: 69, end: 70, name: 'i' },
  init: Node { type: 'Literal', start: 73, end: 74, value: 0, raw: '0' } }
VariableDeclarator
69
74
Node { type: 'Identifier', start: 69, end: 70, name: 'i' }
Identifier
69
70
i
Node { type: 'Literal', start: 73, end: 74, value: 0, raw: '0' }
Literal
73
74
0
0
var
Node {
  type: 'BinaryExpression',
  start: 76,
  end: 86,
  left: Node { type: 'Identifier', start: 76, end: 77, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 80,
     end: 86,
     value: 100000,
     raw: '100000' } }
BinaryExpression
76
86
Node { type: 'Identifier', start: 76, end: 77, name: 'i' }
Identifier
76
77
i
<
Node {
  type: 'Literal',
  start: 80,
  end: 86,
  value: 100000,
  raw: '100000' }
Literal
80
86
100000
100000
Node {
  type: 'UpdateExpression',
  start: 88,
  end: 91,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 90, end: 91, name: 'i' } }
UpdateExpression
88
91
++
true
Node { type: 'Identifier', start: 90, end: 91, name: 'i' }
Identifier
90
91
i
Node {
  type: 'BlockStatement',
  start: 93,
  end: 175,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 99,
       end: 129,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 134,
       end: 173,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
93
175
[ Node {
    type: 'VariableDeclaration',
    start: 99,
    end: 129,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 134,
    end: 173,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 138,
       end: 149,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 160, end: 173, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 99,
  end: 129,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 103,
       end: 128,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
99
129
[ Node {
    type: 'VariableDeclarator',
    start: 103,
    end: 128,
    id: Node { type: 'Identifier', start: 103, end: 104, name: 'b' },
    init: 
     Node {
       type: 'NewExpression',
       start: 107,
       end: 128,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 103,
  end: 128,
  id: Node { type: 'Identifier', start: 103, end: 104, name: 'b' },
  init: 
   Node {
     type: 'NewExpression',
     start: 107,
     end: 128,
     callee: Node { type: 'Identifier', start: 111, end: 121, name: 'Uint8Array' },
     arguments: [ [Node], [Node] ] } }
VariableDeclarator
103
128
Node { type: 'Identifier', start: 103, end: 104, name: 'b' }
Identifier
103
104
b
Node {
  type: 'NewExpression',
  start: 107,
  end: 128,
  callee: Node { type: 'Identifier', start: 111, end: 121, name: 'Uint8Array' },
  arguments: 
   [ Node { type: 'Literal', start: 122, end: 124, value: 42, raw: '42' },
     Node { type: 'Literal', start: 126, end: 127, value: 0, raw: '0' } ] }
NewExpression
107
128
Node { type: 'Identifier', start: 111, end: 121, name: 'Uint8Array' }
Identifier
111
121
Uint8Array
[ Node { type: 'Literal', start: 122, end: 124, value: 42, raw: '42' },
  Node { type: 'Literal', start: 126, end: 127, value: 0, raw: '0' } ]
Node { type: 'Literal', start: 122, end: 124, value: 42, raw: '42' }
Literal
122
124
42
42
Node { type: 'Literal', start: 126, end: 127, value: 0, raw: '0' }
Literal
126
127
0
0
var
Node {
  type: 'IfStatement',
  start: 134,
  end: 173,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 138,
     end: 149,
     left: 
      Node {
        type: 'CallExpression',
        start: 138,
        end: 144,
        callee: [Node],
        arguments: [Array] },
     operator: '!=',
     right: Node { type: 'Literal', start: 148, end: 149, value: 0, raw: '0' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 160,
     end: 173,
     argument: 
      Node {
        type: 'Literal',
        start: 166,
        end: 173,
        value: 'error',
        raw: '"error"' } },
  alternate: null }
IfStatement
134
173
Node {
  type: 'BinaryExpression',
  start: 138,
  end: 149,
  left: 
   Node {
     type: 'CallExpression',
     start: 138,
     end: 144,
     callee: Node { type: 'Identifier', start: 138, end: 141, name: 'foo' },
     arguments: [ [Node] ] },
  operator: '!=',
  right: Node { type: 'Literal', start: 148, end: 149, value: 0, raw: '0' } }
BinaryExpression
138
149
Node {
  type: 'CallExpression',
  start: 138,
  end: 144,
  callee: Node { type: 'Identifier', start: 138, end: 141, name: 'foo' },
  arguments: 
   [ Node { type: 'Identifier', start: 142, end: 143, name: 'b' } ] }
CallExpression
138
144
Node { type: 'Identifier', start: 138, end: 141, name: 'foo' }
Identifier
138
141
foo
[ Node { type: 'Identifier', start: 142, end: 143, name: 'b' } ]
Node { type: 'Identifier', start: 142, end: 143, name: 'b' }
Identifier
142
143
b
!=
Node { type: 'Literal', start: 148, end: 149, value: 0, raw: '0' }
Literal
148
149
0
0
Node {
  type: 'ThrowStatement',
  start: 160,
  end: 173,
  argument: 
   Node {
     type: 'Literal',
     start: 166,
     end: 173,
     value: 'error',
     raw: '"error"' } }
ThrowStatement
160
173
Node {
  type: 'Literal',
  start: 166,
  end: 173,
  value: 'error',
  raw: '"error"' }
Literal
166
173
error
"error"
null
[+] Exception: ftl-gettypedarrayoffset-simple.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 194,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 42,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 44,
       end: 58,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 60,
       end: 192,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
194
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 42,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 15, end: 42, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 44,
    end: 58,
    expression: 
     Node {
       type: 'CallExpression',
       start: 44,
       end: 57,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 60,
    end: 192,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 65,
       end: 74,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 76,
       end: 86,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 88,
       end: 91,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 93, end: 192, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 42,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 13, end: 14, name: 'x' } ],
  body: Node { type: 'BlockStatement', start: 15, end: 42, body: [ [Node] ] } }
FunctionDeclaration
0
42
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'x' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'x' }
Identifier
13
14
x
Node {
  type: 'BlockStatement',
  start: 15,
  end: 42,
  body: 
   [ Node { type: 'ReturnStatement', start: 21, end: 40, argument: [Node] } ] }
BlockStatement
15
42
[ Node {
    type: 'ReturnStatement',
    start: 21,
    end: 40,
    argument: 
     Node {
       type: 'MemberExpression',
       start: 28,
       end: 40,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'ReturnStatement',
  start: 21,
  end: 40,
  argument: 
   Node {
     type: 'MemberExpression',
     start: 28,
     end: 40,
     object: Node { type: 'Identifier', start: 28, end: 29, name: 'x' },
     property: Node { type: 'Identifier', start: 30, end: 40, name: 'byteOffset' },
     computed: false } }
ReturnStatement
21
40
Node {
  type: 'MemberExpression',
  start: 28,
  end: 40,
  object: Node { type: 'Identifier', start: 28, end: 29, name: 'x' },
  property: Node { type: 'Identifier', start: 30, end: 40, name: 'byteOffset' },
  computed: false }
MemberExpression
28
40
Node { type: 'Identifier', start: 28, end: 29, name: 'x' }
Identifier
28
29
x
Node { type: 'Identifier', start: 30, end: 40, name: 'byteOffset' }
Identifier
30
40
byteOffset
false
Node {
  type: 'ExpressionStatement',
  start: 44,
  end: 58,
  expression: 
   Node {
     type: 'CallExpression',
     start: 44,
     end: 57,
     callee: Node { type: 'Identifier', start: 44, end: 52, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
44
58
Node {
  type: 'CallExpression',
  start: 44,
  end: 57,
  callee: Node { type: 'Identifier', start: 44, end: 52, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 53, end: 56, name: 'foo' } ] }
CallExpression
44
57
Node { type: 'Identifier', start: 44, end: 52, name: 'noInline' }
Identifier
44
52
noInline
[ Node { type: 'Identifier', start: 53, end: 56, name: 'foo' } ]
Node { type: 'Identifier', start: 53, end: 56, name: 'foo' }
Identifier
53
56
foo
Node {
  type: 'ForStatement',
  start: 60,
  end: 192,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 65,
     end: 74,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 76,
     end: 86,
     left: Node { type: 'Identifier', start: 76, end: 77, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 80,
        end: 86,
        value: 100000,
        raw: '100000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 88,
     end: 91,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 90, end: 91, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 93,
     end: 192,
     body: [ [Node], [Node] ] } }
ForStatement
60
192
Node {
  type: 'VariableDeclaration',
  start: 65,
  end: 74,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 69,
       end: 74,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
65
74
[ Node {
    type: 'VariableDeclarator',
    start: 69,
    end: 74,
    id: Node { type: 'Identifier', start: 69, end: 70, name: 'i' },
    init: Node { type: 'Literal', start: 73, end: 74, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 69,
  end: 74,
  id: Node { type: 'Identifier', start: 69, end: 70, name: 'i' },
  init: Node { type: 'Literal', start: 73, end: 74, value: 0, raw: '0' } }
VariableDeclarator
69
74
Node { type: 'Identifier', start: 69, end: 70, name: 'i' }
Identifier
69
70
i
Node { type: 'Literal', start: 73, end: 74, value: 0, raw: '0' }
Literal
73
74
0
0
var
Node {
  type: 'BinaryExpression',
  start: 76,
  end: 86,
  left: Node { type: 'Identifier', start: 76, end: 77, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 80,
     end: 86,
     value: 100000,
     raw: '100000' } }
BinaryExpression
76
86
Node { type: 'Identifier', start: 76, end: 77, name: 'i' }
Identifier
76
77
i
<
Node {
  type: 'Literal',
  start: 80,
  end: 86,
  value: 100000,
  raw: '100000' }
Literal
80
86
100000
100000
Node {
  type: 'UpdateExpression',
  start: 88,
  end: 91,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 90, end: 91, name: 'i' } }
UpdateExpression
88
91
++
true
Node { type: 'Identifier', start: 90, end: 91, name: 'i' }
Identifier
90
91
i
Node {
  type: 'BlockStatement',
  start: 93,
  end: 192,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 99,
       end: 146,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 151,
       end: 190,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
93
192
[ Node {
    type: 'VariableDeclaration',
    start: 99,
    end: 146,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 151,
    end: 190,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 155,
       end: 166,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 177, end: 190, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 99,
  end: 146,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 103,
       end: 145,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
99
146
[ Node {
    type: 'VariableDeclarator',
    start: 103,
    end: 145,
    id: Node { type: 'Identifier', start: 103, end: 104, name: 'b' },
    init: 
     Node {
       type: 'NewExpression',
       start: 107,
       end: 145,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 103,
  end: 145,
  id: Node { type: 'Identifier', start: 103, end: 104, name: 'b' },
  init: 
   Node {
     type: 'NewExpression',
     start: 107,
     end: 145,
     callee: Node { type: 'Identifier', start: 111, end: 121, name: 'Uint8Array' },
     arguments: [ [Node], [Node] ] } }
VariableDeclarator
103
145
Node { type: 'Identifier', start: 103, end: 104, name: 'b' }
Identifier
103
104
b
Node {
  type: 'NewExpression',
  start: 107,
  end: 145,
  callee: Node { type: 'Identifier', start: 111, end: 121, name: 'Uint8Array' },
  arguments: 
   [ Node {
       type: 'NewExpression',
       start: 122,
       end: 141,
       callee: [Node],
       arguments: [Array] },
     Node { type: 'Literal', start: 143, end: 144, value: 0, raw: '0' } ] }
NewExpression
107
145
Node { type: 'Identifier', start: 111, end: 121, name: 'Uint8Array' }
Identifier
111
121
Uint8Array
[ Node {
    type: 'NewExpression',
    start: 122,
    end: 141,
    callee: Node { type: 'Identifier', start: 126, end: 137, name: 'ArrayBuffer' },
    arguments: [ [Node] ] },
  Node { type: 'Literal', start: 143, end: 144, value: 0, raw: '0' } ]
Node {
  type: 'NewExpression',
  start: 122,
  end: 141,
  callee: Node { type: 'Identifier', start: 126, end: 137, name: 'ArrayBuffer' },
  arguments: 
   [ Node { type: 'Literal', start: 138, end: 140, value: 42, raw: '42' } ] }
NewExpression
122
141
Node { type: 'Identifier', start: 126, end: 137, name: 'ArrayBuffer' }
Identifier
126
137
ArrayBuffer
[ Node { type: 'Literal', start: 138, end: 140, value: 42, raw: '42' } ]
Node { type: 'Literal', start: 138, end: 140, value: 42, raw: '42' }
Literal
138
140
42
42
Node { type: 'Literal', start: 143, end: 144, value: 0, raw: '0' }
Literal
143
144
0
0
var
Node {
  type: 'IfStatement',
  start: 151,
  end: 190,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 155,
     end: 166,
     left: 
      Node {
        type: 'CallExpression',
        start: 155,
        end: 161,
        callee: [Node],
        arguments: [Array] },
     operator: '!=',
     right: Node { type: 'Literal', start: 165, end: 166, value: 0, raw: '0' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 177,
     end: 190,
     argument: 
      Node {
        type: 'Literal',
        start: 183,
        end: 190,
        value: 'error',
        raw: '"error"' } },
  alternate: null }
IfStatement
151
190
Node {
  type: 'BinaryExpression',
  start: 155,
  end: 166,
  left: 
   Node {
     type: 'CallExpression',
     start: 155,
     end: 161,
     callee: Node { type: 'Identifier', start: 155, end: 158, name: 'foo' },
     arguments: [ [Node] ] },
  operator: '!=',
  right: Node { type: 'Literal', start: 165, end: 166, value: 0, raw: '0' } }
BinaryExpression
155
166
Node {
  type: 'CallExpression',
  start: 155,
  end: 161,
  callee: Node { type: 'Identifier', start: 155, end: 158, name: 'foo' },
  arguments: 
   [ Node { type: 'Identifier', start: 159, end: 160, name: 'b' } ] }
CallExpression
155
161
Node { type: 'Identifier', start: 155, end: 158, name: 'foo' }
Identifier
155
158
foo
[ Node { type: 'Identifier', start: 159, end: 160, name: 'b' } ]
Node { type: 'Identifier', start: 159, end: 160, name: 'b' }
Identifier
159
160
b
!=
Node { type: 'Literal', start: 165, end: 166, value: 0, raw: '0' }
Literal
165
166
0
0
Node {
  type: 'ThrowStatement',
  start: 177,
  end: 190,
  argument: 
   Node {
     type: 'Literal',
     start: 183,
     end: 190,
     value: 'error',
     raw: '"error"' } }
ThrowStatement
177
190
Node {
  type: 'Literal',
  start: 183,
  end: 190,
  value: 'error',
  raw: '"error"' }
Literal
183
190
error
"error"
null
[+] Exception: ftl-gettypedarrayoffset-wasteful.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 401,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 47,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 49,
       end: 63,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 120,
       end: 164,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 190,
       end: 214,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 215,
       end: 269,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 351,
       end: 399,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
401
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 47,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 16, end: 47, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 49,
    end: 63,
    expression: 
     Node {
       type: 'CallExpression',
       start: 49,
       end: 62,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 120,
    end: 164,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 125,
       end: 134,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 136,
       end: 143,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 145,
       end: 148,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 154,
       end: 164,
       expression: [Node] } },
  Node {
    type: 'VariableDeclaration',
    start: 190,
    end: 214,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 215,
    end: 269,
    expression: 
     Node {
       type: 'CallExpression',
       start: 215,
       end: 268,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 351,
    end: 399,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 356,
       end: 365,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 367,
       end: 377,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 379,
       end: 382,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 388,
       end: 399,
       expression: [Node] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 47,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 13, end: 14, name: 'p' } ],
  body: Node { type: 'BlockStatement', start: 16, end: 47, body: [ [Node] ] } }
FunctionDeclaration
0
47
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'p' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'p' }
Identifier
13
14
p
Node {
  type: 'BlockStatement',
  start: 16,
  end: 47,
  body: 
   [ Node { type: 'ReturnStatement', start: 22, end: 45, argument: [Node] } ] }
BlockStatement
16
47
[ Node {
    type: 'ReturnStatement',
    start: 22,
    end: 45,
    argument: 
     Node {
       type: 'ConditionalExpression',
       start: 29,
       end: 44,
       test: [Node],
       consequent: [Node],
       alternate: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 22,
  end: 45,
  argument: 
   Node {
     type: 'ConditionalExpression',
     start: 29,
     end: 44,
     test: Node { type: 'Identifier', start: 29, end: 30, name: 'p' },
     consequent: Node { type: 'ArrayExpression', start: 33, end: 37, elements: [Array] },
     alternate: Node { type: 'Literal', start: 40, end: 44, value: null, raw: 'null' } } }
ReturnStatement
22
45
Node {
  type: 'ConditionalExpression',
  start: 29,
  end: 44,
  test: Node { type: 'Identifier', start: 29, end: 30, name: 'p' },
  consequent: 
   Node {
     type: 'ArrayExpression',
     start: 33,
     end: 37,
     elements: [ [Node] ] },
  alternate: Node { type: 'Literal', start: 40, end: 44, value: null, raw: 'null' } }
ConditionalExpression
29
44
Node { type: 'Identifier', start: 29, end: 30, name: 'p' }
Identifier
29
30
p
Node {
  type: 'ArrayExpression',
  start: 33,
  end: 37,
  elements: 
   [ Node { type: 'Literal', start: 34, end: 36, value: 42, raw: '42' } ] }
ArrayExpression
33
37
[ Node { type: 'Literal', start: 34, end: 36, value: 42, raw: '42' } ]
Node { type: 'Literal', start: 34, end: 36, value: 42, raw: '42' }
Literal
34
36
42
42
Node { type: 'Literal', start: 40, end: 44, value: null, raw: 'null' }
Literal
40
44
null
[+] Exception: ftl-has-a-bad-time.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 163,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 42,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 44,
       end: 58,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 60,
       end: 161,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
163
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 42,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 16, end: 42, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 44,
    end: 58,
    expression: 
     Node {
       type: 'CallExpression',
       start: 44,
       end: 57,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 60,
    end: 161,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 65,
       end: 74,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 76,
       end: 86,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 88,
       end: 91,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 93, end: 161, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 42,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 13, end: 14, name: 'o' } ],
  body: Node { type: 'BlockStatement', start: 16, end: 42, body: [ [Node] ] } }
FunctionDeclaration
0
42
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'o' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'o' }
Identifier
13
14
o
Node {
  type: 'BlockStatement',
  start: 16,
  end: 42,
  body: 
   [ Node { type: 'ReturnStatement', start: 22, end: 40, argument: [Node] } ] }
BlockStatement
16
42
[ Node {
    type: 'ReturnStatement',
    start: 22,
    end: 40,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 29,
       end: 39,
       left: [Node],
       operator: 'in',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 22,
  end: 40,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 29,
     end: 39,
     left: Node { type: 'Literal', start: 29, end: 34, value: 'foo', raw: '"foo"' },
     operator: 'in',
     right: Node { type: 'Identifier', start: 38, end: 39, name: 'o' } } }
ReturnStatement
22
40
Node {
  type: 'BinaryExpression',
  start: 29,
  end: 39,
  left: Node { type: 'Literal', start: 29, end: 34, value: 'foo', raw: '"foo"' },
  operator: 'in',
  right: Node { type: 'Identifier', start: 38, end: 39, name: 'o' } }
BinaryExpression
29
39
Node { type: 'Literal', start: 29, end: 34, value: 'foo', raw: '"foo"' }
Literal
29
34
foo
"foo"
in
Node { type: 'Identifier', start: 38, end: 39, name: 'o' }
Identifier
38
39
o
Node {
  type: 'ExpressionStatement',
  start: 44,
  end: 58,
  expression: 
   Node {
     type: 'CallExpression',
     start: 44,
     end: 57,
     callee: Node { type: 'Identifier', start: 44, end: 52, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
44
58
Node {
  type: 'CallExpression',
  start: 44,
  end: 57,
  callee: Node { type: 'Identifier', start: 44, end: 52, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 53, end: 56, name: 'foo' } ] }
CallExpression
44
57
Node { type: 'Identifier', start: 44, end: 52, name: 'noInline' }
Identifier
44
52
noInline
[ Node { type: 'Identifier', start: 53, end: 56, name: 'foo' } ]
Node { type: 'Identifier', start: 53, end: 56, name: 'foo' }
Identifier
53
56
foo
Node {
  type: 'ForStatement',
  start: 60,
  end: 161,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 65,
     end: 74,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 76,
     end: 86,
     left: Node { type: 'Identifier', start: 76, end: 77, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 80,
        end: 86,
        value: 100000,
        raw: '100000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 88,
     end: 91,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 90, end: 91, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 93,
     end: 161,
     body: [ [Node], [Node], [Node], [Node] ] } }
ForStatement
60
161
Node {
  type: 'VariableDeclaration',
  start: 65,
  end: 74,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 69,
       end: 74,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
65
74
[ Node {
    type: 'VariableDeclarator',
    start: 69,
    end: 74,
    id: Node { type: 'Identifier', start: 69, end: 70, name: 'i' },
    init: Node { type: 'Literal', start: 73, end: 74, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 69,
  end: 74,
  id: Node { type: 'Identifier', start: 69, end: 70, name: 'i' },
  init: Node { type: 'Literal', start: 73, end: 74, value: 0, raw: '0' } }
VariableDeclarator
69
74
Node { type: 'Identifier', start: 69, end: 70, name: 'i' }
Identifier
69
70
i
Node { type: 'Literal', start: 73, end: 74, value: 0, raw: '0' }
Literal
73
74
0
0
var
Node {
  type: 'BinaryExpression',
  start: 76,
  end: 86,
  left: Node { type: 'Identifier', start: 76, end: 77, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 80,
     end: 86,
     value: 100000,
     raw: '100000' } }
BinaryExpression
76
86
Node { type: 'Identifier', start: 76, end: 77, name: 'i' }
Identifier
76
77
i
<
Node {
  type: 'Literal',
  start: 80,
  end: 86,
  value: 100000,
  raw: '100000' }
Literal
80
86
100000
100000
Node {
  type: 'UpdateExpression',
  start: 88,
  end: 91,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 90, end: 91, name: 'i' } }
UpdateExpression
88
91
++
true
Node { type: 'Identifier', start: 90, end: 91, name: 'i' }
Identifier
90
91
i
Node {
  type: 'BlockStatement',
  start: 93,
  end: 161,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 99,
       end: 110,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 115,
       end: 131,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 136,
       end: 147,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 152,
       end: 159,
       expression: [Node] } ] }
BlockStatement
93
161
[ Node {
    type: 'VariableDeclaration',
    start: 99,
    end: 110,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 115,
    end: 131,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 115,
       end: 130,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 136,
    end: 147,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 136,
       end: 146,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 152,
    end: 159,
    expression: 
     Node {
       type: 'CallExpression',
       start: 152,
       end: 158,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 99,
  end: 110,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 103,
       end: 109,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
99
110
[ Node {
    type: 'VariableDeclarator',
    start: 103,
    end: 109,
    id: Node { type: 'Identifier', start: 103, end: 104, name: 'o' },
    init: Node { type: 'ObjectExpression', start: 107, end: 109, properties: [] } } ]
Node {
  type: 'VariableDeclarator',
  start: 103,
  end: 109,
  id: Node { type: 'Identifier', start: 103, end: 104, name: 'o' },
  init: Node { type: 'ObjectExpression', start: 107, end: 109, properties: [] } }
VariableDeclarator
103
109
Node { type: 'Identifier', start: 103, end: 104, name: 'o' }
Identifier
103
104
o
Node { type: 'ObjectExpression', start: 107, end: 109, properties: [] }
ObjectExpression
107
109
[]
var
Node {
  type: 'ExpressionStatement',
  start: 115,
  end: 131,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 115,
     end: 130,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 115,
        end: 125,
        object: [Node],
        property: [Node],
        computed: true },
     right: Node { type: 'Literal', start: 128, end: 130, value: 42, raw: '42' } } }
ExpressionStatement
115
131
Node {
  type: 'AssignmentExpression',
  start: 115,
  end: 130,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 115,
     end: 125,
     object: Node { type: 'Identifier', start: 115, end: 116, name: 'o' },
     property: 
      Node {
        type: 'BinaryExpression',
        start: 117,
        end: 124,
        left: [Node],
        operator: '+',
        right: [Node] },
     computed: true },
  right: Node { type: 'Literal', start: 128, end: 130, value: 42, raw: '42' } }
AssignmentExpression
115
130
=
Node {
  type: 'MemberExpression',
  start: 115,
  end: 125,
  object: Node { type: 'Identifier', start: 115, end: 116, name: 'o' },
  property: 
   Node {
     type: 'BinaryExpression',
     start: 117,
     end: 124,
     left: Node { type: 'Literal', start: 117, end: 120, value: 'i', raw: '"i"' },
     operator: '+',
     right: Node { type: 'Identifier', start: 123, end: 124, name: 'i' } },
  computed: true }
MemberExpression
115
125
Node { type: 'Identifier', start: 115, end: 116, name: 'o' }
Identifier
115
116
o
Node {
  type: 'BinaryExpression',
  start: 117,
  end: 124,
  left: Node { type: 'Literal', start: 117, end: 120, value: 'i', raw: '"i"' },
  operator: '+',
  right: Node { type: 'Identifier', start: 123, end: 124, name: 'i' } }
BinaryExpression
117
124
Node { type: 'Literal', start: 117, end: 120, value: 'i', raw: '"i"' }
Literal
117
120
i
"i"
+
Node { type: 'Identifier', start: 123, end: 124, name: 'i' }
Identifier
123
124
i
true
Node { type: 'Literal', start: 128, end: 130, value: 42, raw: '42' }
Literal
128
130
42
42
Node {
  type: 'ExpressionStatement',
  start: 136,
  end: 147,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 136,
     end: 146,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 136,
        end: 141,
        object: [Node],
        property: [Node],
        computed: false },
     right: Node { type: 'Literal', start: 144, end: 146, value: 43, raw: '43' } } }
ExpressionStatement
136
147
Node {
  type: 'AssignmentExpression',
  start: 136,
  end: 146,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 136,
     end: 141,
     object: Node { type: 'Identifier', start: 136, end: 137, name: 'o' },
     property: Node { type: 'Identifier', start: 138, end: 141, name: 'foo' },
     computed: false },
  right: Node { type: 'Literal', start: 144, end: 146, value: 43, raw: '43' } }
AssignmentExpression
136
146
=
Node {
  type: 'MemberExpression',
  start: 136,
  end: 141,
  object: Node { type: 'Identifier', start: 136, end: 137, name: 'o' },
  property: Node { type: 'Identifier', start: 138, end: 141, name: 'foo' },
  computed: false }
MemberExpression
136
141
Node { type: 'Identifier', start: 136, end: 137, name: 'o' }
Identifier
136
137
o
Node { type: 'Identifier', start: 138, end: 141, name: 'foo' }
Identifier
138
141
foo
false
Node { type: 'Literal', start: 144, end: 146, value: 43, raw: '43' }
Literal
144
146
43
43
Node {
  type: 'ExpressionStatement',
  start: 152,
  end: 159,
  expression: 
   Node {
     type: 'CallExpression',
     start: 152,
     end: 158,
     callee: Node { type: 'Identifier', start: 152, end: 155, name: 'foo' },
     arguments: [ [Node] ] } }
ExpressionStatement
152
159
Node {
  type: 'CallExpression',
  start: 152,
  end: 158,
  callee: Node { type: 'Identifier', start: 152, end: 155, name: 'foo' },
  arguments: 
   [ Node { type: 'Identifier', start: 156, end: 157, name: 'o' } ] }
CallExpression
152
158
Node { type: 'Identifier', start: 152, end: 155, name: 'foo' }
Identifier
152
155
foo
[ Node { type: 'Identifier', start: 156, end: 157, name: 'o' } ]
Node { type: 'Identifier', start: 156, end: 157, name: 'o' }
Identifier
156
157
o
script
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 344,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 71,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 73,
       end: 87,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 89,
       end: 95,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 96,
       end: 115,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 116,
       end: 126,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ForStatement',
       start: 127,
       end: 305,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'IfStatement',
       start: 307,
       end: 343,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
344
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 71,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 15, end: 71, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 73,
    end: 87,
    expression: 
     Node {
       type: 'CallExpression',
       start: 73,
       end: 86,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 89,
    end: 95,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 96,
    end: 115,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 116,
    end: 126,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ForStatement',
    start: 127,
    end: 305,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 132,
       end: 141,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 144,
       end: 153,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 155,
       end: 158,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 159, end: 305, body: [Array] } },
  Node {
    type: 'IfStatement',
    start: 307,
    end: 343,
    test: 
     Node {
       type: 'UnaryExpression',
       start: 311,
       end: 313,
       operator: '!',
       prefix: true,
       argument: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 319, end: 343, argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 71,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 13, end: 14, name: 'd' } ],
  body: Node { type: 'BlockStatement', start: 15, end: 71, body: [ [Node] ] } }
FunctionDeclaration
0
71
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'd' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'd' }
Identifier
13
14
d
Node {
  type: 'BlockStatement',
  start: 15,
  end: 71,
  body: 
   [ Node { type: 'ReturnStatement', start: 21, end: 69, argument: [Node] } ] }
BlockStatement
15
71
[ Node {
    type: 'ReturnStatement',
    start: 21,
    end: 69,
    argument: 
     Node {
       type: 'CallExpression',
       start: 28,
       end: 68,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'ReturnStatement',
  start: 21,
  end: 69,
  argument: 
   Node {
     type: 'CallExpression',
     start: 28,
     end: 68,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 28,
        end: 65,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [ [Node] ] } }
ReturnStatement
21
69
Node {
  type: 'CallExpression',
  start: 28,
  end: 68,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 28,
     end: 65,
     object: 
      Node {
        type: 'MemberExpression',
        start: 28,
        end: 60,
        object: [Node],
        property: [Node],
        computed: false },
     property: Node { type: 'Identifier', start: 61, end: 65, name: 'call' },
     computed: false },
  arguments: [ Node { type: 'Identifier', start: 66, end: 67, name: 'd' } ] }
CallExpression
28
68
Node {
  type: 'MemberExpression',
  start: 28,
  end: 65,
  object: 
   Node {
     type: 'MemberExpression',
     start: 28,
     end: 60,
     object: 
      Node {
        type: 'MemberExpression',
        start: 28,
        end: 42,
        object: [Node],
        property: [Node],
        computed: false },
     property: 
      Node {
        type: 'Identifier',
        start: 43,
        end: 60,
        name: 'getTimezoneOffset' },
     computed: false },
  property: Node { type: 'Identifier', start: 61, end: 65, name: 'call' },
  computed: false }
MemberExpression
28
65
Node {
  type: 'MemberExpression',
  start: 28,
  end: 60,
  object: 
   Node {
     type: 'MemberExpression',
     start: 28,
     end: 42,
     object: Node { type: 'Identifier', start: 28, end: 32, name: 'Date' },
     property: Node { type: 'Identifier', start: 33, end: 42, name: 'prototype' },
     computed: false },
  property: 
   Node {
     type: 'Identifier',
     start: 43,
     end: 60,
     name: 'getTimezoneOffset' },
  computed: false }
MemberExpression
28
60
Node {
  type: 'MemberExpression',
  start: 28,
  end: 42,
  object: Node { type: 'Identifier', start: 28, end: 32, name: 'Date' },
  property: Node { type: 'Identifier', start: 33, end: 42, name: 'prototype' },
  computed: false }
MemberExpression
28
42
Node { type: 'Identifier', start: 28, end: 32, name: 'Date' }
Identifier
28
32
Date
Node { type: 'Identifier', start: 33, end: 42, name: 'prototype' }
Identifier
33
42
prototype
false
Node {
  type: 'Identifier',
  start: 43,
  end: 60,
  name: 'getTimezoneOffset' }
Identifier
43
60
getTimezoneOffset
false
Node { type: 'Identifier', start: 61, end: 65, name: 'call' }
Identifier
61
65
call
false
[ Node { type: 'Identifier', start: 66, end: 67, name: 'd' } ]
Node { type: 'Identifier', start: 66, end: 67, name: 'd' }
Identifier
66
67
d
Node {
  type: 'ExpressionStatement',
  start: 73,
  end: 87,
  expression: 
   Node {
     type: 'CallExpression',
     start: 73,
     end: 86,
     callee: Node { type: 'Identifier', start: 73, end: 81, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
73
87
Node {
  type: 'CallExpression',
  start: 73,
  end: 86,
  callee: Node { type: 'Identifier', start: 73, end: 81, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 82, end: 85, name: 'foo' } ] }
CallExpression
73
86
Node { type: 'Identifier', start: 73, end: 81, name: 'noInline' }
Identifier
73
81
noInline
[ Node { type: 'Identifier', start: 82, end: 85, name: 'foo' } ]
Node { type: 'Identifier', start: 82, end: 85, name: 'foo' }
Identifier
82
85
foo
Node {
  type: 'VariableDeclaration',
  start: 89,
  end: 95,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 93,
       end: 94,
       id: [Node],
       init: null } ],
  kind: 'var' }
VariableDeclaration
89
95
[ Node {
    type: 'VariableDeclarator',
    start: 93,
    end: 94,
    id: Node { type: 'Identifier', start: 93, end: 94, name: 'x' },
    init: null } ]
Node {
  type: 'VariableDeclarator',
  start: 93,
  end: 94,
  id: Node { type: 'Identifier', start: 93, end: 94, name: 'x' },
  init: null }
VariableDeclarator
93
94
Node { type: 'Identifier', start: 93, end: 94, name: 'x' }
Identifier
93
94
x
null
[+] Exception: ftl-library-exception.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 296,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 59,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 61,
       end: 75,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 77,
       end: 96,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 97,
       end: 122,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 123,
       end: 143,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 144,
       end: 159,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ForStatement',
       start: 160,
       end: 220,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'IfStatement',
       start: 222,
       end: 295,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
296
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 59,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 18, end: 59, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 61,
    end: 75,
    expression: 
     Node {
       type: 'CallExpression',
       start: 61,
       end: 74,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 77,
    end: 96,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 97,
    end: 122,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 123,
    end: 143,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 144,
    end: 159,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ForStatement',
    start: 160,
    end: 220,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 165,
       end: 174,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 177,
       end: 186,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 188,
       end: 191,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 192, end: 220, body: [Array] } },
  Node {
    type: 'IfStatement',
    start: 222,
    end: 295,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 226,
       end: 252,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 258, end: 295, argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 59,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'x' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'd' } ],
  body: Node { type: 'BlockStatement', start: 18, end: 59, body: [ [Node] ] } }
FunctionDeclaration
0
59
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'x' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'd' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'x' }
Identifier
13
14
x
Node { type: 'Identifier', start: 16, end: 17, name: 'd' }
Identifier
16
17
d
Node {
  type: 'BlockStatement',
  start: 18,
  end: 59,
  body: 
   [ Node { type: 'ReturnStatement', start: 24, end: 57, argument: [Node] } ] }
BlockStatement
18
59
[ Node {
    type: 'ReturnStatement',
    start: 24,
    end: 57,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 31,
       end: 56,
       left: [Node],
       operator: '+',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 24,
  end: 57,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 31,
     end: 56,
     left: Node { type: 'Identifier', start: 31, end: 32, name: 'x' },
     operator: '+',
     right: 
      Node {
        type: 'CallExpression',
        start: 35,
        end: 56,
        callee: [Node],
        arguments: [] } } }
ReturnStatement
24
57
Node {
  type: 'BinaryExpression',
  start: 31,
  end: 56,
  left: Node { type: 'Identifier', start: 31, end: 32, name: 'x' },
  operator: '+',
  right: 
   Node {
     type: 'CallExpression',
     start: 35,
     end: 56,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 35,
        end: 54,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [] } }
BinaryExpression
31
56
Node { type: 'Identifier', start: 31, end: 32, name: 'x' }
Identifier
31
32
x
+
Node {
  type: 'CallExpression',
  start: 35,
  end: 56,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 35,
     end: 54,
     object: Node { type: 'Identifier', start: 35, end: 36, name: 'd' },
     property: 
      Node {
        type: 'Identifier',
        start: 37,
        end: 54,
        name: 'getTimezoneOffset' },
     computed: false },
  arguments: [] }
CallExpression
35
56
Node {
  type: 'MemberExpression',
  start: 35,
  end: 54,
  object: Node { type: 'Identifier', start: 35, end: 36, name: 'd' },
  property: 
   Node {
     type: 'Identifier',
     start: 37,
     end: 54,
     name: 'getTimezoneOffset' },
  computed: false }
MemberExpression
35
54
Node { type: 'Identifier', start: 35, end: 36, name: 'd' }
Identifier
35
36
d
Node {
  type: 'Identifier',
  start: 37,
  end: 54,
  name: 'getTimezoneOffset' }
Identifier
37
54
getTimezoneOffset
false
[]
Node {
  type: 'ExpressionStatement',
  start: 61,
  end: 75,
  expression: 
   Node {
     type: 'CallExpression',
     start: 61,
     end: 74,
     callee: Node { type: 'Identifier', start: 61, end: 69, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
61
75
Node {
  type: 'CallExpression',
  start: 61,
  end: 74,
  callee: Node { type: 'Identifier', start: 61, end: 69, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 70, end: 73, name: 'foo' } ] }
CallExpression
61
74
Node { type: 'Identifier', start: 61, end: 69, name: 'noInline' }
Identifier
61
69
noInline
[ Node { type: 'Identifier', start: 70, end: 73, name: 'foo' } ]
Node { type: 'Identifier', start: 70, end: 73, name: 'foo' }
Identifier
70
73
foo
Node {
  type: 'VariableDeclaration',
  start: 77,
  end: 96,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 81,
       end: 95,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
77
96
[ Node {
    type: 'VariableDeclarator',
    start: 81,
    end: 95,
    id: Node { type: 'Identifier', start: 81, end: 82, name: 'd' },
    init: 
     Node {
       type: 'NewExpression',
       start: 85,
       end: 95,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'VariableDeclarator',
  start: 81,
  end: 95,
  id: Node { type: 'Identifier', start: 81, end: 82, name: 'd' },
  init: 
   Node {
     type: 'NewExpression',
     start: 85,
     end: 95,
     callee: Node { type: 'Identifier', start: 89, end: 93, name: 'Date' },
     arguments: [] } }
VariableDeclarator
81
95
Node { type: 'Identifier', start: 81, end: 82, name: 'd' }
Identifier
81
82
d
Node {
  type: 'NewExpression',
  start: 85,
  end: 95,
  callee: Node { type: 'Identifier', start: 89, end: 93, name: 'Date' },
  arguments: [] }
NewExpression
85
95
Node { type: 'Identifier', start: 89, end: 93, name: 'Date' }
Identifier
89
93
Date
[]
var
Node {
  type: 'VariableDeclaration',
  start: 97,
  end: 122,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 101,
       end: 121,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
97
122
[ Node {
    type: 'VariableDeclarator',
    start: 101,
    end: 121,
    id: Node { type: 'Identifier', start: 101, end: 109, name: 'expected' },
    init: 
     Node {
       type: 'CallExpression',
       start: 112,
       end: 121,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 101,
  end: 121,
  id: Node { type: 'Identifier', start: 101, end: 109, name: 'expected' },
  init: 
   Node {
     type: 'CallExpression',
     start: 112,
     end: 121,
     callee: Node { type: 'Identifier', start: 112, end: 115, name: 'foo' },
     arguments: [ [Node], [Node] ] } }
VariableDeclarator
101
121
Node { type: 'Identifier', start: 101, end: 109, name: 'expected' }
Identifier
101
109
expected
Node {
  type: 'CallExpression',
  start: 112,
  end: 121,
  callee: Node { type: 'Identifier', start: 112, end: 115, name: 'foo' },
  arguments: 
   [ Node { type: 'Literal', start: 116, end: 117, value: 0, raw: '0' },
     Node { type: 'Identifier', start: 119, end: 120, name: 'd' } ] }
CallExpression
112
121
Node { type: 'Identifier', start: 112, end: 115, name: 'foo' }
Identifier
112
115
foo
[ Node { type: 'Literal', start: 116, end: 117, value: 0, raw: '0' },
  Node { type: 'Identifier', start: 119, end: 120, name: 'd' } ]
Node { type: 'Literal', start: 116, end: 117, value: 0, raw: '0' }
Literal
116
117
0
0
Node { type: 'Identifier', start: 119, end: 120, name: 'd' }
Identifier
119
120
d
var
Node {
  type: 'VariableDeclaration',
  start: 123,
  end: 143,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 127,
       end: 142,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
123
143
[ Node {
    type: 'VariableDeclarator',
    start: 127,
    end: 142,
    id: Node { type: 'Identifier', start: 127, end: 132, name: 'count' },
    init: 
     Node {
       type: 'Literal',
       start: 135,
       end: 142,
       value: 1000000,
       raw: '1000000' } } ]
Node {
  type: 'VariableDeclarator',
  start: 127,
  end: 142,
  id: Node { type: 'Identifier', start: 127, end: 132, name: 'count' },
  init: 
   Node {
     type: 'Literal',
     start: 135,
     end: 142,
     value: 1000000,
     raw: '1000000' } }
VariableDeclarator
127
142
Node { type: 'Identifier', start: 127, end: 132, name: 'count' }
Identifier
127
132
count
Node {
  type: 'Literal',
  start: 135,
  end: 142,
  value: 1000000,
  raw: '1000000' }
Literal
135
142
1000000
1000000
var
Node {
  type: 'VariableDeclaration',
  start: 144,
  end: 159,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 148,
       end: 158,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
144
159
[ Node {
    type: 'VariableDeclarator',
    start: 148,
    end: 158,
    id: Node { type: 'Identifier', start: 148, end: 154, name: 'result' },
    init: Node { type: 'Literal', start: 157, end: 158, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 148,
  end: 158,
  id: Node { type: 'Identifier', start: 148, end: 154, name: 'result' },
  init: Node { type: 'Literal', start: 157, end: 158, value: 0, raw: '0' } }
VariableDeclarator
148
158
Node { type: 'Identifier', start: 148, end: 154, name: 'result' }
Identifier
148
154
result
Node { type: 'Literal', start: 157, end: 158, value: 0, raw: '0' }
Literal
157
158
0
0
var
Node {
  type: 'ForStatement',
  start: 160,
  end: 220,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 165,
     end: 174,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 177,
     end: 186,
     left: Node { type: 'Identifier', start: 177, end: 178, name: 'i' },
     operator: '<',
     right: Node { type: 'Identifier', start: 181, end: 186, name: 'count' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 188,
     end: 191,
     operator: '++',
     prefix: false,
     argument: Node { type: 'Identifier', start: 188, end: 189, name: 'i' } },
  body: Node { type: 'BlockStatement', start: 192, end: 220, body: [ [Node] ] } }
ForStatement
160
220
Node {
  type: 'VariableDeclaration',
  start: 165,
  end: 174,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 169,
       end: 174,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
165
174
[ Node {
    type: 'VariableDeclarator',
    start: 169,
    end: 174,
    id: Node { type: 'Identifier', start: 169, end: 170, name: 'i' },
    init: Node { type: 'Literal', start: 173, end: 174, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 169,
  end: 174,
  id: Node { type: 'Identifier', start: 169, end: 170, name: 'i' },
  init: Node { type: 'Literal', start: 173, end: 174, value: 0, raw: '0' } }
VariableDeclarator
169
174
Node { type: 'Identifier', start: 169, end: 170, name: 'i' }
Identifier
169
170
i
Node { type: 'Literal', start: 173, end: 174, value: 0, raw: '0' }
Literal
173
174
0
0
var
Node {
  type: 'BinaryExpression',
  start: 177,
  end: 186,
  left: Node { type: 'Identifier', start: 177, end: 178, name: 'i' },
  operator: '<',
  right: Node { type: 'Identifier', start: 181, end: 186, name: 'count' } }
BinaryExpression
177
186
Node { type: 'Identifier', start: 177, end: 178, name: 'i' }
Identifier
177
178
i
<
Node { type: 'Identifier', start: 181, end: 186, name: 'count' }
Identifier
181
186
count
Node {
  type: 'UpdateExpression',
  start: 188,
  end: 191,
  operator: '++',
  prefix: false,
  argument: Node { type: 'Identifier', start: 188, end: 189, name: 'i' } }
UpdateExpression
188
191
++
false
Node { type: 'Identifier', start: 188, end: 189, name: 'i' }
Identifier
188
189
i
Node {
  type: 'BlockStatement',
  start: 192,
  end: 220,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 198,
       end: 218,
       expression: [Node] } ] }
BlockStatement
192
220
[ Node {
    type: 'ExpressionStatement',
    start: 198,
    end: 218,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 198,
       end: 217,
       operator: '+=',
       left: [Node],
       right: [Node] } } ]
Node {
  type: 'ExpressionStatement',
  start: 198,
  end: 218,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 198,
     end: 217,
     operator: '+=',
     left: Node { type: 'Identifier', start: 198, end: 204, name: 'result' },
     right: 
      Node {
        type: 'CallExpression',
        start: 208,
        end: 217,
        callee: [Node],
        arguments: [Array] } } }
ExpressionStatement
198
218
Node {
  type: 'AssignmentExpression',
  start: 198,
  end: 217,
  operator: '+=',
  left: Node { type: 'Identifier', start: 198, end: 204, name: 'result' },
  right: 
   Node {
     type: 'CallExpression',
     start: 208,
     end: 217,
     callee: Node { type: 'Identifier', start: 208, end: 211, name: 'foo' },
     arguments: [ [Node], [Node] ] } }
AssignmentExpression
198
217
+=
Node { type: 'Identifier', start: 198, end: 204, name: 'result' }
Identifier
198
204
result
Node {
  type: 'CallExpression',
  start: 208,
  end: 217,
  callee: Node { type: 'Identifier', start: 208, end: 211, name: 'foo' },
  arguments: 
   [ Node { type: 'Literal', start: 212, end: 213, value: 0, raw: '0' },
     Node { type: 'Identifier', start: 215, end: 216, name: 'd' } ] }
CallExpression
208
217
Node { type: 'Identifier', start: 208, end: 211, name: 'foo' }
Identifier
208
211
foo
[ Node { type: 'Literal', start: 212, end: 213, value: 0, raw: '0' },
  Node { type: 'Identifier', start: 215, end: 216, name: 'd' } ]
Node { type: 'Literal', start: 212, end: 213, value: 0, raw: '0' }
Literal
212
213
0
0
Node { type: 'Identifier', start: 215, end: 216, name: 'd' }
Identifier
215
216
d
Node {
  type: 'IfStatement',
  start: 222,
  end: 295,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 226,
     end: 252,
     left: Node { type: 'Identifier', start: 226, end: 232, name: 'result' },
     operator: '!=',
     right: 
      Node {
        type: 'BinaryExpression',
        start: 236,
        end: 252,
        left: [Node],
        operator: '*',
        right: [Node] } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 258,
     end: 295,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 264,
        end: 294,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
222
295
Node {
  type: 'BinaryExpression',
  start: 226,
  end: 252,
  left: Node { type: 'Identifier', start: 226, end: 232, name: 'result' },
  operator: '!=',
  right: 
   Node {
     type: 'BinaryExpression',
     start: 236,
     end: 252,
     left: Node { type: 'Identifier', start: 236, end: 241, name: 'count' },
     operator: '*',
     right: Node { type: 'Identifier', start: 244, end: 252, name: 'expected' } } }
BinaryExpression
226
252
Node { type: 'Identifier', start: 226, end: 232, name: 'result' }
Identifier
226
232
result
!=
Node {
  type: 'BinaryExpression',
  start: 236,
  end: 252,
  left: Node { type: 'Identifier', start: 236, end: 241, name: 'count' },
  operator: '*',
  right: Node { type: 'Identifier', start: 244, end: 252, name: 'expected' } }
BinaryExpression
236
252
Node { type: 'Identifier', start: 236, end: 241, name: 'count' }
Identifier
236
241
count
*
Node { type: 'Identifier', start: 244, end: 252, name: 'expected' }
Identifier
244
252
expected
Node {
  type: 'ThrowStatement',
  start: 258,
  end: 295,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 264,
     end: 294,
     left: 
      Node {
        type: 'Literal',
        start: 264,
        end: 285,
        value: 'Error: bad result: ',
        raw: '"Error: bad result: "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 288, end: 294, name: 'result' } } }
ThrowStatement
258
295
Node {
  type: 'BinaryExpression',
  start: 264,
  end: 294,
  left: 
   Node {
     type: 'Literal',
     start: 264,
     end: 285,
     value: 'Error: bad result: ',
     raw: '"Error: bad result: "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 288, end: 294, name: 'result' } }
BinaryExpression
264
294
Node {
  type: 'Literal',
  start: 264,
  end: 285,
  value: 'Error: bad result: ',
  raw: '"Error: bad result: "' }
Literal
264
285
Error: bad result: 
"Error: bad result: "
+
Node { type: 'Identifier', start: 288, end: 294, name: 'result' }
Identifier
288
294
result
null
[+] Exception: ftl-library-inline-gettimezoneoffset.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 586,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 44,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 46,
       end: 60,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 62,
       end: 104,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 105,
       end: 123,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 124,
       end: 253,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 255,
       end: 585,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
586
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 44,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 15, end: 44, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 46,
    end: 60,
    expression: 
     Node {
       type: 'CallExpression',
       start: 46,
       end: 59,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 62,
    end: 104,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 105,
    end: 123,
    expression: 
     Node {
       type: 'CallExpression',
       start: 105,
       end: 122,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 124,
    end: 253,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 129,
       end: 138,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 140,
       end: 150,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 152,
       end: 155,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 157, end: 253, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 255,
    end: 585,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 260,
       end: 269,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 271,
       end: 277,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 279,
       end: 282,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 284, end: 585, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 44,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 13, end: 14, name: 'd' } ],
  body: Node { type: 'BlockStatement', start: 15, end: 44, body: [ [Node] ] } }
FunctionDeclaration
0
44
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'd' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'd' }
Identifier
13
14
d
Node {
  type: 'BlockStatement',
  start: 15,
  end: 44,
  body: 
   [ Node { type: 'ReturnStatement', start: 21, end: 42, argument: [Node] } ] }
BlockStatement
15
44
[ Node {
    type: 'ReturnStatement',
    start: 21,
    end: 42,
    argument: 
     Node {
       type: 'CallExpression',
       start: 28,
       end: 41,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'ReturnStatement',
  start: 21,
  end: 42,
  argument: 
   Node {
     type: 'CallExpression',
     start: 28,
     end: 41,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 28,
        end: 37,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [ [Node] ] } }
ReturnStatement
21
42
Node {
  type: 'CallExpression',
  start: 28,
  end: 41,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 28,
     end: 37,
     object: Node { type: 'Identifier', start: 28, end: 29, name: 'd' },
     property: Node { type: 'Identifier', start: 30, end: 37, name: 'getInt8' },
     computed: false },
  arguments: 
   [ Node { type: 'Literal', start: 38, end: 40, value: 42, raw: '42' } ] }
CallExpression
28
41
Node {
  type: 'MemberExpression',
  start: 28,
  end: 37,
  object: Node { type: 'Identifier', start: 28, end: 29, name: 'd' },
  property: Node { type: 'Identifier', start: 30, end: 37, name: 'getInt8' },
  computed: false }
MemberExpression
28
37
Node { type: 'Identifier', start: 28, end: 29, name: 'd' }
Identifier
28
29
d
Node { type: 'Identifier', start: 30, end: 37, name: 'getInt8' }
Identifier
30
37
getInt8
false
[ Node { type: 'Literal', start: 38, end: 40, value: 42, raw: '42' } ]
Node { type: 'Literal', start: 38, end: 40, value: 42, raw: '42' }
Literal
38
40
42
42
Node {
  type: 'ExpressionStatement',
  start: 46,
  end: 60,
  expression: 
   Node {
     type: 'CallExpression',
     start: 46,
     end: 59,
     callee: Node { type: 'Identifier', start: 46, end: 54, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
46
60
Node {
  type: 'CallExpression',
  start: 46,
  end: 59,
  callee: Node { type: 'Identifier', start: 46, end: 54, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 55, end: 58, name: 'foo' } ] }
CallExpression
46
59
Node { type: 'Identifier', start: 46, end: 54, name: 'noInline' }
Identifier
46
54
noInline
[ Node { type: 'Identifier', start: 55, end: 58, name: 'foo' } ]
Node { type: 'Identifier', start: 55, end: 58, name: 'foo' }
Identifier
55
58
foo
Node {
  type: 'VariableDeclaration',
  start: 62,
  end: 104,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 66,
       end: 103,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
62
104
[ Node {
    type: 'VariableDeclarator',
    start: 66,
    end: 103,
    id: Node { type: 'Identifier', start: 66, end: 67, name: 'd' },
    init: 
     Node {
       type: 'NewExpression',
       start: 70,
       end: 103,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 66,
  end: 103,
  id: Node { type: 'Identifier', start: 66, end: 67, name: 'd' },
  init: 
   Node {
     type: 'NewExpression',
     start: 70,
     end: 103,
     callee: Node { type: 'Identifier', start: 74, end: 82, name: 'DataView' },
     arguments: [ [Node] ] } }
VariableDeclarator
66
103
Node { type: 'Identifier', start: 66, end: 67, name: 'd' }
Identifier
66
67
d
Node {
  type: 'NewExpression',
  start: 70,
  end: 103,
  callee: Node { type: 'Identifier', start: 74, end: 82, name: 'DataView' },
  arguments: 
   [ Node {
       type: 'NewExpression',
       start: 83,
       end: 102,
       callee: [Node],
       arguments: [Array] } ] }
NewExpression
70
103
Node { type: 'Identifier', start: 74, end: 82, name: 'DataView' }
Identifier
74
82
DataView
[ Node {
    type: 'NewExpression',
    start: 83,
    end: 102,
    callee: Node { type: 'Identifier', start: 87, end: 98, name: 'ArrayBuffer' },
    arguments: [ [Node] ] } ]
Node {
  type: 'NewExpression',
  start: 83,
  end: 102,
  callee: Node { type: 'Identifier', start: 87, end: 98, name: 'ArrayBuffer' },
  arguments: 
   [ Node { type: 'Literal', start: 99, end: 101, value: 43, raw: '43' } ] }
NewExpression
83
102
Node { type: 'Identifier', start: 87, end: 98, name: 'ArrayBuffer' }
Identifier
87
98
ArrayBuffer
[ Node { type: 'Literal', start: 99, end: 101, value: 43, raw: '43' } ]
Node { type: 'Literal', start: 99, end: 101, value: 43, raw: '43' }
Literal
99
101
43
43
var
Node {
  type: 'ExpressionStatement',
  start: 105,
  end: 123,
  expression: 
   Node {
     type: 'CallExpression',
     start: 105,
     end: 122,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 105,
        end: 114,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [ [Node], [Node] ] } }
ExpressionStatement
105
123
Node {
  type: 'CallExpression',
  start: 105,
  end: 122,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 105,
     end: 114,
     object: Node { type: 'Identifier', start: 105, end: 106, name: 'd' },
     property: Node { type: 'Identifier', start: 107, end: 114, name: 'setInt8' },
     computed: false },
  arguments: 
   [ Node { type: 'Literal', start: 115, end: 117, value: 42, raw: '42' },
     Node { type: 'Literal', start: 119, end: 121, value: 43, raw: '43' } ] }
CallExpression
105
122
Node {
  type: 'MemberExpression',
  start: 105,
  end: 114,
  object: Node { type: 'Identifier', start: 105, end: 106, name: 'd' },
  property: Node { type: 'Identifier', start: 107, end: 114, name: 'setInt8' },
  computed: false }
MemberExpression
105
114
Node { type: 'Identifier', start: 105, end: 106, name: 'd' }
Identifier
105
106
d
Node { type: 'Identifier', start: 107, end: 114, name: 'setInt8' }
Identifier
107
114
setInt8
false
[ Node { type: 'Literal', start: 115, end: 117, value: 42, raw: '42' },
  Node { type: 'Literal', start: 119, end: 121, value: 43, raw: '43' } ]
Node { type: 'Literal', start: 115, end: 117, value: 42, raw: '42' }
Literal
115
117
42
42
Node { type: 'Literal', start: 119, end: 121, value: 43, raw: '43' }
Literal
119
121
43
43
Node {
  type: 'ForStatement',
  start: 124,
  end: 253,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 129,
     end: 138,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 140,
     end: 150,
     left: Node { type: 'Identifier', start: 140, end: 141, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 144,
        end: 150,
        value: 100000,
        raw: '100000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 152,
     end: 155,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 154, end: 155, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 157,
     end: 253,
     body: [ [Node], [Node] ] } }
ForStatement
124
253
Node {
  type: 'VariableDeclaration',
  start: 129,
  end: 138,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 133,
       end: 138,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
129
138
[ Node {
    type: 'VariableDeclarator',
    start: 133,
    end: 138,
    id: Node { type: 'Identifier', start: 133, end: 134, name: 'i' },
    init: Node { type: 'Literal', start: 137, end: 138, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 133,
  end: 138,
  id: Node { type: 'Identifier', start: 133, end: 134, name: 'i' },
  init: Node { type: 'Literal', start: 137, end: 138, value: 0, raw: '0' } }
VariableDeclarator
133
138
Node { type: 'Identifier', start: 133, end: 134, name: 'i' }
Identifier
133
134
i
Node { type: 'Literal', start: 137, end: 138, value: 0, raw: '0' }
Literal
137
138
0
0
var
Node {
  type: 'BinaryExpression',
  start: 140,
  end: 150,
  left: Node { type: 'Identifier', start: 140, end: 141, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 144,
     end: 150,
     value: 100000,
     raw: '100000' } }
BinaryExpression
140
150
Node { type: 'Identifier', start: 140, end: 141, name: 'i' }
Identifier
140
141
i
<
Node {
  type: 'Literal',
  start: 144,
  end: 150,
  value: 100000,
  raw: '100000' }
Literal
144
150
100000
100000
Node {
  type: 'UpdateExpression',
  start: 152,
  end: 155,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 154, end: 155, name: 'i' } }
UpdateExpression
152
155
++
true
Node { type: 'Identifier', start: 154, end: 155, name: 'i' }
Identifier
154
155
i
Node {
  type: 'BlockStatement',
  start: 157,
  end: 253,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 163,
       end: 183,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 188,
       end: 251,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
157
253
[ Node {
    type: 'VariableDeclaration',
    start: 163,
    end: 183,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 188,
    end: 251,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 192,
       end: 204,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 214, end: 251, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 163,
  end: 183,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 167,
       end: 182,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
163
183
[ Node {
    type: 'VariableDeclarator',
    start: 167,
    end: 182,
    id: Node { type: 'Identifier', start: 167, end: 173, name: 'result' },
    init: 
     Node {
       type: 'CallExpression',
       start: 176,
       end: 182,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 167,
  end: 182,
  id: Node { type: 'Identifier', start: 167, end: 173, name: 'result' },
  init: 
   Node {
     type: 'CallExpression',
     start: 176,
     end: 182,
     callee: Node { type: 'Identifier', start: 176, end: 179, name: 'foo' },
     arguments: [ [Node] ] } }
VariableDeclarator
167
182
Node { type: 'Identifier', start: 167, end: 173, name: 'result' }
Identifier
167
173
result
Node {
  type: 'CallExpression',
  start: 176,
  end: 182,
  callee: Node { type: 'Identifier', start: 176, end: 179, name: 'foo' },
  arguments: 
   [ Node { type: 'Identifier', start: 180, end: 181, name: 'd' } ] }
CallExpression
176
182
Node { type: 'Identifier', start: 176, end: 179, name: 'foo' }
Identifier
176
179
foo
[ Node { type: 'Identifier', start: 180, end: 181, name: 'd' } ]
Node { type: 'Identifier', start: 180, end: 181, name: 'd' }
Identifier
180
181
d
var
Node {
  type: 'IfStatement',
  start: 188,
  end: 251,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 192,
     end: 204,
     left: Node { type: 'Identifier', start: 192, end: 198, name: 'result' },
     operator: '!=',
     right: Node { type: 'Literal', start: 202, end: 204, value: 43, raw: '43' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 214,
     end: 251,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 220,
        end: 250,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
188
251
Node {
  type: 'BinaryExpression',
  start: 192,
  end: 204,
  left: Node { type: 'Identifier', start: 192, end: 198, name: 'result' },
  operator: '!=',
  right: Node { type: 'Literal', start: 202, end: 204, value: 43, raw: '43' } }
BinaryExpression
192
204
Node { type: 'Identifier', start: 192, end: 198, name: 'result' }
Identifier
192
198
result
!=
Node { type: 'Literal', start: 202, end: 204, value: 43, raw: '43' }
Literal
202
204
43
43
Node {
  type: 'ThrowStatement',
  start: 214,
  end: 251,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 220,
     end: 250,
     left: 
      Node {
        type: 'Literal',
        start: 220,
        end: 241,
        value: 'Error: bad result: ',
        raw: '"Error: bad result: "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 244, end: 250, name: 'result' } } }
ThrowStatement
214
251
Node {
  type: 'BinaryExpression',
  start: 220,
  end: 250,
  left: 
   Node {
     type: 'Literal',
     start: 220,
     end: 241,
     value: 'Error: bad result: ',
     raw: '"Error: bad result: "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 244, end: 250, name: 'result' } }
BinaryExpression
220
250
Node {
  type: 'Literal',
  start: 220,
  end: 241,
  value: 'Error: bad result: ',
  raw: '"Error: bad result: "' }
Literal
220
241
Error: bad result: 
"Error: bad result: "
+
Node { type: 'Identifier', start: 244, end: 250, name: 'result' }
Identifier
244
250
result
null
[+] Exception: ftl-library-inlining-exceptions-dataview.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 311,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 71,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 73,
       end: 87,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 89,
       end: 95,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 96,
       end: 115,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ForStatement',
       start: 116,
       end: 273,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'IfStatement',
       start: 275,
       end: 311,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
311
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 71,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 15, end: 71, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 73,
    end: 87,
    expression: 
     Node {
       type: 'CallExpression',
       start: 73,
       end: 86,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 89,
    end: 95,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 96,
    end: 115,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ForStatement',
    start: 116,
    end: 273,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 121,
       end: 130,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 133,
       end: 142,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 144,
       end: 147,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 148, end: 273, body: [Array] } },
  Node {
    type: 'IfStatement',
    start: 275,
    end: 311,
    test: 
     Node {
       type: 'UnaryExpression',
       start: 279,
       end: 281,
       operator: '!',
       prefix: true,
       argument: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 287, end: 311, argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 71,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 13, end: 14, name: 'd' } ],
  body: Node { type: 'BlockStatement', start: 15, end: 71, body: [ [Node] ] } }
FunctionDeclaration
0
71
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'd' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'd' }
Identifier
13
14
d
Node {
  type: 'BlockStatement',
  start: 15,
  end: 71,
  body: 
   [ Node { type: 'ReturnStatement', start: 21, end: 69, argument: [Node] } ] }
BlockStatement
15
71
[ Node {
    type: 'ReturnStatement',
    start: 21,
    end: 69,
    argument: 
     Node {
       type: 'CallExpression',
       start: 28,
       end: 68,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'ReturnStatement',
  start: 21,
  end: 69,
  argument: 
   Node {
     type: 'CallExpression',
     start: 28,
     end: 68,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 28,
        end: 65,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [ [Node] ] } }
ReturnStatement
21
69
Node {
  type: 'CallExpression',
  start: 28,
  end: 68,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 28,
     end: 65,
     object: 
      Node {
        type: 'MemberExpression',
        start: 28,
        end: 60,
        object: [Node],
        property: [Node],
        computed: false },
     property: Node { type: 'Identifier', start: 61, end: 65, name: 'call' },
     computed: false },
  arguments: [ Node { type: 'Identifier', start: 66, end: 67, name: 'd' } ] }
CallExpression
28
68
Node {
  type: 'MemberExpression',
  start: 28,
  end: 65,
  object: 
   Node {
     type: 'MemberExpression',
     start: 28,
     end: 60,
     object: 
      Node {
        type: 'MemberExpression',
        start: 28,
        end: 42,
        object: [Node],
        property: [Node],
        computed: false },
     property: 
      Node {
        type: 'Identifier',
        start: 43,
        end: 60,
        name: 'getTimezoneOffset' },
     computed: false },
  property: Node { type: 'Identifier', start: 61, end: 65, name: 'call' },
  computed: false }
MemberExpression
28
65
Node {
  type: 'MemberExpression',
  start: 28,
  end: 60,
  object: 
   Node {
     type: 'MemberExpression',
     start: 28,
     end: 42,
     object: Node { type: 'Identifier', start: 28, end: 32, name: 'Date' },
     property: Node { type: 'Identifier', start: 33, end: 42, name: 'prototype' },
     computed: false },
  property: 
   Node {
     type: 'Identifier',
     start: 43,
     end: 60,
     name: 'getTimezoneOffset' },
  computed: false }
MemberExpression
28
60
Node {
  type: 'MemberExpression',
  start: 28,
  end: 42,
  object: Node { type: 'Identifier', start: 28, end: 32, name: 'Date' },
  property: Node { type: 'Identifier', start: 33, end: 42, name: 'prototype' },
  computed: false }
MemberExpression
28
42
Node { type: 'Identifier', start: 28, end: 32, name: 'Date' }
Identifier
28
32
Date
Node { type: 'Identifier', start: 33, end: 42, name: 'prototype' }
Identifier
33
42
prototype
false
Node {
  type: 'Identifier',
  start: 43,
  end: 60,
  name: 'getTimezoneOffset' }
Identifier
43
60
getTimezoneOffset
false
Node { type: 'Identifier', start: 61, end: 65, name: 'call' }
Identifier
61
65
call
false
[ Node { type: 'Identifier', start: 66, end: 67, name: 'd' } ]
Node { type: 'Identifier', start: 66, end: 67, name: 'd' }
Identifier
66
67
d
Node {
  type: 'ExpressionStatement',
  start: 73,
  end: 87,
  expression: 
   Node {
     type: 'CallExpression',
     start: 73,
     end: 86,
     callee: Node { type: 'Identifier', start: 73, end: 81, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
73
87
Node {
  type: 'CallExpression',
  start: 73,
  end: 86,
  callee: Node { type: 'Identifier', start: 73, end: 81, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 82, end: 85, name: 'foo' } ] }
CallExpression
73
86
Node { type: 'Identifier', start: 73, end: 81, name: 'noInline' }
Identifier
73
81
noInline
[ Node { type: 'Identifier', start: 82, end: 85, name: 'foo' } ]
Node { type: 'Identifier', start: 82, end: 85, name: 'foo' }
Identifier
82
85
foo
Node {
  type: 'VariableDeclaration',
  start: 89,
  end: 95,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 93,
       end: 94,
       id: [Node],
       init: null } ],
  kind: 'var' }
VariableDeclaration
89
95
[ Node {
    type: 'VariableDeclarator',
    start: 93,
    end: 94,
    id: Node { type: 'Identifier', start: 93, end: 94, name: 'x' },
    init: null } ]
Node {
  type: 'VariableDeclarator',
  start: 93,
  end: 94,
  id: Node { type: 'Identifier', start: 93, end: 94, name: 'x' },
  init: null }
VariableDeclarator
93
94
Node { type: 'Identifier', start: 93, end: 94, name: 'x' }
Identifier
93
94
x
null
[+] Exception: ftl-library-inlining-exceptions.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 478,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 345,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 347,
       end: 361,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 363,
       end: 373,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ForStatement',
       start: 374,
       end: 425,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'IfStatement',
       start: 427,
       end: 476,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
478
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 345,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 14, end: 345, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 347,
    end: 361,
    expression: 
     Node {
       type: 'CallExpression',
       start: 347,
       end: 360,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 363,
    end: 373,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ForStatement',
    start: 374,
    end: 425,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 379,
       end: 388,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 391,
       end: 400,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 402,
       end: 405,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 406, end: 425, body: [Array] } },
  Node {
    type: 'IfStatement',
    start: 427,
    end: 476,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 431,
       end: 445,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 451, end: 476, argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 345,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: 
   Node {
     type: 'BlockStatement',
     start: 14,
     end: 345,
     body: [ [Node], [Node], [Node], [Node], [Node], [Node], [Node] ] } }
FunctionDeclaration
0
345
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[]
Node {
  type: 'BlockStatement',
  start: 14,
  end: 345,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 20,
       end: 36,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 41,
       end: 86,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ForStatement',
       start: 92,
       end: 160,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 166,
       end: 229,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 234,
       end: 249,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ForStatement',
       start: 254,
       end: 324,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ReturnStatement',
       start: 329,
       end: 343,
       argument: [Node] } ] }
BlockStatement
14
345
[ Node {
    type: 'VariableDeclaration',
    start: 20,
    end: 36,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 41,
    end: 86,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ForStatement',
    start: 92,
    end: 160,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 97,
       end: 106,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 108,
       end: 121,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 123,
       end: 126,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 127, end: 160, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 166,
    end: 229,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 171,
       end: 180,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 182,
       end: 191,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 193,
       end: 196,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 197, end: 229, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 234,
    end: 249,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ForStatement',
    start: 254,
    end: 324,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 259,
       end: 268,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 270,
       end: 279,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 281,
       end: 284,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 285, end: 324, body: [Array] } },
  Node {
    type: 'ReturnStatement',
    start: 329,
    end: 343,
    argument: Node { type: 'Identifier', start: 336, end: 342, name: 'result' } } ]
Node {
  type: 'VariableDeclaration',
  start: 20,
  end: 36,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 24,
       end: 35,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
20
36
[ Node {
    type: 'VariableDeclarator',
    start: 24,
    end: 35,
    id: Node { type: 'Identifier', start: 24, end: 29, name: 'count' },
    init: Node { type: 'Literal', start: 32, end: 35, value: 100, raw: '100' } } ]
Node {
  type: 'VariableDeclarator',
  start: 24,
  end: 35,
  id: Node { type: 'Identifier', start: 24, end: 29, name: 'count' },
  init: Node { type: 'Literal', start: 32, end: 35, value: 100, raw: '100' } }
VariableDeclarator
24
35
Node { type: 'Identifier', start: 24, end: 29, name: 'count' }
Identifier
24
29
count
Node { type: 'Literal', start: 32, end: 35, value: 100, raw: '100' }
Literal
32
35
100
100
var
Node {
  type: 'VariableDeclaration',
  start: 41,
  end: 86,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 45,
       end: 85,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
41
86
[ Node {
    type: 'VariableDeclarator',
    start: 45,
    end: 85,
    id: Node { type: 'Identifier', start: 45, end: 46, name: 'd' },
    init: 
     Node {
       type: 'NewExpression',
       start: 49,
       end: 85,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 45,
  end: 85,
  id: Node { type: 'Identifier', start: 45, end: 46, name: 'd' },
  init: 
   Node {
     type: 'NewExpression',
     start: 49,
     end: 85,
     callee: Node { type: 'Identifier', start: 53, end: 61, name: 'DataView' },
     arguments: [ [Node] ] } }
VariableDeclarator
45
85
Node { type: 'Identifier', start: 45, end: 46, name: 'd' }
Identifier
45
46
d
Node {
  type: 'NewExpression',
  start: 49,
  end: 85,
  callee: Node { type: 'Identifier', start: 53, end: 61, name: 'DataView' },
  arguments: 
   [ Node {
       type: 'NewExpression',
       start: 62,
       end: 84,
       callee: [Node],
       arguments: [Array] } ] }
NewExpression
49
85
Node { type: 'Identifier', start: 53, end: 61, name: 'DataView' }
Identifier
53
61
DataView
[ Node {
    type: 'NewExpression',
    start: 62,
    end: 84,
    callee: Node { type: 'Identifier', start: 66, end: 77, name: 'ArrayBuffer' },
    arguments: [ [Node] ] } ]
Node {
  type: 'NewExpression',
  start: 62,
  end: 84,
  callee: Node { type: 'Identifier', start: 66, end: 77, name: 'ArrayBuffer' },
  arguments: 
   [ Node { type: 'Identifier', start: 78, end: 83, name: 'count' } ] }
NewExpression
62
84
Node { type: 'Identifier', start: 66, end: 77, name: 'ArrayBuffer' }
Identifier
66
77
ArrayBuffer
[ Node { type: 'Identifier', start: 78, end: 83, name: 'count' } ]
Node { type: 'Identifier', start: 78, end: 83, name: 'count' }
Identifier
78
83
count
var
Node {
  type: 'ForStatement',
  start: 92,
  end: 160,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 97,
     end: 106,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 108,
     end: 121,
     left: Node { type: 'Identifier', start: 108, end: 109, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'BinaryExpression',
        start: 112,
        end: 121,
        left: [Node],
        operator: '/',
        right: [Node] } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 123,
     end: 126,
     operator: '++',
     prefix: false,
     argument: Node { type: 'Identifier', start: 123, end: 124, name: 'i' } },
  body: Node { type: 'BlockStatement', start: 127, end: 160, body: [ [Node] ] } }
ForStatement
92
160
Node {
  type: 'VariableDeclaration',
  start: 97,
  end: 106,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 101,
       end: 106,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
97
106
[ Node {
    type: 'VariableDeclarator',
    start: 101,
    end: 106,
    id: Node { type: 'Identifier', start: 101, end: 102, name: 'i' },
    init: Node { type: 'Literal', start: 105, end: 106, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 101,
  end: 106,
  id: Node { type: 'Identifier', start: 101, end: 102, name: 'i' },
  init: Node { type: 'Literal', start: 105, end: 106, value: 0, raw: '0' } }
VariableDeclarator
101
106
Node { type: 'Identifier', start: 101, end: 102, name: 'i' }
Identifier
101
102
i
Node { type: 'Literal', start: 105, end: 106, value: 0, raw: '0' }
Literal
105
106
0
0
var
Node {
  type: 'BinaryExpression',
  start: 108,
  end: 121,
  left: Node { type: 'Identifier', start: 108, end: 109, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'BinaryExpression',
     start: 112,
     end: 121,
     left: Node { type: 'Identifier', start: 112, end: 117, name: 'count' },
     operator: '/',
     right: Node { type: 'Literal', start: 120, end: 121, value: 4, raw: '4' } } }
BinaryExpression
108
121
Node { type: 'Identifier', start: 108, end: 109, name: 'i' }
Identifier
108
109
i
<
Node {
  type: 'BinaryExpression',
  start: 112,
  end: 121,
  left: Node { type: 'Identifier', start: 112, end: 117, name: 'count' },
  operator: '/',
  right: Node { type: 'Literal', start: 120, end: 121, value: 4, raw: '4' } }
BinaryExpression
112
121
Node { type: 'Identifier', start: 112, end: 117, name: 'count' }
Identifier
112
117
count
/
Node { type: 'Literal', start: 120, end: 121, value: 4, raw: '4' }
Literal
120
121
4
4
Node {
  type: 'UpdateExpression',
  start: 123,
  end: 126,
  operator: '++',
  prefix: false,
  argument: Node { type: 'Identifier', start: 123, end: 124, name: 'i' } }
UpdateExpression
123
126
++
false
Node { type: 'Identifier', start: 123, end: 124, name: 'i' }
Identifier
123
124
i
Node {
  type: 'BlockStatement',
  start: 127,
  end: 160,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 137,
       end: 154,
       expression: [Node] } ] }
BlockStatement
127
160
[ Node {
    type: 'ExpressionStatement',
    start: 137,
    end: 154,
    expression: 
     Node {
       type: 'CallExpression',
       start: 137,
       end: 153,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'ExpressionStatement',
  start: 137,
  end: 154,
  expression: 
   Node {
     type: 'CallExpression',
     start: 137,
     end: 153,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 137,
        end: 147,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [ [Node], [Node] ] } }
ExpressionStatement
137
154
Node {
  type: 'CallExpression',
  start: 137,
  end: 153,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 137,
     end: 147,
     object: Node { type: 'Identifier', start: 137, end: 138, name: 'd' },
     property: Node { type: 'Identifier', start: 139, end: 147, name: 'setInt32' },
     computed: false },
  arguments: 
   [ Node { type: 'Identifier', start: 148, end: 149, name: 'i' },
     Node { type: 'Identifier', start: 151, end: 152, name: 'i' } ] }
CallExpression
137
153
Node {
  type: 'MemberExpression',
  start: 137,
  end: 147,
  object: Node { type: 'Identifier', start: 137, end: 138, name: 'd' },
  property: Node { type: 'Identifier', start: 139, end: 147, name: 'setInt32' },
  computed: false }
MemberExpression
137
147
Node { type: 'Identifier', start: 137, end: 138, name: 'd' }
Identifier
137
138
d
Node { type: 'Identifier', start: 139, end: 147, name: 'setInt32' }
Identifier
139
147
setInt32
false
[ Node { type: 'Identifier', start: 148, end: 149, name: 'i' },
  Node { type: 'Identifier', start: 151, end: 152, name: 'i' } ]
Node { type: 'Identifier', start: 148, end: 149, name: 'i' }
Identifier
148
149
i
Node { type: 'Identifier', start: 151, end: 152, name: 'i' }
Identifier
151
152
i
Node {
  type: 'ForStatement',
  start: 166,
  end: 229,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 171,
     end: 180,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 182,
     end: 191,
     left: Node { type: 'Identifier', start: 182, end: 183, name: 'i' },
     operator: '<',
     right: Node { type: 'Identifier', start: 186, end: 191, name: 'count' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 193,
     end: 196,
     operator: '++',
     prefix: false,
     argument: Node { type: 'Identifier', start: 193, end: 194, name: 'i' } },
  body: Node { type: 'BlockStatement', start: 197, end: 229, body: [ [Node] ] } }
ForStatement
166
229
Node {
  type: 'VariableDeclaration',
  start: 171,
  end: 180,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 175,
       end: 180,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
171
180
[ Node {
    type: 'VariableDeclarator',
    start: 175,
    end: 180,
    id: Node { type: 'Identifier', start: 175, end: 176, name: 'i' },
    init: Node { type: 'Literal', start: 179, end: 180, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 175,
  end: 180,
  id: Node { type: 'Identifier', start: 175, end: 176, name: 'i' },
  init: Node { type: 'Literal', start: 179, end: 180, value: 0, raw: '0' } }
VariableDeclarator
175
180
Node { type: 'Identifier', start: 175, end: 176, name: 'i' }
Identifier
175
176
i
Node { type: 'Literal', start: 179, end: 180, value: 0, raw: '0' }
Literal
179
180
0
0
var
Node {
  type: 'BinaryExpression',
  start: 182,
  end: 191,
  left: Node { type: 'Identifier', start: 182, end: 183, name: 'i' },
  operator: '<',
  right: Node { type: 'Identifier', start: 186, end: 191, name: 'count' } }
BinaryExpression
182
191
Node { type: 'Identifier', start: 182, end: 183, name: 'i' }
Identifier
182
183
i
<
Node { type: 'Identifier', start: 186, end: 191, name: 'count' }
Identifier
186
191
count
Node {
  type: 'UpdateExpression',
  start: 193,
  end: 196,
  operator: '++',
  prefix: false,
  argument: Node { type: 'Identifier', start: 193, end: 194, name: 'i' } }
UpdateExpression
193
196
++
false
Node { type: 'Identifier', start: 193, end: 194, name: 'i' }
Identifier
193
194
i
Node {
  type: 'BlockStatement',
  start: 197,
  end: 229,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 207,
       end: 223,
       expression: [Node] } ] }
BlockStatement
197
229
[ Node {
    type: 'ExpressionStatement',
    start: 207,
    end: 223,
    expression: 
     Node {
       type: 'CallExpression',
       start: 207,
       end: 222,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'ExpressionStatement',
  start: 207,
  end: 223,
  expression: 
   Node {
     type: 'CallExpression',
     start: 207,
     end: 222,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 207,
        end: 216,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [ [Node], [Node] ] } }
ExpressionStatement
207
223
Node {
  type: 'CallExpression',
  start: 207,
  end: 222,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 207,
     end: 216,
     object: Node { type: 'Identifier', start: 207, end: 208, name: 'd' },
     property: Node { type: 'Identifier', start: 209, end: 216, name: 'setInt8' },
     computed: false },
  arguments: 
   [ Node { type: 'Identifier', start: 217, end: 218, name: 'i' },
     Node { type: 'Identifier', start: 220, end: 221, name: 'i' } ] }
CallExpression
207
222
Node {
  type: 'MemberExpression',
  start: 207,
  end: 216,
  object: Node { type: 'Identifier', start: 207, end: 208, name: 'd' },
  property: Node { type: 'Identifier', start: 209, end: 216, name: 'setInt8' },
  computed: false }
MemberExpression
207
216
Node { type: 'Identifier', start: 207, end: 208, name: 'd' }
Identifier
207
208
d
Node { type: 'Identifier', start: 209, end: 216, name: 'setInt8' }
Identifier
209
216
setInt8
false
[ Node { type: 'Identifier', start: 217, end: 218, name: 'i' },
  Node { type: 'Identifier', start: 220, end: 221, name: 'i' } ]
Node { type: 'Identifier', start: 217, end: 218, name: 'i' }
Identifier
217
218
i
Node { type: 'Identifier', start: 220, end: 221, name: 'i' }
Identifier
220
221
i
Node {
  type: 'VariableDeclaration',
  start: 234,
  end: 249,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 238,
       end: 248,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
234
249
[ Node {
    type: 'VariableDeclarator',
    start: 238,
    end: 248,
    id: Node { type: 'Identifier', start: 238, end: 244, name: 'result' },
    init: Node { type: 'Literal', start: 247, end: 248, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 238,
  end: 248,
  id: Node { type: 'Identifier', start: 238, end: 244, name: 'result' },
  init: Node { type: 'Literal', start: 247, end: 248, value: 0, raw: '0' } }
VariableDeclarator
238
248
Node { type: 'Identifier', start: 238, end: 244, name: 'result' }
Identifier
238
244
result
Node { type: 'Literal', start: 247, end: 248, value: 0, raw: '0' }
Literal
247
248
0
0
var
Node {
  type: 'ForStatement',
  start: 254,
  end: 324,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 259,
     end: 268,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 270,
     end: 279,
     left: Node { type: 'Identifier', start: 270, end: 271, name: 'i' },
     operator: '<',
     right: Node { type: 'Identifier', start: 274, end: 279, name: 'count' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 281,
     end: 284,
     operator: '++',
     prefix: false,
     argument: Node { type: 'Identifier', start: 281, end: 282, name: 'i' } },
  body: Node { type: 'BlockStatement', start: 285, end: 324, body: [ [Node] ] } }
ForStatement
254
324
Node {
  type: 'VariableDeclaration',
  start: 259,
  end: 268,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 263,
       end: 268,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
259
268
[ Node {
    type: 'VariableDeclarator',
    start: 263,
    end: 268,
    id: Node { type: 'Identifier', start: 263, end: 264, name: 'i' },
    init: Node { type: 'Literal', start: 267, end: 268, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 263,
  end: 268,
  id: Node { type: 'Identifier', start: 263, end: 264, name: 'i' },
  init: Node { type: 'Literal', start: 267, end: 268, value: 0, raw: '0' } }
VariableDeclarator
263
268
Node { type: 'Identifier', start: 263, end: 264, name: 'i' }
Identifier
263
264
i
Node { type: 'Literal', start: 267, end: 268, value: 0, raw: '0' }
Literal
267
268
0
0
var
Node {
  type: 'BinaryExpression',
  start: 270,
  end: 279,
  left: Node { type: 'Identifier', start: 270, end: 271, name: 'i' },
  operator: '<',
  right: Node { type: 'Identifier', start: 274, end: 279, name: 'count' } }
BinaryExpression
270
279
Node { type: 'Identifier', start: 270, end: 271, name: 'i' }
Identifier
270
271
i
<
Node { type: 'Identifier', start: 274, end: 279, name: 'count' }
Identifier
274
279
count
Node {
  type: 'UpdateExpression',
  start: 281,
  end: 284,
  operator: '++',
  prefix: false,
  argument: Node { type: 'Identifier', start: 281, end: 282, name: 'i' } }
UpdateExpression
281
284
++
false
Node { type: 'Identifier', start: 281, end: 282, name: 'i' }
Identifier
281
282
i
Node {
  type: 'BlockStatement',
  start: 285,
  end: 324,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 295,
       end: 318,
       expression: [Node] } ] }
BlockStatement
285
324
[ Node {
    type: 'ExpressionStatement',
    start: 295,
    end: 318,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 295,
       end: 317,
       operator: '+=',
       left: [Node],
       right: [Node] } } ]
Node {
  type: 'ExpressionStatement',
  start: 295,
  end: 318,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 295,
     end: 317,
     operator: '+=',
     left: Node { type: 'Identifier', start: 295, end: 301, name: 'result' },
     right: 
      Node {
        type: 'CallExpression',
        start: 305,
        end: 317,
        callee: [Node],
        arguments: [Array] } } }
ExpressionStatement
295
318
Node {
  type: 'AssignmentExpression',
  start: 295,
  end: 317,
  operator: '+=',
  left: Node { type: 'Identifier', start: 295, end: 301, name: 'result' },
  right: 
   Node {
     type: 'CallExpression',
     start: 305,
     end: 317,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 305,
        end: 314,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [ [Node] ] } }
AssignmentExpression
295
317
+=
Node { type: 'Identifier', start: 295, end: 301, name: 'result' }
Identifier
295
301
result
Node {
  type: 'CallExpression',
  start: 305,
  end: 317,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 305,
     end: 314,
     object: Node { type: 'Identifier', start: 305, end: 306, name: 'd' },
     property: Node { type: 'Identifier', start: 307, end: 314, name: 'getInt8' },
     computed: false },
  arguments: 
   [ Node { type: 'Identifier', start: 315, end: 316, name: 'i' } ] }
CallExpression
305
317
Node {
  type: 'MemberExpression',
  start: 305,
  end: 314,
  object: Node { type: 'Identifier', start: 305, end: 306, name: 'd' },
  property: Node { type: 'Identifier', start: 307, end: 314, name: 'getInt8' },
  computed: false }
MemberExpression
305
314
Node { type: 'Identifier', start: 305, end: 306, name: 'd' }
Identifier
305
306
d
Node { type: 'Identifier', start: 307, end: 314, name: 'getInt8' }
Identifier
307
314
getInt8
false
[ Node { type: 'Identifier', start: 315, end: 316, name: 'i' } ]
Node { type: 'Identifier', start: 315, end: 316, name: 'i' }
Identifier
315
316
i
Node {
  type: 'ReturnStatement',
  start: 329,
  end: 343,
  argument: Node { type: 'Identifier', start: 336, end: 342, name: 'result' } }
ReturnStatement
329
343
Node { type: 'Identifier', start: 336, end: 342, name: 'result' }
Identifier
336
342
result
Node {
  type: 'ExpressionStatement',
  start: 347,
  end: 361,
  expression: 
   Node {
     type: 'CallExpression',
     start: 347,
     end: 360,
     callee: Node { type: 'Identifier', start: 347, end: 355, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
347
361
Node {
  type: 'CallExpression',
  start: 347,
  end: 360,
  callee: Node { type: 'Identifier', start: 347, end: 355, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 356, end: 359, name: 'foo' } ] }
CallExpression
347
360
Node { type: 'Identifier', start: 347, end: 355, name: 'noInline' }
Identifier
347
355
noInline
[ Node { type: 'Identifier', start: 356, end: 359, name: 'foo' } ]
Node { type: 'Identifier', start: 356, end: 359, name: 'foo' }
Identifier
356
359
foo
Node {
  type: 'VariableDeclaration',
  start: 363,
  end: 373,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 367,
       end: 372,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
363
373
[ Node {
    type: 'VariableDeclarator',
    start: 367,
    end: 372,
    id: Node { type: 'Identifier', start: 367, end: 368, name: 'r' },
    init: Node { type: 'Literal', start: 371, end: 372, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 367,
  end: 372,
  id: Node { type: 'Identifier', start: 367, end: 368, name: 'r' },
  init: Node { type: 'Literal', start: 371, end: 372, value: 0, raw: '0' } }
VariableDeclarator
367
372
Node { type: 'Identifier', start: 367, end: 368, name: 'r' }
Identifier
367
368
r
Node { type: 'Literal', start: 371, end: 372, value: 0, raw: '0' }
Literal
371
372
0
0
var
Node {
  type: 'ForStatement',
  start: 374,
  end: 425,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 379,
     end: 388,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 391,
     end: 400,
     left: Node { type: 'Identifier', start: 391, end: 392, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 395,
        end: 400,
        value: 50000,
        raw: '50000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 402,
     end: 405,
     operator: '++',
     prefix: false,
     argument: Node { type: 'Identifier', start: 402, end: 403, name: 'i' } },
  body: Node { type: 'BlockStatement', start: 406, end: 425, body: [ [Node] ] } }
ForStatement
374
425
Node {
  type: 'VariableDeclaration',
  start: 379,
  end: 388,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 383,
       end: 388,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
379
388
[ Node {
    type: 'VariableDeclarator',
    start: 383,
    end: 388,
    id: Node { type: 'Identifier', start: 383, end: 384, name: 'i' },
    init: Node { type: 'Literal', start: 387, end: 388, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 383,
  end: 388,
  id: Node { type: 'Identifier', start: 383, end: 384, name: 'i' },
  init: Node { type: 'Literal', start: 387, end: 388, value: 0, raw: '0' } }
VariableDeclarator
383
388
Node { type: 'Identifier', start: 383, end: 384, name: 'i' }
Identifier
383
384
i
Node { type: 'Literal', start: 387, end: 388, value: 0, raw: '0' }
Literal
387
388
0
0
var
Node {
  type: 'BinaryExpression',
  start: 391,
  end: 400,
  left: Node { type: 'Identifier', start: 391, end: 392, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 395,
     end: 400,
     value: 50000,
     raw: '50000' } }
BinaryExpression
391
400
Node { type: 'Identifier', start: 391, end: 392, name: 'i' }
Identifier
391
392
i
<
Node {
  type: 'Literal',
  start: 395,
  end: 400,
  value: 50000,
  raw: '50000' }
Literal
395
400
50000
50000
Node {
  type: 'UpdateExpression',
  start: 402,
  end: 405,
  operator: '++',
  prefix: false,
  argument: Node { type: 'Identifier', start: 402, end: 403, name: 'i' } }
UpdateExpression
402
405
++
false
Node { type: 'Identifier', start: 402, end: 403, name: 'i' }
Identifier
402
403
i
Node {
  type: 'BlockStatement',
  start: 406,
  end: 425,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 412,
       end: 423,
       expression: [Node] } ] }
BlockStatement
406
425
[ Node {
    type: 'ExpressionStatement',
    start: 412,
    end: 423,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 412,
       end: 422,
       operator: '+=',
       left: [Node],
       right: [Node] } } ]
Node {
  type: 'ExpressionStatement',
  start: 412,
  end: 423,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 412,
     end: 422,
     operator: '+=',
     left: Node { type: 'Identifier', start: 412, end: 413, name: 'r' },
     right: 
      Node {
        type: 'CallExpression',
        start: 417,
        end: 422,
        callee: [Node],
        arguments: [] } } }
ExpressionStatement
412
423
Node {
  type: 'AssignmentExpression',
  start: 412,
  end: 422,
  operator: '+=',
  left: Node { type: 'Identifier', start: 412, end: 413, name: 'r' },
  right: 
   Node {
     type: 'CallExpression',
     start: 417,
     end: 422,
     callee: Node { type: 'Identifier', start: 417, end: 420, name: 'foo' },
     arguments: [] } }
AssignmentExpression
412
422
+=
Node { type: 'Identifier', start: 412, end: 413, name: 'r' }
Identifier
412
413
r
Node {
  type: 'CallExpression',
  start: 417,
  end: 422,
  callee: Node { type: 'Identifier', start: 417, end: 420, name: 'foo' },
  arguments: [] }
CallExpression
417
422
Node { type: 'Identifier', start: 417, end: 420, name: 'foo' }
Identifier
417
420
foo
[]
Node {
  type: 'IfStatement',
  start: 427,
  end: 476,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 431,
     end: 445,
     left: Node { type: 'Identifier', start: 431, end: 432, name: 'r' },
     operator: '!=',
     right: 
      Node {
        type: 'Literal',
        start: 436,
        end: 445,
        value: 247500000,
        raw: '247500000' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 451,
     end: 476,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 457,
        end: 475,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
427
476
Node {
  type: 'BinaryExpression',
  start: 431,
  end: 445,
  left: Node { type: 'Identifier', start: 431, end: 432, name: 'r' },
  operator: '!=',
  right: 
   Node {
     type: 'Literal',
     start: 436,
     end: 445,
     value: 247500000,
     raw: '247500000' } }
BinaryExpression
431
445
Node { type: 'Identifier', start: 431, end: 432, name: 'r' }
Identifier
431
432
r
!=
Node {
  type: 'Literal',
  start: 436,
  end: 445,
  value: 247500000,
  raw: '247500000' }
Literal
436
445
247500000
247500000
Node {
  type: 'ThrowStatement',
  start: 451,
  end: 476,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 457,
     end: 475,
     left: 
      Node {
        type: 'Literal',
        start: 457,
        end: 471,
        value: 'Bad result: ',
        raw: '"Bad result: "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 474, end: 475, name: 'r' } } }
ThrowStatement
451
476
Node {
  type: 'BinaryExpression',
  start: 457,
  end: 475,
  left: 
   Node {
     type: 'Literal',
     start: 457,
     end: 471,
     value: 'Bad result: ',
     raw: '"Bad result: "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 474, end: 475, name: 'r' } }
BinaryExpression
457
475
Node {
  type: 'Literal',
  start: 457,
  end: 471,
  value: 'Bad result: ',
  raw: '"Bad result: "' }
Literal
457
471
Bad result: 
"Bad result: "
+
Node { type: 'Identifier', start: 474, end: 475, name: 'r' }
Identifier
474
475
r
null
[+] Exception: ftl-library-inlining-loops.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 128,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 45,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 47,
       end: 61,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 63,
       end: 73,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ForStatement',
       start: 75,
       end: 127,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
128
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 45,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 15, end: 45, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 47,
    end: 61,
    expression: 
     Node {
       type: 'CallExpression',
       start: 47,
       end: 60,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 63,
    end: 73,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ForStatement',
    start: 75,
    end: 127,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 80,
       end: 89,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 92,
       end: 102,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 104,
       end: 107,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 108, end: 127, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 45,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 13, end: 14, name: 'x' } ],
  body: Node { type: 'BlockStatement', start: 15, end: 45, body: [ [Node] ] } }
FunctionDeclaration
0
45
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'x' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'x' }
Identifier
13
14
x
Node {
  type: 'BlockStatement',
  start: 15,
  end: 45,
  body: 
   [ Node { type: 'ReturnStatement', start: 21, end: 43, argument: [Node] } ] }
BlockStatement
15
45
[ Node {
    type: 'ReturnStatement',
    start: 21,
    end: 43,
    argument: 
     Node {
       type: 'CallExpression',
       start: 28,
       end: 42,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'ReturnStatement',
  start: 21,
  end: 43,
  argument: 
   Node {
     type: 'CallExpression',
     start: 28,
     end: 42,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 28,
        end: 39,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [ [Node] ] } }
ReturnStatement
21
43
Node {
  type: 'CallExpression',
  start: 28,
  end: 42,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 28,
     end: 39,
     object: Node { type: 'Identifier', start: 28, end: 32, name: 'Math' },
     property: Node { type: 'Identifier', start: 33, end: 39, name: 'random' },
     computed: false },
  arguments: [ Node { type: 'Identifier', start: 40, end: 41, name: 'x' } ] }
CallExpression
28
42
Node {
  type: 'MemberExpression',
  start: 28,
  end: 39,
  object: Node { type: 'Identifier', start: 28, end: 32, name: 'Math' },
  property: Node { type: 'Identifier', start: 33, end: 39, name: 'random' },
  computed: false }
MemberExpression
28
39
Node { type: 'Identifier', start: 28, end: 32, name: 'Math' }
Identifier
28
32
Math
Node { type: 'Identifier', start: 33, end: 39, name: 'random' }
Identifier
33
39
random
false
[ Node { type: 'Identifier', start: 40, end: 41, name: 'x' } ]
Node { type: 'Identifier', start: 40, end: 41, name: 'x' }
Identifier
40
41
x
Node {
  type: 'ExpressionStatement',
  start: 47,
  end: 61,
  expression: 
   Node {
     type: 'CallExpression',
     start: 47,
     end: 60,
     callee: Node { type: 'Identifier', start: 47, end: 55, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
47
61
Node {
  type: 'CallExpression',
  start: 47,
  end: 60,
  callee: Node { type: 'Identifier', start: 47, end: 55, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 56, end: 59, name: 'foo' } ] }
CallExpression
47
60
Node { type: 'Identifier', start: 47, end: 55, name: 'noInline' }
Identifier
47
55
noInline
[ Node { type: 'Identifier', start: 56, end: 59, name: 'foo' } ]
Node { type: 'Identifier', start: 56, end: 59, name: 'foo' }
Identifier
56
59
foo
Node {
  type: 'VariableDeclaration',
  start: 63,
  end: 73,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 67,
       end: 72,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
63
73
[ Node {
    type: 'VariableDeclarator',
    start: 67,
    end: 72,
    id: Node { type: 'Identifier', start: 67, end: 68, name: 'x' },
    init: Node { type: 'Literal', start: 71, end: 72, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 67,
  end: 72,
  id: Node { type: 'Identifier', start: 67, end: 68, name: 'x' },
  init: Node { type: 'Literal', start: 71, end: 72, value: 0, raw: '0' } }
VariableDeclarator
67
72
Node { type: 'Identifier', start: 67, end: 68, name: 'x' }
Identifier
67
68
x
Node { type: 'Literal', start: 71, end: 72, value: 0, raw: '0' }
Literal
71
72
0
0
var
Node {
  type: 'ForStatement',
  start: 75,
  end: 127,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 80,
     end: 89,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 92,
     end: 102,
     left: Node { type: 'Identifier', start: 92, end: 93, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 96,
        end: 102,
        value: 100000,
        raw: '100000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 104,
     end: 107,
     operator: '++',
     prefix: false,
     argument: Node { type: 'Identifier', start: 104, end: 105, name: 'i' } },
  body: Node { type: 'BlockStatement', start: 108, end: 127, body: [ [Node] ] } }
ForStatement
75
127
Node {
  type: 'VariableDeclaration',
  start: 80,
  end: 89,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 84,
       end: 89,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
80
89
[ Node {
    type: 'VariableDeclarator',
    start: 84,
    end: 89,
    id: Node { type: 'Identifier', start: 84, end: 85, name: 'i' },
    init: Node { type: 'Literal', start: 88, end: 89, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 84,
  end: 89,
  id: Node { type: 'Identifier', start: 84, end: 85, name: 'i' },
  init: Node { type: 'Literal', start: 88, end: 89, value: 0, raw: '0' } }
VariableDeclarator
84
89
Node { type: 'Identifier', start: 84, end: 85, name: 'i' }
Identifier
84
85
i
Node { type: 'Literal', start: 88, end: 89, value: 0, raw: '0' }
Literal
88
89
0
0
var
Node {
  type: 'BinaryExpression',
  start: 92,
  end: 102,
  left: Node { type: 'Identifier', start: 92, end: 93, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 96,
     end: 102,
     value: 100000,
     raw: '100000' } }
BinaryExpression
92
102
Node { type: 'Identifier', start: 92, end: 93, name: 'i' }
Identifier
92
93
i
<
Node {
  type: 'Literal',
  start: 96,
  end: 102,
  value: 100000,
  raw: '100000' }
Literal
96
102
100000
100000
Node {
  type: 'UpdateExpression',
  start: 104,
  end: 107,
  operator: '++',
  prefix: false,
  argument: Node { type: 'Identifier', start: 104, end: 105, name: 'i' } }
UpdateExpression
104
107
++
false
Node { type: 'Identifier', start: 104, end: 105, name: 'i' }
Identifier
104
105
i
Node {
  type: 'BlockStatement',
  start: 108,
  end: 127,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 114,
       end: 125,
       expression: [Node] } ] }
BlockStatement
108
127
[ Node {
    type: 'ExpressionStatement',
    start: 114,
    end: 125,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 114,
       end: 124,
       operator: '=',
       left: [Node],
       right: [Node] } } ]
Node {
  type: 'ExpressionStatement',
  start: 114,
  end: 125,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 114,
     end: 124,
     operator: '=',
     left: Node { type: 'Identifier', start: 114, end: 115, name: 'x' },
     right: 
      Node {
        type: 'CallExpression',
        start: 118,
        end: 124,
        callee: [Node],
        arguments: [Array] } } }
ExpressionStatement
114
125
Node {
  type: 'AssignmentExpression',
  start: 114,
  end: 124,
  operator: '=',
  left: Node { type: 'Identifier', start: 114, end: 115, name: 'x' },
  right: 
   Node {
     type: 'CallExpression',
     start: 118,
     end: 124,
     callee: Node { type: 'Identifier', start: 118, end: 121, name: 'foo' },
     arguments: [ [Node] ] } }
AssignmentExpression
114
124
=
Node { type: 'Identifier', start: 114, end: 115, name: 'x' }
Identifier
114
115
x
Node {
  type: 'CallExpression',
  start: 118,
  end: 124,
  callee: Node { type: 'Identifier', start: 118, end: 121, name: 'foo' },
  arguments: 
   [ Node { type: 'Identifier', start: 122, end: 123, name: 'i' } ] }
CallExpression
118
124
Node { type: 'Identifier', start: 118, end: 121, name: 'foo' }
Identifier
118
121
foo
[ Node { type: 'Identifier', start: 122, end: 123, name: 'i' } ]
Node { type: 'Identifier', start: 122, end: 123, name: 'i' }
Identifier
122
123
i
script
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 204,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 53,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 55,
       end: 69,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 71,
       end: 82,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ForStatement',
       start: 84,
       end: 146,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'IfStatement',
       start: 148,
       end: 202,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
204
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 53,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 18, end: 53, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 55,
    end: 69,
    expression: 
     Node {
       type: 'CallExpression',
       start: 55,
       end: 68,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 71,
    end: 82,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ForStatement',
    start: 84,
    end: 146,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 89,
       end: 98,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 101,
       end: 111,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 113,
       end: 116,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 117, end: 146, body: [Array] } },
  Node {
    type: 'IfStatement',
    start: 148,
    end: 202,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 152,
       end: 162,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 168, end: 202, argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 53,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'i' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'x' } ],
  body: Node { type: 'BlockStatement', start: 18, end: 53, body: [ [Node] ] } }
FunctionDeclaration
0
53
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'i' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'x' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'i' }
Identifier
13
14
i
Node { type: 'Identifier', start: 16, end: 17, name: 'x' }
Identifier
16
17
x
Node {
  type: 'BlockStatement',
  start: 18,
  end: 53,
  body: 
   [ Node { type: 'ReturnStatement', start: 24, end: 51, argument: [Node] } ] }
BlockStatement
18
53
[ Node {
    type: 'ReturnStatement',
    start: 24,
    end: 51,
    argument: 
     Node {
       type: 'CallExpression',
       start: 31,
       end: 50,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'ReturnStatement',
  start: 24,
  end: 51,
  argument: 
   Node {
     type: 'CallExpression',
     start: 31,
     end: 50,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 31,
        end: 42,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [ [Node], [Node] ] } }
ReturnStatement
24
51
Node {
  type: 'CallExpression',
  start: 31,
  end: 50,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 31,
     end: 42,
     object: Node { type: 'Identifier', start: 31, end: 32, name: 'x' },
     property: Node { type: 'Identifier', start: 33, end: 42, name: 'substring' },
     computed: false },
  arguments: 
   [ Node { type: 'Literal', start: 44, end: 45, value: 2, raw: '2' },
     Node { type: 'Literal', start: 48, end: 49, value: 5, raw: '5' } ] }
CallExpression
31
50
Node {
  type: 'MemberExpression',
  start: 31,
  end: 42,
  object: Node { type: 'Identifier', start: 31, end: 32, name: 'x' },
  property: Node { type: 'Identifier', start: 33, end: 42, name: 'substring' },
  computed: false }
MemberExpression
31
42
Node { type: 'Identifier', start: 31, end: 32, name: 'x' }
Identifier
31
32
x
Node { type: 'Identifier', start: 33, end: 42, name: 'substring' }
Identifier
33
42
substring
false
[ Node { type: 'Literal', start: 44, end: 45, value: 2, raw: '2' },
  Node { type: 'Literal', start: 48, end: 49, value: 5, raw: '5' } ]
Node { type: 'Literal', start: 44, end: 45, value: 2, raw: '2' }
Literal
44
45
2
2
Node { type: 'Literal', start: 48, end: 49, value: 5, raw: '5' }
Literal
48
49
5
5
Node {
  type: 'ExpressionStatement',
  start: 55,
  end: 69,
  expression: 
   Node {
     type: 'CallExpression',
     start: 55,
     end: 68,
     callee: Node { type: 'Identifier', start: 55, end: 63, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
55
69
Node {
  type: 'CallExpression',
  start: 55,
  end: 68,
  callee: Node { type: 'Identifier', start: 55, end: 63, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 64, end: 67, name: 'foo' } ] }
CallExpression
55
68
Node { type: 'Identifier', start: 55, end: 63, name: 'noInline' }
Identifier
55
63
noInline
[ Node { type: 'Identifier', start: 64, end: 67, name: 'foo' } ]
Node { type: 'Identifier', start: 64, end: 67, name: 'foo' }
Identifier
64
67
foo
Node {
  type: 'VariableDeclaration',
  start: 71,
  end: 82,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 75,
       end: 81,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
71
82
[ Node {
    type: 'VariableDeclarator',
    start: 75,
    end: 81,
    id: Node { type: 'Identifier', start: 75, end: 76, name: 'x' },
    init: Node { type: 'Literal', start: 79, end: 81, value: '', raw: '""' } } ]
Node {
  type: 'VariableDeclarator',
  start: 75,
  end: 81,
  id: Node { type: 'Identifier', start: 75, end: 76, name: 'x' },
  init: Node { type: 'Literal', start: 79, end: 81, value: '', raw: '""' } }
VariableDeclarator
75
81
Node { type: 'Identifier', start: 75, end: 76, name: 'x' }
Identifier
75
76
x
Node { type: 'Literal', start: 79, end: 81, value: '', raw: '""' }
Literal
79
81

""
var
Node {
  type: 'ForStatement',
  start: 84,
  end: 146,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 89,
     end: 98,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 101,
     end: 111,
     left: Node { type: 'Identifier', start: 101, end: 102, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 105,
        end: 111,
        value: 100000,
        raw: '100000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 113,
     end: 116,
     operator: '++',
     prefix: false,
     argument: Node { type: 'Identifier', start: 113, end: 114, name: 'i' } },
  body: Node { type: 'BlockStatement', start: 117, end: 146, body: [ [Node] ] } }
ForStatement
84
146
Node {
  type: 'VariableDeclaration',
  start: 89,
  end: 98,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 93,
       end: 98,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
89
98
[ Node {
    type: 'VariableDeclarator',
    start: 93,
    end: 98,
    id: Node { type: 'Identifier', start: 93, end: 94, name: 'i' },
    init: Node { type: 'Literal', start: 97, end: 98, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 93,
  end: 98,
  id: Node { type: 'Identifier', start: 93, end: 94, name: 'i' },
  init: Node { type: 'Literal', start: 97, end: 98, value: 0, raw: '0' } }
VariableDeclarator
93
98
Node { type: 'Identifier', start: 93, end: 94, name: 'i' }
Identifier
93
94
i
Node { type: 'Literal', start: 97, end: 98, value: 0, raw: '0' }
Literal
97
98
0
0
var
Node {
  type: 'BinaryExpression',
  start: 101,
  end: 111,
  left: Node { type: 'Identifier', start: 101, end: 102, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 105,
     end: 111,
     value: 100000,
     raw: '100000' } }
BinaryExpression
101
111
Node { type: 'Identifier', start: 101, end: 102, name: 'i' }
Identifier
101
102
i
<
Node {
  type: 'Literal',
  start: 105,
  end: 111,
  value: 100000,
  raw: '100000' }
Literal
105
111
100000
100000
Node {
  type: 'UpdateExpression',
  start: 113,
  end: 116,
  operator: '++',
  prefix: false,
  argument: Node { type: 'Identifier', start: 113, end: 114, name: 'i' } }
UpdateExpression
113
116
++
false
Node { type: 'Identifier', start: 113, end: 114, name: 'i' }
Identifier
113
114
i
Node {
  type: 'BlockStatement',
  start: 117,
  end: 146,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 123,
       end: 144,
       expression: [Node] } ] }
BlockStatement
117
146
[ Node {
    type: 'ExpressionStatement',
    start: 123,
    end: 144,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 123,
       end: 143,
       operator: '=',
       left: [Node],
       right: [Node] } } ]
Node {
  type: 'ExpressionStatement',
  start: 123,
  end: 144,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 123,
     end: 143,
     operator: '=',
     left: Node { type: 'Identifier', start: 123, end: 124, name: 'x' },
     right: 
      Node {
        type: 'CallExpression',
        start: 127,
        end: 143,
        callee: [Node],
        arguments: [Array] } } }
ExpressionStatement
123
144
Node {
  type: 'AssignmentExpression',
  start: 123,
  end: 143,
  operator: '=',
  left: Node { type: 'Identifier', start: 123, end: 124, name: 'x' },
  right: 
   Node {
     type: 'CallExpression',
     start: 127,
     end: 143,
     callee: Node { type: 'Identifier', start: 127, end: 130, name: 'foo' },
     arguments: [ [Node], [Node] ] } }
AssignmentExpression
123
143
=
Node { type: 'Identifier', start: 123, end: 124, name: 'x' }
Identifier
123
124
x
Node {
  type: 'CallExpression',
  start: 127,
  end: 143,
  callee: Node { type: 'Identifier', start: 127, end: 130, name: 'foo' },
  arguments: 
   [ Node { type: 'Identifier', start: 131, end: 132, name: 'i' },
     Node {
       type: 'Literal',
       start: 134,
       end: 142,
       value: 'lkajsx',
       raw: '"lkajsx"' } ] }
CallExpression
127
143
Node { type: 'Identifier', start: 127, end: 130, name: 'foo' }
Identifier
127
130
foo
[ Node { type: 'Identifier', start: 131, end: 132, name: 'i' },
  Node {
    type: 'Literal',
    start: 134,
    end: 142,
    value: 'lkajsx',
    raw: '"lkajsx"' } ]
Node { type: 'Identifier', start: 131, end: 132, name: 'i' }
Identifier
131
132
i
Node {
  type: 'Literal',
  start: 134,
  end: 142,
  value: 'lkajsx',
  raw: '"lkajsx"' }
Literal
134
142
lkajsx
"lkajsx"
Node {
  type: 'IfStatement',
  start: 148,
  end: 202,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 152,
     end: 162,
     left: Node { type: 'Identifier', start: 152, end: 153, name: 'x' },
     operator: '!=',
     right: 
      Node {
        type: 'Literal',
        start: 157,
        end: 162,
        value: 'ajs',
        raw: '"ajs"' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 168,
     end: 202,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 174,
        end: 201,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
148
202
Node {
  type: 'BinaryExpression',
  start: 152,
  end: 162,
  left: Node { type: 'Identifier', start: 152, end: 153, name: 'x' },
  operator: '!=',
  right: 
   Node {
     type: 'Literal',
     start: 157,
     end: 162,
     value: 'ajs',
     raw: '"ajs"' } }
BinaryExpression
152
162
Node { type: 'Identifier', start: 152, end: 153, name: 'x' }
Identifier
152
153
x
!=
Node {
  type: 'Literal',
  start: 157,
  end: 162,
  value: 'ajs',
  raw: '"ajs"' }
Literal
157
162
ajs
"ajs"
Node {
  type: 'ThrowStatement',
  start: 168,
  end: 202,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 174,
     end: 201,
     left: 
      Node {
        type: 'Literal',
        start: 174,
        end: 198,
        value: 'Error: bad substring: ',
        raw: '"Error: bad substring: "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 200, end: 201, name: 'x' } } }
ThrowStatement
168
202
Node {
  type: 'BinaryExpression',
  start: 174,
  end: 201,
  left: 
   Node {
     type: 'Literal',
     start: 174,
     end: 198,
     value: 'Error: bad substring: ',
     raw: '"Error: bad substring: "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 200, end: 201, name: 'x' } }
BinaryExpression
174
201
Node {
  type: 'Literal',
  start: 174,
  end: 198,
  value: 'Error: bad substring: ',
  raw: '"Error: bad substring: "' }
Literal
174
198
Error: bad substring: 
"Error: bad substring: "
+
Node { type: 'Identifier', start: 200, end: 201, name: 'x' }
Identifier
200
201
x
null
[+] Exception: ftl-library-substring.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 195,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 34,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 36,
       end: 50,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 52,
       end: 193,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
195
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 34,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 16, end: 34, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 36,
    end: 50,
    expression: 
     Node {
       type: 'CallExpression',
       start: 36,
       end: 49,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 52,
    end: 193,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 57,
       end: 66,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 68,
       end: 77,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 79,
       end: 82,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 84, end: 193, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 34,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 13, end: 14, name: 'x' } ],
  body: Node { type: 'BlockStatement', start: 16, end: 34, body: [ [Node] ] } }
FunctionDeclaration
0
34
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'x' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'x' }
Identifier
13
14
x
Node {
  type: 'BlockStatement',
  start: 16,
  end: 34,
  body: 
   [ Node { type: 'ReturnStatement', start: 22, end: 32, argument: [Node] } ] }
BlockStatement
16
34
[ Node {
    type: 'ReturnStatement',
    start: 22,
    end: 32,
    argument: 
     Node {
       type: 'UnaryExpression',
       start: 29,
       end: 31,
       operator: '-',
       prefix: true,
       argument: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 22,
  end: 32,
  argument: 
   Node {
     type: 'UnaryExpression',
     start: 29,
     end: 31,
     operator: '-',
     prefix: true,
     argument: Node { type: 'Identifier', start: 30, end: 31, name: 'x' } } }
ReturnStatement
22
32
Node {
  type: 'UnaryExpression',
  start: 29,
  end: 31,
  operator: '-',
  prefix: true,
  argument: Node { type: 'Identifier', start: 30, end: 31, name: 'x' } }
UnaryExpression
29
31
-
true
Node { type: 'Identifier', start: 30, end: 31, name: 'x' }
Identifier
30
31
x
Node {
  type: 'ExpressionStatement',
  start: 36,
  end: 50,
  expression: 
   Node {
     type: 'CallExpression',
     start: 36,
     end: 49,
     callee: Node { type: 'Identifier', start: 36, end: 44, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
36
50
Node {
  type: 'CallExpression',
  start: 36,
  end: 49,
  callee: Node { type: 'Identifier', start: 36, end: 44, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 45, end: 48, name: 'foo' } ] }
CallExpression
36
49
Node { type: 'Identifier', start: 36, end: 44, name: 'noInline' }
Identifier
36
44
noInline
[ Node { type: 'Identifier', start: 45, end: 48, name: 'foo' } ]
Node { type: 'Identifier', start: 45, end: 48, name: 'foo' }
Identifier
45
48
foo
Node {
  type: 'ForStatement',
  start: 52,
  end: 193,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 57,
     end: 66,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 68,
     end: 77,
     left: Node { type: 'Identifier', start: 68, end: 69, name: 'i' },
     operator: '<',
     right: Node { type: 'Literal', start: 72, end: 77, value: 10000, raw: '10000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 79,
     end: 82,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 81, end: 82, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 84,
     end: 193,
     body: [ [Node], [Node] ] } }
ForStatement
52
193
Node {
  type: 'VariableDeclaration',
  start: 57,
  end: 66,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 61,
       end: 66,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
57
66
[ Node {
    type: 'VariableDeclarator',
    start: 61,
    end: 66,
    id: Node { type: 'Identifier', start: 61, end: 62, name: 'i' },
    init: Node { type: 'Literal', start: 65, end: 66, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 61,
  end: 66,
  id: Node { type: 'Identifier', start: 61, end: 62, name: 'i' },
  init: Node { type: 'Literal', start: 65, end: 66, value: 0, raw: '0' } }
VariableDeclarator
61
66
Node { type: 'Identifier', start: 61, end: 62, name: 'i' }
Identifier
61
62
i
Node { type: 'Literal', start: 65, end: 66, value: 0, raw: '0' }
Literal
65
66
0
0
var
Node {
  type: 'BinaryExpression',
  start: 68,
  end: 77,
  left: Node { type: 'Identifier', start: 68, end: 69, name: 'i' },
  operator: '<',
  right: Node { type: 'Literal', start: 72, end: 77, value: 10000, raw: '10000' } }
BinaryExpression
68
77
Node { type: 'Identifier', start: 68, end: 69, name: 'i' }
Identifier
68
69
i
<
Node { type: 'Literal', start: 72, end: 77, value: 10000, raw: '10000' }
Literal
72
77
10000
10000
Node {
  type: 'UpdateExpression',
  start: 79,
  end: 82,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 81, end: 82, name: 'i' } }
UpdateExpression
79
82
++
true
Node { type: 'Identifier', start: 81, end: 82, name: 'i' }
Identifier
81
82
i
Node {
  type: 'BlockStatement',
  start: 84,
  end: 193,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 90,
       end: 110,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 115,
       end: 191,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
84
193
[ Node {
    type: 'VariableDeclaration',
    start: 90,
    end: 110,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 115,
    end: 191,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 119,
       end: 144,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 154, end: 191, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 90,
  end: 110,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 94,
       end: 109,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
90
110
[ Node {
    type: 'VariableDeclarator',
    start: 94,
    end: 109,
    id: Node { type: 'Identifier', start: 94, end: 100, name: 'result' },
    init: 
     Node {
       type: 'CallExpression',
       start: 103,
       end: 109,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 94,
  end: 109,
  id: Node { type: 'Identifier', start: 94, end: 100, name: 'result' },
  init: 
   Node {
     type: 'CallExpression',
     start: 103,
     end: 109,
     callee: Node { type: 'Identifier', start: 103, end: 106, name: 'foo' },
     arguments: [ [Node] ] } }
VariableDeclarator
94
109
Node { type: 'Identifier', start: 94, end: 100, name: 'result' }
Identifier
94
100
result
Node {
  type: 'CallExpression',
  start: 103,
  end: 109,
  callee: Node { type: 'Identifier', start: 103, end: 106, name: 'foo' },
  arguments: 
   [ Node { type: 'Literal', start: 107, end: 108, value: 0, raw: '0' } ] }
CallExpression
103
109
Node { type: 'Identifier', start: 103, end: 106, name: 'foo' }
Identifier
103
106
foo
[ Node { type: 'Literal', start: 107, end: 108, value: 0, raw: '0' } ]
Node { type: 'Literal', start: 107, end: 108, value: 0, raw: '0' }
Literal
107
108
0
0
var
Node {
  type: 'IfStatement',
  start: 115,
  end: 191,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 119,
     end: 144,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 119,
        end: 129,
        left: [Node],
        operator: '/',
        right: [Node] },
     operator: '!=',
     right: 
      Node {
        type: 'Literal',
        start: 133,
        end: 144,
        value: '-Infinity',
        raw: '"-Infinity"' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 154,
     end: 191,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 160,
        end: 190,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
115
191
Node {
  type: 'BinaryExpression',
  start: 119,
  end: 144,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 119,
     end: 129,
     left: Node { type: 'Literal', start: 119, end: 120, value: 1, raw: '1' },
     operator: '/',
     right: Node { type: 'Identifier', start: 123, end: 129, name: 'result' } },
  operator: '!=',
  right: 
   Node {
     type: 'Literal',
     start: 133,
     end: 144,
     value: '-Infinity',
     raw: '"-Infinity"' } }
BinaryExpression
119
144
Node {
  type: 'BinaryExpression',
  start: 119,
  end: 129,
  left: Node { type: 'Literal', start: 119, end: 120, value: 1, raw: '1' },
  operator: '/',
  right: Node { type: 'Identifier', start: 123, end: 129, name: 'result' } }
BinaryExpression
119
129
Node { type: 'Literal', start: 119, end: 120, value: 1, raw: '1' }
Literal
119
120
1
1
/
Node { type: 'Identifier', start: 123, end: 129, name: 'result' }
Identifier
123
129
result
!=
Node {
  type: 'Literal',
  start: 133,
  end: 144,
  value: '-Infinity',
  raw: '"-Infinity"' }
Literal
133
144
-Infinity
"-Infinity"
Node {
  type: 'ThrowStatement',
  start: 154,
  end: 191,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 160,
     end: 190,
     left: 
      Node {
        type: 'Literal',
        start: 160,
        end: 181,
        value: 'Error: bad result: ',
        raw: '"Error: bad result: "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 184, end: 190, name: 'result' } } }
ThrowStatement
154
191
Node {
  type: 'BinaryExpression',
  start: 160,
  end: 190,
  left: 
   Node {
     type: 'Literal',
     start: 160,
     end: 181,
     value: 'Error: bad result: ',
     raw: '"Error: bad result: "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 184, end: 190, name: 'result' } }
BinaryExpression
160
190
Node {
  type: 'Literal',
  start: 160,
  end: 181,
  value: 'Error: bad result: ',
  raw: '"Error: bad result: "' }
Literal
160
181
Error: bad result: 
"Error: bad result: "
+
Node { type: 'Identifier', start: 184, end: 190, name: 'result' }
Identifier
184
190
result
null
[+] Exception: ftl-negate-zero.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 364,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 112,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 114,
       end: 128,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 130,
       end: 265,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 267,
       end: 288,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 289,
       end: 362,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
364
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 112,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 18, end: 112, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 114,
    end: 128,
    expression: 
     Node {
       type: 'CallExpression',
       start: 114,
       end: 127,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 130,
    end: 265,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 135,
       end: 144,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 146,
       end: 156,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 158,
       end: 161,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 163, end: 265, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 267,
    end: 288,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 289,
    end: 362,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 293,
       end: 312,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 318, end: 362, argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 112,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 16, name: 'arg' } ],
  body: Node { type: 'BlockStatement', start: 18, end: 112, body: [ [Node] ] } }
FunctionDeclaration
0
112
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 16, name: 'arg' } ]
Node { type: 'Identifier', start: 13, end: 16, name: 'arg' }
Identifier
13
16
arg
Node {
  type: 'BlockStatement',
  start: 18,
  end: 112,
  body: 
   [ Node {
       type: 'TryStatement',
       start: 24,
       end: 110,
       block: [Node],
       handler: [Node],
       finalizer: null } ] }
BlockStatement
18
112
[ Node {
    type: 'TryStatement',
    start: 24,
    end: 110,
    block: Node { type: 'BlockStatement', start: 28, end: 66, body: [Array] },
    handler: 
     Node {
       type: 'CatchClause',
       start: 67,
       end: 110,
       param: [Node],
       body: [Node] },
    finalizer: null } ]
Node {
  type: 'TryStatement',
  start: 24,
  end: 110,
  block: Node { type: 'BlockStatement', start: 28, end: 66, body: [ [Node] ] },
  handler: 
   Node {
     type: 'CatchClause',
     start: 67,
     end: 110,
     param: Node { type: 'Identifier', start: 74, end: 75, name: 'e' },
     body: Node { type: 'BlockStatement', start: 77, end: 110, body: [Array] } },
  finalizer: null }
TryStatement
24
110
Node {
  type: 'BlockStatement',
  start: 28,
  end: 66,
  body: 
   [ Node { type: 'ReturnStatement', start: 38, end: 60, argument: [Node] } ] }
BlockStatement
28
66
[ Node {
    type: 'ReturnStatement',
    start: 38,
    end: 60,
    argument: 
     Node {
       type: 'NewExpression',
       start: 45,
       end: 59,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'ReturnStatement',
  start: 38,
  end: 60,
  argument: 
   Node {
     type: 'NewExpression',
     start: 45,
     end: 59,
     callee: Node { type: 'Identifier', start: 49, end: 54, name: 'Array' },
     arguments: [ [Node] ] } }
ReturnStatement
38
60
Node {
  type: 'NewExpression',
  start: 45,
  end: 59,
  callee: Node { type: 'Identifier', start: 49, end: 54, name: 'Array' },
  arguments: 
   [ Node { type: 'Identifier', start: 55, end: 58, name: 'arg' } ] }
NewExpression
45
59
Node { type: 'Identifier', start: 49, end: 54, name: 'Array' }
Identifier
49
54
Array
[ Node { type: 'Identifier', start: 55, end: 58, name: 'arg' } ]
Node { type: 'Identifier', start: 55, end: 58, name: 'arg' }
Identifier
55
58
arg
Node {
  type: 'CatchClause',
  start: 67,
  end: 110,
  param: Node { type: 'Identifier', start: 74, end: 75, name: 'e' },
  body: Node { type: 'BlockStatement', start: 77, end: 110, body: [ [Node] ] } }
CatchClause
67
110
Node { type: 'Identifier', start: 74, end: 75, name: 'e' }
Identifier
74
75
e
Node {
  type: 'BlockStatement',
  start: 77,
  end: 110,
  body: 
   [ Node { type: 'ReturnStatement', start: 87, end: 104, argument: [Node] } ] }
BlockStatement
77
110
[ Node {
    type: 'ReturnStatement',
    start: 87,
    end: 104,
    argument: 
     Node {
       type: 'Literal',
       start: 94,
       end: 103,
       value: 'error42',
       raw: '"error42"' } } ]
Node {
  type: 'ReturnStatement',
  start: 87,
  end: 104,
  argument: 
   Node {
     type: 'Literal',
     start: 94,
     end: 103,
     value: 'error42',
     raw: '"error42"' } }
ReturnStatement
87
104
Node {
  type: 'Literal',
  start: 94,
  end: 103,
  value: 'error42',
  raw: '"error42"' }
Literal
94
103
error42
"error42"
null
[+] Exception: ftl-new-negative-array-size.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 2054,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 341,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 343,
       end: 357,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 423,
       end: 1423,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 1452,
       end: 1484,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 1485,
       end: 1578,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1579,
       end: 1683,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1684,
       end: 1776,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1777,
       end: 1868,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1869,
       end: 1960,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1961,
       end: 2052,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
2054
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 341,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 341, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 343,
    end: 357,
    expression: 
     Node {
       type: 'CallExpression',
       start: 343,
       end: 356,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 423,
    end: 1423,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 428,
       end: 437,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 439,
       end: 449,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 451,
       end: 454,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 456, end: 1423, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 1452,
    end: 1484,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 1485,
    end: 1578,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1489,
       end: 1519,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1525,
       end: 1578,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1579,
    end: 1683,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1583,
       end: 1609,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1615,
       end: 1683,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1684,
    end: 1776,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1688,
       end: 1713,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1719,
       end: 1776,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1777,
    end: 1868,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1781,
       end: 1805,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1811,
       end: 1868,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1869,
    end: 1960,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1873,
       end: 1897,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1903,
       end: 1960,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1961,
    end: 2052,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1965,
       end: 1989,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1995,
       end: 2052,
       argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 341,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'o' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'p' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 19,
     end: 341,
     body: [ [Node], [Node], [Node], [Node], [Node] ] } }
FunctionDeclaration
0
341
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'o' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'p' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'o' }
Identifier
13
14
o
Node { type: 'Identifier', start: 16, end: 17, name: 'p' }
Identifier
16
17
p
Node {
  type: 'BlockStatement',
  start: 19,
  end: 341,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 25,
       end: 37,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 42,
       end: 59,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 64,
       end: 77,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'TryStatement',
       start: 82,
       end: 279,
       block: [Node],
       handler: [Node],
       finalizer: null },
     Node {
       type: 'ReturnStatement',
       start: 284,
       end: 339,
       argument: [Node] } ] }
BlockStatement
19
341
[ Node {
    type: 'VariableDeclaration',
    start: 25,
    end: 37,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 42,
    end: 59,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 64,
    end: 77,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'TryStatement',
    start: 82,
    end: 279,
    block: Node { type: 'BlockStatement', start: 86, end: 194, body: [Array] },
    handler: 
     Node {
       type: 'CatchClause',
       start: 195,
       end: 279,
       param: [Node],
       body: [Node] },
    finalizer: null },
  Node {
    type: 'ReturnStatement',
    start: 284,
    end: 339,
    argument: 
     Node {
       type: 'ObjectExpression',
       start: 291,
       end: 338,
       properties: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 25,
  end: 37,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 29,
       end: 36,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
25
37
[ Node {
    type: 'VariableDeclarator',
    start: 29,
    end: 36,
    id: Node { type: 'Identifier', start: 29, end: 30, name: 'x' },
    init: Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' } } ]
Node {
  type: 'VariableDeclarator',
  start: 29,
  end: 36,
  id: Node { type: 'Identifier', start: 29, end: 30, name: 'x' },
  init: Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' } }
VariableDeclarator
29
36
Node { type: 'Identifier', start: 29, end: 30, name: 'x' }
Identifier
29
30
x
Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' }
Literal
33
36
100
100
var
Node {
  type: 'VariableDeclaration',
  start: 42,
  end: 59,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 46,
       end: 58,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
42
59
[ Node {
    type: 'VariableDeclarator',
    start: 46,
    end: 58,
    id: Node { type: 'Identifier', start: 46, end: 52, name: 'result' },
    init: Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' } } ]
Node {
  type: 'VariableDeclarator',
  start: 46,
  end: 58,
  id: Node { type: 'Identifier', start: 46, end: 52, name: 'result' },
  init: Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' } }
VariableDeclarator
46
58
Node { type: 'Identifier', start: 46, end: 52, name: 'result' }
Identifier
46
52
result
Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' }
Literal
55
58
101
101
var
Node {
  type: 'VariableDeclaration',
  start: 64,
  end: 77,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 68,
       end: 76,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
64
77
[ Node {
    type: 'VariableDeclarator',
    start: 68,
    end: 76,
    id: Node { type: 'Identifier', start: 68, end: 70, name: 'pf' },
    init: 
     Node {
       type: 'MemberExpression',
       start: 73,
       end: 76,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'VariableDeclarator',
  start: 68,
  end: 76,
  id: Node { type: 'Identifier', start: 68, end: 70, name: 'pf' },
  init: 
   Node {
     type: 'MemberExpression',
     start: 73,
     end: 76,
     object: Node { type: 'Identifier', start: 73, end: 74, name: 'p' },
     property: Node { type: 'Identifier', start: 75, end: 76, name: 'g' },
     computed: false } }
VariableDeclarator
68
76
Node { type: 'Identifier', start: 68, end: 70, name: 'pf' }
Identifier
68
70
pf
Node {
  type: 'MemberExpression',
  start: 73,
  end: 76,
  object: Node { type: 'Identifier', start: 73, end: 74, name: 'p' },
  property: Node { type: 'Identifier', start: 75, end: 76, name: 'g' },
  computed: false }
MemberExpression
73
76
Node { type: 'Identifier', start: 73, end: 74, name: 'p' }
Identifier
73
74
p
Node { type: 'Identifier', start: 75, end: 76, name: 'g' }
Identifier
75
76
g
false
var
Node {
  type: 'TryStatement',
  start: 82,
  end: 279,
  block: 
   Node {
     type: 'BlockStatement',
     start: 86,
     end: 194,
     body: [ [Node], [Node], [Node], [Node], [Node], [Node] ] },
  handler: 
   Node {
     type: 'CatchClause',
     start: 195,
     end: 279,
     param: Node { type: 'Identifier', start: 202, end: 203, name: 'e' },
     body: Node { type: 'BlockStatement', start: 205, end: 279, body: [Array] } },
  finalizer: null }
TryStatement
82
279
Node {
  type: 'BlockStatement',
  start: 86,
  end: 194,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 96,
       end: 104,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 113,
       end: 118,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 127,
       end: 140,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 149,
       end: 157,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 166,
       end: 171,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 180,
       end: 188,
       expression: [Node] } ] }
BlockStatement
86
194
[ Node {
    type: 'ExpressionStatement',
    start: 96,
    end: 104,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 96,
       end: 103,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 113,
    end: 118,
    expression: 
     Node {
       type: 'UpdateExpression',
       start: 113,
       end: 117,
       operator: '++',
       prefix: false,
       argument: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 127,
    end: 140,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 127,
       end: 139,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 149,
    end: 157,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 149,
       end: 156,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 166,
    end: 171,
    expression: 
     Node {
       type: 'UpdateExpression',
       start: 166,
       end: 170,
       operator: '++',
       prefix: false,
       argument: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 180,
    end: 188,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 180,
       end: 187,
       operator: '=',
       left: [Node],
       right: [Node] } } ]
Node {
  type: 'ExpressionStatement',
  start: 96,
  end: 104,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 96,
     end: 103,
     operator: '=',
     left: Node { type: 'Identifier', start: 96, end: 97, name: 'x' },
     right: Node { type: 'Literal', start: 100, end: 103, value: 102, raw: '102' } } }
ExpressionStatement
96
104
Node {
  type: 'AssignmentExpression',
  start: 96,
  end: 103,
  operator: '=',
  left: Node { type: 'Identifier', start: 96, end: 97, name: 'x' },
  right: Node { type: 'Literal', start: 100, end: 103, value: 102, raw: '102' } }
AssignmentExpression
96
103
=
Node { type: 'Identifier', start: 96, end: 97, name: 'x' }
Identifier
96
97
x
Node { type: 'Literal', start: 100, end: 103, value: 102, raw: '102' }
Literal
100
103
102
102
Node {
  type: 'ExpressionStatement',
  start: 113,
  end: 118,
  expression: 
   Node {
     type: 'UpdateExpression',
     start: 113,
     end: 117,
     operator: '++',
     prefix: false,
     argument: Node { type: 'Identifier', start: 113, end: 115, name: 'pf' } } }
ExpressionStatement
113
118
Node {
  type: 'UpdateExpression',
  start: 113,
  end: 117,
  operator: '++',
  prefix: false,
  argument: Node { type: 'Identifier', start: 113, end: 115, name: 'pf' } }
UpdateExpression
113
117
++
false
Node { type: 'Identifier', start: 113, end: 115, name: 'pf' }
Identifier
113
115
pf
Node {
  type: 'ExpressionStatement',
  start: 127,
  end: 140,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 127,
     end: 139,
     operator: '=',
     left: Node { type: 'Identifier', start: 127, end: 133, name: 'result' },
     right: 
      Node {
        type: 'MemberExpression',
        start: 136,
        end: 139,
        object: [Node],
        property: [Node],
        computed: false } } }
ExpressionStatement
127
140
Node {
  type: 'AssignmentExpression',
  start: 127,
  end: 139,
  operator: '=',
  left: Node { type: 'Identifier', start: 127, end: 133, name: 'result' },
  right: 
   Node {
     type: 'MemberExpression',
     start: 136,
     end: 139,
     object: Node { type: 'Identifier', start: 136, end: 137, name: 'o' },
     property: Node { type: 'Identifier', start: 138, end: 139, name: 'f' },
     computed: false } }
AssignmentExpression
127
139
=
Node { type: 'Identifier', start: 127, end: 133, name: 'result' }
Identifier
127
133
result
Node {
  type: 'MemberExpression',
  start: 136,
  end: 139,
  object: Node { type: 'Identifier', start: 136, end: 137, name: 'o' },
  property: Node { type: 'Identifier', start: 138, end: 139, name: 'f' },
  computed: false }
MemberExpression
136
139
Node { type: 'Identifier', start: 136, end: 137, name: 'o' }
Identifier
136
137
o
Node { type: 'Identifier', start: 138, end: 139, name: 'f' }
Identifier
138
139
f
false
Node {
  type: 'ExpressionStatement',
  start: 149,
  end: 157,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 149,
     end: 156,
     operator: '=',
     left: Node { type: 'Identifier', start: 149, end: 150, name: 'o' },
     right: Node { type: 'Literal', start: 153, end: 156, value: 104, raw: '104' } } }
ExpressionStatement
149
157
Node {
  type: 'AssignmentExpression',
  start: 149,
  end: 156,
  operator: '=',
  left: Node { type: 'Identifier', start: 149, end: 150, name: 'o' },
  right: Node { type: 'Literal', start: 153, end: 156, value: 104, raw: '104' } }
AssignmentExpression
149
156
=
Node { type: 'Identifier', start: 149, end: 150, name: 'o' }
Identifier
149
150
o
Node { type: 'Literal', start: 153, end: 156, value: 104, raw: '104' }
Literal
153
156
104
104
Node {
  type: 'ExpressionStatement',
  start: 166,
  end: 171,
  expression: 
   Node {
     type: 'UpdateExpression',
     start: 166,
     end: 170,
     operator: '++',
     prefix: false,
     argument: Node { type: 'Identifier', start: 166, end: 168, name: 'pf' } } }
ExpressionStatement
166
171
Node {
  type: 'UpdateExpression',
  start: 166,
  end: 170,
  operator: '++',
  prefix: false,
  argument: Node { type: 'Identifier', start: 166, end: 168, name: 'pf' } }
UpdateExpression
166
170
++
false
Node { type: 'Identifier', start: 166, end: 168, name: 'pf' }
Identifier
166
168
pf
Node {
  type: 'ExpressionStatement',
  start: 180,
  end: 188,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 180,
     end: 187,
     operator: '=',
     left: Node { type: 'Identifier', start: 180, end: 181, name: 'x' },
     right: Node { type: 'Literal', start: 184, end: 187, value: 106, raw: '106' } } }
ExpressionStatement
180
188
Node {
  type: 'AssignmentExpression',
  start: 180,
  end: 187,
  operator: '=',
  left: Node { type: 'Identifier', start: 180, end: 181, name: 'x' },
  right: Node { type: 'Literal', start: 184, end: 187, value: 106, raw: '106' } }
AssignmentExpression
180
187
=
Node { type: 'Identifier', start: 180, end: 181, name: 'x' }
Identifier
180
181
x
Node { type: 'Literal', start: 184, end: 187, value: 106, raw: '106' }
Literal
184
187
106
106
Node {
  type: 'CatchClause',
  start: 195,
  end: 279,
  param: Node { type: 'Identifier', start: 202, end: 203, name: 'e' },
  body: Node { type: 'BlockStatement', start: 205, end: 279, body: [ [Node] ] } }
CatchClause
195
279
Node { type: 'Identifier', start: 202, end: 203, name: 'e' }
Identifier
202
203
e
Node {
  type: 'BlockStatement',
  start: 205,
  end: 279,
  body: 
   [ Node {
       type: 'ReturnStatement',
       start: 215,
       end: 273,
       argument: [Node] } ] }
BlockStatement
205
279
[ Node {
    type: 'ReturnStatement',
    start: 215,
    end: 273,
    argument: 
     Node {
       type: 'ObjectExpression',
       start: 222,
       end: 272,
       properties: [Array] } } ]
Node {
  type: 'ReturnStatement',
  start: 215,
  end: 273,
  argument: 
   Node {
     type: 'ObjectExpression',
     start: 222,
     end: 272,
     properties: [ [Node], [Node] ] } }
ReturnStatement
215
273
Node {
  type: 'ObjectExpression',
  start: 222,
  end: 272,
  properties: 
   [ Node {
       type: 'Property',
       start: 223,
       end: 243,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 245,
       end: 271,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
222
272
[ Node {
    type: 'Property',
    start: 223,
    end: 243,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 223, end: 230, name: 'outcome' },
    value: 
     Node {
       type: 'Literal',
       start: 232,
       end: 243,
       value: 'exception',
       raw: '"exception"' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 245,
    end: 271,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 245, end: 251, name: 'values' },
    value: 
     Node {
       type: 'ArrayExpression',
       start: 253,
       end: 271,
       elements: [Array] },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 223,
  end: 243,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 223, end: 230, name: 'outcome' },
  value: 
   Node {
     type: 'Literal',
     start: 232,
     end: 243,
     value: 'exception',
     raw: '"exception"' },
  kind: 'init' }
Property
223
243
false
false
false
Node { type: 'Identifier', start: 223, end: 230, name: 'outcome' }
Identifier
223
230
outcome
Node {
  type: 'Literal',
  start: 232,
  end: 243,
  value: 'exception',
  raw: '"exception"' }
Literal
232
243
exception
"exception"
init
Node {
  type: 'Property',
  start: 245,
  end: 271,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 245, end: 251, name: 'values' },
  value: 
   Node {
     type: 'ArrayExpression',
     start: 253,
     end: 271,
     elements: [ [Node], [Node], [Node], [Node] ] },
  kind: 'init' }
Property
245
271
false
false
false
Node { type: 'Identifier', start: 245, end: 251, name: 'values' }
Identifier
245
251
values
Node {
  type: 'ArrayExpression',
  start: 253,
  end: 271,
  elements: 
   [ Node { type: 'Identifier', start: 254, end: 255, name: 'o' },
     Node { type: 'Identifier', start: 257, end: 259, name: 'pf' },
     Node { type: 'Identifier', start: 261, end: 262, name: 'x' },
     Node { type: 'Identifier', start: 264, end: 270, name: 'result' } ] }
ArrayExpression
253
271
[ Node { type: 'Identifier', start: 254, end: 255, name: 'o' },
  Node { type: 'Identifier', start: 257, end: 259, name: 'pf' },
  Node { type: 'Identifier', start: 261, end: 262, name: 'x' },
  Node { type: 'Identifier', start: 264, end: 270, name: 'result' } ]
Node { type: 'Identifier', start: 254, end: 255, name: 'o' }
Identifier
254
255
o
Node { type: 'Identifier', start: 257, end: 259, name: 'pf' }
Identifier
257
259
pf
Node { type: 'Identifier', start: 261, end: 262, name: 'x' }
Identifier
261
262
x
Node { type: 'Identifier', start: 264, end: 270, name: 'result' }
Identifier
264
270
result
init
null
[+] Exception: ftl-operation-exception-interesting-live-state.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1499,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 203,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 205,
       end: 219,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 285,
       end: 1276,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 1305,
       end: 1316,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'TryStatement',
       start: 1317,
       end: 1404,
       block: [Node],
       handler: [Node],
       finalizer: null },
     Node {
       type: 'IfStatement',
       start: 1405,
       end: 1498,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
1499
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 203,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 203, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 205,
    end: 219,
    expression: 
     Node {
       type: 'CallExpression',
       start: 205,
       end: 218,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 285,
    end: 1276,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 290,
       end: 299,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 301,
       end: 311,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 313,
       end: 316,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 318, end: 1276, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 1305,
    end: 1316,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'TryStatement',
    start: 1317,
    end: 1404,
    block: Node { type: 'BlockStatement', start: 1321, end: 1353, body: [Array] },
    handler: 
     Node {
       type: 'CatchClause',
       start: 1354,
       end: 1404,
       param: [Node],
       body: [Node] },
    finalizer: null },
  Node {
    type: 'IfStatement',
    start: 1405,
    end: 1498,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1409,
       end: 1439,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1445,
       end: 1498,
       argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 203,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'o' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'p' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 19,
     end: 203,
     body: 
      [ [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node] ] } }
FunctionDeclaration
0
203
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'o' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'p' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'o' }
Identifier
13
14
o
Node { type: 'Identifier', start: 16, end: 17, name: 'p' }
Identifier
16
17
p
Node {
  type: 'BlockStatement',
  start: 19,
  end: 203,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 25,
       end: 37,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 42,
       end: 59,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 64,
       end: 72,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 77,
       end: 85,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 90,
       end: 103,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 108,
       end: 116,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 121,
       end: 129,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 134,
       end: 142,
       expression: [Node] },
     Node {
       type: 'ReturnStatement',
       start: 147,
       end: 201,
       argument: [Node] } ] }
BlockStatement
19
203
[ Node {
    type: 'VariableDeclaration',
    start: 25,
    end: 37,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 42,
    end: 59,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 64,
    end: 72,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 64,
       end: 71,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 77,
    end: 85,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 77,
       end: 84,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 90,
    end: 103,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 90,
       end: 102,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 108,
    end: 116,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 108,
       end: 115,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 121,
    end: 129,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 121,
       end: 128,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 134,
    end: 142,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 134,
       end: 141,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ReturnStatement',
    start: 147,
    end: 201,
    argument: 
     Node {
       type: 'ObjectExpression',
       start: 154,
       end: 200,
       properties: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 25,
  end: 37,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 29,
       end: 36,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
25
37
[ Node {
    type: 'VariableDeclarator',
    start: 29,
    end: 36,
    id: Node { type: 'Identifier', start: 29, end: 30, name: 'x' },
    init: Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' } } ]
Node {
  type: 'VariableDeclarator',
  start: 29,
  end: 36,
  id: Node { type: 'Identifier', start: 29, end: 30, name: 'x' },
  init: Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' } }
VariableDeclarator
29
36
Node { type: 'Identifier', start: 29, end: 30, name: 'x' }
Identifier
29
30
x
Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' }
Literal
33
36
100
100
var
Node {
  type: 'VariableDeclaration',
  start: 42,
  end: 59,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 46,
       end: 58,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
42
59
[ Node {
    type: 'VariableDeclarator',
    start: 46,
    end: 58,
    id: Node { type: 'Identifier', start: 46, end: 52, name: 'result' },
    init: Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' } } ]
Node {
  type: 'VariableDeclarator',
  start: 46,
  end: 58,
  id: Node { type: 'Identifier', start: 46, end: 52, name: 'result' },
  init: Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' } }
VariableDeclarator
46
58
Node { type: 'Identifier', start: 46, end: 52, name: 'result' }
Identifier
46
52
result
Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' }
Literal
55
58
101
101
var
Node {
  type: 'ExpressionStatement',
  start: 64,
  end: 72,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 64,
     end: 71,
     operator: '=',
     left: Node { type: 'Identifier', start: 64, end: 65, name: 'x' },
     right: Node { type: 'Literal', start: 68, end: 71, value: 102, raw: '102' } } }
ExpressionStatement
64
72
Node {
  type: 'AssignmentExpression',
  start: 64,
  end: 71,
  operator: '=',
  left: Node { type: 'Identifier', start: 64, end: 65, name: 'x' },
  right: Node { type: 'Literal', start: 68, end: 71, value: 102, raw: '102' } }
AssignmentExpression
64
71
=
Node { type: 'Identifier', start: 64, end: 65, name: 'x' }
Identifier
64
65
x
Node { type: 'Literal', start: 68, end: 71, value: 102, raw: '102' }
Literal
68
71
102
102
Node {
  type: 'ExpressionStatement',
  start: 77,
  end: 85,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 77,
     end: 84,
     operator: '=',
     left: Node { type: 'Identifier', start: 77, end: 78, name: 'p' },
     right: Node { type: 'Literal', start: 81, end: 84, value: 103, raw: '103' } } }
ExpressionStatement
77
85
Node {
  type: 'AssignmentExpression',
  start: 77,
  end: 84,
  operator: '=',
  left: Node { type: 'Identifier', start: 77, end: 78, name: 'p' },
  right: Node { type: 'Literal', start: 81, end: 84, value: 103, raw: '103' } }
AssignmentExpression
77
84
=
Node { type: 'Identifier', start: 77, end: 78, name: 'p' }
Identifier
77
78
p
Node { type: 'Literal', start: 81, end: 84, value: 103, raw: '103' }
Literal
81
84
103
103
Node {
  type: 'ExpressionStatement',
  start: 90,
  end: 103,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 90,
     end: 102,
     operator: '=',
     left: Node { type: 'Identifier', start: 90, end: 96, name: 'result' },
     right: 
      Node {
        type: 'MemberExpression',
        start: 99,
        end: 102,
        object: [Node],
        property: [Node],
        computed: false } } }
ExpressionStatement
90
103
Node {
  type: 'AssignmentExpression',
  start: 90,
  end: 102,
  operator: '=',
  left: Node { type: 'Identifier', start: 90, end: 96, name: 'result' },
  right: 
   Node {
     type: 'MemberExpression',
     start: 99,
     end: 102,
     object: Node { type: 'Identifier', start: 99, end: 100, name: 'o' },
     property: Node { type: 'Identifier', start: 101, end: 102, name: 'f' },
     computed: false } }
AssignmentExpression
90
102
=
Node { type: 'Identifier', start: 90, end: 96, name: 'result' }
Identifier
90
96
result
Node {
  type: 'MemberExpression',
  start: 99,
  end: 102,
  object: Node { type: 'Identifier', start: 99, end: 100, name: 'o' },
  property: Node { type: 'Identifier', start: 101, end: 102, name: 'f' },
  computed: false }
MemberExpression
99
102
Node { type: 'Identifier', start: 99, end: 100, name: 'o' }
Identifier
99
100
o
Node { type: 'Identifier', start: 101, end: 102, name: 'f' }
Identifier
101
102
f
false
Node {
  type: 'ExpressionStatement',
  start: 108,
  end: 116,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 108,
     end: 115,
     operator: '=',
     left: Node { type: 'Identifier', start: 108, end: 109, name: 'o' },
     right: Node { type: 'Literal', start: 112, end: 115, value: 104, raw: '104' } } }
ExpressionStatement
108
116
Node {
  type: 'AssignmentExpression',
  start: 108,
  end: 115,
  operator: '=',
  left: Node { type: 'Identifier', start: 108, end: 109, name: 'o' },
  right: Node { type: 'Literal', start: 112, end: 115, value: 104, raw: '104' } }
AssignmentExpression
108
115
=
Node { type: 'Identifier', start: 108, end: 109, name: 'o' }
Identifier
108
109
o
Node { type: 'Literal', start: 112, end: 115, value: 104, raw: '104' }
Literal
112
115
104
104
Node {
  type: 'ExpressionStatement',
  start: 121,
  end: 129,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 121,
     end: 128,
     operator: '=',
     left: Node { type: 'Identifier', start: 121, end: 122, name: 'p' },
     right: Node { type: 'Literal', start: 125, end: 128, value: 105, raw: '105' } } }
ExpressionStatement
121
129
Node {
  type: 'AssignmentExpression',
  start: 121,
  end: 128,
  operator: '=',
  left: Node { type: 'Identifier', start: 121, end: 122, name: 'p' },
  right: Node { type: 'Literal', start: 125, end: 128, value: 105, raw: '105' } }
AssignmentExpression
121
128
=
Node { type: 'Identifier', start: 121, end: 122, name: 'p' }
Identifier
121
122
p
Node { type: 'Literal', start: 125, end: 128, value: 105, raw: '105' }
Literal
125
128
105
105
Node {
  type: 'ExpressionStatement',
  start: 134,
  end: 142,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 134,
     end: 141,
     operator: '=',
     left: Node { type: 'Identifier', start: 134, end: 135, name: 'x' },
     right: Node { type: 'Literal', start: 138, end: 141, value: 106, raw: '106' } } }
ExpressionStatement
134
142
Node {
  type: 'AssignmentExpression',
  start: 134,
  end: 141,
  operator: '=',
  left: Node { type: 'Identifier', start: 134, end: 135, name: 'x' },
  right: Node { type: 'Literal', start: 138, end: 141, value: 106, raw: '106' } }
AssignmentExpression
134
141
=
Node { type: 'Identifier', start: 134, end: 135, name: 'x' }
Identifier
134
135
x
Node { type: 'Literal', start: 138, end: 141, value: 106, raw: '106' }
Literal
138
141
106
106
Node {
  type: 'ReturnStatement',
  start: 147,
  end: 201,
  argument: 
   Node {
     type: 'ObjectExpression',
     start: 154,
     end: 200,
     properties: [ [Node], [Node] ] } }
ReturnStatement
147
201
Node {
  type: 'ObjectExpression',
  start: 154,
  end: 200,
  properties: 
   [ Node {
       type: 'Property',
       start: 155,
       end: 172,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 174,
       end: 199,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
154
200
[ Node {
    type: 'Property',
    start: 155,
    end: 172,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 155, end: 162, name: 'outcome' },
    value: 
     Node {
       type: 'Literal',
       start: 164,
       end: 172,
       value: 'return',
       raw: '"return"' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 174,
    end: 199,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 174, end: 180, name: 'values' },
    value: 
     Node {
       type: 'ArrayExpression',
       start: 182,
       end: 199,
       elements: [Array] },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 155,
  end: 172,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 155, end: 162, name: 'outcome' },
  value: 
   Node {
     type: 'Literal',
     start: 164,
     end: 172,
     value: 'return',
     raw: '"return"' },
  kind: 'init' }
Property
155
172
false
false
false
Node { type: 'Identifier', start: 155, end: 162, name: 'outcome' }
Identifier
155
162
outcome
Node {
  type: 'Literal',
  start: 164,
  end: 172,
  value: 'return',
  raw: '"return"' }
Literal
164
172
return
"return"
init
Node {
  type: 'Property',
  start: 174,
  end: 199,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 174, end: 180, name: 'values' },
  value: 
   Node {
     type: 'ArrayExpression',
     start: 182,
     end: 199,
     elements: [ [Node], [Node], [Node], [Node] ] },
  kind: 'init' }
Property
174
199
false
false
false
Node { type: 'Identifier', start: 174, end: 180, name: 'values' }
Identifier
174
180
values
Node {
  type: 'ArrayExpression',
  start: 182,
  end: 199,
  elements: 
   [ Node { type: 'Identifier', start: 183, end: 184, name: 'o' },
     Node { type: 'Identifier', start: 186, end: 187, name: 'p' },
     Node { type: 'Identifier', start: 189, end: 190, name: 'x' },
     Node { type: 'Identifier', start: 192, end: 198, name: 'result' } ] }
ArrayExpression
182
199
[ Node { type: 'Identifier', start: 183, end: 184, name: 'o' },
  Node { type: 'Identifier', start: 186, end: 187, name: 'p' },
  Node { type: 'Identifier', start: 189, end: 190, name: 'x' },
  Node { type: 'Identifier', start: 192, end: 198, name: 'result' } ]
Node { type: 'Identifier', start: 183, end: 184, name: 'o' }
Identifier
183
184
o
Node { type: 'Identifier', start: 186, end: 187, name: 'p' }
Identifier
186
187
p
Node { type: 'Identifier', start: 189, end: 190, name: 'x' }
Identifier
189
190
x
Node { type: 'Identifier', start: 192, end: 198, name: 'result' }
Identifier
192
198
result
init
Node {
  type: 'ExpressionStatement',
  start: 205,
  end: 219,
  expression: 
   Node {
     type: 'CallExpression',
     start: 205,
     end: 218,
     callee: Node { type: 'Identifier', start: 205, end: 213, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
205
219
Node {
  type: 'CallExpression',
  start: 205,
  end: 218,
  callee: Node { type: 'Identifier', start: 205, end: 213, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 214, end: 217, name: 'foo' } ] }
CallExpression
205
218
Node { type: 'Identifier', start: 205, end: 213, name: 'noInline' }
Identifier
205
213
noInline
[ Node { type: 'Identifier', start: 214, end: 217, name: 'foo' } ]
Node { type: 'Identifier', start: 214, end: 217, name: 'foo' }
Identifier
214
217
foo
Node {
  type: 'ForStatement',
  start: 285,
  end: 1276,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 290,
     end: 299,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 301,
     end: 311,
     left: Node { type: 'Identifier', start: 301, end: 302, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 305,
        end: 311,
        value: 100000,
        raw: '100000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 313,
     end: 316,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 315, end: 316, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 318,
     end: 1276,
     body: 
      [ [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node] ] } }
ForStatement
285
1276
Node {
  type: 'VariableDeclaration',
  start: 290,
  end: 299,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 294,
       end: 299,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
290
299
[ Node {
    type: 'VariableDeclarator',
    start: 294,
    end: 299,
    id: Node { type: 'Identifier', start: 294, end: 295, name: 'i' },
    init: Node { type: 'Literal', start: 298, end: 299, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 294,
  end: 299,
  id: Node { type: 'Identifier', start: 294, end: 295, name: 'i' },
  init: Node { type: 'Literal', start: 298, end: 299, value: 0, raw: '0' } }
VariableDeclarator
294
299
Node { type: 'Identifier', start: 294, end: 295, name: 'i' }
Identifier
294
295
i
Node { type: 'Literal', start: 298, end: 299, value: 0, raw: '0' }
Literal
298
299
0
0
var
Node {
  type: 'BinaryExpression',
  start: 301,
  end: 311,
  left: Node { type: 'Identifier', start: 301, end: 302, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 305,
     end: 311,
     value: 100000,
     raw: '100000' } }
BinaryExpression
301
311
Node { type: 'Identifier', start: 301, end: 302, name: 'i' }
Identifier
301
302
i
<
Node {
  type: 'Literal',
  start: 305,
  end: 311,
  value: 100000,
  raw: '100000' }
Literal
305
311
100000
100000
Node {
  type: 'UpdateExpression',
  start: 313,
  end: 316,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 315, end: 316, name: 'i' } }
UpdateExpression
313
316
++
true
Node { type: 'Identifier', start: 315, end: 316, name: 'i' }
Identifier
315
316
i
Node {
  type: 'BlockStatement',
  start: 318,
  end: 1276,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 324,
       end: 330,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 335,
       end: 356,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 361,
       end: 472,
       test: [Node],
       consequent: [Node],
       alternate: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 477,
       end: 497,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 502,
       end: 597,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 602,
       end: 711,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 716,
       end: 812,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 817,
       end: 913,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 918,
       end: 1014,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1019,
       end: 1274,
       test: [Node],
       consequent: [Node],
       alternate: [Node] } ] }
BlockStatement
318
1276
[ Node {
    type: 'VariableDeclaration',
    start: 324,
    end: 330,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 335,
    end: 356,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 361,
    end: 472,
    test: Node { type: 'Identifier', start: 365, end: 373, name: 'isObject' },
    consequent: Node { type: 'BlockStatement', start: 375, end: 451, body: [Array] },
    alternate: 
     Node {
       type: 'ExpressionStatement',
       start: 465,
       end: 472,
       expression: [Node] } },
  Node {
    type: 'VariableDeclaration',
    start: 477,
    end: 497,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 502,
    end: 597,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 506,
       end: 533,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 543, end: 597, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 602,
    end: 711,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 606,
       end: 632,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 642, end: 711, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 716,
    end: 812,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 720,
       end: 744,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 754, end: 812, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 817,
    end: 913,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 821,
       end: 845,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 855, end: 913, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 918,
    end: 1014,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 922,
       end: 946,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 956,
       end: 1014,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1019,
    end: 1274,
    test: Node { type: 'Identifier', start: 1023, end: 1031, name: 'isObject' },
    consequent: Node { type: 'BlockStatement', start: 1033, end: 1149, body: [Array] },
    alternate: Node { type: 'BlockStatement', start: 1155, end: 1274, body: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 324,
  end: 330,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 328,
       end: 329,
       id: [Node],
       init: null } ],
  kind: 'var' }
VariableDeclaration
324
330
[ Node {
    type: 'VariableDeclarator',
    start: 328,
    end: 329,
    id: Node { type: 'Identifier', start: 328, end: 329, name: 'o' },
    init: null } ]
Node {
  type: 'VariableDeclarator',
  start: 328,
  end: 329,
  id: Node { type: 'Identifier', start: 328, end: 329, name: 'o' },
  init: null }
VariableDeclarator
328
329
Node { type: 'Identifier', start: 328, end: 329, name: 'o' }
Identifier
328
329
o
null
[+] Exception: ftl-operation-exception-no-catch.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 2027,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 327,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 329,
       end: 343,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 409,
       end: 1400,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 1429,
       end: 1457,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 1458,
       end: 1551,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1552,
       end: 1656,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1657,
       end: 1749,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1750,
       end: 1841,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1842,
       end: 1933,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1934,
       end: 2025,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
2027
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 327,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 327, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 329,
    end: 343,
    expression: 
     Node {
       type: 'CallExpression',
       start: 329,
       end: 342,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 409,
    end: 1400,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 414,
       end: 423,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 425,
       end: 435,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 437,
       end: 440,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 442, end: 1400, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 1429,
    end: 1457,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 1458,
    end: 1551,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1462,
       end: 1492,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1498,
       end: 1551,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1552,
    end: 1656,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1556,
       end: 1582,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1588,
       end: 1656,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1657,
    end: 1749,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1661,
       end: 1686,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1692,
       end: 1749,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1750,
    end: 1841,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1754,
       end: 1778,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1784,
       end: 1841,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1842,
    end: 1933,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1846,
       end: 1870,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1876,
       end: 1933,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1934,
    end: 2025,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1938,
       end: 1962,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1968,
       end: 2025,
       argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 327,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'o' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'p' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 19,
     end: 327,
     body: [ [Node], [Node], [Node], [Node] ] } }
FunctionDeclaration
0
327
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'o' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'p' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'o' }
Identifier
13
14
o
Node { type: 'Identifier', start: 16, end: 17, name: 'p' }
Identifier
16
17
p
Node {
  type: 'BlockStatement',
  start: 19,
  end: 327,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 25,
       end: 37,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 42,
       end: 59,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'TryStatement',
       start: 64,
       end: 266,
       block: [Node],
       handler: [Node],
       finalizer: null },
     Node {
       type: 'ReturnStatement',
       start: 271,
       end: 325,
       argument: [Node] } ] }
BlockStatement
19
327
[ Node {
    type: 'VariableDeclaration',
    start: 25,
    end: 37,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 42,
    end: 59,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'TryStatement',
    start: 64,
    end: 266,
    block: Node { type: 'BlockStatement', start: 68, end: 182, body: [Array] },
    handler: 
     Node {
       type: 'CatchClause',
       start: 183,
       end: 266,
       param: [Node],
       body: [Node] },
    finalizer: null },
  Node {
    type: 'ReturnStatement',
    start: 271,
    end: 325,
    argument: 
     Node {
       type: 'ObjectExpression',
       start: 278,
       end: 324,
       properties: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 25,
  end: 37,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 29,
       end: 36,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
25
37
[ Node {
    type: 'VariableDeclarator',
    start: 29,
    end: 36,
    id: Node { type: 'Identifier', start: 29, end: 30, name: 'x' },
    init: Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' } } ]
Node {
  type: 'VariableDeclarator',
  start: 29,
  end: 36,
  id: Node { type: 'Identifier', start: 29, end: 30, name: 'x' },
  init: Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' } }
VariableDeclarator
29
36
Node { type: 'Identifier', start: 29, end: 30, name: 'x' }
Identifier
29
30
x
Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' }
Literal
33
36
100
100
var
Node {
  type: 'VariableDeclaration',
  start: 42,
  end: 59,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 46,
       end: 58,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
42
59
[ Node {
    type: 'VariableDeclarator',
    start: 46,
    end: 58,
    id: Node { type: 'Identifier', start: 46, end: 52, name: 'result' },
    init: Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' } } ]
Node {
  type: 'VariableDeclarator',
  start: 46,
  end: 58,
  id: Node { type: 'Identifier', start: 46, end: 52, name: 'result' },
  init: Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' } }
VariableDeclarator
46
58
Node { type: 'Identifier', start: 46, end: 52, name: 'result' }
Identifier
46
52
result
Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' }
Literal
55
58
101
101
var
Node {
  type: 'TryStatement',
  start: 64,
  end: 266,
  block: 
   Node {
     type: 'BlockStatement',
     start: 68,
     end: 182,
     body: [ [Node], [Node], [Node], [Node], [Node], [Node] ] },
  handler: 
   Node {
     type: 'CatchClause',
     start: 183,
     end: 266,
     param: Node { type: 'Identifier', start: 190, end: 191, name: 'e' },
     body: Node { type: 'BlockStatement', start: 193, end: 266, body: [Array] } },
  finalizer: null }
TryStatement
64
266
Node {
  type: 'BlockStatement',
  start: 68,
  end: 182,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 78,
       end: 86,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 95,
       end: 103,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 112,
       end: 125,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 134,
       end: 142,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 151,
       end: 159,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 168,
       end: 176,
       expression: [Node] } ] }
BlockStatement
68
182
[ Node {
    type: 'ExpressionStatement',
    start: 78,
    end: 86,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 78,
       end: 85,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 95,
    end: 103,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 95,
       end: 102,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 112,
    end: 125,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 112,
       end: 124,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 134,
    end: 142,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 134,
       end: 141,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 151,
    end: 159,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 151,
       end: 158,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 168,
    end: 176,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 168,
       end: 175,
       operator: '=',
       left: [Node],
       right: [Node] } } ]
Node {
  type: 'ExpressionStatement',
  start: 78,
  end: 86,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 78,
     end: 85,
     operator: '=',
     left: Node { type: 'Identifier', start: 78, end: 79, name: 'x' },
     right: Node { type: 'Literal', start: 82, end: 85, value: 102, raw: '102' } } }
ExpressionStatement
78
86
Node {
  type: 'AssignmentExpression',
  start: 78,
  end: 85,
  operator: '=',
  left: Node { type: 'Identifier', start: 78, end: 79, name: 'x' },
  right: Node { type: 'Literal', start: 82, end: 85, value: 102, raw: '102' } }
AssignmentExpression
78
85
=
Node { type: 'Identifier', start: 78, end: 79, name: 'x' }
Identifier
78
79
x
Node { type: 'Literal', start: 82, end: 85, value: 102, raw: '102' }
Literal
82
85
102
102
Node {
  type: 'ExpressionStatement',
  start: 95,
  end: 103,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 95,
     end: 102,
     operator: '=',
     left: Node { type: 'Identifier', start: 95, end: 96, name: 'p' },
     right: Node { type: 'Literal', start: 99, end: 102, value: 103, raw: '103' } } }
ExpressionStatement
95
103
Node {
  type: 'AssignmentExpression',
  start: 95,
  end: 102,
  operator: '=',
  left: Node { type: 'Identifier', start: 95, end: 96, name: 'p' },
  right: Node { type: 'Literal', start: 99, end: 102, value: 103, raw: '103' } }
AssignmentExpression
95
102
=
Node { type: 'Identifier', start: 95, end: 96, name: 'p' }
Identifier
95
96
p
Node { type: 'Literal', start: 99, end: 102, value: 103, raw: '103' }
Literal
99
102
103
103
Node {
  type: 'ExpressionStatement',
  start: 112,
  end: 125,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 112,
     end: 124,
     operator: '=',
     left: Node { type: 'Identifier', start: 112, end: 118, name: 'result' },
     right: 
      Node {
        type: 'MemberExpression',
        start: 121,
        end: 124,
        object: [Node],
        property: [Node],
        computed: false } } }
ExpressionStatement
112
125
Node {
  type: 'AssignmentExpression',
  start: 112,
  end: 124,
  operator: '=',
  left: Node { type: 'Identifier', start: 112, end: 118, name: 'result' },
  right: 
   Node {
     type: 'MemberExpression',
     start: 121,
     end: 124,
     object: Node { type: 'Identifier', start: 121, end: 122, name: 'o' },
     property: Node { type: 'Identifier', start: 123, end: 124, name: 'f' },
     computed: false } }
AssignmentExpression
112
124
=
Node { type: 'Identifier', start: 112, end: 118, name: 'result' }
Identifier
112
118
result
Node {
  type: 'MemberExpression',
  start: 121,
  end: 124,
  object: Node { type: 'Identifier', start: 121, end: 122, name: 'o' },
  property: Node { type: 'Identifier', start: 123, end: 124, name: 'f' },
  computed: false }
MemberExpression
121
124
Node { type: 'Identifier', start: 121, end: 122, name: 'o' }
Identifier
121
122
o
Node { type: 'Identifier', start: 123, end: 124, name: 'f' }
Identifier
123
124
f
false
Node {
  type: 'ExpressionStatement',
  start: 134,
  end: 142,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 134,
     end: 141,
     operator: '=',
     left: Node { type: 'Identifier', start: 134, end: 135, name: 'o' },
     right: Node { type: 'Literal', start: 138, end: 141, value: 104, raw: '104' } } }
ExpressionStatement
134
142
Node {
  type: 'AssignmentExpression',
  start: 134,
  end: 141,
  operator: '=',
  left: Node { type: 'Identifier', start: 134, end: 135, name: 'o' },
  right: Node { type: 'Literal', start: 138, end: 141, value: 104, raw: '104' } }
AssignmentExpression
134
141
=
Node { type: 'Identifier', start: 134, end: 135, name: 'o' }
Identifier
134
135
o
Node { type: 'Literal', start: 138, end: 141, value: 104, raw: '104' }
Literal
138
141
104
104
Node {
  type: 'ExpressionStatement',
  start: 151,
  end: 159,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 151,
     end: 158,
     operator: '=',
     left: Node { type: 'Identifier', start: 151, end: 152, name: 'p' },
     right: Node { type: 'Literal', start: 155, end: 158, value: 105, raw: '105' } } }
ExpressionStatement
151
159
Node {
  type: 'AssignmentExpression',
  start: 151,
  end: 158,
  operator: '=',
  left: Node { type: 'Identifier', start: 151, end: 152, name: 'p' },
  right: Node { type: 'Literal', start: 155, end: 158, value: 105, raw: '105' } }
AssignmentExpression
151
158
=
Node { type: 'Identifier', start: 151, end: 152, name: 'p' }
Identifier
151
152
p
Node { type: 'Literal', start: 155, end: 158, value: 105, raw: '105' }
Literal
155
158
105
105
Node {
  type: 'ExpressionStatement',
  start: 168,
  end: 176,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 168,
     end: 175,
     operator: '=',
     left: Node { type: 'Identifier', start: 168, end: 169, name: 'x' },
     right: Node { type: 'Literal', start: 172, end: 175, value: 106, raw: '106' } } }
ExpressionStatement
168
176
Node {
  type: 'AssignmentExpression',
  start: 168,
  end: 175,
  operator: '=',
  left: Node { type: 'Identifier', start: 168, end: 169, name: 'x' },
  right: Node { type: 'Literal', start: 172, end: 175, value: 106, raw: '106' } }
AssignmentExpression
168
175
=
Node { type: 'Identifier', start: 168, end: 169, name: 'x' }
Identifier
168
169
x
Node { type: 'Literal', start: 172, end: 175, value: 106, raw: '106' }
Literal
172
175
106
106
Node {
  type: 'CatchClause',
  start: 183,
  end: 266,
  param: Node { type: 'Identifier', start: 190, end: 191, name: 'e' },
  body: Node { type: 'BlockStatement', start: 193, end: 266, body: [ [Node] ] } }
CatchClause
183
266
Node { type: 'Identifier', start: 190, end: 191, name: 'e' }
Identifier
190
191
e
Node {
  type: 'BlockStatement',
  start: 193,
  end: 266,
  body: 
   [ Node {
       type: 'ReturnStatement',
       start: 203,
       end: 260,
       argument: [Node] } ] }
BlockStatement
193
266
[ Node {
    type: 'ReturnStatement',
    start: 203,
    end: 260,
    argument: 
     Node {
       type: 'ObjectExpression',
       start: 210,
       end: 259,
       properties: [Array] } } ]
Node {
  type: 'ReturnStatement',
  start: 203,
  end: 260,
  argument: 
   Node {
     type: 'ObjectExpression',
     start: 210,
     end: 259,
     properties: [ [Node], [Node] ] } }
ReturnStatement
203
260
Node {
  type: 'ObjectExpression',
  start: 210,
  end: 259,
  properties: 
   [ Node {
       type: 'Property',
       start: 211,
       end: 231,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 233,
       end: 258,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
210
259
[ Node {
    type: 'Property',
    start: 211,
    end: 231,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 211, end: 218, name: 'outcome' },
    value: 
     Node {
       type: 'Literal',
       start: 220,
       end: 231,
       value: 'exception',
       raw: '"exception"' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 233,
    end: 258,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 233, end: 239, name: 'values' },
    value: 
     Node {
       type: 'ArrayExpression',
       start: 241,
       end: 258,
       elements: [Array] },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 211,
  end: 231,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 211, end: 218, name: 'outcome' },
  value: 
   Node {
     type: 'Literal',
     start: 220,
     end: 231,
     value: 'exception',
     raw: '"exception"' },
  kind: 'init' }
Property
211
231
false
false
false
Node { type: 'Identifier', start: 211, end: 218, name: 'outcome' }
Identifier
211
218
outcome
Node {
  type: 'Literal',
  start: 220,
  end: 231,
  value: 'exception',
  raw: '"exception"' }
Literal
220
231
exception
"exception"
init
Node {
  type: 'Property',
  start: 233,
  end: 258,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 233, end: 239, name: 'values' },
  value: 
   Node {
     type: 'ArrayExpression',
     start: 241,
     end: 258,
     elements: [ [Node], [Node], [Node], [Node] ] },
  kind: 'init' }
Property
233
258
false
false
false
Node { type: 'Identifier', start: 233, end: 239, name: 'values' }
Identifier
233
239
values
Node {
  type: 'ArrayExpression',
  start: 241,
  end: 258,
  elements: 
   [ Node { type: 'Identifier', start: 242, end: 243, name: 'o' },
     Node { type: 'Identifier', start: 245, end: 246, name: 'p' },
     Node { type: 'Identifier', start: 248, end: 249, name: 'x' },
     Node { type: 'Identifier', start: 251, end: 257, name: 'result' } ] }
ArrayExpression
241
258
[ Node { type: 'Identifier', start: 242, end: 243, name: 'o' },
  Node { type: 'Identifier', start: 245, end: 246, name: 'p' },
  Node { type: 'Identifier', start: 248, end: 249, name: 'x' },
  Node { type: 'Identifier', start: 251, end: 257, name: 'result' } ]
Node { type: 'Identifier', start: 242, end: 243, name: 'o' }
Identifier
242
243
o
Node { type: 'Identifier', start: 245, end: 246, name: 'p' }
Identifier
245
246
p
Node { type: 'Identifier', start: 248, end: 249, name: 'x' }
Identifier
248
249
x
Node { type: 'Identifier', start: 251, end: 257, name: 'result' }
Identifier
251
257
result
init
null
[+] Exception: ftl-operation-exception.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1888,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 325,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 327,
       end: 341,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 398,
       end: 1229,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 1258,
       end: 1269,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 1270,
       end: 1331,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 1332,
       end: 1361,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 1362,
       end: 1455,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1456,
       end: 1560,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1561,
       end: 1650,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1651,
       end: 1742,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1743,
       end: 1834,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1835,
       end: 1886,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
1888
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 325,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 325, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 327,
    end: 341,
    expression: 
     Node {
       type: 'CallExpression',
       start: 327,
       end: 340,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 398,
    end: 1229,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 403,
       end: 412,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 414,
       end: 424,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 426,
       end: 429,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 431, end: 1229, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 1258,
    end: 1269,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 1270,
    end: 1331,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1270,
       end: 1330,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 1332,
    end: 1361,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 1362,
    end: 1455,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1366,
       end: 1396,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1402,
       end: 1455,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1456,
    end: 1560,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1460,
       end: 1486,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1492,
       end: 1560,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1561,
    end: 1650,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1565,
       end: 1587,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1593,
       end: 1650,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1651,
    end: 1742,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1655,
       end: 1679,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1685,
       end: 1742,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1743,
    end: 1834,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1747,
       end: 1771,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1777,
       end: 1834,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1835,
    end: 1886,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1839,
       end: 1848,
       left: [Node],
       operator: 'in',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1854,
       end: 1886,
       argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 325,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'o' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'p' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 19,
     end: 325,
     body: [ [Node], [Node], [Node], [Node], [Node] ] } }
FunctionDeclaration
0
325
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'o' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'p' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'o' }
Identifier
13
14
o
Node { type: 'Identifier', start: 16, end: 17, name: 'p' }
Identifier
16
17
p
Node {
  type: 'BlockStatement',
  start: 19,
  end: 325,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 25,
       end: 37,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 42,
       end: 59,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 64,
       end: 77,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'TryStatement',
       start: 82,
       end: 271,
       block: [Node],
       handler: [Node],
       finalizer: null },
     Node {
       type: 'ReturnStatement',
       start: 276,
       end: 323,
       argument: [Node] } ] }
BlockStatement
19
325
[ Node {
    type: 'VariableDeclaration',
    start: 25,
    end: 37,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 42,
    end: 59,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 64,
    end: 77,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'TryStatement',
    start: 82,
    end: 271,
    block: Node { type: 'BlockStatement', start: 86, end: 194, body: [Array] },
    handler: 
     Node {
       type: 'CatchClause',
       start: 195,
       end: 271,
       param: [Node],
       body: [Node] },
    finalizer: null },
  Node {
    type: 'ReturnStatement',
    start: 276,
    end: 323,
    argument: 
     Node {
       type: 'ObjectExpression',
       start: 283,
       end: 322,
       properties: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 25,
  end: 37,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 29,
       end: 36,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
25
37
[ Node {
    type: 'VariableDeclarator',
    start: 29,
    end: 36,
    id: Node { type: 'Identifier', start: 29, end: 30, name: 'x' },
    init: Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' } } ]
Node {
  type: 'VariableDeclarator',
  start: 29,
  end: 36,
  id: Node { type: 'Identifier', start: 29, end: 30, name: 'x' },
  init: Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' } }
VariableDeclarator
29
36
Node { type: 'Identifier', start: 29, end: 30, name: 'x' }
Identifier
29
30
x
Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' }
Literal
33
36
100
100
var
Node {
  type: 'VariableDeclaration',
  start: 42,
  end: 59,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 46,
       end: 58,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
42
59
[ Node {
    type: 'VariableDeclarator',
    start: 46,
    end: 58,
    id: Node { type: 'Identifier', start: 46, end: 52, name: 'result' },
    init: Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' } } ]
Node {
  type: 'VariableDeclarator',
  start: 46,
  end: 58,
  id: Node { type: 'Identifier', start: 46, end: 52, name: 'result' },
  init: Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' } }
VariableDeclarator
46
58
Node { type: 'Identifier', start: 46, end: 52, name: 'result' }
Identifier
46
52
result
Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' }
Literal
55
58
101
101
var
Node {
  type: 'VariableDeclaration',
  start: 64,
  end: 77,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 68,
       end: 76,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
64
77
[ Node {
    type: 'VariableDeclarator',
    start: 68,
    end: 76,
    id: Node { type: 'Identifier', start: 68, end: 70, name: 'pf' },
    init: 
     Node {
       type: 'MemberExpression',
       start: 73,
       end: 76,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'VariableDeclarator',
  start: 68,
  end: 76,
  id: Node { type: 'Identifier', start: 68, end: 70, name: 'pf' },
  init: 
   Node {
     type: 'MemberExpression',
     start: 73,
     end: 76,
     object: Node { type: 'Identifier', start: 73, end: 74, name: 'p' },
     property: Node { type: 'Identifier', start: 75, end: 76, name: 'g' },
     computed: false } }
VariableDeclarator
68
76
Node { type: 'Identifier', start: 68, end: 70, name: 'pf' }
Identifier
68
70
pf
Node {
  type: 'MemberExpression',
  start: 73,
  end: 76,
  object: Node { type: 'Identifier', start: 73, end: 74, name: 'p' },
  property: Node { type: 'Identifier', start: 75, end: 76, name: 'g' },
  computed: false }
MemberExpression
73
76
Node { type: 'Identifier', start: 73, end: 74, name: 'p' }
Identifier
73
74
p
Node { type: 'Identifier', start: 75, end: 76, name: 'g' }
Identifier
75
76
g
false
var
Node {
  type: 'TryStatement',
  start: 82,
  end: 271,
  block: 
   Node {
     type: 'BlockStatement',
     start: 86,
     end: 194,
     body: [ [Node], [Node], [Node], [Node], [Node], [Node] ] },
  handler: 
   Node {
     type: 'CatchClause',
     start: 195,
     end: 271,
     param: Node { type: 'Identifier', start: 202, end: 203, name: 'e' },
     body: Node { type: 'BlockStatement', start: 205, end: 271, body: [Array] } },
  finalizer: null }
TryStatement
82
271
Node {
  type: 'BlockStatement',
  start: 86,
  end: 194,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 96,
       end: 104,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 113,
       end: 118,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 127,
       end: 140,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 149,
       end: 157,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 166,
       end: 171,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 180,
       end: 188,
       expression: [Node] } ] }
BlockStatement
86
194
[ Node {
    type: 'ExpressionStatement',
    start: 96,
    end: 104,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 96,
       end: 103,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 113,
    end: 118,
    expression: 
     Node {
       type: 'UpdateExpression',
       start: 113,
       end: 117,
       operator: '++',
       prefix: false,
       argument: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 127,
    end: 140,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 127,
       end: 139,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 149,
    end: 157,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 149,
       end: 156,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 166,
    end: 171,
    expression: 
     Node {
       type: 'UpdateExpression',
       start: 166,
       end: 170,
       operator: '++',
       prefix: false,
       argument: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 180,
    end: 188,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 180,
       end: 187,
       operator: '=',
       left: [Node],
       right: [Node] } } ]
Node {
  type: 'ExpressionStatement',
  start: 96,
  end: 104,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 96,
     end: 103,
     operator: '=',
     left: Node { type: 'Identifier', start: 96, end: 97, name: 'x' },
     right: Node { type: 'Literal', start: 100, end: 103, value: 102, raw: '102' } } }
ExpressionStatement
96
104
Node {
  type: 'AssignmentExpression',
  start: 96,
  end: 103,
  operator: '=',
  left: Node { type: 'Identifier', start: 96, end: 97, name: 'x' },
  right: Node { type: 'Literal', start: 100, end: 103, value: 102, raw: '102' } }
AssignmentExpression
96
103
=
Node { type: 'Identifier', start: 96, end: 97, name: 'x' }
Identifier
96
97
x
Node { type: 'Literal', start: 100, end: 103, value: 102, raw: '102' }
Literal
100
103
102
102
Node {
  type: 'ExpressionStatement',
  start: 113,
  end: 118,
  expression: 
   Node {
     type: 'UpdateExpression',
     start: 113,
     end: 117,
     operator: '++',
     prefix: false,
     argument: Node { type: 'Identifier', start: 113, end: 115, name: 'pf' } } }
ExpressionStatement
113
118
Node {
  type: 'UpdateExpression',
  start: 113,
  end: 117,
  operator: '++',
  prefix: false,
  argument: Node { type: 'Identifier', start: 113, end: 115, name: 'pf' } }
UpdateExpression
113
117
++
false
Node { type: 'Identifier', start: 113, end: 115, name: 'pf' }
Identifier
113
115
pf
Node {
  type: 'ExpressionStatement',
  start: 127,
  end: 140,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 127,
     end: 139,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 127,
        end: 130,
        object: [Node],
        property: [Node],
        computed: false },
     right: 
      Node {
        type: 'BinaryExpression',
        start: 133,
        end: 139,
        left: [Node],
        operator: '+',
        right: [Node] } } }
ExpressionStatement
127
140
Node {
  type: 'AssignmentExpression',
  start: 127,
  end: 139,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 127,
     end: 130,
     object: Node { type: 'Identifier', start: 127, end: 128, name: 'o' },
     property: Node { type: 'Identifier', start: 129, end: 130, name: 'f' },
     computed: false },
  right: 
   Node {
     type: 'BinaryExpression',
     start: 133,
     end: 139,
     left: Node { type: 'Identifier', start: 133, end: 134, name: 'x' },
     operator: '+',
     right: Node { type: 'Identifier', start: 137, end: 139, name: 'pf' } } }
AssignmentExpression
127
139
=
Node {
  type: 'MemberExpression',
  start: 127,
  end: 130,
  object: Node { type: 'Identifier', start: 127, end: 128, name: 'o' },
  property: Node { type: 'Identifier', start: 129, end: 130, name: 'f' },
  computed: false }
MemberExpression
127
130
Node { type: 'Identifier', start: 127, end: 128, name: 'o' }
Identifier
127
128
o
Node { type: 'Identifier', start: 129, end: 130, name: 'f' }
Identifier
129
130
f
false
Node {
  type: 'BinaryExpression',
  start: 133,
  end: 139,
  left: Node { type: 'Identifier', start: 133, end: 134, name: 'x' },
  operator: '+',
  right: Node { type: 'Identifier', start: 137, end: 139, name: 'pf' } }
BinaryExpression
133
139
Node { type: 'Identifier', start: 133, end: 134, name: 'x' }
Identifier
133
134
x
+
Node { type: 'Identifier', start: 137, end: 139, name: 'pf' }
Identifier
137
139
pf
Node {
  type: 'ExpressionStatement',
  start: 149,
  end: 157,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 149,
     end: 156,
     operator: '=',
     left: Node { type: 'Identifier', start: 149, end: 150, name: 'o' },
     right: Node { type: 'Literal', start: 153, end: 156, value: 104, raw: '104' } } }
ExpressionStatement
149
157
Node {
  type: 'AssignmentExpression',
  start: 149,
  end: 156,
  operator: '=',
  left: Node { type: 'Identifier', start: 149, end: 150, name: 'o' },
  right: Node { type: 'Literal', start: 153, end: 156, value: 104, raw: '104' } }
AssignmentExpression
149
156
=
Node { type: 'Identifier', start: 149, end: 150, name: 'o' }
Identifier
149
150
o
Node { type: 'Literal', start: 153, end: 156, value: 104, raw: '104' }
Literal
153
156
104
104
Node {
  type: 'ExpressionStatement',
  start: 166,
  end: 171,
  expression: 
   Node {
     type: 'UpdateExpression',
     start: 166,
     end: 170,
     operator: '++',
     prefix: false,
     argument: Node { type: 'Identifier', start: 166, end: 168, name: 'pf' } } }
ExpressionStatement
166
171
Node {
  type: 'UpdateExpression',
  start: 166,
  end: 170,
  operator: '++',
  prefix: false,
  argument: Node { type: 'Identifier', start: 166, end: 168, name: 'pf' } }
UpdateExpression
166
170
++
false
Node { type: 'Identifier', start: 166, end: 168, name: 'pf' }
Identifier
166
168
pf
Node {
  type: 'ExpressionStatement',
  start: 180,
  end: 188,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 180,
     end: 187,
     operator: '=',
     left: Node { type: 'Identifier', start: 180, end: 181, name: 'x' },
     right: Node { type: 'Literal', start: 184, end: 187, value: 106, raw: '106' } } }
ExpressionStatement
180
188
Node {
  type: 'AssignmentExpression',
  start: 180,
  end: 187,
  operator: '=',
  left: Node { type: 'Identifier', start: 180, end: 181, name: 'x' },
  right: Node { type: 'Literal', start: 184, end: 187, value: 106, raw: '106' } }
AssignmentExpression
180
187
=
Node { type: 'Identifier', start: 180, end: 181, name: 'x' }
Identifier
180
181
x
Node { type: 'Literal', start: 184, end: 187, value: 106, raw: '106' }
Literal
184
187
106
106
Node {
  type: 'CatchClause',
  start: 195,
  end: 271,
  param: Node { type: 'Identifier', start: 202, end: 203, name: 'e' },
  body: Node { type: 'BlockStatement', start: 205, end: 271, body: [ [Node] ] } }
CatchClause
195
271
Node { type: 'Identifier', start: 202, end: 203, name: 'e' }
Identifier
202
203
e
Node {
  type: 'BlockStatement',
  start: 205,
  end: 271,
  body: 
   [ Node {
       type: 'ReturnStatement',
       start: 215,
       end: 265,
       argument: [Node] } ] }
BlockStatement
205
271
[ Node {
    type: 'ReturnStatement',
    start: 215,
    end: 265,
    argument: 
     Node {
       type: 'ObjectExpression',
       start: 222,
       end: 264,
       properties: [Array] } } ]
Node {
  type: 'ReturnStatement',
  start: 215,
  end: 265,
  argument: 
   Node {
     type: 'ObjectExpression',
     start: 222,
     end: 264,
     properties: [ [Node], [Node] ] } }
ReturnStatement
215
265
Node {
  type: 'ObjectExpression',
  start: 222,
  end: 264,
  properties: 
   [ Node {
       type: 'Property',
       start: 223,
       end: 243,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 245,
       end: 263,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
222
264
[ Node {
    type: 'Property',
    start: 223,
    end: 243,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 223, end: 230, name: 'outcome' },
    value: 
     Node {
       type: 'Literal',
       start: 232,
       end: 243,
       value: 'exception',
       raw: '"exception"' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 245,
    end: 263,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 245, end: 251, name: 'values' },
    value: 
     Node {
       type: 'ArrayExpression',
       start: 253,
       end: 263,
       elements: [Array] },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 223,
  end: 243,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 223, end: 230, name: 'outcome' },
  value: 
   Node {
     type: 'Literal',
     start: 232,
     end: 243,
     value: 'exception',
     raw: '"exception"' },
  kind: 'init' }
Property
223
243
false
false
false
Node { type: 'Identifier', start: 223, end: 230, name: 'outcome' }
Identifier
223
230
outcome
Node {
  type: 'Literal',
  start: 232,
  end: 243,
  value: 'exception',
  raw: '"exception"' }
Literal
232
243
exception
"exception"
init
Node {
  type: 'Property',
  start: 245,
  end: 263,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 245, end: 251, name: 'values' },
  value: 
   Node {
     type: 'ArrayExpression',
     start: 253,
     end: 263,
     elements: [ [Node], [Node], [Node] ] },
  kind: 'init' }
Property
245
263
false
false
false
Node { type: 'Identifier', start: 245, end: 251, name: 'values' }
Identifier
245
251
values
Node {
  type: 'ArrayExpression',
  start: 253,
  end: 263,
  elements: 
   [ Node { type: 'Identifier', start: 254, end: 255, name: 'o' },
     Node { type: 'Identifier', start: 257, end: 259, name: 'pf' },
     Node { type: 'Identifier', start: 261, end: 262, name: 'x' } ] }
ArrayExpression
253
263
[ Node { type: 'Identifier', start: 254, end: 255, name: 'o' },
  Node { type: 'Identifier', start: 257, end: 259, name: 'pf' },
  Node { type: 'Identifier', start: 261, end: 262, name: 'x' } ]
Node { type: 'Identifier', start: 254, end: 255, name: 'o' }
Identifier
254
255
o
Node { type: 'Identifier', start: 257, end: 259, name: 'pf' }
Identifier
257
259
pf
Node { type: 'Identifier', start: 261, end: 262, name: 'x' }
Identifier
261
262
x
init
null
[+] Exception: ftl-put-by-id-setter-exception-interesting-live-state.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1525,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 194,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 196,
       end: 210,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 267,
       end: 1089,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 1118,
       end: 1129,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'TryStatement',
       start: 1130,
       end: 1379,
       block: [Node],
       handler: [Node],
       finalizer: null },
     Node {
       type: 'IfStatement',
       start: 1380,
       end: 1473,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1474,
       end: 1524,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
1525
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 194,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 194, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 196,
    end: 210,
    expression: 
     Node {
       type: 'CallExpression',
       start: 196,
       end: 209,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 267,
    end: 1089,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 272,
       end: 281,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 283,
       end: 293,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 295,
       end: 298,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 300, end: 1089, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 1118,
    end: 1129,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'TryStatement',
    start: 1130,
    end: 1379,
    block: Node { type: 'BlockStatement', start: 1134, end: 1253, body: [Array] },
    handler: 
     Node {
       type: 'CatchClause',
       start: 1254,
       end: 1379,
       param: [Node],
       body: [Node] },
    finalizer: null },
  Node {
    type: 'IfStatement',
    start: 1380,
    end: 1473,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1384,
       end: 1414,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1420,
       end: 1473,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1474,
    end: 1524,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1478,
       end: 1487,
       left: [Node],
       operator: 'in',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1493,
       end: 1524,
       argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 194,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'o' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'p' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 19,
     end: 194,
     body: 
      [ [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node] ] } }
FunctionDeclaration
0
194
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'o' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'p' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'o' }
Identifier
13
14
o
Node { type: 'Identifier', start: 16, end: 17, name: 'p' }
Identifier
16
17
p
Node {
  type: 'BlockStatement',
  start: 19,
  end: 194,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 25,
       end: 37,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 42,
       end: 59,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 64,
       end: 72,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 77,
       end: 85,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 90,
       end: 102,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 107,
       end: 115,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 120,
       end: 128,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 133,
       end: 141,
       expression: [Node] },
     Node {
       type: 'ReturnStatement',
       start: 146,
       end: 192,
       argument: [Node] } ] }
BlockStatement
19
194
[ Node {
    type: 'VariableDeclaration',
    start: 25,
    end: 37,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 42,
    end: 59,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 64,
    end: 72,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 64,
       end: 71,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 77,
    end: 85,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 77,
       end: 84,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 90,
    end: 102,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 90,
       end: 101,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 107,
    end: 115,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 107,
       end: 114,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 120,
    end: 128,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 120,
       end: 127,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 133,
    end: 141,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 133,
       end: 140,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ReturnStatement',
    start: 146,
    end: 192,
    argument: 
     Node {
       type: 'ObjectExpression',
       start: 153,
       end: 191,
       properties: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 25,
  end: 37,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 29,
       end: 36,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
25
37
[ Node {
    type: 'VariableDeclarator',
    start: 29,
    end: 36,
    id: Node { type: 'Identifier', start: 29, end: 30, name: 'x' },
    init: Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' } } ]
Node {
  type: 'VariableDeclarator',
  start: 29,
  end: 36,
  id: Node { type: 'Identifier', start: 29, end: 30, name: 'x' },
  init: Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' } }
VariableDeclarator
29
36
Node { type: 'Identifier', start: 29, end: 30, name: 'x' }
Identifier
29
30
x
Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' }
Literal
33
36
100
100
var
Node {
  type: 'VariableDeclaration',
  start: 42,
  end: 59,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 46,
       end: 58,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
42
59
[ Node {
    type: 'VariableDeclarator',
    start: 46,
    end: 58,
    id: Node { type: 'Identifier', start: 46, end: 52, name: 'result' },
    init: Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' } } ]
Node {
  type: 'VariableDeclarator',
  start: 46,
  end: 58,
  id: Node { type: 'Identifier', start: 46, end: 52, name: 'result' },
  init: Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' } }
VariableDeclarator
46
58
Node { type: 'Identifier', start: 46, end: 52, name: 'result' }
Identifier
46
52
result
Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' }
Literal
55
58
101
101
var
Node {
  type: 'ExpressionStatement',
  start: 64,
  end: 72,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 64,
     end: 71,
     operator: '=',
     left: Node { type: 'Identifier', start: 64, end: 65, name: 'x' },
     right: Node { type: 'Literal', start: 68, end: 71, value: 102, raw: '102' } } }
ExpressionStatement
64
72
Node {
  type: 'AssignmentExpression',
  start: 64,
  end: 71,
  operator: '=',
  left: Node { type: 'Identifier', start: 64, end: 65, name: 'x' },
  right: Node { type: 'Literal', start: 68, end: 71, value: 102, raw: '102' } }
AssignmentExpression
64
71
=
Node { type: 'Identifier', start: 64, end: 65, name: 'x' }
Identifier
64
65
x
Node { type: 'Literal', start: 68, end: 71, value: 102, raw: '102' }
Literal
68
71
102
102
Node {
  type: 'ExpressionStatement',
  start: 77,
  end: 85,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 77,
     end: 84,
     operator: '=',
     left: Node { type: 'Identifier', start: 77, end: 78, name: 'p' },
     right: Node { type: 'Literal', start: 81, end: 84, value: 103, raw: '103' } } }
ExpressionStatement
77
85
Node {
  type: 'AssignmentExpression',
  start: 77,
  end: 84,
  operator: '=',
  left: Node { type: 'Identifier', start: 77, end: 78, name: 'p' },
  right: Node { type: 'Literal', start: 81, end: 84, value: 103, raw: '103' } }
AssignmentExpression
77
84
=
Node { type: 'Identifier', start: 77, end: 78, name: 'p' }
Identifier
77
78
p
Node { type: 'Literal', start: 81, end: 84, value: 103, raw: '103' }
Literal
81
84
103
103
Node {
  type: 'ExpressionStatement',
  start: 90,
  end: 102,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 90,
     end: 101,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 90,
        end: 93,
        object: [Node],
        property: [Node],
        computed: false },
     right: 
      Node {
        type: 'BinaryExpression',
        start: 96,
        end: 101,
        left: [Node],
        operator: '+',
        right: [Node] } } }
ExpressionStatement
90
102
Node {
  type: 'AssignmentExpression',
  start: 90,
  end: 101,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 90,
     end: 93,
     object: Node { type: 'Identifier', start: 90, end: 91, name: 'o' },
     property: Node { type: 'Identifier', start: 92, end: 93, name: 'f' },
     computed: false },
  right: 
   Node {
     type: 'BinaryExpression',
     start: 96,
     end: 101,
     left: Node { type: 'Identifier', start: 96, end: 97, name: 'x' },
     operator: '+',
     right: Node { type: 'Identifier', start: 100, end: 101, name: 'p' } } }
AssignmentExpression
90
101
=
Node {
  type: 'MemberExpression',
  start: 90,
  end: 93,
  object: Node { type: 'Identifier', start: 90, end: 91, name: 'o' },
  property: Node { type: 'Identifier', start: 92, end: 93, name: 'f' },
  computed: false }
MemberExpression
90
93
Node { type: 'Identifier', start: 90, end: 91, name: 'o' }
Identifier
90
91
o
Node { type: 'Identifier', start: 92, end: 93, name: 'f' }
Identifier
92
93
f
false
Node {
  type: 'BinaryExpression',
  start: 96,
  end: 101,
  left: Node { type: 'Identifier', start: 96, end: 97, name: 'x' },
  operator: '+',
  right: Node { type: 'Identifier', start: 100, end: 101, name: 'p' } }
BinaryExpression
96
101
Node { type: 'Identifier', start: 96, end: 97, name: 'x' }
Identifier
96
97
x
+
Node { type: 'Identifier', start: 100, end: 101, name: 'p' }
Identifier
100
101
p
Node {
  type: 'ExpressionStatement',
  start: 107,
  end: 115,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 107,
     end: 114,
     operator: '=',
     left: Node { type: 'Identifier', start: 107, end: 108, name: 'o' },
     right: Node { type: 'Literal', start: 111, end: 114, value: 104, raw: '104' } } }
ExpressionStatement
107
115
Node {
  type: 'AssignmentExpression',
  start: 107,
  end: 114,
  operator: '=',
  left: Node { type: 'Identifier', start: 107, end: 108, name: 'o' },
  right: Node { type: 'Literal', start: 111, end: 114, value: 104, raw: '104' } }
AssignmentExpression
107
114
=
Node { type: 'Identifier', start: 107, end: 108, name: 'o' }
Identifier
107
108
o
Node { type: 'Literal', start: 111, end: 114, value: 104, raw: '104' }
Literal
111
114
104
104
Node {
  type: 'ExpressionStatement',
  start: 120,
  end: 128,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 120,
     end: 127,
     operator: '=',
     left: Node { type: 'Identifier', start: 120, end: 121, name: 'p' },
     right: Node { type: 'Literal', start: 124, end: 127, value: 105, raw: '105' } } }
ExpressionStatement
120
128
Node {
  type: 'AssignmentExpression',
  start: 120,
  end: 127,
  operator: '=',
  left: Node { type: 'Identifier', start: 120, end: 121, name: 'p' },
  right: Node { type: 'Literal', start: 124, end: 127, value: 105, raw: '105' } }
AssignmentExpression
120
127
=
Node { type: 'Identifier', start: 120, end: 121, name: 'p' }
Identifier
120
121
p
Node { type: 'Literal', start: 124, end: 127, value: 105, raw: '105' }
Literal
124
127
105
105
Node {
  type: 'ExpressionStatement',
  start: 133,
  end: 141,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 133,
     end: 140,
     operator: '=',
     left: Node { type: 'Identifier', start: 133, end: 134, name: 'x' },
     right: Node { type: 'Literal', start: 137, end: 140, value: 106, raw: '106' } } }
ExpressionStatement
133
141
Node {
  type: 'AssignmentExpression',
  start: 133,
  end: 140,
  operator: '=',
  left: Node { type: 'Identifier', start: 133, end: 134, name: 'x' },
  right: Node { type: 'Literal', start: 137, end: 140, value: 106, raw: '106' } }
AssignmentExpression
133
140
=
Node { type: 'Identifier', start: 133, end: 134, name: 'x' }
Identifier
133
134
x
Node { type: 'Literal', start: 137, end: 140, value: 106, raw: '106' }
Literal
137
140
106
106
Node {
  type: 'ReturnStatement',
  start: 146,
  end: 192,
  argument: 
   Node {
     type: 'ObjectExpression',
     start: 153,
     end: 191,
     properties: [ [Node], [Node] ] } }
ReturnStatement
146
192
Node {
  type: 'ObjectExpression',
  start: 153,
  end: 191,
  properties: 
   [ Node {
       type: 'Property',
       start: 154,
       end: 171,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 173,
       end: 190,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
153
191
[ Node {
    type: 'Property',
    start: 154,
    end: 171,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 154, end: 161, name: 'outcome' },
    value: 
     Node {
       type: 'Literal',
       start: 163,
       end: 171,
       value: 'return',
       raw: '"return"' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 173,
    end: 190,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 173, end: 179, name: 'values' },
    value: 
     Node {
       type: 'ArrayExpression',
       start: 181,
       end: 190,
       elements: [Array] },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 154,
  end: 171,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 154, end: 161, name: 'outcome' },
  value: 
   Node {
     type: 'Literal',
     start: 163,
     end: 171,
     value: 'return',
     raw: '"return"' },
  kind: 'init' }
Property
154
171
false
false
false
Node { type: 'Identifier', start: 154, end: 161, name: 'outcome' }
Identifier
154
161
outcome
Node {
  type: 'Literal',
  start: 163,
  end: 171,
  value: 'return',
  raw: '"return"' }
Literal
163
171
return
"return"
init
Node {
  type: 'Property',
  start: 173,
  end: 190,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 173, end: 179, name: 'values' },
  value: 
   Node {
     type: 'ArrayExpression',
     start: 181,
     end: 190,
     elements: [ [Node], [Node], [Node] ] },
  kind: 'init' }
Property
173
190
false
false
false
Node { type: 'Identifier', start: 173, end: 179, name: 'values' }
Identifier
173
179
values
Node {
  type: 'ArrayExpression',
  start: 181,
  end: 190,
  elements: 
   [ Node { type: 'Identifier', start: 182, end: 183, name: 'o' },
     Node { type: 'Identifier', start: 185, end: 186, name: 'p' },
     Node { type: 'Identifier', start: 188, end: 189, name: 'x' } ] }
ArrayExpression
181
190
[ Node { type: 'Identifier', start: 182, end: 183, name: 'o' },
  Node { type: 'Identifier', start: 185, end: 186, name: 'p' },
  Node { type: 'Identifier', start: 188, end: 189, name: 'x' } ]
Node { type: 'Identifier', start: 182, end: 183, name: 'o' }
Identifier
182
183
o
Node { type: 'Identifier', start: 185, end: 186, name: 'p' }
Identifier
185
186
p
Node { type: 'Identifier', start: 188, end: 189, name: 'x' }
Identifier
188
189
x
init
Node {
  type: 'ExpressionStatement',
  start: 196,
  end: 210,
  expression: 
   Node {
     type: 'CallExpression',
     start: 196,
     end: 209,
     callee: Node { type: 'Identifier', start: 196, end: 204, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
196
210
Node {
  type: 'CallExpression',
  start: 196,
  end: 209,
  callee: Node { type: 'Identifier', start: 196, end: 204, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 205, end: 208, name: 'foo' } ] }
CallExpression
196
209
Node { type: 'Identifier', start: 196, end: 204, name: 'noInline' }
Identifier
196
204
noInline
[ Node { type: 'Identifier', start: 205, end: 208, name: 'foo' } ]
Node { type: 'Identifier', start: 205, end: 208, name: 'foo' }
Identifier
205
208
foo
Node {
  type: 'ForStatement',
  start: 267,
  end: 1089,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 272,
     end: 281,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 283,
     end: 293,
     left: Node { type: 'Identifier', start: 283, end: 284, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 287,
        end: 293,
        value: 100000,
        raw: '100000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 295,
     end: 298,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 297, end: 298, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 300,
     end: 1089,
     body: 
      [ [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node] ] } }
ForStatement
267
1089
Node {
  type: 'VariableDeclaration',
  start: 272,
  end: 281,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 276,
       end: 281,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
272
281
[ Node {
    type: 'VariableDeclarator',
    start: 276,
    end: 281,
    id: Node { type: 'Identifier', start: 276, end: 277, name: 'i' },
    init: Node { type: 'Literal', start: 280, end: 281, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 276,
  end: 281,
  id: Node { type: 'Identifier', start: 276, end: 277, name: 'i' },
  init: Node { type: 'Literal', start: 280, end: 281, value: 0, raw: '0' } }
VariableDeclarator
276
281
Node { type: 'Identifier', start: 276, end: 277, name: 'i' }
Identifier
276
277
i
Node { type: 'Literal', start: 280, end: 281, value: 0, raw: '0' }
Literal
280
281
0
0
var
Node {
  type: 'BinaryExpression',
  start: 283,
  end: 293,
  left: Node { type: 'Identifier', start: 283, end: 284, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 287,
     end: 293,
     value: 100000,
     raw: '100000' } }
BinaryExpression
283
293
Node { type: 'Identifier', start: 283, end: 284, name: 'i' }
Identifier
283
284
i
<
Node {
  type: 'Literal',
  start: 287,
  end: 293,
  value: 100000,
  raw: '100000' }
Literal
287
293
100000
100000
Node {
  type: 'UpdateExpression',
  start: 295,
  end: 298,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 297, end: 298, name: 'i' } }
UpdateExpression
295
298
++
true
Node { type: 'Identifier', start: 297, end: 298, name: 'i' }
Identifier
297
298
i
Node {
  type: 'BlockStatement',
  start: 300,
  end: 1089,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 306,
       end: 317,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 322,
       end: 396,
       expression: [Node] },
     Node {
       type: 'IfStatement',
       start: 401,
       end: 435,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'VariableDeclaration',
       start: 464,
       end: 484,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 489,
       end: 584,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 589,
       end: 698,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 703,
       end: 799,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 804,
       end: 900,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 905,
       end: 1001,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1006,
       end: 1087,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
300
1089
[ Node {
    type: 'VariableDeclaration',
    start: 306,
    end: 317,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 322,
    end: 396,
    expression: 
     Node {
       type: 'CallExpression',
       start: 322,
       end: 395,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'IfStatement',
    start: 401,
    end: 435,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 405,
       end: 410,
       left: [Node],
       operator: '&',
       right: [Node] },
    consequent: 
     Node {
       type: 'ExpressionStatement',
       start: 420,
       end: 435,
       expression: [Node] },
    alternate: null },
  Node {
    type: 'VariableDeclaration',
    start: 464,
    end: 484,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 489,
    end: 584,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 493,
       end: 520,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 530, end: 584, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 589,
    end: 698,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 593,
       end: 619,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 629, end: 698, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 703,
    end: 799,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 707,
       end: 731,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 741, end: 799, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 804,
    end: 900,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 808,
       end: 832,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 842, end: 900, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 905,
    end: 1001,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 909,
       end: 933,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 943,
       end: 1001,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1006,
    end: 1087,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1010,
       end: 1027,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1037,
       end: 1087,
       argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 306,
  end: 317,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 310,
       end: 316,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
306
317
[ Node {
    type: 'VariableDeclarator',
    start: 310,
    end: 316,
    id: Node { type: 'Identifier', start: 310, end: 311, name: 'o' },
    init: Node { type: 'ObjectExpression', start: 314, end: 316, properties: [] } } ]
Node {
  type: 'VariableDeclarator',
  start: 310,
  end: 316,
  id: Node { type: 'Identifier', start: 310, end: 311, name: 'o' },
  init: Node { type: 'ObjectExpression', start: 314, end: 316, properties: [] } }
VariableDeclarator
310
316
Node { type: 'Identifier', start: 310, end: 311, name: 'o' }
Identifier
310
311
o
Node { type: 'ObjectExpression', start: 314, end: 316, properties: [] }
ObjectExpression
314
316
[]
var
Node {
  type: 'ExpressionStatement',
  start: 322,
  end: 396,
  expression: 
   Node {
     type: 'CallExpression',
     start: 322,
     end: 395,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 322,
        end: 340,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [ [Node], [Node] ] } }
ExpressionStatement
322
396
Node {
  type: 'CallExpression',
  start: 322,
  end: 395,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 322,
     end: 340,
     object: Node { type: 'Identifier', start: 322, end: 323, name: 'o' },
     property: 
      Node {
        type: 'Identifier',
        start: 324,
        end: 340,
        name: '__defineSetter__' },
     computed: false },
  arguments: 
   [ Node { type: 'Literal', start: 341, end: 344, value: 'f', raw: '"f"' },
     Node {
       type: 'FunctionExpression',
       start: 346,
       end: 394,
       id: null,
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] } ] }
CallExpression
322
395
Node {
  type: 'MemberExpression',
  start: 322,
  end: 340,
  object: Node { type: 'Identifier', start: 322, end: 323, name: 'o' },
  property: 
   Node {
     type: 'Identifier',
     start: 324,
     end: 340,
     name: '__defineSetter__' },
  computed: false }
MemberExpression
322
340
Node { type: 'Identifier', start: 322, end: 323, name: 'o' }
Identifier
322
323
o
Node {
  type: 'Identifier',
  start: 324,
  end: 340,
  name: '__defineSetter__' }
Identifier
324
340
__defineSetter__
false
[ Node { type: 'Literal', start: 341, end: 344, value: 'f', raw: '"f"' },
  Node {
    type: 'FunctionExpression',
    start: 346,
    end: 394,
    id: null,
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 362, end: 394, body: [Array] } } ]
Node { type: 'Literal', start: 341, end: 344, value: 'f', raw: '"f"' }
Literal
341
344
f
"f"
Node {
  type: 'FunctionExpression',
  start: 346,
  end: 394,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 355, end: 360, name: 'value' } ],
  body: Node { type: 'BlockStatement', start: 362, end: 394, body: [ [Node] ] } }
FunctionExpression
346
394
null
[+] Exception: ftl-put-by-id-setter-exception-no-catch.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1860,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 310,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 312,
       end: 326,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 383,
       end: 1205,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 1234,
       end: 1245,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 1246,
       end: 1307,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 1308,
       end: 1333,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 1334,
       end: 1427,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1428,
       end: 1532,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1533,
       end: 1622,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1623,
       end: 1714,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1715,
       end: 1806,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1807,
       end: 1858,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
1860
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 310,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 310, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 312,
    end: 326,
    expression: 
     Node {
       type: 'CallExpression',
       start: 312,
       end: 325,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 383,
    end: 1205,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 388,
       end: 397,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 399,
       end: 409,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 411,
       end: 414,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 416, end: 1205, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 1234,
    end: 1245,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 1246,
    end: 1307,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1246,
       end: 1306,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 1308,
    end: 1333,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 1334,
    end: 1427,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1338,
       end: 1368,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1374,
       end: 1427,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1428,
    end: 1532,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1432,
       end: 1458,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1464,
       end: 1532,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1533,
    end: 1622,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1537,
       end: 1559,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1565,
       end: 1622,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1623,
    end: 1714,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1627,
       end: 1651,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1657,
       end: 1714,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1715,
    end: 1806,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1719,
       end: 1743,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1749,
       end: 1806,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1807,
    end: 1858,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1811,
       end: 1820,
       left: [Node],
       operator: 'in',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1826,
       end: 1858,
       argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 310,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'o' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'p' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 19,
     end: 310,
     body: [ [Node], [Node], [Node], [Node] ] } }
FunctionDeclaration
0
310
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'o' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'p' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'o' }
Identifier
13
14
o
Node { type: 'Identifier', start: 16, end: 17, name: 'p' }
Identifier
16
17
p
Node {
  type: 'BlockStatement',
  start: 19,
  end: 310,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 25,
       end: 37,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 42,
       end: 59,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'TryStatement',
       start: 64,
       end: 257,
       block: [Node],
       handler: [Node],
       finalizer: null },
     Node {
       type: 'ReturnStatement',
       start: 262,
       end: 308,
       argument: [Node] } ] }
BlockStatement
19
310
[ Node {
    type: 'VariableDeclaration',
    start: 25,
    end: 37,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 42,
    end: 59,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'TryStatement',
    start: 64,
    end: 257,
    block: Node { type: 'BlockStatement', start: 68, end: 181, body: [Array] },
    handler: 
     Node {
       type: 'CatchClause',
       start: 182,
       end: 257,
       param: [Node],
       body: [Node] },
    finalizer: null },
  Node {
    type: 'ReturnStatement',
    start: 262,
    end: 308,
    argument: 
     Node {
       type: 'ObjectExpression',
       start: 269,
       end: 307,
       properties: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 25,
  end: 37,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 29,
       end: 36,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
25
37
[ Node {
    type: 'VariableDeclarator',
    start: 29,
    end: 36,
    id: Node { type: 'Identifier', start: 29, end: 30, name: 'x' },
    init: Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' } } ]
Node {
  type: 'VariableDeclarator',
  start: 29,
  end: 36,
  id: Node { type: 'Identifier', start: 29, end: 30, name: 'x' },
  init: Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' } }
VariableDeclarator
29
36
Node { type: 'Identifier', start: 29, end: 30, name: 'x' }
Identifier
29
30
x
Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' }
Literal
33
36
100
100
var
Node {
  type: 'VariableDeclaration',
  start: 42,
  end: 59,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 46,
       end: 58,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
42
59
[ Node {
    type: 'VariableDeclarator',
    start: 46,
    end: 58,
    id: Node { type: 'Identifier', start: 46, end: 52, name: 'result' },
    init: Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' } } ]
Node {
  type: 'VariableDeclarator',
  start: 46,
  end: 58,
  id: Node { type: 'Identifier', start: 46, end: 52, name: 'result' },
  init: Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' } }
VariableDeclarator
46
58
Node { type: 'Identifier', start: 46, end: 52, name: 'result' }
Identifier
46
52
result
Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' }
Literal
55
58
101
101
var
Node {
  type: 'TryStatement',
  start: 64,
  end: 257,
  block: 
   Node {
     type: 'BlockStatement',
     start: 68,
     end: 181,
     body: [ [Node], [Node], [Node], [Node], [Node], [Node] ] },
  handler: 
   Node {
     type: 'CatchClause',
     start: 182,
     end: 257,
     param: Node { type: 'Identifier', start: 189, end: 190, name: 'e' },
     body: Node { type: 'BlockStatement', start: 192, end: 257, body: [Array] } },
  finalizer: null }
TryStatement
64
257
Node {
  type: 'BlockStatement',
  start: 68,
  end: 181,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 78,
       end: 86,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 95,
       end: 103,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 112,
       end: 124,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 133,
       end: 141,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 150,
       end: 158,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 167,
       end: 175,
       expression: [Node] } ] }
BlockStatement
68
181
[ Node {
    type: 'ExpressionStatement',
    start: 78,
    end: 86,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 78,
       end: 85,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 95,
    end: 103,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 95,
       end: 102,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 112,
    end: 124,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 112,
       end: 123,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 133,
    end: 141,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 133,
       end: 140,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 150,
    end: 158,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 150,
       end: 157,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 167,
    end: 175,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 167,
       end: 174,
       operator: '=',
       left: [Node],
       right: [Node] } } ]
Node {
  type: 'ExpressionStatement',
  start: 78,
  end: 86,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 78,
     end: 85,
     operator: '=',
     left: Node { type: 'Identifier', start: 78, end: 79, name: 'x' },
     right: Node { type: 'Literal', start: 82, end: 85, value: 102, raw: '102' } } }
ExpressionStatement
78
86
Node {
  type: 'AssignmentExpression',
  start: 78,
  end: 85,
  operator: '=',
  left: Node { type: 'Identifier', start: 78, end: 79, name: 'x' },
  right: Node { type: 'Literal', start: 82, end: 85, value: 102, raw: '102' } }
AssignmentExpression
78
85
=
Node { type: 'Identifier', start: 78, end: 79, name: 'x' }
Identifier
78
79
x
Node { type: 'Literal', start: 82, end: 85, value: 102, raw: '102' }
Literal
82
85
102
102
Node {
  type: 'ExpressionStatement',
  start: 95,
  end: 103,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 95,
     end: 102,
     operator: '=',
     left: Node { type: 'Identifier', start: 95, end: 96, name: 'p' },
     right: Node { type: 'Literal', start: 99, end: 102, value: 103, raw: '103' } } }
ExpressionStatement
95
103
Node {
  type: 'AssignmentExpression',
  start: 95,
  end: 102,
  operator: '=',
  left: Node { type: 'Identifier', start: 95, end: 96, name: 'p' },
  right: Node { type: 'Literal', start: 99, end: 102, value: 103, raw: '103' } }
AssignmentExpression
95
102
=
Node { type: 'Identifier', start: 95, end: 96, name: 'p' }
Identifier
95
96
p
Node { type: 'Literal', start: 99, end: 102, value: 103, raw: '103' }
Literal
99
102
103
103
Node {
  type: 'ExpressionStatement',
  start: 112,
  end: 124,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 112,
     end: 123,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 112,
        end: 115,
        object: [Node],
        property: [Node],
        computed: false },
     right: 
      Node {
        type: 'BinaryExpression',
        start: 118,
        end: 123,
        left: [Node],
        operator: '+',
        right: [Node] } } }
ExpressionStatement
112
124
Node {
  type: 'AssignmentExpression',
  start: 112,
  end: 123,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 112,
     end: 115,
     object: Node { type: 'Identifier', start: 112, end: 113, name: 'o' },
     property: Node { type: 'Identifier', start: 114, end: 115, name: 'f' },
     computed: false },
  right: 
   Node {
     type: 'BinaryExpression',
     start: 118,
     end: 123,
     left: Node { type: 'Identifier', start: 118, end: 119, name: 'x' },
     operator: '+',
     right: Node { type: 'Identifier', start: 122, end: 123, name: 'p' } } }
AssignmentExpression
112
123
=
Node {
  type: 'MemberExpression',
  start: 112,
  end: 115,
  object: Node { type: 'Identifier', start: 112, end: 113, name: 'o' },
  property: Node { type: 'Identifier', start: 114, end: 115, name: 'f' },
  computed: false }
MemberExpression
112
115
Node { type: 'Identifier', start: 112, end: 113, name: 'o' }
Identifier
112
113
o
Node { type: 'Identifier', start: 114, end: 115, name: 'f' }
Identifier
114
115
f
false
Node {
  type: 'BinaryExpression',
  start: 118,
  end: 123,
  left: Node { type: 'Identifier', start: 118, end: 119, name: 'x' },
  operator: '+',
  right: Node { type: 'Identifier', start: 122, end: 123, name: 'p' } }
BinaryExpression
118
123
Node { type: 'Identifier', start: 118, end: 119, name: 'x' }
Identifier
118
119
x
+
Node { type: 'Identifier', start: 122, end: 123, name: 'p' }
Identifier
122
123
p
Node {
  type: 'ExpressionStatement',
  start: 133,
  end: 141,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 133,
     end: 140,
     operator: '=',
     left: Node { type: 'Identifier', start: 133, end: 134, name: 'o' },
     right: Node { type: 'Literal', start: 137, end: 140, value: 104, raw: '104' } } }
ExpressionStatement
133
141
Node {
  type: 'AssignmentExpression',
  start: 133,
  end: 140,
  operator: '=',
  left: Node { type: 'Identifier', start: 133, end: 134, name: 'o' },
  right: Node { type: 'Literal', start: 137, end: 140, value: 104, raw: '104' } }
AssignmentExpression
133
140
=
Node { type: 'Identifier', start: 133, end: 134, name: 'o' }
Identifier
133
134
o
Node { type: 'Literal', start: 137, end: 140, value: 104, raw: '104' }
Literal
137
140
104
104
Node {
  type: 'ExpressionStatement',
  start: 150,
  end: 158,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 150,
     end: 157,
     operator: '=',
     left: Node { type: 'Identifier', start: 150, end: 151, name: 'p' },
     right: Node { type: 'Literal', start: 154, end: 157, value: 105, raw: '105' } } }
ExpressionStatement
150
158
Node {
  type: 'AssignmentExpression',
  start: 150,
  end: 157,
  operator: '=',
  left: Node { type: 'Identifier', start: 150, end: 151, name: 'p' },
  right: Node { type: 'Literal', start: 154, end: 157, value: 105, raw: '105' } }
AssignmentExpression
150
157
=
Node { type: 'Identifier', start: 150, end: 151, name: 'p' }
Identifier
150
151
p
Node { type: 'Literal', start: 154, end: 157, value: 105, raw: '105' }
Literal
154
157
105
105
Node {
  type: 'ExpressionStatement',
  start: 167,
  end: 175,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 167,
     end: 174,
     operator: '=',
     left: Node { type: 'Identifier', start: 167, end: 168, name: 'x' },
     right: Node { type: 'Literal', start: 171, end: 174, value: 106, raw: '106' } } }
ExpressionStatement
167
175
Node {
  type: 'AssignmentExpression',
  start: 167,
  end: 174,
  operator: '=',
  left: Node { type: 'Identifier', start: 167, end: 168, name: 'x' },
  right: Node { type: 'Literal', start: 171, end: 174, value: 106, raw: '106' } }
AssignmentExpression
167
174
=
Node { type: 'Identifier', start: 167, end: 168, name: 'x' }
Identifier
167
168
x
Node { type: 'Literal', start: 171, end: 174, value: 106, raw: '106' }
Literal
171
174
106
106
Node {
  type: 'CatchClause',
  start: 182,
  end: 257,
  param: Node { type: 'Identifier', start: 189, end: 190, name: 'e' },
  body: Node { type: 'BlockStatement', start: 192, end: 257, body: [ [Node] ] } }
CatchClause
182
257
Node { type: 'Identifier', start: 189, end: 190, name: 'e' }
Identifier
189
190
e
Node {
  type: 'BlockStatement',
  start: 192,
  end: 257,
  body: 
   [ Node {
       type: 'ReturnStatement',
       start: 202,
       end: 251,
       argument: [Node] } ] }
BlockStatement
192
257
[ Node {
    type: 'ReturnStatement',
    start: 202,
    end: 251,
    argument: 
     Node {
       type: 'ObjectExpression',
       start: 209,
       end: 250,
       properties: [Array] } } ]
Node {
  type: 'ReturnStatement',
  start: 202,
  end: 251,
  argument: 
   Node {
     type: 'ObjectExpression',
     start: 209,
     end: 250,
     properties: [ [Node], [Node] ] } }
ReturnStatement
202
251
Node {
  type: 'ObjectExpression',
  start: 209,
  end: 250,
  properties: 
   [ Node {
       type: 'Property',
       start: 210,
       end: 230,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 232,
       end: 249,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
209
250
[ Node {
    type: 'Property',
    start: 210,
    end: 230,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 210, end: 217, name: 'outcome' },
    value: 
     Node {
       type: 'Literal',
       start: 219,
       end: 230,
       value: 'exception',
       raw: '"exception"' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 232,
    end: 249,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 232, end: 238, name: 'values' },
    value: 
     Node {
       type: 'ArrayExpression',
       start: 240,
       end: 249,
       elements: [Array] },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 210,
  end: 230,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 210, end: 217, name: 'outcome' },
  value: 
   Node {
     type: 'Literal',
     start: 219,
     end: 230,
     value: 'exception',
     raw: '"exception"' },
  kind: 'init' }
Property
210
230
false
false
false
Node { type: 'Identifier', start: 210, end: 217, name: 'outcome' }
Identifier
210
217
outcome
Node {
  type: 'Literal',
  start: 219,
  end: 230,
  value: 'exception',
  raw: '"exception"' }
Literal
219
230
exception
"exception"
init
Node {
  type: 'Property',
  start: 232,
  end: 249,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 232, end: 238, name: 'values' },
  value: 
   Node {
     type: 'ArrayExpression',
     start: 240,
     end: 249,
     elements: [ [Node], [Node], [Node] ] },
  kind: 'init' }
Property
232
249
false
false
false
Node { type: 'Identifier', start: 232, end: 238, name: 'values' }
Identifier
232
238
values
Node {
  type: 'ArrayExpression',
  start: 240,
  end: 249,
  elements: 
   [ Node { type: 'Identifier', start: 241, end: 242, name: 'o' },
     Node { type: 'Identifier', start: 244, end: 245, name: 'p' },
     Node { type: 'Identifier', start: 247, end: 248, name: 'x' } ] }
ArrayExpression
240
249
[ Node { type: 'Identifier', start: 241, end: 242, name: 'o' },
  Node { type: 'Identifier', start: 244, end: 245, name: 'p' },
  Node { type: 'Identifier', start: 247, end: 248, name: 'x' } ]
Node { type: 'Identifier', start: 241, end: 242, name: 'o' }
Identifier
241
242
o
Node { type: 'Identifier', start: 244, end: 245, name: 'p' }
Identifier
244
245
p
Node { type: 'Identifier', start: 247, end: 248, name: 'x' }
Identifier
247
248
x
init
null
[+] Exception: ftl-put-by-id-setter-exception.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1754,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 325,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 327,
       end: 341,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 398,
       end: 1147,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 1176,
       end: 1187,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 1188,
       end: 1249,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 1250,
       end: 1279,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 1280,
       end: 1373,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1374,
       end: 1478,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1479,
       end: 1568,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1569,
       end: 1660,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1661,
       end: 1752,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
1754
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 325,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 325, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 327,
    end: 341,
    expression: 
     Node {
       type: 'CallExpression',
       start: 327,
       end: 340,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 398,
    end: 1147,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 403,
       end: 412,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 414,
       end: 424,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 426,
       end: 429,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 431, end: 1147, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 1176,
    end: 1187,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 1188,
    end: 1249,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1188,
       end: 1248,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 1250,
    end: 1279,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 1280,
    end: 1373,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1284,
       end: 1314,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1320,
       end: 1373,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1374,
    end: 1478,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1378,
       end: 1404,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1410,
       end: 1478,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1479,
    end: 1568,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1483,
       end: 1505,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1511,
       end: 1568,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1569,
    end: 1660,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1573,
       end: 1597,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1603,
       end: 1660,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1661,
    end: 1752,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1665,
       end: 1689,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1695,
       end: 1752,
       argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 325,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'o' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'p' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 19,
     end: 325,
     body: [ [Node], [Node], [Node], [Node], [Node] ] } }
FunctionDeclaration
0
325
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'o' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'p' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'o' }
Identifier
13
14
o
Node { type: 'Identifier', start: 16, end: 17, name: 'p' }
Identifier
16
17
p
Node {
  type: 'BlockStatement',
  start: 19,
  end: 325,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 25,
       end: 37,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 42,
       end: 59,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 64,
       end: 77,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'TryStatement',
       start: 82,
       end: 271,
       block: [Node],
       handler: [Node],
       finalizer: null },
     Node {
       type: 'ReturnStatement',
       start: 276,
       end: 323,
       argument: [Node] } ] }
BlockStatement
19
325
[ Node {
    type: 'VariableDeclaration',
    start: 25,
    end: 37,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 42,
    end: 59,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 64,
    end: 77,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'TryStatement',
    start: 82,
    end: 271,
    block: Node { type: 'BlockStatement', start: 86, end: 194, body: [Array] },
    handler: 
     Node {
       type: 'CatchClause',
       start: 195,
       end: 271,
       param: [Node],
       body: [Node] },
    finalizer: null },
  Node {
    type: 'ReturnStatement',
    start: 276,
    end: 323,
    argument: 
     Node {
       type: 'ObjectExpression',
       start: 283,
       end: 322,
       properties: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 25,
  end: 37,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 29,
       end: 36,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
25
37
[ Node {
    type: 'VariableDeclarator',
    start: 29,
    end: 36,
    id: Node { type: 'Identifier', start: 29, end: 30, name: 'x' },
    init: Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' } } ]
Node {
  type: 'VariableDeclarator',
  start: 29,
  end: 36,
  id: Node { type: 'Identifier', start: 29, end: 30, name: 'x' },
  init: Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' } }
VariableDeclarator
29
36
Node { type: 'Identifier', start: 29, end: 30, name: 'x' }
Identifier
29
30
x
Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' }
Literal
33
36
100
100
var
Node {
  type: 'VariableDeclaration',
  start: 42,
  end: 59,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 46,
       end: 58,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
42
59
[ Node {
    type: 'VariableDeclarator',
    start: 46,
    end: 58,
    id: Node { type: 'Identifier', start: 46, end: 52, name: 'result' },
    init: Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' } } ]
Node {
  type: 'VariableDeclarator',
  start: 46,
  end: 58,
  id: Node { type: 'Identifier', start: 46, end: 52, name: 'result' },
  init: Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' } }
VariableDeclarator
46
58
Node { type: 'Identifier', start: 46, end: 52, name: 'result' }
Identifier
46
52
result
Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' }
Literal
55
58
101
101
var
Node {
  type: 'VariableDeclaration',
  start: 64,
  end: 77,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 68,
       end: 76,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
64
77
[ Node {
    type: 'VariableDeclarator',
    start: 68,
    end: 76,
    id: Node { type: 'Identifier', start: 68, end: 70, name: 'pf' },
    init: 
     Node {
       type: 'MemberExpression',
       start: 73,
       end: 76,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'VariableDeclarator',
  start: 68,
  end: 76,
  id: Node { type: 'Identifier', start: 68, end: 70, name: 'pf' },
  init: 
   Node {
     type: 'MemberExpression',
     start: 73,
     end: 76,
     object: Node { type: 'Identifier', start: 73, end: 74, name: 'p' },
     property: Node { type: 'Identifier', start: 75, end: 76, name: 'g' },
     computed: false } }
VariableDeclarator
68
76
Node { type: 'Identifier', start: 68, end: 70, name: 'pf' }
Identifier
68
70
pf
Node {
  type: 'MemberExpression',
  start: 73,
  end: 76,
  object: Node { type: 'Identifier', start: 73, end: 74, name: 'p' },
  property: Node { type: 'Identifier', start: 75, end: 76, name: 'g' },
  computed: false }
MemberExpression
73
76
Node { type: 'Identifier', start: 73, end: 74, name: 'p' }
Identifier
73
74
p
Node { type: 'Identifier', start: 75, end: 76, name: 'g' }
Identifier
75
76
g
false
var
Node {
  type: 'TryStatement',
  start: 82,
  end: 271,
  block: 
   Node {
     type: 'BlockStatement',
     start: 86,
     end: 194,
     body: [ [Node], [Node], [Node], [Node], [Node], [Node] ] },
  handler: 
   Node {
     type: 'CatchClause',
     start: 195,
     end: 271,
     param: Node { type: 'Identifier', start: 202, end: 203, name: 'e' },
     body: Node { type: 'BlockStatement', start: 205, end: 271, body: [Array] } },
  finalizer: null }
TryStatement
82
271
Node {
  type: 'BlockStatement',
  start: 86,
  end: 194,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 96,
       end: 104,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 113,
       end: 118,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 127,
       end: 140,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 149,
       end: 157,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 166,
       end: 171,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 180,
       end: 188,
       expression: [Node] } ] }
BlockStatement
86
194
[ Node {
    type: 'ExpressionStatement',
    start: 96,
    end: 104,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 96,
       end: 103,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 113,
    end: 118,
    expression: 
     Node {
       type: 'UpdateExpression',
       start: 113,
       end: 117,
       operator: '++',
       prefix: false,
       argument: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 127,
    end: 140,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 127,
       end: 139,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 149,
    end: 157,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 149,
       end: 156,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 166,
    end: 171,
    expression: 
     Node {
       type: 'UpdateExpression',
       start: 166,
       end: 170,
       operator: '++',
       prefix: false,
       argument: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 180,
    end: 188,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 180,
       end: 187,
       operator: '=',
       left: [Node],
       right: [Node] } } ]
Node {
  type: 'ExpressionStatement',
  start: 96,
  end: 104,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 96,
     end: 103,
     operator: '=',
     left: Node { type: 'Identifier', start: 96, end: 97, name: 'x' },
     right: Node { type: 'Literal', start: 100, end: 103, value: 102, raw: '102' } } }
ExpressionStatement
96
104
Node {
  type: 'AssignmentExpression',
  start: 96,
  end: 103,
  operator: '=',
  left: Node { type: 'Identifier', start: 96, end: 97, name: 'x' },
  right: Node { type: 'Literal', start: 100, end: 103, value: 102, raw: '102' } }
AssignmentExpression
96
103
=
Node { type: 'Identifier', start: 96, end: 97, name: 'x' }
Identifier
96
97
x
Node { type: 'Literal', start: 100, end: 103, value: 102, raw: '102' }
Literal
100
103
102
102
Node {
  type: 'ExpressionStatement',
  start: 113,
  end: 118,
  expression: 
   Node {
     type: 'UpdateExpression',
     start: 113,
     end: 117,
     operator: '++',
     prefix: false,
     argument: Node { type: 'Identifier', start: 113, end: 115, name: 'pf' } } }
ExpressionStatement
113
118
Node {
  type: 'UpdateExpression',
  start: 113,
  end: 117,
  operator: '++',
  prefix: false,
  argument: Node { type: 'Identifier', start: 113, end: 115, name: 'pf' } }
UpdateExpression
113
117
++
false
Node { type: 'Identifier', start: 113, end: 115, name: 'pf' }
Identifier
113
115
pf
Node {
  type: 'ExpressionStatement',
  start: 127,
  end: 140,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 127,
     end: 139,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 127,
        end: 130,
        object: [Node],
        property: [Node],
        computed: false },
     right: 
      Node {
        type: 'BinaryExpression',
        start: 133,
        end: 139,
        left: [Node],
        operator: '+',
        right: [Node] } } }
ExpressionStatement
127
140
Node {
  type: 'AssignmentExpression',
  start: 127,
  end: 139,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 127,
     end: 130,
     object: Node { type: 'Identifier', start: 127, end: 128, name: 'o' },
     property: Node { type: 'Identifier', start: 129, end: 130, name: 'f' },
     computed: false },
  right: 
   Node {
     type: 'BinaryExpression',
     start: 133,
     end: 139,
     left: Node { type: 'Identifier', start: 133, end: 134, name: 'x' },
     operator: '+',
     right: Node { type: 'Identifier', start: 137, end: 139, name: 'pf' } } }
AssignmentExpression
127
139
=
Node {
  type: 'MemberExpression',
  start: 127,
  end: 130,
  object: Node { type: 'Identifier', start: 127, end: 128, name: 'o' },
  property: Node { type: 'Identifier', start: 129, end: 130, name: 'f' },
  computed: false }
MemberExpression
127
130
Node { type: 'Identifier', start: 127, end: 128, name: 'o' }
Identifier
127
128
o
Node { type: 'Identifier', start: 129, end: 130, name: 'f' }
Identifier
129
130
f
false
Node {
  type: 'BinaryExpression',
  start: 133,
  end: 139,
  left: Node { type: 'Identifier', start: 133, end: 134, name: 'x' },
  operator: '+',
  right: Node { type: 'Identifier', start: 137, end: 139, name: 'pf' } }
BinaryExpression
133
139
Node { type: 'Identifier', start: 133, end: 134, name: 'x' }
Identifier
133
134
x
+
Node { type: 'Identifier', start: 137, end: 139, name: 'pf' }
Identifier
137
139
pf
Node {
  type: 'ExpressionStatement',
  start: 149,
  end: 157,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 149,
     end: 156,
     operator: '=',
     left: Node { type: 'Identifier', start: 149, end: 150, name: 'o' },
     right: Node { type: 'Literal', start: 153, end: 156, value: 104, raw: '104' } } }
ExpressionStatement
149
157
Node {
  type: 'AssignmentExpression',
  start: 149,
  end: 156,
  operator: '=',
  left: Node { type: 'Identifier', start: 149, end: 150, name: 'o' },
  right: Node { type: 'Literal', start: 153, end: 156, value: 104, raw: '104' } }
AssignmentExpression
149
156
=
Node { type: 'Identifier', start: 149, end: 150, name: 'o' }
Identifier
149
150
o
Node { type: 'Literal', start: 153, end: 156, value: 104, raw: '104' }
Literal
153
156
104
104
Node {
  type: 'ExpressionStatement',
  start: 166,
  end: 171,
  expression: 
   Node {
     type: 'UpdateExpression',
     start: 166,
     end: 170,
     operator: '++',
     prefix: false,
     argument: Node { type: 'Identifier', start: 166, end: 168, name: 'pf' } } }
ExpressionStatement
166
171
Node {
  type: 'UpdateExpression',
  start: 166,
  end: 170,
  operator: '++',
  prefix: false,
  argument: Node { type: 'Identifier', start: 166, end: 168, name: 'pf' } }
UpdateExpression
166
170
++
false
Node { type: 'Identifier', start: 166, end: 168, name: 'pf' }
Identifier
166
168
pf
Node {
  type: 'ExpressionStatement',
  start: 180,
  end: 188,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 180,
     end: 187,
     operator: '=',
     left: Node { type: 'Identifier', start: 180, end: 181, name: 'x' },
     right: Node { type: 'Literal', start: 184, end: 187, value: 106, raw: '106' } } }
ExpressionStatement
180
188
Node {
  type: 'AssignmentExpression',
  start: 180,
  end: 187,
  operator: '=',
  left: Node { type: 'Identifier', start: 180, end: 181, name: 'x' },
  right: Node { type: 'Literal', start: 184, end: 187, value: 106, raw: '106' } }
AssignmentExpression
180
187
=
Node { type: 'Identifier', start: 180, end: 181, name: 'x' }
Identifier
180
181
x
Node { type: 'Literal', start: 184, end: 187, value: 106, raw: '106' }
Literal
184
187
106
106
Node {
  type: 'CatchClause',
  start: 195,
  end: 271,
  param: Node { type: 'Identifier', start: 202, end: 203, name: 'e' },
  body: Node { type: 'BlockStatement', start: 205, end: 271, body: [ [Node] ] } }
CatchClause
195
271
Node { type: 'Identifier', start: 202, end: 203, name: 'e' }
Identifier
202
203
e
Node {
  type: 'BlockStatement',
  start: 205,
  end: 271,
  body: 
   [ Node {
       type: 'ReturnStatement',
       start: 215,
       end: 265,
       argument: [Node] } ] }
BlockStatement
205
271
[ Node {
    type: 'ReturnStatement',
    start: 215,
    end: 265,
    argument: 
     Node {
       type: 'ObjectExpression',
       start: 222,
       end: 264,
       properties: [Array] } } ]
Node {
  type: 'ReturnStatement',
  start: 215,
  end: 265,
  argument: 
   Node {
     type: 'ObjectExpression',
     start: 222,
     end: 264,
     properties: [ [Node], [Node] ] } }
ReturnStatement
215
265
Node {
  type: 'ObjectExpression',
  start: 222,
  end: 264,
  properties: 
   [ Node {
       type: 'Property',
       start: 223,
       end: 243,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 245,
       end: 263,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
222
264
[ Node {
    type: 'Property',
    start: 223,
    end: 243,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 223, end: 230, name: 'outcome' },
    value: 
     Node {
       type: 'Literal',
       start: 232,
       end: 243,
       value: 'exception',
       raw: '"exception"' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 245,
    end: 263,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 245, end: 251, name: 'values' },
    value: 
     Node {
       type: 'ArrayExpression',
       start: 253,
       end: 263,
       elements: [Array] },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 223,
  end: 243,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 223, end: 230, name: 'outcome' },
  value: 
   Node {
     type: 'Literal',
     start: 232,
     end: 243,
     value: 'exception',
     raw: '"exception"' },
  kind: 'init' }
Property
223
243
false
false
false
Node { type: 'Identifier', start: 223, end: 230, name: 'outcome' }
Identifier
223
230
outcome
Node {
  type: 'Literal',
  start: 232,
  end: 243,
  value: 'exception',
  raw: '"exception"' }
Literal
232
243
exception
"exception"
init
Node {
  type: 'Property',
  start: 245,
  end: 263,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 245, end: 251, name: 'values' },
  value: 
   Node {
     type: 'ArrayExpression',
     start: 253,
     end: 263,
     elements: [ [Node], [Node], [Node] ] },
  kind: 'init' }
Property
245
263
false
false
false
Node { type: 'Identifier', start: 245, end: 251, name: 'values' }
Identifier
245
251
values
Node {
  type: 'ArrayExpression',
  start: 253,
  end: 263,
  elements: 
   [ Node { type: 'Identifier', start: 254, end: 255, name: 'o' },
     Node { type: 'Identifier', start: 257, end: 259, name: 'pf' },
     Node { type: 'Identifier', start: 261, end: 262, name: 'x' } ] }
ArrayExpression
253
263
[ Node { type: 'Identifier', start: 254, end: 255, name: 'o' },
  Node { type: 'Identifier', start: 257, end: 259, name: 'pf' },
  Node { type: 'Identifier', start: 261, end: 262, name: 'x' } ]
Node { type: 'Identifier', start: 254, end: 255, name: 'o' }
Identifier
254
255
o
Node { type: 'Identifier', start: 257, end: 259, name: 'pf' }
Identifier
257
259
pf
Node { type: 'Identifier', start: 261, end: 262, name: 'x' }
Identifier
261
262
x
init
null
[+] Exception: ftl-put-by-id-slow-exception-interesting-live-state.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1420,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 208,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 210,
       end: 224,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 281,
       end: 1030,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 1059,
       end: 1070,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'TryStatement',
       start: 1071,
       end: 1324,
       block: [Node],
       handler: [Node],
       finalizer: null },
     Node {
       type: 'IfStatement',
       start: 1325,
       end: 1418,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
1420
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 208,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 208, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 210,
    end: 224,
    expression: 
     Node {
       type: 'CallExpression',
       start: 210,
       end: 223,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 281,
    end: 1030,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 286,
       end: 295,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 297,
       end: 307,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 309,
       end: 312,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 314, end: 1030, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 1059,
    end: 1070,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'TryStatement',
    start: 1071,
    end: 1324,
    block: Node { type: 'BlockStatement', start: 1075, end: 1198, body: [Array] },
    handler: 
     Node {
       type: 'CatchClause',
       start: 1199,
       end: 1324,
       param: [Node],
       body: [Node] },
    finalizer: null },
  Node {
    type: 'IfStatement',
    start: 1325,
    end: 1418,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1329,
       end: 1359,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1365,
       end: 1418,
       argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 208,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'o' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'p' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 19,
     end: 208,
     body: 
      [ [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node] ] } }
FunctionDeclaration
0
208
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'o' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'p' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'o' }
Identifier
13
14
o
Node { type: 'Identifier', start: 16, end: 17, name: 'p' }
Identifier
16
17
p
Node {
  type: 'BlockStatement',
  start: 19,
  end: 208,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 25,
       end: 37,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 42,
       end: 59,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 64,
       end: 77,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 82,
       end: 90,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 95,
       end: 100,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 105,
       end: 118,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 123,
       end: 131,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 136,
       end: 141,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 146,
       end: 154,
       expression: [Node] },
     Node {
       type: 'ReturnStatement',
       start: 159,
       end: 206,
       argument: [Node] } ] }
BlockStatement
19
208
[ Node {
    type: 'VariableDeclaration',
    start: 25,
    end: 37,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 42,
    end: 59,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 64,
    end: 77,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 82,
    end: 90,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 82,
       end: 89,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 95,
    end: 100,
    expression: 
     Node {
       type: 'UpdateExpression',
       start: 95,
       end: 99,
       operator: '++',
       prefix: false,
       argument: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 105,
    end: 118,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 105,
       end: 117,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 123,
    end: 131,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 123,
       end: 130,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 136,
    end: 141,
    expression: 
     Node {
       type: 'UpdateExpression',
       start: 136,
       end: 140,
       operator: '++',
       prefix: false,
       argument: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 146,
    end: 154,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 146,
       end: 153,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ReturnStatement',
    start: 159,
    end: 206,
    argument: 
     Node {
       type: 'ObjectExpression',
       start: 166,
       end: 205,
       properties: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 25,
  end: 37,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 29,
       end: 36,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
25
37
[ Node {
    type: 'VariableDeclarator',
    start: 29,
    end: 36,
    id: Node { type: 'Identifier', start: 29, end: 30, name: 'x' },
    init: Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' } } ]
Node {
  type: 'VariableDeclarator',
  start: 29,
  end: 36,
  id: Node { type: 'Identifier', start: 29, end: 30, name: 'x' },
  init: Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' } }
VariableDeclarator
29
36
Node { type: 'Identifier', start: 29, end: 30, name: 'x' }
Identifier
29
30
x
Node { type: 'Literal', start: 33, end: 36, value: 100, raw: '100' }
Literal
33
36
100
100
var
Node {
  type: 'VariableDeclaration',
  start: 42,
  end: 59,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 46,
       end: 58,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
42
59
[ Node {
    type: 'VariableDeclarator',
    start: 46,
    end: 58,
    id: Node { type: 'Identifier', start: 46, end: 52, name: 'result' },
    init: Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' } } ]
Node {
  type: 'VariableDeclarator',
  start: 46,
  end: 58,
  id: Node { type: 'Identifier', start: 46, end: 52, name: 'result' },
  init: Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' } }
VariableDeclarator
46
58
Node { type: 'Identifier', start: 46, end: 52, name: 'result' }
Identifier
46
52
result
Node { type: 'Literal', start: 55, end: 58, value: 101, raw: '101' }
Literal
55
58
101
101
var
Node {
  type: 'VariableDeclaration',
  start: 64,
  end: 77,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 68,
       end: 76,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
64
77
[ Node {
    type: 'VariableDeclarator',
    start: 68,
    end: 76,
    id: Node { type: 'Identifier', start: 68, end: 70, name: 'pf' },
    init: 
     Node {
       type: 'MemberExpression',
       start: 73,
       end: 76,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'VariableDeclarator',
  start: 68,
  end: 76,
  id: Node { type: 'Identifier', start: 68, end: 70, name: 'pf' },
  init: 
   Node {
     type: 'MemberExpression',
     start: 73,
     end: 76,
     object: Node { type: 'Identifier', start: 73, end: 74, name: 'p' },
     property: Node { type: 'Identifier', start: 75, end: 76, name: 'g' },
     computed: false } }
VariableDeclarator
68
76
Node { type: 'Identifier', start: 68, end: 70, name: 'pf' }
Identifier
68
70
pf
Node {
  type: 'MemberExpression',
  start: 73,
  end: 76,
  object: Node { type: 'Identifier', start: 73, end: 74, name: 'p' },
  property: Node { type: 'Identifier', start: 75, end: 76, name: 'g' },
  computed: false }
MemberExpression
73
76
Node { type: 'Identifier', start: 73, end: 74, name: 'p' }
Identifier
73
74
p
Node { type: 'Identifier', start: 75, end: 76, name: 'g' }
Identifier
75
76
g
false
var
Node {
  type: 'ExpressionStatement',
  start: 82,
  end: 90,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 82,
     end: 89,
     operator: '=',
     left: Node { type: 'Identifier', start: 82, end: 83, name: 'x' },
     right: Node { type: 'Literal', start: 86, end: 89, value: 102, raw: '102' } } }
ExpressionStatement
82
90
Node {
  type: 'AssignmentExpression',
  start: 82,
  end: 89,
  operator: '=',
  left: Node { type: 'Identifier', start: 82, end: 83, name: 'x' },
  right: Node { type: 'Literal', start: 86, end: 89, value: 102, raw: '102' } }
AssignmentExpression
82
89
=
Node { type: 'Identifier', start: 82, end: 83, name: 'x' }
Identifier
82
83
x
Node { type: 'Literal', start: 86, end: 89, value: 102, raw: '102' }
Literal
86
89
102
102
Node {
  type: 'ExpressionStatement',
  start: 95,
  end: 100,
  expression: 
   Node {
     type: 'UpdateExpression',
     start: 95,
     end: 99,
     operator: '++',
     prefix: false,
     argument: Node { type: 'Identifier', start: 95, end: 97, name: 'pf' } } }
ExpressionStatement
95
100
Node {
  type: 'UpdateExpression',
  start: 95,
  end: 99,
  operator: '++',
  prefix: false,
  argument: Node { type: 'Identifier', start: 95, end: 97, name: 'pf' } }
UpdateExpression
95
99
++
false
Node { type: 'Identifier', start: 95, end: 97, name: 'pf' }
Identifier
95
97
pf
Node {
  type: 'ExpressionStatement',
  start: 105,
  end: 118,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 105,
     end: 117,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 105,
        end: 108,
        object: [Node],
        property: [Node],
        computed: false },
     right: 
      Node {
        type: 'BinaryExpression',
        start: 111,
        end: 117,
        left: [Node],
        operator: '+',
        right: [Node] } } }
ExpressionStatement
105
118
Node {
  type: 'AssignmentExpression',
  start: 105,
  end: 117,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 105,
     end: 108,
     object: Node { type: 'Identifier', start: 105, end: 106, name: 'o' },
     property: Node { type: 'Identifier', start: 107, end: 108, name: 'f' },
     computed: false },
  right: 
   Node {
     type: 'BinaryExpression',
     start: 111,
     end: 117,
     left: Node { type: 'Identifier', start: 111, end: 112, name: 'x' },
     operator: '+',
     right: Node { type: 'Identifier', start: 115, end: 117, name: 'pf' } } }
AssignmentExpression
105
117
=
Node {
  type: 'MemberExpression',
  start: 105,
  end: 108,
  object: Node { type: 'Identifier', start: 105, end: 106, name: 'o' },
  property: Node { type: 'Identifier', start: 107, end: 108, name: 'f' },
  computed: false }
MemberExpression
105
108
Node { type: 'Identifier', start: 105, end: 106, name: 'o' }
Identifier
105
106
o
Node { type: 'Identifier', start: 107, end: 108, name: 'f' }
Identifier
107
108
f
false
Node {
  type: 'BinaryExpression',
  start: 111,
  end: 117,
  left: Node { type: 'Identifier', start: 111, end: 112, name: 'x' },
  operator: '+',
  right: Node { type: 'Identifier', start: 115, end: 117, name: 'pf' } }
BinaryExpression
111
117
Node { type: 'Identifier', start: 111, end: 112, name: 'x' }
Identifier
111
112
x
+
Node { type: 'Identifier', start: 115, end: 117, name: 'pf' }
Identifier
115
117
pf
Node {
  type: 'ExpressionStatement',
  start: 123,
  end: 131,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 123,
     end: 130,
     operator: '=',
     left: Node { type: 'Identifier', start: 123, end: 124, name: 'o' },
     right: Node { type: 'Literal', start: 127, end: 130, value: 104, raw: '104' } } }
ExpressionStatement
123
131
Node {
  type: 'AssignmentExpression',
  start: 123,
  end: 130,
  operator: '=',
  left: Node { type: 'Identifier', start: 123, end: 124, name: 'o' },
  right: Node { type: 'Literal', start: 127, end: 130, value: 104, raw: '104' } }
AssignmentExpression
123
130
=
Node { type: 'Identifier', start: 123, end: 124, name: 'o' }
Identifier
123
124
o
Node { type: 'Literal', start: 127, end: 130, value: 104, raw: '104' }
Literal
127
130
104
104
Node {
  type: 'ExpressionStatement',
  start: 136,
  end: 141,
  expression: 
   Node {
     type: 'UpdateExpression',
     start: 136,
     end: 140,
     operator: '++',
     prefix: false,
     argument: Node { type: 'Identifier', start: 136, end: 138, name: 'pf' } } }
ExpressionStatement
136
141
Node {
  type: 'UpdateExpression',
  start: 136,
  end: 140,
  operator: '++',
  prefix: false,
  argument: Node { type: 'Identifier', start: 136, end: 138, name: 'pf' } }
UpdateExpression
136
140
++
false
Node { type: 'Identifier', start: 136, end: 138, name: 'pf' }
Identifier
136
138
pf
Node {
  type: 'ExpressionStatement',
  start: 146,
  end: 154,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 146,
     end: 153,
     operator: '=',
     left: Node { type: 'Identifier', start: 146, end: 147, name: 'x' },
     right: Node { type: 'Literal', start: 150, end: 153, value: 106, raw: '106' } } }
ExpressionStatement
146
154
Node {
  type: 'AssignmentExpression',
  start: 146,
  end: 153,
  operator: '=',
  left: Node { type: 'Identifier', start: 146, end: 147, name: 'x' },
  right: Node { type: 'Literal', start: 150, end: 153, value: 106, raw: '106' } }
AssignmentExpression
146
153
=
Node { type: 'Identifier', start: 146, end: 147, name: 'x' }
Identifier
146
147
x
Node { type: 'Literal', start: 150, end: 153, value: 106, raw: '106' }
Literal
150
153
106
106
Node {
  type: 'ReturnStatement',
  start: 159,
  end: 206,
  argument: 
   Node {
     type: 'ObjectExpression',
     start: 166,
     end: 205,
     properties: [ [Node], [Node] ] } }
ReturnStatement
159
206
Node {
  type: 'ObjectExpression',
  start: 166,
  end: 205,
  properties: 
   [ Node {
       type: 'Property',
       start: 167,
       end: 184,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 186,
       end: 204,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
166
205
[ Node {
    type: 'Property',
    start: 167,
    end: 184,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 167, end: 174, name: 'outcome' },
    value: 
     Node {
       type: 'Literal',
       start: 176,
       end: 184,
       value: 'return',
       raw: '"return"' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 186,
    end: 204,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 186, end: 192, name: 'values' },
    value: 
     Node {
       type: 'ArrayExpression',
       start: 194,
       end: 204,
       elements: [Array] },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 167,
  end: 184,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 167, end: 174, name: 'outcome' },
  value: 
   Node {
     type: 'Literal',
     start: 176,
     end: 184,
     value: 'return',
     raw: '"return"' },
  kind: 'init' }
Property
167
184
false
false
false
Node { type: 'Identifier', start: 167, end: 174, name: 'outcome' }
Identifier
167
174
outcome
Node {
  type: 'Literal',
  start: 176,
  end: 184,
  value: 'return',
  raw: '"return"' }
Literal
176
184
return
"return"
init
Node {
  type: 'Property',
  start: 186,
  end: 204,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 186, end: 192, name: 'values' },
  value: 
   Node {
     type: 'ArrayExpression',
     start: 194,
     end: 204,
     elements: [ [Node], [Node], [Node] ] },
  kind: 'init' }
Property
186
204
false
false
false
Node { type: 'Identifier', start: 186, end: 192, name: 'values' }
Identifier
186
192
values
Node {
  type: 'ArrayExpression',
  start: 194,
  end: 204,
  elements: 
   [ Node { type: 'Identifier', start: 195, end: 196, name: 'o' },
     Node { type: 'Identifier', start: 198, end: 200, name: 'pf' },
     Node { type: 'Identifier', start: 202, end: 203, name: 'x' } ] }
ArrayExpression
194
204
[ Node { type: 'Identifier', start: 195, end: 196, name: 'o' },
  Node { type: 'Identifier', start: 198, end: 200, name: 'pf' },
  Node { type: 'Identifier', start: 202, end: 203, name: 'x' } ]
Node { type: 'Identifier', start: 195, end: 196, name: 'o' }
Identifier
195
196
o
Node { type: 'Identifier', start: 198, end: 200, name: 'pf' }
Identifier
198
200
pf
Node { type: 'Identifier', start: 202, end: 203, name: 'x' }
Identifier
202
203
x
init
Node {
  type: 'ExpressionStatement',
  start: 210,
  end: 224,
  expression: 
   Node {
     type: 'CallExpression',
     start: 210,
     end: 223,
     callee: Node { type: 'Identifier', start: 210, end: 218, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
210
224
Node {
  type: 'CallExpression',
  start: 210,
  end: 223,
  callee: Node { type: 'Identifier', start: 210, end: 218, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 219, end: 222, name: 'foo' } ] }
CallExpression
210
223
Node { type: 'Identifier', start: 210, end: 218, name: 'noInline' }
Identifier
210
218
noInline
[ Node { type: 'Identifier', start: 219, end: 222, name: 'foo' } ]
Node { type: 'Identifier', start: 219, end: 222, name: 'foo' }
Identifier
219
222
foo
Node {
  type: 'ForStatement',
  start: 281,
  end: 1030,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 286,
     end: 295,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 297,
     end: 307,
     left: Node { type: 'Identifier', start: 297, end: 298, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 301,
        end: 307,
        value: 100000,
        raw: '100000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 309,
     end: 312,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 311, end: 312, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 314,
     end: 1030,
     body: 
      [ [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node] ] } }
ForStatement
281
1030
Node {
  type: 'VariableDeclaration',
  start: 286,
  end: 295,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 290,
       end: 295,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
286
295
[ Node {
    type: 'VariableDeclarator',
    start: 290,
    end: 295,
    id: Node { type: 'Identifier', start: 290, end: 291, name: 'i' },
    init: Node { type: 'Literal', start: 294, end: 295, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 290,
  end: 295,
  id: Node { type: 'Identifier', start: 290, end: 291, name: 'i' },
  init: Node { type: 'Literal', start: 294, end: 295, value: 0, raw: '0' } }
VariableDeclarator
290
295
Node { type: 'Identifier', start: 290, end: 291, name: 'i' }
Identifier
290
291
i
Node { type: 'Literal', start: 294, end: 295, value: 0, raw: '0' }
Literal
294
295
0
0
var
Node {
  type: 'BinaryExpression',
  start: 297,
  end: 307,
  left: Node { type: 'Identifier', start: 297, end: 298, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 301,
     end: 307,
     value: 100000,
     raw: '100000' } }
BinaryExpression
297
307
Node { type: 'Identifier', start: 297, end: 298, name: 'i' }
Identifier
297
298
i
<
Node {
  type: 'Literal',
  start: 301,
  end: 307,
  value: 100000,
  raw: '100000' }
Literal
301
307
100000
100000
Node {
  type: 'UpdateExpression',
  start: 309,
  end: 312,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 311, end: 312, name: 'i' } }
UpdateExpression
309
312
++
true
Node { type: 'Identifier', start: 311, end: 312, name: 'i' }
Identifier
311
312
i
Node {
  type: 'BlockStatement',
  start: 314,
  end: 1030,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 320,
       end: 331,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 336,
       end: 370,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'VariableDeclaration',
       start: 399,
       end: 428,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 433,
       end: 528,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 533,
       end: 642,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 647,
       end: 743,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 748,
       end: 844,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 849,
       end: 945,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 950,
       end: 1028,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
314
1030
[ Node {
    type: 'VariableDeclaration',
    start: 320,
    end: 331,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 336,
    end: 370,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 340,
       end: 345,
       left: [Node],
       operator: '&',
       right: [Node] },
    consequent: 
     Node {
       type: 'ExpressionStatement',
       start: 355,
       end: 370,
       expression: [Node] },
    alternate: null },
  Node {
    type: 'VariableDeclaration',
    start: 399,
    end: 428,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 433,
    end: 528,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 437,
       end: 464,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 474, end: 528, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 533,
    end: 642,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 537,
       end: 563,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 573, end: 642, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 647,
    end: 743,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 651,
       end: 675,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 685, end: 743, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 748,
    end: 844,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 752,
       end: 776,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 786, end: 844, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 849,
    end: 945,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 853,
       end: 877,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 887, end: 945, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 950,
    end: 1028,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 954,
       end: 970,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 980,
       end: 1028,
       argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 320,
  end: 331,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 324,
       end: 330,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
320
331
[ Node {
    type: 'VariableDeclarator',
    start: 324,
    end: 330,
    id: Node { type: 'Identifier', start: 324, end: 325, name: 'o' },
    init: Node { type: 'ObjectExpression', start: 328, end: 330, properties: [] } } ]
Node {
  type: 'VariableDeclarator',
  start: 324,
  end: 330,
  id: Node { type: 'Identifier', start: 324, end: 325, name: 'o' },
  init: Node { type: 'ObjectExpression', start: 328, end: 330, properties: [] } }
VariableDeclarator
324
330
Node { type: 'Identifier', start: 324, end: 325, name: 'o' }
Identifier
324
325
o
Node { type: 'ObjectExpression', start: 328, end: 330, properties: [] }
ObjectExpression
328
330
[]
var
Node {
  type: 'IfStatement',
  start: 336,
  end: 370,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 340,
     end: 345,
     left: Node { type: 'Identifier', start: 340, end: 341, name: 'i' },
     operator: '&',
     right: Node { type: 'Literal', start: 344, end: 345, value: 1, raw: '1' } },
  consequent: 
   Node {
     type: 'ExpressionStatement',
     start: 355,
     end: 370,
     expression: 
      Node {
        type: 'AssignmentExpression',
        start: 355,
        end: 369,
        operator: '=',
        left: [Node],
        right: [Node] } },
  alternate: null }
IfStatement
336
370
Node {
  type: 'BinaryExpression',
  start: 340,
  end: 345,
  left: Node { type: 'Identifier', start: 340, end: 341, name: 'i' },
  operator: '&',
  right: Node { type: 'Literal', start: 344, end: 345, value: 1, raw: '1' } }
BinaryExpression
340
345
Node { type: 'Identifier', start: 340, end: 341, name: 'i' }
Identifier
340
341
i
&
Node { type: 'Literal', start: 344, end: 345, value: 1, raw: '1' }
Literal
344
345
1
1
Node {
  type: 'ExpressionStatement',
  start: 355,
  end: 370,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 355,
     end: 369,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 355,
        end: 365,
        object: [Node],
        property: [Node],
        computed: true },
     right: Node { type: 'Identifier', start: 368, end: 369, name: 'i' } } }
ExpressionStatement
355
370
Node {
  type: 'AssignmentExpression',
  start: 355,
  end: 369,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 355,
     end: 365,
     object: Node { type: 'Identifier', start: 355, end: 356, name: 'o' },
     property: 
      Node {
        type: 'BinaryExpression',
        start: 357,
        end: 364,
        left: [Node],
        operator: '+',
        right: [Node] },
     computed: true },
  right: Node { type: 'Identifier', start: 368, end: 369, name: 'i' } }
AssignmentExpression
355
369
=
Node {
  type: 'MemberExpression',
  start: 355,
  end: 365,
  object: Node { type: 'Identifier', start: 355, end: 356, name: 'o' },
  property: 
   Node {
     type: 'BinaryExpression',
     start: 357,
     end: 364,
     left: Node { type: 'Literal', start: 357, end: 360, value: 'i', raw: '"i"' },
     operator: '+',
     right: Node { type: 'Identifier', start: 363, end: 364, name: 'i' } },
  computed: true }
MemberExpression
355
365
Node { type: 'Identifier', start: 355, end: 356, name: 'o' }
Identifier
355
356
o
Node {
  type: 'BinaryExpression',
  start: 357,
  end: 364,
  left: Node { type: 'Literal', start: 357, end: 360, value: 'i', raw: '"i"' },
  operator: '+',
  right: Node { type: 'Identifier', start: 363, end: 364, name: 'i' } }
BinaryExpression
357
364
Node { type: 'Literal', start: 357, end: 360, value: 'i', raw: '"i"' }
Literal
357
360
i
"i"
+
Node { type: 'Identifier', start: 363, end: 364, name: 'i' }
Identifier
363
364
i
true
Node { type: 'Identifier', start: 368, end: 369, name: 'i' }
Identifier
368
369
i
null
[+] Exception: ftl-put-by-id-slow-exception-no-catch.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1727,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 1,
       end: 311,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 313,
       end: 327,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 384,
       end: 1124,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 1153,
       end: 1164,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 1165,
       end: 1226,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 1227,
       end: 1252,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 1253,
       end: 1346,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1347,
       end: 1451,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1452,
       end: 1541,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1542,
       end: 1633,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 1634,
       end: 1725,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
1727
[ Node {
    type: 'FunctionDeclaration',
    start: 1,
    end: 311,
    id: Node { type: 'Identifier', start: 10, end: 13, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 20, end: 311, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 313,
    end: 327,
    expression: 
     Node {
       type: 'CallExpression',
       start: 313,
       end: 326,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 384,
    end: 1124,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 389,
       end: 398,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 400,
       end: 410,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 412,
       end: 415,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 417, end: 1124, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 1153,
    end: 1164,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 1165,
    end: 1226,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1165,
       end: 1225,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 1227,
    end: 1252,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 1253,
    end: 1346,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1257,
       end: 1287,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1293,
       end: 1346,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1347,
    end: 1451,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1351,
       end: 1377,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1383,
       end: 1451,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1452,
    end: 1541,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1456,
       end: 1478,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1484,
       end: 1541,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1542,
    end: 1633,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1546,
       end: 1570,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1576,
       end: 1633,
       argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 1634,
    end: 1725,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1638,
       end: 1662,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1668,
       end: 1725,
       argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 1,
  end: 311,
  id: Node { type: 'Identifier', start: 10, end: 13, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 14, end: 15, name: 'o' },
     Node { type: 'Identifier', start: 17, end: 18, name: 'p' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 20,
     end: 311,
     body: [ [Node], [Node], [Node], [Node] ] } }
FunctionDeclaration
1
311
Node { type: 'Identifier', start: 10, end: 13, name: 'foo' }
Identifier
10
13
foo
false
false
false
[ Node { type: 'Identifier', start: 14, end: 15, name: 'o' },
  Node { type: 'Identifier', start: 17, end: 18, name: 'p' } ]
Node { type: 'Identifier', start: 14, end: 15, name: 'o' }
Identifier
14
15
o
Node { type: 'Identifier', start: 17, end: 18, name: 'p' }
Identifier
17
18
p
Node {
  type: 'BlockStatement',
  start: 20,
  end: 311,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 26,
       end: 38,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 43,
       end: 60,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'TryStatement',
       start: 65,
       end: 258,
       block: [Node],
       handler: [Node],
       finalizer: null },
     Node {
       type: 'ReturnStatement',
       start: 263,
       end: 309,
       argument: [Node] } ] }
BlockStatement
20
311
[ Node {
    type: 'VariableDeclaration',
    start: 26,
    end: 38,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 43,
    end: 60,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'TryStatement',
    start: 65,
    end: 258,
    block: Node { type: 'BlockStatement', start: 69, end: 182, body: [Array] },
    handler: 
     Node {
       type: 'CatchClause',
       start: 183,
       end: 258,
       param: [Node],
       body: [Node] },
    finalizer: null },
  Node {
    type: 'ReturnStatement',
    start: 263,
    end: 309,
    argument: 
     Node {
       type: 'ObjectExpression',
       start: 270,
       end: 308,
       properties: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 26,
  end: 38,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 30,
       end: 37,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
26
38
[ Node {
    type: 'VariableDeclarator',
    start: 30,
    end: 37,
    id: Node { type: 'Identifier', start: 30, end: 31, name: 'x' },
    init: Node { type: 'Literal', start: 34, end: 37, value: 100, raw: '100' } } ]
Node {
  type: 'VariableDeclarator',
  start: 30,
  end: 37,
  id: Node { type: 'Identifier', start: 30, end: 31, name: 'x' },
  init: Node { type: 'Literal', start: 34, end: 37, value: 100, raw: '100' } }
VariableDeclarator
30
37
Node { type: 'Identifier', start: 30, end: 31, name: 'x' }
Identifier
30
31
x
Node { type: 'Literal', start: 34, end: 37, value: 100, raw: '100' }
Literal
34
37
100
100
var
Node {
  type: 'VariableDeclaration',
  start: 43,
  end: 60,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 47,
       end: 59,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
43
60
[ Node {
    type: 'VariableDeclarator',
    start: 47,
    end: 59,
    id: Node { type: 'Identifier', start: 47, end: 53, name: 'result' },
    init: Node { type: 'Literal', start: 56, end: 59, value: 101, raw: '101' } } ]
Node {
  type: 'VariableDeclarator',
  start: 47,
  end: 59,
  id: Node { type: 'Identifier', start: 47, end: 53, name: 'result' },
  init: Node { type: 'Literal', start: 56, end: 59, value: 101, raw: '101' } }
VariableDeclarator
47
59
Node { type: 'Identifier', start: 47, end: 53, name: 'result' }
Identifier
47
53
result
Node { type: 'Literal', start: 56, end: 59, value: 101, raw: '101' }
Literal
56
59
101
101
var
Node {
  type: 'TryStatement',
  start: 65,
  end: 258,
  block: 
   Node {
     type: 'BlockStatement',
     start: 69,
     end: 182,
     body: [ [Node], [Node], [Node], [Node], [Node], [Node] ] },
  handler: 
   Node {
     type: 'CatchClause',
     start: 183,
     end: 258,
     param: Node { type: 'Identifier', start: 190, end: 191, name: 'e' },
     body: Node { type: 'BlockStatement', start: 193, end: 258, body: [Array] } },
  finalizer: null }
TryStatement
65
258
Node {
  type: 'BlockStatement',
  start: 69,
  end: 182,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 79,
       end: 87,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 96,
       end: 104,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 113,
       end: 125,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 134,
       end: 142,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 151,
       end: 159,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 168,
       end: 176,
       expression: [Node] } ] }
BlockStatement
69
182
[ Node {
    type: 'ExpressionStatement',
    start: 79,
    end: 87,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 79,
       end: 86,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 96,
    end: 104,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 96,
       end: 103,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 113,
    end: 125,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 113,
       end: 124,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 134,
    end: 142,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 134,
       end: 141,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 151,
    end: 159,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 151,
       end: 158,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 168,
    end: 176,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 168,
       end: 175,
       operator: '=',
       left: [Node],
       right: [Node] } } ]
Node {
  type: 'ExpressionStatement',
  start: 79,
  end: 87,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 79,
     end: 86,
     operator: '=',
     left: Node { type: 'Identifier', start: 79, end: 80, name: 'x' },
     right: Node { type: 'Literal', start: 83, end: 86, value: 102, raw: '102' } } }
ExpressionStatement
79
87
Node {
  type: 'AssignmentExpression',
  start: 79,
  end: 86,
  operator: '=',
  left: Node { type: 'Identifier', start: 79, end: 80, name: 'x' },
  right: Node { type: 'Literal', start: 83, end: 86, value: 102, raw: '102' } }
AssignmentExpression
79
86
=
Node { type: 'Identifier', start: 79, end: 80, name: 'x' }
Identifier
79
80
x
Node { type: 'Literal', start: 83, end: 86, value: 102, raw: '102' }
Literal
83
86
102
102
Node {
  type: 'ExpressionStatement',
  start: 96,
  end: 104,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 96,
     end: 103,
     operator: '=',
     left: Node { type: 'Identifier', start: 96, end: 97, name: 'p' },
     right: Node { type: 'Literal', start: 100, end: 103, value: 103, raw: '103' } } }
ExpressionStatement
96
104
Node {
  type: 'AssignmentExpression',
  start: 96,
  end: 103,
  operator: '=',
  left: Node { type: 'Identifier', start: 96, end: 97, name: 'p' },
  right: Node { type: 'Literal', start: 100, end: 103, value: 103, raw: '103' } }
AssignmentExpression
96
103
=
Node { type: 'Identifier', start: 96, end: 97, name: 'p' }
Identifier
96
97
p
Node { type: 'Literal', start: 100, end: 103, value: 103, raw: '103' }
Literal
100
103
103
103
Node {
  type: 'ExpressionStatement',
  start: 113,
  end: 125,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 113,
     end: 124,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 113,
        end: 116,
        object: [Node],
        property: [Node],
        computed: false },
     right: 
      Node {
        type: 'BinaryExpression',
        start: 119,
        end: 124,
        left: [Node],
        operator: '+',
        right: [Node] } } }
ExpressionStatement
113
125
Node {
  type: 'AssignmentExpression',
  start: 113,
  end: 124,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 113,
     end: 116,
     object: Node { type: 'Identifier', start: 113, end: 114, name: 'o' },
     property: Node { type: 'Identifier', start: 115, end: 116, name: 'f' },
     computed: false },
  right: 
   Node {
     type: 'BinaryExpression',
     start: 119,
     end: 124,
     left: Node { type: 'Identifier', start: 119, end: 120, name: 'x' },
     operator: '+',
     right: Node { type: 'Identifier', start: 123, end: 124, name: 'p' } } }
AssignmentExpression
113
124
=
Node {
  type: 'MemberExpression',
  start: 113,
  end: 116,
  object: Node { type: 'Identifier', start: 113, end: 114, name: 'o' },
  property: Node { type: 'Identifier', start: 115, end: 116, name: 'f' },
  computed: false }
MemberExpression
113
116
Node { type: 'Identifier', start: 113, end: 114, name: 'o' }
Identifier
113
114
o
Node { type: 'Identifier', start: 115, end: 116, name: 'f' }
Identifier
115
116
f
false
Node {
  type: 'BinaryExpression',
  start: 119,
  end: 124,
  left: Node { type: 'Identifier', start: 119, end: 120, name: 'x' },
  operator: '+',
  right: Node { type: 'Identifier', start: 123, end: 124, name: 'p' } }
BinaryExpression
119
124
Node { type: 'Identifier', start: 119, end: 120, name: 'x' }
Identifier
119
120
x
+
Node { type: 'Identifier', start: 123, end: 124, name: 'p' }
Identifier
123
124
p
Node {
  type: 'ExpressionStatement',
  start: 134,
  end: 142,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 134,
     end: 141,
     operator: '=',
     left: Node { type: 'Identifier', start: 134, end: 135, name: 'o' },
     right: Node { type: 'Literal', start: 138, end: 141, value: 104, raw: '104' } } }
ExpressionStatement
134
142
Node {
  type: 'AssignmentExpression',
  start: 134,
  end: 141,
  operator: '=',
  left: Node { type: 'Identifier', start: 134, end: 135, name: 'o' },
  right: Node { type: 'Literal', start: 138, end: 141, value: 104, raw: '104' } }
AssignmentExpression
134
141
=
Node { type: 'Identifier', start: 134, end: 135, name: 'o' }
Identifier
134
135
o
Node { type: 'Literal', start: 138, end: 141, value: 104, raw: '104' }
Literal
138
141
104
104
Node {
  type: 'ExpressionStatement',
  start: 151,
  end: 159,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 151,
     end: 158,
     operator: '=',
     left: Node { type: 'Identifier', start: 151, end: 152, name: 'p' },
     right: Node { type: 'Literal', start: 155, end: 158, value: 105, raw: '105' } } }
ExpressionStatement
151
159
Node {
  type: 'AssignmentExpression',
  start: 151,
  end: 158,
  operator: '=',
  left: Node { type: 'Identifier', start: 151, end: 152, name: 'p' },
  right: Node { type: 'Literal', start: 155, end: 158, value: 105, raw: '105' } }
AssignmentExpression
151
158
=
Node { type: 'Identifier', start: 151, end: 152, name: 'p' }
Identifier
151
152
p
Node { type: 'Literal', start: 155, end: 158, value: 105, raw: '105' }
Literal
155
158
105
105
Node {
  type: 'ExpressionStatement',
  start: 168,
  end: 176,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 168,
     end: 175,
     operator: '=',
     left: Node { type: 'Identifier', start: 168, end: 169, name: 'x' },
     right: Node { type: 'Literal', start: 172, end: 175, value: 106, raw: '106' } } }
ExpressionStatement
168
176
Node {
  type: 'AssignmentExpression',
  start: 168,
  end: 175,
  operator: '=',
  left: Node { type: 'Identifier', start: 168, end: 169, name: 'x' },
  right: Node { type: 'Literal', start: 172, end: 175, value: 106, raw: '106' } }
AssignmentExpression
168
175
=
Node { type: 'Identifier', start: 168, end: 169, name: 'x' }
Identifier
168
169
x
Node { type: 'Literal', start: 172, end: 175, value: 106, raw: '106' }
Literal
172
175
106
106
Node {
  type: 'CatchClause',
  start: 183,
  end: 258,
  param: Node { type: 'Identifier', start: 190, end: 191, name: 'e' },
  body: Node { type: 'BlockStatement', start: 193, end: 258, body: [ [Node] ] } }
CatchClause
183
258
Node { type: 'Identifier', start: 190, end: 191, name: 'e' }
Identifier
190
191
e
Node {
  type: 'BlockStatement',
  start: 193,
  end: 258,
  body: 
   [ Node {
       type: 'ReturnStatement',
       start: 203,
       end: 252,
       argument: [Node] } ] }
BlockStatement
193
258
[ Node {
    type: 'ReturnStatement',
    start: 203,
    end: 252,
    argument: 
     Node {
       type: 'ObjectExpression',
       start: 210,
       end: 251,
       properties: [Array] } } ]
Node {
  type: 'ReturnStatement',
  start: 203,
  end: 252,
  argument: 
   Node {
     type: 'ObjectExpression',
     start: 210,
     end: 251,
     properties: [ [Node], [Node] ] } }
ReturnStatement
203
252
Node {
  type: 'ObjectExpression',
  start: 210,
  end: 251,
  properties: 
   [ Node {
       type: 'Property',
       start: 211,
       end: 231,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 233,
       end: 250,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
210
251
[ Node {
    type: 'Property',
    start: 211,
    end: 231,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 211, end: 218, name: 'outcome' },
    value: 
     Node {
       type: 'Literal',
       start: 220,
       end: 231,
       value: 'exception',
       raw: '"exception"' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 233,
    end: 250,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 233, end: 239, name: 'values' },
    value: 
     Node {
       type: 'ArrayExpression',
       start: 241,
       end: 250,
       elements: [Array] },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 211,
  end: 231,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 211, end: 218, name: 'outcome' },
  value: 
   Node {
     type: 'Literal',
     start: 220,
     end: 231,
     value: 'exception',
     raw: '"exception"' },
  kind: 'init' }
Property
211
231
false
false
false
Node { type: 'Identifier', start: 211, end: 218, name: 'outcome' }
Identifier
211
218
outcome
Node {
  type: 'Literal',
  start: 220,
  end: 231,
  value: 'exception',
  raw: '"exception"' }
Literal
220
231
exception
"exception"
init
Node {
  type: 'Property',
  start: 233,
  end: 250,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 233, end: 239, name: 'values' },
  value: 
   Node {
     type: 'ArrayExpression',
     start: 241,
     end: 250,
     elements: [ [Node], [Node], [Node] ] },
  kind: 'init' }
Property
233
250
false
false
false
Node { type: 'Identifier', start: 233, end: 239, name: 'values' }
Identifier
233
239
values
Node {
  type: 'ArrayExpression',
  start: 241,
  end: 250,
  elements: 
   [ Node { type: 'Identifier', start: 242, end: 243, name: 'o' },
     Node { type: 'Identifier', start: 245, end: 246, name: 'p' },
     Node { type: 'Identifier', start: 248, end: 249, name: 'x' } ] }
ArrayExpression
241
250
[ Node { type: 'Identifier', start: 242, end: 243, name: 'o' },
  Node { type: 'Identifier', start: 245, end: 246, name: 'p' },
  Node { type: 'Identifier', start: 248, end: 249, name: 'x' } ]
Node { type: 'Identifier', start: 242, end: 243, name: 'o' }
Identifier
242
243
o
Node { type: 'Identifier', start: 245, end: 246, name: 'p' }
Identifier
245
246
p
Node { type: 'Identifier', start: 248, end: 249, name: 'x' }
Identifier
248
249
x
init
null
[+] Exception: ftl-put-by-id-slow-exception.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 178,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 1,
       end: 65,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 67,
       end: 114,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 116,
       end: 130,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 132,
       end: 176,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
178
[ Node {
    type: 'ExpressionStatement',
    start: 1,
    end: 65,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1,
       end: 65,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 67,
    end: 114,
    id: Node { type: 'Identifier', start: 76, end: 79, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 82, end: 114, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 116,
    end: 130,
    expression: 
     Node {
       type: 'CallExpression',
       start: 116,
       end: 129,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 132,
    end: 176,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 137,
       end: 146,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 148,
       end: 158,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 160,
       end: 163,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 169,
       end: 176,
       expression: [Node] } } ]
Node {
  type: 'ExpressionStatement',
  start: 1,
  end: 65,
  expression: 
   Node {
     type: 'CallExpression',
     start: 1,
     end: 65,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 1,
        end: 34,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [ [Node], [Node] ] } }
ExpressionStatement
1
65
Node {
  type: 'CallExpression',
  start: 1,
  end: 65,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 1,
     end: 34,
     object: 
      Node {
        type: 'MemberExpression',
        start: 1,
        end: 17,
        object: [Node],
        property: [Node],
        computed: false },
     property: 
      Node {
        type: 'Identifier',
        start: 18,
        end: 34,
        name: '__defineSetter__' },
     computed: false },
  arguments: 
   [ Node { type: 'Literal', start: 35, end: 38, value: 'r', raw: '"r"' },
     Node {
       type: 'FunctionExpression',
       start: 40,
       end: 64,
       id: null,
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] } ] }
CallExpression
1
65
Node {
  type: 'MemberExpression',
  start: 1,
  end: 34,
  object: 
   Node {
     type: 'MemberExpression',
     start: 1,
     end: 17,
     object: Node { type: 'Identifier', start: 1, end: 7, name: 'Object' },
     property: Node { type: 'Identifier', start: 8, end: 17, name: 'prototype' },
     computed: false },
  property: 
   Node {
     type: 'Identifier',
     start: 18,
     end: 34,
     name: '__defineSetter__' },
  computed: false }
MemberExpression
1
34
Node {
  type: 'MemberExpression',
  start: 1,
  end: 17,
  object: Node { type: 'Identifier', start: 1, end: 7, name: 'Object' },
  property: Node { type: 'Identifier', start: 8, end: 17, name: 'prototype' },
  computed: false }
MemberExpression
1
17
Node { type: 'Identifier', start: 1, end: 7, name: 'Object' }
Identifier
1
7
Object
Node { type: 'Identifier', start: 8, end: 17, name: 'prototype' }
Identifier
8
17
prototype
false
Node {
  type: 'Identifier',
  start: 18,
  end: 34,
  name: '__defineSetter__' }
Identifier
18
34
__defineSetter__
false
[ Node { type: 'Literal', start: 35, end: 38, value: 'r', raw: '"r"' },
  Node {
    type: 'FunctionExpression',
    start: 40,
    end: 64,
    id: null,
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 53, end: 64, body: [Array] } } ]
Node { type: 'Literal', start: 35, end: 38, value: 'r', raw: '"r"' }
Literal
35
38
r
"r"
Node {
  type: 'FunctionExpression',
  start: 40,
  end: 64,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 49, end: 52, name: 'val' } ],
  body: Node { type: 'BlockStatement', start: 53, end: 64, body: [ [Node] ] } }
FunctionExpression
40
64
null
[+] Exception: ftl-putbyid.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 165,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 47,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 49,
       end: 63,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 65,
       end: 113,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'IfStatement',
       start: 115,
       end: 163,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
165
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 47,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 15, end: 47, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 49,
    end: 63,
    expression: 
     Node {
       type: 'CallExpression',
       start: 49,
       end: 62,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 65,
    end: 113,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 70,
       end: 79,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 81,
       end: 91,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 93,
       end: 96,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 102,
       end: 113,
       expression: [Node] } },
  Node {
    type: 'IfStatement',
    start: 115,
    end: 163,
    test: 
     Node {
       type: 'LogicalExpression',
       start: 119,
       end: 144,
       left: [Node],
       operator: '||',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 150, end: 163, argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 47,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 13, end: 14, name: 'x' } ],
  body: Node { type: 'BlockStatement', start: 15, end: 47, body: [ [Node] ] } }
FunctionDeclaration
0
47
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'x' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'x' }
Identifier
13
14
x
Node {
  type: 'BlockStatement',
  start: 15,
  end: 47,
  body: 
   [ Node { type: 'ReturnStatement', start: 21, end: 45, argument: [Node] } ] }
BlockStatement
15
47
[ Node {
    type: 'ReturnStatement',
    start: 21,
    end: 45,
    argument: 
     Node {
       type: 'ObjectExpression',
       start: 28,
       end: 45,
       properties: [Array] } } ]
Node {
  type: 'ReturnStatement',
  start: 21,
  end: 45,
  argument: 
   Node {
     type: 'ObjectExpression',
     start: 28,
     end: 45,
     properties: [ [Node], [Node] ] } }
ReturnStatement
21
45
Node {
  type: 'ObjectExpression',
  start: 28,
  end: 45,
  properties: 
   [ Node {
       type: 'Property',
       start: 30,
       end: 35,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 38,
       end: 43,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
28
45
[ Node {
    type: 'Property',
    start: 30,
    end: 35,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Literal', start: 30, end: 31, value: 0, raw: '0' },
    value: Node { type: 'Literal', start: 34, end: 35, value: 1, raw: '1' },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 38,
    end: 43,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 38, end: 39, name: 'a' },
    value: Node { type: 'Identifier', start: 42, end: 43, name: 'x' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 30,
  end: 35,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Literal', start: 30, end: 31, value: 0, raw: '0' },
  value: Node { type: 'Literal', start: 34, end: 35, value: 1, raw: '1' },
  kind: 'init' }
Property
30
35
false
false
false
Node { type: 'Literal', start: 30, end: 31, value: 0, raw: '0' }
Literal
30
31
0
0
Node { type: 'Literal', start: 34, end: 35, value: 1, raw: '1' }
Literal
34
35
1
1
init
Node {
  type: 'Property',
  start: 38,
  end: 43,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 38, end: 39, name: 'a' },
  value: Node { type: 'Identifier', start: 42, end: 43, name: 'x' },
  kind: 'init' }
Property
38
43
false
false
false
Node { type: 'Identifier', start: 38, end: 39, name: 'a' }
Identifier
38
39
a
Node { type: 'Identifier', start: 42, end: 43, name: 'x' }
Identifier
42
43
x
init
Node {
  type: 'ExpressionStatement',
  start: 49,
  end: 63,
  expression: 
   Node {
     type: 'CallExpression',
     start: 49,
     end: 62,
     callee: Node { type: 'Identifier', start: 49, end: 57, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
49
63
Node {
  type: 'CallExpression',
  start: 49,
  end: 62,
  callee: Node { type: 'Identifier', start: 49, end: 57, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 58, end: 61, name: 'foo' } ] }
CallExpression
49
62
Node { type: 'Identifier', start: 49, end: 57, name: 'noInline' }
Identifier
49
57
noInline
[ Node { type: 'Identifier', start: 58, end: 61, name: 'foo' } ]
Node { type: 'Identifier', start: 58, end: 61, name: 'foo' }
Identifier
58
61
foo
Node {
  type: 'ForStatement',
  start: 65,
  end: 113,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 70,
     end: 79,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 81,
     end: 91,
     left: Node { type: 'Identifier', start: 81, end: 82, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 85,
        end: 91,
        value: 100000,
        raw: '100000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 93,
     end: 96,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 95, end: 96, name: 'i' } },
  body: 
   Node {
     type: 'ExpressionStatement',
     start: 102,
     end: 113,
     expression: 
      Node {
        type: 'AssignmentExpression',
        start: 102,
        end: 112,
        operator: '=',
        left: [Node],
        right: [Node] } } }
ForStatement
65
113
Node {
  type: 'VariableDeclaration',
  start: 70,
  end: 79,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 74,
       end: 79,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
70
79
[ Node {
    type: 'VariableDeclarator',
    start: 74,
    end: 79,
    id: Node { type: 'Identifier', start: 74, end: 75, name: 'i' },
    init: Node { type: 'Literal', start: 78, end: 79, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 74,
  end: 79,
  id: Node { type: 'Identifier', start: 74, end: 75, name: 'i' },
  init: Node { type: 'Literal', start: 78, end: 79, value: 0, raw: '0' } }
VariableDeclarator
74
79
Node { type: 'Identifier', start: 74, end: 75, name: 'i' }
Identifier
74
75
i
Node { type: 'Literal', start: 78, end: 79, value: 0, raw: '0' }
Literal
78
79
0
0
var
Node {
  type: 'BinaryExpression',
  start: 81,
  end: 91,
  left: Node { type: 'Identifier', start: 81, end: 82, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 85,
     end: 91,
     value: 100000,
     raw: '100000' } }
BinaryExpression
81
91
Node { type: 'Identifier', start: 81, end: 82, name: 'i' }
Identifier
81
82
i
<
Node {
  type: 'Literal',
  start: 85,
  end: 91,
  value: 100000,
  raw: '100000' }
Literal
85
91
100000
100000
Node {
  type: 'UpdateExpression',
  start: 93,
  end: 96,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 95, end: 96, name: 'i' } }
UpdateExpression
93
96
++
true
Node { type: 'Identifier', start: 95, end: 96, name: 'i' }
Identifier
95
96
i
Node {
  type: 'ExpressionStatement',
  start: 102,
  end: 113,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 102,
     end: 112,
     operator: '=',
     left: Node { type: 'Identifier', start: 102, end: 103, name: 'o' },
     right: 
      Node {
        type: 'CallExpression',
        start: 106,
        end: 112,
        callee: [Node],
        arguments: [Array] } } }
ExpressionStatement
102
113
Node {
  type: 'AssignmentExpression',
  start: 102,
  end: 112,
  operator: '=',
  left: Node { type: 'Identifier', start: 102, end: 103, name: 'o' },
  right: 
   Node {
     type: 'CallExpression',
     start: 106,
     end: 112,
     callee: Node { type: 'Identifier', start: 106, end: 109, name: 'foo' },
     arguments: [ [Node] ] } }
AssignmentExpression
102
112
=
Node { type: 'Identifier', start: 102, end: 103, name: 'o' }
Identifier
102
103
o
Node {
  type: 'CallExpression',
  start: 106,
  end: 112,
  callee: Node { type: 'Identifier', start: 106, end: 109, name: 'foo' },
  arguments: 
   [ Node { type: 'Identifier', start: 110, end: 111, name: 'i' } ] }
CallExpression
106
112
Node { type: 'Identifier', start: 106, end: 109, name: 'foo' }
Identifier
106
109
foo
[ Node { type: 'Identifier', start: 110, end: 111, name: 'i' } ]
Node { type: 'Identifier', start: 110, end: 111, name: 'i' }
Identifier
110
111
i
Node {
  type: 'IfStatement',
  start: 115,
  end: 163,
  test: 
   Node {
     type: 'LogicalExpression',
     start: 119,
     end: 144,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 119,
        end: 131,
        left: [Node],
        operator: '!=',
        right: [Node] },
     operator: '||',
     right: 
      Node {
        type: 'BinaryExpression',
        start: 135,
        end: 144,
        left: [Node],
        operator: '!=',
        right: [Node] } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 150,
     end: 163,
     argument: 
      Node {
        type: 'Literal',
        start: 156,
        end: 163,
        value: 'Error',
        raw: '"Error"' } },
  alternate: null }
IfStatement
115
163
Node {
  type: 'LogicalExpression',
  start: 119,
  end: 144,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 119,
     end: 131,
     left: 
      Node {
        type: 'MemberExpression',
        start: 119,
        end: 122,
        object: [Node],
        property: [Node],
        computed: false },
     operator: '!=',
     right: 
      Node {
        type: 'Literal',
        start: 126,
        end: 131,
        value: 99999,
        raw: '99999' } },
  operator: '||',
  right: 
   Node {
     type: 'BinaryExpression',
     start: 135,
     end: 144,
     left: 
      Node {
        type: 'MemberExpression',
        start: 135,
        end: 139,
        object: [Node],
        property: [Node],
        computed: true },
     operator: '!=',
     right: Node { type: 'Literal', start: 143, end: 144, value: 1, raw: '1' } } }
LogicalExpression
119
144
Node {
  type: 'BinaryExpression',
  start: 119,
  end: 131,
  left: 
   Node {
     type: 'MemberExpression',
     start: 119,
     end: 122,
     object: Node { type: 'Identifier', start: 119, end: 120, name: 'o' },
     property: Node { type: 'Identifier', start: 121, end: 122, name: 'a' },
     computed: false },
  operator: '!=',
  right: 
   Node {
     type: 'Literal',
     start: 126,
     end: 131,
     value: 99999,
     raw: '99999' } }
BinaryExpression
119
131
Node {
  type: 'MemberExpression',
  start: 119,
  end: 122,
  object: Node { type: 'Identifier', start: 119, end: 120, name: 'o' },
  property: Node { type: 'Identifier', start: 121, end: 122, name: 'a' },
  computed: false }
MemberExpression
119
122
Node { type: 'Identifier', start: 119, end: 120, name: 'o' }
Identifier
119
120
o
Node { type: 'Identifier', start: 121, end: 122, name: 'a' }
Identifier
121
122
a
false
!=
Node {
  type: 'Literal',
  start: 126,
  end: 131,
  value: 99999,
  raw: '99999' }
Literal
126
131
99999
99999
||
Node {
  type: 'BinaryExpression',
  start: 135,
  end: 144,
  left: 
   Node {
     type: 'MemberExpression',
     start: 135,
     end: 139,
     object: Node { type: 'Identifier', start: 135, end: 136, name: 'o' },
     property: Node { type: 'Literal', start: 137, end: 138, value: 0, raw: '0' },
     computed: true },
  operator: '!=',
  right: Node { type: 'Literal', start: 143, end: 144, value: 1, raw: '1' } }
BinaryExpression
135
144
Node {
  type: 'MemberExpression',
  start: 135,
  end: 139,
  object: Node { type: 'Identifier', start: 135, end: 136, name: 'o' },
  property: Node { type: 'Literal', start: 137, end: 138, value: 0, raw: '0' },
  computed: true }
MemberExpression
135
139
Node { type: 'Identifier', start: 135, end: 136, name: 'o' }
Identifier
135
136
o
Node { type: 'Literal', start: 137, end: 138, value: 0, raw: '0' }
Literal
137
138
0
0
true
!=
Node { type: 'Literal', start: 143, end: 144, value: 1, raw: '1' }
Literal
143
144
1
1
Node {
  type: 'ThrowStatement',
  start: 150,
  end: 163,
  argument: 
   Node {
     type: 'Literal',
     start: 156,
     end: 163,
     value: 'Error',
     raw: '"Error"' } }
ThrowStatement
150
163
Node {
  type: 'Literal',
  start: 156,
  end: 163,
  value: 'Error',
  raw: '"Error"' }
Literal
156
163
Error
"Error"
null
[+] Exception: ftl-putbyiddirect.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 371,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 174,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 176,
       end: 190,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 192,
       end: 203,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ForStatement',
       start: 204,
       end: 279,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 281,
       end: 368,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
371
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 174,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 15, end: 174, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 176,
    end: 190,
    expression: 
     Node {
       type: 'CallExpression',
       start: 176,
       end: 189,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 192,
    end: 203,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ForStatement',
    start: 204,
    end: 279,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 209,
       end: 218,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 220,
       end: 230,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 232,
       end: 235,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 237, end: 279, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 281,
    end: 368,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 286,
       end: 295,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 297,
       end: 304,
       left: [Node],
       operator: '<=',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 307,
       end: 310,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'IfStatement',
       start: 316,
       end: 368,
       test: [Node],
       consequent: [Node],
       alternate: null } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 174,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 13, end: 14, name: 'x' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 15,
     end: 174,
     body: 
      [ [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node],
        [Node] ] } }
FunctionDeclaration
0
174
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'x' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'x' }
Identifier
13
14
x
Node {
  type: 'BlockStatement',
  start: 15,
  end: 174,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 21,
       end: 30,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 35,
       end: 44,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 49,
       end: 58,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 63,
       end: 72,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 77,
       end: 86,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 91,
       end: 100,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 105,
       end: 114,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 119,
       end: 128,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 133,
       end: 142,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 147,
       end: 156,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 161,
       end: 172,
       expression: [Node] } ] }
BlockStatement
15
174
[ Node {
    type: 'ExpressionStatement',
    start: 21,
    end: 30,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 21,
       end: 29,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 35,
    end: 44,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 35,
       end: 43,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 49,
    end: 58,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 49,
       end: 57,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 63,
    end: 72,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 63,
       end: 71,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 77,
    end: 86,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 77,
       end: 85,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 91,
    end: 100,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 91,
       end: 99,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 105,
    end: 114,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 105,
       end: 113,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 119,
    end: 128,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 119,
       end: 127,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 133,
    end: 142,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 133,
       end: 141,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 147,
    end: 156,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 147,
       end: 155,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 161,
    end: 172,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 161,
       end: 171,
       operator: '=',
       left: [Node],
       right: [Node] } } ]
Node {
  type: 'ExpressionStatement',
  start: 21,
  end: 30,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 21,
     end: 29,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 21,
        end: 25,
        object: [Node],
        property: [Node],
        computed: false },
     right: Node { type: 'Literal', start: 28, end: 29, value: 0, raw: '0' } } }
ExpressionStatement
21
30
Node {
  type: 'AssignmentExpression',
  start: 21,
  end: 29,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 21,
     end: 25,
     object: Node { type: 'Identifier', start: 21, end: 22, name: 'x' },
     property: Node { type: 'Identifier', start: 23, end: 25, name: 'a0' },
     computed: false },
  right: Node { type: 'Literal', start: 28, end: 29, value: 0, raw: '0' } }
AssignmentExpression
21
29
=
Node {
  type: 'MemberExpression',
  start: 21,
  end: 25,
  object: Node { type: 'Identifier', start: 21, end: 22, name: 'x' },
  property: Node { type: 'Identifier', start: 23, end: 25, name: 'a0' },
  computed: false }
MemberExpression
21
25
Node { type: 'Identifier', start: 21, end: 22, name: 'x' }
Identifier
21
22
x
Node { type: 'Identifier', start: 23, end: 25, name: 'a0' }
Identifier
23
25
a0
false
Node { type: 'Literal', start: 28, end: 29, value: 0, raw: '0' }
Literal
28
29
0
0
Node {
  type: 'ExpressionStatement',
  start: 35,
  end: 44,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 35,
     end: 43,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 35,
        end: 39,
        object: [Node],
        property: [Node],
        computed: false },
     right: Node { type: 'Literal', start: 42, end: 43, value: 1, raw: '1' } } }
ExpressionStatement
35
44
Node {
  type: 'AssignmentExpression',
  start: 35,
  end: 43,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 35,
     end: 39,
     object: Node { type: 'Identifier', start: 35, end: 36, name: 'x' },
     property: Node { type: 'Identifier', start: 37, end: 39, name: 'a1' },
     computed: false },
  right: Node { type: 'Literal', start: 42, end: 43, value: 1, raw: '1' } }
AssignmentExpression
35
43
=
Node {
  type: 'MemberExpression',
  start: 35,
  end: 39,
  object: Node { type: 'Identifier', start: 35, end: 36, name: 'x' },
  property: Node { type: 'Identifier', start: 37, end: 39, name: 'a1' },
  computed: false }
MemberExpression
35
39
Node { type: 'Identifier', start: 35, end: 36, name: 'x' }
Identifier
35
36
x
Node { type: 'Identifier', start: 37, end: 39, name: 'a1' }
Identifier
37
39
a1
false
Node { type: 'Literal', start: 42, end: 43, value: 1, raw: '1' }
Literal
42
43
1
1
Node {
  type: 'ExpressionStatement',
  start: 49,
  end: 58,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 49,
     end: 57,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 49,
        end: 53,
        object: [Node],
        property: [Node],
        computed: false },
     right: Node { type: 'Literal', start: 56, end: 57, value: 2, raw: '2' } } }
ExpressionStatement
49
58
Node {
  type: 'AssignmentExpression',
  start: 49,
  end: 57,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 49,
     end: 53,
     object: Node { type: 'Identifier', start: 49, end: 50, name: 'x' },
     property: Node { type: 'Identifier', start: 51, end: 53, name: 'a2' },
     computed: false },
  right: Node { type: 'Literal', start: 56, end: 57, value: 2, raw: '2' } }
AssignmentExpression
49
57
=
Node {
  type: 'MemberExpression',
  start: 49,
  end: 53,
  object: Node { type: 'Identifier', start: 49, end: 50, name: 'x' },
  property: Node { type: 'Identifier', start: 51, end: 53, name: 'a2' },
  computed: false }
MemberExpression
49
53
Node { type: 'Identifier', start: 49, end: 50, name: 'x' }
Identifier
49
50
x
Node { type: 'Identifier', start: 51, end: 53, name: 'a2' }
Identifier
51
53
a2
false
Node { type: 'Literal', start: 56, end: 57, value: 2, raw: '2' }
Literal
56
57
2
2
Node {
  type: 'ExpressionStatement',
  start: 63,
  end: 72,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 63,
     end: 71,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 63,
        end: 67,
        object: [Node],
        property: [Node],
        computed: false },
     right: Node { type: 'Literal', start: 70, end: 71, value: 3, raw: '3' } } }
ExpressionStatement
63
72
Node {
  type: 'AssignmentExpression',
  start: 63,
  end: 71,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 63,
     end: 67,
     object: Node { type: 'Identifier', start: 63, end: 64, name: 'x' },
     property: Node { type: 'Identifier', start: 65, end: 67, name: 'a3' },
     computed: false },
  right: Node { type: 'Literal', start: 70, end: 71, value: 3, raw: '3' } }
AssignmentExpression
63
71
=
Node {
  type: 'MemberExpression',
  start: 63,
  end: 67,
  object: Node { type: 'Identifier', start: 63, end: 64, name: 'x' },
  property: Node { type: 'Identifier', start: 65, end: 67, name: 'a3' },
  computed: false }
MemberExpression
63
67
Node { type: 'Identifier', start: 63, end: 64, name: 'x' }
Identifier
63
64
x
Node { type: 'Identifier', start: 65, end: 67, name: 'a3' }
Identifier
65
67
a3
false
Node { type: 'Literal', start: 70, end: 71, value: 3, raw: '3' }
Literal
70
71
3
3
Node {
  type: 'ExpressionStatement',
  start: 77,
  end: 86,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 77,
     end: 85,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 77,
        end: 81,
        object: [Node],
        property: [Node],
        computed: false },
     right: Node { type: 'Literal', start: 84, end: 85, value: 4, raw: '4' } } }
ExpressionStatement
77
86
Node {
  type: 'AssignmentExpression',
  start: 77,
  end: 85,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 77,
     end: 81,
     object: Node { type: 'Identifier', start: 77, end: 78, name: 'x' },
     property: Node { type: 'Identifier', start: 79, end: 81, name: 'a4' },
     computed: false },
  right: Node { type: 'Literal', start: 84, end: 85, value: 4, raw: '4' } }
AssignmentExpression
77
85
=
Node {
  type: 'MemberExpression',
  start: 77,
  end: 81,
  object: Node { type: 'Identifier', start: 77, end: 78, name: 'x' },
  property: Node { type: 'Identifier', start: 79, end: 81, name: 'a4' },
  computed: false }
MemberExpression
77
81
Node { type: 'Identifier', start: 77, end: 78, name: 'x' }
Identifier
77
78
x
Node { type: 'Identifier', start: 79, end: 81, name: 'a4' }
Identifier
79
81
a4
false
Node { type: 'Literal', start: 84, end: 85, value: 4, raw: '4' }
Literal
84
85
4
4
Node {
  type: 'ExpressionStatement',
  start: 91,
  end: 100,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 91,
     end: 99,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 91,
        end: 95,
        object: [Node],
        property: [Node],
        computed: false },
     right: Node { type: 'Literal', start: 98, end: 99, value: 5, raw: '5' } } }
ExpressionStatement
91
100
Node {
  type: 'AssignmentExpression',
  start: 91,
  end: 99,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 91,
     end: 95,
     object: Node { type: 'Identifier', start: 91, end: 92, name: 'x' },
     property: Node { type: 'Identifier', start: 93, end: 95, name: 'a5' },
     computed: false },
  right: Node { type: 'Literal', start: 98, end: 99, value: 5, raw: '5' } }
AssignmentExpression
91
99
=
Node {
  type: 'MemberExpression',
  start: 91,
  end: 95,
  object: Node { type: 'Identifier', start: 91, end: 92, name: 'x' },
  property: Node { type: 'Identifier', start: 93, end: 95, name: 'a5' },
  computed: false }
MemberExpression
91
95
Node { type: 'Identifier', start: 91, end: 92, name: 'x' }
Identifier
91
92
x
Node { type: 'Identifier', start: 93, end: 95, name: 'a5' }
Identifier
93
95
a5
false
Node { type: 'Literal', start: 98, end: 99, value: 5, raw: '5' }
Literal
98
99
5
5
Node {
  type: 'ExpressionStatement',
  start: 105,
  end: 114,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 105,
     end: 113,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 105,
        end: 109,
        object: [Node],
        property: [Node],
        computed: false },
     right: Node { type: 'Literal', start: 112, end: 113, value: 6, raw: '6' } } }
ExpressionStatement
105
114
Node {
  type: 'AssignmentExpression',
  start: 105,
  end: 113,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 105,
     end: 109,
     object: Node { type: 'Identifier', start: 105, end: 106, name: 'x' },
     property: Node { type: 'Identifier', start: 107, end: 109, name: 'a6' },
     computed: false },
  right: Node { type: 'Literal', start: 112, end: 113, value: 6, raw: '6' } }
AssignmentExpression
105
113
=
Node {
  type: 'MemberExpression',
  start: 105,
  end: 109,
  object: Node { type: 'Identifier', start: 105, end: 106, name: 'x' },
  property: Node { type: 'Identifier', start: 107, end: 109, name: 'a6' },
  computed: false }
MemberExpression
105
109
Node { type: 'Identifier', start: 105, end: 106, name: 'x' }
Identifier
105
106
x
Node { type: 'Identifier', start: 107, end: 109, name: 'a6' }
Identifier
107
109
a6
false
Node { type: 'Literal', start: 112, end: 113, value: 6, raw: '6' }
Literal
112
113
6
6
Node {
  type: 'ExpressionStatement',
  start: 119,
  end: 128,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 119,
     end: 127,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 119,
        end: 123,
        object: [Node],
        property: [Node],
        computed: false },
     right: Node { type: 'Literal', start: 126, end: 127, value: 7, raw: '7' } } }
ExpressionStatement
119
128
Node {
  type: 'AssignmentExpression',
  start: 119,
  end: 127,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 119,
     end: 123,
     object: Node { type: 'Identifier', start: 119, end: 120, name: 'x' },
     property: Node { type: 'Identifier', start: 121, end: 123, name: 'a7' },
     computed: false },
  right: Node { type: 'Literal', start: 126, end: 127, value: 7, raw: '7' } }
AssignmentExpression
119
127
=
Node {
  type: 'MemberExpression',
  start: 119,
  end: 123,
  object: Node { type: 'Identifier', start: 119, end: 120, name: 'x' },
  property: Node { type: 'Identifier', start: 121, end: 123, name: 'a7' },
  computed: false }
MemberExpression
119
123
Node { type: 'Identifier', start: 119, end: 120, name: 'x' }
Identifier
119
120
x
Node { type: 'Identifier', start: 121, end: 123, name: 'a7' }
Identifier
121
123
a7
false
Node { type: 'Literal', start: 126, end: 127, value: 7, raw: '7' }
Literal
126
127
7
7
Node {
  type: 'ExpressionStatement',
  start: 133,
  end: 142,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 133,
     end: 141,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 133,
        end: 137,
        object: [Node],
        property: [Node],
        computed: false },
     right: Node { type: 'Literal', start: 140, end: 141, value: 8, raw: '8' } } }
ExpressionStatement
133
142
Node {
  type: 'AssignmentExpression',
  start: 133,
  end: 141,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 133,
     end: 137,
     object: Node { type: 'Identifier', start: 133, end: 134, name: 'x' },
     property: Node { type: 'Identifier', start: 135, end: 137, name: 'a8' },
     computed: false },
  right: Node { type: 'Literal', start: 140, end: 141, value: 8, raw: '8' } }
AssignmentExpression
133
141
=
Node {
  type: 'MemberExpression',
  start: 133,
  end: 137,
  object: Node { type: 'Identifier', start: 133, end: 134, name: 'x' },
  property: Node { type: 'Identifier', start: 135, end: 137, name: 'a8' },
  computed: false }
MemberExpression
133
137
Node { type: 'Identifier', start: 133, end: 134, name: 'x' }
Identifier
133
134
x
Node { type: 'Identifier', start: 135, end: 137, name: 'a8' }
Identifier
135
137
a8
false
Node { type: 'Literal', start: 140, end: 141, value: 8, raw: '8' }
Literal
140
141
8
8
Node {
  type: 'ExpressionStatement',
  start: 147,
  end: 156,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 147,
     end: 155,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 147,
        end: 151,
        object: [Node],
        property: [Node],
        computed: false },
     right: Node { type: 'Literal', start: 154, end: 155, value: 9, raw: '9' } } }
ExpressionStatement
147
156
Node {
  type: 'AssignmentExpression',
  start: 147,
  end: 155,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 147,
     end: 151,
     object: Node { type: 'Identifier', start: 147, end: 148, name: 'x' },
     property: Node { type: 'Identifier', start: 149, end: 151, name: 'a9' },
     computed: false },
  right: Node { type: 'Literal', start: 154, end: 155, value: 9, raw: '9' } }
AssignmentExpression
147
155
=
Node {
  type: 'MemberExpression',
  start: 147,
  end: 151,
  object: Node { type: 'Identifier', start: 147, end: 148, name: 'x' },
  property: Node { type: 'Identifier', start: 149, end: 151, name: 'a9' },
  computed: false }
MemberExpression
147
151
Node { type: 'Identifier', start: 147, end: 148, name: 'x' }
Identifier
147
148
x
Node { type: 'Identifier', start: 149, end: 151, name: 'a9' }
Identifier
149
151
a9
false
Node { type: 'Literal', start: 154, end: 155, value: 9, raw: '9' }
Literal
154
155
9
9
Node {
  type: 'ExpressionStatement',
  start: 161,
  end: 172,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 161,
     end: 171,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 161,
        end: 166,
        object: [Node],
        property: [Node],
        computed: false },
     right: Node { type: 'Literal', start: 169, end: 171, value: 10, raw: '10' } } }
ExpressionStatement
161
172
Node {
  type: 'AssignmentExpression',
  start: 161,
  end: 171,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 161,
     end: 166,
     object: Node { type: 'Identifier', start: 161, end: 162, name: 'x' },
     property: Node { type: 'Identifier', start: 163, end: 166, name: 'a10' },
     computed: false },
  right: Node { type: 'Literal', start: 169, end: 171, value: 10, raw: '10' } }
AssignmentExpression
161
171
=
Node {
  type: 'MemberExpression',
  start: 161,
  end: 166,
  object: Node { type: 'Identifier', start: 161, end: 162, name: 'x' },
  property: Node { type: 'Identifier', start: 163, end: 166, name: 'a10' },
  computed: false }
MemberExpression
161
166
Node { type: 'Identifier', start: 161, end: 162, name: 'x' }
Identifier
161
162
x
Node { type: 'Identifier', start: 163, end: 166, name: 'a10' }
Identifier
163
166
a10
false
Node { type: 'Literal', start: 169, end: 171, value: 10, raw: '10' }
Literal
169
171
10
10
Node {
  type: 'ExpressionStatement',
  start: 176,
  end: 190,
  expression: 
   Node {
     type: 'CallExpression',
     start: 176,
     end: 189,
     callee: Node { type: 'Identifier', start: 176, end: 184, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
176
190
Node {
  type: 'CallExpression',
  start: 176,
  end: 189,
  callee: Node { type: 'Identifier', start: 176, end: 184, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 185, end: 188, name: 'foo' } ] }
CallExpression
176
189
Node { type: 'Identifier', start: 176, end: 184, name: 'noInline' }
Identifier
176
184
noInline
[ Node { type: 'Identifier', start: 185, end: 188, name: 'foo' } ]
Node { type: 'Identifier', start: 185, end: 188, name: 'foo' }
Identifier
185
188
foo
Node {
  type: 'VariableDeclaration',
  start: 192,
  end: 203,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 196,
       end: 202,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
192
203
[ Node {
    type: 'VariableDeclarator',
    start: 196,
    end: 202,
    id: Node { type: 'Identifier', start: 196, end: 197, name: 'c' },
    init: Node { type: 'ObjectExpression', start: 200, end: 202, properties: [] } } ]
Node {
  type: 'VariableDeclarator',
  start: 196,
  end: 202,
  id: Node { type: 'Identifier', start: 196, end: 197, name: 'c' },
  init: Node { type: 'ObjectExpression', start: 200, end: 202, properties: [] } }
VariableDeclarator
196
202
Node { type: 'Identifier', start: 196, end: 197, name: 'c' }
Identifier
196
197
c
Node { type: 'ObjectExpression', start: 200, end: 202, properties: [] }
ObjectExpression
200
202
[]
var
Node {
  type: 'ForStatement',
  start: 204,
  end: 279,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 209,
     end: 218,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 220,
     end: 230,
     left: Node { type: 'Identifier', start: 220, end: 221, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 224,
        end: 230,
        value: 100000,
        raw: '100000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 232,
     end: 235,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 234, end: 235, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 237,
     end: 279,
     body: [ [Node], [Node], [Node] ] } }
ForStatement
204
279
Node {
  type: 'VariableDeclaration',
  start: 209,
  end: 218,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 213,
       end: 218,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
209
218
[ Node {
    type: 'VariableDeclarator',
    start: 213,
    end: 218,
    id: Node { type: 'Identifier', start: 213, end: 214, name: 'i' },
    init: Node { type: 'Literal', start: 217, end: 218, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 213,
  end: 218,
  id: Node { type: 'Identifier', start: 213, end: 214, name: 'i' },
  init: Node { type: 'Literal', start: 217, end: 218, value: 0, raw: '0' } }
VariableDeclarator
213
218
Node { type: 'Identifier', start: 213, end: 214, name: 'i' }
Identifier
213
214
i
Node { type: 'Literal', start: 217, end: 218, value: 0, raw: '0' }
Literal
217
218
0
0
var
Node {
  type: 'BinaryExpression',
  start: 220,
  end: 230,
  left: Node { type: 'Identifier', start: 220, end: 221, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 224,
     end: 230,
     value: 100000,
     raw: '100000' } }
BinaryExpression
220
230
Node { type: 'Identifier', start: 220, end: 221, name: 'i' }
Identifier
220
221
i
<
Node {
  type: 'Literal',
  start: 224,
  end: 230,
  value: 100000,
  raw: '100000' }
Literal
224
230
100000
100000
Node {
  type: 'UpdateExpression',
  start: 232,
  end: 235,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 234, end: 235, name: 'i' } }
UpdateExpression
232
235
++
true
Node { type: 'Identifier', start: 234, end: 235, name: 'i' }
Identifier
234
235
i
Node {
  type: 'BlockStatement',
  start: 237,
  end: 279,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 243,
       end: 254,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ExpressionStatement',
       start: 259,
       end: 266,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 271,
       end: 277,
       expression: [Node] } ] }
BlockStatement
237
279
[ Node {
    type: 'VariableDeclaration',
    start: 243,
    end: 254,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ExpressionStatement',
    start: 259,
    end: 266,
    expression: 
     Node {
       type: 'CallExpression',
       start: 259,
       end: 265,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 271,
    end: 277,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 271,
       end: 276,
       operator: '=',
       left: [Node],
       right: [Node] } } ]
Node {
  type: 'VariableDeclaration',
  start: 243,
  end: 254,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 247,
       end: 253,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
243
254
[ Node {
    type: 'VariableDeclarator',
    start: 247,
    end: 253,
    id: Node { type: 'Identifier', start: 247, end: 248, name: 'b' },
    init: Node { type: 'ObjectExpression', start: 251, end: 253, properties: [] } } ]
Node {
  type: 'VariableDeclarator',
  start: 247,
  end: 253,
  id: Node { type: 'Identifier', start: 247, end: 248, name: 'b' },
  init: Node { type: 'ObjectExpression', start: 251, end: 253, properties: [] } }
VariableDeclarator
247
253
Node { type: 'Identifier', start: 247, end: 248, name: 'b' }
Identifier
247
248
b
Node { type: 'ObjectExpression', start: 251, end: 253, properties: [] }
ObjectExpression
251
253
[]
var
Node {
  type: 'ExpressionStatement',
  start: 259,
  end: 266,
  expression: 
   Node {
     type: 'CallExpression',
     start: 259,
     end: 265,
     callee: Node { type: 'Identifier', start: 259, end: 262, name: 'foo' },
     arguments: [ [Node] ] } }
ExpressionStatement
259
266
Node {
  type: 'CallExpression',
  start: 259,
  end: 265,
  callee: Node { type: 'Identifier', start: 259, end: 262, name: 'foo' },
  arguments: 
   [ Node { type: 'Identifier', start: 263, end: 264, name: 'b' } ] }
CallExpression
259
265
Node { type: 'Identifier', start: 259, end: 262, name: 'foo' }
Identifier
259
262
foo
[ Node { type: 'Identifier', start: 263, end: 264, name: 'b' } ]
Node { type: 'Identifier', start: 263, end: 264, name: 'b' }
Identifier
263
264
b
Node {
  type: 'ExpressionStatement',
  start: 271,
  end: 277,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 271,
     end: 276,
     operator: '=',
     left: Node { type: 'Identifier', start: 271, end: 272, name: 'c' },
     right: Node { type: 'Identifier', start: 275, end: 276, name: 'b' } } }
ExpressionStatement
271
277
Node {
  type: 'AssignmentExpression',
  start: 271,
  end: 276,
  operator: '=',
  left: Node { type: 'Identifier', start: 271, end: 272, name: 'c' },
  right: Node { type: 'Identifier', start: 275, end: 276, name: 'b' } }
AssignmentExpression
271
276
=
Node { type: 'Identifier', start: 271, end: 272, name: 'c' }
Identifier
271
272
c
Node { type: 'Identifier', start: 275, end: 276, name: 'b' }
Identifier
275
276
b
Node {
  type: 'ForStatement',
  start: 281,
  end: 368,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 286,
     end: 295,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 297,
     end: 304,
     left: Node { type: 'Identifier', start: 297, end: 298, name: 'j' },
     operator: '<=',
     right: Node { type: 'Literal', start: 302, end: 304, value: 10, raw: '10' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 307,
     end: 310,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 309, end: 310, name: 'j' } },
  body: 
   Node {
     type: 'IfStatement',
     start: 316,
     end: 368,
     test: 
      Node {
        type: 'BinaryExpression',
        start: 320,
        end: 333,
        left: [Node],
        operator: '!=',
        right: [Node] },
     consequent: Node { type: 'ThrowStatement', start: 344, end: 368, argument: [Node] },
     alternate: null } }
ForStatement
281
368
Node {
  type: 'VariableDeclaration',
  start: 286,
  end: 295,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 290,
       end: 295,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
286
295
[ Node {
    type: 'VariableDeclarator',
    start: 290,
    end: 295,
    id: Node { type: 'Identifier', start: 290, end: 291, name: 'j' },
    init: Node { type: 'Literal', start: 294, end: 295, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 290,
  end: 295,
  id: Node { type: 'Identifier', start: 290, end: 291, name: 'j' },
  init: Node { type: 'Literal', start: 294, end: 295, value: 0, raw: '0' } }
VariableDeclarator
290
295
Node { type: 'Identifier', start: 290, end: 291, name: 'j' }
Identifier
290
291
j
Node { type: 'Literal', start: 294, end: 295, value: 0, raw: '0' }
Literal
294
295
0
0
var
Node {
  type: 'BinaryExpression',
  start: 297,
  end: 304,
  left: Node { type: 'Identifier', start: 297, end: 298, name: 'j' },
  operator: '<=',
  right: Node { type: 'Literal', start: 302, end: 304, value: 10, raw: '10' } }
BinaryExpression
297
304
Node { type: 'Identifier', start: 297, end: 298, name: 'j' }
Identifier
297
298
j
<=
Node { type: 'Literal', start: 302, end: 304, value: 10, raw: '10' }
Literal
302
304
10
10
Node {
  type: 'UpdateExpression',
  start: 307,
  end: 310,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 309, end: 310, name: 'j' } }
UpdateExpression
307
310
++
true
Node { type: 'Identifier', start: 309, end: 310, name: 'j' }
Identifier
309
310
j
Node {
  type: 'IfStatement',
  start: 316,
  end: 368,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 320,
     end: 333,
     left: 
      Node {
        type: 'MemberExpression',
        start: 320,
        end: 328,
        object: [Node],
        property: [Node],
        computed: true },
     operator: '!=',
     right: Node { type: 'Identifier', start: 332, end: 333, name: 'j' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 344,
     end: 368,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 350,
        end: 367,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
316
368
Node {
  type: 'BinaryExpression',
  start: 320,
  end: 333,
  left: 
   Node {
     type: 'MemberExpression',
     start: 320,
     end: 328,
     object: Node { type: 'Identifier', start: 320, end: 321, name: 'c' },
     property: 
      Node {
        type: 'BinaryExpression',
        start: 322,
        end: 327,
        left: [Node],
        operator: '+',
        right: [Node] },
     computed: true },
  operator: '!=',
  right: Node { type: 'Identifier', start: 332, end: 333, name: 'j' } }
BinaryExpression
320
333
Node {
  type: 'MemberExpression',
  start: 320,
  end: 328,
  object: Node { type: 'Identifier', start: 320, end: 321, name: 'c' },
  property: 
   Node {
     type: 'BinaryExpression',
     start: 322,
     end: 327,
     left: Node { type: 'Literal', start: 322, end: 325, value: 'a', raw: '\'a\'' },
     operator: '+',
     right: Node { type: 'Identifier', start: 326, end: 327, name: 'j' } },
  computed: true }
MemberExpression
320
328
Node { type: 'Identifier', start: 320, end: 321, name: 'c' }
Identifier
320
321
c
Node {
  type: 'BinaryExpression',
  start: 322,
  end: 327,
  left: Node { type: 'Literal', start: 322, end: 325, value: 'a', raw: '\'a\'' },
  operator: '+',
  right: Node { type: 'Identifier', start: 326, end: 327, name: 'j' } }
BinaryExpression
322
327
Node { type: 'Literal', start: 322, end: 325, value: 'a', raw: '\'a\'' }
Literal
322
325
a
'a'
+
Node { type: 'Identifier', start: 326, end: 327, name: 'j' }
Identifier
326
327
j
true
!=
Node { type: 'Identifier', start: 332, end: 333, name: 'j' }
Identifier
332
333
j
Node {
  type: 'ThrowStatement',
  start: 344,
  end: 368,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 350,
     end: 367,
     left: 
      Node {
        type: 'Literal',
        start: 350,
        end: 358,
        value: 'Error ',
        raw: '"Error "' },
     operator: '+',
     right: 
      Node {
        type: 'MemberExpression',
        start: 359,
        end: 367,
        object: [Node],
        property: [Node],
        computed: true } } }
ThrowStatement
344
368
Node {
  type: 'BinaryExpression',
  start: 350,
  end: 367,
  left: 
   Node {
     type: 'Literal',
     start: 350,
     end: 358,
     value: 'Error ',
     raw: '"Error "' },
  operator: '+',
  right: 
   Node {
     type: 'MemberExpression',
     start: 359,
     end: 367,
     object: Node { type: 'Identifier', start: 359, end: 360, name: 'c' },
     property: 
      Node {
        type: 'BinaryExpression',
        start: 361,
        end: 366,
        left: [Node],
        operator: '+',
        right: [Node] },
     computed: true } }
BinaryExpression
350
367
Node {
  type: 'Literal',
  start: 350,
  end: 358,
  value: 'Error ',
  raw: '"Error "' }
Literal
350
358
Error 
"Error "
+
Node {
  type: 'MemberExpression',
  start: 359,
  end: 367,
  object: Node { type: 'Identifier', start: 359, end: 360, name: 'c' },
  property: 
   Node {
     type: 'BinaryExpression',
     start: 361,
     end: 366,
     left: Node { type: 'Literal', start: 361, end: 364, value: 'a', raw: '\'a\'' },
     operator: '+',
     right: Node { type: 'Identifier', start: 365, end: 366, name: 'j' } },
  computed: true }
MemberExpression
359
367
Node { type: 'Identifier', start: 359, end: 360, name: 'c' }
Identifier
359
360
c
Node {
  type: 'BinaryExpression',
  start: 361,
  end: 366,
  left: Node { type: 'Literal', start: 361, end: 364, value: 'a', raw: '\'a\'' },
  operator: '+',
  right: Node { type: 'Identifier', start: 365, end: 366, name: 'j' } }
BinaryExpression
361
366
Node { type: 'Literal', start: 361, end: 364, value: 'a', raw: '\'a\'' }
Literal
361
364
a
'a'
+
Node { type: 'Identifier', start: 365, end: 366, name: 'j' }
Identifier
365
366
j
true
null
[+] Exception: ftl-reallocatepropertystorage.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 416,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 45,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 47,
       end: 61,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 63,
       end: 415,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
416
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 45,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 16, end: 45, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 47,
    end: 61,
    expression: 
     Node {
       type: 'CallExpression',
       start: 47,
       end: 60,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 63,
    end: 415,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 68,
       end: 77,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 79,
       end: 89,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 91,
       end: 94,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 96, end: 415, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 45,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 13, end: 14, name: 's' } ],
  body: Node { type: 'BlockStatement', start: 16, end: 45, body: [ [Node] ] } }
FunctionDeclaration
0
45
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 's' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 's' }
Identifier
13
14
s
Node {
  type: 'BlockStatement',
  start: 16,
  end: 45,
  body: 
   [ Node { type: 'ReturnStatement', start: 22, end: 43, argument: [Node] } ] }
BlockStatement
16
45
[ Node {
    type: 'ReturnStatement',
    start: 22,
    end: 43,
    argument: 
     Node {
       type: 'CallExpression',
       start: 29,
       end: 42,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'ReturnStatement',
  start: 22,
  end: 43,
  argument: 
   Node {
     type: 'CallExpression',
     start: 29,
     end: 42,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 29,
        end: 39,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [ [Node] ] } }
ReturnStatement
22
43
Node {
  type: 'CallExpression',
  start: 29,
  end: 42,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 29,
     end: 39,
     object: 
      Node {
        type: 'Literal',
        start: 29,
        end: 34,
        value: /foo/,
        raw: '/foo/',
        regex: [Object] },
     property: Node { type: 'Identifier', start: 35, end: 39, name: 'exec' },
     computed: false },
  arguments: [ Node { type: 'Identifier', start: 40, end: 41, name: 's' } ] }
CallExpression
29
42
Node {
  type: 'MemberExpression',
  start: 29,
  end: 39,
  object: 
   Node {
     type: 'Literal',
     start: 29,
     end: 34,
     value: /foo/,
     raw: '/foo/',
     regex: { pattern: 'foo', flags: '' } },
  property: Node { type: 'Identifier', start: 35, end: 39, name: 'exec' },
  computed: false }
MemberExpression
29
39
Node {
  type: 'Literal',
  start: 29,
  end: 34,
  value: /foo/,
  raw: '/foo/',
  regex: { pattern: 'foo', flags: '' } }
Literal
29
34
/foo/
/foo/
{ pattern: 'foo', flags: '' }
foo

Node { type: 'Identifier', start: 35, end: 39, name: 'exec' }
Identifier
35
39
exec
false
[ Node { type: 'Identifier', start: 40, end: 41, name: 's' } ]
Node { type: 'Identifier', start: 40, end: 41, name: 's' }
Identifier
40
41
s
Node {
  type: 'ExpressionStatement',
  start: 47,
  end: 61,
  expression: 
   Node {
     type: 'CallExpression',
     start: 47,
     end: 60,
     callee: Node { type: 'Identifier', start: 47, end: 55, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
47
61
Node {
  type: 'CallExpression',
  start: 47,
  end: 60,
  callee: Node { type: 'Identifier', start: 47, end: 55, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 56, end: 59, name: 'foo' } ] }
CallExpression
47
60
Node { type: 'Identifier', start: 47, end: 55, name: 'noInline' }
Identifier
47
55
noInline
[ Node { type: 'Identifier', start: 56, end: 59, name: 'foo' } ]
Node { type: 'Identifier', start: 56, end: 59, name: 'foo' }
Identifier
56
59
foo
Node {
  type: 'ForStatement',
  start: 63,
  end: 415,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 68,
     end: 77,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 79,
     end: 89,
     left: Node { type: 'Identifier', start: 79, end: 80, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 83,
        end: 89,
        value: 100000,
        raw: '100000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 91,
     end: 94,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 93, end: 94, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 96,
     end: 415,
     body: [ [Node], [Node], [Node], [Node], [Node] ] } }
ForStatement
63
415
Node {
  type: 'VariableDeclaration',
  start: 68,
  end: 77,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 72,
       end: 77,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
68
77
[ Node {
    type: 'VariableDeclarator',
    start: 72,
    end: 77,
    id: Node { type: 'Identifier', start: 72, end: 73, name: 'i' },
    init: Node { type: 'Literal', start: 76, end: 77, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 72,
  end: 77,
  id: Node { type: 'Identifier', start: 72, end: 73, name: 'i' },
  init: Node { type: 'Literal', start: 76, end: 77, value: 0, raw: '0' } }
VariableDeclarator
72
77
Node { type: 'Identifier', start: 72, end: 73, name: 'i' }
Identifier
72
73
i
Node { type: 'Literal', start: 76, end: 77, value: 0, raw: '0' }
Literal
76
77
0
0
var
Node {
  type: 'BinaryExpression',
  start: 79,
  end: 89,
  left: Node { type: 'Identifier', start: 79, end: 80, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 83,
     end: 89,
     value: 100000,
     raw: '100000' } }
BinaryExpression
79
89
Node { type: 'Identifier', start: 79, end: 80, name: 'i' }
Identifier
79
80
i
<
Node {
  type: 'Literal',
  start: 83,
  end: 89,
  value: 100000,
  raw: '100000' }
Literal
83
89
100000
100000
Node {
  type: 'UpdateExpression',
  start: 91,
  end: 94,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 93, end: 94, name: 'i' } }
UpdateExpression
91
94
++
true
Node { type: 'Identifier', start: 93, end: 94, name: 'i' }
Identifier
93
94
i
Node {
  type: 'BlockStatement',
  start: 96,
  end: 415,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 102,
       end: 126,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 131,
       end: 186,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 191,
       end: 268,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 273,
       end: 350,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 355,
       end: 413,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
96
415
[ Node {
    type: 'VariableDeclaration',
    start: 102,
    end: 126,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 131,
    end: 186,
    test: 
     Node {
       type: 'UnaryExpression',
       start: 135,
       end: 142,
       operator: '!',
       prefix: true,
       argument: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 152, end: 186, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 191,
    end: 268,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 195,
       end: 213,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 223, end: 268, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 273,
    end: 350,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 277,
       end: 295,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 305, end: 350, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 355,
    end: 413,
    test: 
     Node {
       type: 'CallExpression',
       start: 359,
       end: 369,
       callee: [Node],
       arguments: [Array] },
    consequent: Node { type: 'ThrowStatement', start: 379, end: 413, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 102,
  end: 126,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 106,
       end: 125,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
102
126
[ Node {
    type: 'VariableDeclarator',
    start: 106,
    end: 125,
    id: Node { type: 'Identifier', start: 106, end: 112, name: 'result' },
    init: 
     Node {
       type: 'CallExpression',
       start: 115,
       end: 125,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 106,
  end: 125,
  id: Node { type: 'Identifier', start: 106, end: 112, name: 'result' },
  init: 
   Node {
     type: 'CallExpression',
     start: 115,
     end: 125,
     callee: Node { type: 'Identifier', start: 115, end: 118, name: 'foo' },
     arguments: [ [Node] ] } }
VariableDeclarator
106
125
Node { type: 'Identifier', start: 106, end: 112, name: 'result' }
Identifier
106
112
result
Node {
  type: 'CallExpression',
  start: 115,
  end: 125,
  callee: Node { type: 'Identifier', start: 115, end: 118, name: 'foo' },
  arguments: 
   [ Node {
       type: 'Literal',
       start: 119,
       end: 124,
       value: 'foo',
       raw: '"foo"' } ] }
CallExpression
115
125
Node { type: 'Identifier', start: 115, end: 118, name: 'foo' }
Identifier
115
118
foo
[ Node {
    type: 'Literal',
    start: 119,
    end: 124,
    value: 'foo',
    raw: '"foo"' } ]
Node {
  type: 'Literal',
  start: 119,
  end: 124,
  value: 'foo',
  raw: '"foo"' }
Literal
119
124
foo
"foo"
var
Node {
  type: 'IfStatement',
  start: 131,
  end: 186,
  test: 
   Node {
     type: 'UnaryExpression',
     start: 135,
     end: 142,
     operator: '!',
     prefix: true,
     argument: Node { type: 'Identifier', start: 136, end: 142, name: 'result' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 152,
     end: 186,
     argument: 
      Node {
        type: 'Literal',
        start: 158,
        end: 185,
        value: 'Error: bad result for foo',
        raw: '"Error: bad result for foo"' } },
  alternate: null }
IfStatement
131
186
Node {
  type: 'UnaryExpression',
  start: 135,
  end: 142,
  operator: '!',
  prefix: true,
  argument: Node { type: 'Identifier', start: 136, end: 142, name: 'result' } }
UnaryExpression
135
142
!
true
Node { type: 'Identifier', start: 136, end: 142, name: 'result' }
Identifier
136
142
result
Node {
  type: 'ThrowStatement',
  start: 152,
  end: 186,
  argument: 
   Node {
     type: 'Literal',
     start: 158,
     end: 185,
     value: 'Error: bad result for foo',
     raw: '"Error: bad result for foo"' } }
ThrowStatement
152
186
Node {
  type: 'Literal',
  start: 158,
  end: 185,
  value: 'Error: bad result for foo',
  raw: '"Error: bad result for foo"' }
Literal
158
185
Error: bad result for foo
"Error: bad result for foo"
null
[+] Exception: ftl-regexp-exec.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 227,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 45,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 47,
       end: 61,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 63,
       end: 226,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
227
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 45,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 16, end: 45, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 47,
    end: 61,
    expression: 
     Node {
       type: 'CallExpression',
       start: 47,
       end: 60,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 63,
    end: 226,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 68,
       end: 77,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 79,
       end: 89,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 91,
       end: 94,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 96, end: 226, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 45,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 13, end: 14, name: 's' } ],
  body: Node { type: 'BlockStatement', start: 16, end: 45, body: [ [Node] ] } }
FunctionDeclaration
0
45
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 's' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 's' }
Identifier
13
14
s
Node {
  type: 'BlockStatement',
  start: 16,
  end: 45,
  body: 
   [ Node { type: 'ReturnStatement', start: 22, end: 43, argument: [Node] } ] }
BlockStatement
16
45
[ Node {
    type: 'ReturnStatement',
    start: 22,
    end: 43,
    argument: 
     Node {
       type: 'CallExpression',
       start: 29,
       end: 42,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'ReturnStatement',
  start: 22,
  end: 43,
  argument: 
   Node {
     type: 'CallExpression',
     start: 29,
     end: 42,
     callee: 
      Node {
        type: 'MemberExpression',
        start: 29,
        end: 39,
        object: [Node],
        property: [Node],
        computed: false },
     arguments: [ [Node] ] } }
ReturnStatement
22
43
Node {
  type: 'CallExpression',
  start: 29,
  end: 42,
  callee: 
   Node {
     type: 'MemberExpression',
     start: 29,
     end: 39,
     object: 
      Node {
        type: 'Literal',
        start: 29,
        end: 34,
        value: /foo/,
        raw: '/foo/',
        regex: [Object] },
     property: Node { type: 'Identifier', start: 35, end: 39, name: 'test' },
     computed: false },
  arguments: [ Node { type: 'Identifier', start: 40, end: 41, name: 's' } ] }
CallExpression
29
42
Node {
  type: 'MemberExpression',
  start: 29,
  end: 39,
  object: 
   Node {
     type: 'Literal',
     start: 29,
     end: 34,
     value: /foo/,
     raw: '/foo/',
     regex: { pattern: 'foo', flags: '' } },
  property: Node { type: 'Identifier', start: 35, end: 39, name: 'test' },
  computed: false }
MemberExpression
29
39
Node {
  type: 'Literal',
  start: 29,
  end: 34,
  value: /foo/,
  raw: '/foo/',
  regex: { pattern: 'foo', flags: '' } }
Literal
29
34
/foo/
/foo/
{ pattern: 'foo', flags: '' }
foo

Node { type: 'Identifier', start: 35, end: 39, name: 'test' }
Identifier
35
39
test
false
[ Node { type: 'Identifier', start: 40, end: 41, name: 's' } ]
Node { type: 'Identifier', start: 40, end: 41, name: 's' }
Identifier
40
41
s
Node {
  type: 'ExpressionStatement',
  start: 47,
  end: 61,
  expression: 
   Node {
     type: 'CallExpression',
     start: 47,
     end: 60,
     callee: Node { type: 'Identifier', start: 47, end: 55, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
47
61
Node {
  type: 'CallExpression',
  start: 47,
  end: 60,
  callee: Node { type: 'Identifier', start: 47, end: 55, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 56, end: 59, name: 'foo' } ] }
CallExpression
47
60
Node { type: 'Identifier', start: 47, end: 55, name: 'noInline' }
Identifier
47
55
noInline
[ Node { type: 'Identifier', start: 56, end: 59, name: 'foo' } ]
Node { type: 'Identifier', start: 56, end: 59, name: 'foo' }
Identifier
56
59
foo
Node {
  type: 'ForStatement',
  start: 63,
  end: 226,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 68,
     end: 77,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 79,
     end: 89,
     left: Node { type: 'Identifier', start: 79, end: 80, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 83,
        end: 89,
        value: 100000,
        raw: '100000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 91,
     end: 94,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 93, end: 94, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 96,
     end: 226,
     body: [ [Node], [Node] ] } }
ForStatement
63
226
Node {
  type: 'VariableDeclaration',
  start: 68,
  end: 77,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 72,
       end: 77,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
68
77
[ Node {
    type: 'VariableDeclarator',
    start: 72,
    end: 77,
    id: Node { type: 'Identifier', start: 72, end: 73, name: 'i' },
    init: Node { type: 'Literal', start: 76, end: 77, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 72,
  end: 77,
  id: Node { type: 'Identifier', start: 72, end: 73, name: 'i' },
  init: Node { type: 'Literal', start: 76, end: 77, value: 0, raw: '0' } }
VariableDeclarator
72
77
Node { type: 'Identifier', start: 72, end: 73, name: 'i' }
Identifier
72
73
i
Node { type: 'Literal', start: 76, end: 77, value: 0, raw: '0' }
Literal
76
77
0
0
var
Node {
  type: 'BinaryExpression',
  start: 79,
  end: 89,
  left: Node { type: 'Identifier', start: 79, end: 80, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 83,
     end: 89,
     value: 100000,
     raw: '100000' } }
BinaryExpression
79
89
Node { type: 'Identifier', start: 79, end: 80, name: 'i' }
Identifier
79
80
i
<
Node {
  type: 'Literal',
  start: 83,
  end: 89,
  value: 100000,
  raw: '100000' }
Literal
83
89
100000
100000
Node {
  type: 'UpdateExpression',
  start: 91,
  end: 94,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 93, end: 94, name: 'i' } }
UpdateExpression
91
94
++
true
Node { type: 'Identifier', start: 93, end: 94, name: 'i' }
Identifier
93
94
i
Node {
  type: 'BlockStatement',
  start: 96,
  end: 226,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 102,
       end: 161,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'IfStatement',
       start: 166,
       end: 224,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
96
226
[ Node {
    type: 'IfStatement',
    start: 102,
    end: 161,
    test: 
     Node {
       type: 'UnaryExpression',
       start: 106,
       end: 117,
       operator: '!',
       prefix: true,
       argument: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 127, end: 161, argument: [Node] },
    alternate: null },
  Node {
    type: 'IfStatement',
    start: 166,
    end: 224,
    test: 
     Node {
       type: 'CallExpression',
       start: 170,
       end: 180,
       callee: [Node],
       arguments: [Array] },
    consequent: Node { type: 'ThrowStatement', start: 190, end: 224, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 102,
  end: 161,
  test: 
   Node {
     type: 'UnaryExpression',
     start: 106,
     end: 117,
     operator: '!',
     prefix: true,
     argument: 
      Node {
        type: 'CallExpression',
        start: 107,
        end: 117,
        callee: [Node],
        arguments: [Array] } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 127,
     end: 161,
     argument: 
      Node {
        type: 'Literal',
        start: 133,
        end: 160,
        value: 'Error: bad result for foo',
        raw: '"Error: bad result for foo"' } },
  alternate: null }
IfStatement
102
161
Node {
  type: 'UnaryExpression',
  start: 106,
  end: 117,
  operator: '!',
  prefix: true,
  argument: 
   Node {
     type: 'CallExpression',
     start: 107,
     end: 117,
     callee: Node { type: 'Identifier', start: 107, end: 110, name: 'foo' },
     arguments: [ [Node] ] } }
UnaryExpression
106
117
!
true
Node {
  type: 'CallExpression',
  start: 107,
  end: 117,
  callee: Node { type: 'Identifier', start: 107, end: 110, name: 'foo' },
  arguments: 
   [ Node {
       type: 'Literal',
       start: 111,
       end: 116,
       value: 'foo',
       raw: '"foo"' } ] }
CallExpression
107
117
Node { type: 'Identifier', start: 107, end: 110, name: 'foo' }
Identifier
107
110
foo
[ Node {
    type: 'Literal',
    start: 111,
    end: 116,
    value: 'foo',
    raw: '"foo"' } ]
Node {
  type: 'Literal',
  start: 111,
  end: 116,
  value: 'foo',
  raw: '"foo"' }
Literal
111
116
foo
"foo"
Node {
  type: 'ThrowStatement',
  start: 127,
  end: 161,
  argument: 
   Node {
     type: 'Literal',
     start: 133,
     end: 160,
     value: 'Error: bad result for foo',
     raw: '"Error: bad result for foo"' } }
ThrowStatement
127
161
Node {
  type: 'Literal',
  start: 133,
  end: 160,
  value: 'Error: bad result for foo',
  raw: '"Error: bad result for foo"' }
Literal
133
160
Error: bad result for foo
"Error: bad result for foo"
null
[+] Exception: ftl-regexp-test.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 407,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 97,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 99,
       end: 113,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 115,
       end: 265,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 267,
       end: 331,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 332,
       end: 406,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
407
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 97,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 97, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 99,
    end: 113,
    expression: 
     Node {
       type: 'CallExpression',
       start: 99,
       end: 112,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 115,
    end: 265,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 120,
       end: 129,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 131,
       end: 141,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 143,
       end: 146,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 148, end: 265, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 267,
    end: 331,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 332,
    end: 406,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 336,
       end: 356,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 362, end: 406, argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 97,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'a' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ],
  body: Node { type: 'BlockStatement', start: 19, end: 97, body: [ [Node] ] } }
FunctionDeclaration
0
97
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'a' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'a' }
Identifier
13
14
a
Node { type: 'Identifier', start: 16, end: 17, name: 'b' }
Identifier
16
17
b
Node {
  type: 'BlockStatement',
  start: 19,
  end: 97,
  body: 
   [ Node {
       type: 'TryStatement',
       start: 25,
       end: 95,
       block: [Node],
       handler: [Node],
       finalizer: null } ] }
BlockStatement
19
97
[ Node {
    type: 'TryStatement',
    start: 25,
    end: 95,
    block: Node { type: 'BlockStatement', start: 29, end: 59, body: [Array] },
    handler: 
     Node {
       type: 'CatchClause',
       start: 60,
       end: 95,
       param: [Node],
       body: [Node] },
    finalizer: null } ]
Node {
  type: 'TryStatement',
  start: 25,
  end: 95,
  block: Node { type: 'BlockStatement', start: 29, end: 59, body: [ [Node] ] },
  handler: 
   Node {
     type: 'CatchClause',
     start: 60,
     end: 95,
     param: Node { type: 'Identifier', start: 67, end: 68, name: 'e' },
     body: Node { type: 'BlockStatement', start: 70, end: 95, body: [Array] } },
  finalizer: null }
TryStatement
25
95
Node {
  type: 'BlockStatement',
  start: 29,
  end: 59,
  body: 
   [ Node { type: 'ReturnStatement', start: 39, end: 53, argument: [Node] } ] }
BlockStatement
29
59
[ Node {
    type: 'ReturnStatement',
    start: 39,
    end: 53,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 46,
       end: 52,
       left: [Node],
       operator: '>>',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 39,
  end: 53,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 46,
     end: 52,
     left: Node { type: 'Identifier', start: 46, end: 47, name: 'a' },
     operator: '>>',
     right: Node { type: 'Identifier', start: 51, end: 52, name: 'b' } } }
ReturnStatement
39
53
Node {
  type: 'BinaryExpression',
  start: 46,
  end: 52,
  left: Node { type: 'Identifier', start: 46, end: 47, name: 'a' },
  operator: '>>',
  right: Node { type: 'Identifier', start: 51, end: 52, name: 'b' } }
BinaryExpression
46
52
Node { type: 'Identifier', start: 46, end: 47, name: 'a' }
Identifier
46
47
a
>>
Node { type: 'Identifier', start: 51, end: 52, name: 'b' }
Identifier
51
52
b
Node {
  type: 'CatchClause',
  start: 60,
  end: 95,
  param: Node { type: 'Identifier', start: 67, end: 68, name: 'e' },
  body: Node { type: 'BlockStatement', start: 70, end: 95, body: [ [Node] ] } }
CatchClause
60
95
Node { type: 'Identifier', start: 67, end: 68, name: 'e' }
Identifier
67
68
e
Node {
  type: 'BlockStatement',
  start: 70,
  end: 95,
  body: 
   [ Node { type: 'ReturnStatement', start: 80, end: 89, argument: [Node] } ] }
BlockStatement
70
95
[ Node {
    type: 'ReturnStatement',
    start: 80,
    end: 89,
    argument: Node { type: 'Identifier', start: 87, end: 88, name: 'e' } } ]
Node {
  type: 'ReturnStatement',
  start: 80,
  end: 89,
  argument: Node { type: 'Identifier', start: 87, end: 88, name: 'e' } }
ReturnStatement
80
89
Node { type: 'Identifier', start: 87, end: 88, name: 'e' }
Identifier
87
88
e
null
[+] Exception: ftl-shr-exception.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 774,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 126,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 128,
       end: 163,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ForStatement',
       start: 165,
       end: 240,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 242,
       end: 385,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 387,
       end: 401,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 403,
       end: 444,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ForStatement',
       start: 446,
       end: 524,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 526,
       end: 772,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
774
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 126,
    id: Node { type: 'Identifier', start: 9, end: 19, name: 'makeString' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 26, end: 126, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 128,
    end: 163,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ForStatement',
    start: 165,
    end: 240,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 170,
       end: 179,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 181,
       end: 197,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 199,
       end: 202,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 208,
       end: 240,
       expression: [Node] } },
  Node {
    type: 'FunctionDeclaration',
    start: 242,
    end: 385,
    id: Node { type: 'Identifier', start: 251, end: 254, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 265, end: 385, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 387,
    end: 401,
    expression: 
     Node {
       type: 'CallExpression',
       start: 387,
       end: 400,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 403,
    end: 444,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ForStatement',
    start: 446,
    end: 524,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 451,
       end: 460,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 462,
       end: 479,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 481,
       end: 484,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 490,
       end: 524,
       expression: [Node] } },
  Node {
    type: 'ForStatement',
    start: 526,
    end: 772,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 531,
       end: 540,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 542,
       end: 552,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 554,
       end: 557,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 559, end: 772, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 126,
  id: Node { type: 'Identifier', start: 9, end: 19, name: 'makeString' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 20, end: 24, name: 'char' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 26,
     end: 126,
     body: [ [Node], [Node], [Node] ] } }
FunctionDeclaration
0
126
Node { type: 'Identifier', start: 9, end: 19, name: 'makeString' }
Identifier
9
19
makeString
false
false
false
[ Node { type: 'Identifier', start: 20, end: 24, name: 'char' } ]
Node { type: 'Identifier', start: 20, end: 24, name: 'char' }
Identifier
20
24
char
Node {
  type: 'BlockStatement',
  start: 26,
  end: 126,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 32,
       end: 48,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ForStatement',
       start: 53,
       end: 105,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ReturnStatement',
       start: 110,
       end: 124,
       argument: [Node] } ] }
BlockStatement
26
126
[ Node {
    type: 'VariableDeclaration',
    start: 32,
    end: 48,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ForStatement',
    start: 53,
    end: 105,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 58,
       end: 67,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 69,
       end: 75,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 77,
       end: 80,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 90,
       end: 105,
       expression: [Node] } },
  Node {
    type: 'ReturnStatement',
    start: 110,
    end: 124,
    argument: Node { type: 'Identifier', start: 117, end: 123, name: 'result' } } ]
Node {
  type: 'VariableDeclaration',
  start: 32,
  end: 48,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 36,
       end: 47,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
32
48
[ Node {
    type: 'VariableDeclarator',
    start: 36,
    end: 47,
    id: Node { type: 'Identifier', start: 36, end: 42, name: 'result' },
    init: Node { type: 'Literal', start: 45, end: 47, value: '', raw: '""' } } ]
Node {
  type: 'VariableDeclarator',
  start: 36,
  end: 47,
  id: Node { type: 'Identifier', start: 36, end: 42, name: 'result' },
  init: Node { type: 'Literal', start: 45, end: 47, value: '', raw: '""' } }
VariableDeclarator
36
47
Node { type: 'Identifier', start: 36, end: 42, name: 'result' }
Identifier
36
42
result
Node { type: 'Literal', start: 45, end: 47, value: '', raw: '""' }
Literal
45
47

""
var
Node {
  type: 'ForStatement',
  start: 53,
  end: 105,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 58,
     end: 67,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 69,
     end: 75,
     left: Node { type: 'Identifier', start: 69, end: 70, name: 'i' },
     operator: '<',
     right: Node { type: 'Literal', start: 73, end: 75, value: 10, raw: '10' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 77,
     end: 80,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 79, end: 80, name: 'i' } },
  body: 
   Node {
     type: 'ExpressionStatement',
     start: 90,
     end: 105,
     expression: 
      Node {
        type: 'AssignmentExpression',
        start: 90,
        end: 104,
        operator: '+=',
        left: [Node],
        right: [Node] } } }
ForStatement
53
105
Node {
  type: 'VariableDeclaration',
  start: 58,
  end: 67,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 62,
       end: 67,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
58
67
[ Node {
    type: 'VariableDeclarator',
    start: 62,
    end: 67,
    id: Node { type: 'Identifier', start: 62, end: 63, name: 'i' },
    init: Node { type: 'Literal', start: 66, end: 67, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 62,
  end: 67,
  id: Node { type: 'Identifier', start: 62, end: 63, name: 'i' },
  init: Node { type: 'Literal', start: 66, end: 67, value: 0, raw: '0' } }
VariableDeclarator
62
67
Node { type: 'Identifier', start: 62, end: 63, name: 'i' }
Identifier
62
63
i
Node { type: 'Literal', start: 66, end: 67, value: 0, raw: '0' }
Literal
66
67
0
0
var
Node {
  type: 'BinaryExpression',
  start: 69,
  end: 75,
  left: Node { type: 'Identifier', start: 69, end: 70, name: 'i' },
  operator: '<',
  right: Node { type: 'Literal', start: 73, end: 75, value: 10, raw: '10' } }
BinaryExpression
69
75
Node { type: 'Identifier', start: 69, end: 70, name: 'i' }
Identifier
69
70
i
<
Node { type: 'Literal', start: 73, end: 75, value: 10, raw: '10' }
Literal
73
75
10
10
Node {
  type: 'UpdateExpression',
  start: 77,
  end: 80,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 79, end: 80, name: 'i' } }
UpdateExpression
77
80
++
true
Node { type: 'Identifier', start: 79, end: 80, name: 'i' }
Identifier
79
80
i
Node {
  type: 'ExpressionStatement',
  start: 90,
  end: 105,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 90,
     end: 104,
     operator: '+=',
     left: Node { type: 'Identifier', start: 90, end: 96, name: 'result' },
     right: Node { type: 'Identifier', start: 100, end: 104, name: 'char' } } }
ExpressionStatement
90
105
Node {
  type: 'AssignmentExpression',
  start: 90,
  end: 104,
  operator: '+=',
  left: Node { type: 'Identifier', start: 90, end: 96, name: 'result' },
  right: Node { type: 'Identifier', start: 100, end: 104, name: 'char' } }
AssignmentExpression
90
104
+=
Node { type: 'Identifier', start: 90, end: 96, name: 'result' }
Identifier
90
96
result
Node { type: 'Identifier', start: 100, end: 104, name: 'char' }
Identifier
100
104
char
Node {
  type: 'ReturnStatement',
  start: 110,
  end: 124,
  argument: Node { type: 'Identifier', start: 117, end: 123, name: 'result' } }
ReturnStatement
110
124
Node { type: 'Identifier', start: 117, end: 123, name: 'result' }
Identifier
117
123
result
Node {
  type: 'VariableDeclaration',
  start: 128,
  end: 163,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 132,
       end: 162,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
128
163
[ Node {
    type: 'VariableDeclarator',
    start: 132,
    end: 162,
    id: Node { type: 'Identifier', start: 132, end: 137, name: 'array' },
    init: 
     Node {
       type: 'ArrayExpression',
       start: 140,
       end: 162,
       elements: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 132,
  end: 162,
  id: Node { type: 'Identifier', start: 132, end: 137, name: 'array' },
  init: 
   Node {
     type: 'ArrayExpression',
     start: 140,
     end: 162,
     elements: [ [Node], [Node], [Node], [Node] ] } }
VariableDeclarator
132
162
Node { type: 'Identifier', start: 132, end: 137, name: 'array' }
Identifier
132
137
array
Node {
  type: 'ArrayExpression',
  start: 140,
  end: 162,
  elements: 
   [ Node { type: 'Literal', start: 142, end: 145, value: 'a', raw: '"a"' },
     Node { type: 'Literal', start: 147, end: 150, value: 'b', raw: '"b"' },
     Node { type: 'Literal', start: 152, end: 155, value: 'c', raw: '"c"' },
     Node { type: 'Literal', start: 157, end: 160, value: 'd', raw: '"d"' } ] }
ArrayExpression
140
162
[ Node { type: 'Literal', start: 142, end: 145, value: 'a', raw: '"a"' },
  Node { type: 'Literal', start: 147, end: 150, value: 'b', raw: '"b"' },
  Node { type: 'Literal', start: 152, end: 155, value: 'c', raw: '"c"' },
  Node { type: 'Literal', start: 157, end: 160, value: 'd', raw: '"d"' } ]
Node { type: 'Literal', start: 142, end: 145, value: 'a', raw: '"a"' }
Literal
142
145
a
"a"
Node { type: 'Literal', start: 147, end: 150, value: 'b', raw: '"b"' }
Literal
147
150
b
"b"
Node { type: 'Literal', start: 152, end: 155, value: 'c', raw: '"c"' }
Literal
152
155
c
"c"
Node { type: 'Literal', start: 157, end: 160, value: 'd', raw: '"d"' }
Literal
157
160
d
"d"
var
Node {
  type: 'ForStatement',
  start: 165,
  end: 240,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 170,
     end: 179,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 181,
     end: 197,
     left: Node { type: 'Identifier', start: 181, end: 182, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'MemberExpression',
        start: 185,
        end: 197,
        object: [Node],
        property: [Node],
        computed: false } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 199,
     end: 202,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 201, end: 202, name: 'i' } },
  body: 
   Node {
     type: 'ExpressionStatement',
     start: 208,
     end: 240,
     expression: 
      Node {
        type: 'AssignmentExpression',
        start: 208,
        end: 239,
        operator: '=',
        left: [Node],
        right: [Node] } } }
ForStatement
165
240
Node {
  type: 'VariableDeclaration',
  start: 170,
  end: 179,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 174,
       end: 179,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
170
179
[ Node {
    type: 'VariableDeclarator',
    start: 174,
    end: 179,
    id: Node { type: 'Identifier', start: 174, end: 175, name: 'i' },
    init: Node { type: 'Literal', start: 178, end: 179, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 174,
  end: 179,
  id: Node { type: 'Identifier', start: 174, end: 175, name: 'i' },
  init: Node { type: 'Literal', start: 178, end: 179, value: 0, raw: '0' } }
VariableDeclarator
174
179
Node { type: 'Identifier', start: 174, end: 175, name: 'i' }
Identifier
174
175
i
Node { type: 'Literal', start: 178, end: 179, value: 0, raw: '0' }
Literal
178
179
0
0
var
Node {
  type: 'BinaryExpression',
  start: 181,
  end: 197,
  left: Node { type: 'Identifier', start: 181, end: 182, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'MemberExpression',
     start: 185,
     end: 197,
     object: Node { type: 'Identifier', start: 185, end: 190, name: 'array' },
     property: Node { type: 'Identifier', start: 191, end: 197, name: 'length' },
     computed: false } }
BinaryExpression
181
197
Node { type: 'Identifier', start: 181, end: 182, name: 'i' }
Identifier
181
182
i
<
Node {
  type: 'MemberExpression',
  start: 185,
  end: 197,
  object: Node { type: 'Identifier', start: 185, end: 190, name: 'array' },
  property: Node { type: 'Identifier', start: 191, end: 197, name: 'length' },
  computed: false }
MemberExpression
185
197
Node { type: 'Identifier', start: 185, end: 190, name: 'array' }
Identifier
185
190
array
Node { type: 'Identifier', start: 191, end: 197, name: 'length' }
Identifier
191
197
length
false
Node {
  type: 'UpdateExpression',
  start: 199,
  end: 202,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 201, end: 202, name: 'i' } }
UpdateExpression
199
202
++
true
Node { type: 'Identifier', start: 201, end: 202, name: 'i' }
Identifier
201
202
i
Node {
  type: 'ExpressionStatement',
  start: 208,
  end: 240,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 208,
     end: 239,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 208,
        end: 216,
        object: [Node],
        property: [Node],
        computed: true },
     right: 
      Node {
        type: 'CallExpression',
        start: 219,
        end: 239,
        callee: [Node],
        arguments: [Array] } } }
ExpressionStatement
208
240
Node {
  type: 'AssignmentExpression',
  start: 208,
  end: 239,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 208,
     end: 216,
     object: Node { type: 'Identifier', start: 208, end: 213, name: 'array' },
     property: Node { type: 'Identifier', start: 214, end: 215, name: 'i' },
     computed: true },
  right: 
   Node {
     type: 'CallExpression',
     start: 219,
     end: 239,
     callee: Node { type: 'Identifier', start: 219, end: 229, name: 'makeString' },
     arguments: [ [Node] ] } }
AssignmentExpression
208
239
=
Node {
  type: 'MemberExpression',
  start: 208,
  end: 216,
  object: Node { type: 'Identifier', start: 208, end: 213, name: 'array' },
  property: Node { type: 'Identifier', start: 214, end: 215, name: 'i' },
  computed: true }
MemberExpression
208
216
Node { type: 'Identifier', start: 208, end: 213, name: 'array' }
Identifier
208
213
array
Node { type: 'Identifier', start: 214, end: 215, name: 'i' }
Identifier
214
215
i
true
Node {
  type: 'CallExpression',
  start: 219,
  end: 239,
  callee: Node { type: 'Identifier', start: 219, end: 229, name: 'makeString' },
  arguments: 
   [ Node {
       type: 'MemberExpression',
       start: 230,
       end: 238,
       object: [Node],
       property: [Node],
       computed: true } ] }
CallExpression
219
239
Node { type: 'Identifier', start: 219, end: 229, name: 'makeString' }
Identifier
219
229
makeString
[ Node {
    type: 'MemberExpression',
    start: 230,
    end: 238,
    object: Node { type: 'Identifier', start: 230, end: 235, name: 'array' },
    property: Node { type: 'Identifier', start: 236, end: 237, name: 'i' },
    computed: true } ]
Node {
  type: 'MemberExpression',
  start: 230,
  end: 238,
  object: Node { type: 'Identifier', start: 230, end: 235, name: 'array' },
  property: Node { type: 'Identifier', start: 236, end: 237, name: 'i' },
  computed: true }
MemberExpression
230
238
Node { type: 'Identifier', start: 230, end: 235, name: 'array' }
Identifier
230
235
array
Node { type: 'Identifier', start: 236, end: 237, name: 'i' }
Identifier
236
237
i
true
Node {
  type: 'FunctionDeclaration',
  start: 242,
  end: 385,
  id: Node { type: 'Identifier', start: 251, end: 254, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 255, end: 260, name: 'array' },
     Node { type: 'Identifier', start: 262, end: 263, name: 's' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 265,
     end: 385,
     body: [ [Node], [Node] ] } }
FunctionDeclaration
242
385
Node { type: 'Identifier', start: 251, end: 254, name: 'foo' }
Identifier
251
254
foo
false
false
false
[ Node { type: 'Identifier', start: 255, end: 260, name: 'array' },
  Node { type: 'Identifier', start: 262, end: 263, name: 's' } ]
Node { type: 'Identifier', start: 255, end: 260, name: 'array' }
Identifier
255
260
array
Node { type: 'Identifier', start: 262, end: 263, name: 's' }
Identifier
262
263
s
Node {
  type: 'BlockStatement',
  start: 265,
  end: 385,
  body: 
   [ Node {
       type: 'ForStatement',
       start: 271,
       end: 366,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ReturnStatement',
       start: 371,
       end: 383,
       argument: [Node] } ] }
BlockStatement
265
385
[ Node {
    type: 'ForStatement',
    start: 271,
    end: 366,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 276,
       end: 285,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 287,
       end: 303,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 305,
       end: 308,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 310, end: 366, body: [Array] } },
  Node {
    type: 'ReturnStatement',
    start: 371,
    end: 383,
    argument: Node { type: 'Literal', start: 378, end: 382, value: null, raw: 'null' } } ]
Node {
  type: 'ForStatement',
  start: 271,
  end: 366,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 276,
     end: 285,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 287,
     end: 303,
     left: Node { type: 'Identifier', start: 287, end: 288, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'MemberExpression',
        start: 291,
        end: 303,
        object: [Node],
        property: [Node],
        computed: false } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 305,
     end: 308,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 307, end: 308, name: 'i' } },
  body: Node { type: 'BlockStatement', start: 310, end: 366, body: [ [Node] ] } }
ForStatement
271
366
Node {
  type: 'VariableDeclaration',
  start: 276,
  end: 285,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 280,
       end: 285,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
276
285
[ Node {
    type: 'VariableDeclarator',
    start: 280,
    end: 285,
    id: Node { type: 'Identifier', start: 280, end: 281, name: 'i' },
    init: Node { type: 'Literal', start: 284, end: 285, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 280,
  end: 285,
  id: Node { type: 'Identifier', start: 280, end: 281, name: 'i' },
  init: Node { type: 'Literal', start: 284, end: 285, value: 0, raw: '0' } }
VariableDeclarator
280
285
Node { type: 'Identifier', start: 280, end: 281, name: 'i' }
Identifier
280
281
i
Node { type: 'Literal', start: 284, end: 285, value: 0, raw: '0' }
Literal
284
285
0
0
var
Node {
  type: 'BinaryExpression',
  start: 287,
  end: 303,
  left: Node { type: 'Identifier', start: 287, end: 288, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'MemberExpression',
     start: 291,
     end: 303,
     object: Node { type: 'Identifier', start: 291, end: 296, name: 'array' },
     property: Node { type: 'Identifier', start: 297, end: 303, name: 'length' },
     computed: false } }
BinaryExpression
287
303
Node { type: 'Identifier', start: 287, end: 288, name: 'i' }
Identifier
287
288
i
<
Node {
  type: 'MemberExpression',
  start: 291,
  end: 303,
  object: Node { type: 'Identifier', start: 291, end: 296, name: 'array' },
  property: Node { type: 'Identifier', start: 297, end: 303, name: 'length' },
  computed: false }
MemberExpression
291
303
Node { type: 'Identifier', start: 291, end: 296, name: 'array' }
Identifier
291
296
array
Node { type: 'Identifier', start: 297, end: 303, name: 'length' }
Identifier
297
303
length
false
Node {
  type: 'UpdateExpression',
  start: 305,
  end: 308,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 307, end: 308, name: 'i' } }
UpdateExpression
305
308
++
true
Node { type: 'Identifier', start: 307, end: 308, name: 'i' }
Identifier
307
308
i
Node {
  type: 'BlockStatement',
  start: 310,
  end: 366,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 320,
       end: 360,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
310
366
[ Node {
    type: 'IfStatement',
    start: 320,
    end: 360,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 324,
       end: 337,
       left: [Node],
       operator: '==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ReturnStatement',
       start: 351,
       end: 360,
       argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 320,
  end: 360,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 324,
     end: 337,
     left: 
      Node {
        type: 'MemberExpression',
        start: 324,
        end: 332,
        object: [Node],
        property: [Node],
        computed: true },
     operator: '==',
     right: Node { type: 'Identifier', start: 336, end: 337, name: 's' } },
  consequent: 
   Node {
     type: 'ReturnStatement',
     start: 351,
     end: 360,
     argument: Node { type: 'Identifier', start: 358, end: 359, name: 'i' } },
  alternate: null }
IfStatement
320
360
Node {
  type: 'BinaryExpression',
  start: 324,
  end: 337,
  left: 
   Node {
     type: 'MemberExpression',
     start: 324,
     end: 332,
     object: Node { type: 'Identifier', start: 324, end: 329, name: 'array' },
     property: Node { type: 'Identifier', start: 330, end: 331, name: 'i' },
     computed: true },
  operator: '==',
  right: Node { type: 'Identifier', start: 336, end: 337, name: 's' } }
BinaryExpression
324
337
Node {
  type: 'MemberExpression',
  start: 324,
  end: 332,
  object: Node { type: 'Identifier', start: 324, end: 329, name: 'array' },
  property: Node { type: 'Identifier', start: 330, end: 331, name: 'i' },
  computed: true }
MemberExpression
324
332
Node { type: 'Identifier', start: 324, end: 329, name: 'array' }
Identifier
324
329
array
Node { type: 'Identifier', start: 330, end: 331, name: 'i' }
Identifier
330
331
i
true
==
Node { type: 'Identifier', start: 336, end: 337, name: 's' }
Identifier
336
337
s
Node {
  type: 'ReturnStatement',
  start: 351,
  end: 360,
  argument: Node { type: 'Identifier', start: 358, end: 359, name: 'i' } }
ReturnStatement
351
360
Node { type: 'Identifier', start: 358, end: 359, name: 'i' }
Identifier
358
359
i
null
[+] Exception: ftl-string-equality.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 340,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 0,
       end: 35,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 37,
       end: 184,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 186,
       end: 200,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 202,
       end: 217,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ForStatement',
       start: 218,
       end: 281,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'IfStatement',
       start: 283,
       end: 339,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
340
[ Node {
    type: 'VariableDeclaration',
    start: 0,
    end: 35,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 37,
    end: 184,
    id: Node { type: 'Identifier', start: 46, end: 49, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 60, end: 184, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 186,
    end: 200,
    expression: 
     Node {
       type: 'CallExpression',
       start: 186,
       end: 199,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 202,
    end: 217,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ForStatement',
    start: 218,
    end: 281,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 223,
       end: 232,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 234,
       end: 244,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 246,
       end: 249,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 255,
       end: 281,
       expression: [Node] } },
  Node {
    type: 'IfStatement',
    start: 283,
    end: 339,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 287,
       end: 303,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 309, end: 339, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 0,
  end: 35,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 4,
       end: 34,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
0
35
[ Node {
    type: 'VariableDeclarator',
    start: 4,
    end: 34,
    id: Node { type: 'Identifier', start: 4, end: 9, name: 'array' },
    init: Node { type: 'ArrayExpression', start: 12, end: 34, elements: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 4,
  end: 34,
  id: Node { type: 'Identifier', start: 4, end: 9, name: 'array' },
  init: 
   Node {
     type: 'ArrayExpression',
     start: 12,
     end: 34,
     elements: [ [Node], [Node], [Node], [Node] ] } }
VariableDeclarator
4
34
Node { type: 'Identifier', start: 4, end: 9, name: 'array' }
Identifier
4
9
array
Node {
  type: 'ArrayExpression',
  start: 12,
  end: 34,
  elements: 
   [ Node { type: 'Literal', start: 14, end: 17, value: 'a', raw: '"a"' },
     Node { type: 'Literal', start: 19, end: 22, value: 'b', raw: '"b"' },
     Node { type: 'Literal', start: 24, end: 27, value: 'c', raw: '"c"' },
     Node { type: 'Literal', start: 29, end: 32, value: 'd', raw: '"d"' } ] }
ArrayExpression
12
34
[ Node { type: 'Literal', start: 14, end: 17, value: 'a', raw: '"a"' },
  Node { type: 'Literal', start: 19, end: 22, value: 'b', raw: '"b"' },
  Node { type: 'Literal', start: 24, end: 27, value: 'c', raw: '"c"' },
  Node { type: 'Literal', start: 29, end: 32, value: 'd', raw: '"d"' } ]
Node { type: 'Literal', start: 14, end: 17, value: 'a', raw: '"a"' }
Literal
14
17
a
"a"
Node { type: 'Literal', start: 19, end: 22, value: 'b', raw: '"b"' }
Literal
19
22
b
"b"
Node { type: 'Literal', start: 24, end: 27, value: 'c', raw: '"c"' }
Literal
24
27
c
"c"
Node { type: 'Literal', start: 29, end: 32, value: 'd', raw: '"d"' }
Literal
29
32
d
"d"
var
Node {
  type: 'FunctionDeclaration',
  start: 37,
  end: 184,
  id: Node { type: 'Identifier', start: 46, end: 49, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 50, end: 55, name: 'array' },
     Node { type: 'Identifier', start: 57, end: 58, name: 's' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 60,
     end: 184,
     body: [ [Node], [Node] ] } }
FunctionDeclaration
37
184
Node { type: 'Identifier', start: 46, end: 49, name: 'foo' }
Identifier
46
49
foo
false
false
false
[ Node { type: 'Identifier', start: 50, end: 55, name: 'array' },
  Node { type: 'Identifier', start: 57, end: 58, name: 's' } ]
Node { type: 'Identifier', start: 50, end: 55, name: 'array' }
Identifier
50
55
array
Node { type: 'Identifier', start: 57, end: 58, name: 's' }
Identifier
57
58
s
Node {
  type: 'BlockStatement',
  start: 60,
  end: 184,
  body: 
   [ Node {
       type: 'ForStatement',
       start: 66,
       end: 164,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ReturnStatement',
       start: 169,
       end: 182,
       argument: [Node] } ] }
BlockStatement
60
184
[ Node {
    type: 'ForStatement',
    start: 66,
    end: 164,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 71,
       end: 80,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 82,
       end: 98,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 100,
       end: 103,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 105, end: 164, body: [Array] } },
  Node {
    type: 'ReturnStatement',
    start: 169,
    end: 182,
    argument: 
     Node {
       type: 'Literal',
       start: 176,
       end: 181,
       value: false,
       raw: 'false' } } ]
Node {
  type: 'ForStatement',
  start: 66,
  end: 164,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 71,
     end: 80,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 82,
     end: 98,
     left: Node { type: 'Identifier', start: 82, end: 83, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'MemberExpression',
        start: 86,
        end: 98,
        object: [Node],
        property: [Node],
        computed: false } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 100,
     end: 103,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 102, end: 103, name: 'i' } },
  body: Node { type: 'BlockStatement', start: 105, end: 164, body: [ [Node] ] } }
ForStatement
66
164
Node {
  type: 'VariableDeclaration',
  start: 71,
  end: 80,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 75,
       end: 80,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
71
80
[ Node {
    type: 'VariableDeclarator',
    start: 75,
    end: 80,
    id: Node { type: 'Identifier', start: 75, end: 76, name: 'i' },
    init: Node { type: 'Literal', start: 79, end: 80, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 75,
  end: 80,
  id: Node { type: 'Identifier', start: 75, end: 76, name: 'i' },
  init: Node { type: 'Literal', start: 79, end: 80, value: 0, raw: '0' } }
VariableDeclarator
75
80
Node { type: 'Identifier', start: 75, end: 76, name: 'i' }
Identifier
75
76
i
Node { type: 'Literal', start: 79, end: 80, value: 0, raw: '0' }
Literal
79
80
0
0
var
Node {
  type: 'BinaryExpression',
  start: 82,
  end: 98,
  left: Node { type: 'Identifier', start: 82, end: 83, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'MemberExpression',
     start: 86,
     end: 98,
     object: Node { type: 'Identifier', start: 86, end: 91, name: 'array' },
     property: Node { type: 'Identifier', start: 92, end: 98, name: 'length' },
     computed: false } }
BinaryExpression
82
98
Node { type: 'Identifier', start: 82, end: 83, name: 'i' }
Identifier
82
83
i
<
Node {
  type: 'MemberExpression',
  start: 86,
  end: 98,
  object: Node { type: 'Identifier', start: 86, end: 91, name: 'array' },
  property: Node { type: 'Identifier', start: 92, end: 98, name: 'length' },
  computed: false }
MemberExpression
86
98
Node { type: 'Identifier', start: 86, end: 91, name: 'array' }
Identifier
86
91
array
Node { type: 'Identifier', start: 92, end: 98, name: 'length' }
Identifier
92
98
length
false
Node {
  type: 'UpdateExpression',
  start: 100,
  end: 103,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 102, end: 103, name: 'i' } }
UpdateExpression
100
103
++
true
Node { type: 'Identifier', start: 102, end: 103, name: 'i' }
Identifier
102
103
i
Node {
  type: 'BlockStatement',
  start: 105,
  end: 164,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 115,
       end: 158,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
105
164
[ Node {
    type: 'IfStatement',
    start: 115,
    end: 158,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 119,
       end: 132,
       left: [Node],
       operator: '==',
       right: [Node] },
    consequent: 
     Node {
       type: 'ReturnStatement',
       start: 146,
       end: 158,
       argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 115,
  end: 158,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 119,
     end: 132,
     left: 
      Node {
        type: 'MemberExpression',
        start: 119,
        end: 127,
        object: [Node],
        property: [Node],
        computed: true },
     operator: '==',
     right: Node { type: 'Identifier', start: 131, end: 132, name: 's' } },
  consequent: 
   Node {
     type: 'ReturnStatement',
     start: 146,
     end: 158,
     argument: Node { type: 'Literal', start: 153, end: 157, value: true, raw: 'true' } },
  alternate: null }
IfStatement
115
158
Node {
  type: 'BinaryExpression',
  start: 119,
  end: 132,
  left: 
   Node {
     type: 'MemberExpression',
     start: 119,
     end: 127,
     object: Node { type: 'Identifier', start: 119, end: 124, name: 'array' },
     property: Node { type: 'Identifier', start: 125, end: 126, name: 'i' },
     computed: true },
  operator: '==',
  right: Node { type: 'Identifier', start: 131, end: 132, name: 's' } }
BinaryExpression
119
132
Node {
  type: 'MemberExpression',
  start: 119,
  end: 127,
  object: Node { type: 'Identifier', start: 119, end: 124, name: 'array' },
  property: Node { type: 'Identifier', start: 125, end: 126, name: 'i' },
  computed: true }
MemberExpression
119
127
Node { type: 'Identifier', start: 119, end: 124, name: 'array' }
Identifier
119
124
array
Node { type: 'Identifier', start: 125, end: 126, name: 'i' }
Identifier
125
126
i
true
==
Node { type: 'Identifier', start: 131, end: 132, name: 's' }
Identifier
131
132
s
Node {
  type: 'ReturnStatement',
  start: 146,
  end: 158,
  argument: Node { type: 'Literal', start: 153, end: 157, value: true, raw: 'true' } }
ReturnStatement
146
158
Node { type: 'Literal', start: 153, end: 157, value: true, raw: 'true' }
Literal
153
157
true
true
null
[+] Exception: ftl-string-ident-equality.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 775,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 126,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 128,
       end: 163,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ForStatement',
       start: 165,
       end: 240,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 242,
       end: 386,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 388,
       end: 402,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 404,
       end: 445,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ForStatement',
       start: 447,
       end: 525,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 527,
       end: 773,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
775
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 126,
    id: Node { type: 'Identifier', start: 9, end: 19, name: 'makeString' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 26, end: 126, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 128,
    end: 163,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ForStatement',
    start: 165,
    end: 240,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 170,
       end: 179,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 181,
       end: 197,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 199,
       end: 202,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 208,
       end: 240,
       expression: [Node] } },
  Node {
    type: 'FunctionDeclaration',
    start: 242,
    end: 386,
    id: Node { type: 'Identifier', start: 251, end: 254, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 265, end: 386, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 388,
    end: 402,
    expression: 
     Node {
       type: 'CallExpression',
       start: 388,
       end: 401,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 404,
    end: 445,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ForStatement',
    start: 447,
    end: 525,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 452,
       end: 461,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 463,
       end: 480,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 482,
       end: 485,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 491,
       end: 525,
       expression: [Node] } },
  Node {
    type: 'ForStatement',
    start: 527,
    end: 773,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 532,
       end: 541,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 543,
       end: 553,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 555,
       end: 558,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 560, end: 773, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 126,
  id: Node { type: 'Identifier', start: 9, end: 19, name: 'makeString' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 20, end: 24, name: 'char' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 26,
     end: 126,
     body: [ [Node], [Node], [Node] ] } }
FunctionDeclaration
0
126
Node { type: 'Identifier', start: 9, end: 19, name: 'makeString' }
Identifier
9
19
makeString
false
false
false
[ Node { type: 'Identifier', start: 20, end: 24, name: 'char' } ]
Node { type: 'Identifier', start: 20, end: 24, name: 'char' }
Identifier
20
24
char
Node {
  type: 'BlockStatement',
  start: 26,
  end: 126,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 32,
       end: 48,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ForStatement',
       start: 53,
       end: 105,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ReturnStatement',
       start: 110,
       end: 124,
       argument: [Node] } ] }
BlockStatement
26
126
[ Node {
    type: 'VariableDeclaration',
    start: 32,
    end: 48,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ForStatement',
    start: 53,
    end: 105,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 58,
       end: 67,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 69,
       end: 75,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 77,
       end: 80,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 90,
       end: 105,
       expression: [Node] } },
  Node {
    type: 'ReturnStatement',
    start: 110,
    end: 124,
    argument: Node { type: 'Identifier', start: 117, end: 123, name: 'result' } } ]
Node {
  type: 'VariableDeclaration',
  start: 32,
  end: 48,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 36,
       end: 47,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
32
48
[ Node {
    type: 'VariableDeclarator',
    start: 36,
    end: 47,
    id: Node { type: 'Identifier', start: 36, end: 42, name: 'result' },
    init: Node { type: 'Literal', start: 45, end: 47, value: '', raw: '""' } } ]
Node {
  type: 'VariableDeclarator',
  start: 36,
  end: 47,
  id: Node { type: 'Identifier', start: 36, end: 42, name: 'result' },
  init: Node { type: 'Literal', start: 45, end: 47, value: '', raw: '""' } }
VariableDeclarator
36
47
Node { type: 'Identifier', start: 36, end: 42, name: 'result' }
Identifier
36
42
result
Node { type: 'Literal', start: 45, end: 47, value: '', raw: '""' }
Literal
45
47

""
var
Node {
  type: 'ForStatement',
  start: 53,
  end: 105,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 58,
     end: 67,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 69,
     end: 75,
     left: Node { type: 'Identifier', start: 69, end: 70, name: 'i' },
     operator: '<',
     right: Node { type: 'Literal', start: 73, end: 75, value: 10, raw: '10' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 77,
     end: 80,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 79, end: 80, name: 'i' } },
  body: 
   Node {
     type: 'ExpressionStatement',
     start: 90,
     end: 105,
     expression: 
      Node {
        type: 'AssignmentExpression',
        start: 90,
        end: 104,
        operator: '+=',
        left: [Node],
        right: [Node] } } }
ForStatement
53
105
Node {
  type: 'VariableDeclaration',
  start: 58,
  end: 67,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 62,
       end: 67,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
58
67
[ Node {
    type: 'VariableDeclarator',
    start: 62,
    end: 67,
    id: Node { type: 'Identifier', start: 62, end: 63, name: 'i' },
    init: Node { type: 'Literal', start: 66, end: 67, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 62,
  end: 67,
  id: Node { type: 'Identifier', start: 62, end: 63, name: 'i' },
  init: Node { type: 'Literal', start: 66, end: 67, value: 0, raw: '0' } }
VariableDeclarator
62
67
Node { type: 'Identifier', start: 62, end: 63, name: 'i' }
Identifier
62
63
i
Node { type: 'Literal', start: 66, end: 67, value: 0, raw: '0' }
Literal
66
67
0
0
var
Node {
  type: 'BinaryExpression',
  start: 69,
  end: 75,
  left: Node { type: 'Identifier', start: 69, end: 70, name: 'i' },
  operator: '<',
  right: Node { type: 'Literal', start: 73, end: 75, value: 10, raw: '10' } }
BinaryExpression
69
75
Node { type: 'Identifier', start: 69, end: 70, name: 'i' }
Identifier
69
70
i
<
Node { type: 'Literal', start: 73, end: 75, value: 10, raw: '10' }
Literal
73
75
10
10
Node {
  type: 'UpdateExpression',
  start: 77,
  end: 80,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 79, end: 80, name: 'i' } }
UpdateExpression
77
80
++
true
Node { type: 'Identifier', start: 79, end: 80, name: 'i' }
Identifier
79
80
i
Node {
  type: 'ExpressionStatement',
  start: 90,
  end: 105,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 90,
     end: 104,
     operator: '+=',
     left: Node { type: 'Identifier', start: 90, end: 96, name: 'result' },
     right: Node { type: 'Identifier', start: 100, end: 104, name: 'char' } } }
ExpressionStatement
90
105
Node {
  type: 'AssignmentExpression',
  start: 90,
  end: 104,
  operator: '+=',
  left: Node { type: 'Identifier', start: 90, end: 96, name: 'result' },
  right: Node { type: 'Identifier', start: 100, end: 104, name: 'char' } }
AssignmentExpression
90
104
+=
Node { type: 'Identifier', start: 90, end: 96, name: 'result' }
Identifier
90
96
result
Node { type: 'Identifier', start: 100, end: 104, name: 'char' }
Identifier
100
104
char
Node {
  type: 'ReturnStatement',
  start: 110,
  end: 124,
  argument: Node { type: 'Identifier', start: 117, end: 123, name: 'result' } }
ReturnStatement
110
124
Node { type: 'Identifier', start: 117, end: 123, name: 'result' }
Identifier
117
123
result
Node {
  type: 'VariableDeclaration',
  start: 128,
  end: 163,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 132,
       end: 162,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
128
163
[ Node {
    type: 'VariableDeclarator',
    start: 132,
    end: 162,
    id: Node { type: 'Identifier', start: 132, end: 137, name: 'array' },
    init: 
     Node {
       type: 'ArrayExpression',
       start: 140,
       end: 162,
       elements: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 132,
  end: 162,
  id: Node { type: 'Identifier', start: 132, end: 137, name: 'array' },
  init: 
   Node {
     type: 'ArrayExpression',
     start: 140,
     end: 162,
     elements: [ [Node], [Node], [Node], [Node] ] } }
VariableDeclarator
132
162
Node { type: 'Identifier', start: 132, end: 137, name: 'array' }
Identifier
132
137
array
Node {
  type: 'ArrayExpression',
  start: 140,
  end: 162,
  elements: 
   [ Node { type: 'Literal', start: 142, end: 145, value: 'a', raw: '"a"' },
     Node { type: 'Literal', start: 147, end: 150, value: 'b', raw: '"b"' },
     Node { type: 'Literal', start: 152, end: 155, value: 'c', raw: '"c"' },
     Node { type: 'Literal', start: 157, end: 160, value: 'd', raw: '"d"' } ] }
ArrayExpression
140
162
[ Node { type: 'Literal', start: 142, end: 145, value: 'a', raw: '"a"' },
  Node { type: 'Literal', start: 147, end: 150, value: 'b', raw: '"b"' },
  Node { type: 'Literal', start: 152, end: 155, value: 'c', raw: '"c"' },
  Node { type: 'Literal', start: 157, end: 160, value: 'd', raw: '"d"' } ]
Node { type: 'Literal', start: 142, end: 145, value: 'a', raw: '"a"' }
Literal
142
145
a
"a"
Node { type: 'Literal', start: 147, end: 150, value: 'b', raw: '"b"' }
Literal
147
150
b
"b"
Node { type: 'Literal', start: 152, end: 155, value: 'c', raw: '"c"' }
Literal
152
155
c
"c"
Node { type: 'Literal', start: 157, end: 160, value: 'd', raw: '"d"' }
Literal
157
160
d
"d"
var
Node {
  type: 'ForStatement',
  start: 165,
  end: 240,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 170,
     end: 179,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 181,
     end: 197,
     left: Node { type: 'Identifier', start: 181, end: 182, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'MemberExpression',
        start: 185,
        end: 197,
        object: [Node],
        property: [Node],
        computed: false } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 199,
     end: 202,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 201, end: 202, name: 'i' } },
  body: 
   Node {
     type: 'ExpressionStatement',
     start: 208,
     end: 240,
     expression: 
      Node {
        type: 'AssignmentExpression',
        start: 208,
        end: 239,
        operator: '=',
        left: [Node],
        right: [Node] } } }
ForStatement
165
240
Node {
  type: 'VariableDeclaration',
  start: 170,
  end: 179,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 174,
       end: 179,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
170
179
[ Node {
    type: 'VariableDeclarator',
    start: 174,
    end: 179,
    id: Node { type: 'Identifier', start: 174, end: 175, name: 'i' },
    init: Node { type: 'Literal', start: 178, end: 179, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 174,
  end: 179,
  id: Node { type: 'Identifier', start: 174, end: 175, name: 'i' },
  init: Node { type: 'Literal', start: 178, end: 179, value: 0, raw: '0' } }
VariableDeclarator
174
179
Node { type: 'Identifier', start: 174, end: 175, name: 'i' }
Identifier
174
175
i
Node { type: 'Literal', start: 178, end: 179, value: 0, raw: '0' }
Literal
178
179
0
0
var
Node {
  type: 'BinaryExpression',
  start: 181,
  end: 197,
  left: Node { type: 'Identifier', start: 181, end: 182, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'MemberExpression',
     start: 185,
     end: 197,
     object: Node { type: 'Identifier', start: 185, end: 190, name: 'array' },
     property: Node { type: 'Identifier', start: 191, end: 197, name: 'length' },
     computed: false } }
BinaryExpression
181
197
Node { type: 'Identifier', start: 181, end: 182, name: 'i' }
Identifier
181
182
i
<
Node {
  type: 'MemberExpression',
  start: 185,
  end: 197,
  object: Node { type: 'Identifier', start: 185, end: 190, name: 'array' },
  property: Node { type: 'Identifier', start: 191, end: 197, name: 'length' },
  computed: false }
MemberExpression
185
197
Node { type: 'Identifier', start: 185, end: 190, name: 'array' }
Identifier
185
190
array
Node { type: 'Identifier', start: 191, end: 197, name: 'length' }
Identifier
191
197
length
false
Node {
  type: 'UpdateExpression',
  start: 199,
  end: 202,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 201, end: 202, name: 'i' } }
UpdateExpression
199
202
++
true
Node { type: 'Identifier', start: 201, end: 202, name: 'i' }
Identifier
201
202
i
Node {
  type: 'ExpressionStatement',
  start: 208,
  end: 240,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 208,
     end: 239,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 208,
        end: 216,
        object: [Node],
        property: [Node],
        computed: true },
     right: 
      Node {
        type: 'CallExpression',
        start: 219,
        end: 239,
        callee: [Node],
        arguments: [Array] } } }
ExpressionStatement
208
240
Node {
  type: 'AssignmentExpression',
  start: 208,
  end: 239,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 208,
     end: 216,
     object: Node { type: 'Identifier', start: 208, end: 213, name: 'array' },
     property: Node { type: 'Identifier', start: 214, end: 215, name: 'i' },
     computed: true },
  right: 
   Node {
     type: 'CallExpression',
     start: 219,
     end: 239,
     callee: Node { type: 'Identifier', start: 219, end: 229, name: 'makeString' },
     arguments: [ [Node] ] } }
AssignmentExpression
208
239
=
Node {
  type: 'MemberExpression',
  start: 208,
  end: 216,
  object: Node { type: 'Identifier', start: 208, end: 213, name: 'array' },
  property: Node { type: 'Identifier', start: 214, end: 215, name: 'i' },
  computed: true }
MemberExpression
208
216
Node { type: 'Identifier', start: 208, end: 213, name: 'array' }
Identifier
208
213
array
Node { type: 'Identifier', start: 214, end: 215, name: 'i' }
Identifier
214
215
i
true
Node {
  type: 'CallExpression',
  start: 219,
  end: 239,
  callee: Node { type: 'Identifier', start: 219, end: 229, name: 'makeString' },
  arguments: 
   [ Node {
       type: 'MemberExpression',
       start: 230,
       end: 238,
       object: [Node],
       property: [Node],
       computed: true } ] }
CallExpression
219
239
Node { type: 'Identifier', start: 219, end: 229, name: 'makeString' }
Identifier
219
229
makeString
[ Node {
    type: 'MemberExpression',
    start: 230,
    end: 238,
    object: Node { type: 'Identifier', start: 230, end: 235, name: 'array' },
    property: Node { type: 'Identifier', start: 236, end: 237, name: 'i' },
    computed: true } ]
Node {
  type: 'MemberExpression',
  start: 230,
  end: 238,
  object: Node { type: 'Identifier', start: 230, end: 235, name: 'array' },
  property: Node { type: 'Identifier', start: 236, end: 237, name: 'i' },
  computed: true }
MemberExpression
230
238
Node { type: 'Identifier', start: 230, end: 235, name: 'array' }
Identifier
230
235
array
Node { type: 'Identifier', start: 236, end: 237, name: 'i' }
Identifier
236
237
i
true
Node {
  type: 'FunctionDeclaration',
  start: 242,
  end: 386,
  id: Node { type: 'Identifier', start: 251, end: 254, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 255, end: 260, name: 'array' },
     Node { type: 'Identifier', start: 262, end: 263, name: 's' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 265,
     end: 386,
     body: [ [Node], [Node] ] } }
FunctionDeclaration
242
386
Node { type: 'Identifier', start: 251, end: 254, name: 'foo' }
Identifier
251
254
foo
false
false
false
[ Node { type: 'Identifier', start: 255, end: 260, name: 'array' },
  Node { type: 'Identifier', start: 262, end: 263, name: 's' } ]
Node { type: 'Identifier', start: 255, end: 260, name: 'array' }
Identifier
255
260
array
Node { type: 'Identifier', start: 262, end: 263, name: 's' }
Identifier
262
263
s
Node {
  type: 'BlockStatement',
  start: 265,
  end: 386,
  body: 
   [ Node {
       type: 'ForStatement',
       start: 271,
       end: 367,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ReturnStatement',
       start: 372,
       end: 384,
       argument: [Node] } ] }
BlockStatement
265
386
[ Node {
    type: 'ForStatement',
    start: 271,
    end: 367,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 276,
       end: 285,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 287,
       end: 303,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 305,
       end: 308,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 310, end: 367, body: [Array] } },
  Node {
    type: 'ReturnStatement',
    start: 372,
    end: 384,
    argument: Node { type: 'Literal', start: 379, end: 383, value: null, raw: 'null' } } ]
Node {
  type: 'ForStatement',
  start: 271,
  end: 367,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 276,
     end: 285,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 287,
     end: 303,
     left: Node { type: 'Identifier', start: 287, end: 288, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'MemberExpression',
        start: 291,
        end: 303,
        object: [Node],
        property: [Node],
        computed: false } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 305,
     end: 308,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 307, end: 308, name: 'i' } },
  body: Node { type: 'BlockStatement', start: 310, end: 367, body: [ [Node] ] } }
ForStatement
271
367
Node {
  type: 'VariableDeclaration',
  start: 276,
  end: 285,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 280,
       end: 285,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
276
285
[ Node {
    type: 'VariableDeclarator',
    start: 280,
    end: 285,
    id: Node { type: 'Identifier', start: 280, end: 281, name: 'i' },
    init: Node { type: 'Literal', start: 284, end: 285, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 280,
  end: 285,
  id: Node { type: 'Identifier', start: 280, end: 281, name: 'i' },
  init: Node { type: 'Literal', start: 284, end: 285, value: 0, raw: '0' } }
VariableDeclarator
280
285
Node { type: 'Identifier', start: 280, end: 281, name: 'i' }
Identifier
280
281
i
Node { type: 'Literal', start: 284, end: 285, value: 0, raw: '0' }
Literal
284
285
0
0
var
Node {
  type: 'BinaryExpression',
  start: 287,
  end: 303,
  left: Node { type: 'Identifier', start: 287, end: 288, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'MemberExpression',
     start: 291,
     end: 303,
     object: Node { type: 'Identifier', start: 291, end: 296, name: 'array' },
     property: Node { type: 'Identifier', start: 297, end: 303, name: 'length' },
     computed: false } }
BinaryExpression
287
303
Node { type: 'Identifier', start: 287, end: 288, name: 'i' }
Identifier
287
288
i
<
Node {
  type: 'MemberExpression',
  start: 291,
  end: 303,
  object: Node { type: 'Identifier', start: 291, end: 296, name: 'array' },
  property: Node { type: 'Identifier', start: 297, end: 303, name: 'length' },
  computed: false }
MemberExpression
291
303
Node { type: 'Identifier', start: 291, end: 296, name: 'array' }
Identifier
291
296
array
Node { type: 'Identifier', start: 297, end: 303, name: 'length' }
Identifier
297
303
length
false
Node {
  type: 'UpdateExpression',
  start: 305,
  end: 308,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 307, end: 308, name: 'i' } }
UpdateExpression
305
308
++
true
Node { type: 'Identifier', start: 307, end: 308, name: 'i' }
Identifier
307
308
i
Node {
  type: 'BlockStatement',
  start: 310,
  end: 367,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 320,
       end: 361,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
310
367
[ Node {
    type: 'IfStatement',
    start: 320,
    end: 361,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 324,
       end: 338,
       left: [Node],
       operator: '===',
       right: [Node] },
    consequent: 
     Node {
       type: 'ReturnStatement',
       start: 352,
       end: 361,
       argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 320,
  end: 361,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 324,
     end: 338,
     left: 
      Node {
        type: 'MemberExpression',
        start: 324,
        end: 332,
        object: [Node],
        property: [Node],
        computed: true },
     operator: '===',
     right: Node { type: 'Identifier', start: 337, end: 338, name: 's' } },
  consequent: 
   Node {
     type: 'ReturnStatement',
     start: 352,
     end: 361,
     argument: Node { type: 'Identifier', start: 359, end: 360, name: 'i' } },
  alternate: null }
IfStatement
320
361
Node {
  type: 'BinaryExpression',
  start: 324,
  end: 338,
  left: 
   Node {
     type: 'MemberExpression',
     start: 324,
     end: 332,
     object: Node { type: 'Identifier', start: 324, end: 329, name: 'array' },
     property: Node { type: 'Identifier', start: 330, end: 331, name: 'i' },
     computed: true },
  operator: '===',
  right: Node { type: 'Identifier', start: 337, end: 338, name: 's' } }
BinaryExpression
324
338
Node {
  type: 'MemberExpression',
  start: 324,
  end: 332,
  object: Node { type: 'Identifier', start: 324, end: 329, name: 'array' },
  property: Node { type: 'Identifier', start: 330, end: 331, name: 'i' },
  computed: true }
MemberExpression
324
332
Node { type: 'Identifier', start: 324, end: 329, name: 'array' }
Identifier
324
329
array
Node { type: 'Identifier', start: 330, end: 331, name: 'i' }
Identifier
330
331
i
true
===
Node { type: 'Identifier', start: 337, end: 338, name: 's' }
Identifier
337
338
s
Node {
  type: 'ReturnStatement',
  start: 352,
  end: 361,
  argument: Node { type: 'Identifier', start: 359, end: 360, name: 'i' } }
ReturnStatement
352
361
Node { type: 'Identifier', start: 359, end: 360, name: 'i' }
Identifier
359
360
i
null
[+] Exception: ftl-string-strict-equality.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 409,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 96,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 98,
       end: 112,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 114,
       end: 266,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 268,
       end: 333,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 334,
       end: 408,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
409
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 96,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 96, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 98,
    end: 112,
    expression: 
     Node {
       type: 'CallExpression',
       start: 98,
       end: 111,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 114,
    end: 266,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 119,
       end: 128,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 130,
       end: 140,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 142,
       end: 145,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 147, end: 266, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 268,
    end: 333,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 334,
    end: 408,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 338,
       end: 358,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 364, end: 408, argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 96,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'a' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ],
  body: Node { type: 'BlockStatement', start: 19, end: 96, body: [ [Node] ] } }
FunctionDeclaration
0
96
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'a' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'a' }
Identifier
13
14
a
Node { type: 'Identifier', start: 16, end: 17, name: 'b' }
Identifier
16
17
b
Node {
  type: 'BlockStatement',
  start: 19,
  end: 96,
  body: 
   [ Node {
       type: 'TryStatement',
       start: 25,
       end: 94,
       block: [Node],
       handler: [Node],
       finalizer: null } ] }
BlockStatement
19
96
[ Node {
    type: 'TryStatement',
    start: 25,
    end: 94,
    block: Node { type: 'BlockStatement', start: 29, end: 58, body: [Array] },
    handler: 
     Node {
       type: 'CatchClause',
       start: 59,
       end: 94,
       param: [Node],
       body: [Node] },
    finalizer: null } ]
Node {
  type: 'TryStatement',
  start: 25,
  end: 94,
  block: Node { type: 'BlockStatement', start: 29, end: 58, body: [ [Node] ] },
  handler: 
   Node {
     type: 'CatchClause',
     start: 59,
     end: 94,
     param: Node { type: 'Identifier', start: 66, end: 67, name: 'e' },
     body: Node { type: 'BlockStatement', start: 69, end: 94, body: [Array] } },
  finalizer: null }
TryStatement
25
94
Node {
  type: 'BlockStatement',
  start: 29,
  end: 58,
  body: 
   [ Node { type: 'ReturnStatement', start: 39, end: 52, argument: [Node] } ] }
BlockStatement
29
58
[ Node {
    type: 'ReturnStatement',
    start: 39,
    end: 52,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 46,
       end: 51,
       left: [Node],
       operator: '-',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 39,
  end: 52,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 46,
     end: 51,
     left: Node { type: 'Identifier', start: 46, end: 47, name: 'a' },
     operator: '-',
     right: Node { type: 'Identifier', start: 50, end: 51, name: 'b' } } }
ReturnStatement
39
52
Node {
  type: 'BinaryExpression',
  start: 46,
  end: 51,
  left: Node { type: 'Identifier', start: 46, end: 47, name: 'a' },
  operator: '-',
  right: Node { type: 'Identifier', start: 50, end: 51, name: 'b' } }
BinaryExpression
46
51
Node { type: 'Identifier', start: 46, end: 47, name: 'a' }
Identifier
46
47
a
-
Node { type: 'Identifier', start: 50, end: 51, name: 'b' }
Identifier
50
51
b
Node {
  type: 'CatchClause',
  start: 59,
  end: 94,
  param: Node { type: 'Identifier', start: 66, end: 67, name: 'e' },
  body: Node { type: 'BlockStatement', start: 69, end: 94, body: [ [Node] ] } }
CatchClause
59
94
Node { type: 'Identifier', start: 66, end: 67, name: 'e' }
Identifier
66
67
e
Node {
  type: 'BlockStatement',
  start: 69,
  end: 94,
  body: 
   [ Node { type: 'ReturnStatement', start: 79, end: 88, argument: [Node] } ] }
BlockStatement
69
94
[ Node {
    type: 'ReturnStatement',
    start: 79,
    end: 88,
    argument: Node { type: 'Identifier', start: 86, end: 87, name: 'e' } } ]
Node {
  type: 'ReturnStatement',
  start: 79,
  end: 88,
  argument: Node { type: 'Identifier', start: 86, end: 87, name: 'e' } }
ReturnStatement
79
88
Node { type: 'Identifier', start: 86, end: 87, name: 'e' }
Identifier
86
87
e
null
[+] Exception: ftl-sub-exception.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 555,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 248,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 250,
       end: 264,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 266,
       end: 306,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 308,
       end: 554,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
555
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 248,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 16, end: 248, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 250,
    end: 264,
    expression: 
     Node {
       type: 'CallExpression',
       start: 250,
       end: 263,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 266,
    end: 306,
    id: Node { type: 'Identifier', start: 275, end: 278, name: 'cat' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 285, end: 306, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 308,
    end: 554,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 313,
       end: 322,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 324,
       end: 333,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 335,
       end: 338,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 340, end: 554, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 248,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 13, end: 14, name: 's' } ],
  body: Node { type: 'BlockStatement', start: 16, end: 248, body: [ [Node] ] } }
FunctionDeclaration
0
248
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 's' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 's' }
Identifier
13
14
s
Node {
  type: 'BlockStatement',
  start: 16,
  end: 248,
  body: 
   [ Node {
       type: 'SwitchStatement',
       start: 22,
       end: 246,
       discriminant: [Node],
       cases: [Array] } ] }
BlockStatement
16
248
[ Node {
    type: 'SwitchStatement',
    start: 22,
    end: 246,
    discriminant: Node { type: 'Identifier', start: 30, end: 31, name: 's' },
    cases: 
     [ [Node],
       [Node],
       [Node],
       [Node],
       [Node],
       [Node],
       [Node],
       [Node],
       [Node] ] } ]
Node {
  type: 'SwitchStatement',
  start: 22,
  end: 246,
  discriminant: Node { type: 'Identifier', start: 30, end: 31, name: 's' },
  cases: 
   [ Node {
       type: 'SwitchCase',
       start: 39,
       end: 51,
       consequent: [],
       test: [Node] },
     Node {
       type: 'SwitchCase',
       start: 56,
       end: 66,
       consequent: [],
       test: [Node] },
     Node {
       type: 'SwitchCase',
       start: 71,
       end: 83,
       consequent: [],
       test: [Node] },
     Node {
       type: 'SwitchCase',
       start: 88,
       end: 119,
       consequent: [Array],
       test: [Node] },
     Node {
       type: 'SwitchCase',
       start: 124,
       end: 135,
       consequent: [],
       test: [Node] },
     Node {
       type: 'SwitchCase',
       start: 140,
       end: 150,
       consequent: [],
       test: [Node] },
     Node {
       type: 'SwitchCase',
       start: 155,
       end: 169,
       consequent: [],
       test: [Node] },
     Node {
       type: 'SwitchCase',
       start: 174,
       end: 208,
       consequent: [Array],
       test: [Node] },
     Node {
       type: 'SwitchCase',
       start: 213,
       end: 240,
       consequent: [Array],
       test: null } ] }
SwitchStatement
22
246
Node { type: 'Identifier', start: 30, end: 31, name: 's' }
Identifier
30
31
s
[ Node {
    type: 'SwitchCase',
    start: 39,
    end: 51,
    consequent: [],
    test: 
     Node {
       type: 'Literal',
       start: 44,
       end: 50,
       value: 'ƑẦǏŁ',
       raw: '"ƑẦǏŁ"' } },
  Node {
    type: 'SwitchCase',
    start: 56,
    end: 66,
    consequent: [],
    test: Node { type: 'Literal', start: 61, end: 65, value: 'ÌŅ', raw: '"ÌŅ"' } },
  Node {
    type: 'SwitchCase',
    start: 71,
    end: 83,
    consequent: [],
    test: 
     Node {
       type: 'Literal',
       start: 76,
       end: 82,
       value: 'ṤĻŐⱲ',
       raw: '"ṤĻŐⱲ"' } },
  Node {
    type: 'SwitchCase',
    start: 88,
    end: 119,
    consequent: [ [Node] ],
    test: 
     Node {
       type: 'Literal',
       start: 93,
       end: 99,
       value: 'ṔÄȚĦ',
       raw: '"ṔÄȚĦ"' } },
  Node {
    type: 'SwitchCase',
    start: 124,
    end: 135,
    consequent: [],
    test: 
     Node {
       type: 'Literal',
       start: 129,
       end: 134,
       value: 'due',
       raw: '"due"' } },
  Node {
    type: 'SwitchCase',
    start: 140,
    end: 150,
    consequent: [],
    test: Node { type: 'Literal', start: 145, end: 149, value: 'to', raw: '"to"' } },
  Node {
    type: 'SwitchCase',
    start: 155,
    end: 169,
    consequent: [],
    test: 
     Node {
       type: 'Literal',
       start: 160,
       end: 168,
       value: '16-bit',
       raw: '"16-bit"' } },
  Node {
    type: 'SwitchCase',
    start: 174,
    end: 208,
    consequent: [ [Node] ],
    test: 
     Node {
       type: 'Literal',
       start: 179,
       end: 188,
       value: 'strings',
       raw: '"strings"' } },
  Node {
    type: 'SwitchCase',
    start: 213,
    end: 240,
    consequent: [ [Node] ],
    test: null } ]
Node {
  type: 'SwitchCase',
  start: 39,
  end: 51,
  consequent: [],
  test: 
   Node {
     type: 'Literal',
     start: 44,
     end: 50,
     value: 'ƑẦǏŁ',
     raw: '"ƑẦǏŁ"' } }
SwitchCase
39
51
[]
Node {
  type: 'Literal',
  start: 44,
  end: 50,
  value: 'ƑẦǏŁ',
  raw: '"ƑẦǏŁ"' }
Literal
44
50
ƑẦǏŁ
"ƑẦǏŁ"
Node {
  type: 'SwitchCase',
  start: 56,
  end: 66,
  consequent: [],
  test: Node { type: 'Literal', start: 61, end: 65, value: 'ÌŅ', raw: '"ÌŅ"' } }
SwitchCase
56
66
[]
Node { type: 'Literal', start: 61, end: 65, value: 'ÌŅ', raw: '"ÌŅ"' }
Literal
61
65
ÌŅ
"ÌŅ"
Node {
  type: 'SwitchCase',
  start: 71,
  end: 83,
  consequent: [],
  test: 
   Node {
     type: 'Literal',
     start: 76,
     end: 82,
     value: 'ṤĻŐⱲ',
     raw: '"ṤĻŐⱲ"' } }
SwitchCase
71
83
[]
Node {
  type: 'Literal',
  start: 76,
  end: 82,
  value: 'ṤĻŐⱲ',
  raw: '"ṤĻŐⱲ"' }
Literal
76
82
ṤĻŐⱲ
"ṤĻŐⱲ"
Node {
  type: 'SwitchCase',
  start: 88,
  end: 119,
  consequent: 
   [ Node {
       type: 'ReturnStatement',
       start: 109,
       end: 119,
       argument: [Node] } ],
  test: 
   Node {
     type: 'Literal',
     start: 93,
     end: 99,
     value: 'ṔÄȚĦ',
     raw: '"ṔÄȚĦ"' } }
SwitchCase
88
119
[ Node {
    type: 'ReturnStatement',
    start: 109,
    end: 119,
    argument: Node { type: 'Literal', start: 116, end: 118, value: 42, raw: '42' } } ]
Node {
  type: 'ReturnStatement',
  start: 109,
  end: 119,
  argument: Node { type: 'Literal', start: 116, end: 118, value: 42, raw: '42' } }
ReturnStatement
109
119
Node { type: 'Literal', start: 116, end: 118, value: 42, raw: '42' }
Literal
116
118
42
42
Node {
  type: 'Literal',
  start: 93,
  end: 99,
  value: 'ṔÄȚĦ',
  raw: '"ṔÄȚĦ"' }
Literal
93
99
ṔÄȚĦ
"ṔÄȚĦ"
Node {
  type: 'SwitchCase',
  start: 124,
  end: 135,
  consequent: [],
  test: 
   Node {
     type: 'Literal',
     start: 129,
     end: 134,
     value: 'due',
     raw: '"due"' } }
SwitchCase
124
135
[]
Node {
  type: 'Literal',
  start: 129,
  end: 134,
  value: 'due',
  raw: '"due"' }
Literal
129
134
due
"due"
Node {
  type: 'SwitchCase',
  start: 140,
  end: 150,
  consequent: [],
  test: Node { type: 'Literal', start: 145, end: 149, value: 'to', raw: '"to"' } }
SwitchCase
140
150
[]
Node { type: 'Literal', start: 145, end: 149, value: 'to', raw: '"to"' }
Literal
145
149
to
"to"
Node {
  type: 'SwitchCase',
  start: 155,
  end: 169,
  consequent: [],
  test: 
   Node {
     type: 'Literal',
     start: 160,
     end: 168,
     value: '16-bit',
     raw: '"16-bit"' } }
SwitchCase
155
169
[]
Node {
  type: 'Literal',
  start: 160,
  end: 168,
  value: '16-bit',
  raw: '"16-bit"' }
Literal
160
168
16-bit
"16-bit"
Node {
  type: 'SwitchCase',
  start: 174,
  end: 208,
  consequent: 
   [ Node {
       type: 'ReturnStatement',
       start: 198,
       end: 208,
       argument: [Node] } ],
  test: 
   Node {
     type: 'Literal',
     start: 179,
     end: 188,
     value: 'strings',
     raw: '"strings"' } }
SwitchCase
174
208
[ Node {
    type: 'ReturnStatement',
    start: 198,
    end: 208,
    argument: Node { type: 'Literal', start: 205, end: 207, value: 43, raw: '43' } } ]
Node {
  type: 'ReturnStatement',
  start: 198,
  end: 208,
  argument: Node { type: 'Literal', start: 205, end: 207, value: 43, raw: '43' } }
ReturnStatement
198
208
Node { type: 'Literal', start: 205, end: 207, value: 43, raw: '43' }
Literal
205
207
43
43
Node {
  type: 'Literal',
  start: 179,
  end: 188,
  value: 'strings',
  raw: '"strings"' }
Literal
179
188
strings
"strings"
Node {
  type: 'SwitchCase',
  start: 213,
  end: 240,
  consequent: 
   [ Node {
       type: 'ReturnStatement',
       start: 230,
       end: 240,
       argument: [Node] } ],
  test: null }
SwitchCase
213
240
[ Node {
    type: 'ReturnStatement',
    start: 230,
    end: 240,
    argument: Node { type: 'Literal', start: 237, end: 239, value: 44, raw: '44' } } ]
Node {
  type: 'ReturnStatement',
  start: 230,
  end: 240,
  argument: Node { type: 'Literal', start: 237, end: 239, value: 44, raw: '44' } }
ReturnStatement
230
240
Node { type: 'Literal', start: 237, end: 239, value: 44, raw: '44' }
Literal
237
239
44
44
null
[+] Exception: ftl-switch-string-slow-duplicate-cases.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 796,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 0,
       end: 32,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 34,
       end: 412,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 413,
       end: 421,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 423,
       end: 786,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 787,
       end: 795,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
796
[ Node {
    type: 'VariableDeclaration',
    start: 0,
    end: 32,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 34,
    end: 412,
    id: Node { type: 'Identifier', start: 43, end: 48, name: 'test1' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 51, end: 412, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 413,
    end: 421,
    expression: 
     Node {
       type: 'CallExpression',
       start: 413,
       end: 420,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'FunctionDeclaration',
    start: 423,
    end: 786,
    id: Node { type: 'Identifier', start: 432, end: 437, name: 'test2' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 440, end: 786, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 787,
    end: 795,
    expression: 
     Node {
       type: 'CallExpression',
       start: 787,
       end: 794,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'VariableDeclaration',
  start: 0,
  end: 32,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 4,
       end: 31,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
0
32
[ Node {
    type: 'VariableDeclarator',
    start: 4,
    end: 31,
    id: Node { type: 'Identifier', start: 4, end: 13, name: 'theParent' },
    init: 
     Node {
       type: 'FunctionExpression',
       start: 16,
       end: 31,
       id: null,
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] } } ]
Node {
  type: 'VariableDeclarator',
  start: 4,
  end: 31,
  id: Node { type: 'Identifier', start: 4, end: 13, name: 'theParent' },
  init: 
   Node {
     type: 'FunctionExpression',
     start: 16,
     end: 31,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [],
     body: Node { type: 'BlockStatement', start: 28, end: 31, body: [] } } }
VariableDeclarator
4
31
Node { type: 'Identifier', start: 4, end: 13, name: 'theParent' }
Identifier
4
13
theParent
Node {
  type: 'FunctionExpression',
  start: 16,
  end: 31,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 28, end: 31, body: [] } }
FunctionExpression
16
31
null
[+] Exception: ftl-tail-call-throw-exception-from-slow-path-recover-stack-values.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 328,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 0,
       end: 13,
       expression: [Node],
       directive: 'use strict' },
     Node {
       type: 'FunctionDeclaration',
       start: 15,
       end: 70,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 72,
       end: 86,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 88,
       end: 144,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 146,
       end: 160,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 162,
       end: 326,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
328
[ Node {
    type: 'ExpressionStatement',
    start: 0,
    end: 13,
    expression: 
     Node {
       type: 'Literal',
       start: 0,
       end: 12,
       value: 'use strict',
       raw: '"use strict"' },
    directive: 'use strict' },
  Node {
    type: 'FunctionDeclaration',
    start: 15,
    end: 70,
    id: Node { type: 'Identifier', start: 24, end: 27, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 37, end: 70, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 72,
    end: 86,
    expression: 
     Node {
       type: 'CallExpression',
       start: 72,
       end: 85,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 88,
    end: 144,
    id: Node { type: 'Identifier', start: 97, end: 100, name: 'bar' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 110, end: 144, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 146,
    end: 160,
    expression: 
     Node {
       type: 'CallExpression',
       start: 146,
       end: 159,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 162,
    end: 326,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 167,
       end: 176,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 178,
       end: 187,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 189,
       end: 192,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 194, end: 326, body: [Array] } } ]
Node {
  type: 'ExpressionStatement',
  start: 0,
  end: 13,
  expression: 
   Node {
     type: 'Literal',
     start: 0,
     end: 12,
     value: 'use strict',
     raw: '"use strict"' },
  directive: 'use strict' }
ExpressionStatement
0
13
Node {
  type: 'Literal',
  start: 0,
  end: 12,
  value: 'use strict',
  raw: '"use strict"' }
Literal
0
12
use strict
"use strict"
use strict
Node {
  type: 'FunctionDeclaration',
  start: 15,
  end: 70,
  id: Node { type: 'Identifier', start: 24, end: 27, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 28, end: 29, name: 'a' },
     Node { type: 'Identifier', start: 31, end: 32, name: 'b' },
     Node { type: 'Identifier', start: 34, end: 35, name: 'c' } ],
  body: Node { type: 'BlockStatement', start: 37, end: 70, body: [ [Node] ] } }
FunctionDeclaration
15
70
Node { type: 'Identifier', start: 24, end: 27, name: 'foo' }
Identifier
24
27
foo
false
false
false
[ Node { type: 'Identifier', start: 28, end: 29, name: 'a' },
  Node { type: 'Identifier', start: 31, end: 32, name: 'b' },
  Node { type: 'Identifier', start: 34, end: 35, name: 'c' } ]
Node { type: 'Identifier', start: 28, end: 29, name: 'a' }
Identifier
28
29
a
Node { type: 'Identifier', start: 31, end: 32, name: 'b' }
Identifier
31
32
b
Node { type: 'Identifier', start: 34, end: 35, name: 'c' }
Identifier
34
35
c
Node {
  type: 'BlockStatement',
  start: 37,
  end: 70,
  body: 
   [ Node { type: 'ReturnStatement', start: 43, end: 68, argument: [Node] } ] }
BlockStatement
37
70
[ Node {
    type: 'ReturnStatement',
    start: 43,
    end: 68,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 50,
       end: 67,
       left: [Node],
       operator: '+',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 43,
  end: 68,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 50,
     end: 67,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 50,
        end: 59,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: 
      Node {
        type: 'BinaryExpression',
        start: 62,
        end: 67,
        left: [Node],
        operator: '*',
        right: [Node] } } }
ReturnStatement
43
68
Node {
  type: 'BinaryExpression',
  start: 50,
  end: 67,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 50,
     end: 59,
     left: Node { type: 'Identifier', start: 50, end: 51, name: 'a' },
     operator: '+',
     right: 
      Node {
        type: 'BinaryExpression',
        start: 54,
        end: 59,
        left: [Node],
        operator: '*',
        right: [Node] } },
  operator: '+',
  right: 
   Node {
     type: 'BinaryExpression',
     start: 62,
     end: 67,
     left: Node { type: 'Identifier', start: 62, end: 63, name: 'c' },
     operator: '*',
     right: Node { type: 'Literal', start: 66, end: 67, value: 3, raw: '3' } } }
BinaryExpression
50
67
Node {
  type: 'BinaryExpression',
  start: 50,
  end: 59,
  left: Node { type: 'Identifier', start: 50, end: 51, name: 'a' },
  operator: '+',
  right: 
   Node {
     type: 'BinaryExpression',
     start: 54,
     end: 59,
     left: Node { type: 'Identifier', start: 54, end: 55, name: 'b' },
     operator: '*',
     right: Node { type: 'Literal', start: 58, end: 59, value: 2, raw: '2' } } }
BinaryExpression
50
59
Node { type: 'Identifier', start: 50, end: 51, name: 'a' }
Identifier
50
51
a
+
Node {
  type: 'BinaryExpression',
  start: 54,
  end: 59,
  left: Node { type: 'Identifier', start: 54, end: 55, name: 'b' },
  operator: '*',
  right: Node { type: 'Literal', start: 58, end: 59, value: 2, raw: '2' } }
BinaryExpression
54
59
Node { type: 'Identifier', start: 54, end: 55, name: 'b' }
Identifier
54
55
b
*
Node { type: 'Literal', start: 58, end: 59, value: 2, raw: '2' }
Literal
58
59
2
2
+
Node {
  type: 'BinaryExpression',
  start: 62,
  end: 67,
  left: Node { type: 'Identifier', start: 62, end: 63, name: 'c' },
  operator: '*',
  right: Node { type: 'Literal', start: 66, end: 67, value: 3, raw: '3' } }
BinaryExpression
62
67
Node { type: 'Identifier', start: 62, end: 63, name: 'c' }
Identifier
62
63
c
*
Node { type: 'Literal', start: 66, end: 67, value: 3, raw: '3' }
Literal
66
67
3
3
Node {
  type: 'ExpressionStatement',
  start: 72,
  end: 86,
  expression: 
   Node {
     type: 'CallExpression',
     start: 72,
     end: 85,
     callee: Node { type: 'Identifier', start: 72, end: 80, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
72
86
Node {
  type: 'CallExpression',
  start: 72,
  end: 85,
  callee: Node { type: 'Identifier', start: 72, end: 80, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 81, end: 84, name: 'foo' } ] }
CallExpression
72
85
Node { type: 'Identifier', start: 72, end: 80, name: 'noInline' }
Identifier
72
80
noInline
[ Node { type: 'Identifier', start: 81, end: 84, name: 'foo' } ]
Node { type: 'Identifier', start: 81, end: 84, name: 'foo' }
Identifier
81
84
foo
Node {
  type: 'FunctionDeclaration',
  start: 88,
  end: 144,
  id: Node { type: 'Identifier', start: 97, end: 100, name: 'bar' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 101, end: 102, name: 'a' },
     Node { type: 'Identifier', start: 104, end: 105, name: 'b' },
     Node { type: 'Identifier', start: 107, end: 108, name: 'c' } ],
  body: Node { type: 'BlockStatement', start: 110, end: 144, body: [ [Node] ] } }
FunctionDeclaration
88
144
Node { type: 'Identifier', start: 97, end: 100, name: 'bar' }
Identifier
97
100
bar
false
false
false
[ Node { type: 'Identifier', start: 101, end: 102, name: 'a' },
  Node { type: 'Identifier', start: 104, end: 105, name: 'b' },
  Node { type: 'Identifier', start: 107, end: 108, name: 'c' } ]
Node { type: 'Identifier', start: 101, end: 102, name: 'a' }
Identifier
101
102
a
Node { type: 'Identifier', start: 104, end: 105, name: 'b' }
Identifier
104
105
b
Node { type: 'Identifier', start: 107, end: 108, name: 'c' }
Identifier
107
108
c
Node {
  type: 'BlockStatement',
  start: 110,
  end: 144,
  body: 
   [ Node {
       type: 'ReturnStatement',
       start: 116,
       end: 142,
       argument: [Node] } ] }
BlockStatement
110
144
[ Node {
    type: 'ReturnStatement',
    start: 116,
    end: 142,
    argument: 
     Node {
       type: 'CallExpression',
       start: 123,
       end: 141,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'ReturnStatement',
  start: 116,
  end: 142,
  argument: 
   Node {
     type: 'CallExpression',
     start: 123,
     end: 141,
     callee: Node { type: 'Identifier', start: 123, end: 126, name: 'foo' },
     arguments: [ [Node], [Node], [Node] ] } }
ReturnStatement
116
142
Node {
  type: 'CallExpression',
  start: 123,
  end: 141,
  callee: Node { type: 'Identifier', start: 123, end: 126, name: 'foo' },
  arguments: 
   [ Node {
       type: 'MemberExpression',
       start: 127,
       end: 130,
       object: [Node],
       property: [Node],
       computed: false },
     Node {
       type: 'MemberExpression',
       start: 132,
       end: 135,
       object: [Node],
       property: [Node],
       computed: false },
     Node {
       type: 'MemberExpression',
       start: 137,
       end: 140,
       object: [Node],
       property: [Node],
       computed: false } ] }
CallExpression
123
141
Node { type: 'Identifier', start: 123, end: 126, name: 'foo' }
Identifier
123
126
foo
[ Node {
    type: 'MemberExpression',
    start: 127,
    end: 130,
    object: Node { type: 'Identifier', start: 127, end: 128, name: 'a' },
    property: Node { type: 'Identifier', start: 129, end: 130, name: 'f' },
    computed: false },
  Node {
    type: 'MemberExpression',
    start: 132,
    end: 135,
    object: Node { type: 'Identifier', start: 132, end: 133, name: 'b' },
    property: Node { type: 'Identifier', start: 134, end: 135, name: 'g' },
    computed: false },
  Node {
    type: 'MemberExpression',
    start: 137,
    end: 140,
    object: Node { type: 'Identifier', start: 137, end: 138, name: 'c' },
    property: Node { type: 'Identifier', start: 139, end: 140, name: 'h' },
    computed: false } ]
Node {
  type: 'MemberExpression',
  start: 127,
  end: 130,
  object: Node { type: 'Identifier', start: 127, end: 128, name: 'a' },
  property: Node { type: 'Identifier', start: 129, end: 130, name: 'f' },
  computed: false }
MemberExpression
127
130
Node { type: 'Identifier', start: 127, end: 128, name: 'a' }
Identifier
127
128
a
Node { type: 'Identifier', start: 129, end: 130, name: 'f' }
Identifier
129
130
f
false
Node {
  type: 'MemberExpression',
  start: 132,
  end: 135,
  object: Node { type: 'Identifier', start: 132, end: 133, name: 'b' },
  property: Node { type: 'Identifier', start: 134, end: 135, name: 'g' },
  computed: false }
MemberExpression
132
135
Node { type: 'Identifier', start: 132, end: 133, name: 'b' }
Identifier
132
133
b
Node { type: 'Identifier', start: 134, end: 135, name: 'g' }
Identifier
134
135
g
false
Node {
  type: 'MemberExpression',
  start: 137,
  end: 140,
  object: Node { type: 'Identifier', start: 137, end: 138, name: 'c' },
  property: Node { type: 'Identifier', start: 139, end: 140, name: 'h' },
  computed: false }
MemberExpression
137
140
Node { type: 'Identifier', start: 137, end: 138, name: 'c' }
Identifier
137
138
c
Node { type: 'Identifier', start: 139, end: 140, name: 'h' }
Identifier
139
140
h
false
Node {
  type: 'ExpressionStatement',
  start: 146,
  end: 160,
  expression: 
   Node {
     type: 'CallExpression',
     start: 146,
     end: 159,
     callee: Node { type: 'Identifier', start: 146, end: 154, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
146
160
Node {
  type: 'CallExpression',
  start: 146,
  end: 159,
  callee: Node { type: 'Identifier', start: 146, end: 154, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 155, end: 158, name: 'bar' } ] }
CallExpression
146
159
Node { type: 'Identifier', start: 146, end: 154, name: 'noInline' }
Identifier
146
154
noInline
[ Node { type: 'Identifier', start: 155, end: 158, name: 'bar' } ]
Node { type: 'Identifier', start: 155, end: 158, name: 'bar' }
Identifier
155
158
bar
Node {
  type: 'ForStatement',
  start: 162,
  end: 326,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 167,
     end: 176,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 178,
     end: 187,
     left: Node { type: 'Identifier', start: 178, end: 179, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 182,
        end: 187,
        value: 10000,
        raw: '10000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 189,
     end: 192,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 191, end: 192, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 194,
     end: 326,
     body: [ [Node], [Node] ] } }
ForStatement
162
326
Node {
  type: 'VariableDeclaration',
  start: 167,
  end: 176,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 171,
       end: 176,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
167
176
[ Node {
    type: 'VariableDeclarator',
    start: 171,
    end: 176,
    id: Node { type: 'Identifier', start: 171, end: 172, name: 'i' },
    init: Node { type: 'Literal', start: 175, end: 176, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 171,
  end: 176,
  id: Node { type: 'Identifier', start: 171, end: 172, name: 'i' },
  init: Node { type: 'Literal', start: 175, end: 176, value: 0, raw: '0' } }
VariableDeclarator
171
176
Node { type: 'Identifier', start: 171, end: 172, name: 'i' }
Identifier
171
172
i
Node { type: 'Literal', start: 175, end: 176, value: 0, raw: '0' }
Literal
175
176
0
0
var
Node {
  type: 'BinaryExpression',
  start: 178,
  end: 187,
  left: Node { type: 'Identifier', start: 178, end: 179, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 182,
     end: 187,
     value: 10000,
     raw: '10000' } }
BinaryExpression
178
187
Node { type: 'Identifier', start: 178, end: 179, name: 'i' }
Identifier
178
179
i
<
Node {
  type: 'Literal',
  start: 182,
  end: 187,
  value: 10000,
  raw: '10000' }
Literal
182
187
10000
10000
Node {
  type: 'UpdateExpression',
  start: 189,
  end: 192,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 191, end: 192, name: 'i' } }
UpdateExpression
189
192
++
true
Node { type: 'Identifier', start: 191, end: 192, name: 'i' }
Identifier
191
192
i
Node {
  type: 'BlockStatement',
  start: 194,
  end: 326,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 200,
       end: 241,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 246,
       end: 324,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
194
326
[ Node {
    type: 'VariableDeclaration',
    start: 200,
    end: 241,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 246,
    end: 324,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 250,
       end: 277,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 287, end: 324, argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 200,
  end: 241,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 204,
       end: 240,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
200
241
[ Node {
    type: 'VariableDeclarator',
    start: 204,
    end: 240,
    id: Node { type: 'Identifier', start: 204, end: 210, name: 'result' },
    init: 
     Node {
       type: 'CallExpression',
       start: 213,
       end: 240,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 204,
  end: 240,
  id: Node { type: 'Identifier', start: 204, end: 210, name: 'result' },
  init: 
   Node {
     type: 'CallExpression',
     start: 213,
     end: 240,
     callee: Node { type: 'Identifier', start: 213, end: 216, name: 'bar' },
     arguments: [ [Node], [Node], [Node] ] } }
VariableDeclarator
204
240
Node { type: 'Identifier', start: 204, end: 210, name: 'result' }
Identifier
204
210
result
Node {
  type: 'CallExpression',
  start: 213,
  end: 240,
  callee: Node { type: 'Identifier', start: 213, end: 216, name: 'bar' },
  arguments: 
   [ Node {
       type: 'ObjectExpression',
       start: 217,
       end: 223,
       properties: [Array] },
     Node {
       type: 'ObjectExpression',
       start: 225,
       end: 231,
       properties: [Array] },
     Node {
       type: 'ObjectExpression',
       start: 233,
       end: 239,
       properties: [Array] } ] }
CallExpression
213
240
Node { type: 'Identifier', start: 213, end: 216, name: 'bar' }
Identifier
213
216
bar
[ Node {
    type: 'ObjectExpression',
    start: 217,
    end: 223,
    properties: [ [Node] ] },
  Node {
    type: 'ObjectExpression',
    start: 225,
    end: 231,
    properties: [ [Node] ] },
  Node {
    type: 'ObjectExpression',
    start: 233,
    end: 239,
    properties: [ [Node] ] } ]
Node {
  type: 'ObjectExpression',
  start: 217,
  end: 223,
  properties: 
   [ Node {
       type: 'Property',
       start: 218,
       end: 222,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
217
223
[ Node {
    type: 'Property',
    start: 218,
    end: 222,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 218, end: 219, name: 'f' },
    value: Node { type: 'Literal', start: 221, end: 222, value: 4, raw: '4' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 218,
  end: 222,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 218, end: 219, name: 'f' },
  value: Node { type: 'Literal', start: 221, end: 222, value: 4, raw: '4' },
  kind: 'init' }
Property
218
222
false
false
false
Node { type: 'Identifier', start: 218, end: 219, name: 'f' }
Identifier
218
219
f
Node { type: 'Literal', start: 221, end: 222, value: 4, raw: '4' }
Literal
221
222
4
4
init
Node {
  type: 'ObjectExpression',
  start: 225,
  end: 231,
  properties: 
   [ Node {
       type: 'Property',
       start: 226,
       end: 230,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
225
231
[ Node {
    type: 'Property',
    start: 226,
    end: 230,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 226, end: 227, name: 'g' },
    value: Node { type: 'Literal', start: 229, end: 230, value: 5, raw: '5' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 226,
  end: 230,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 226, end: 227, name: 'g' },
  value: Node { type: 'Literal', start: 229, end: 230, value: 5, raw: '5' },
  kind: 'init' }
Property
226
230
false
false
false
Node { type: 'Identifier', start: 226, end: 227, name: 'g' }
Identifier
226
227
g
Node { type: 'Literal', start: 229, end: 230, value: 5, raw: '5' }
Literal
229
230
5
5
init
Node {
  type: 'ObjectExpression',
  start: 233,
  end: 239,
  properties: 
   [ Node {
       type: 'Property',
       start: 234,
       end: 238,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
233
239
[ Node {
    type: 'Property',
    start: 234,
    end: 238,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 234, end: 235, name: 'h' },
    value: Node { type: 'Literal', start: 237, end: 238, value: 6, raw: '6' },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 234,
  end: 238,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 234, end: 235, name: 'h' },
  value: Node { type: 'Literal', start: 237, end: 238, value: 6, raw: '6' },
  kind: 'init' }
Property
234
238
false
false
false
Node { type: 'Identifier', start: 234, end: 235, name: 'h' }
Identifier
234
235
h
Node { type: 'Literal', start: 237, end: 238, value: 6, raw: '6' }
Literal
237
238
6
6
init
var
Node {
  type: 'IfStatement',
  start: 246,
  end: 324,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 250,
     end: 277,
     left: Node { type: 'Identifier', start: 250, end: 256, name: 'result' },
     operator: '!=',
     right: 
      Node {
        type: 'BinaryExpression',
        start: 260,
        end: 277,
        left: [Node],
        operator: '+',
        right: [Node] } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 287,
     end: 324,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 293,
        end: 323,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
246
324
Node {
  type: 'BinaryExpression',
  start: 250,
  end: 277,
  left: Node { type: 'Identifier', start: 250, end: 256, name: 'result' },
  operator: '!=',
  right: 
   Node {
     type: 'BinaryExpression',
     start: 260,
     end: 277,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 260,
        end: 269,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: 
      Node {
        type: 'BinaryExpression',
        start: 272,
        end: 277,
        left: [Node],
        operator: '*',
        right: [Node] } } }
BinaryExpression
250
277
Node { type: 'Identifier', start: 250, end: 256, name: 'result' }
Identifier
250
256
result
!=
Node {
  type: 'BinaryExpression',
  start: 260,
  end: 277,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 260,
     end: 269,
     left: Node { type: 'Literal', start: 260, end: 261, value: 4, raw: '4' },
     operator: '+',
     right: 
      Node {
        type: 'BinaryExpression',
        start: 264,
        end: 269,
        left: [Node],
        operator: '*',
        right: [Node] } },
  operator: '+',
  right: 
   Node {
     type: 'BinaryExpression',
     start: 272,
     end: 277,
     left: Node { type: 'Literal', start: 272, end: 273, value: 6, raw: '6' },
     operator: '*',
     right: Node { type: 'Literal', start: 276, end: 277, value: 3, raw: '3' } } }
BinaryExpression
260
277
Node {
  type: 'BinaryExpression',
  start: 260,
  end: 269,
  left: Node { type: 'Literal', start: 260, end: 261, value: 4, raw: '4' },
  operator: '+',
  right: 
   Node {
     type: 'BinaryExpression',
     start: 264,
     end: 269,
     left: Node { type: 'Literal', start: 264, end: 265, value: 5, raw: '5' },
     operator: '*',
     right: Node { type: 'Literal', start: 268, end: 269, value: 2, raw: '2' } } }
BinaryExpression
260
269
Node { type: 'Literal', start: 260, end: 261, value: 4, raw: '4' }
Literal
260
261
4
4
+
Node {
  type: 'BinaryExpression',
  start: 264,
  end: 269,
  left: Node { type: 'Literal', start: 264, end: 265, value: 5, raw: '5' },
  operator: '*',
  right: Node { type: 'Literal', start: 268, end: 269, value: 2, raw: '2' } }
BinaryExpression
264
269
Node { type: 'Literal', start: 264, end: 265, value: 5, raw: '5' }
Literal
264
265
5
5
*
Node { type: 'Literal', start: 268, end: 269, value: 2, raw: '2' }
Literal
268
269
2
2
+
Node {
  type: 'BinaryExpression',
  start: 272,
  end: 277,
  left: Node { type: 'Literal', start: 272, end: 273, value: 6, raw: '6' },
  operator: '*',
  right: Node { type: 'Literal', start: 276, end: 277, value: 3, raw: '3' } }
BinaryExpression
272
277
Node { type: 'Literal', start: 272, end: 273, value: 6, raw: '6' }
Literal
272
273
6
6
*
Node { type: 'Literal', start: 276, end: 277, value: 3, raw: '3' }
Literal
276
277
3
3
Node {
  type: 'ThrowStatement',
  start: 287,
  end: 324,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 293,
     end: 323,
     left: 
      Node {
        type: 'Literal',
        start: 293,
        end: 314,
        value: 'Error: bad result: ',
        raw: '"Error: bad result: "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 317, end: 323, name: 'result' } } }
ThrowStatement
287
324
Node {
  type: 'BinaryExpression',
  start: 293,
  end: 323,
  left: 
   Node {
     type: 'Literal',
     start: 293,
     end: 314,
     value: 'Error: bad result: ',
     raw: '"Error: bad result: "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 317, end: 323, name: 'result' } }
BinaryExpression
293
323
Node {
  type: 'Literal',
  start: 293,
  end: 314,
  value: 'Error: bad result: ',
  raw: '"Error: bad result: "' }
Literal
293
314
Error: bad result: 
"Error: bad result: "
+
Node { type: 'Identifier', start: 317, end: 323, name: 'result' }
Identifier
317
323
result
null
[+] Exception: ftl-tail-call.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1140,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 59,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 61,
       end: 509,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 511,
       end: 525,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 526,
       end: 540,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 542,
       end: 1139,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
1140
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 59,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 22, end: 59, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 61,
    end: 509,
    id: Node { type: 'Identifier', start: 70, end: 73, name: 'bar' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 77, end: 509, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 511,
    end: 525,
    expression: 
     Node {
       type: 'CallExpression',
       start: 511,
       end: 524,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 526,
    end: 540,
    expression: 
     Node {
       type: 'CallExpression',
       start: 526,
       end: 539,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 542,
    end: 1139,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 547,
       end: 556,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 558,
       end: 568,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 570,
       end: 573,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 575, end: 1139, body: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 59,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'a' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'b' },
     Node { type: 'Identifier', start: 19, end: 20, name: 'c' } ],
  body: Node { type: 'BlockStatement', start: 22, end: 59, body: [ [Node] ] } }
FunctionDeclaration
0
59
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'a' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'b' },
  Node { type: 'Identifier', start: 19, end: 20, name: 'c' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'a' }
Identifier
13
14
a
Node { type: 'Identifier', start: 16, end: 17, name: 'b' }
Identifier
16
17
b
Node { type: 'Identifier', start: 19, end: 20, name: 'c' }
Identifier
19
20
c
Node {
  type: 'BlockStatement',
  start: 22,
  end: 59,
  body: 
   [ Node { type: 'ReturnStatement', start: 28, end: 57, argument: [Node] } ] }
BlockStatement
22
59
[ Node {
    type: 'ReturnStatement',
    start: 28,
    end: 57,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 35,
       end: 56,
       left: [Node],
       operator: '+',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 28,
  end: 57,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 35,
     end: 56,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 35,
        end: 48,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: 
      Node {
        type: 'BinaryExpression',
        start: 52,
        end: 55,
        left: [Node],
        operator: '|',
        right: [Node] } } }
ReturnStatement
28
57
Node {
  type: 'BinaryExpression',
  start: 35,
  end: 56,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 35,
     end: 48,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 36,
        end: 39,
        left: [Node],
        operator: '|',
        right: [Node] },
     operator: '+',
     right: 
      Node {
        type: 'BinaryExpression',
        start: 44,
        end: 47,
        left: [Node],
        operator: '|',
        right: [Node] } },
  operator: '+',
  right: 
   Node {
     type: 'BinaryExpression',
     start: 52,
     end: 55,
     left: Node { type: 'Identifier', start: 52, end: 53, name: 'c' },
     operator: '|',
     right: Node { type: 'Literal', start: 54, end: 55, value: 0, raw: '0' } } }
BinaryExpression
35
56
Node {
  type: 'BinaryExpression',
  start: 35,
  end: 48,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 36,
     end: 39,
     left: Node { type: 'Identifier', start: 36, end: 37, name: 'a' },
     operator: '|',
     right: Node { type: 'Literal', start: 38, end: 39, value: 0, raw: '0' } },
  operator: '+',
  right: 
   Node {
     type: 'BinaryExpression',
     start: 44,
     end: 47,
     left: Node { type: 'Identifier', start: 44, end: 45, name: 'b' },
     operator: '|',
     right: Node { type: 'Literal', start: 46, end: 47, value: 0, raw: '0' } } }
BinaryExpression
35
48
Node {
  type: 'BinaryExpression',
  start: 36,
  end: 39,
  left: Node { type: 'Identifier', start: 36, end: 37, name: 'a' },
  operator: '|',
  right: Node { type: 'Literal', start: 38, end: 39, value: 0, raw: '0' } }
BinaryExpression
36
39
Node { type: 'Identifier', start: 36, end: 37, name: 'a' }
Identifier
36
37
a
|
Node { type: 'Literal', start: 38, end: 39, value: 0, raw: '0' }
Literal
38
39
0
0
+
Node {
  type: 'BinaryExpression',
  start: 44,
  end: 47,
  left: Node { type: 'Identifier', start: 44, end: 45, name: 'b' },
  operator: '|',
  right: Node { type: 'Literal', start: 46, end: 47, value: 0, raw: '0' } }
BinaryExpression
44
47
Node { type: 'Identifier', start: 44, end: 45, name: 'b' }
Identifier
44
45
b
|
Node { type: 'Literal', start: 46, end: 47, value: 0, raw: '0' }
Literal
46
47
0
0
+
Node {
  type: 'BinaryExpression',
  start: 52,
  end: 55,
  left: Node { type: 'Identifier', start: 52, end: 53, name: 'c' },
  operator: '|',
  right: Node { type: 'Literal', start: 54, end: 55, value: 0, raw: '0' } }
BinaryExpression
52
55
Node { type: 'Identifier', start: 52, end: 53, name: 'c' }
Identifier
52
53
c
|
Node { type: 'Literal', start: 54, end: 55, value: 0, raw: '0' }
Literal
54
55
0
0
Node {
  type: 'FunctionDeclaration',
  start: 61,
  end: 509,
  id: Node { type: 'Identifier', start: 70, end: 73, name: 'bar' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 74, end: 75, name: 'o' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 77,
     end: 509,
     body: [ [Node], [Node], [Node], [Node], [Node], [Node], [Node], [Node] ] } }
FunctionDeclaration
61
509
Node { type: 'Identifier', start: 70, end: 73, name: 'bar' }
Identifier
70
73
bar
false
false
false
[ Node { type: 'Identifier', start: 74, end: 75, name: 'o' } ]
Node { type: 'Identifier', start: 74, end: 75, name: 'o' }
Identifier
74
75
o
Node {
  type: 'BlockStatement',
  start: 77,
  end: 509,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 132,
       end: 144,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 149,
       end: 161,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 166,
       end: 178,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 183,
       end: 195,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 200,
       end: 212,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 217,
       end: 229,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 234,
       end: 246,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ReturnStatement',
       start: 464,
       end: 507,
       argument: [Node] } ] }
BlockStatement
77
509
[ Node {
    type: 'VariableDeclaration',
    start: 132,
    end: 144,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 149,
    end: 161,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 166,
    end: 178,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 183,
    end: 195,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 200,
    end: 212,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 217,
    end: 229,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 234,
    end: 246,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ReturnStatement',
    start: 464,
    end: 507,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 471,
       end: 506,
       left: [Node],
       operator: '+',
       right: [Node] } } ]
Node {
  type: 'VariableDeclaration',
  start: 132,
  end: 144,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 136,
       end: 143,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
132
144
[ Node {
    type: 'VariableDeclarator',
    start: 136,
    end: 143,
    id: Node { type: 'Identifier', start: 136, end: 137, name: 'a' },
    init: 
     Node {
       type: 'MemberExpression',
       start: 140,
       end: 143,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'VariableDeclarator',
  start: 136,
  end: 143,
  id: Node { type: 'Identifier', start: 136, end: 137, name: 'a' },
  init: 
   Node {
     type: 'MemberExpression',
     start: 140,
     end: 143,
     object: Node { type: 'Identifier', start: 140, end: 141, name: 'o' },
     property: Node { type: 'Identifier', start: 142, end: 143, name: 'f' },
     computed: false } }
VariableDeclarator
136
143
Node { type: 'Identifier', start: 136, end: 137, name: 'a' }
Identifier
136
137
a
Node {
  type: 'MemberExpression',
  start: 140,
  end: 143,
  object: Node { type: 'Identifier', start: 140, end: 141, name: 'o' },
  property: Node { type: 'Identifier', start: 142, end: 143, name: 'f' },
  computed: false }
MemberExpression
140
143
Node { type: 'Identifier', start: 140, end: 141, name: 'o' }
Identifier
140
141
o
Node { type: 'Identifier', start: 142, end: 143, name: 'f' }
Identifier
142
143
f
false
var
Node {
  type: 'VariableDeclaration',
  start: 149,
  end: 161,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 153,
       end: 160,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
149
161
[ Node {
    type: 'VariableDeclarator',
    start: 153,
    end: 160,
    id: Node { type: 'Identifier', start: 153, end: 154, name: 'b' },
    init: 
     Node {
       type: 'MemberExpression',
       start: 157,
       end: 160,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'VariableDeclarator',
  start: 153,
  end: 160,
  id: Node { type: 'Identifier', start: 153, end: 154, name: 'b' },
  init: 
   Node {
     type: 'MemberExpression',
     start: 157,
     end: 160,
     object: Node { type: 'Identifier', start: 157, end: 158, name: 'o' },
     property: Node { type: 'Identifier', start: 159, end: 160, name: 'g' },
     computed: false } }
VariableDeclarator
153
160
Node { type: 'Identifier', start: 153, end: 154, name: 'b' }
Identifier
153
154
b
Node {
  type: 'MemberExpression',
  start: 157,
  end: 160,
  object: Node { type: 'Identifier', start: 157, end: 158, name: 'o' },
  property: Node { type: 'Identifier', start: 159, end: 160, name: 'g' },
  computed: false }
MemberExpression
157
160
Node { type: 'Identifier', start: 157, end: 158, name: 'o' }
Identifier
157
158
o
Node { type: 'Identifier', start: 159, end: 160, name: 'g' }
Identifier
159
160
g
false
var
Node {
  type: 'VariableDeclaration',
  start: 166,
  end: 178,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 170,
       end: 177,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
166
178
[ Node {
    type: 'VariableDeclarator',
    start: 170,
    end: 177,
    id: Node { type: 'Identifier', start: 170, end: 171, name: 'c' },
    init: 
     Node {
       type: 'MemberExpression',
       start: 174,
       end: 177,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'VariableDeclarator',
  start: 170,
  end: 177,
  id: Node { type: 'Identifier', start: 170, end: 171, name: 'c' },
  init: 
   Node {
     type: 'MemberExpression',
     start: 174,
     end: 177,
     object: Node { type: 'Identifier', start: 174, end: 175, name: 'o' },
     property: Node { type: 'Identifier', start: 176, end: 177, name: 'h' },
     computed: false } }
VariableDeclarator
170
177
Node { type: 'Identifier', start: 170, end: 171, name: 'c' }
Identifier
170
171
c
Node {
  type: 'MemberExpression',
  start: 174,
  end: 177,
  object: Node { type: 'Identifier', start: 174, end: 175, name: 'o' },
  property: Node { type: 'Identifier', start: 176, end: 177, name: 'h' },
  computed: false }
MemberExpression
174
177
Node { type: 'Identifier', start: 174, end: 175, name: 'o' }
Identifier
174
175
o
Node { type: 'Identifier', start: 176, end: 177, name: 'h' }
Identifier
176
177
h
false
var
Node {
  type: 'VariableDeclaration',
  start: 183,
  end: 195,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 187,
       end: 194,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
183
195
[ Node {
    type: 'VariableDeclarator',
    start: 187,
    end: 194,
    id: Node { type: 'Identifier', start: 187, end: 188, name: 'd' },
    init: 
     Node {
       type: 'MemberExpression',
       start: 191,
       end: 194,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'VariableDeclarator',
  start: 187,
  end: 194,
  id: Node { type: 'Identifier', start: 187, end: 188, name: 'd' },
  init: 
   Node {
     type: 'MemberExpression',
     start: 191,
     end: 194,
     object: Node { type: 'Identifier', start: 191, end: 192, name: 'o' },
     property: Node { type: 'Identifier', start: 193, end: 194, name: 'i' },
     computed: false } }
VariableDeclarator
187
194
Node { type: 'Identifier', start: 187, end: 188, name: 'd' }
Identifier
187
188
d
Node {
  type: 'MemberExpression',
  start: 191,
  end: 194,
  object: Node { type: 'Identifier', start: 191, end: 192, name: 'o' },
  property: Node { type: 'Identifier', start: 193, end: 194, name: 'i' },
  computed: false }
MemberExpression
191
194
Node { type: 'Identifier', start: 191, end: 192, name: 'o' }
Identifier
191
192
o
Node { type: 'Identifier', start: 193, end: 194, name: 'i' }
Identifier
193
194
i
false
var
Node {
  type: 'VariableDeclaration',
  start: 200,
  end: 212,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 204,
       end: 211,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
200
212
[ Node {
    type: 'VariableDeclarator',
    start: 204,
    end: 211,
    id: Node { type: 'Identifier', start: 204, end: 205, name: 'e' },
    init: 
     Node {
       type: 'MemberExpression',
       start: 208,
       end: 211,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'VariableDeclarator',
  start: 204,
  end: 211,
  id: Node { type: 'Identifier', start: 204, end: 205, name: 'e' },
  init: 
   Node {
     type: 'MemberExpression',
     start: 208,
     end: 211,
     object: Node { type: 'Identifier', start: 208, end: 209, name: 'o' },
     property: Node { type: 'Identifier', start: 210, end: 211, name: 'j' },
     computed: false } }
VariableDeclarator
204
211
Node { type: 'Identifier', start: 204, end: 205, name: 'e' }
Identifier
204
205
e
Node {
  type: 'MemberExpression',
  start: 208,
  end: 211,
  object: Node { type: 'Identifier', start: 208, end: 209, name: 'o' },
  property: Node { type: 'Identifier', start: 210, end: 211, name: 'j' },
  computed: false }
MemberExpression
208
211
Node { type: 'Identifier', start: 208, end: 209, name: 'o' }
Identifier
208
209
o
Node { type: 'Identifier', start: 210, end: 211, name: 'j' }
Identifier
210
211
j
false
var
Node {
  type: 'VariableDeclaration',
  start: 217,
  end: 229,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 221,
       end: 228,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
217
229
[ Node {
    type: 'VariableDeclarator',
    start: 221,
    end: 228,
    id: Node { type: 'Identifier', start: 221, end: 222, name: 'f' },
    init: 
     Node {
       type: 'MemberExpression',
       start: 225,
       end: 228,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'VariableDeclarator',
  start: 221,
  end: 228,
  id: Node { type: 'Identifier', start: 221, end: 222, name: 'f' },
  init: 
   Node {
     type: 'MemberExpression',
     start: 225,
     end: 228,
     object: Node { type: 'Identifier', start: 225, end: 226, name: 'o' },
     property: Node { type: 'Identifier', start: 227, end: 228, name: 'k' },
     computed: false } }
VariableDeclarator
221
228
Node { type: 'Identifier', start: 221, end: 222, name: 'f' }
Identifier
221
222
f
Node {
  type: 'MemberExpression',
  start: 225,
  end: 228,
  object: Node { type: 'Identifier', start: 225, end: 226, name: 'o' },
  property: Node { type: 'Identifier', start: 227, end: 228, name: 'k' },
  computed: false }
MemberExpression
225
228
Node { type: 'Identifier', start: 225, end: 226, name: 'o' }
Identifier
225
226
o
Node { type: 'Identifier', start: 227, end: 228, name: 'k' }
Identifier
227
228
k
false
var
Node {
  type: 'VariableDeclaration',
  start: 234,
  end: 246,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 238,
       end: 245,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
234
246
[ Node {
    type: 'VariableDeclarator',
    start: 238,
    end: 245,
    id: Node { type: 'Identifier', start: 238, end: 239, name: 'g' },
    init: 
     Node {
       type: 'MemberExpression',
       start: 242,
       end: 245,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'VariableDeclarator',
  start: 238,
  end: 245,
  id: Node { type: 'Identifier', start: 238, end: 239, name: 'g' },
  init: 
   Node {
     type: 'MemberExpression',
     start: 242,
     end: 245,
     object: Node { type: 'Identifier', start: 242, end: 243, name: 'o' },
     property: Node { type: 'Identifier', start: 244, end: 245, name: 'l' },
     computed: false } }
VariableDeclarator
238
245
Node { type: 'Identifier', start: 238, end: 239, name: 'g' }
Identifier
238
239
g
Node {
  type: 'MemberExpression',
  start: 242,
  end: 245,
  object: Node { type: 'Identifier', start: 242, end: 243, name: 'o' },
  property: Node { type: 'Identifier', start: 244, end: 245, name: 'l' },
  computed: false }
MemberExpression
242
245
Node { type: 'Identifier', start: 242, end: 243, name: 'o' }
Identifier
242
243
o
Node { type: 'Identifier', start: 244, end: 245, name: 'l' }
Identifier
244
245
l
false
var
Node {
  type: 'ReturnStatement',
  start: 464,
  end: 507,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 471,
     end: 506,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 471,
        end: 502,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Identifier', start: 505, end: 506, name: 'g' } } }
ReturnStatement
464
507
Node {
  type: 'BinaryExpression',
  start: 471,
  end: 506,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 471,
     end: 502,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 471,
        end: 498,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Identifier', start: 501, end: 502, name: 'f' } },
  operator: '+',
  right: Node { type: 'Identifier', start: 505, end: 506, name: 'g' } }
BinaryExpression
471
506
Node {
  type: 'BinaryExpression',
  start: 471,
  end: 502,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 471,
     end: 498,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 471,
        end: 494,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Identifier', start: 497, end: 498, name: 'e' } },
  operator: '+',
  right: Node { type: 'Identifier', start: 501, end: 502, name: 'f' } }
BinaryExpression
471
502
Node {
  type: 'BinaryExpression',
  start: 471,
  end: 498,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 471,
     end: 494,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 471,
        end: 490,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Identifier', start: 493, end: 494, name: 'd' } },
  operator: '+',
  right: Node { type: 'Identifier', start: 497, end: 498, name: 'e' } }
BinaryExpression
471
498
Node {
  type: 'BinaryExpression',
  start: 471,
  end: 494,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 471,
     end: 490,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 471,
        end: 486,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Identifier', start: 489, end: 490, name: 'c' } },
  operator: '+',
  right: Node { type: 'Identifier', start: 493, end: 494, name: 'd' } }
BinaryExpression
471
494
Node {
  type: 'BinaryExpression',
  start: 471,
  end: 490,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 471,
     end: 486,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 471,
        end: 482,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Identifier', start: 485, end: 486, name: 'b' } },
  operator: '+',
  right: Node { type: 'Identifier', start: 489, end: 490, name: 'c' } }
BinaryExpression
471
490
Node {
  type: 'BinaryExpression',
  start: 471,
  end: 486,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 471,
     end: 482,
     left: 
      Node {
        type: 'CallExpression',
        start: 471,
        end: 478,
        callee: [Node],
        arguments: [Array] },
     operator: '+',
     right: Node { type: 'Identifier', start: 481, end: 482, name: 'a' } },
  operator: '+',
  right: Node { type: 'Identifier', start: 485, end: 486, name: 'b' } }
BinaryExpression
471
486
Node {
  type: 'BinaryExpression',
  start: 471,
  end: 482,
  left: 
   Node {
     type: 'CallExpression',
     start: 471,
     end: 478,
     callee: Node { type: 'Identifier', start: 471, end: 474, name: 'foo' },
     arguments: [ [Node] ] },
  operator: '+',
  right: Node { type: 'Identifier', start: 481, end: 482, name: 'a' } }
BinaryExpression
471
482
Node {
  type: 'CallExpression',
  start: 471,
  end: 478,
  callee: Node { type: 'Identifier', start: 471, end: 474, name: 'foo' },
  arguments: 
   [ Node { type: 'Literal', start: 475, end: 477, value: 42, raw: '42' } ] }
CallExpression
471
478
Node { type: 'Identifier', start: 471, end: 474, name: 'foo' }
Identifier
471
474
foo
[ Node { type: 'Literal', start: 475, end: 477, value: 42, raw: '42' } ]
Node { type: 'Literal', start: 475, end: 477, value: 42, raw: '42' }
Literal
475
477
42
42
+
Node { type: 'Identifier', start: 481, end: 482, name: 'a' }
Identifier
481
482
a
+
Node { type: 'Identifier', start: 485, end: 486, name: 'b' }
Identifier
485
486
b
+
Node { type: 'Identifier', start: 489, end: 490, name: 'c' }
Identifier
489
490
c
+
Node { type: 'Identifier', start: 493, end: 494, name: 'd' }
Identifier
493
494
d
+
Node { type: 'Identifier', start: 497, end: 498, name: 'e' }
Identifier
497
498
e
+
Node { type: 'Identifier', start: 501, end: 502, name: 'f' }
Identifier
501
502
f
+
Node { type: 'Identifier', start: 505, end: 506, name: 'g' }
Identifier
505
506
g
Node {
  type: 'ExpressionStatement',
  start: 511,
  end: 525,
  expression: 
   Node {
     type: 'CallExpression',
     start: 511,
     end: 524,
     callee: Node { type: 'Identifier', start: 511, end: 519, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
511
525
Node {
  type: 'CallExpression',
  start: 511,
  end: 524,
  callee: Node { type: 'Identifier', start: 511, end: 519, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 520, end: 523, name: 'foo' } ] }
CallExpression
511
524
Node { type: 'Identifier', start: 511, end: 519, name: 'noInline' }
Identifier
511
519
noInline
[ Node { type: 'Identifier', start: 520, end: 523, name: 'foo' } ]
Node { type: 'Identifier', start: 520, end: 523, name: 'foo' }
Identifier
520
523
foo
Node {
  type: 'ExpressionStatement',
  start: 526,
  end: 540,
  expression: 
   Node {
     type: 'CallExpression',
     start: 526,
     end: 539,
     callee: Node { type: 'Identifier', start: 526, end: 534, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
526
540
Node {
  type: 'CallExpression',
  start: 526,
  end: 539,
  callee: Node { type: 'Identifier', start: 526, end: 534, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 535, end: 538, name: 'bar' } ] }
CallExpression
526
539
Node { type: 'Identifier', start: 526, end: 534, name: 'noInline' }
Identifier
526
534
noInline
[ Node { type: 'Identifier', start: 535, end: 538, name: 'bar' } ]
Node { type: 'Identifier', start: 535, end: 538, name: 'bar' }
Identifier
535
538
bar
Node {
  type: 'ForStatement',
  start: 542,
  end: 1139,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 547,
     end: 556,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 558,
     end: 568,
     left: Node { type: 'Identifier', start: 558, end: 559, name: 'i' },
     operator: '<',
     right: 
      Node {
        type: 'Literal',
        start: 562,
        end: 568,
        value: 100000,
        raw: '100000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 570,
     end: 573,
     operator: '++',
     prefix: true,
     argument: Node { type: 'Identifier', start: 572, end: 573, name: 'i' } },
  body: 
   Node {
     type: 'BlockStatement',
     start: 575,
     end: 1139,
     body: [ [Node], [Node], [Node] ] } }
ForStatement
542
1139
Node {
  type: 'VariableDeclaration',
  start: 547,
  end: 556,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 551,
       end: 556,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
547
556
[ Node {
    type: 'VariableDeclarator',
    start: 551,
    end: 556,
    id: Node { type: 'Identifier', start: 551, end: 552, name: 'i' },
    init: Node { type: 'Literal', start: 555, end: 556, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 551,
  end: 556,
  id: Node { type: 'Identifier', start: 551, end: 552, name: 'i' },
  init: Node { type: 'Literal', start: 555, end: 556, value: 0, raw: '0' } }
VariableDeclarator
551
556
Node { type: 'Identifier', start: 551, end: 552, name: 'i' }
Identifier
551
552
i
Node { type: 'Literal', start: 555, end: 556, value: 0, raw: '0' }
Literal
555
556
0
0
var
Node {
  type: 'BinaryExpression',
  start: 558,
  end: 568,
  left: Node { type: 'Identifier', start: 558, end: 559, name: 'i' },
  operator: '<',
  right: 
   Node {
     type: 'Literal',
     start: 562,
     end: 568,
     value: 100000,
     raw: '100000' } }
BinaryExpression
558
568
Node { type: 'Identifier', start: 558, end: 559, name: 'i' }
Identifier
558
559
i
<
Node {
  type: 'Literal',
  start: 562,
  end: 568,
  value: 100000,
  raw: '100000' }
Literal
562
568
100000
100000
Node {
  type: 'UpdateExpression',
  start: 570,
  end: 573,
  operator: '++',
  prefix: true,
  argument: Node { type: 'Identifier', start: 572, end: 573, name: 'i' } }
UpdateExpression
570
573
++
true
Node { type: 'Identifier', start: 572, end: 573, name: 'i' }
Identifier
572
573
i
Node {
  type: 'BlockStatement',
  start: 575,
  end: 1139,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 774,
       end: 896,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 906,
       end: 1012,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 1022,
       end: 1137,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
575
1139
[ Node {
    type: 'VariableDeclaration',
    start: 774,
    end: 896,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 906,
    end: 1012,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 1022,
    end: 1137,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1026,
       end: 1044,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: 
     Node {
       type: 'ThrowStatement',
       start: 1054,
       end: 1137,
       argument: [Node] },
    alternate: null } ]
Node {
  type: 'VariableDeclaration',
  start: 774,
  end: 896,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 778,
       end: 895,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
774
896
[ Node {
    type: 'VariableDeclarator',
    start: 778,
    end: 895,
    id: Node { type: 'Identifier', start: 778, end: 784, name: 'result' },
    init: 
     Node {
       type: 'CallExpression',
       start: 787,
       end: 895,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 778,
  end: 895,
  id: Node { type: 'Identifier', start: 778, end: 784, name: 'result' },
  init: 
   Node {
     type: 'CallExpression',
     start: 787,
     end: 895,
     callee: Node { type: 'Identifier', start: 787, end: 790, name: 'bar' },
     arguments: [ [Node] ] } }
VariableDeclarator
778
895
Node { type: 'Identifier', start: 778, end: 784, name: 'result' }
Identifier
778
784
result
Node {
  type: 'CallExpression',
  start: 787,
  end: 895,
  callee: Node { type: 'Identifier', start: 787, end: 790, name: 'bar' },
  arguments: 
   [ Node {
       type: 'ObjectExpression',
       start: 791,
       end: 894,
       properties: [Array] } ] }
CallExpression
787
895
Node { type: 'Identifier', start: 787, end: 790, name: 'bar' }
Identifier
787
790
bar
[ Node {
    type: 'ObjectExpression',
    start: 791,
    end: 894,
    properties: [ [Node], [Node], [Node], [Node], [Node], [Node], [Node] ] } ]
Node {
  type: 'ObjectExpression',
  start: 791,
  end: 894,
  properties: 
   [ Node {
       type: 'Property',
       start: 801,
       end: 808,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 810,
       end: 817,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 819,
       end: 830,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 832,
       end: 836,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 838,
       end: 856,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 858,
       end: 876,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' },
     Node {
       type: 'Property',
       start: 886,
       end: 893,
       method: false,
       shorthand: false,
       computed: false,
       key: [Node],
       value: [Node],
       kind: 'init' } ] }
ObjectExpression
791
894
[ Node {
    type: 'Property',
    start: 801,
    end: 808,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 801, end: 802, name: 'f' },
    value: 
     Node {
       type: 'BinaryExpression',
       start: 803,
       end: 808,
       left: [Node],
       operator: '*',
       right: [Node] },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 810,
    end: 817,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 810, end: 811, name: 'g' },
    value: 
     Node {
       type: 'BinaryExpression',
       start: 812,
       end: 817,
       left: [Node],
       operator: '-',
       right: [Node] },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 819,
    end: 830,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 819, end: 820, name: 'h' },
    value: 
     Node {
       type: 'BinaryExpression',
       start: 821,
       end: 830,
       left: [Node],
       operator: '|',
       right: [Node] },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 832,
    end: 836,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 832, end: 833, name: 'i' },
    value: 
     Node {
       type: 'UnaryExpression',
       start: 834,
       end: 836,
       operator: '-',
       prefix: true,
       argument: [Node] },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 838,
    end: 856,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 838, end: 839, name: 'j' },
    value: 
     Node {
       type: 'BinaryExpression',
       start: 840,
       end: 856,
       left: [Node],
       operator: '+',
       right: [Node] },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 858,
    end: 876,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 858, end: 859, name: 'k' },
    value: 
     Node {
       type: 'BinaryExpression',
       start: 860,
       end: 876,
       left: [Node],
       operator: '-',
       right: [Node] },
    kind: 'init' },
  Node {
    type: 'Property',
    start: 886,
    end: 893,
    method: false,
    shorthand: false,
    computed: false,
    key: Node { type: 'Identifier', start: 886, end: 887, name: 'l' },
    value: 
     Node {
       type: 'BinaryExpression',
       start: 888,
       end: 893,
       left: [Node],
       operator: '-',
       right: [Node] },
    kind: 'init' } ]
Node {
  type: 'Property',
  start: 801,
  end: 808,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 801, end: 802, name: 'f' },
  value: 
   Node {
     type: 'BinaryExpression',
     start: 803,
     end: 808,
     left: Node { type: 'Identifier', start: 803, end: 804, name: 'i' },
     operator: '*',
     right: Node { type: 'Literal', start: 807, end: 808, value: 3, raw: '3' } },
  kind: 'init' }
Property
801
808
false
false
false
Node { type: 'Identifier', start: 801, end: 802, name: 'f' }
Identifier
801
802
f
Node {
  type: 'BinaryExpression',
  start: 803,
  end: 808,
  left: Node { type: 'Identifier', start: 803, end: 804, name: 'i' },
  operator: '*',
  right: Node { type: 'Literal', start: 807, end: 808, value: 3, raw: '3' } }
BinaryExpression
803
808
Node { type: 'Identifier', start: 803, end: 804, name: 'i' }
Identifier
803
804
i
*
Node { type: 'Literal', start: 807, end: 808, value: 3, raw: '3' }
Literal
807
808
3
3
init
Node {
  type: 'Property',
  start: 810,
  end: 817,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 810, end: 811, name: 'g' },
  value: 
   Node {
     type: 'BinaryExpression',
     start: 812,
     end: 817,
     left: Node { type: 'Identifier', start: 812, end: 813, name: 'i' },
     operator: '-',
     right: Node { type: 'Literal', start: 816, end: 817, value: 1, raw: '1' } },
  kind: 'init' }
Property
810
817
false
false
false
Node { type: 'Identifier', start: 810, end: 811, name: 'g' }
Identifier
810
811
g
Node {
  type: 'BinaryExpression',
  start: 812,
  end: 817,
  left: Node { type: 'Identifier', start: 812, end: 813, name: 'i' },
  operator: '-',
  right: Node { type: 'Literal', start: 816, end: 817, value: 1, raw: '1' } }
BinaryExpression
812
817
Node { type: 'Identifier', start: 812, end: 813, name: 'i' }
Identifier
812
813
i
-
Node { type: 'Literal', start: 816, end: 817, value: 1, raw: '1' }
Literal
816
817
1
1
init
Node {
  type: 'Property',
  start: 819,
  end: 830,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 819, end: 820, name: 'h' },
  value: 
   Node {
     type: 'BinaryExpression',
     start: 821,
     end: 830,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 822,
        end: 827,
        left: [Node],
        operator: '/',
        right: [Node] },
     operator: '|',
     right: Node { type: 'Literal', start: 829, end: 830, value: 0, raw: '0' } },
  kind: 'init' }
Property
819
830
false
false
false
Node { type: 'Identifier', start: 819, end: 820, name: 'h' }
Identifier
819
820
h
Node {
  type: 'BinaryExpression',
  start: 821,
  end: 830,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 822,
     end: 827,
     left: Node { type: 'Identifier', start: 822, end: 823, name: 'i' },
     operator: '/',
     right: Node { type: 'Literal', start: 826, end: 827, value: 2, raw: '2' } },
  operator: '|',
  right: Node { type: 'Literal', start: 829, end: 830, value: 0, raw: '0' } }
BinaryExpression
821
830
Node {
  type: 'BinaryExpression',
  start: 822,
  end: 827,
  left: Node { type: 'Identifier', start: 822, end: 823, name: 'i' },
  operator: '/',
  right: Node { type: 'Literal', start: 826, end: 827, value: 2, raw: '2' } }
BinaryExpression
822
827
Node { type: 'Identifier', start: 822, end: 823, name: 'i' }
Identifier
822
823
i
/
Node { type: 'Literal', start: 826, end: 827, value: 2, raw: '2' }
Literal
826
827
2
2
|
Node { type: 'Literal', start: 829, end: 830, value: 0, raw: '0' }
Literal
829
830
0
0
init
Node {
  type: 'Property',
  start: 832,
  end: 836,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 832, end: 833, name: 'i' },
  value: 
   Node {
     type: 'UnaryExpression',
     start: 834,
     end: 836,
     operator: '-',
     prefix: true,
     argument: Node { type: 'Identifier', start: 835, end: 836, name: 'i' } },
  kind: 'init' }
Property
832
836
false
false
false
Node { type: 'Identifier', start: 832, end: 833, name: 'i' }
Identifier
832
833
i
Node {
  type: 'UnaryExpression',
  start: 834,
  end: 836,
  operator: '-',
  prefix: true,
  argument: Node { type: 'Identifier', start: 835, end: 836, name: 'i' } }
UnaryExpression
834
836
-
true
Node { type: 'Identifier', start: 835, end: 836, name: 'i' }
Identifier
835
836
i
init
Node {
  type: 'Property',
  start: 838,
  end: 856,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 838, end: 839, name: 'j' },
  value: 
   Node {
     type: 'BinaryExpression',
     start: 840,
     end: 856,
     left: Node { type: 'Literal', start: 840, end: 842, value: 13, raw: '13' },
     operator: '+',
     right: 
      Node {
        type: 'BinaryExpression',
        start: 846,
        end: 855,
        left: [Node],
        operator: '|',
        right: [Node] } },
  kind: 'init' }
Property
838
856
false
false
false
Node { type: 'Identifier', start: 838, end: 839, name: 'j' }
Identifier
838
839
j
Node {
  type: 'BinaryExpression',
  start: 840,
  end: 856,
  left: Node { type: 'Literal', start: 840, end: 842, value: 13, raw: '13' },
  operator: '+',
  right: 
   Node {
     type: 'BinaryExpression',
     start: 846,
     end: 855,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 847,
        end: 852,
        left: [Node],
        operator: '/',
        right: [Node] },
     operator: '|',
     right: Node { type: 'Literal', start: 854, end: 855, value: 0, raw: '0' } } }
BinaryExpression
840
856
Node { type: 'Literal', start: 840, end: 842, value: 13, raw: '13' }
Literal
840
842
13
13
+
Node {
  type: 'BinaryExpression',
  start: 846,
  end: 855,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 847,
     end: 852,
     left: Node { type: 'Identifier', start: 847, end: 848, name: 'i' },
     operator: '/',
     right: Node { type: 'Literal', start: 851, end: 852, value: 5, raw: '5' } },
  operator: '|',
  right: Node { type: 'Literal', start: 854, end: 855, value: 0, raw: '0' } }
BinaryExpression
846
855
Node {
  type: 'BinaryExpression',
  start: 847,
  end: 852,
  left: Node { type: 'Identifier', start: 847, end: 848, name: 'i' },
  operator: '/',
  right: Node { type: 'Literal', start: 851, end: 852, value: 5, raw: '5' } }
BinaryExpression
847
852
Node { type: 'Identifier', start: 847, end: 848, name: 'i' }
Identifier
847
848
i
/
Node { type: 'Literal', start: 851, end: 852, value: 5, raw: '5' }
Literal
851
852
5
5
|
Node { type: 'Literal', start: 854, end: 855, value: 0, raw: '0' }
Literal
854
855
0
0
init
Node {
  type: 'Property',
  start: 858,
  end: 876,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 858, end: 859, name: 'k' },
  value: 
   Node {
     type: 'BinaryExpression',
     start: 860,
     end: 876,
     left: Node { type: 'Literal', start: 860, end: 862, value: 14, raw: '14' },
     operator: '-',
     right: 
      Node {
        type: 'BinaryExpression',
        start: 866,
        end: 875,
        left: [Node],
        operator: '|',
        right: [Node] } },
  kind: 'init' }
Property
858
876
false
false
false
Node { type: 'Identifier', start: 858, end: 859, name: 'k' }
Identifier
858
859
k
Node {
  type: 'BinaryExpression',
  start: 860,
  end: 876,
  left: Node { type: 'Literal', start: 860, end: 862, value: 14, raw: '14' },
  operator: '-',
  right: 
   Node {
     type: 'BinaryExpression',
     start: 866,
     end: 875,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 867,
        end: 872,
        left: [Node],
        operator: '/',
        right: [Node] },
     operator: '|',
     right: Node { type: 'Literal', start: 874, end: 875, value: 0, raw: '0' } } }
BinaryExpression
860
876
Node { type: 'Literal', start: 860, end: 862, value: 14, raw: '14' }
Literal
860
862
14
14
-
Node {
  type: 'BinaryExpression',
  start: 866,
  end: 875,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 867,
     end: 872,
     left: Node { type: 'Identifier', start: 867, end: 868, name: 'i' },
     operator: '/',
     right: Node { type: 'Literal', start: 871, end: 872, value: 6, raw: '6' } },
  operator: '|',
  right: Node { type: 'Literal', start: 874, end: 875, value: 0, raw: '0' } }
BinaryExpression
866
875
Node {
  type: 'BinaryExpression',
  start: 867,
  end: 872,
  left: Node { type: 'Identifier', start: 867, end: 868, name: 'i' },
  operator: '/',
  right: Node { type: 'Literal', start: 871, end: 872, value: 6, raw: '6' } }
BinaryExpression
867
872
Node { type: 'Identifier', start: 867, end: 868, name: 'i' }
Identifier
867
868
i
/
Node { type: 'Literal', start: 871, end: 872, value: 6, raw: '6' }
Literal
871
872
6
6
|
Node { type: 'Literal', start: 874, end: 875, value: 0, raw: '0' }
Literal
874
875
0
0
init
Node {
  type: 'Property',
  start: 886,
  end: 893,
  method: false,
  shorthand: false,
  computed: false,
  key: Node { type: 'Identifier', start: 886, end: 887, name: 'l' },
  value: 
   Node {
     type: 'BinaryExpression',
     start: 888,
     end: 893,
     left: Node { type: 'Literal', start: 888, end: 889, value: 1, raw: '1' },
     operator: '-',
     right: Node { type: 'Identifier', start: 892, end: 893, name: 'i' } },
  kind: 'init' }
Property
886
893
false
false
false
Node { type: 'Identifier', start: 886, end: 887, name: 'l' }
Identifier
886
887
l
Node {
  type: 'BinaryExpression',
  start: 888,
  end: 893,
  left: Node { type: 'Literal', start: 888, end: 889, value: 1, raw: '1' },
  operator: '-',
  right: Node { type: 'Identifier', start: 892, end: 893, name: 'i' } }
BinaryExpression
888
893
Node { type: 'Literal', start: 888, end: 889, value: 1, raw: '1' }
Literal
888
889
1
1
-
Node { type: 'Identifier', start: 892, end: 893, name: 'i' }
Identifier
892
893
i
init
var
Node {
  type: 'VariableDeclaration',
  start: 906,
  end: 1012,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 910,
       end: 1011,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
906
1012
[ Node {
    type: 'VariableDeclarator',
    start: 910,
    end: 1011,
    id: Node { type: 'Identifier', start: 910, end: 918, name: 'expected' },
    init: 
     Node {
       type: 'BinaryExpression',
       start: 921,
       end: 1011,
       left: [Node],
       operator: '-',
       right: [Node] } } ]
Node {
  type: 'VariableDeclarator',
  start: 910,
  end: 1011,
  id: Node { type: 'Identifier', start: 910, end: 918, name: 'expected' },
  init: 
   Node {
     type: 'BinaryExpression',
     start: 921,
     end: 1011,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 921,
        end: 1007,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '-',
     right: Node { type: 'Identifier', start: 1010, end: 1011, name: 'i' } } }
VariableDeclarator
910
1011
Node { type: 'Identifier', start: 910, end: 918, name: 'expected' }
Identifier
910
918
expected
Node {
  type: 'BinaryExpression',
  start: 921,
  end: 1011,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 921,
     end: 1007,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 921,
        end: 1003,
        left: [Node],
        operator: '-',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Literal', start: 1006, end: 1007, value: 1, raw: '1' } },
  operator: '-',
  right: Node { type: 'Identifier', start: 1010, end: 1011, name: 'i' } }
BinaryExpression
921
1011
Node {
  type: 'BinaryExpression',
  start: 921,
  end: 1007,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 921,
     end: 1003,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 921,
        end: 981,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '-',
     right: 
      Node {
        type: 'BinaryExpression',
        start: 993,
        end: 1002,
        left: [Node],
        operator: '|',
        right: [Node] } },
  operator: '+',
  right: Node { type: 'Literal', start: 1006, end: 1007, value: 1, raw: '1' } }
BinaryExpression
921
1007
Node {
  type: 'BinaryExpression',
  start: 921,
  end: 1003,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 921,
     end: 981,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 921,
        end: 976,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Literal', start: 979, end: 981, value: 14, raw: '14' } },
  operator: '-',
  right: 
   Node {
     type: 'BinaryExpression',
     start: 993,
     end: 1002,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 994,
        end: 999,
        left: [Node],
        operator: '/',
        right: [Node] },
     operator: '|',
     right: Node { type: 'Literal', start: 1001, end: 1002, value: 0, raw: '0' } } }
BinaryExpression
921
1003
Node {
  type: 'BinaryExpression',
  start: 921,
  end: 981,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 921,
     end: 976,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 921,
        end: 962,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: 
      Node {
        type: 'BinaryExpression',
        start: 966,
        end: 975,
        left: [Node],
        operator: '|',
        right: [Node] } },
  operator: '+',
  right: Node { type: 'Literal', start: 979, end: 981, value: 14, raw: '14' } }
BinaryExpression
921
981
Node {
  type: 'BinaryExpression',
  start: 921,
  end: 976,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 921,
     end: 962,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 921,
        end: 957,
        left: [Node],
        operator: '-',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Literal', start: 960, end: 962, value: 13, raw: '13' } },
  operator: '+',
  right: 
   Node {
     type: 'BinaryExpression',
     start: 966,
     end: 975,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 967,
        end: 972,
        left: [Node],
        operator: '/',
        right: [Node] },
     operator: '|',
     right: Node { type: 'Literal', start: 974, end: 975, value: 0, raw: '0' } } }
BinaryExpression
921
976
Node {
  type: 'BinaryExpression',
  start: 921,
  end: 962,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 921,
     end: 957,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 921,
        end: 953,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '-',
     right: Node { type: 'Identifier', start: 956, end: 957, name: 'i' } },
  operator: '+',
  right: Node { type: 'Literal', start: 960, end: 962, value: 13, raw: '13' } }
BinaryExpression
921
962
Node {
  type: 'BinaryExpression',
  start: 921,
  end: 957,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 921,
     end: 953,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 921,
        end: 939,
        left: [Node],
        operator: '-',
        right: [Node] },
     operator: '+',
     right: 
      Node {
        type: 'BinaryExpression',
        start: 943,
        end: 952,
        left: [Node],
        operator: '|',
        right: [Node] } },
  operator: '-',
  right: Node { type: 'Identifier', start: 956, end: 957, name: 'i' } }
BinaryExpression
921
957
Node {
  type: 'BinaryExpression',
  start: 921,
  end: 953,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 921,
     end: 939,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 921,
        end: 935,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '-',
     right: Node { type: 'Literal', start: 938, end: 939, value: 1, raw: '1' } },
  operator: '+',
  right: 
   Node {
     type: 'BinaryExpression',
     start: 943,
     end: 952,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 944,
        end: 949,
        left: [Node],
        operator: '/',
        right: [Node] },
     operator: '|',
     right: Node { type: 'Literal', start: 951, end: 952, value: 0, raw: '0' } } }
BinaryExpression
921
953
Node {
  type: 'BinaryExpression',
  start: 921,
  end: 939,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 921,
     end: 935,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 921,
        end: 931,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Identifier', start: 934, end: 935, name: 'i' } },
  operator: '-',
  right: Node { type: 'Literal', start: 938, end: 939, value: 1, raw: '1' } }
BinaryExpression
921
939
Node {
  type: 'BinaryExpression',
  start: 921,
  end: 935,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 921,
     end: 931,
     left: Node { type: 'Literal', start: 921, end: 923, value: 42, raw: '42' },
     operator: '+',
     right: 
      Node {
        type: 'BinaryExpression',
        start: 926,
        end: 931,
        left: [Node],
        operator: '*',
        right: [Node] } },
  operator: '+',
  right: Node { type: 'Identifier', start: 934, end: 935, name: 'i' } }
BinaryExpression
921
935
Node {
  type: 'BinaryExpression',
  start: 921,
  end: 931,
  left: Node { type: 'Literal', start: 921, end: 923, value: 42, raw: '42' },
  operator: '+',
  right: 
   Node {
     type: 'BinaryExpression',
     start: 926,
     end: 931,
     left: Node { type: 'Identifier', start: 926, end: 927, name: 'i' },
     operator: '*',
     right: Node { type: 'Literal', start: 930, end: 931, value: 3, raw: '3' } } }
BinaryExpression
921
931
Node { type: 'Literal', start: 921, end: 923, value: 42, raw: '42' }
Literal
921
923
42
42
+
Node {
  type: 'BinaryExpression',
  start: 926,
  end: 931,
  left: Node { type: 'Identifier', start: 926, end: 927, name: 'i' },
  operator: '*',
  right: Node { type: 'Literal', start: 930, end: 931, value: 3, raw: '3' } }
BinaryExpression
926
931
Node { type: 'Identifier', start: 926, end: 927, name: 'i' }
Identifier
926
927
i
*
Node { type: 'Literal', start: 930, end: 931, value: 3, raw: '3' }
Literal
930
931
3
3
+
Node { type: 'Identifier', start: 934, end: 935, name: 'i' }
Identifier
934
935
i
-
Node { type: 'Literal', start: 938, end: 939, value: 1, raw: '1' }
Literal
938
939
1
1
+
Node {
  type: 'BinaryExpression',
  start: 943,
  end: 952,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 944,
     end: 949,
     left: Node { type: 'Identifier', start: 944, end: 945, name: 'i' },
     operator: '/',
     right: Node { type: 'Literal', start: 948, end: 949, value: 2, raw: '2' } },
  operator: '|',
  right: Node { type: 'Literal', start: 951, end: 952, value: 0, raw: '0' } }
BinaryExpression
943
952
Node {
  type: 'BinaryExpression',
  start: 944,
  end: 949,
  left: Node { type: 'Identifier', start: 944, end: 945, name: 'i' },
  operator: '/',
  right: Node { type: 'Literal', start: 948, end: 949, value: 2, raw: '2' } }
BinaryExpression
944
949
Node { type: 'Identifier', start: 944, end: 945, name: 'i' }
Identifier
944
945
i
/
Node { type: 'Literal', start: 948, end: 949, value: 2, raw: '2' }
Literal
948
949
2
2
|
Node { type: 'Literal', start: 951, end: 952, value: 0, raw: '0' }
Literal
951
952
0
0
-
Node { type: 'Identifier', start: 956, end: 957, name: 'i' }
Identifier
956
957
i
+
Node { type: 'Literal', start: 960, end: 962, value: 13, raw: '13' }
Literal
960
962
13
13
+
Node {
  type: 'BinaryExpression',
  start: 966,
  end: 975,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 967,
     end: 972,
     left: Node { type: 'Identifier', start: 967, end: 968, name: 'i' },
     operator: '/',
     right: Node { type: 'Literal', start: 971, end: 972, value: 5, raw: '5' } },
  operator: '|',
  right: Node { type: 'Literal', start: 974, end: 975, value: 0, raw: '0' } }
BinaryExpression
966
975
Node {
  type: 'BinaryExpression',
  start: 967,
  end: 972,
  left: Node { type: 'Identifier', start: 967, end: 968, name: 'i' },
  operator: '/',
  right: Node { type: 'Literal', start: 971, end: 972, value: 5, raw: '5' } }
BinaryExpression
967
972
Node { type: 'Identifier', start: 967, end: 968, name: 'i' }
Identifier
967
968
i
/
Node { type: 'Literal', start: 971, end: 972, value: 5, raw: '5' }
Literal
971
972
5
5
|
Node { type: 'Literal', start: 974, end: 975, value: 0, raw: '0' }
Literal
974
975
0
0
+
Node { type: 'Literal', start: 979, end: 981, value: 14, raw: '14' }
Literal
979
981
14
14
-
Node {
  type: 'BinaryExpression',
  start: 993,
  end: 1002,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 994,
     end: 999,
     left: Node { type: 'Identifier', start: 994, end: 995, name: 'i' },
     operator: '/',
     right: Node { type: 'Literal', start: 998, end: 999, value: 6, raw: '6' } },
  operator: '|',
  right: Node { type: 'Literal', start: 1001, end: 1002, value: 0, raw: '0' } }
BinaryExpression
993
1002
Node {
  type: 'BinaryExpression',
  start: 994,
  end: 999,
  left: Node { type: 'Identifier', start: 994, end: 995, name: 'i' },
  operator: '/',
  right: Node { type: 'Literal', start: 998, end: 999, value: 6, raw: '6' } }
BinaryExpression
994
999
Node { type: 'Identifier', start: 994, end: 995, name: 'i' }
Identifier
994
995
i
/
Node { type: 'Literal', start: 998, end: 999, value: 6, raw: '6' }
Literal
998
999
6
6
|
Node { type: 'Literal', start: 1001, end: 1002, value: 0, raw: '0' }
Literal
1001
1002
0
0
+
Node { type: 'Literal', start: 1006, end: 1007, value: 1, raw: '1' }
Literal
1006
1007
1
1
-
Node { type: 'Identifier', start: 1010, end: 1011, name: 'i' }
Identifier
1010
1011
i
var
Node {
  type: 'IfStatement',
  start: 1022,
  end: 1137,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 1026,
     end: 1044,
     left: Node { type: 'Identifier', start: 1026, end: 1032, name: 'result' },
     operator: '!=',
     right: Node { type: 'Identifier', start: 1036, end: 1044, name: 'expected' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 1054,
     end: 1137,
     argument: 
      Node {
        type: 'BinaryExpression',
        start: 1060,
        end: 1136,
        left: [Node],
        operator: '+',
        right: [Node] } },
  alternate: null }
IfStatement
1022
1137
Node {
  type: 'BinaryExpression',
  start: 1026,
  end: 1044,
  left: Node { type: 'Identifier', start: 1026, end: 1032, name: 'result' },
  operator: '!=',
  right: Node { type: 'Identifier', start: 1036, end: 1044, name: 'expected' } }
BinaryExpression
1026
1044
Node { type: 'Identifier', start: 1026, end: 1032, name: 'result' }
Identifier
1026
1032
result
!=
Node { type: 'Identifier', start: 1036, end: 1044, name: 'expected' }
Identifier
1036
1044
expected
Node {
  type: 'ThrowStatement',
  start: 1054,
  end: 1137,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 1060,
     end: 1136,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 1060,
        end: 1127,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Identifier', start: 1130, end: 1136, name: 'result' } } }
ThrowStatement
1054
1137
Node {
  type: 'BinaryExpression',
  start: 1060,
  end: 1136,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 1060,
     end: 1127,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 1060,
        end: 1113,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: 
      Node {
        type: 'Literal',
        start: 1116,
        end: 1127,
        value: ' but got ',
        raw: '" but got "' } },
  operator: '+',
  right: Node { type: 'Identifier', start: 1130, end: 1136, name: 'result' } }
BinaryExpression
1060
1136
Node {
  type: 'BinaryExpression',
  start: 1060,
  end: 1127,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 1060,
     end: 1113,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 1060,
        end: 1102,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Identifier', start: 1105, end: 1113, name: 'expected' } },
  operator: '+',
  right: 
   Node {
     type: 'Literal',
     start: 1116,
     end: 1127,
     value: ' but got ',
     raw: '" but got "' } }
BinaryExpression
1060
1127
Node {
  type: 'BinaryExpression',
  start: 1060,
  end: 1113,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 1060,
     end: 1102,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 1060,
        end: 1087,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: 
      Node {
        type: 'Literal',
        start: 1090,
        end: 1102,
        value: ' expected ',
        raw: '" expected "' } },
  operator: '+',
  right: Node { type: 'Identifier', start: 1105, end: 1113, name: 'expected' } }
BinaryExpression
1060
1113
Node {
  type: 'BinaryExpression',
  start: 1060,
  end: 1102,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 1060,
     end: 1087,
     left: 
      Node {
        type: 'Literal',
        start: 1060,
        end: 1083,
        value: 'Error: for iteration ',
        raw: '"Error: for iteration "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 1086, end: 1087, name: 'i' } },
  operator: '+',
  right: 
   Node {
     type: 'Literal',
     start: 1090,
     end: 1102,
     value: ' expected ',
     raw: '" expected "' } }
BinaryExpression
1060
1102
Node {
  type: 'BinaryExpression',
  start: 1060,
  end: 1087,
  left: 
   Node {
     type: 'Literal',
     start: 1060,
     end: 1083,
     value: 'Error: for iteration ',
     raw: '"Error: for iteration "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 1086, end: 1087, name: 'i' } }
BinaryExpression
1060
1087
Node {
  type: 'Literal',
  start: 1060,
  end: 1083,
  value: 'Error: for iteration ',
  raw: '"Error: for iteration "' }
Literal
1060
1083
Error: for iteration 
"Error: for iteration "
+
Node { type: 'Identifier', start: 1086, end: 1087, name: 'i' }
Identifier
1086
1087
i
+
Node {
  type: 'Literal',
  start: 1090,
  end: 1102,
  value: ' expected ',
  raw: '" expected "' }
Literal
1090
1102
 expected 
" expected "
+
Node { type: 'Identifier', start: 1105, end: 1113, name: 'expected' }
Identifier
1105
1113
expected
+
Node {
  type: 'Literal',
  start: 1116,
  end: 1127,
  value: ' but got ',
  raw: '" but got "' }
Literal
1116
1127
 but got 
" but got "
+
Node { type: 'Identifier', start: 1130, end: 1136, name: 'result' }
Identifier
1130
1136
result
null
[+] Exception: ftl-to-ftl-arity-fixup.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1122,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 68,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 70,
       end: 87,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'VariableDeclaration',
       start: 88,
       end: 199,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'ExpressionStatement',
       start: 200,
       end: 220,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 222,
       end: 252,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 253,
       end: 267,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 269,
       end: 376,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 377,
       end: 391,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 393,
       end: 406,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'ForStatement',
       start: 407,
       end: 473,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 474,
       end: 486,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 487,
       end: 513,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 516,
       end: 980,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 982,
       end: 996,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 998,
       end: 1011,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 1012,
       end: 1080,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1081,
       end: 1093,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1094,
       end: 1121,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
1122
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 68,
    id: Node { type: 'Identifier', start: 9, end: 15, name: 'assert' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 68, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 70,
    end: 87,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'VariableDeclaration',
    start: 88,
    end: 199,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'ExpressionStatement',
    start: 200,
    end: 220,
    expression: 
     Node {
       type: 'CallExpression',
       start: 200,
       end: 219,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 222,
    end: 252,
    id: Node { type: 'Identifier', start: 231, end: 234, name: 'baz' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 237, end: 252, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 253,
    end: 267,
    expression: 
     Node {
       type: 'CallExpression',
       start: 253,
       end: 266,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 269,
    end: 376,
    id: Node { type: 'Identifier', start: 278, end: 281, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 288, end: 376, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 377,
    end: 391,
    expression: 
     Node {
       type: 'CallExpression',
       start: 377,
       end: 390,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 393,
    end: 406,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'ForStatement',
    start: 407,
    end: 473,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 412,
       end: 421,
       declarations: [Array],
       kind: 'let' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 423,
       end: 432,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 434,
       end: 437,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 439, end: 473, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 474,
    end: 486,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 474,
       end: 485,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 487,
    end: 513,
    expression: 
     Node {
       type: 'CallExpression',
       start: 487,
       end: 512,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 516,
    end: 980,
    id: Node { type: 'Identifier', start: 525, end: 528, name: 'bar' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 535, end: 980, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 982,
    end: 996,
    expression: 
     Node {
       type: 'CallExpression',
       start: 982,
       end: 995,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 998,
    end: 1011,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 998,
       end: 1010,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ForStatement',
    start: 1012,
    end: 1080,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 1017,
       end: 1026,
       declarations: [Array],
       kind: 'let' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1028,
       end: 1037,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 1039,
       end: 1042,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 1044, end: 1080, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1081,
    end: 1093,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 1081,
       end: 1092,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 1094,
    end: 1121,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1094,
       end: 1120,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 68,
  id: Node { type: 'Identifier', start: 9, end: 15, name: 'assert' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ],
  body: Node { type: 'BlockStatement', start: 19, end: 68, body: [ [Node] ] } }
FunctionDeclaration
0
68
Node { type: 'Identifier', start: 9, end: 15, name: 'assert' }
Identifier
9
15
assert
false
false
false
[ Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ]
Node { type: 'Identifier', start: 16, end: 17, name: 'b' }
Identifier
16
17
b
Node {
  type: 'BlockStatement',
  start: 19,
  end: 68,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 25,
       end: 66,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
19
68
[ Node {
    type: 'IfStatement',
    start: 25,
    end: 66,
    test: 
     Node {
       type: 'UnaryExpression',
       start: 29,
       end: 31,
       operator: '!',
       prefix: true,
       argument: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 41, end: 66, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 25,
  end: 66,
  test: 
   Node {
     type: 'UnaryExpression',
     start: 29,
     end: 31,
     operator: '!',
     prefix: true,
     argument: Node { type: 'Identifier', start: 30, end: 31, name: 'b' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 41,
     end: 66,
     argument: 
      Node {
        type: 'NewExpression',
        start: 47,
        end: 65,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
25
66
Node {
  type: 'UnaryExpression',
  start: 29,
  end: 31,
  operator: '!',
  prefix: true,
  argument: Node { type: 'Identifier', start: 30, end: 31, name: 'b' } }
UnaryExpression
29
31
!
true
Node { type: 'Identifier', start: 30, end: 31, name: 'b' }
Identifier
30
31
b
Node {
  type: 'ThrowStatement',
  start: 41,
  end: 66,
  argument: 
   Node {
     type: 'NewExpression',
     start: 47,
     end: 65,
     callee: Node { type: 'Identifier', start: 51, end: 56, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
41
66
Node {
  type: 'NewExpression',
  start: 47,
  end: 65,
  callee: Node { type: 'Identifier', start: 51, end: 56, name: 'Error' },
  arguments: 
   [ Node {
       type: 'Literal',
       start: 57,
       end: 64,
       value: 'uh oh',
       raw: '"uh oh"' } ] }
NewExpression
47
65
Node { type: 'Identifier', start: 51, end: 56, name: 'Error' }
Identifier
51
56
Error
[ Node {
    type: 'Literal',
    start: 57,
    end: 64,
    value: 'uh oh',
    raw: '"uh oh"' } ]
Node {
  type: 'Literal',
  start: 57,
  end: 64,
  value: 'uh oh',
  raw: '"uh oh"' }
Literal
57
64
uh oh
"uh oh"
null
[+] Exception: ftl-try-catch-arith-sub-exception.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 726,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 71,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 72,
       end: 89,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 91,
       end: 190,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'VariableDeclaration',
       start: 192,
       end: 226,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'VariableDeclaration',
       start: 228,
       end: 290,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'FunctionDeclaration',
       start: 292,
       end: 502,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 503,
       end: 517,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 519,
       end: 525,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'VariableDeclaration',
       start: 526,
       end: 543,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'FunctionDeclaration',
       start: 544,
       end: 646,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 647,
       end: 659,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 660,
       end: 704,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 705,
       end: 717,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 718,
       end: 725,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
726
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 71,
    id: Node { type: 'Identifier', start: 9, end: 15, name: 'assert' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 71, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 72,
    end: 89,
    expression: 
     Node {
       type: 'CallExpression',
       start: 72,
       end: 88,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 91,
    end: 190,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'VariableDeclaration',
    start: 192,
    end: 226,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'VariableDeclaration',
    start: 228,
    end: 290,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'FunctionDeclaration',
    start: 292,
    end: 502,
    id: Node { type: 'Identifier', start: 301, end: 304, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 308, end: 502, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 503,
    end: 517,
    expression: 
     Node {
       type: 'CallExpression',
       start: 503,
       end: 516,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 519,
    end: 525,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'VariableDeclaration',
    start: 526,
    end: 543,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'FunctionDeclaration',
    start: 544,
    end: 646,
    id: Node { type: 'Identifier', start: 553, end: 554, name: 'f' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 557, end: 646, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 647,
    end: 659,
    expression: 
     Node {
       type: 'CallExpression',
       start: 647,
       end: 658,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 660,
    end: 704,
    init: 
     Node {
       type: 'AssignmentExpression',
       start: 665,
       end: 670,
       operator: '=',
       left: [Node],
       right: [Node] },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 672,
       end: 682,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 684,
       end: 687,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 689, end: 704, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 705,
    end: 717,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 705,
       end: 716,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 718,
    end: 725,
    expression: 
     Node {
       type: 'CallExpression',
       start: 718,
       end: 724,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 71,
  id: Node { type: 'Identifier', start: 9, end: 15, name: 'assert' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ],
  body: Node { type: 'BlockStatement', start: 19, end: 71, body: [ [Node] ] } }
FunctionDeclaration
0
71
Node { type: 'Identifier', start: 9, end: 15, name: 'assert' }
Identifier
9
15
assert
false
false
false
[ Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ]
Node { type: 'Identifier', start: 16, end: 17, name: 'b' }
Identifier
16
17
b
Node {
  type: 'BlockStatement',
  start: 19,
  end: 71,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 25,
       end: 69,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
19
71
[ Node {
    type: 'IfStatement',
    start: 25,
    end: 69,
    test: 
     Node {
       type: 'UnaryExpression',
       start: 29,
       end: 31,
       operator: '!',
       prefix: true,
       argument: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 41, end: 69, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 25,
  end: 69,
  test: 
   Node {
     type: 'UnaryExpression',
     start: 29,
     end: 31,
     operator: '!',
     prefix: true,
     argument: Node { type: 'Identifier', start: 30, end: 31, name: 'b' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 41,
     end: 69,
     argument: 
      Node {
        type: 'NewExpression',
        start: 47,
        end: 69,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
25
69
Node {
  type: 'UnaryExpression',
  start: 29,
  end: 31,
  operator: '!',
  prefix: true,
  argument: Node { type: 'Identifier', start: 30, end: 31, name: 'b' } }
UnaryExpression
29
31
!
true
Node { type: 'Identifier', start: 30, end: 31, name: 'b' }
Identifier
30
31
b
Node {
  type: 'ThrowStatement',
  start: 41,
  end: 69,
  argument: 
   Node {
     type: 'NewExpression',
     start: 47,
     end: 69,
     callee: Node { type: 'Identifier', start: 51, end: 56, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
41
69
Node {
  type: 'NewExpression',
  start: 47,
  end: 69,
  callee: Node { type: 'Identifier', start: 51, end: 56, name: 'Error' },
  arguments: 
   [ Node {
       type: 'Literal',
       start: 57,
       end: 68,
       value: 'bad value',
       raw: '"bad value"' } ] }
NewExpression
47
69
Node { type: 'Identifier', start: 51, end: 56, name: 'Error' }
Identifier
51
56
Error
[ Node {
    type: 'Literal',
    start: 57,
    end: 68,
    value: 'bad value',
    raw: '"bad value"' } ]
Node {
  type: 'Literal',
  start: 57,
  end: 68,
  value: 'bad value',
  raw: '"bad value"' }
Literal
57
68
bad value
"bad value"
null
[+] Exception: ftl-try-catch-getter-ic-fail-to-call-operation-throw-error.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 903,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 71,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 72,
       end: 89,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 91,
       end: 132,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 133,
       end: 150,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 152,
       end: 191,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 192,
       end: 211,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 213,
       end: 263,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'VariableDeclaration',
       start: 265,
       end: 346,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'VariableDeclaration',
       start: 348,
       end: 360,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'VariableDeclaration',
       start: 362,
       end: 428,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'FunctionDeclaration',
       start: 430,
       end: 685,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 687,
       end: 701,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 702,
       end: 892,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 894,
       end: 902,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
903
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 71,
    id: Node { type: 'Identifier', start: 9, end: 15, name: 'assert' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 71, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 72,
    end: 89,
    expression: 
     Node {
       type: 'CallExpression',
       start: 72,
       end: 88,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 91,
    end: 132,
    id: Node { type: 'Identifier', start: 100, end: 106, name: 'random' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 109, end: 132, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 133,
    end: 150,
    expression: 
     Node {
       type: 'CallExpression',
       start: 133,
       end: 149,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 152,
    end: 191,
    id: Node { type: 'Identifier', start: 161, end: 169, name: 'identity' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 173, end: 191, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 192,
    end: 211,
    expression: 
     Node {
       type: 'CallExpression',
       start: 192,
       end: 210,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 213,
    end: 263,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'VariableDeclaration',
    start: 265,
    end: 346,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'VariableDeclaration',
    start: 348,
    end: 360,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'VariableDeclaration',
    start: 362,
    end: 428,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'FunctionDeclaration',
    start: 430,
    end: 685,
    id: Node { type: 'Identifier', start: 439, end: 442, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 449, end: 685, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 687,
    end: 701,
    expression: 
     Node {
       type: 'CallExpression',
       start: 687,
       end: 700,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 702,
    end: 892,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 707,
       end: 716,
       declarations: [Array],
       kind: 'let' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 718,
       end: 728,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 730,
       end: 733,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 735, end: 892, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 894,
    end: 902,
    expression: 
     Node {
       type: 'CallExpression',
       start: 894,
       end: 901,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 71,
  id: Node { type: 'Identifier', start: 9, end: 15, name: 'assert' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ],
  body: Node { type: 'BlockStatement', start: 19, end: 71, body: [ [Node] ] } }
FunctionDeclaration
0
71
Node { type: 'Identifier', start: 9, end: 15, name: 'assert' }
Identifier
9
15
assert
false
false
false
[ Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ]
Node { type: 'Identifier', start: 16, end: 17, name: 'b' }
Identifier
16
17
b
Node {
  type: 'BlockStatement',
  start: 19,
  end: 71,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 25,
       end: 69,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
19
71
[ Node {
    type: 'IfStatement',
    start: 25,
    end: 69,
    test: 
     Node {
       type: 'UnaryExpression',
       start: 29,
       end: 31,
       operator: '!',
       prefix: true,
       argument: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 41, end: 69, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 25,
  end: 69,
  test: 
   Node {
     type: 'UnaryExpression',
     start: 29,
     end: 31,
     operator: '!',
     prefix: true,
     argument: Node { type: 'Identifier', start: 30, end: 31, name: 'b' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 41,
     end: 69,
     argument: 
      Node {
        type: 'NewExpression',
        start: 47,
        end: 69,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
25
69
Node {
  type: 'UnaryExpression',
  start: 29,
  end: 31,
  operator: '!',
  prefix: true,
  argument: Node { type: 'Identifier', start: 30, end: 31, name: 'b' } }
UnaryExpression
29
31
!
true
Node { type: 'Identifier', start: 30, end: 31, name: 'b' }
Identifier
30
31
b
Node {
  type: 'ThrowStatement',
  start: 41,
  end: 69,
  argument: 
   Node {
     type: 'NewExpression',
     start: 47,
     end: 69,
     callee: Node { type: 'Identifier', start: 51, end: 56, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
41
69
Node {
  type: 'NewExpression',
  start: 47,
  end: 69,
  callee: Node { type: 'Identifier', start: 51, end: 56, name: 'Error' },
  arguments: 
   [ Node {
       type: 'Literal',
       start: 57,
       end: 68,
       value: 'bad value',
       raw: '"bad value"' } ] }
NewExpression
47
69
Node { type: 'Identifier', start: 51, end: 56, name: 'Error' }
Identifier
51
56
Error
[ Node {
    type: 'Literal',
    start: 57,
    end: 68,
    value: 'bad value',
    raw: '"bad value"' } ]
Node {
  type: 'Literal',
  start: 57,
  end: 68,
  value: 'bad value',
  raw: '"bad value"' }
Literal
57
68
bad value
"bad value"
null
[+] Exception: ftl-try-catch-getter-throw-interesting-value-recovery.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 869,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 71,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 72,
       end: 89,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 91,
       end: 132,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 133,
       end: 150,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 152,
       end: 354,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 356,
       end: 370,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 371,
       end: 388,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 389,
       end: 484,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 485,
       end: 497,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 498,
       end: 548,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'VariableDeclaration',
       start: 550,
       end: 688,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'ForStatement',
       start: 690,
       end: 828,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 829,
       end: 841,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 842,
       end: 868,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
869
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 71,
    id: Node { type: 'Identifier', start: 9, end: 15, name: 'assert' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 71, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 72,
    end: 89,
    expression: 
     Node {
       type: 'CallExpression',
       start: 72,
       end: 88,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 91,
    end: 132,
    id: Node { type: 'Identifier', start: 100, end: 106, name: 'random' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 109, end: 132, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 133,
    end: 150,
    expression: 
     Node {
       type: 'CallExpression',
       start: 133,
       end: 149,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 152,
    end: 354,
    id: Node { type: 'Identifier', start: 161, end: 164, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 171, end: 354, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 356,
    end: 370,
    expression: 
     Node {
       type: 'CallExpression',
       start: 356,
       end: 369,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 371,
    end: 388,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 389,
    end: 484,
    id: Node { type: 'Identifier', start: 398, end: 399, name: 'f' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 418, end: 484, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 485,
    end: 497,
    expression: 
     Node {
       type: 'CallExpression',
       start: 485,
       end: 496,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 498,
    end: 548,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'VariableDeclaration',
    start: 550,
    end: 688,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'ForStatement',
    start: 690,
    end: 828,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 695,
       end: 704,
       declarations: [Array],
       kind: 'let' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 706,
       end: 716,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 718,
       end: 721,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 723, end: 828, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 829,
    end: 841,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 829,
       end: 840,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 842,
    end: 868,
    expression: 
     Node {
       type: 'CallExpression',
       start: 842,
       end: 867,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 71,
  id: Node { type: 'Identifier', start: 9, end: 15, name: 'assert' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ],
  body: Node { type: 'BlockStatement', start: 19, end: 71, body: [ [Node] ] } }
FunctionDeclaration
0
71
Node { type: 'Identifier', start: 9, end: 15, name: 'assert' }
Identifier
9
15
assert
false
false
false
[ Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ]
Node { type: 'Identifier', start: 16, end: 17, name: 'b' }
Identifier
16
17
b
Node {
  type: 'BlockStatement',
  start: 19,
  end: 71,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 25,
       end: 69,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
19
71
[ Node {
    type: 'IfStatement',
    start: 25,
    end: 69,
    test: 
     Node {
       type: 'UnaryExpression',
       start: 29,
       end: 31,
       operator: '!',
       prefix: true,
       argument: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 41, end: 69, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 25,
  end: 69,
  test: 
   Node {
     type: 'UnaryExpression',
     start: 29,
     end: 31,
     operator: '!',
     prefix: true,
     argument: Node { type: 'Identifier', start: 30, end: 31, name: 'b' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 41,
     end: 69,
     argument: 
      Node {
        type: 'NewExpression',
        start: 47,
        end: 69,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
25
69
Node {
  type: 'UnaryExpression',
  start: 29,
  end: 31,
  operator: '!',
  prefix: true,
  argument: Node { type: 'Identifier', start: 30, end: 31, name: 'b' } }
UnaryExpression
29
31
!
true
Node { type: 'Identifier', start: 30, end: 31, name: 'b' }
Identifier
30
31
b
Node {
  type: 'ThrowStatement',
  start: 41,
  end: 69,
  argument: 
   Node {
     type: 'NewExpression',
     start: 47,
     end: 69,
     callee: Node { type: 'Identifier', start: 51, end: 56, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
41
69
Node {
  type: 'NewExpression',
  start: 47,
  end: 69,
  callee: Node { type: 'Identifier', start: 51, end: 56, name: 'Error' },
  arguments: 
   [ Node {
       type: 'Literal',
       start: 57,
       end: 68,
       value: 'bad value',
       raw: '"bad value"' } ] }
NewExpression
47
69
Node { type: 'Identifier', start: 51, end: 56, name: 'Error' }
Identifier
51
56
Error
[ Node {
    type: 'Literal',
    start: 57,
    end: 68,
    value: 'bad value',
    raw: '"bad value"' } ]
Node {
  type: 'Literal',
  start: 57,
  end: 68,
  value: 'bad value',
  raw: '"bad value"' }
Literal
57
68
bad value
"bad value"
null
[+] Exception: ftl-try-catch-getter-throw.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1367,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 0,
       end: 19,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 87,
       end: 163,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 165,
       end: 193,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 194,
       end: 206,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 207,
       end: 235,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 236,
       end: 248,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 249,
       end: 277,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 278,
       end: 290,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 291,
       end: 319,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 320,
       end: 332,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 333,
       end: 361,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 362,
       end: 374,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 375,
       end: 403,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 404,
       end: 416,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 417,
       end: 445,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 446,
       end: 458,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 460,
       end: 480,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'VariableDeclaration',
       start: 481,
       end: 511,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'VariableDeclaration',
       start: 512,
       end: 536,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'FunctionDeclaration',
       start: 537,
       end: 1034,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1035,
       end: 1049,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 1053,
       end: 1087,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1088,
       end: 1103,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 1105,
       end: 1240,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1242,
       end: 1267,
       expression: [Node] },
     Node {
       type: 'WhileStatement',
       start: 1268,
       end: 1366,
       test: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
1367
[ Node {
    type: 'ExpressionStatement',
    start: 0,
    end: 19,
    expression: 
     Node {
       type: 'CallExpression',
       start: 0,
       end: 18,
       callee: [Node],
       arguments: [] } },
  Node {
    type: 'FunctionDeclaration',
    start: 87,
    end: 163,
    id: Node { type: 'Identifier', start: 96, end: 102, name: 'assert' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 106, end: 163, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 165,
    end: 193,
    id: Node { type: 'Identifier', start: 174, end: 175, name: 'a' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 178, end: 193, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 194,
    end: 206,
    expression: 
     Node {
       type: 'CallExpression',
       start: 194,
       end: 205,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 207,
    end: 235,
    id: Node { type: 'Identifier', start: 216, end: 217, name: 'b' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 220, end: 235, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 236,
    end: 248,
    expression: 
     Node {
       type: 'CallExpression',
       start: 236,
       end: 247,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 249,
    end: 277,
    id: Node { type: 'Identifier', start: 258, end: 259, name: 'c' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 262, end: 277, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 278,
    end: 290,
    expression: 
     Node {
       type: 'CallExpression',
       start: 278,
       end: 289,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 291,
    end: 319,
    id: Node { type: 'Identifier', start: 300, end: 301, name: 'd' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 304, end: 319, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 320,
    end: 332,
    expression: 
     Node {
       type: 'CallExpression',
       start: 320,
       end: 331,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 333,
    end: 361,
    id: Node { type: 'Identifier', start: 342, end: 343, name: 'e' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 346, end: 361, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 362,
    end: 374,
    expression: 
     Node {
       type: 'CallExpression',
       start: 362,
       end: 373,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 375,
    end: 403,
    id: Node { type: 'Identifier', start: 384, end: 385, name: 'f' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 388, end: 403, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 404,
    end: 416,
    expression: 
     Node {
       type: 'CallExpression',
       start: 404,
       end: 415,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 417,
    end: 445,
    id: Node { type: 'Identifier', start: 426, end: 427, name: 'g' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 430, end: 445, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 446,
    end: 458,
    expression: 
     Node {
       type: 'CallExpression',
       start: 446,
       end: 457,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 460,
    end: 480,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'VariableDeclaration',
    start: 481,
    end: 511,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'VariableDeclaration',
    start: 512,
    end: 536,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'FunctionDeclaration',
    start: 537,
    end: 1034,
    id: Node { type: 'Identifier', start: 546, end: 549, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 568, end: 1034, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1035,
    end: 1049,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1035,
       end: 1048,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 1053,
    end: 1087,
    id: Node { type: 'Identifier', start: 1062, end: 1066, name: 'blah' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 1069, end: 1087, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1088,
    end: 1103,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1088,
       end: 1102,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 1105,
    end: 1240,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 1110,
       end: 1119,
       declarations: [Array],
       kind: 'let' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1121,
       end: 1131,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 1133,
       end: 1136,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 1138, end: 1240, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1242,
    end: 1267,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 1242,
       end: 1266,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'WhileStatement',
    start: 1268,
    end: 1366,
    test: 
     Node {
       type: 'Literal',
       start: 1275,
       end: 1279,
       value: true,
       raw: 'true' },
    body: Node { type: 'BlockStatement', start: 1281, end: 1366, body: [Array] } } ]
Node {
  type: 'ExpressionStatement',
  start: 0,
  end: 19,
  expression: 
   Node {
     type: 'CallExpression',
     start: 0,
     end: 18,
     callee: 
      Node {
        type: 'Identifier',
        start: 0,
        end: 16,
        name: 'forceGCSlowPaths' },
     arguments: [] } }
ExpressionStatement
0
19
Node {
  type: 'CallExpression',
  start: 0,
  end: 18,
  callee: 
   Node {
     type: 'Identifier',
     start: 0,
     end: 16,
     name: 'forceGCSlowPaths' },
  arguments: [] }
CallExpression
0
18
Node {
  type: 'Identifier',
  start: 0,
  end: 16,
  name: 'forceGCSlowPaths' }
Identifier
0
16
forceGCSlowPaths
[]
Node {
  type: 'FunctionDeclaration',
  start: 87,
  end: 163,
  id: Node { type: 'Identifier', start: 96, end: 102, name: 'assert' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 103, end: 104, name: 'b' } ],
  body: Node { type: 'BlockStatement', start: 106, end: 163, body: [ [Node] ] } }
FunctionDeclaration
87
163
Node { type: 'Identifier', start: 96, end: 102, name: 'assert' }
Identifier
96
102
assert
false
false
false
[ Node { type: 'Identifier', start: 103, end: 104, name: 'b' } ]
Node { type: 'Identifier', start: 103, end: 104, name: 'b' }
Identifier
103
104
b
Node {
  type: 'BlockStatement',
  start: 106,
  end: 163,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 112,
       end: 161,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
106
163
[ Node {
    type: 'IfStatement',
    start: 112,
    end: 161,
    test: 
     Node {
       type: 'UnaryExpression',
       start: 116,
       end: 118,
       operator: '!',
       prefix: true,
       argument: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 128, end: 161, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 112,
  end: 161,
  test: 
   Node {
     type: 'UnaryExpression',
     start: 116,
     end: 118,
     operator: '!',
     prefix: true,
     argument: Node { type: 'Identifier', start: 117, end: 118, name: 'b' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 128,
     end: 161,
     argument: 
      Node {
        type: 'NewExpression',
        start: 134,
        end: 160,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
112
161
Node {
  type: 'UnaryExpression',
  start: 116,
  end: 118,
  operator: '!',
  prefix: true,
  argument: Node { type: 'Identifier', start: 117, end: 118, name: 'b' } }
UnaryExpression
116
118
!
true
Node { type: 'Identifier', start: 117, end: 118, name: 'b' }
Identifier
117
118
b
Node {
  type: 'ThrowStatement',
  start: 128,
  end: 161,
  argument: 
   Node {
     type: 'NewExpression',
     start: 134,
     end: 160,
     callee: Node { type: 'Identifier', start: 138, end: 143, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
128
161
Node {
  type: 'NewExpression',
  start: 134,
  end: 160,
  callee: Node { type: 'Identifier', start: 138, end: 143, name: 'Error' },
  arguments: 
   [ Node {
       type: 'Literal',
       start: 144,
       end: 159,
       value: 'Bad assertion',
       raw: '"Bad assertion"' } ] }
NewExpression
134
160
Node { type: 'Identifier', start: 138, end: 143, name: 'Error' }
Identifier
138
143
Error
[ Node {
    type: 'Literal',
    start: 144,
    end: 159,
    value: 'Bad assertion',
    raw: '"Bad assertion"' } ]
Node {
  type: 'Literal',
  start: 144,
  end: 159,
  value: 'Bad assertion',
  raw: '"Bad assertion"' }
Literal
144
159
Bad assertion
"Bad assertion"
null
[+] Exception: ftl-try-catch-oom-error-lazy-slow-path.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1273,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 72,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 73,
       end: 90,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 92,
       end: 105,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 106,
       end: 119,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 120,
       end: 137,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 138,
       end: 251,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 253,
       end: 281,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 282,
       end: 294,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 295,
       end: 323,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 324,
       end: 336,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 337,
       end: 365,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 366,
       end: 378,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 379,
       end: 407,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 408,
       end: 420,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 421,
       end: 449,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 450,
       end: 462,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 463,
       end: 491,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 492,
       end: 504,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 505,
       end: 533,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 534,
       end: 546,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 548,
       end: 753,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 755,
       end: 1174,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1175,
       end: 1189,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 1191,
       end: 1250,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1251,
       end: 1263,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1264,
       end: 1272,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
1273
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 72,
    id: Node { type: 'Identifier', start: 9, end: 15, name: 'assert' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 72, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 73,
    end: 90,
    expression: 
     Node {
       type: 'CallExpression',
       start: 73,
       end: 89,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 92,
    end: 105,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 106,
    end: 119,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 120,
    end: 137,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 138,
    end: 251,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 253,
    end: 281,
    id: Node { type: 'Identifier', start: 262, end: 263, name: 'a' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 266, end: 281, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 282,
    end: 294,
    expression: 
     Node {
       type: 'CallExpression',
       start: 282,
       end: 293,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 295,
    end: 323,
    id: Node { type: 'Identifier', start: 304, end: 305, name: 'b' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 308, end: 323, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 324,
    end: 336,
    expression: 
     Node {
       type: 'CallExpression',
       start: 324,
       end: 335,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 337,
    end: 365,
    id: Node { type: 'Identifier', start: 346, end: 347, name: 'c' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 350, end: 365, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 366,
    end: 378,
    expression: 
     Node {
       type: 'CallExpression',
       start: 366,
       end: 377,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 379,
    end: 407,
    id: Node { type: 'Identifier', start: 388, end: 389, name: 'd' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 392, end: 407, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 408,
    end: 420,
    expression: 
     Node {
       type: 'CallExpression',
       start: 408,
       end: 419,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 421,
    end: 449,
    id: Node { type: 'Identifier', start: 430, end: 431, name: 'e' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 434, end: 449, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 450,
    end: 462,
    expression: 
     Node {
       type: 'CallExpression',
       start: 450,
       end: 461,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 463,
    end: 491,
    id: Node { type: 'Identifier', start: 472, end: 473, name: 'f' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 476, end: 491, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 492,
    end: 504,
    expression: 
     Node {
       type: 'CallExpression',
       start: 492,
       end: 503,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 505,
    end: 533,
    id: Node { type: 'Identifier', start: 514, end: 515, name: 'g' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 518, end: 533, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 534,
    end: 546,
    expression: 
     Node {
       type: 'CallExpression',
       start: 534,
       end: 545,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 548,
    end: 753,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 755,
    end: 1174,
    id: Node { type: 'Identifier', start: 764, end: 767, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 771, end: 1174, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1175,
    end: 1189,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1175,
       end: 1188,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 1191,
    end: 1250,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 1196,
       end: 1205,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1207,
       end: 1218,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 1220,
       end: 1223,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 1229,
       end: 1250,
       expression: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 1251,
    end: 1263,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 1251,
       end: 1262,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 1264,
    end: 1272,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1264,
       end: 1271,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 72,
  id: Node { type: 'Identifier', start: 9, end: 15, name: 'assert' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ],
  body: Node { type: 'BlockStatement', start: 19, end: 72, body: [ [Node] ] } }
FunctionDeclaration
0
72
Node { type: 'Identifier', start: 9, end: 15, name: 'assert' }
Identifier
9
15
assert
false
false
false
[ Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ]
Node { type: 'Identifier', start: 16, end: 17, name: 'b' }
Identifier
16
17
b
Node {
  type: 'BlockStatement',
  start: 19,
  end: 72,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 25,
       end: 70,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
19
72
[ Node {
    type: 'IfStatement',
    start: 25,
    end: 70,
    test: 
     Node {
       type: 'UnaryExpression',
       start: 29,
       end: 31,
       operator: '!',
       prefix: true,
       argument: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 41, end: 70, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 25,
  end: 70,
  test: 
   Node {
     type: 'UnaryExpression',
     start: 29,
     end: 31,
     operator: '!',
     prefix: true,
     argument: Node { type: 'Identifier', start: 30, end: 31, name: 'b' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 41,
     end: 70,
     argument: 
      Node {
        type: 'NewExpression',
        start: 47,
        end: 70,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
25
70
Node {
  type: 'UnaryExpression',
  start: 29,
  end: 31,
  operator: '!',
  prefix: true,
  argument: Node { type: 'Identifier', start: 30, end: 31, name: 'b' } }
UnaryExpression
29
31
!
true
Node { type: 'Identifier', start: 30, end: 31, name: 'b' }
Identifier
30
31
b
Node {
  type: 'ThrowStatement',
  start: 41,
  end: 70,
  argument: 
   Node {
     type: 'NewExpression',
     start: 47,
     end: 70,
     callee: Node { type: 'Identifier', start: 51, end: 56, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
41
70
Node {
  type: 'NewExpression',
  start: 47,
  end: 70,
  callee: Node { type: 'Identifier', start: 51, end: 56, name: 'Error' },
  arguments: 
   [ Node {
       type: 'Literal',
       start: 57,
       end: 69,
       value: 'Bad value.',
       raw: '"Bad value."' } ] }
NewExpression
47
70
Node { type: 'Identifier', start: 51, end: 56, name: 'Error' }
Identifier
51
56
Error
[ Node {
    type: 'Literal',
    start: 57,
    end: 69,
    value: 'Bad value.',
    raw: '"Bad value."' } ]
Node {
  type: 'Literal',
  start: 57,
  end: 69,
  value: 'Bad value.',
  raw: '"Bad value."' }
Literal
57
69
Bad value.
"Bad value."
null
[+] Exception: ftl-try-catch-patchpoint-with-volatile-registers.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 704,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 151,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 153,
       end: 224,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 225,
       end: 242,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 244,
       end: 258,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 259,
       end: 276,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 277,
       end: 372,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 373,
       end: 385,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 386,
       end: 433,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'VariableDeclaration',
       start: 435,
       end: 523,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'ForStatement',
       start: 525,
       end: 663,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 664,
       end: 676,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 677,
       end: 703,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
704
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 151,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 151, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 153,
    end: 224,
    id: Node { type: 'Identifier', start: 162, end: 168, name: 'assert' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 172, end: 224, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 225,
    end: 242,
    expression: 
     Node {
       type: 'CallExpression',
       start: 225,
       end: 241,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 244,
    end: 258,
    expression: 
     Node {
       type: 'CallExpression',
       start: 244,
       end: 257,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 259,
    end: 276,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 277,
    end: 372,
    id: Node { type: 'Identifier', start: 286, end: 287, name: 'f' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 306, end: 372, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 373,
    end: 385,
    expression: 
     Node {
       type: 'CallExpression',
       start: 373,
       end: 384,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 386,
    end: 433,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'VariableDeclaration',
    start: 435,
    end: 523,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'ForStatement',
    start: 525,
    end: 663,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 530,
       end: 539,
       declarations: [Array],
       kind: 'let' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 541,
       end: 551,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 553,
       end: 556,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 558, end: 663, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 664,
    end: 676,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 664,
       end: 675,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 677,
    end: 703,
    expression: 
     Node {
       type: 'CallExpression',
       start: 677,
       end: 702,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 151,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'o' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'a' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 19,
     end: 151,
     body: [ [Node], [Node], [Node], [Node] ] } }
FunctionDeclaration
0
151
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'o' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'a' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'o' }
Identifier
13
14
o
Node { type: 'Identifier', start: 16, end: 17, name: 'a' }
Identifier
16
17
a
Node {
  type: 'BlockStatement',
  start: 19,
  end: 151,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 25,
       end: 37,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'VariableDeclaration',
       start: 42,
       end: 54,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'TryStatement',
       start: 59,
       end: 131,
       block: [Node],
       handler: [Node],
       finalizer: null },
     Node {
       type: 'ReturnStatement',
       start: 136,
       end: 149,
       argument: [Node] } ] }
BlockStatement
19
151
[ Node {
    type: 'VariableDeclaration',
    start: 25,
    end: 37,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'VariableDeclaration',
    start: 42,
    end: 54,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'TryStatement',
    start: 59,
    end: 131,
    block: Node { type: 'BlockStatement', start: 63, end: 88, body: [Array] },
    handler: 
     Node {
       type: 'CatchClause',
       start: 89,
       end: 131,
       param: [Node],
       body: [Node] },
    finalizer: null },
  Node {
    type: 'ReturnStatement',
    start: 136,
    end: 149,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 143,
       end: 148,
       left: [Node],
       operator: '+',
       right: [Node] } } ]
Node {
  type: 'VariableDeclaration',
  start: 25,
  end: 37,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 29,
       end: 36,
       id: [Node],
       init: [Node] } ],
  kind: 'let' }
VariableDeclaration
25
37
[ Node {
    type: 'VariableDeclarator',
    start: 29,
    end: 36,
    id: Node { type: 'Identifier', start: 29, end: 30, name: 'x' },
    init: 
     Node {
       type: 'MemberExpression',
       start: 33,
       end: 36,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'VariableDeclarator',
  start: 29,
  end: 36,
  id: Node { type: 'Identifier', start: 29, end: 30, name: 'x' },
  init: 
   Node {
     type: 'MemberExpression',
     start: 33,
     end: 36,
     object: Node { type: 'Identifier', start: 33, end: 34, name: 'o' },
     property: Node { type: 'Identifier', start: 35, end: 36, name: 'g' },
     computed: false } }
VariableDeclarator
29
36
Node { type: 'Identifier', start: 29, end: 30, name: 'x' }
Identifier
29
30
x
Node {
  type: 'MemberExpression',
  start: 33,
  end: 36,
  object: Node { type: 'Identifier', start: 33, end: 34, name: 'o' },
  property: Node { type: 'Identifier', start: 35, end: 36, name: 'g' },
  computed: false }
MemberExpression
33
36
Node { type: 'Identifier', start: 33, end: 34, name: 'o' }
Identifier
33
34
o
Node { type: 'Identifier', start: 35, end: 36, name: 'g' }
Identifier
35
36
g
false
let
Node {
  type: 'VariableDeclaration',
  start: 42,
  end: 54,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 46,
       end: 53,
       id: [Node],
       init: [Node] } ],
  kind: 'let' }
VariableDeclaration
42
54
[ Node {
    type: 'VariableDeclarator',
    start: 46,
    end: 53,
    id: Node { type: 'Identifier', start: 46, end: 47, name: 'y' },
    init: 
     Node {
       type: 'MemberExpression',
       start: 50,
       end: 53,
       object: [Node],
       property: [Node],
       computed: false } } ]
Node {
  type: 'VariableDeclarator',
  start: 46,
  end: 53,
  id: Node { type: 'Identifier', start: 46, end: 47, name: 'y' },
  init: 
   Node {
     type: 'MemberExpression',
     start: 50,
     end: 53,
     object: Node { type: 'Identifier', start: 50, end: 51, name: 'o' },
     property: Node { type: 'Identifier', start: 52, end: 53, name: 'y' },
     computed: false } }
VariableDeclarator
46
53
Node { type: 'Identifier', start: 46, end: 47, name: 'y' }
Identifier
46
47
y
Node {
  type: 'MemberExpression',
  start: 50,
  end: 53,
  object: Node { type: 'Identifier', start: 50, end: 51, name: 'o' },
  property: Node { type: 'Identifier', start: 52, end: 53, name: 'y' },
  computed: false }
MemberExpression
50
53
Node { type: 'Identifier', start: 50, end: 51, name: 'o' }
Identifier
50
51
o
Node { type: 'Identifier', start: 52, end: 53, name: 'y' }
Identifier
52
53
y
false
let
Node {
  type: 'TryStatement',
  start: 59,
  end: 131,
  block: Node { type: 'BlockStatement', start: 63, end: 88, body: [ [Node] ] },
  handler: 
   Node {
     type: 'CatchClause',
     start: 89,
     end: 131,
     param: Node { type: 'Identifier', start: 95, end: 96, name: 'e' },
     body: Node { type: 'BlockStatement', start: 98, end: 131, body: [Array] } },
  finalizer: null }
TryStatement
59
131
Node {
  type: 'BlockStatement',
  start: 63,
  end: 88,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 73,
       end: 82,
       expression: [Node] } ] }
BlockStatement
63
88
[ Node {
    type: 'ExpressionStatement',
    start: 73,
    end: 82,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 73,
       end: 81,
       operator: '=',
       left: [Node],
       right: [Node] } } ]
Node {
  type: 'ExpressionStatement',
  start: 73,
  end: 82,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 73,
     end: 81,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 73,
        end: 76,
        object: [Node],
        property: [Node],
        computed: false },
     right: Node { type: 'Literal', start: 79, end: 81, value: 20, raw: '20' } } }
ExpressionStatement
73
82
Node {
  type: 'AssignmentExpression',
  start: 73,
  end: 81,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 73,
     end: 76,
     object: Node { type: 'Identifier', start: 73, end: 74, name: 'o' },
     property: Node { type: 'Identifier', start: 75, end: 76, name: 'f' },
     computed: false },
  right: Node { type: 'Literal', start: 79, end: 81, value: 20, raw: '20' } }
AssignmentExpression
73
81
=
Node {
  type: 'MemberExpression',
  start: 73,
  end: 76,
  object: Node { type: 'Identifier', start: 73, end: 74, name: 'o' },
  property: Node { type: 'Identifier', start: 75, end: 76, name: 'f' },
  computed: false }
MemberExpression
73
76
Node { type: 'Identifier', start: 73, end: 74, name: 'o' }
Identifier
73
74
o
Node { type: 'Identifier', start: 75, end: 76, name: 'f' }
Identifier
75
76
f
false
Node { type: 'Literal', start: 79, end: 81, value: 20, raw: '20' }
Literal
79
81
20
20
Node {
  type: 'CatchClause',
  start: 89,
  end: 131,
  param: Node { type: 'Identifier', start: 95, end: 96, name: 'e' },
  body: Node { type: 'BlockStatement', start: 98, end: 131, body: [ [Node] ] } }
CatchClause
89
131
Node { type: 'Identifier', start: 95, end: 96, name: 'e' }
Identifier
95
96
e
Node {
  type: 'BlockStatement',
  start: 98,
  end: 131,
  body: 
   [ Node {
       type: 'ReturnStatement',
       start: 108,
       end: 125,
       argument: [Node] } ] }
BlockStatement
98
131
[ Node {
    type: 'ReturnStatement',
    start: 108,
    end: 125,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 115,
       end: 124,
       left: [Node],
       operator: '+',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 108,
  end: 125,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 115,
     end: 124,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 115,
        end: 120,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: Node { type: 'Literal', start: 123, end: 124, value: 1, raw: '1' } } }
ReturnStatement
108
125
Node {
  type: 'BinaryExpression',
  start: 115,
  end: 124,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 115,
     end: 120,
     left: Node { type: 'Identifier', start: 115, end: 116, name: 'x' },
     operator: '+',
     right: Node { type: 'Identifier', start: 119, end: 120, name: 'y' } },
  operator: '+',
  right: Node { type: 'Literal', start: 123, end: 124, value: 1, raw: '1' } }
BinaryExpression
115
124
Node {
  type: 'BinaryExpression',
  start: 115,
  end: 120,
  left: Node { type: 'Identifier', start: 115, end: 116, name: 'x' },
  operator: '+',
  right: Node { type: 'Identifier', start: 119, end: 120, name: 'y' } }
BinaryExpression
115
120
Node { type: 'Identifier', start: 115, end: 116, name: 'x' }
Identifier
115
116
x
+
Node { type: 'Identifier', start: 119, end: 120, name: 'y' }
Identifier
119
120
y
+
Node { type: 'Literal', start: 123, end: 124, value: 1, raw: '1' }
Literal
123
124
1
1
null
[+] Exception: ftl-try-catch-setter-throw.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1201,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 410,
       end: 423,
       expression: [Node],
       directive: 'use strict' },
     Node {
       type: 'FunctionDeclaration',
       start: 424,
       end: 464,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 465,
       end: 481,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 483,
       end: 555,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 556,
       end: 573,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 575,
       end: 762,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 764,
       end: 920,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 921,
       end: 935,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 937,
       end: 977,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 979,
       end: 1016,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 1018,
       end: 1035,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'FunctionDeclaration',
       start: 1036,
       end: 1117,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1118,
       end: 1132,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 1134,
       end: 1180,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1181,
       end: 1193,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1194,
       end: 1200,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
1201
[ Node {
    type: 'ExpressionStatement',
    start: 410,
    end: 423,
    expression: 
     Node {
       type: 'Literal',
       start: 410,
       end: 422,
       value: 'use strict',
       raw: '"use strict"' },
    directive: 'use strict' },
  Node {
    type: 'FunctionDeclaration',
    start: 424,
    end: 464,
    id: Node { type: 'Identifier', start: 433, end: 438, name: 'value' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 441, end: 464, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 465,
    end: 481,
    expression: 
     Node {
       type: 'CallExpression',
       start: 465,
       end: 480,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 483,
    end: 555,
    id: Node { type: 'Identifier', start: 492, end: 498, name: 'assert' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 502, end: 555, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 556,
    end: 573,
    expression: 
     Node {
       type: 'CallExpression',
       start: 556,
       end: 572,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 575,
    end: 762,
    id: Node { type: 'Identifier', start: 584, end: 592, name: 'validate' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 600, end: 762, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 764,
    end: 920,
    id: Node { type: 'Identifier', start: 773, end: 776, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 779, end: 920, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 921,
    end: 935,
    expression: 
     Node {
       type: 'CallExpression',
       start: 921,
       end: 934,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 937,
    end: 977,
    id: Node { type: 'Identifier', start: 946, end: 949, name: 'bar' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 952, end: 977, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 979,
    end: 1016,
    id: Node { type: 'Identifier', start: 988, end: 991, name: 'baz' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 994, end: 1016, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 1018,
    end: 1035,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'FunctionDeclaration',
    start: 1036,
    end: 1117,
    id: Node { type: 'Identifier', start: 1045, end: 1048, name: 'jaz' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 1051, end: 1117, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1118,
    end: 1132,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1118,
       end: 1131,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 1134,
    end: 1180,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 1139,
       end: 1148,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1150,
       end: 1159,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 1161,
       end: 1164,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 1166, end: 1180, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1181,
    end: 1193,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 1181,
       end: 1192,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 1194,
    end: 1200,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1194,
       end: 1199,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'ExpressionStatement',
  start: 410,
  end: 423,
  expression: 
   Node {
     type: 'Literal',
     start: 410,
     end: 422,
     value: 'use strict',
     raw: '"use strict"' },
  directive: 'use strict' }
ExpressionStatement
410
423
Node {
  type: 'Literal',
  start: 410,
  end: 422,
  value: 'use strict',
  raw: '"use strict"' }
Literal
410
422
use strict
"use strict"
use strict
Node {
  type: 'FunctionDeclaration',
  start: 424,
  end: 464,
  id: Node { type: 'Identifier', start: 433, end: 438, name: 'value' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 441, end: 464, body: [ [Node] ] } }
FunctionDeclaration
424
464
Node { type: 'Identifier', start: 433, end: 438, name: 'value' }
Identifier
433
438
value
false
false
false
[]
Node {
  type: 'BlockStatement',
  start: 441,
  end: 464,
  body: 
   [ Node {
       type: 'ReturnStatement',
       start: 447,
       end: 462,
       argument: [Node] } ] }
BlockStatement
441
464
[ Node {
    type: 'ReturnStatement',
    start: 447,
    end: 462,
    argument: 
     Node {
       type: 'Literal',
       start: 454,
       end: 461,
       value: 'value',
       raw: '"value"' } } ]
Node {
  type: 'ReturnStatement',
  start: 447,
  end: 462,
  argument: 
   Node {
     type: 'Literal',
     start: 454,
     end: 461,
     value: 'value',
     raw: '"value"' } }
ReturnStatement
447
462
Node {
  type: 'Literal',
  start: 454,
  end: 461,
  value: 'value',
  raw: '"value"' }
Literal
454
461
value
"value"
Node {
  type: 'ExpressionStatement',
  start: 465,
  end: 481,
  expression: 
   Node {
     type: 'CallExpression',
     start: 465,
     end: 480,
     callee: Node { type: 'Identifier', start: 465, end: 473, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
465
481
Node {
  type: 'CallExpression',
  start: 465,
  end: 480,
  callee: Node { type: 'Identifier', start: 465, end: 473, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 474, end: 479, name: 'value' } ] }
CallExpression
465
480
Node { type: 'Identifier', start: 465, end: 473, name: 'noInline' }
Identifier
465
473
noInline
[ Node { type: 'Identifier', start: 474, end: 479, name: 'value' } ]
Node { type: 'Identifier', start: 474, end: 479, name: 'value' }
Identifier
474
479
value
Node {
  type: 'FunctionDeclaration',
  start: 483,
  end: 555,
  id: Node { type: 'Identifier', start: 492, end: 498, name: 'assert' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 499, end: 500, name: 'b' } ],
  body: Node { type: 'BlockStatement', start: 502, end: 555, body: [ [Node] ] } }
FunctionDeclaration
483
555
Node { type: 'Identifier', start: 492, end: 498, name: 'assert' }
Identifier
492
498
assert
false
false
false
[ Node { type: 'Identifier', start: 499, end: 500, name: 'b' } ]
Node { type: 'Identifier', start: 499, end: 500, name: 'b' }
Identifier
499
500
b
Node {
  type: 'BlockStatement',
  start: 502,
  end: 555,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 508,
       end: 553,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
502
555
[ Node {
    type: 'IfStatement',
    start: 508,
    end: 553,
    test: 
     Node {
       type: 'UnaryExpression',
       start: 512,
       end: 514,
       operator: '!',
       prefix: true,
       argument: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 524, end: 553, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 508,
  end: 553,
  test: 
   Node {
     type: 'UnaryExpression',
     start: 512,
     end: 514,
     operator: '!',
     prefix: true,
     argument: Node { type: 'Identifier', start: 513, end: 514, name: 'b' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 524,
     end: 553,
     argument: 
      Node {
        type: 'NewExpression',
        start: 530,
        end: 552,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
508
553
Node {
  type: 'UnaryExpression',
  start: 512,
  end: 514,
  operator: '!',
  prefix: true,
  argument: Node { type: 'Identifier', start: 513, end: 514, name: 'b' } }
UnaryExpression
512
514
!
true
Node { type: 'Identifier', start: 513, end: 514, name: 'b' }
Identifier
513
514
b
Node {
  type: 'ThrowStatement',
  start: 524,
  end: 553,
  argument: 
   Node {
     type: 'NewExpression',
     start: 530,
     end: 552,
     callee: Node { type: 'Identifier', start: 534, end: 539, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
524
553
Node {
  type: 'NewExpression',
  start: 530,
  end: 552,
  callee: Node { type: 'Identifier', start: 534, end: 539, name: 'Error' },
  arguments: 
   [ Node {
       type: 'Literal',
       start: 540,
       end: 551,
       value: 'bad value',
       raw: '"bad value"' } ] }
NewExpression
530
552
Node { type: 'Identifier', start: 534, end: 539, name: 'Error' }
Identifier
534
539
Error
[ Node {
    type: 'Literal',
    start: 540,
    end: 551,
    value: 'bad value',
    raw: '"bad value"' } ]
Node {
  type: 'Literal',
  start: 540,
  end: 551,
  value: 'bad value',
  raw: '"bad value"' }
Literal
540
551
bad value
"bad value"
null
[+] Exception: ftl-try-catch-tail-call-inilned-caller.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 580,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 338,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 339,
       end: 353,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 354,
       end: 371,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 372,
       end: 467,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 468,
       end: 480,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 482,
       end: 544,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 545,
       end: 557,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 558,
       end: 579,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
580
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 338,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 338, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 339,
    end: 353,
    expression: 
     Node {
       type: 'CallExpression',
       start: 339,
       end: 352,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 354,
    end: 371,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 372,
    end: 467,
    id: Node { type: 'Identifier', start: 381, end: 382, name: 'f' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 401, end: 467, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 468,
    end: 480,
    expression: 
     Node {
       type: 'CallExpression',
       start: 468,
       end: 479,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 482,
    end: 544,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 487,
       end: 496,
       declarations: [Array],
       kind: 'let' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 498,
       end: 508,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 510,
       end: 513,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 515, end: 544, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 545,
    end: 557,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 545,
       end: 556,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 558,
    end: 579,
    expression: 
     Node {
       type: 'CallExpression',
       start: 558,
       end: 578,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 338,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'o' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'a' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 19,
     end: 338,
     body: [ [Node], [Node], [Node], [Node], [Node], [Node] ] } }
FunctionDeclaration
0
338
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'o' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'a' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'o' }
Identifier
13
14
o
Node { type: 'Identifier', start: 16, end: 17, name: 'a' }
Identifier
16
17
a
Node {
  type: 'BlockStatement',
  start: 19,
  end: 338,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 25,
       end: 47,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'IfStatement',
       start: 52,
       end: 117,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'VariableDeclaration',
       start: 122,
       end: 136,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'VariableDeclaration',
       start: 141,
       end: 155,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'IfStatement',
       start: 160,
       end: 195,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'TryStatement',
       start: 200,
       end: 336,
       block: [Node],
       handler: [Node],
       finalizer: null } ] }
BlockStatement
19
338
[ Node {
    type: 'VariableDeclaration',
    start: 25,
    end: 47,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'IfStatement',
    start: 52,
    end: 117,
    test: Node { type: 'Identifier', start: 56, end: 60, name: 'flag' },
    consequent: Node { type: 'BlockStatement', start: 62, end: 117, body: [Array] },
    alternate: null },
  Node {
    type: 'VariableDeclaration',
    start: 122,
    end: 136,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'VariableDeclaration',
    start: 141,
    end: 155,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'IfStatement',
    start: 160,
    end: 195,
    test: Node { type: 'Identifier', start: 164, end: 173, name: 'resetFlag' },
    consequent: 
     Node {
       type: 'ExpressionStatement',
       start: 183,
       end: 195,
       expression: [Node] },
    alternate: null },
  Node {
    type: 'TryStatement',
    start: 200,
    end: 336,
    block: Node { type: 'BlockStatement', start: 204, end: 237, body: [Array] },
    handler: 
     Node {
       type: 'CatchClause',
       start: 238,
       end: 336,
       param: [Node],
       body: [Node] },
    finalizer: null } ]
Node {
  type: 'VariableDeclaration',
  start: 25,
  end: 47,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 29,
       end: 46,
       id: [Node],
       init: [Node] } ],
  kind: 'let' }
VariableDeclaration
25
47
[ Node {
    type: 'VariableDeclarator',
    start: 29,
    end: 46,
    id: Node { type: 'Identifier', start: 29, end: 38, name: 'resetFlag' },
    init: Node { type: 'Literal', start: 41, end: 46, value: false, raw: 'false' } } ]
Node {
  type: 'VariableDeclarator',
  start: 29,
  end: 46,
  id: Node { type: 'Identifier', start: 29, end: 38, name: 'resetFlag' },
  init: Node { type: 'Literal', start: 41, end: 46, value: false, raw: 'false' } }
VariableDeclarator
29
46
Node { type: 'Identifier', start: 29, end: 38, name: 'resetFlag' }
Identifier
29
38
resetFlag
Node { type: 'Literal', start: 41, end: 46, value: false, raw: 'false' }
Literal
41
46
false
false
let
Node {
  type: 'IfStatement',
  start: 52,
  end: 117,
  test: Node { type: 'Identifier', start: 56, end: 60, name: 'flag' },
  consequent: 
   Node {
     type: 'BlockStatement',
     start: 62,
     end: 117,
     body: [ [Node], [Node] ] },
  alternate: null }
IfStatement
52
117
Node { type: 'Identifier', start: 56, end: 60, name: 'flag' }
Identifier
56
60
flag
Node {
  type: 'BlockStatement',
  start: 62,
  end: 117,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 72,
       end: 89,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 98,
       end: 111,
       expression: [Node] } ] }
BlockStatement
62
117
[ Node {
    type: 'ExpressionStatement',
    start: 72,
    end: 89,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 72,
       end: 88,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 98,
    end: 111,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 98,
       end: 110,
       operator: '=',
       left: [Node],
       right: [Node] } } ]
Node {
  type: 'ExpressionStatement',
  start: 72,
  end: 89,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 72,
     end: 88,
     operator: '=',
     left: Node { type: 'Identifier', start: 72, end: 81, name: 'resetFlag' },
     right: Node { type: 'Literal', start: 84, end: 88, value: true, raw: 'true' } } }
ExpressionStatement
72
89
Node {
  type: 'AssignmentExpression',
  start: 72,
  end: 88,
  operator: '=',
  left: Node { type: 'Identifier', start: 72, end: 81, name: 'resetFlag' },
  right: Node { type: 'Literal', start: 84, end: 88, value: true, raw: 'true' } }
AssignmentExpression
72
88
=
Node { type: 'Identifier', start: 72, end: 81, name: 'resetFlag' }
Identifier
72
81
resetFlag
Node { type: 'Literal', start: 84, end: 88, value: true, raw: 'true' }
Literal
84
88
true
true
Node {
  type: 'ExpressionStatement',
  start: 98,
  end: 111,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 98,
     end: 110,
     operator: '=',
     left: Node { type: 'Identifier', start: 98, end: 102, name: 'flag' },
     right: 
      Node {
        type: 'Literal',
        start: 105,
        end: 110,
        value: false,
        raw: 'false' } } }
ExpressionStatement
98
111
Node {
  type: 'AssignmentExpression',
  start: 98,
  end: 110,
  operator: '=',
  left: Node { type: 'Identifier', start: 98, end: 102, name: 'flag' },
  right: 
   Node {
     type: 'Literal',
     start: 105,
     end: 110,
     value: false,
     raw: 'false' } }
AssignmentExpression
98
110
=
Node { type: 'Identifier', start: 98, end: 102, name: 'flag' }
Identifier
98
102
flag
Node {
  type: 'Literal',
  start: 105,
  end: 110,
  value: false,
  raw: 'false' }
Literal
105
110
false
false
null
[+] Exception: ftl-try-catch-varargs-call-throws.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 409,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 96,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 98,
       end: 112,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 114,
       end: 266,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 268,
       end: 333,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 334,
       end: 408,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
409
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 96,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 96, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 98,
    end: 112,
    expression: 
     Node {
       type: 'CallExpression',
       start: 98,
       end: 111,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 114,
    end: 266,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 119,
       end: 128,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 130,
       end: 140,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 142,
       end: 145,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 147, end: 266, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 268,
    end: 333,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 334,
    end: 408,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 338,
       end: 358,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 364, end: 408, argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 96,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 13, end: 14, name: 'a' },
     Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ],
  body: Node { type: 'BlockStatement', start: 19, end: 96, body: [ [Node] ] } }
FunctionDeclaration
0
96
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'a' },
  Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'a' }
Identifier
13
14
a
Node { type: 'Identifier', start: 16, end: 17, name: 'b' }
Identifier
16
17
b
Node {
  type: 'BlockStatement',
  start: 19,
  end: 96,
  body: 
   [ Node {
       type: 'TryStatement',
       start: 25,
       end: 94,
       block: [Node],
       handler: [Node],
       finalizer: null } ] }
BlockStatement
19
96
[ Node {
    type: 'TryStatement',
    start: 25,
    end: 94,
    block: Node { type: 'BlockStatement', start: 29, end: 58, body: [Array] },
    handler: 
     Node {
       type: 'CatchClause',
       start: 59,
       end: 94,
       param: [Node],
       body: [Node] },
    finalizer: null } ]
Node {
  type: 'TryStatement',
  start: 25,
  end: 94,
  block: Node { type: 'BlockStatement', start: 29, end: 58, body: [ [Node] ] },
  handler: 
   Node {
     type: 'CatchClause',
     start: 59,
     end: 94,
     param: Node { type: 'Identifier', start: 66, end: 67, name: 'e' },
     body: Node { type: 'BlockStatement', start: 69, end: 94, body: [Array] } },
  finalizer: null }
TryStatement
25
94
Node {
  type: 'BlockStatement',
  start: 29,
  end: 58,
  body: 
   [ Node { type: 'ReturnStatement', start: 39, end: 52, argument: [Node] } ] }
BlockStatement
29
58
[ Node {
    type: 'ReturnStatement',
    start: 39,
    end: 52,
    argument: 
     Node {
       type: 'BinaryExpression',
       start: 46,
       end: 51,
       left: [Node],
       operator: '^',
       right: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 39,
  end: 52,
  argument: 
   Node {
     type: 'BinaryExpression',
     start: 46,
     end: 51,
     left: Node { type: 'Identifier', start: 46, end: 47, name: 'a' },
     operator: '^',
     right: Node { type: 'Identifier', start: 50, end: 51, name: 'b' } } }
ReturnStatement
39
52
Node {
  type: 'BinaryExpression',
  start: 46,
  end: 51,
  left: Node { type: 'Identifier', start: 46, end: 47, name: 'a' },
  operator: '^',
  right: Node { type: 'Identifier', start: 50, end: 51, name: 'b' } }
BinaryExpression
46
51
Node { type: 'Identifier', start: 46, end: 47, name: 'a' }
Identifier
46
47
a
^
Node { type: 'Identifier', start: 50, end: 51, name: 'b' }
Identifier
50
51
b
Node {
  type: 'CatchClause',
  start: 59,
  end: 94,
  param: Node { type: 'Identifier', start: 66, end: 67, name: 'e' },
  body: Node { type: 'BlockStatement', start: 69, end: 94, body: [ [Node] ] } }
CatchClause
59
94
Node { type: 'Identifier', start: 66, end: 67, name: 'e' }
Identifier
66
67
e
Node {
  type: 'BlockStatement',
  start: 69,
  end: 94,
  body: 
   [ Node { type: 'ReturnStatement', start: 79, end: 88, argument: [Node] } ] }
BlockStatement
69
94
[ Node {
    type: 'ReturnStatement',
    start: 79,
    end: 88,
    argument: Node { type: 'Identifier', start: 86, end: 87, name: 'e' } } ]
Node {
  type: 'ReturnStatement',
  start: 79,
  end: 88,
  argument: Node { type: 'Identifier', start: 86, end: 87, name: 'e' } }
ReturnStatement
79
88
Node { type: 'Identifier', start: 86, end: 87, name: 'e' }
Identifier
86
87
e
null
[+] Exception: ftl-xor-exception.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 2097,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 158,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 159,
       end: 324,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 326,
       end: 363,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 364,
       end: 380,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 382,
       end: 419,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 420,
       end: 436,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 438,
       end: 479,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'FunctionDeclaration',
       start: 481,
       end: 1959,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 1961,
       end: 2084,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 2086,
       end: 2096,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
2097
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 158,
    id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 36, end: 158, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 159,
    end: 324,
    id: Node { type: 'Identifier', start: 168, end: 179, name: 'shouldNotBe' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 198, end: 324, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 326,
    end: 363,
    id: Node { type: 'Identifier', start: 335, end: 340, name: 'readX' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 344, end: 363, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 364,
    end: 380,
    expression: 
     Node {
       type: 'CallExpression',
       start: 364,
       end: 379,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 382,
    end: 419,
    id: Node { type: 'Identifier', start: 391, end: 396, name: 'readY' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 400, end: 419, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 420,
    end: 436,
    expression: 
     Node {
       type: 'CallExpression',
       start: 420,
       end: 435,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 438,
    end: 479,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'FunctionDeclaration',
    start: 481,
    end: 1959,
    id: Node { type: 'Identifier', start: 490, end: 494, name: 'test' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 510, end: 1959, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 1961,
    end: 2084,
    id: Node { type: 'Identifier', start: 1970, end: 1977, name: 'runTest' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 1980, end: 2084, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 2086,
    end: 2096,
    expression: 
     Node {
       type: 'CallExpression',
       start: 2086,
       end: 2095,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 158,
  id: Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
     Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ],
  body: Node { type: 'BlockStatement', start: 36, end: 158, body: [ [Node] ] } }
FunctionDeclaration
0
158
Node { type: 'Identifier', start: 9, end: 17, name: 'shouldBe' }
Identifier
9
17
shouldBe
false
false
false
[ Node { type: 'Identifier', start: 18, end: 24, name: 'actual' },
  Node { type: 'Identifier', start: 26, end: 34, name: 'expected' } ]
Node { type: 'Identifier', start: 18, end: 24, name: 'actual' }
Identifier
18
24
actual
Node { type: 'Identifier', start: 26, end: 34, name: 'expected' }
Identifier
26
34
expected
Node {
  type: 'BlockStatement',
  start: 36,
  end: 158,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 42,
       end: 156,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
36
158
[ Node {
    type: 'IfStatement',
    start: 42,
    end: 156,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 46,
       end: 65,
       left: [Node],
       operator: '!==',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 75, end: 156, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 42,
  end: 156,
  test: 
   Node {
     type: 'BinaryExpression',
     start: 46,
     end: 65,
     left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
     operator: '!==',
     right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 75,
     end: 156,
     argument: 
      Node {
        type: 'NewExpression',
        start: 81,
        end: 155,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
42
156
Node {
  type: 'BinaryExpression',
  start: 46,
  end: 65,
  left: Node { type: 'Identifier', start: 46, end: 52, name: 'actual' },
  operator: '!==',
  right: Node { type: 'Identifier', start: 57, end: 65, name: 'expected' } }
BinaryExpression
46
65
Node { type: 'Identifier', start: 46, end: 52, name: 'actual' }
Identifier
46
52
actual
!==
Node { type: 'Identifier', start: 57, end: 65, name: 'expected' }
Identifier
57
65
expected
Node {
  type: 'ThrowStatement',
  start: 75,
  end: 156,
  argument: 
   Node {
     type: 'NewExpression',
     start: 81,
     end: 155,
     callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
75
156
Node {
  type: 'NewExpression',
  start: 81,
  end: 155,
  callee: Node { type: 'Identifier', start: 85, end: 90, name: 'Error' },
  arguments: 
   [ Node {
       type: 'BinaryExpression',
       start: 91,
       end: 154,
       left: [Node],
       operator: '+',
       right: [Node] } ] }
NewExpression
81
155
Node { type: 'Identifier', start: 85, end: 90, name: 'Error' }
Identifier
85
90
Error
[ Node {
    type: 'BinaryExpression',
    start: 91,
    end: 154,
    left: 
     Node {
       type: 'BinaryExpression',
       start: 91,
       end: 143,
       left: [Node],
       operator: '+',
       right: [Node] },
    operator: '+',
    right: Node { type: 'Identifier', start: 146, end: 154, name: 'expected' } } ]
Node {
  type: 'BinaryExpression',
  start: 91,
  end: 154,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 91,
     end: 143,
     left: 
      Node {
        type: 'BinaryExpression',
        start: 91,
        end: 127,
        left: [Node],
        operator: '+',
        right: [Node] },
     operator: '+',
     right: 
      Node {
        type: 'Literal',
        start: 130,
        end: 143,
        value: ' should be ',
        raw: '" should be "' } },
  operator: '+',
  right: Node { type: 'Identifier', start: 146, end: 154, name: 'expected' } }
BinaryExpression
91
154
Node {
  type: 'BinaryExpression',
  start: 91,
  end: 143,
  left: 
   Node {
     type: 'BinaryExpression',
     start: 91,
     end: 127,
     left: 
      Node {
        type: 'Literal',
        start: 91,
        end: 118,
        value: 'Failed assertion: actual ',
        raw: '"Failed assertion: actual "' },
     operator: '+',
     right: Node { type: 'Identifier', start: 121, end: 127, name: 'actual' } },
  operator: '+',
  right: 
   Node {
     type: 'Literal',
     start: 130,
     end: 143,
     value: ' should be ',
     raw: '" should be "' } }
BinaryExpression
91
143
Node {
  type: 'BinaryExpression',
  start: 91,
  end: 127,
  left: 
   Node {
     type: 'Literal',
     start: 91,
     end: 118,
     value: 'Failed assertion: actual ',
     raw: '"Failed assertion: actual "' },
  operator: '+',
  right: Node { type: 'Identifier', start: 121, end: 127, name: 'actual' } }
BinaryExpression
91
127
Node {
  type: 'Literal',
  start: 91,
  end: 118,
  value: 'Failed assertion: actual ',
  raw: '"Failed assertion: actual "' }
Literal
91
118
Failed assertion: actual 
"Failed assertion: actual "
+
Node { type: 'Identifier', start: 121, end: 127, name: 'actual' }
Identifier
121
127
actual
+
Node {
  type: 'Literal',
  start: 130,
  end: 143,
  value: ' should be ',
  raw: '" should be "' }
Literal
130
143
 should be 
" should be "
+
Node { type: 'Identifier', start: 146, end: 154, name: 'expected' }
Identifier
146
154
expected
null
[+] Exception: function-configurable-properties.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 2741,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 65,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 67,
       end: 168,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 170,
       end: 193,
       declarations: [Array],
       kind: 'const' },
     Node {
       type: 'ClassDeclaration',
       start: 194,
       end: 215,
       id: [Node],
       superClass: null,
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 216,
       end: 235,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'VariableDeclaration',
       start: 236,
       end: 284,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'ExpressionStatement',
       start: 285,
       end: 339,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 341,
       end: 385,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 386,
       end: 515,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 518,
       end: 560,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 561,
       end: 613,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 615,
       end: 669,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 670,
       end: 737,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 739,
       end: 795,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 796,
       end: 865,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 867,
       end: 908,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 909,
       end: 1128,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1130,
       end: 1171,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1172,
       end: 1391,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1393,
       end: 1431,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1432,
       end: 1652,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1654,
       end: 1688,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1689,
       end: 1909,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1911,
       end: 1943,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1944,
       end: 2164,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 2166,
       end: 2203,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 2204,
       end: 2424,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 2426,
       end: 2459,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 2460,
       end: 2680,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 2683,
       end: 2703,
       declarations: [Array],
       kind: 'const' },
     Node {
       type: 'VariableDeclaration',
       start: 2704,
       end: 2720,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'ClassDeclaration',
       start: 2721,
       end: 2739,
       id: [Node],
       superClass: null,
       body: [Node] } ],
  sourceType: 'script' }
Program
0
2741
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 65,
    id: Node { type: 'Identifier', start: 9, end: 15, name: 'assert' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 22, end: 65, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 67,
    end: 168,
    id: Node { type: 'Identifier', start: 76, end: 80, name: 'test' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 98, end: 168, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 170,
    end: 193,
    declarations: [ [Node] ],
    kind: 'const' },
  Node {
    type: 'ClassDeclaration',
    start: 194,
    end: 215,
    id: Node { type: 'Identifier', start: 200, end: 211, name: 'GlobalClass' },
    superClass: null,
    body: Node { type: 'ClassBody', start: 212, end: 215, body: [] } },
  Node {
    type: 'VariableDeclaration',
    start: 216,
    end: 235,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'VariableDeclaration',
    start: 236,
    end: 284,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'ExpressionStatement',
    start: 285,
    end: 339,
    expression: 
     Node {
       type: 'CallExpression',
       start: 285,
       end: 338,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 341,
    end: 385,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 341,
       end: 384,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 386,
    end: 515,
    expression: 
     Node {
       type: 'CallExpression',
       start: 386,
       end: 514,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 518,
    end: 560,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 518,
       end: 559,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 561,
    end: 613,
    expression: 
     Node {
       type: 'CallExpression',
       start: 561,
       end: 612,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 615,
    end: 669,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 615,
       end: 668,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 670,
    end: 737,
    expression: 
     Node {
       type: 'CallExpression',
       start: 670,
       end: 736,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 739,
    end: 795,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 739,
       end: 794,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 796,
    end: 865,
    expression: 
     Node {
       type: 'CallExpression',
       start: 796,
       end: 864,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 867,
    end: 908,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 867,
       end: 907,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 909,
    end: 1128,
    expression: 
     Node {
       type: 'CallExpression',
       start: 909,
       end: 1127,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1130,
    end: 1171,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 1130,
       end: 1170,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 1172,
    end: 1391,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1172,
       end: 1390,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1393,
    end: 1431,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 1393,
       end: 1430,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 1432,
    end: 1652,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1432,
       end: 1651,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1654,
    end: 1688,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 1654,
       end: 1687,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 1689,
    end: 1909,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1689,
       end: 1908,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1911,
    end: 1943,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 1911,
       end: 1942,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 1944,
    end: 2164,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1944,
       end: 2163,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 2166,
    end: 2203,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 2166,
       end: 2202,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 2204,
    end: 2424,
    expression: 
     Node {
       type: 'CallExpression',
       start: 2204,
       end: 2423,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 2426,
    end: 2459,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 2426,
       end: 2458,
       operator: '=',
       left: [Node],
       right: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 2460,
    end: 2680,
    expression: 
     Node {
       type: 'CallExpression',
       start: 2460,
       end: 2679,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 2683,
    end: 2703,
    declarations: [ [Node] ],
    kind: 'const' },
  Node {
    type: 'VariableDeclaration',
    start: 2704,
    end: 2720,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'ClassDeclaration',
    start: 2721,
    end: 2739,
    id: Node { type: 'Identifier', start: 2727, end: 2735, name: 'ClassTDZ' },
    superClass: null,
    body: Node { type: 'ClassBody', start: 2736, end: 2739, body: [] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 65,
  id: Node { type: 'Identifier', start: 9, end: 15, name: 'assert' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 16, end: 17, name: 'b' },
     Node { type: 'Identifier', start: 19, end: 20, name: 'm' } ],
  body: Node { type: 'BlockStatement', start: 22, end: 65, body: [ [Node] ] } }
FunctionDeclaration
0
65
Node { type: 'Identifier', start: 9, end: 15, name: 'assert' }
Identifier
9
15
assert
false
false
false
[ Node { type: 'Identifier', start: 16, end: 17, name: 'b' },
  Node { type: 'Identifier', start: 19, end: 20, name: 'm' } ]
Node { type: 'Identifier', start: 16, end: 17, name: 'b' }
Identifier
16
17
b
Node { type: 'Identifier', start: 19, end: 20, name: 'm' }
Identifier
19
20
m
Node {
  type: 'BlockStatement',
  start: 22,
  end: 65,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 28,
       end: 63,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
22
65
[ Node {
    type: 'IfStatement',
    start: 28,
    end: 63,
    test: 
     Node {
       type: 'UnaryExpression',
       start: 32,
       end: 34,
       operator: '!',
       prefix: true,
       argument: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 44, end: 63, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 28,
  end: 63,
  test: 
   Node {
     type: 'UnaryExpression',
     start: 32,
     end: 34,
     operator: '!',
     prefix: true,
     argument: Node { type: 'Identifier', start: 33, end: 34, name: 'b' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 44,
     end: 63,
     argument: 
      Node {
        type: 'NewExpression',
        start: 50,
        end: 62,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
28
63
Node {
  type: 'UnaryExpression',
  start: 32,
  end: 34,
  operator: '!',
  prefix: true,
  argument: Node { type: 'Identifier', start: 33, end: 34, name: 'b' } }
UnaryExpression
32
34
!
true
Node { type: 'Identifier', start: 33, end: 34, name: 'b' }
Identifier
33
34
b
Node {
  type: 'ThrowStatement',
  start: 44,
  end: 63,
  argument: 
   Node {
     type: 'NewExpression',
     start: 50,
     end: 62,
     callee: Node { type: 'Identifier', start: 54, end: 59, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
44
63
Node {
  type: 'NewExpression',
  start: 50,
  end: 62,
  callee: Node { type: 'Identifier', start: 54, end: 59, name: 'Error' },
  arguments: [ Node { type: 'Identifier', start: 60, end: 61, name: 'm' } ] }
NewExpression
50
62
Node { type: 'Identifier', start: 54, end: 59, name: 'Error' }
Identifier
54
59
Error
[ Node { type: 'Identifier', start: 60, end: 61, name: 'm' } ]
Node { type: 'Identifier', start: 60, end: 61, name: 'm' }
Identifier
60
61
m
null
[+] Exception: function-constructor-reading-from-global-lexical-environment.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1505,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 66,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 68,
       end: 227,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 229,
       end: 361,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'FunctionDeclaration',
       start: 363,
       end: 483,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 485,
       end: 603,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 605,
       end: 635,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 636,
       end: 660,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 661,
       end: 693,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 694,
       end: 728,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 729,
       end: 751,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 752,
       end: 776,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 777,
       end: 807,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 808,
       end: 847,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 848,
       end: 870,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 871,
       end: 893,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 894,
       end: 929,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 930,
       end: 964,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 965,
       end: 1003,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1004,
       end: 1034,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1035,
       end: 1060,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1062,
       end: 1085,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1086,
       end: 1134,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1135,
       end: 1162,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1163,
       end: 1190,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1191,
       end: 1202,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1203,
       end: 1219,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1220,
       end: 1238,
       expression: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1239,
       end: 1252,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 1254,
       end: 1267,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'ExpressionStatement',
       start: 1268,
       end: 1399,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 1400,
       end: 1416,
       declarations: [Array],
       kind: 'let' },
     Node {
       type: 'ForStatement',
       start: 1417,
       end: 1480,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 1481,
       end: 1504,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
1505
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 66,
    id: Node { type: 'Identifier', start: 9, end: 15, name: 'assert' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 66, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 68,
    end: 227,
    id: Node { type: 'Identifier', start: 77, end: 91, name: 'hasSyntaxError' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 95, end: 227, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 229,
    end: 361,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'FunctionDeclaration',
    start: 363,
    end: 483,
    id: Node { type: 'Identifier', start: 372, end: 381, name: 'testError' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 391, end: 483, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 485,
    end: 603,
    id: Node { type: 'Identifier', start: 494, end: 500, name: 'testOK' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 510, end: 603, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 605,
    end: 635,
    expression: 
     Node {
       type: 'CallExpression',
       start: 605,
       end: 634,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 636,
    end: 660,
    expression: 
     Node {
       type: 'CallExpression',
       start: 636,
       end: 659,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 661,
    end: 693,
    expression: 
     Node {
       type: 'CallExpression',
       start: 661,
       end: 692,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 694,
    end: 728,
    expression: 
     Node {
       type: 'CallExpression',
       start: 694,
       end: 727,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 729,
    end: 751,
    expression: 
     Node {
       type: 'CallExpression',
       start: 729,
       end: 750,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 752,
    end: 776,
    expression: 
     Node {
       type: 'CallExpression',
       start: 752,
       end: 775,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 777,
    end: 807,
    expression: 
     Node {
       type: 'CallExpression',
       start: 777,
       end: 806,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 808,
    end: 847,
    expression: 
     Node {
       type: 'CallExpression',
       start: 808,
       end: 846,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 848,
    end: 870,
    expression: 
     Node {
       type: 'CallExpression',
       start: 848,
       end: 869,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 871,
    end: 893,
    expression: 
     Node {
       type: 'CallExpression',
       start: 871,
       end: 892,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 894,
    end: 929,
    expression: 
     Node {
       type: 'CallExpression',
       start: 894,
       end: 928,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 930,
    end: 964,
    expression: 
     Node {
       type: 'CallExpression',
       start: 930,
       end: 963,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 965,
    end: 1003,
    expression: 
     Node {
       type: 'CallExpression',
       start: 965,
       end: 1002,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1004,
    end: 1034,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1004,
       end: 1033,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1035,
    end: 1060,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1035,
       end: 1059,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1062,
    end: 1085,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1062,
       end: 1084,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1086,
    end: 1134,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1086,
       end: 1133,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1135,
    end: 1162,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1135,
       end: 1161,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1163,
    end: 1190,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1163,
       end: 1189,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1191,
    end: 1202,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1191,
       end: 1201,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1203,
    end: 1219,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1203,
       end: 1218,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1220,
    end: 1238,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1220,
       end: 1237,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 1239,
    end: 1252,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1239,
       end: 1251,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 1254,
    end: 1267,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'ExpressionStatement',
    start: 1268,
    end: 1399,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1268,
       end: 1398,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 1400,
    end: 1416,
    declarations: [ [Node] ],
    kind: 'let' },
  Node {
    type: 'ForStatement',
    start: 1417,
    end: 1480,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 1422,
       end: 1431,
       declarations: [Array],
       kind: 'let' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1433,
       end: 1453,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 1455,
       end: 1458,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 1464,
       end: 1480,
       expression: [Node] } },
  Node {
    type: 'ExpressionStatement',
    start: 1481,
    end: 1504,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1481,
       end: 1503,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 66,
  id: Node { type: 'Identifier', start: 9, end: 15, name: 'assert' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ],
  body: Node { type: 'BlockStatement', start: 19, end: 66, body: [ [Node] ] } }
FunctionDeclaration
0
66
Node { type: 'Identifier', start: 9, end: 15, name: 'assert' }
Identifier
9
15
assert
false
false
false
[ Node { type: 'Identifier', start: 16, end: 17, name: 'b' } ]
Node { type: 'Identifier', start: 16, end: 17, name: 'b' }
Identifier
16
17
b
Node {
  type: 'BlockStatement',
  start: 19,
  end: 66,
  body: 
   [ Node {
       type: 'IfStatement',
       start: 25,
       end: 64,
       test: [Node],
       consequent: [Node],
       alternate: null } ] }
BlockStatement
19
66
[ Node {
    type: 'IfStatement',
    start: 25,
    end: 64,
    test: 
     Node {
       type: 'UnaryExpression',
       start: 29,
       end: 31,
       operator: '!',
       prefix: true,
       argument: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 41, end: 64, argument: [Node] },
    alternate: null } ]
Node {
  type: 'IfStatement',
  start: 25,
  end: 64,
  test: 
   Node {
     type: 'UnaryExpression',
     start: 29,
     end: 31,
     operator: '!',
     prefix: true,
     argument: Node { type: 'Identifier', start: 30, end: 31, name: 'b' } },
  consequent: 
   Node {
     type: 'ThrowStatement',
     start: 41,
     end: 64,
     argument: 
      Node {
        type: 'NewExpression',
        start: 47,
        end: 63,
        callee: [Node],
        arguments: [Array] } },
  alternate: null }
IfStatement
25
64
Node {
  type: 'UnaryExpression',
  start: 29,
  end: 31,
  operator: '!',
  prefix: true,
  argument: Node { type: 'Identifier', start: 30, end: 31, name: 'b' } }
UnaryExpression
29
31
!
true
Node { type: 'Identifier', start: 30, end: 31, name: 'b' }
Identifier
30
31
b
Node {
  type: 'ThrowStatement',
  start: 41,
  end: 64,
  argument: 
   Node {
     type: 'NewExpression',
     start: 47,
     end: 63,
     callee: Node { type: 'Identifier', start: 51, end: 56, name: 'Error' },
     arguments: [ [Node] ] } }
ThrowStatement
41
64
Node {
  type: 'NewExpression',
  start: 47,
  end: 63,
  callee: Node { type: 'Identifier', start: 51, end: 56, name: 'Error' },
  arguments: 
   [ Node { type: 'Literal', start: 57, end: 62, value: 'Bad', raw: '"Bad"' } ] }
NewExpression
47
63
Node { type: 'Identifier', start: 51, end: 56, name: 'Error' }
Identifier
51
56
Error
[ Node { type: 'Literal', start: 57, end: 62, value: 'Bad', raw: '"Bad"' } ]
Node { type: 'Literal', start: 57, end: 62, value: 'Bad', raw: '"Bad"' }
Literal
57
62
Bad
"Bad"
null
[+] Exception: function-constructor-semantics.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 329,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 77,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 79,
       end: 93,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 95,
       end: 234,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 236,
       end: 261,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 262,
       end: 328,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
329
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 77,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 16, end: 77, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 79,
    end: 93,
    expression: 
     Node {
       type: 'CallExpression',
       start: 79,
       end: 92,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 95,
    end: 234,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 100,
       end: 109,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 111,
       end: 120,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 122,
       end: 125,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 127, end: 234, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 236,
    end: 261,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 262,
    end: 328,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 266,
       end: 278,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 284, end: 328, argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 77,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 13, end: 14, name: 'x' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 16,
     end: 77,
     body: [ [Node], [Node] ] } }
FunctionDeclaration
0
77
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[ Node { type: 'Identifier', start: 13, end: 14, name: 'x' } ]
Node { type: 'Identifier', start: 13, end: 14, name: 'x' }
Identifier
13
14
x
Node {
  type: 'BlockStatement',
  start: 16,
  end: 77,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 22,
       end: 38,
       declarations: [Array],
       kind: 'var' },
     Node { type: 'ReturnStatement', start: 43, end: 75, argument: [Node] } ] }
BlockStatement
16
77
[ Node {
    type: 'VariableDeclaration',
    start: 22,
    end: 38,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ReturnStatement',
    start: 43,
    end: 75,
    argument: 
     Node {
       type: 'FunctionExpression',
       start: 50,
       end: 75,
       id: null,
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] } } ]
Node {
  type: 'VariableDeclaration',
  start: 22,
  end: 38,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 26,
       end: 37,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
22
38
[ Node {
    type: 'VariableDeclarator',
    start: 26,
    end: 37,
    id: Node { type: 'Identifier', start: 26, end: 29, name: 'tmp' },
    init: 
     Node {
       type: 'BinaryExpression',
       start: 32,
       end: 37,
       left: [Node],
       operator: '+',
       right: [Node] } } ]
Node {
  type: 'VariableDeclarator',
  start: 26,
  end: 37,
  id: Node { type: 'Identifier', start: 26, end: 29, name: 'tmp' },
  init: 
   Node {
     type: 'BinaryExpression',
     start: 32,
     end: 37,
     left: Node { type: 'Identifier', start: 32, end: 33, name: 'x' },
     operator: '+',
     right: Node { type: 'Literal', start: 36, end: 37, value: 1, raw: '1' } } }
VariableDeclarator
26
37
Node { type: 'Identifier', start: 26, end: 29, name: 'tmp' }
Identifier
26
29
tmp
Node {
  type: 'BinaryExpression',
  start: 32,
  end: 37,
  left: Node { type: 'Identifier', start: 32, end: 33, name: 'x' },
  operator: '+',
  right: Node { type: 'Literal', start: 36, end: 37, value: 1, raw: '1' } }
BinaryExpression
32
37
Node { type: 'Identifier', start: 32, end: 33, name: 'x' }
Identifier
32
33
x
+
Node { type: 'Literal', start: 36, end: 37, value: 1, raw: '1' }
Literal
36
37
1
1
var
Node {
  type: 'ReturnStatement',
  start: 43,
  end: 75,
  argument: 
   Node {
     type: 'FunctionExpression',
     start: 50,
     end: 75,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [],
     body: Node { type: 'BlockStatement', start: 61, end: 75, body: [Array] } } }
ReturnStatement
43
75
Node {
  type: 'FunctionExpression',
  start: 50,
  end: 75,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 61, end: 75, body: [ [Node] ] } }
FunctionExpression
50
75
null
[+] Exception: function-expression-exit.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 1245,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 272,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 274,
       end: 1001,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 1201,
       end: 1243,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ],
  sourceType: 'script' }
Program
0
1245
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 272,
    id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 15, end: 272, body: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 274,
    end: 1001,
    id: Node { type: 'Identifier', start: 283, end: 288, name: 'check' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 291, end: 1001, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 1201,
    end: 1243,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 1206,
       end: 1215,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 1217,
       end: 1224,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 1226,
       end: 1229,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 1235,
       end: 1243,
       expression: [Node] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 272,
  id: Node { type: 'Identifier', start: 9, end: 12, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 15, end: 272, body: [ [Node] ] } }
FunctionDeclaration
0
272
Node { type: 'Identifier', start: 9, end: 12, name: 'foo' }
Identifier
9
12
foo
false
false
false
[]
Node {
  type: 'BlockStatement',
  start: 15,
  end: 272,
  body: 
   [ Node { type: 'ReturnStatement', start: 21, end: 270, argument: [Node] } ] }
BlockStatement
15
272
[ Node {
    type: 'ReturnStatement',
    start: 21,
    end: 270,
    argument: 
     Node {
       type: 'FunctionExpression',
       start: 28,
       end: 270,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] } } ]
Node {
  type: 'ReturnStatement',
  start: 21,
  end: 270,
  argument: 
   Node {
     type: 'FunctionExpression',
     start: 28,
     end: 270,
     id: Node { type: 'Identifier', start: 37, end: 40, name: 'bar' },
     generator: false,
     expression: false,
     async: false,
     params: [ [Node] ],
     body: Node { type: 'BlockStatement', start: 46, end: 270, body: [Array] } } }
ReturnStatement
21
270
Node {
  type: 'FunctionExpression',
  start: 28,
  end: 270,
  id: Node { type: 'Identifier', start: 37, end: 40, name: 'bar' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 41, end: 44, name: 'str' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 46,
     end: 270,
     body: [ [Node], [Node], [Node] ] } }
FunctionExpression
28
270
Node { type: 'Identifier', start: 37, end: 40, name: 'bar' }
Identifier
37
40
bar
false
false
false
[ Node { type: 'Identifier', start: 41, end: 44, name: 'str' } ]
Node { type: 'Identifier', start: 41, end: 44, name: 'str' }
Identifier
41
44
str
Node {
  type: 'BlockStatement',
  start: 46,
  end: 270,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 56,
       end: 76,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 85,
       end: 108,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ReturnStatement',
       start: 117,
       end: 264,
       argument: [Node] } ] }
BlockStatement
46
270
[ Node {
    type: 'VariableDeclaration',
    start: 56,
    end: 76,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 85,
    end: 108,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ReturnStatement',
    start: 117,
    end: 264,
    argument: 
     Node {
       type: 'ArrayExpression',
       start: 124,
       end: 263,
       elements: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 56,
  end: 76,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 60,
       end: 75,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
56
76
[ Node {
    type: 'VariableDeclarator',
    start: 60,
    end: 75,
    id: Node { type: 'Identifier', start: 60, end: 69, name: 'barBefore' },
    init: Node { type: 'Identifier', start: 72, end: 75, name: 'bar' } } ]
Node {
  type: 'VariableDeclarator',
  start: 60,
  end: 75,
  id: Node { type: 'Identifier', start: 60, end: 69, name: 'barBefore' },
  init: Node { type: 'Identifier', start: 72, end: 75, name: 'bar' } }
VariableDeclarator
60
75
Node { type: 'Identifier', start: 60, end: 69, name: 'barBefore' }
Identifier
60
69
barBefore
Node { type: 'Identifier', start: 72, end: 75, name: 'bar' }
Identifier
72
75
bar
var
Node {
  type: 'VariableDeclaration',
  start: 85,
  end: 108,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 89,
       end: 107,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
85
108
[ Node {
    type: 'VariableDeclarator',
    start: 89,
    end: 107,
    id: Node { type: 'Identifier', start: 89, end: 95, name: 'result' },
    init: 
     Node {
       type: 'CallExpression',
       start: 98,
       end: 107,
       callee: [Node],
       arguments: [Array] } } ]
Node {
  type: 'VariableDeclarator',
  start: 89,
  end: 107,
  id: Node { type: 'Identifier', start: 89, end: 95, name: 'result' },
  init: 
   Node {
     type: 'CallExpression',
     start: 98,
     end: 107,
     callee: Node { type: 'Identifier', start: 98, end: 102, name: 'eval' },
     arguments: [ [Node] ] } }
VariableDeclarator
89
107
Node { type: 'Identifier', start: 89, end: 95, name: 'result' }
Identifier
89
95
result
Node {
  type: 'CallExpression',
  start: 98,
  end: 107,
  callee: Node { type: 'Identifier', start: 98, end: 102, name: 'eval' },
  arguments: 
   [ Node { type: 'Identifier', start: 103, end: 106, name: 'str' } ] }
CallExpression
98
107
Node { type: 'Identifier', start: 98, end: 102, name: 'eval' }
Identifier
98
102
eval
[ Node { type: 'Identifier', start: 103, end: 106, name: 'str' } ]
Node { type: 'Identifier', start: 103, end: 106, name: 'str' }
Identifier
103
106
str
var
Node {
  type: 'ReturnStatement',
  start: 117,
  end: 264,
  argument: 
   Node {
     type: 'ArrayExpression',
     start: 124,
     end: 263,
     elements: [ [Node], [Node], [Node], [Node] ] } }
ReturnStatement
117
264
Node {
  type: 'ArrayExpression',
  start: 124,
  end: 263,
  elements: 
   [ Node { type: 'Identifier', start: 138, end: 147, name: 'barBefore' },
     Node { type: 'Identifier', start: 161, end: 164, name: 'bar' },
     Node {
       type: 'FunctionExpression',
       start: 178,
       end: 233,
       id: null,
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node { type: 'Identifier', start: 247, end: 253, name: 'result' } ] }
ArrayExpression
124
263
[ Node { type: 'Identifier', start: 138, end: 147, name: 'barBefore' },
  Node { type: 'Identifier', start: 161, end: 164, name: 'bar' },
  Node {
    type: 'FunctionExpression',
    start: 178,
    end: 233,
    id: null,
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 190, end: 233, body: [Array] } },
  Node { type: 'Identifier', start: 247, end: 253, name: 'result' } ]
Node { type: 'Identifier', start: 138, end: 147, name: 'barBefore' }
Identifier
138
147
barBefore
Node { type: 'Identifier', start: 161, end: 164, name: 'bar' }
Identifier
161
164
bar
Node {
  type: 'FunctionExpression',
  start: 178,
  end: 233,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 190, end: 233, body: [ [Node] ] } }
FunctionExpression
178
233
null
[+] Exception: function-name-scope.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 496,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 31,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 32,
       end: 49,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 51,
       end: 242,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 244,
       end: 258,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 260,
       end: 397,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 399,
       end: 419,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 420,
       end: 494,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
496
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 31,
    id: Node { type: 'Identifier', start: 9, end: 15, name: 'thingy' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 19, end: 31, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 32,
    end: 49,
    expression: 
     Node {
       type: 'CallExpression',
       start: 32,
       end: 48,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 51,
    end: 242,
    id: Node { type: 'Identifier', start: 60, end: 63, name: 'foo' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 67, end: 242, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 244,
    end: 258,
    expression: 
     Node {
       type: 'CallExpression',
       start: 244,
       end: 257,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 260,
    end: 397,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 265,
       end: 274,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 276,
       end: 282,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 284,
       end: 287,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 289, end: 397, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 399,
    end: 419,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 420,
    end: 494,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 424,
       end: 444,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 450, end: 494, argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 31,
  id: Node { type: 'Identifier', start: 9, end: 15, name: 'thingy' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 16, end: 17, name: 'f' } ],
  body: Node { type: 'BlockStatement', start: 19, end: 31, body: [ [Node] ] } }
FunctionDeclaration
0
31
Node { type: 'Identifier', start: 9, end: 15, name: 'thingy' }
Identifier
9
15
thingy
false
false
false
[ Node { type: 'Identifier', start: 16, end: 17, name: 'f' } ]
Node { type: 'Identifier', start: 16, end: 17, name: 'f' }
Identifier
16
17
f
Node {
  type: 'BlockStatement',
  start: 19,
  end: 31,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 25,
       end: 29,
       expression: [Node] } ] }
BlockStatement
19
31
[ Node {
    type: 'ExpressionStatement',
    start: 25,
    end: 29,
    expression: 
     Node {
       type: 'CallExpression',
       start: 25,
       end: 28,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'ExpressionStatement',
  start: 25,
  end: 29,
  expression: 
   Node {
     type: 'CallExpression',
     start: 25,
     end: 28,
     callee: Node { type: 'Identifier', start: 25, end: 26, name: 'f' },
     arguments: [] } }
ExpressionStatement
25
29
Node {
  type: 'CallExpression',
  start: 25,
  end: 28,
  callee: Node { type: 'Identifier', start: 25, end: 26, name: 'f' },
  arguments: [] }
CallExpression
25
28
Node { type: 'Identifier', start: 25, end: 26, name: 'f' }
Identifier
25
26
f
[]
Node {
  type: 'ExpressionStatement',
  start: 32,
  end: 49,
  expression: 
   Node {
     type: 'CallExpression',
     start: 32,
     end: 48,
     callee: Node { type: 'Identifier', start: 32, end: 40, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
32
49
Node {
  type: 'CallExpression',
  start: 32,
  end: 48,
  callee: Node { type: 'Identifier', start: 32, end: 40, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 41, end: 47, name: 'thingy' } ] }
CallExpression
32
48
Node { type: 'Identifier', start: 32, end: 40, name: 'noInline' }
Identifier
32
40
noInline
[ Node { type: 'Identifier', start: 41, end: 47, name: 'thingy' } ]
Node { type: 'Identifier', start: 41, end: 47, name: 'thingy' }
Identifier
41
47
thingy
Node {
  type: 'FunctionDeclaration',
  start: 51,
  end: 242,
  id: Node { type: 'Identifier', start: 60, end: 63, name: 'foo' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 64, end: 65, name: 'a' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 67,
     end: 242,
     body: [ [Node], [Node], [Node], [Node], [Node], [Node] ] } }
FunctionDeclaration
51
242
Node { type: 'Identifier', start: 60, end: 63, name: 'foo' }
Identifier
60
63
foo
false
false
false
[ Node { type: 'Identifier', start: 64, end: 65, name: 'a' } ]
Node { type: 'Identifier', start: 64, end: 65, name: 'a' }
Identifier
64
65
a
Node {
  type: 'BlockStatement',
  start: 67,
  end: 242,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 73,
       end: 79,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 84,
       end: 105,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ExpressionStatement',
       start: 110,
       end: 143,
       expression: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 148,
       end: 163,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'ForStatement',
       start: 168,
       end: 221,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'ReturnStatement',
       start: 226,
       end: 240,
       argument: [Node] } ] }
BlockStatement
67
242
[ Node {
    type: 'VariableDeclaration',
    start: 73,
    end: 79,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 84,
    end: 105,
    test: Node { type: 'Identifier', start: 88, end: 89, name: 'a' },
    consequent: 
     Node {
       type: 'ExpressionStatement',
       start: 99,
       end: 105,
       expression: [Node] },
    alternate: null },
  Node {
    type: 'ExpressionStatement',
    start: 110,
    end: 143,
    expression: 
     Node {
       type: 'CallExpression',
       start: 110,
       end: 142,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 148,
    end: 163,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'ForStatement',
    start: 168,
    end: 221,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 173,
       end: 182,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 184,
       end: 194,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 196,
       end: 199,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 209,
       end: 221,
       expression: [Node] } },
  Node {
    type: 'ReturnStatement',
    start: 226,
    end: 240,
    argument: Node { type: 'Identifier', start: 233, end: 239, name: 'result' } } ]
Node {
  type: 'VariableDeclaration',
  start: 73,
  end: 79,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 77,
       end: 78,
       id: [Node],
       init: null } ],
  kind: 'var' }
VariableDeclaration
73
79
[ Node {
    type: 'VariableDeclarator',
    start: 77,
    end: 78,
    id: Node { type: 'Identifier', start: 77, end: 78, name: 'x' },
    init: null } ]
Node {
  type: 'VariableDeclarator',
  start: 77,
  end: 78,
  id: Node { type: 'Identifier', start: 77, end: 78, name: 'x' },
  init: null }
VariableDeclarator
77
78
Node { type: 'Identifier', start: 77, end: 78, name: 'x' }
Identifier
77
78
x
null
[+] Exception: function-reentry-infer-on-self.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 645,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 29,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 30,
       end: 45,
       expression: [Node] },
     Node {
       type: 'FunctionDeclaration',
       start: 47,
       end: 252,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 253,
       end: 268,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 270,
       end: 417,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 547,
       end: 572,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 573,
       end: 644,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
645
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 29,
    id: Node { type: 'Identifier', start: 9, end: 13, name: 'call' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node] ],
    body: Node { type: 'BlockStatement', start: 17, end: 29, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 30,
    end: 45,
    expression: 
     Node {
       type: 'CallExpression',
       start: 30,
       end: 44,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'FunctionDeclaration',
    start: 47,
    end: 252,
    id: Node { type: 'Identifier', start: 56, end: 60, name: 'sink' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 68, end: 252, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 253,
    end: 268,
    expression: 
     Node {
       type: 'CallExpression',
       start: 253,
       end: 267,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 270,
    end: 417,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 275,
       end: 284,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 286,
       end: 296,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 298,
       end: 301,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 303, end: 417, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 547,
    end: 572,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 573,
    end: 644,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 577,
       end: 585,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 591, end: 644, argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 29,
  id: Node { type: 'Identifier', start: 9, end: 13, name: 'call' },
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 14, end: 15, name: 'o' } ],
  body: Node { type: 'BlockStatement', start: 17, end: 29, body: [ [Node] ] } }
FunctionDeclaration
0
29
Node { type: 'Identifier', start: 9, end: 13, name: 'call' }
Identifier
9
13
call
false
false
false
[ Node { type: 'Identifier', start: 14, end: 15, name: 'o' } ]
Node { type: 'Identifier', start: 14, end: 15, name: 'o' }
Identifier
14
15
o
Node {
  type: 'BlockStatement',
  start: 17,
  end: 29,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 19,
       end: 27,
       expression: [Node] } ] }
BlockStatement
17
29
[ Node {
    type: 'ExpressionStatement',
    start: 19,
    end: 27,
    expression: 
     Node {
       type: 'AssignmentExpression',
       start: 19,
       end: 26,
       operator: '=',
       left: [Node],
       right: [Node] } } ]
Node {
  type: 'ExpressionStatement',
  start: 19,
  end: 27,
  expression: 
   Node {
     type: 'AssignmentExpression',
     start: 19,
     end: 26,
     operator: '=',
     left: 
      Node {
        type: 'MemberExpression',
        start: 19,
        end: 22,
        object: [Node],
        property: [Node],
        computed: false },
     right: Node { type: 'Literal', start: 25, end: 26, value: 3, raw: '3' } } }
ExpressionStatement
19
27
Node {
  type: 'AssignmentExpression',
  start: 19,
  end: 26,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 19,
     end: 22,
     object: Node { type: 'Identifier', start: 19, end: 20, name: 'o' },
     property: Node { type: 'Identifier', start: 21, end: 22, name: 'x' },
     computed: false },
  right: Node { type: 'Literal', start: 25, end: 26, value: 3, raw: '3' } }
AssignmentExpression
19
26
=
Node {
  type: 'MemberExpression',
  start: 19,
  end: 22,
  object: Node { type: 'Identifier', start: 19, end: 20, name: 'o' },
  property: Node { type: 'Identifier', start: 21, end: 22, name: 'x' },
  computed: false }
MemberExpression
19
22
Node { type: 'Identifier', start: 19, end: 20, name: 'o' }
Identifier
19
20
o
Node { type: 'Identifier', start: 21, end: 22, name: 'x' }
Identifier
21
22
x
false
Node { type: 'Literal', start: 25, end: 26, value: 3, raw: '3' }
Literal
25
26
3
3
Node {
  type: 'ExpressionStatement',
  start: 30,
  end: 45,
  expression: 
   Node {
     type: 'CallExpression',
     start: 30,
     end: 44,
     callee: Node { type: 'Identifier', start: 30, end: 38, name: 'noInline' },
     arguments: [ [Node] ] } }
ExpressionStatement
30
45
Node {
  type: 'CallExpression',
  start: 30,
  end: 44,
  callee: Node { type: 'Identifier', start: 30, end: 38, name: 'noInline' },
  arguments: 
   [ Node { type: 'Identifier', start: 39, end: 43, name: 'call' } ] }
CallExpression
30
44
Node { type: 'Identifier', start: 30, end: 38, name: 'noInline' }
Identifier
30
38
noInline
[ Node { type: 'Identifier', start: 39, end: 43, name: 'call' } ]
Node { type: 'Identifier', start: 39, end: 43, name: 'call' }
Identifier
39
43
call
Node {
  type: 'FunctionDeclaration',
  start: 47,
  end: 252,
  id: Node { type: 'Identifier', start: 56, end: 60, name: 'sink' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 62, end: 63, name: 'p' },
     Node { type: 'Identifier', start: 65, end: 66, name: 'q' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 68,
     end: 252,
     body: [ [Node], [Node], [Node] ] } }
FunctionDeclaration
47
252
Node { type: 'Identifier', start: 56, end: 60, name: 'sink' }
Identifier
56
60
sink
false
false
false
[ Node { type: 'Identifier', start: 62, end: 63, name: 'p' },
  Node { type: 'Identifier', start: 65, end: 66, name: 'q' } ]
Node { type: 'Identifier', start: 62, end: 63, name: 'p' }
Identifier
62
63
p
Node { type: 'Identifier', start: 65, end: 66, name: 'q' }
Identifier
65
66
q
Node {
  type: 'BlockStatement',
  start: 68,
  end: 252,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 74,
       end: 98,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 103,
       end: 227,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ReturnStatement',
       start: 232,
       end: 250,
       argument: [Node] } ] }
BlockStatement
68
252
[ Node {
    type: 'VariableDeclaration',
    start: 74,
    end: 98,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 103,
    end: 227,
    test: Node { type: 'Identifier', start: 107, end: 108, name: 'p' },
    consequent: Node { type: 'BlockStatement', start: 110, end: 227, body: [Array] },
    alternate: null },
  Node {
    type: 'ReturnStatement',
    start: 232,
    end: 250,
    argument: 
     Node {
       type: 'ObjectExpression',
       start: 239,
       end: 249,
       properties: [Array] } } ]
Node {
  type: 'VariableDeclaration',
  start: 74,
  end: 98,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 78,
       end: 97,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
74
98
[ Node {
    type: 'VariableDeclarator',
    start: 78,
    end: 97,
    id: Node { type: 'Identifier', start: 78, end: 79, name: 'f' },
    init: 
     Node {
       type: 'FunctionExpression',
       start: 82,
       end: 97,
       id: null,
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] } } ]
Node {
  type: 'VariableDeclarator',
  start: 78,
  end: 97,
  id: Node { type: 'Identifier', start: 78, end: 79, name: 'f' },
  init: 
   Node {
     type: 'FunctionExpression',
     start: 82,
     end: 97,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [],
     body: Node { type: 'BlockStatement', start: 94, end: 97, body: [] } } }
VariableDeclarator
78
97
Node { type: 'Identifier', start: 78, end: 79, name: 'f' }
Identifier
78
79
f
Node {
  type: 'FunctionExpression',
  start: 82,
  end: 97,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 94, end: 97, body: [] } }
FunctionExpression
82
97
null
[+] Exception: function-sinking-no-double-allocate.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 568,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 144,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 145,
       end: 160,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 162,
       end: 324,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 454,
       end: 479,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 480,
       end: 499,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 500,
       end: 567,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
568
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 144,
    id: Node { type: 'Identifier', start: 9, end: 13, name: 'sink' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 21, end: 144, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 145,
    end: 160,
    expression: 
     Node {
       type: 'CallExpression',
       start: 145,
       end: 159,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 162,
    end: 324,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 167,
       end: 176,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 178,
       end: 187,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 189,
       end: 192,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 194, end: 324, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 454,
    end: 479,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 480,
    end: 499,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 500,
    end: 567,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 504,
       end: 516,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 522, end: 567, argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 144,
  id: Node { type: 'Identifier', start: 9, end: 13, name: 'sink' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 15, end: 16, name: 'p' },
     Node { type: 'Identifier', start: 18, end: 19, name: 'q' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 21,
     end: 144,
     body: [ [Node], [Node], [Node] ] } }
FunctionDeclaration
0
144
Node { type: 'Identifier', start: 9, end: 13, name: 'sink' }
Identifier
9
13
sink
false
false
false
[ Node { type: 'Identifier', start: 15, end: 16, name: 'p' },
  Node { type: 'Identifier', start: 18, end: 19, name: 'q' } ]
Node { type: 'Identifier', start: 15, end: 16, name: 'p' }
Identifier
15
16
p
Node { type: 'Identifier', start: 18, end: 19, name: 'q' }
Identifier
18
19
q
Node {
  type: 'BlockStatement',
  start: 21,
  end: 144,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 27,
       end: 61,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 66,
       end: 104,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ReturnStatement',
       start: 109,
       end: 142,
       argument: [Node] } ] }
BlockStatement
21
144
[ Node {
    type: 'VariableDeclaration',
    start: 27,
    end: 61,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 66,
    end: 104,
    test: Node { type: 'Identifier', start: 70, end: 71, name: 'p' },
    consequent: Node { type: 'BlockStatement', start: 73, end: 104, body: [Array] },
    alternate: null },
  Node {
    type: 'ReturnStatement',
    start: 109,
    end: 142,
    argument: 
     Node {
       type: 'FunctionExpression',
       start: 116,
       end: 141,
       id: null,
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] } } ]
Node {
  type: 'VariableDeclaration',
  start: 27,
  end: 61,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 31,
       end: 60,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
27
61
[ Node {
    type: 'VariableDeclarator',
    start: 31,
    end: 60,
    id: Node { type: 'Identifier', start: 31, end: 32, name: 'g' },
    init: 
     Node {
       type: 'FunctionExpression',
       start: 35,
       end: 60,
       id: null,
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] } } ]
Node {
  type: 'VariableDeclarator',
  start: 31,
  end: 60,
  id: Node { type: 'Identifier', start: 31, end: 32, name: 'g' },
  init: 
   Node {
     type: 'FunctionExpression',
     start: 35,
     end: 60,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [ [Node] ],
     body: Node { type: 'BlockStatement', start: 47, end: 60, body: [Array] } } }
VariableDeclarator
31
60
Node { type: 'Identifier', start: 31, end: 32, name: 'g' }
Identifier
31
32
g
Node {
  type: 'FunctionExpression',
  start: 35,
  end: 60,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 44, end: 45, name: 'x' } ],
  body: Node { type: 'BlockStatement', start: 47, end: 60, body: [ [Node] ] } }
FunctionExpression
35
60
null
[+] Exception: function-sinking-osrexit.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 843,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 147,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 148,
       end: 163,
       expression: [Node] },
     Node {
       type: 'ForStatement',
       start: 165,
       end: 326,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] },
     Node {
       type: 'VariableDeclaration',
       start: 452,
       end: 478,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 479,
       end: 498,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 499,
       end: 646,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'VariableDeclaration',
       start: 721,
       end: 746,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'VariableDeclaration',
       start: 747,
       end: 768,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 769,
       end: 842,
       test: [Node],
       consequent: [Node],
       alternate: null } ],
  sourceType: 'script' }
Program
0
843
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 147,
    id: Node { type: 'Identifier', start: 9, end: 13, name: 'sink' },
    generator: false,
    expression: false,
    async: false,
    params: [ [Node], [Node] ],
    body: Node { type: 'BlockStatement', start: 21, end: 147, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 148,
    end: 163,
    expression: 
     Node {
       type: 'CallExpression',
       start: 148,
       end: 162,
       callee: [Node],
       arguments: [Array] } },
  Node {
    type: 'ForStatement',
    start: 165,
    end: 326,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 170,
       end: 179,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 181,
       end: 190,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 192,
       end: 195,
       operator: '++',
       prefix: true,
       argument: [Node] },
    body: Node { type: 'BlockStatement', start: 197, end: 326, body: [Array] } },
  Node {
    type: 'VariableDeclaration',
    start: 452,
    end: 478,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 479,
    end: 498,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 499,
    end: 646,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 503,
       end: 515,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 601, end: 646, argument: [Node] },
    alternate: null },
  Node {
    type: 'VariableDeclaration',
    start: 721,
    end: 746,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'VariableDeclaration',
    start: 747,
    end: 768,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 769,
    end: 842,
    test: 
     Node {
       type: 'BinaryExpression',
       start: 773,
       end: 785,
       left: [Node],
       operator: '!=',
       right: [Node] },
    consequent: Node { type: 'ThrowStatement', start: 791, end: 842, argument: [Node] },
    alternate: null } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 147,
  id: Node { type: 'Identifier', start: 9, end: 13, name: 'sink' },
  generator: false,
  expression: false,
  async: false,
  params: 
   [ Node { type: 'Identifier', start: 15, end: 16, name: 'p' },
     Node { type: 'Identifier', start: 18, end: 19, name: 'q' } ],
  body: 
   Node {
     type: 'BlockStatement',
     start: 21,
     end: 147,
     body: [ [Node], [Node], [Node] ] } }
FunctionDeclaration
0
147
Node { type: 'Identifier', start: 9, end: 13, name: 'sink' }
Identifier
9
13
sink
false
false
false
[ Node { type: 'Identifier', start: 15, end: 16, name: 'p' },
  Node { type: 'Identifier', start: 18, end: 19, name: 'q' } ]
Node { type: 'Identifier', start: 15, end: 16, name: 'p' }
Identifier
15
16
p
Node { type: 'Identifier', start: 18, end: 19, name: 'q' }
Identifier
18
19
q
Node {
  type: 'BlockStatement',
  start: 21,
  end: 147,
  body: 
   [ Node {
       type: 'VariableDeclaration',
       start: 27,
       end: 61,
       declarations: [Array],
       kind: 'var' },
     Node {
       type: 'IfStatement',
       start: 66,
       end: 107,
       test: [Node],
       consequent: [Node],
       alternate: null },
     Node {
       type: 'ReturnStatement',
       start: 112,
       end: 145,
       argument: [Node] } ] }
BlockStatement
21
147
[ Node {
    type: 'VariableDeclaration',
    start: 27,
    end: 61,
    declarations: [ [Node] ],
    kind: 'var' },
  Node {
    type: 'IfStatement',
    start: 66,
    end: 107,
    test: Node { type: 'Identifier', start: 70, end: 71, name: 'p' },
    consequent: Node { type: 'BlockStatement', start: 73, end: 107, body: [Array] },
    alternate: null },
  Node {
    type: 'ReturnStatement',
    start: 112,
    end: 145,
    argument: 
     Node {
       type: 'FunctionExpression',
       start: 119,
       end: 144,
       id: null,
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] } } ]
Node {
  type: 'VariableDeclaration',
  start: 27,
  end: 61,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 31,
       end: 60,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
27
61
[ Node {
    type: 'VariableDeclarator',
    start: 31,
    end: 60,
    id: Node { type: 'Identifier', start: 31, end: 32, name: 'g' },
    init: 
     Node {
       type: 'FunctionExpression',
       start: 35,
       end: 60,
       id: null,
       generator: false,
       expression: false,
       async: false,
       params: [Array],
       body: [Node] } } ]
Node {
  type: 'VariableDeclarator',
  start: 31,
  end: 60,
  id: Node { type: 'Identifier', start: 31, end: 32, name: 'g' },
  init: 
   Node {
     type: 'FunctionExpression',
     start: 35,
     end: 60,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [ [Node] ],
     body: Node { type: 'BlockStatement', start: 47, end: 60, body: [Array] } } }
VariableDeclarator
31
60
Node { type: 'Identifier', start: 31, end: 32, name: 'g' }
Identifier
31
32
g
Node {
  type: 'FunctionExpression',
  start: 35,
  end: 60,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: [ Node { type: 'Identifier', start: 44, end: 45, name: 'x' } ],
  body: Node { type: 'BlockStatement', start: 47, end: 60, body: [ [Node] ] } }
FunctionExpression
35
60
null
[+] Exception: function-sinking-put.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 365,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 0,
       end: 364,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
365
[ Node {
    type: 'ExpressionStatement',
    start: 0,
    end: 364,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1,
       end: 362,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'ExpressionStatement',
  start: 0,
  end: 364,
  expression: 
   Node {
     type: 'CallExpression',
     start: 1,
     end: 362,
     callee: 
      Node {
        type: 'FunctionExpression',
        start: 1,
        end: 360,
        id: null,
        generator: false,
        expression: false,
        async: false,
        params: [],
        body: [Node] },
     arguments: [] } }
ExpressionStatement
0
364
Node {
  type: 'CallExpression',
  start: 1,
  end: 362,
  callee: 
   Node {
     type: 'FunctionExpression',
     start: 1,
     end: 360,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [],
     body: Node { type: 'BlockStatement', start: 13, end: 360, body: [Array] } },
  arguments: [] }
CallExpression
1
362
Node {
  type: 'FunctionExpression',
  start: 1,
  end: 360,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: 
   Node {
     type: 'BlockStatement',
     start: 13,
     end: 360,
     body: [ [Node], [Node], [Node], [Node], [Node] ] } }
FunctionExpression
1
360
null
[+] Exception: function-with-defaults-inlining.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 378,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 0,
       end: 377,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
378
[ Node {
    type: 'ExpressionStatement',
    start: 0,
    end: 377,
    expression: 
     Node {
       type: 'CallExpression',
       start: 1,
       end: 375,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'ExpressionStatement',
  start: 0,
  end: 377,
  expression: 
   Node {
     type: 'CallExpression',
     start: 1,
     end: 375,
     callee: 
      Node {
        type: 'FunctionExpression',
        start: 1,
        end: 373,
        id: null,
        generator: false,
        expression: false,
        async: false,
        params: [],
        body: [Node] },
     arguments: [] } }
ExpressionStatement
0
377
Node {
  type: 'CallExpression',
  start: 1,
  end: 375,
  callee: 
   Node {
     type: 'FunctionExpression',
     start: 1,
     end: 373,
     id: null,
     generator: false,
     expression: false,
     async: false,
     params: [],
     body: Node { type: 'BlockStatement', start: 13, end: 373, body: [Array] } },
  arguments: [] }
CallExpression
1
375
Node {
  type: 'FunctionExpression',
  start: 1,
  end: 373,
  id: null,
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: 
   Node {
     type: 'BlockStatement',
     start: 13,
     end: 373,
     body: [ [Node], [Node], [Node], [Node], [Node], [Node] ] } }
FunctionExpression
1
373
null
[+] Exception: function-with-defaults-non-inlining.js:TypeError: Cannot read property 'hasOwnProperty' of null
======================================================
Node {
  type: 'Program',
  start: 0,
  end: 144,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 0,
       end: 131,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ExpressionStatement',
       start: 132,
       end: 143,
       expression: [Node] } ],
  sourceType: 'script' }
Program
0
144
[ Node {
    type: 'FunctionDeclaration',
    start: 0,
    end: 131,
    id: Node { type: 'Identifier', start: 9, end: 17, name: 'tryItOut' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 20, end: 131, body: [Array] } },
  Node {
    type: 'ExpressionStatement',
    start: 132,
    end: 143,
    expression: 
     Node {
       type: 'CallExpression',
       start: 132,
       end: 142,
       callee: [Node],
       arguments: [] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 0,
  end: 131,
  id: Node { type: 'Identifier', start: 9, end: 17, name: 'tryItOut' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: 
   Node {
     type: 'BlockStatement',
     start: 20,
     end: 131,
     body: [ [Node], [Node] ] } }
FunctionDeclaration
0
131
Node { type: 'Identifier', start: 9, end: 17, name: 'tryItOut' }
Identifier
9
17
tryItOut
false
false
false
[]
Node {
  type: 'BlockStatement',
  start: 20,
  end: 131,
  body: 
   [ Node {
       type: 'FunctionDeclaration',
       start: 26,
       end: 81,
       id: [Node],
       generator: false,
       expression: false,
       async: false,
       params: [],
       body: [Node] },
     Node {
       type: 'ForStatement',
       start: 86,
       end: 129,
       init: [Node],
       test: [Node],
       update: [Node],
       body: [Node] } ] }
BlockStatement
20
131
[ Node {
    type: 'FunctionDeclaration',
    start: 26,
    end: 81,
    id: Node { type: 'Identifier', start: 35, end: 36, name: 'f' },
    generator: false,
    expression: false,
    async: false,
    params: [],
    body: Node { type: 'BlockStatement', start: 39, end: 81, body: [Array] } },
  Node {
    type: 'ForStatement',
    start: 86,
    end: 129,
    init: 
     Node {
       type: 'VariableDeclaration',
       start: 91,
       end: 100,
       declarations: [Array],
       kind: 'var' },
    test: 
     Node {
       type: 'BinaryExpression',
       start: 102,
       end: 110,
       left: [Node],
       operator: '<',
       right: [Node] },
    update: 
     Node {
       type: 'UpdateExpression',
       start: 112,
       end: 115,
       operator: '++',
       prefix: false,
       argument: [Node] },
    body: 
     Node {
       type: 'ExpressionStatement',
       start: 125,
       end: 129,
       expression: [Node] } } ]
Node {
  type: 'FunctionDeclaration',
  start: 26,
  end: 81,
  id: Node { type: 'Identifier', start: 35, end: 36, name: 'f' },
  generator: false,
  expression: false,
  async: false,
  params: [],
  body: Node { type: 'BlockStatement', start: 39, end: 81, body: [ [Node] ] } }
FunctionDeclaration
26
81
Node { type: 'Identifier', start: 35, end: 36, name: 'f' }
Identifier
35
36
f
false
false
false
[]
Node {
  type: 'BlockStatement',
  start: 39,
  end: 81,
  body: 
   [ Node {
       type: 'ExpressionStatement',
       start: 49,
       end: 75,
       expression: [Node] } ] }
BlockStatement
39
81
[ Node {
    type: 'ExpressionStatement',
    start: 49,
    end: 75,
    expression: 
     Node {
       type: 'BinaryExpression',
       start: 49,
       end: 74,
       left: [Node],
       operator: '+',
       right: [Node] } } ]
Node {
  type: 'ExpressionStatement',
  start: 49,
  end: 75,
  expression: 
   Node {
     type: 'BinaryExpression',
     start: 49,
     end: 74,
     left: 
      Node {
        type: 'CallExpression',
        start: 49,
        end: 69,
        callee: [Node],
        arguments: [Array] },
     operator: '+',
     right: Node { type: 'Literal', start: 72, end: 74, value: '', raw: '""' } } }
ExpressionStatement
49
75
Node {
  type: 'BinaryExpression',
  start: 49,
  end: 74,
  left: 
   Node {
     type: 'CallExpression',
     start: 49,
     end: 69,
     callee: Node { type: 'Identifier', start: 49, end: 54, name: 'Array' },
     arguments: [ [Node] ] },
  operator: '+',
  right: Node { type: 'Literal', start: 72, end: 74, value: '', raw: '""' } }
BinaryExpression
49
74
Node {
  type: 'CallExpression',
  start: 49,
  end: 69,
  callee: Node { type: 'Identifier', start: 49, end: 54, name: 'Array' },
  arguments: 
   [ Node {
       type: 'AssignmentExpression',
       start: 56,
       end: 68,
       operator: '=',
       left: [Node],
       right: [Node] } ] }
CallExpression
49
69
Node { type: 'Identifier', start: 49, end: 54, name: 'Array' }
Identifier
49
54
Array
[ Node {
    type: 'AssignmentExpression',
    start: 56,
    end: 68,
    operator: '=',
    left: 
     Node {
       type: 'MemberExpression',
       start: 56,
       end: 61,
       object: [Node],
       property: [Node],
       computed: false },
    right: Node { type: 'ThisExpression', start: 64, end: 68 } } ]
Node {
  type: 'AssignmentExpression',
  start: 56,
  end: 68,
  operator: '=',
  left: 
   Node {
     type: 'MemberExpression',
     start: 56,
     end: 61,
     object: 
      Node {
        type: 'Literal',
        start: 56,
        end: 59,
        value: /x/,
        raw: '/x/',
        regex: [Object] },
     property: Node { type: 'Identifier', start: 60, end: 61, name: 'a' },
     computed: false },
  right: Node { type: 'ThisExpression', start: 64, end: 68 } }
AssignmentExpression
56
68
=
Node {
  type: 'MemberExpression',
  start: 56,
  end: 61,
  object: 
   Node {
     type: 'Literal',
     start: 56,
     end: 59,
     value: /x/,
     raw: '/x/',
     regex: { pattern: 'x', flags: '' } },
  property: Node { type: 'Identifier', start: 60, end: 61, name: 'a' },
  computed: false }
MemberExpression
56
61
Node {
  type: 'Literal',
  start: 56,
  end: 59,
  value: /x/,
  raw: '/x/',
  regex: { pattern: 'x', flags: '' } }
Literal
56
59
/x/
/x/
{ pattern: 'x', flags: '' }
x

Node { type: 'Identifier', start: 60, end: 61, name: 'a' }
Identifier
60
61
a
false
Node { type: 'ThisExpression', start: 64, end: 68 }
ThisExpression
64
68
+
Node { type: 'Literal', start: 72, end: 74, value: '', raw: '""' }
Literal
72
74

""
Node {
  type: 'ForStatement',
  start: 86,
  end: 129,
  init: 
   Node {
     type: 'VariableDeclaration',
     start: 91,
     end: 100,
     declarations: [ [Node] ],
     kind: 'var' },
  test: 
   Node {
     type: 'BinaryExpression',
     start: 102,
     end: 110,
     left: Node { type: 'Identifier', start: 102, end: 103, name: 'i' },
     operator: '<',
     right: Node { type: 'Literal', start: 106, end: 110, value: 1000, raw: '1000' } },
  update: 
   Node {
     type: 'UpdateExpression',
     start: 112,
     end: 115,
     operator: '++',
     prefix: false,
     argument: Node { type: 'Identifier', start: 112, end: 113, name: 'i' } },
  body: 
   Node {
     type: 'ExpressionStatement',
     start: 125,
     end: 129,
     expression: 
      Node {
        type: 'CallExpression',
        start: 125,
        end: 128,
        callee: [Node],
        arguments: [] } } }
ForStatement
86
129
Node {
  type: 'VariableDeclaration',
  start: 91,
  end: 100,
  declarations: 
   [ Node {
       type: 'VariableDeclarator',
       start: 95,
       end: 100,
       id: [Node],
       init: [Node] } ],
  kind: 'var' }
VariableDeclaration
91
100
[ Node {
    type: 'VariableDeclarator',
    start: 95,
    end: 100,
    id: Node { type: 'Identifier', start: 95, end: 96, name: 'i' },
    init: Node { type: 'Literal', start: 99, end: 100, value: 0, raw: '0' } } ]
Node {
  type: 'VariableDeclarator',
  start: 95,
  end: 100,
  id: Node { type: 'Identifier', start: 95, end: 96, name: 'i' },
  init: Node { type: 'Literal', start: 99, end: 100, value: 0, raw: '0' } }
VariableDeclarator
95
100
Node { type: 'Identifier', start: 95, end: 96, name: 'i' }
Identifier
95
96
i
Node { type: 'Literal', start: 99, end: 100, value: 0, raw: '0' }
Literal
99
100
0
0
var
Node {
  type: 'BinaryExpression',
  start: 102,
  end: 110,
  left: Node { type: 'Identifier', start: 102, end: 103, name: 'i' },
  operator: '<',
  right: Node { type: 'Literal', start: 106, end: 110, value: 1000, raw: '1000' } }
BinaryExpression
102
110
Node { type: 'Identifier', start: 102, end: 103, name: 'i' }
Identifier
102
103
i
<
Node { type: 'Literal', start: 106, end: 110, value: 1000, raw: '1000' }
Literal
106
110
1000
1000
Node {
  type: 'UpdateExpression',
  start: 112,
  end: 115,
  operator: '++',
  prefix: false,
  argument: Node { type: 'Identifier', start: 112, end: 113, name: 'i' } }
UpdateExpression
112
115
++
false
Node { type: 'Identifier', start: 112, end: 113, name: 'i' }
Identifier
112
113
i
Node {
  type: 'ExpressionStatement',
  start: 125,
  end: 129,
  expression: 
   Node {
     type: 'CallExpression',
     start: 125,
     end: 128,
     callee: Node { type: 'Identifier', start: 125, end: 126, name: 'f' },
     arguments: [] } }
ExpressionStatement
125
129
Node {
  type: 'CallExpression',
  start: 125,
  end: 128,
  callee: Node { type: 'Identifier', start: 125, end: 126, name: 'f' },
  arguments: [] }
CallExpression
125
128
Node { type: 'Identifier', start: 125, end: 126, name: 'f' }
Identifier
125
126
f
[]
Node {
  type: 'ExpressionStatement',
  start: 132,
  end: 143,
  expression: 
   Node {
     type: 'CallExpression',
     start: 132,
     end: 142,
     callee: Node { type: 'Identifier', start: 132, end: 140, name: 'tryItOut' },
     arguments: [] } }
ExpressionStatement
132
143
Node {
  type: 'CallExpression',
  start: 132,
  end: 142,
  callee: Node { type: 'Identifier', start: 132, end: 140, name: 'tryItOut' },
  arguments: [] }
CallExpression
132
142
Node { type: 'Identifier', start: 132, end: 140, name: 'tryItOut' }
Identifier
132
140
tryItOut
[]
script
[ { type: 'VariableDeclaration',
    code: 'var o = {\n    a: {},\n    b: {ba:[]}\n};' },
  { type: 'VariableDeclarator',
    code: 'o = {\n    a: {},\n    b: {ba:[]}\n}' },
  { type: 'Identifier', code: 'o' },
  { type: 'ObjectExpression',
    code: '{\n    a: {},\n    b: {ba:[]}\n}' },
  { type: 'Property', code: 'a: {}' },
  { type: 'Identifier', code: 'a' },
  { type: 'ObjectExpression', code: '{}' },
  { type: 'Property', code: 'b: {ba:[]}' },
  { type: 'Identifier', code: 'b' },
  { type: 'ObjectExpression', code: '{ba:[]}' },
  { type: 'Property', code: 'ba:[]' },
  { type: 'Identifier', code: 'ba' },
  { type: 'ArrayExpression', code: '[]' },
  { type: 'ExpressionStatement',
    code: 'o.b = Object.toString(o);' },
  { type: 'AssignmentExpression',
    code: 'o.b = Object.toString(o)' },
  { type: 'MemberExpression', code: 'o.b' },
  { type: 'Identifier', code: 'o' },
  { type: 'Identifier', code: 'b' },
  { type: 'CallExpression', code: 'Object.toString(o)' },
  { type: 'MemberExpression', code: 'Object.toString' },
  { type: 'Identifier', code: 'Object' },
  { type: 'Identifier', code: 'toString' },
  { type: 'Identifier', code: 'o' },
  { type: 'ClassDeclaration',
    code: 'class Foo extends Promise { }' },
  { type: 'Identifier', code: 'Foo' },
  { type: 'Identifier', code: 'Promise' },
  { type: 'ClassBody', code: '{ }' },
  { type: 'ExpressionStatement', code: 'noInline(Foo);' },
  { type: 'CallExpression', code: 'noInline(Foo)' },
  { type: 'Identifier', code: 'noInline' },
  { type: 'Identifier', code: 'Foo' },
  { type: 'ForStatement',
    code: 'for (var i = 0; i < 10000; ++i) {\n    var completed = false;\n    try {\n        Foo();\n        completed = true;\n    } catch (e) {\n    }\n    if (completed)\n        throw "Error: completed without throwing";\n}' },
  { type: 'VariableDeclaration', code: 'var i = 0' },
  { type: 'VariableDeclarator', code: 'i = 0' },
  { type: 'Identifier', code: 'i' },
  { type: 'Literal', code: '0' },
  { type: 'BinaryExpression', code: 'i < 10000' },
  { type: 'Identifier', code: 'i' },
  { type: 'Literal', code: '10000' },
  { type: 'UpdateExpression', code: '++i' },
  { type: 'Identifier', code: 'i' },
  { type: 'BlockStatement',
    code: '{\n    var completed = false;\n    try {\n        Foo();\n        completed = true;\n    } catch (e) {\n    }\n    if (completed)\n        throw "Error: completed without throwing";\n}' },
  { type: 'VariableDeclaration', code: 'var completed = false;' },
  { type: 'VariableDeclarator', code: 'completed = false' },
  { type: 'Identifier', code: 'completed' },
  { type: 'Literal', code: 'false' },
  { type: 'TryStatement',
    code: 'try {\n        Foo();\n        completed = true;\n    } catch (e) {\n    }' },
  { type: 'BlockStatement',
    code: '{\n        Foo();\n        completed = true;\n    }' },
  { type: 'ExpressionStatement', code: 'Foo();' },
  { type: 'CallExpression', code: 'Foo()' },
  { type: 'Identifier', code: 'Foo' },
  { type: 'ExpressionStatement', code: 'completed = true;' },
  { type: 'AssignmentExpression', code: 'completed = true' },
  { type: 'Identifier', code: 'completed' },
  { type: 'Literal', code: 'true' },
  { type: 'CatchClause', code: 'catch (e) {\n    }' },
  { type: 'Identifier', code: 'e' },
  { type: 'BlockStatement', code: '{\n    }' },
  { type: 'VariableDeclaration',
    code: 'var foo = function(o) {\n    var a = Array.prototype.slice.call(arguments);\n    var sum = 0;\n    for (var i = 0; i < a.length; ++i)\n        sum += a[i].x;\n    return sum;\n};' },
  { type: 'VariableDeclarator',
    code: 'foo = function(o) {\n    var a = Array.prototype.slice.call(arguments);\n    var sum = 0;\n    for (var i = 0; i < a.length; ++i)\n        sum += a[i].x;\n    return sum;\n}' },
  { type: 'Identifier', code: 'foo' },
  { type: 'FunctionExpression',
    code: 'function(o) {\n    var a = Array.prototype.slice.call(arguments);\n    var sum = 0;\n    for (var i = 0; i < a.length; ++i)\n        sum += a[i].x;\n    return sum;\n}' },
  { type: 'FunctionDeclaration',
    code: 'function foo(o) {\n    return delete o.f;\n}' },
  { type: 'Identifier', code: 'foo' },
  { type: 'Identifier', code: 'o' },
  { type: 'BlockStatement', code: '{\n    return delete o.f;\n}' },
  { type: 'ReturnStatement', code: 'return delete o.f;' },
  { type: 'UnaryExpression', code: 'delete o.f' },
  { type: 'MemberExpression', code: 'o.f' },
  { type: 'Identifier', code: 'o' },
  { type: 'Identifier', code: 'f' },
  { type: 'ExpressionStatement', code: 'noInline(foo);' },
  { type: 'CallExpression', code: 'noInline(foo)' },
  { type: 'Identifier', code: 'noInline' },
  { type: 'Identifier', code: 'foo' },
  { type: 'ForStatement',
    code: 'for (var i = 0; i < 10000; ++i) {\n    var o = {f:42};\n    var result = foo(o);\n    if (result !== true)\n        throw "Error: bad result: " + result;\n    if ("f" in o)\n        throw "Error: \\"f\\" still in ok";\n}' },
  { type: 'VariableDeclaration', code: 'var i = 0' },
  { type: 'VariableDeclarator', code: 'i = 0' },
  { type: 'Identifier', code: 'i' },
  { type: 'Literal', code: '0' },
  { type: 'BinaryExpression', code: 'i < 10000' },
  { type: 'Identifier', code: 'i' },
  { type: 'Literal', code: '10000' },
  { type: 'UpdateExpression', code: '++i' },
  { type: 'Identifier', code: 'i' },
  { type: 'BlockStatement',
    code: '{\n    var o = {f:42};\n    var result = foo(o);\n    if (result !== true)\n        throw "Error: bad result: " + result;\n    if ("f" in o)\n        throw "Error: \\"f\\" still in ok";\n}' },
  { type: 'VariableDeclaration', code: 'var o = {f:42};' },
  { type: 'VariableDeclarator', code: 'o = {f:42}' },
  { type: 'Identifier', code: 'o' },
  { type: 'ObjectExpression', code: '{f:42}' },
  { type: 'Property', code: 'f:42' },
  { type: 'Identifier', code: 'f' },
  { type: 'Literal', code: '42' },
  { type: 'VariableDeclaration', code: 'var result = foo(o);' },
  { type: 'VariableDeclarator', code: 'result = foo(o)' },
  { type: 'Identifier', code: 'result' },
  { type: 'CallExpression', code: 'foo(o)' },
  { type: 'Identifier', code: 'foo' },
  { type: 'Identifier', code: 'o' },
  { type: 'IfStatement',
    code: 'if (result !== true)\n        throw "Error: bad result: " + result;' },
  ... 9394 more items ]
[ 'o',
  'a',
  'b',
  'ba',
  'o',
  'b',
  'Object',
  'toString',
  'o',
  'Foo',
  'Promise',
  'noInline',
  'Foo',
  'i',
  'i',
  'i',
  'completed',
  'Foo',
  'completed',
  'e',
  'foo',
  'foo',
  'o',
  'o',
  'f',
  'noInline',
  'foo',
  'i',
  'i',
  'i',
  'o',
  'f',
  'result',
  'foo',
  'o',
  'result',
  'result',
  'f',
  'noInline',
  'f',
  'bar',
  'b',
  'b',
  'Error',
  'foo',
  'arguments',
  'test',
  'i',
  'i',
  'i',
  'foo',
  'e',
  'shouldBe',
  'actual',
  'expected',
  'actual',
  'expected',
  'Error',
  'actual',
  'shouldBe',
  'actual',
  'expected',
  'actual',
  'expected',
  'Error',
  'actual',
  'doIndexOf',
  'a',
  'a',
  'indexOf',
  'a',
  'bar',
  'f',
  'f',
  'array',
  'i',
  'i',
  'i',
  'bar',
  'shouldBe',
  'actual',
  'expected',
  'actual',
  'expected',
  'Error',
  'actual',
  'shouldBe',
  'actual',
  'expected',
  'actual',
  'expected',
  'Error',
  'actual',
  'shouldBe',
  'actual',
  'expected',
  'actual',
  'expected',
  'Error',
  'actual',
  ... 3375 more items ]
